/*
    RADMIR RolePlay
    основан на artem play

    (c) artem play <vk.com/loboda6>

    2024-2025.
*/
@___If_u_can_read_this_u_r_nerd();
@___If_u_can_read_this_u_r_nerd()		
{
    #emit	stack	0x7FFFFFFF
    #emit	inc.s	cellmax		
    static const ___[][] = {"pro-pawn", ".ru"};	
    #emit	retn
    #emit	load.s.pri	___		
    #emit	proc				
    #emit	proc				
    #emit	fill		cellmax	
    #emit	proc
    #emit	stack		1
    #emit	stor.alt	___	
    #emit	strb.i		2    
    #emit	switch		4
    #emit	retn    	
L1:
    #emit	jump	L1		
    #emit	zero	cellmin	
}

#include <a_samp>
#include <a_mysql>
#include <a_http> 
#include <crashdetect>
#include <foreach>
#include <performance>
#include <streamer>
#include <sscanf2>
#include <pawncmd>
#include <timerfix>
#include <profiler>
#include <zones>
#include <mxdate>
#include <yom_buttons>
#include <md5>
#include <crp>
#include <fly>
#include <system/cp.pwn>
#include <system/cp_race.pwn>
#include <system/pickup.pwn>
#include <colandreas>
#include <mxINI>
new car_accessories[MAX_VEHICLES][6];
#include <system/vehicle.pwn>
#include <TOTP>
#include <Pawn.RakNet>
#include <FCNPC>

stock LoadObject()
{
	#include <map>
	#include <map_roads>
	#include <int>
	#include <objects/voenkomat_int>
	#include <objects/garage_int>
	#include <objects/autosalon>
	#include <objects/zakuska>
	#include <objects/demorgan>
	#include <carsmarket>
	#include "modules/mptrasa.inc"
}

main()
{
	print("_______________________________________________________ ");
	print("	developer Artem Loboda © 2024-2025.	                   ");
	print("	artemplay dev © 2024-2025.		   			           ");
	print("_______________________________________________________ ");
}

#include "modules/mysql.inc"
#define SERVER_COLOR		"F3FF02"
#define SERVER_RUB 	        "rub"
#define MAX_FLOOD_RATE	(3000)
#define FLOOD_RATE_INC	(1000)
#define FLOOD_RATE_KICK	(5000)
#define MAX_GARAGE		500
#define     SCM             SendClientMessage
#define  	DSM 			DIALOG_STYLE_MSGBOX //0
#define 	DSI				DIALOG_STYLE_INPUT //1
#define 	DSL				DIALOG_STYLE_LIST //2
#define 	DSP				DIALOG_STYLE_PASSWORD //3
#define 	DST				DIALOG_STYLE_TABLIST //4
#define 	DSTH			DIALOG_STYLE_TABLIST_HEADERS //5
#define RandomEx(%1,%2) 					(random(%2-%1)+%1)
#define str_f(%0,%1) STRING_GLOBAL[0] = EOS, format(STRING_GLOBAL, sizeof STRING_GLOBAL, %0, %1), STRING_GLOBAL
#define SCMF(%0,%1,%2,%3) STRING_GLOBAL[0] = EOS, format(STRING_GLOBAL, sizeof(STRING_GLOBAL),%2,%3) && SCM(%0, %1, STRING_GLOBAL)
#define DLGF(%0,%1,%2,%3,%4,%5,%6,%7) string_dialog[0] = EOS, format(string_dialog, 1024, %4,%7), Dialog(%0, %1, %2, %3, string_dialog, %5, %6)
#define public:%0(%1) \
			forward %0(%1); \
				public %0(%1)
#define Kick:(%0) FixKick(%0)
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define cW  FFFFFF
#define cGold FFDD00
#define COR_RED             0xFF0000FF
#define COLOR_RED 			0xBE2D2DFF
#define COLOR_ORANGE 		0xFAAC58FF
#define COLOR_FAMILY        0xB9C1B8FF
#define COLOR_LightSeaGreen 0xABCDEFFF
#define COLOR_GREEN 		0x42B02CFF
#define COLOR_GOLD          0xFFD700FF
#define COLOR_WHITE         0xFFFFFFAA
#define COLOR_LIGHTRED 		0xFF6347FF 
#define COLOR_LIGHTBLUE 	0x6495EDFF
#define COLOR_YELLOW 		0xFFFF00FF
#define COLOR_BLUENEW 		0xB8CEF6FF
#define COLOR_BLUE 			0x94B0C1FF
#define COLOR_GREY 			0xAFAFAFFF
#define COLOR_CHAT			0xCECECEFF
#define MOVE_FORWARD          1
#define MOVE_BACK             2
#define MOVE_LEFT             3
#define MOVE_RIGHT            4
#define MOVE_FORWARD_LEFT     5
#define MOVE_FORWARD_RIGHT    6
#define MOVE_BACK_LEFT        7
#define MOVE_BACK_RIGHT       8
#define MAX_IP 30
#define MAX_RENT_VEH 40
#define MAX_OWNABLE_CARS		(1000)
#define MAX_PRIZES_CODE 6
#define MAX_PRIZES_CODE 6
#define vTimer 1 
#define vMaxN 250 
#define vMaxP 80 
#define IsPlayerVoicMuted(%0)  	GetPlayerData(%0, P_VOICEMUTE)

new bool:g_Repairing[MAX_PLAYERS];
new timerID[MAX_PLAYERS];
new typecode; // 1 - промокод | 2 - бонус-код
new code_name[40]; // название кода
new code_count_activation; // количество активаций 
new code_count_time; // количество времени
new code_additionally_type[MAX_PRIZES_CODE];
new code_additionally_id[MAX_PRIZES_CODE];
new code_additionally_count[MAX_PRIZES_CODE];
new code_additionally[MAX_PRIZES_CODE];
new player_DialogID[MAX_PLAYERS] = {-1, ...};
new g_pentball;
new g_jailSphere;
new playerCigarettes[MAX_PLAYERS];
new PlayerLauncher[MAX_PLAYERS];
new IteratorArray:VoicePlayers[MAX_PLAYERS]<MAX_PLAYERS>;
static online[3];
static const kalendbred[20] = {17,15,7,10,5,6,3,20,16,18,11,2,13,19,12,9,1,4,14,8};
#define SendClientEventWithArgF(%1,%2,%3,%4,%5) format(STRING_GLOBAL,sizeof(STRING_GLOBAL),%5), BitStream_2(%1,%2,%3,%4,STRING_GLOBAL)
#define SendClientEventF(%1,%2,%3,%4) format(STRING_GLOBAL,sizeof(STRING_GLOBAL),%4), BitStream_1(%1,%2,%3,STRING_GLOBAL)
enum E_SAB_STRUCT
{
    E_NAME[64],
    bool:E_MUSIC_START,
    E_VOLUME
}
enum
{
    RPC_AudioData = 3,
    RPC_AudioStreamOpen = 4,
    RPC_AudioStreamClose = 5,
    RPC_AudioStreamSetVolume = 34
}
new objectmp[12];
new objectmpq[7];
#define FSIN_CAR 1
#define FBI_CAR 2
#define PPS_CAR 3
new lastRepairTime[MAX_PLAYERS];
new g_subwoofer[MAX_VEHICLES][E_SAB_STRUCT];
new g_AdminBanCount[MAX_PLAYERS]; 
new g_AdminBanTimer[MAX_PLAYERS]; 
new g_AdminBannedTick[MAX_PLAYERS];
new g_AdminKickCount[MAX_PLAYERS];
new g_AdminKickTimer[MAX_PLAYERS];  
new g_AdminKickedTick[MAX_PLAYERS]; 
new g_AdminWarningCount[MAX_PLAYERS]; 
new g_AdminWarningTimer[MAX_PLAYERS]; 
new g_AdminWarnCount[MAX_PLAYERS]; 
new g_AdminWarnTimer[MAX_PLAYERS]; 
new g_AdminWarnedTick[MAX_PLAYERS];
new g_AdminWarnTick[MAX_PLAYERS];
new g_AdminOffBanCount[MAX_PLAYERS]; 
new g_AdminOffBanTimer[MAX_PLAYERS]; 
new g_AdminOffBannedTick[MAX_PLAYERS]; 
new g_AdminSbanTimer[MAX_PLAYERS]; 
new g_AdminSbanTick[MAX_PLAYERS]; 
new g_AdminBanIpCount[MAX_PLAYERS]; 
new g_AdminSbanCount[MAX_PLAYERS]; 
new g_AdminBanIpTimer[MAX_PLAYERS]; 
new g_AdminBannedIpTick[MAX_PLAYERS]; 
new timer_rwc = 7000;

enum E_INTERACTION_STRUCT
{
    E_I_NAME[64],
    E_I_TYPE,
    E_I_INDEX,
    Float: E_I_POS_X,
    Float: E_I_POS_Y,
    Float: E_I_POS_Z,
    E_AREA,
    E_WORLD,
	bool: E_I_NEED_VEHICLE,
	E_I_TEAM_NEED
}

new ugonka[MAX_PLAYERS] = 0;
new hacking_ugonka[MAX_PLAYERS] = 0;
new ugonka_veh[MAX_PLAYERS];
new ugonka_interaction[MAX_PLAYERS];
new ugonka_activations = 0;

enum
{
	E_TYPE_HACKING,
	E_TYPE_UGONKA,
}

#define MAX_CARS 20 

enum KALL_STUCTA {
    Float:KALL_X,
    Float:KALL_Y,
    Float:KALL_Z
}
new const KALL_POS[24][KALL_STUCTA] = {
    {-4205.0483398438, 4291.517578125, 104.85865783691},
    {-4209.224609375, 4285.76953125, 114.15016174316},
    {-4211.8637695313, 4282.13671875, 124.98139953613},
    {-4212.7504882813, 4280.9165039063, 136.54611206055},
    {-4211.87109375, 4282.126953125, 148.14859008789},
    {-4209.2211914063, 4285.7744140625, 158.97250366211},
    {-4205.037109375, 4291.533203125, 168.21435546875},
    {-4199.58984375, 4299.03125, 175.34121704102},
    {-4193.216796875, 4307.8022460938, 179.83883666992},
    {-4186.427734375, 4317.1469726563, 181.39273071289},
    {-4179.6396484375, 4326.4912109375, 179.86239624023},
    {-4173.2734375, 4335.251953125, 175.35949707031},
    {-4167.8237304688, 4342.7534179688, 168.24761962891},
    {-4163.6557617188, 4348.4916992188, 158.99514770508},
    {-4160.9877929688, 4352.1625976563, 148.18911743164},
    {-4160.1030273438, 4353.3798828125, 136.55972290039},
    {-4160.9990234375, 4352.146484375, 124.96620178223},
    {-4163.654296875, 4348.4916992188, 114.14640808105},
    {-4167.8208007813, 4342.7568359375, 104.87532043457},
    {-4173.2885742188, 4335.2309570313, 97.792106628418},
    {-4179.6362304688, 4326.4936523438, 93.292678833008},
    {-4186.4282226563, 4317.1459960938, 91.750267028809},
    {-4193.2265625, 4307.7895507813, 93.262390136719},
    {-4199.5883789063, 4299.0327148438, 97.764968872077}
};
new Kall[24][2];
new Kall_Lesso[3];
new Timer_Kall[2];

enum E_PLAYER_PURSUIT_STRUCT
{
    bool: E_ACTIVE,
    E_TARGET_ID,
}
new player_pursuit[MAX_PLAYERS][E_PLAYER_PURSUIT_STRUCT];

enum EM_GiftPrize 
{
    GifPriz_Name[32],
    GifPriz_Rar,
    GifPriz_Index,
    GifPriz_Type,
    GifPriz_Reward,
    GifPriz_Extra,
    GifPriz_Count
}
new GiftPrize[][EM_GiftPrize] = {
    {"Донат-монеты x25", 4,10,10,0,0,25},
    {"Кейс Зимняя Сказка", 1,360,8,1,0,1},
    {"Автомобиль Ferrari Puro", 4,3,3,0,0,17407},
    {"Донат-монеты x250", 4,10,10,0,0,250}
};

enum E_TRAFFIC_STRUCT
{
	Float:TR_POS_X,
	Float:TR_POS_Y,
	Float:TR_POS_Z,
	Float:TR_POS_RX,
	Float:TR_POS_RY,
	Float:TR_POS_RZ,
    TR_ColorStatus,
    TR_ObjectID,
    TR_AreaID,
};
new TrafficLight[][E_TRAFFIC_STRUCT] = 
{
    {221.78, 781.01, 10.99, 0.00, 0.00, -21.48},
	{215.73, 816.97, 10.99, 0.00, 0.00, 160.62},
	{115.19, 556.28, 10.99, 0.00, 0.00, 159.00},
	{296.30, 1141.47, 11.18, 0.00, 0.00, -5.97},
	{306.62, 1164.03, 11.15, 0.00, 0.00, 84.07},
	{280.46, 1175.87, 11.17, 0.00, 0.00, 174.22},
	{296.30, 1141.47, 11.18, 0.00, 0.00, -5.97},
	{316.10, 1672.47, 11.00, 0.00, 0.00, -95.00},
	{356.88, 1688.65, 11.00, 0.00, 0.00, 82.00},
	{-2371.03, 2790.48, 36.50, 0.00, 0.00, 0.00},
	{345.13, 1663.19, 11.00, 0.00, 0.00, -4.00},
	{329.09, 1697.92, 11.00, 0.00, 0.00, 158.00},
	{121.14, 519.93, 10.99, 0.00, 0.00, -20.82},
	{203.60, 794.94, 10.99, 0.00, 0.00, -110.82},
	{236.96, 801.75, 10.99, 0.00, 0.00, 68.64},
	{-360.29, 980.65, 11.12, 0.00, 0.00, 90.00},
	{-397.59, 961.71, 11.12, 0.00, 0.00, -90.00},
	{-363.54, 958.21, 11.12, 0.00, 0.00, 0.00},
	{-388.11, 983.68, 11.12, 0.00, 0.00, -180.00},
	{-409.38, 605.80, 11.10, 0.00, 0.00, -96.00},
	{-314.08, 571.19, 11.31, 0.00, 0.00, -6.00},
	{-294.12, 610.90, 11.10, 0.00, 0.00, 84.00},
	{-393.87, 645.57, 11.20, 0.00, 0.00, 179.00},
	{99.74, 535.13, 10.99, 0.00, 0.00, -109.62},
	{136.39, 540.71, 10.99, 0.00, 0.00, 69.72},
	{2300.21, -1684.35, 21.00, 0.00, 0.00, 90.00},
	{2450.07, -1885.35, 21.00, 0.00, 0.00, -90.00},
	{2299.93, -1743.28, 21.00, 0.00, 0.00, 90.00},
	{2299.95, -1864.80, 21.00, 0.00, 0.00, 90.00},
	{2620.19, -2144.45, 21.00, 0.00, 0.00, 90.00},
	{2704.35, -2140.69, 21.00, 0.00, 0.00, -180.00},
	{2449.85, -2165.37, 21.00, 0.00, 0.00, -90.00},
	{2475.49, -1890.17, 21.00, 0.00, 0.00, 0.00},
	{2584.59, -2140.25, 21.00, 0.00, 0.00, -180.00},
	{2454.84, -1860.03, 21.00, 0.00, 0.00, -180.00},
	{2615.52, -2169.83, 21.00, 0.00, 0.00, 0.00},
	{2454.76, -2140.05, 21.00, 0.00, 0.00, -180.00},
	{2731.87, -2144.67, 21.00, 0.00, 0.00, 90.00},
	{2704.09, -2165.50, 21.00, 0.00, 0.00, -90.00},
	{2475.21, -2170.08, 21.00, 0.00, 0.00, 0.00},
	{2250.00, -2144.83, 21.00, 0.00, 0.00, 90.00},
	{2245.29, -2170.15, 21.00, 0.00, 0.00, 0.00},
	{2224.51, -2144.68, 21.00, 0.00, 0.00, -180.00},
	{2295.25, -1890.02, 21.00, 0.00, 0.00, 0.00},
	{2274.69, -1859.95, 21.00, 0.00, 0.00, -180.00},
	{2295.14, -1768.74, 21.00, 0.00, 0.00, 0.00},
	{2274.74, -1738.61, 21.00, 0.00, 0.00, -180.00},
	{2295.73, -1710.04, 21.00, 0.00, 0.00, 0.00},
	{2274.66, -1679.49, 21.00, 0.00, 0.00, -180.00},
	{2269.97, -1763.92, 21.00, 0.00, 0.00, -90.00}
};

new STRING_GLOBAL[4024];
new string_dialog[4024];
new string_inventory[4024];
new str_q[1000];
new load_inventory[MAX_PLAYERS][2647 + 1];
#define MAX_ITEMS 500
new ItemDropSphere[MAX_ITEMS];
new actorId;
new Float: itempos[MAX_ITEMS][3];
new items_objs[MAX_ITEMS] = {-1, ...};
new Text3D: number_labels[MAX_ITEMS];
new number_item[32][MAX_ITEMS];
new region_item[32][MAX_ITEMS];
new type_item[MAX_ITEMS];
new item1[MAX_ITEMS], item2[MAX_ITEMS], item3[MAX_ITEMS], item4[MAX_ITEMS];
static conteiners[600];
static YAdminTag[40];
new apteka_cp;
new is_a_car_region[][5] = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "102", "103", "113", "116", "121", "122"," 123", "124", "125", "126", "134", "136", "138", "142", "147", "150", "152", "154", "156", "159", "161", "163", "164", "169", "173", "174", "177", "178", "186", "190", "193", "197", "198", "199", "774", "777", "797", "799", "763", "761", "750", "790", "725", "716"};
new bool:g_bPickupAvailable = false;
new Text3D:pame_text[MAX_PLAYERS] = {Text3D:-1, ...};
#define MAX_YAZ 50
enum Yas
{
	g_yid, Float:g_y[4], Text3D:g_text, g_ypod
};
enum
{
	task_one,
	task_two,
	task_free
}
new status_vetr = 0;
new timervetr = 0;
new DYaz[MAX_YAZ][Yas];
new TOTALY;
enum E_TRASH_STRUCT
{
    TRASH_CAR_model_id,
	Float: TRASH_CAR_POS_X,
	Float: TRASH_CAR_POS_Y,
	Float: TRASH_CAR_POS_Z,
	Float: TRASH_CAR_POS_A
};
enum E_PLAYER_TRASH
{
    TRASH_ID_CAR,
	TRASH_ID,
};
new const
	g_player_trash[MAX_PLAYERS][E_PLAYER_TRASH];
enum E_WORK_TRASH_STRUCT
{
	T_ID_TRASH,
    T_OWNER_TRASH,
	T_STATUS,
	Float: TRASH_POS_X,
	Float: TRASH_POS_Y,
	Float: TRASH_POS_Z,
	Float: TRASH_POS_A
};
new total_trash;
#define MAX_TRASH		(14)
new g_trash_bag[MAX_TRASH];
new const
	g_trash_work[MAX_TRASH][E_WORK_TRASH_STRUCT] =
{
	{1,-1,1,216.97,854.82,11.85,0.0},
	{2,-1,1,182.40,844.03,11.85,0.0},
	{3,-1,1,-268.85,557.04,12.50,0.0},
	{4,-1,1,-313.18,547.09,12.40,0.0},
	{5,-1,1,-398.32,658.32,11.95,0.0},
	{6,-1,1,-325.01,990.23,11.71,0.0},
	{7,-1,1,-365.77,1019.36,11.73,0.0},
	{8,-1,1,-1081.21,2208.38,37.77,0.0},
	{9,-1,1,-2416.06,2752.61,37.58,0.0},
	{10,-1,1,-2444.77,2799.61,37.58,0.0},
	{11,-1,1,-2392.11,2837.07,37.37,0.0},
	{12,-1,1,-2462.89,2830.77,37.58,0.0},
	{13,-1,1,-2377.93,2942.21,37.39,0.0},
	{14,-1,1,-2463.49,2939.42,37.41,0.0}
};
#define MAX_RAFFLESHOP 2
enum E_RAFFLE_SHOP
{
	RS_ID,
	RS_VEHICLE,
	RS_STATUS,
	RS_AREA,
	RS_TIME,
    RS_PRICE,
	RS_TICKETS
};
new g_raffleShop[MAX_RAFFLESHOP][E_RAFFLE_SHOP];
new Float: g_pos_car_raffle[MAX_RAFFLESHOP][4] =
{
	{983.79860, 2801.5598, 1001.2399, 182.4524},
	{1014.5068, 2801.6160, 1001.2430, 178.9288}
};

new g_cases_prize_type[51];
new g_cases_prize_status[51];
new Text3D: g_cases_prize_label[51];
new g_cases_prize_object[51];
new Float: g_load_cases_prize[51][4] = 
{
	{1660.14, 2188.08, 13.5476, -153.1},
	{812.977, 858.244, 11.0089, -25.6},
	{587.831, 814.291, 6.45317, -153.0},
	{408.348, 1029.47, 11.0, 174.5},
	{62.4303, 1413.72, 11.01, -100.1},
	{-17.385, 1346.55, 11.0492, 169.4},
	{-129.71, 1000.79, 11.0, 178.0},
	{-305.454, 776.127, 12.0635, 0.0},
	{-401.094, 873.701, 11.1163, 0.0},
	{-644.358, 943.265, 11.15, 0.0},
	{-825.942, 959.254, 11.1844, 0.0},
	{1784.37, 2239.52, 14.946, 177.7},
	{-454.727, 548.862, 10.7677, 179.8},
	{-428.975, 309.719, 11.187, -22.4},
	{-175.565, 306.946, 13.4475, 0.0},
	{165.102, 431.915, 10.1515, -47.4},
	{243.336, 443.479, 10.9896, -22.0},
	{512.474, 533.914, 15.671, -112.5},
	{881.477, 530.039, 14.8857, 0.0},
	{-409.889, 1031.15, 11.1475, 0.0},
	{-1100.7, 2177.51, 37.0545, 175.0},
	{-1732.71, 2902.23, 4.98741, 92.0},
	{1840.09, 2199.56, 14.7666, 0.0},
	{-1832.71, 2876.33, 5.00903, 0.0},
	{-2455.74, 2845.92, 36.8272, 91.4},
	{-2731.63, 2917.5, 36.7732, 0.0},
	{-2678.87, 2810.5, 36.6896, 0.0},
	{-2432.32, 2705.69, 38.64, -86.3999},
	{-2473.78, 2532.02, 45.4109, -179.5},
	{-2620.1, 1867.29, 52.1618, 20.2},
	{-2308.18, 1752.23, 52.2701, 0.0},
	{-2356.86, 277.99, 23.5469, 166.4},
	{-2254.09, 248.554, 23.5336, 0.0},
	{1723.07, 2313.95, 15.0941, 0.0},
	{-2179.67, -157.305, 25.1306, 170.5},
	{-2500.2, -93.6574, 12.9515, 165.7},
	{-2683.71, 129.159, 11.2387, 0.0},
	{-2320.12, -1664.1, 7.79904, 37.4},
	{561.18, -2373.07, 33.927, 0.0},
	{1013.99, -1891.34, 33.2248, 143.8},
	{2447.38, -653.927, 11.2868, -178.8},
	{2752.78, -1363.76, 6.93297, 178.8},
	{2556.45, -1699.8, 20.9032, 0.0},
	{2247.01, -1833.86, 20.963, -89.3001},
	{2161.82, 2373.79, 12.6037, 123.1},
	{1848.16, -2253.54, 6.35948, 0.0},
	{2468.26, -1429.96, 79.96, -22.8},
	{2328.79, 1983.02, 14.6779, 152.2},
	{1921.32, 1921.45, 14.6756, 0.0},
	{1858.38, 1851.62, 12.3173, 90.9},
	{1661.91, 1750.56, 15.8864, -125.4}
};
new PlainVeh[MAX_PLAYERS];
new PlayerIsPlain[MAX_PLAYERS];
new Float:gPlainPoints[][6] = 
{
	{3067.1174,-1692.0516,22.6096,2956.9998,-1756.3459,23.4460},
	{2956.9998,-1756.3459,23.4460,3165.6445,-1635.0178,35.8663},
	{3165.6445,-1635.0178,35.8663,3332.1897,-1538.1642,64.7331},
	{3332.1897,-1538.1642,64.7331,2896.8628,-1790.9038,23.4739},
	{2896.8628,-1790.9038,23.4739,3077.2085,-1686.1744,36.3143},
	{3077.2085,-1686.1744,36.3143,3248.0793,-1586.9467,68.7522},
	{3248.0793,-1586.9467,68.7522,3522.3499,-1519.8301,119.2229},
	{3522.3499,-1519.8301,119.2229,3741.7751,-1726.8237,160.2000},
	{3741.7751,-1726.8237,160.2000,3923.2622,-2111.8953,206.5434},
	{3923.2622,-2111.8953,206.5434,3812.6587,-2721.9631,270.4665},
	{3812.6587,-2721.9631,270.4665,3459.7429,-3053.7422,318.6687},
	{3459.7429,-3053.7422,318.6687,2422.6279,-3474.0422,310.0845},
	{2422.6279,-3474.0422,310.0845,1442.9294,-3721.1201,289.2856},
	{1442.9294,-3721.1201,289.2856,738.2652,-3860.7810,314.0082},
	{738.2652,-3860.7810,314.0082,-213.6886,-3986.2266,299.3324},
	{-213.6886,-3986.2266,299.3324,-1066.6820,-4123.0376,294.7901},
	{-1066.6820,-4123.0376,294.7901,-2115.7776,-4282.6362,287.4130},
	{-2115.7776,-4282.6362,287.4130,-2890.7095,-4389.3311,278.5424},
	{-2890.7095,-4389.3311,278.5424,-3144.3508,-5943.2930,150.2372},
	{-3144.3508,-5943.2930,150.2372,-3470.7573,-5940.1709,66.2390},
	{-3470.7573,-5940.1709,66.2390,-3851.1909,-5929.4204,9.2668},
	{-3851.1909,-5929.4204,9.2668,-3704.1899,-5748.6040,9.2646},
	{-3704.1899,-5748.6040,9.2646,0.00,0.00,0.00},
	{-3799.9634,-5812.8823,9.2715,-4073.0034,-5845.7446,9.2642},
	{-4073.0034,-5845.7446,9.2642,-3900.8433,-5844.8721,9.2808},
	{-3900.8433,-5844.8721,9.2808,-3649.0427,-5843.4746,23.1599},
	{-3649.0427,-5843.4746,23.1599,-3182.5005,-5840.9194,106.6187},
	{-3182.5005,-5840.9194,106.6187,-3077.1475,-5840.3418,131.5804},
	{-3077.1475,-5840.3418,131.5804,-2558.1750,-5740.7593,236.3791},
	{-2558.1750,-5740.7593,236.3791,-1994.1790,-5311.1206,314.9483},
	{-1994.1790,-5311.1206,314.9483,-1718.5100,-5118.8745,327.6672},
	{-1718.5100,-5118.8745,327.6672,-1172.2249,-4731.3804,347.1878},
	{-1172.2249,-4731.3804,347.1878,-472.1058,-4203.8354,388.6833},
	{-472.1058,-4203.8354,388.6833,34.0179,-3841.6841,359.2671},
	{34.0179,-3841.6841,359.2671,384.4878,-3597.1919,327.0163},
	{384.4878,-3597.1919,327.0163,779.0572,-3308.9319,288.6163},
	{779.0572,-3308.9319,288.6163,1454.2397,-2990.8550,232.1812},
	{1454.2397,-2990.8550,232.1812,2631.9622,-2967.2607,197.6221},
	{2631.9622,-2967.2607,197.6221,3317.2771,-2493.3672,211.6086},
	{3317.2771,-2493.3672,211.6086,3158.0935,-1524.6119,27.2028},
	{3158.0935,-1524.6119,27.2028,2975.9272,-1627.8405,23.4448},
	{2975.9272,-1627.8405,23.4448,2741.0786,-1976.6759,22.8139},
	{2741.0786,-1976.6759,22.8139,0.00,0.00,0.00}
};
new page_cars[MAX_PLAYERS];
new type_page_cars[MAX_PLAYERS];
enum E_DONATE_CREATE_STRUCT 
{ //донат меню
	DC_TYPE,
	DC_NAME[48],
	DC_ITEM_ID,
	DC_PRICE,
	DC_COUNT,
	DC_INDX
}
new g_donate_create[MAX_PLAYERS][E_DONATE_CREATE_STRUCT];
new Float:g_deteling_pos[3][3] = 
{
    {1806.7408, 2348.1177, 15.6892},
    {2208.4426, -2577.8613, 22.2402},
    {-2507.2603, 1154.1450, 9.0663}
};
new g_deteling_alt[4];
new g_player_deteling_id[MAX_PLAYERS];
new Text3D: sto_garage_label[3][4];
new sto_garage_status[3][4];
new Float: g_load_sto_garage[3][4][3] = 
{
    { // сто ЮЖНОЕ
        {2148.9890,-1841.8706,18.8191},
        {2154.1694,-1841.8856,18.8135},
        {2159.4741,-1841.8997,18.8135},
        {2164.5117,-1841.7710,18.8052}
    },
    { // сто лыткарино
        {-2506.4739, 1087.8359, 8.7268},
        {-2505.1187, 1091.5752, 8.7268},
        {-2502.2227, 1099.5433, 8.7268},
        {-2500.9036, 1103.1984, 8.7268}
    },
    { // сто арзамас
        {-319.8949,300.4803,13.1182},
		{-323.7070,301.0323,13.1182},
		{-332.1658,302.5240,13.0760},
		{-336.0356,303.2074,13.0577}
    }
};
new Float: g_exit_sto_garage[3][4][4] = 
{
	{ // сто юж
		{2190.1909,-1846.1271,18.6012,91.5612},
		{2190.1909,-1846.1271,18.6012,91.5612},
		{2190.1909,-1846.1271,18.6012,91.5612},
		{2190.1909,-1846.1271,18.6012,91.5612}
	},
	{ // сто арз
		{-2512.6118,1089.8873,9.1069,71.4236},
		{-2511.2183,1093.6545,9.1089,70.6559},
		{-2508.2732,1101.7422,9.1011,70.6097},
		{-2506.9089,1105.5415,9.1084,70.0977}
	},
	{ // сто лыткарино
		{-318.3556,308.2303,12.8560,350.2874},
		{-322.3306,308.9031,12.8581,349.5909},
		{-330.8936,309.9646,12.8482,350.7017},
		{-334.8936,310.6094,12.8277,351.2942}
	}
};
new color_veh[MAX_PLAYERS];
new loadcars[MAX_PLAYERS];
new loadcarsmax[MAX_PLAYERS] = 10;
new loadcarsmax_2[MAX_PLAYERS] = 10;
new loadtypecars[MAX_PLAYERS];
enum E_CAR_SHOP_STRUCT
{
    CAR_ID,
    CAR_NAME[32],
    CAR_PRICE,
    CAR_RENT_PRICE,
    CAR_FUEL_TYPE,
    CAR_CLASS_TYPE,
    CAR_MAX_SEATS,
    CAR_LOTTERY_CHANGE,
    Float:CAR_FUEL_MAX,
    CAR_CONTRY_TYPE,
    CAR_BRAND_TYPE,
    CAR_YEAR_ISSUE,
}
new g_load_car_shop[330][E_CAR_SHOP_STRUCT] = 
{
    {400, "Cayenne", 10000000, 0, 3, 3, 0, 30, 104.0, 1, 42, 2023},
    {402, "E63 AMG", 5000000, 0, 2, 3, 0, 55, 66.0, 1, 36, 2013},
    {405, "RS-6 Avant", 6000000, 13100, 3, 3, 0, 30, 75.0, 1, 2, 2002},
    {409, "", 13000000, 0, 3, 3, 0, 15, 100.0, 8, 45, 2003},
    {410, "C63S", 6000000, 0, 3, 3, 0, 35, 150.0, 1, 36, 2019},
    {415, "Aventador", 20000000, 0, 3, 3, 0, 5, 150.0, 10, 26, 2011},
    {429, "X222", 13000000, 0, 3, 3, 0, 15, 80.0, 1, 33, 2015},
    {451, "488 GTB", 11000000, 0, 3, 3, 0, 25, 92.0, 10, 11, 2012},
    {466, "G30", 6000000, 15000, 2, 3, 0, 40, 66.0, 1, 4, 2017},
    {480, "R8", 9000000, 15000, 3, 3, 0, 60, 80.0, 1, 2, 2006},
    {489, "TLC 200", 17000000, 9000, 2, 3, 0, 65, 93.0, 0, 51, 2007},
    {490, "Vogue", 8000000, 0, 3, 3, 0, 35, 150.0, 8, 27, 2019},
    {494, "Challanger", 4300000, 0, 2, 3, 0, 50, 75.0, 3, 8, 2010},
    {502, "Wraith", 13500000, 0, 3, 3, 0, 10, 83.0, 8, 45, 2013},
    {503, "GT-R", 6800000, 0, 3, 3, 2, 50, 74.0, 0, 38, 2022},
    {505, "Bentyaga", 12000000, 0, 3, 3, 0, 45, 85.0, 8, 3, 2015},
    {506, "911", 12400000, 0, 3, 3, 0, 20, 68.0, 1, 42, 2011},
    {533, "TTRS", 5500000, 0, 3, 3, 2, 60, 55.0, 1, 2, 2018},
    {541, "Portofino", 12000000, 0, 3, 3, 0, 20, 92.0, 10, 11, 2013},
    {543, "Model S", 6000000, 0, 0, 3, 0, 25, 90.0, 3, 52, 2009},
    {558, "M4", 4000000, 8000, 2, 3, 0, 60, 60.0, 1, 4, 2013},
    {573, "G65 6x6", 18000000, 0, 2, 3, 0, 5, 96.0, 1, 36, 2013},
    {579, "G65", 5500000, 0, 2, 3, 0, 45, 96.0, 1, 36, 2105},
    {587, "Quattro", 2500000, 0, 2, 3, 0, 0, 70.0, 1, 2, 1991},
    {602, "RC-F", 4000000, 20000, 2, 3, 2, 55, 66.0, 0, 28, 2019},
    {604, "Panamera T.", 8400000, 0, 3, 3, 0, 10, 80.0, 1, 42, 2009},
    {605, "Huracan", 14100000, 0, 3, 3, 2, 0, 80.0, 10, 26, 2014},
    {794, "M2", 6300000, 0, 3, 3, 2, 0, 74.0, 1, 4, 2015},
    {795, "4x4*2", 35000000, 0, 2, 3, 4, 0, 96.0, 1, 36, 2023},
    {796, "G-Clas", 19000000, 0, 2, 3, 4, 0, 75.0, 1, 36, 2016},
    {797, "Mustang GT 5.0", 5500000, 0, 2, 3, 2, 0, 58.0, 3, 12, 2015},
    {798, "W221 S", 3200000, 0, 2, 3, 4, 0, 90.0, 1, 36, 2005},
    {907, "X5 F15", 3600000, 0, 2, 3, 4, 0, 85.0, 1, 4, 2013},
    {965, "Pul", 25000000, 0, 2, 3, 4, 0, 80.0, 1, 36, 2016},
    {999, "Urus", 11500000, 0, 3, 3, 4, 0, 85.0, 10, 26, 2017},
    {15071, "LX570", 7800000, 0, 2, 3, 4, 0, 93.0, 0, 28, 2010},
    {15073, "740 F02", 2900000, 0, 2, 3, 4, 0, 82.0, 1, 4, 2008},
    {15075, "Grand Cherokee", 13000000, 0, 2, 3, 4, 0, 87.0, 3, 20, 2023},
    {15076, "Escalade", 11300000, 0, 2, 3, 4, 0, 117.0, 3, 6, 2014},
    {15082, "560 SE", 10000000, 0, 1, 3, 2, 0, 85.0, 1, 36, 1991},
    {15085, "Chiron", 395000000, 0, 3, 3, 2, 0, 100.0, 8, 5, 2016},
    {15089, "RS7", 5300000, 0, 2, 3, 4, 0, 100.0, 1, 2, 2013},
    {15092, "XC90", 3150000, 0, 2, 3, 4, 0, 71.0, 9, 54, 2006},
    {15094, "X6M F16", 4200000, 0, 2, 3, 4, 0, 100.0, 1, 4, 2008},
    {15109, "I8 Roadster", 11500000, 0, 0, 3, 2, 0, 50.0, 1, 4, 2013},
    {15108, "Levante 201", 6000000, 0, 2, 3, 4, 0, 90.0, 1, 32, 2011},
    {15107, "M5 F90", 13000000, 0, 2, 3, 4, 0, 90.0, 1, 4, 2019},    
    {15105, "M1", 22000000, 0, 1, 3, 2, 0, 70.0, 1, 4, 2010},
    {15113, "Corvette Z", 8000000, 0, 2, 3, 2, 0, 70.0, 3, 47, 2019},
    {15114, "GT63S", 13000000, 0, 3, 3, 4, 0, 90.0, 1, 36, 2019},
    {15116, "P1", 20000000, 0, 3, 3, 2, 0, 60.0, 11, 35, 2013},
    {15120, "E63", 11000000, 30000, 2, 3, 4, 0, 100.0, 1, 36, 2013},
    {15126, "X", 7000000, 40000, 0, 3, 4, 0, 100.0, 3, 52, 2015},
    {15137, "Fenyr SuperSport", 40000000, 100000, 3, 3, 2, 0, 70.0, 0, 56, 2015},
    {15142, "E63 20", 13000000, 0, 2, 3, 4, 0, 95.0, 1, 36, 2000},
    {15146, "CULLINAN", 55000000, 3000000, 3, 3, 4, 0, 100.0, 8, 45, 2018},
    {15148, "Range Rover Velar", 6000000, 120000, 2, 3, 4, 0, 60.0, 7, 27, 2017},
    {15153, "X7", 12000000, 200000, 2, 3, 4, 0, 80.0, 1, 4, 2018},
    {15155, "W124 Coupe AMG", 25000000, 150000, 2, 3, 2, 0, 90.0, 1, 36, 1995},
    {15156, "Turbo R", 300000000, 200000, 1, 3, 4, 0, 100.0, 8, 3, 1998},
    {15158, "M5 F90 LCI", 15000000, 800000, 3, 3, 4, 0, 60.0, 1, 4, 2011},
    {15159, "NSX", 15000000, 900000, 3, 3, 4, 0, 60.0, 0, 65, 2016},
    {15164, "M8 F92", 14500000, 800000, 3, 3, 4, 0, 68.0, 1, 4, 2021},
    {15165, "M4 G82", 11000000, 250000, 3, 3, 4, 0, 60.0, 1, 4, 2023},
    {15166, "S63 AMG", 11000000, 2800000, 2, 3, 2, 0, 70.0, 1, 36, 2018},
    {15167, "S500", 6000000, 1500000, 2, 3, 2, 0, 70.0, 1, 36, 2018},
    {15169, "Corvette C8", 13500000, 120000, 3, 3, 2, 0, 70.0, 3, 47, 2020},
    {15170, "F40", 40000000, 250000, 3, 3, 2, 0, 120.0, 10, 11, 1990},
    {15172, "LFA", 20000000, 230000, 3, 3, 2, 0, 73.0, 0, 28, 2012},
    {15173, "911 992", 18000000, 180000, 3, 3, 2, 0, 67.0, 1, 42, 2018},
    {15178, "SL65 AM", 10000000, 120000, 2, 3, 4, 0, 75.0, 1, 36, 2010},
    {15187, "599XX", 15000000, 100000, 3, 3, 2, 0, 105.0, 10, 11, 2010},
    {15188, "X6M F96", 15000000, 400000, 3, 3, 4, 0, 85.0, 1, 4, 2021},
    {15192, "Taycan Turbo S", 20000000, 240000, 0, 3, 4, 0, 67.0, 1, 42, 2021},
    {15213, "Camaro", 5000000, 50000, 2, 3, 2, 0, 72.0, 3, 47, 2017},
    {15219, "Mustang Shelby", 5000000, 100000, 2, 3, 2, 0, 65.0, 3, 12, 2013},
    {15225, "Countach", 25000000, 350000, 2, 3, 2, 0, 85.0, 10, 25, 1996},
    {15237, "911 Turbo 1975", 14000000, 300000, 2, 3, 2, 0, 60.0, 1, 42, 1975},
    {15211, "M6", 7000000, 140000, 2, 3, 2, 0, 70.0, 1, 4, 2013},
    {15206, "M635CSI E24 1986", 16000000, 340000, 2, 3, 2, 0, 70.0, 1, 4, 1986},
    {15236, "Huayra", 250000000, 5000000, 3, 3, 2, 0, 85.0, 10, 74, 2013},
    {15212, "Z8 E52", 30000000, 350000, 2, 3, 2, 0, 73.0, 1, 4, 2002},
    {15224, "Aventador SVJ", 22000000, 300000, 3, 3, 2, 0, 90.0, 10, 26, 2016},
    {15239, "", 3000000, 50000, 1, 3, 2, 0, 70.0, 5, 66, 2012},
    {15216, "", 4000000, 80000, 2, 3, 2, 0, 51.0, 3, 67, 1982},
    {15210, "M5 F10", 4000000, 90000, 2, 3, 4, 0, 80.0, 1, 4, 2013},
    {15228, "AMG GTR", 20000000, 140000, 3, 3, 2, 0, 65.0, 1, 36, 2023},
    {15217, "Charger SRT HellCat", 5000000, 170000, 2, 3, 2, 0, 70.0, 3, 8, 2017},
    {15215, "DS 23", 13000000, 250000, 1, 3, 4, 0, 65.0, 4, 69, 1976},
    {15222, "Jesko", 120000000, 4000000, 3, 3, 2, 0, 90.0, 9, 70, 2020},
    {15205, "Seven 24", 150000000, 2000000, 1, 3, 2, 0, 40.0, 8, 72, 1924},
    {15227, "Senna", 100000000, 1500000, 3, 3, 2, 0, 80.0, 8, 35, 2019},
    {15218, "VelociRaptor 6x6", 18000000, 600000, 2, 3, 2, 0, 100.0, 3, 12, 2018},
    {15204, "RS7 C8", 11000000, 40000, 2, 3, 4, 0, 74.0, 1, 2, 2020},
    {15235, "M600", 25000000, 600000, 3, 3, 2, 0, 70.0, 8, 73, 2010},
    {15230, "918 Spyder", 35000000, 1300000, 3, 3, 2, 0, 70.0, 1, 42, 2015},
    {15266, "Maybach G650 La", 70000000, 300000, 2, 3, 4, 0, 120.0, 1, 36, 2018},
    {15246, "RS4 Avant", 7000000, 70000, 2, 3, 4, 0, 58.0, 1, 2, 2022},
    {15247, "RS5 2018", 5500000, 50000, 2, 3, 2, 0, 58.0, 1, 2, 2018},
    {15248, "Q8", 15000000, 110000, 2, 3, 4, 0, 85.0, 1, 2, 2022},
    {15249, "X7 Facelift", 15000000, 110000, 2, 3, 4, 0, 85.0, 1, 4, 2022},
    {15250, "Divo", 750000000, 6200000, 3, 3, 2, 0, 100.0, 4, 5, 2020},
    {15252, "SF90", 75000000, 750000, 3, 3, 2, 0, 68.0, 10, 11, 2022},
    {15259, "GT", 18000000, 130000, 2, 3, 2, 0, 65.0, 3, 12, 2005},
    {15261, "Centenario", 164000000, 3400000, 3, 3, 2, 0, 90.0, 10, 26, 2018},
    {15263, "765LT", 65000000, 240000, 3, 3, 2, 0, 72.0, 8, 35, 2022},
    {15264, "C63 Coupe BE", 8000000, 60000, 2, 3, 2, 0, 41.0, 1, 36, 2013},
    {15265, "GL63 X166", 3800000, 50000, 2, 3, 4, 0, 100.0, 1, 36, 2016},
    {15269, "S63 AMG W223", 20000000, 230000, 2, 3, 4, 0, 65.0, 1, 36, 2022},
    {15270, "S500 W223", 12000000, 120000, 2, 3, 4, 0, 65.0, 1, 36, 2022},
    {15271, "400 Fairlady", 3000000, 90000, 2, 3, 2, 0, 62.0, 0, 38, 2022},
    {15286, "GLS 63 AMG", 18000000, 340000, 2, 3, 4, 0, 90.0, 1, 36, 2022},
    {15284, "RAM TRX", 15000000, 290000, 2, 3, 4, 0, 90.0, 3, 8, 2022},
    {15288, "Etron GT", 13000000, 180000, 0, 3, 4, 0, 90.0, 1, 2, 2022},
    {15289, "X5M", 15000000, 210000, 3, 3, 4, 0, 83.0, 1, 4, 2022},
    {15290, "LC 300", 12000000, 150000, 2, 3, 4, 0, 110.0, 0, 51, 2022},
    {15287, "Phantom", 65000000, 6000000, 3, 3, 4, 0, 110.0, 8, 45, 2022},
    {15602, "CLS 53", 70000000, 90000, 2, 3, 4, 0, 66.0, 1, 36, 2019},
    {15601, "512 TR", 20000000, 3000000, 2, 3, 2, 0, 100.0, 10, 11, 1994},
    {15611, "Veyron", 500000000, 350000, 3, 3, 2, 0, 100.0, 4, 5, 2015},
    {15613, "Gemera", 125000000, 900000, 3, 3, 2, 0, 75.0, 9, 70, 2022},
    {15622, "M3 F80 CS", 17000000, 2000000, 2, 3, 4, 0, 60.0, 1, 4, 2022},
    {15626, "Sian", 200000000, 40000000, 3, 3, 2, 0, 110.0, 10, 26, 2019},
    {15627, "EQG", 16000000, 1800000, 0, 3, 4, 0, 60.0, 1, 36, 2022},
    {15628, "Cayenne Turbo GT", 16000000, 1800000, 3, 3, 4, 0, 90.0, 1, 42, 2023},
    {15630, "V Class", 15000000, 1500000, 2, 3, 4, 0, 78.0, 1, 36, 2022},
    {15637, "RS6 C8 Avant", 12000000, 1400000, 3, 3, 4, 0, 73.0, 1, 2, 2023},
    {15640, "Flyinq Spur", 35000000, 1500000, 3, 3, 4, 0, 90.0, 8, 3, 2023},
    {15653, "M3 G81", 13000000, 4000000, 3, 3, 4, 0, 59.0, 1, 4, 2023},
    {15652, "760i G70", 20000000, 6000000, 3, 3, 4, 0, 74.0, 1, 4, 2023},
    {15662, "E63s A.W213 Est", 15000000, 120000, 3, 3, 4, 0, 100.0, 1, 36, 2018},
    {15666, "XM", 25000000, 320000, 3, 3, 4, 0, 69.0, 1, 4, 2023},
	{15669, "M8 GC", 17000000, 0, 3, 3, 4, 0, 68.00, 1, 4, 2024},
	{15673, "812", 35000000, 0, 3, 3, 2, 0, 92.00, 10, 11, 2022},
    {411, "EVO", 2000000, 5000, 2, 2, 4, 85, 50.0, 0, 37, 2016},
    {419, "Focus RS", 1800000, 0, 2, 2, 2, 80, 62.0, 3, 39, 2009},
    {436, "Rio", 1000000, 7000, 2, 2, 0, 40, 70.0, 2, 23, 2000},
    {475, "X5", 1300000, 0, 2, 2, 0, 70, 93.0, 1, 4, 1999},
    {477, "RX-7", 2000000, 0, 2, 2, 0, 95, 76.0, 0, 34, 1992},
    {479, "Logan", 450000, 6000, 2, 2, 0, 95, 50.0, 4, 43, 2016},
    {495, "Start Raptor", 2800000, 0, 2, 2, 0, 65, 100.0, 3, 12, 2014},
    {507, "E34", 530000, 0, 2, 2, 0, 90, 80.0, 1, 4, 1988},
    {508, "Start Raptor", 490000, 0, 4, 2, 0, 90, 100.0, 3, 12, 2008},
    {516, "Start Focus 3", 900000, 0, 2, 2, 0, 80, 55.0, 3, 12, 2014},
    {540, "E55", 780000, 15000, 2, 2, 0, 80, 80.0, 1, 36, 2003},
    {551, "E39", 1300000, 5000, 2, 2, 4, 70, 70.0, 1, 4, 2001},
    {559, "Supra", 2000000, 0, 2, 2, 0, 75, 70.0, 0, 51, 1986},
    {560, "WRX Sti", 1800000, 0, 2, 2, 0, 65, 60.0, 0, 49, 2014},
    {562, "Skyline", 2000000, 0, 2, 2, 0, 85, 65.0, 0, 38, 2001},
    {585, "W140", 1800000, 5000, 2, 2, 0, 70, 100.0, 1, 36, 1964},
    {589, "VW Golf GTI 7", 3000000, 80000, 2, 2, 4, 0, 50.0, 1, 55, 2021},
    {612, "M5 E60", 2000000, 0, 2, 2, 4, 0, 70.0, 1, 4, 2003},
    {614, "X6M E71", 2600000, 0, 2, 2, 4, 0, 85.0, 1, 4, 2008},
    {699, "WMini JCW GP", 1700000, 0, 2, 2, 4, 0, 55.0, 8, 78, 2008},
    {793, "Q7", 5700000, 0, 4, 2, 4, 0, 85.0, 1, 2, 2010},
    {908, "X5M E70", 2500000, 0, 2, 2, 4, 0, 85.0, 1, 4, 2014},
    {909, "Santa Fe", 900000, 0, 2, 2, 4, 0, 71.0, 2, 79, 2010},
    {1326, "ML63 AMG W164", 2000000, 0, 2, 2, 4, 0, 95.0, 1, 36, 2011},
    {15065, "Chaser", 1100000, 0, 2, 2, 4, 0, 70.0, 0, 51, 201},
    {15066, "Touareg", 2000000, 0, 4, 2, 4, 0, 100.0, 1, 55, 2002},
    {15067, "E38 740", 1400000, 0, 2, 2, 4, 0, 85.0, 1, 4, 1994},
    {15068, "Mark II 90", 1050000, 0, 2, 2, 4, 00, 70.0, 0, 51, 1990},
    {15069, "Camry V50", 1700000, 0, 2, 2, 4, 0, 70.0, 0, 51, 2011},
    {15072, "IS200", 1200000, 0, 2, 2, 4, 00, 70.0, 0, 28, 2003},
    {15077, "Accord", 990000, 0, 2, 2, 4, 0, 65.0, 0, 16, 2002},
    {15081, "Scirocco", 1250000, 0, 2, 2, 2, 0, 55.0, 1, 55, 2002},
    {15086, "IS F", 2200000, 0, 2, 2, 4, 0, 64.0, 0, 28, 2014},
    {15087, "3 MPS", 1230000, 0, 2, 2, 4, 0, 51.0, 0, 34, 2006},
    {15088, "MX-5", 1020000, 0, 2, 2, 2, 0, 58.0, 0, 34, 1998},
    {15090, "Silvia S15", 1600000, 0, 2, 2, 2, 0, 65.0, 0, 38, 2001},
    {15093, "W124 E", 2100000, 0, 1, 2, 4, 0, 90.0, 1, 36, 1996},
    {15121, "Vesta", 700000, 0, 2, 2, 4, 0, 55.0, 5, 25, 2015},
    {15115, "Grand Cherokee", 800000, 0, 1, 2, 4, 0, 90.0, 3, 20, 2017},
    {15118, "Prado 2016", 3000000, 0, 4, 2, 4, 0, 100.0, 0, 51, 2016},
    {15128, "Camry 40", 850000, 10000, 2, 2, 4, 0, 75.0, 0, 51, 2006},
    {15125, "Lancer X", 800000, 11000, 2, 2, 4, 0, 100.0, 0, 37, 2018},
    {15131, "Impreza WRX", 1000000, 10000, 2, 2, 4, 0, 75.0, 0, 49, 2013},
    {15141, "CLS63", 3500000, 17000, 2, 2, 4, 0, 66.0, 1, 36, 2018},
    {15144, "S3", 2100000, 20000, 2, 2, 4, 0, 70.0, 1, 2, 2013},
    {15147, "X-Class", 2500000, 40000, 4, 2, 4, 0, 70.0, 1, 36, 2017},
    {15149, "RS6 C5", 1500000, 25000, 2, 2, 4, 0, 75.0, 1, 2, 2014},
    {15152, "v40", 1800000, 30000, 2, 2, 4, 0, 50.0, 9, 54, 2014},
    {15140, "C63 W204 FL", 3200000, 60000, 2, 2, 4, 0, 66.0, 1, 36, 2013},
    {15157, "Camry V70", 3500000, 150000, 2, 2, 4, 0, 60.0, 0, 51, 2019},
    {15162, "Mark II 100", 1200000, 120000, 2, 2, 4, 0, 70.0, 0, 51, 2000},
    {15163, "S2000", 1600000, 150000, 2, 2, 2, 0, 70.0, 0, 16, 2004},
    {15168, "325i E36", 700000, 20000, 2, 2, 2, 0, 65.0, 1, 4, 2000},
    {15171, "Civic Type-R FK8", 2000000, 100000, 2, 2, 0, 0, 50.0, 0, 16, 2007},
    {15180, "M3 E46", 2200000, 100000, 2, 2, 4, 0, 63.0, 1, 4, 2006},
    {15183, "Golf 5 GTI", 15000000, 100000, 2, 2, 2, 0, 50.0, 1, 55, 2004},
    {15184, "Hachiroku AE86", 900000, 30000, 1, 2, 2, 0, 50.0, 0, 50, 1983},
    {15185, "Octavia VRS", 2000000, 100000, 2, 2, 4, 0, 50.0, 7, 48, 2017},
    {15181, "M1 E82", 3300000, 100000, 2, 2, 2, 0, 53.0, 1, 4, 2012},
    {15191, "370Z", 2000000, 60000, 2, 2, 2, 0, 72.0, 0, 38, 2017},
    {15209, "M3 E92", 4500000, 70000, 2, 2, 2, 0, 63.0, 1, 4, 2010},
    {15203, "Gulia", 4000000, 110000, 2, 2, 4, 0, 58.0, 10, 1, 2015},
    {15240, "LC 100", 1600000, 20000, 2, 2, 4, 0, 96.0, 0, 51, 2007},
    {15226, "Defender", 4800000, 150000, 2, 2, 4, 0, 90.0, 8, 27, 2020},
    {15214, "Suburban", 1200000, 40000, 1, 2, 4, 0, 123.0, 3, 47, 2003},
    {15221, "Rubicon", 10000000, 110000, 2, 2, 4, 0, 66.0, 3, 20, 2019},
    {15220, "Q50", 2800000, 130000, 2, 2, 4, 0, 80.0, 0, 68, 2021},
    {15231, "W221 S320d", 700000, 40000, 2, 2, 4, 0, 70.0, 1, 36, 2005},
    {15272, "9-3", 800000, 70000, 1, 2, 4, 0, 58.0, 9, 76, 2009},
    {15273, "Impreza WRX", 1200000, 95000, 2, 2, 4, 0, 55.0, 0, 49, 2005},
    {15274, "4Runner", 3000000, 160000, 4, 2, 4, 0, 87.0, 0, 51, 2019},
    {15275, "Tundra", 3500000, 10000, 2, 2, 2, 0, 120.0, 0, 51, 2021},
    {15276, "Touareg", 1900000, 100000, 2, 2, 4, 0, 85.0, 1, 55, 2014},
    {15234, "Impreza WRX P", 5000000, 45000, 2, 2, 4, 0, 55.0, 0, 49, 2005},
    {15619, "K5", 3990000, 90000, 2, 2, 4, 0, 60.0, 0, 23, 2022},
    {15605, "H2", 4000000, 40000, 2, 2, 4, 0, 121.0, 3, 17, 2007},
    {15645, "CLS63 W219", 2500000, 70000, 2, 2, 4, 0, 80.0, 1, 36, 2010},
    {15651, "330D G20", 4000000, 400000, 4, 2, 4, 0, 59.0, 1, 4, 2021},
    {15664, "S320 CDI W220", 700000, 40000, 4, 2, 4, 0, 88.0, 1, 36, 2005},
	{15675, "001", 550000, 0, 0, 2, 4, 0, 70.0, 12, 0, 2024},
    {401, "2712", 50000, 0, 1, 1, 0, 0, 50.0, 5, 18, 2000},
    {404, "940", 165000, 0, 4, 1, 0, 0, 75.0, 9, 54, 1990},
    {412, "W123", 230000, 0, 1, 1, 0, 0, 65.0, 1, 36, 1975},
    {421, "Peugeot 406", 350000, 0, 1, 1, 0, 0, 70.0, 4, 41, 2005},
    {422, "GC", 320000, 0, 4, 1, 0, 0, 87.0, 3, 20, 2002},
    {439, "2101", 100000, 0, 1, 1, 0, 0, 39.0, 5, 25, 1970},
    {445, "Octavia RS", 330000, 7000, 1, 1, 0, 100, 55.0, 7, 48, 2000},
    {458, "A4", 320000, 0, 1, 1, 4, 75, 62.0, 1, 2, 2001},
    {467, "2107", 115000, 0, 1, 1, 0, 0, 39.0, 5, 25, 1982},
    {478, "27151", 50000, 0, 1, 1, 0, 0, 46.0, 5, 18, 1972},
    {491, "Civic Si", 350000, 0, 2, 1, 0, 75, 42.0, 0, 16, 2001},
    {492, "2109", 190000, 0, 1, 1, 0, 0, 43.0, 5, 25, 1987},
    {496, "Ascona", 130000, 0, 1, 1, 0, 0, 61.0, 1, 39, 1970},
    {526, "Start Sierra", 210000, 0, 1, 1, 0, 0, 60.0, 3, 12, 1994},
    {527, "Golf 2", 190000, 5000, 1, 1, 2, 0, 60.0, 1, 55, 1992},
    {534, "E30", 490000, 0, 2, 1, 0, 90, 55.0, 1, 4, 1994},
    {536, "240", 210000, 0, 1, 1, 0, 0, 60.0, 9, 54, 1993},
    {542, "969", 100000, 3000, 1, 1, 0, 0, 34.0, 6, 30, 1996},
    {546, "ИЖ Комби", 90000, 0, 1, 1, 0, 0, 46.0, 5, 18, 1973},
    {547, "80 Avant", 200000, 0, 4, 1, 4, 0, 66.0, 1, 2, 1996},
    {549, "ОКА", 30000, 0, 1, 1, 0, 0, 30.0, 5, 25, 1990},
    {550, "2170", 300000, 5000, 2, 1, 0, 100, 43.0, 5, 25, 1996},
    {554, "Patriot", 360000, 0, 2, 1, 0, 100, 72.0, 5, 53, 2005},
    {555, "968М", 25000, 2000, 1, 1, 0, 0, 30.0, 6, 57, 1973},
    {561, "2115", 210000, 3000, 1, 1, 0, 0, 43.0, 5, 25, 2000},
    {565, "2108", 145000, 4000, 1, 1, 0, 0, 43.0, 5, 25, 1991},
    {566, "Lanos", 300000, 5000, 1, 1, 4, 0, 48.0, 2, 7, 2008},
    {567, "2106", 99000, 3000, 1, 1, 4, 0, 39.0, 5, 25, 2006},
    {576, "АЗЛК-408", 50000, 0, 1, 1, 0, 0, 46.0, 5, 60, 1964},
    {600, "2717", 50000, 0, 1, 1, 0, 0, 64.0, 5, 18, 1997},
    {613, "Urban", 410000, 0, 1, 1, 2, 0, 65.0, 5, 25, 2014},
    {799, "31105 Волга", 350000, 0, 1, 1, 4, 0, 70.0, 5, 13, 2004},
    {15070, "Буханка", 190000, 0, 1, 1, 4, 0, 85.0, 5, 53, 1958},
    {15074, "2114", 215000, 0, 1, 1, 4, 0, 43.0, 5, 25, 2013},
    {15078, "2110", 160000, 0, 1, 1, 4, 0, 43.0, 5, 25, 2002},
    {15079, "2104", 85000, 0, 1, 1, 4, 0, 45.0, 5, 25, 1984},
    {15080, "2105", 105000, 0, 1, 1, 4, 0, 39.0, 5, 25, 2000},
    {15084, "155", 300000, 0, 1, 1, 4, 0, 63.0, 10, 1, 1998},
    {15124, "3102", 220000, 0, 1, 1, 4, 0, 80.0, 5, 13, 1982},
    {15119, "Хантер", 700000, 5000, 1, 1, 4, 0, 150.0, 5, 53, 2003},
    {15145, "21099", 150000, 4000, 1, 1, 4, 0, 60.0, 5, 25, 2001},
    {15150, "2112 купэ", 160000, 5000, 1, 1, 2, 0, 40.0, 4, 25, 2002},
    {15151, "2112", 170000, 5000, 1, 1, 4, 0, 40.0, 4, 25, 2002},
    {15207, "M5 E28", 150000, 10000, 1, 1, 4, 0, 70.0, 1, 4, 1986},
    {15262, "Series I", 350000, 20000, 4, 1, 4, 0, 82.0, 8, 27, 1996},
    {15281, "Инвалидка", 20000, 0, 1, 1, 0, 0, 40.0, 5, 25, 1997},
    {15296, "Matiz", 200000, 4000, 1, 1, 4, 0, 35.0, 2, 7, 2000},
    {15603, "Granta", 490000, 28000, 2, 1, 4, 0, 50.0, 5, 25, 2022},
    {15621, "2401", 350000, 40000, 1, 1, 4, 0, 55.0, 5, 13, 1987},
    {15641, "Ami", 250000, 0, 0, 1, 2, 0, 40.0, 4, 40, 2023},
    {15648, "2103", 150000, 7000, 1, 1, 4, 0, 29.0, 5, 25, 1985},
    {15663, "2102", 110000, 2000, 2, 1, 4, 0, 45.0, 5, 25, 1971},
    {406,"130",1800000,0,4,8,0,0,150.0,5,58,1963},
	{435,"Прицеп",100000,0,0,8,0,0,150.0,3,0,2000},
	{450,"Прицеп",100000,0,0,8,0,0,150.0,3,0,2000},
	{456,"NEXT",2400000,0,4,8,0,0,150.0,5,13,2013},
	{459,"Vito",2800000,0,4,8,0,0,150.0,1,36,2003},
	{482,"",1900000,0,1,8,0,0,150.0,5,13,2003},
	{499,"NEXT",1200000,0,4,8,0,0,150.0,5,13,1989},
	{514,"5410",3400000,0,4,8,0,0,150.0,5,13,1980},
	{518,"",1200000,0,4,8,0,0,150.0,5,10,1966},
	{584,"Цистерна",100000,0,0,8,0,0,150.0,0,0,2000},
	{15083,"66 ШИШИГА",1850000,0,4,8,4,0,150.0,5,13,1965},
	{15095,"Actros",7500000,0,4,8,4,0,150.0,1,36,2003},
	{15096,"FM12",6300000,0,4,8,4,0,150.0,9,54,2000},
	{15098,"54115",4000000,0,4,8,4,0,150.0,5,21,1996},
	{15099,"",6500000,0,4,8,4,0,150.0,13,59,1989},
	{15100,"R700",10000000,0,4,8,4,0,150.0,9,46,2000},
	{15101,"130",1800000,0,4,8,4,0,150.0,5,58,1966},
	{15102,"TGS",6500000,0,4,8,4,0,150.0,1,31,2007},
	{15103,"131",2400000,0,4,8,4,0,150.0,5,58,1966},
	{15232,"Unimog U502",4000000,160000,4,8,2,0,160.0,1,36,2013},
	{15268,"Sprinter TK",1900000,40000,4,8,4,0,150.0,1,36,2013},
	{15097,"XF 105",5500000,0,4,8,2,0,870.0,14,82,2010},
	{609,"К4 Продукты",4500000,0,4,8,0,0,150.0,0,0,2024},
    {469, "R22", 10000000, 0, 4, 5, 0, 0, 150.0, 3, 44, 2003},
    {487, "R44", 20000000, 0, 4, 5, 0, 0, 150.0, 3, 44, 1992},
    {15285, "Helicopter", 15000000, 600000, 4, 5, 2, 0, 110.0, 1, 44, 2020},
    {15291, "Helicopter", 35000000, 160000, 4, 5, 2, 0, 110.0, 1, 44, 2020},
    {446, "Squalo", 10000000, 0, 4, 6, 0, 0, 150.0, 3, 46, 2014},
    {452, "Speeder", 18000000, 0, 4, 6, 0, 0, 150.0, 3, 46, 2000},
    {454, "Tropic", 35000000, 0, 4, 6, 0, 0, 150.0, 3, 46, 2000},
    {473, "Dinghy", 1200000, 0, 4, 6, 0, 0, 150.0, 9, 46, 2000},
    {493, "Jetmax", 18500000, 0, 4, 6, 0, 0, 150.0, 12, 19, 2010},
    {595, "Launch", 29000000, 0, 4, 6, 0, 0, 150.0, 12, 29, 2000},
    {15243, "Lagoon", 50000000, 600000, 4, 6, 1, 0, 300.0, 10, 0, 2022},
    {15244, "Marina", 10000000, 200000, 4, 6, 1, 0, 300.0, 10, 0, 2022},
    {15292, "Regina", 80000000, 5000000, 4, 6, 1, 0, 300.0, 10, 0, 2022},
    {15649, "Camper", 3000000, 90000, 4, 9, 4, 0, 90.0, 3, 47, 1985},
    {15277, "5350", 10000000, 0, 4, 9, 2, 0, 350.0, 5, 21, 2022},
    {15278, "Sprinter", 7000000, 0, 4, 9, 2, 0, 110.0, 1, 36, 2012},
    {15279, "Tundra Camper", 4000000, 0, 2, 9, 4, 0, 110.0, 0, 51, 2021},
    {424, "Wolverine", 1000000, 0, 2, 4, 2, 0, 20.0, 0, 80, 2015},
    {461, "CB 750", 300000, 0, 1, 4, 0, 0, 150.0, 0, 16, 1992},
    {462, "Scooter", 30000, 0, 1, 4, 0, 0, 150.0, 1, 61, 2000},
    {463, "Chopper", 935000, 0, 2, 4, 0, 0, 150.0, 3, 15, 2010},
    {468, "", 30000, 0, 1, 4, 0, 0, 150.0, 3, 63, 2000},
    {471, "MOBILE", 27000, 0, 1, 4, 0, 0, 150.0, 1, 63, 2000},
    {481, "", 6000, 0, 0, 4, 0, 0, 150.0, 3, 62, 1995},
    {483, "3205", 0, 0, 4, 0, 0, 0, 150.0, 0, 40, 2000},
    {510, "Bike", 5000, 0, 0, 4, 0, 0, 150.0, 3, 61, 2000},
    {521, "Desmosed. RR", 2100000, 0, 2, 4, 0, 0, 30.0, 10, 9, 2008},
    {581, "Hayabusa", 1400000, 0, 3, 4, 0, 0, 150.0, 0, 50, 2000},
    {586, "Fat Boy", 820000, 0, 2, 4, 0, 0, 150.0, 0, 15, 1990},
    {15127, "1000R", 2200000, 10000, 3, 4, 2, 0, 30.0, 1, 4, 2020},
    {15129, "", 1600000, 10000, 2, 4, 2, 0, 30.0, 9, 24, 2020},
    {15130, "CrossTBI", 800000, 10000, 2, 4, 2, 0, 30.0, 13, 63, 2017},
    {15132, "Diavel", 2000000, 10000, 2, 4, 2, 0, 35.0, 10, 9, 2011},
    {15133, "5", 60000, 1000, 1, 4, 2, 0, 30.0, 5, 18, 2007},
    {15134, "Ninja H2R", 3500000, 10000, 2, 4, 2, 0, 30.0, 0, 22, 2014},
    {15135, "", 500000, 7000, 1, 4, 2, 0, 30.0, 1, 63, 2009},
    {15136, "Hayabusa", 2000000, 14000, 2, 4, 2, 0, 35.0, 0, 50, 2008},
    {15139, "RSR", 3000000, 25000, 2, 4, 2, 0, 35.0, 3, 15, 2015},
    {15245, "Мотоблок", 30000, 1000, 1, 4, 1, 0, 20.0, 5, 0, 2022},
	{15693, "Toyota LC 200 old", 5000000, 0, 2, 2, 0, 70, 100.0, 3, 12, 2025},
	{474, "Volkswagen Passat", 3800000, 0, 2, 2, 0, 70, 100.0, 3, 12, 2025}
};

enum M_METRO_STRUCT
{
    M_NAME[50],
    PICKUP_ID,
	Float: PICKUP_POS_X,
	Float: PICKUP_POS_Y,
	Float: PICKUP_POS_Z,
};

#define MAX_STATION		(5)
new const
	g_metro_station[MAX_STATION][M_METRO_STRUCT] =
{
	{"Центральная Станция Арзамаса",0,100.2840,812.0796,-30.5367},
	{"Арзамас Сити",1,2.7233,329.6730,-30.6346},
	{"Вокзальный Арзамас",2,759.6891,708.3129,-30.6505},
	{"Союзный Арзамас",3,70.0388,1441.8671,-30.7239},
	{"Больничная",4,303.9922,1800.7279,-30.6494}
};

enum E_METRO_STRUCT
{
    E_PLAYER_STATION_ID,
    E_PLAYER_METRO_STATUS,
    Float:E_PLAYER_STATION_X,
    Float:E_PLAYER_STATION_Y,
    Float:E_PLAYER_STATION_Z
};

new const g_player_metro[MAX_PLAYERS][E_METRO_STRUCT];
const TICKET_PRICE = 5000000;
enum E_CAR_MARKET_STRUCT
{
	Float: POS_MESTO_X_1,
	Float: POS_MESTO_Y_1,
	Float: POS_MESTO_Z_1,
	Float: POS_MESTO_ANGEL_1,
	Float: POS_MESTO_X_2,
	Float: POS_MESTO_Y_2,
	Float: POS_MESTO_Z_2,
	Float: POS_MESTO_ANGEL_2,
	Float: POS_MESTO_X_3,
	Float: POS_MESTO_Y_3,
	Float: POS_MESTO_Z_3,
	Float: POS_MESTO_ANGEL_3,
}

new g_load_car_market[][E_CAR_MARKET_STRUCT] = 
{
	{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	{1581.8326,1833.6528,996.4438,268.7300,-1584.2158,1016.6555,1001.0456,90.8786,2295.0359,1837.2672,1000.8347,271.3758},
    {1582.4279,1829.0621,996.4438,269.9936,-1583.9886,1009.4387,1001.0453,89.7810,2294.7883,1832.9436,1000.8345,269.3151},
    {1581.5016,1824.6484,996.4437,270.1818,-1583.6260,1002.9500,1001.0456,89.4076,2294.1438,1828.6996,1000.8348,270.8058},
    {1581.6678,1820.0178,996.4440,270.2379,-1611.2322,1011.2213,999.8670,269.0159,2294.5830,1824.1066,1000.8348,269.1721},
    {1581.4919,1815.5554,996.4438,270.0051,-1599.6614,1019.3302,999.8111,89.7451,2294.4336,1819.3597,1000.8345,271.6219},
    {1581.7911,1810.9943,996.4442,270.1355,-1649.9823,1018.9933,997.6705,267.4471,2294.5032,1814.7001,1000.8346,269.9675},
    {1581.6211,1806.6915,996.4439,269.4885,-1649.9950,1014.6467,997.6700,267.9018,2294.5872,1809.6281,1000.8347,269.6385},
    {1581.4342,1802.0017,996.4437,270.5513,-1650.0142,1010.5786,997.6705,267.4510,2294.7061,1793.8610,1000.8345,269.5933},
    {1581.4747,1797.6187,996.4437,268.9374,-1649.5203,1007.5231,997.6707,270.2053,2294.4858,1789.4935,1000.8365,270.1409},
    {1581.6860,1793.1841,996.4442,269.8219,-1649.2291,1003.9087,997.6706,268.8328,2294.3289,1785.2279,1000.8346,268.5104},
    {1581.5754,1788.5961,996.4436,269.5989,-1649.6156,1000.3042,997.6707,269.0025,2294.5876,1781.0568,1000.8364,270.9561},
    {1582.0056,1784.2179,996.4442,270.1508,-1650.1570,995.6945,997.6705,269.3276,2294.8452,1776.3081,1000.8364,270.5189},
    {1611.0387,1797.4204,996.4440,269.8098,-1650.3009,992.1814,997.6705,268.1464,2294.5532,1771.5686,1000.8347,269.8724},
    {1610.9097,1802.2402,996.4489,271.4849,-1650.1407,987.9935,997.6705,270.1500,0.0,0.0,0.0,0.0},
    {1611.1006,1806.5929,996.4439,268.3433,-1649.9689,980.8597,997.6706,268.5074,0.0,0.0,0.0,0.0},
    {1611.7134,1810.9961,996.4440,270.6818,-1650.0593,976.2006,997.6700,268.5765,0.0,0.0,0.0,0.0},
    {1611.2823,1815.6240,996.4491,271.1748,-1650.3271,969.9633,997.6703,268.5966,0.0,0.0,0.0,0.0},
    {1611.5052,1820.1605,996.4441,270.0064,-1650.0988,962.4708,997.6705,274.6601,0.0,0.0,0.0,0.0},
    {1611.0750,1824.6650,996.4434,270.9872,-1650.0331,957.8050,997.6702,271.3859,0.0,0.0,0.0,0.0},
    {1611.4656,1829.0006,996.4440,272.0988,-1649.9935,950.3692,997.6703,270.2345,0.0,0.0,0.0,0.0},
    {1611.5245,1833.8057,996.4439,268.0192,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
};

new fortune_wheel_player = INVALID_PLAYER_ID;
new rand_stop;
new fortune_timer;
new Float:fortune_prize;
new fortune_prize_id;
new bool:fortune_wheel_active;
new fortune_wheel_object = INVALID_OBJECT_ID;
new fortune_wheel_amount;
new fortune_wheel_status;
new Float:fortune_wheel_position;
const FORTUNE_WHEEL_PRICE = 50;
new g_player_progress_bar[MAX_PLAYERS];
new g_player_progress_bar_type[MAX_PLAYERS];
new g_player_progress_bar_time[MAX_PLAYERS];
new g_player_trailer_status[MAX_PLAYERS];
new g_player_trailer_type[MAX_PLAYERS];
new g_player_trailer[MAX_PLAYERS];
new g_player_order_time[MAX_PLAYERS][3];
new g_player_order_count[MAX_PLAYERS];
new Float:g_pos_truck_trailer[3][5][4] =
{// лыткарино
	{
		{-2531.6682,4.6893,15.2065,170.1382},
		{-2524.1973,3.2407,15.2049,169.8253},
		{-2516.5190,1.3492,15.2041,168.4710},
		{-2509.8357,-0.0882,15.2043,170.2068},
		{-2503.3840,-1.4134,15.2137,171.1342}
	},// южный
	{
		{2402.2664,-637.4695,13.5640,92.2640},
		{2402.4036,-629.6658,13.5560,92.3357},
		{2402.1414,-622.4787,13.5544,91.4800},
		{2402.2180,-615.0490,13.5535,91.6126},
		{2402.0388,-607.6194,13.5527,91.2692}
	},// батырево
	{
		{2119.5601,1799.1368,16.5316,2.5451},
		{2126.5339,1799.4730,16.5323,2.9703},
		{2133.5378,1799.8206,16.5362,3.6296},
		{2141.3743,1799.7815,16.5447,1.8953},
		{2148.4561,1800.0098,16.5373,1.7632}
	}
};

new arendavibor[MAX_PLAYERS];
new FullnessTick[MAX_PLAYERS];
#define mysql_queryf(%0,%1,%2,%3) 		STRING_GLOBAL[0] = EOS, mysql_format(mysql, STRING_GLOBAL, sizeof(STRING_GLOBAL), %1, %3) && mysql_query(%0, STRING_GLOBAL, %2)
#define scm SendClientMessage
const RAKNET_PACKET = 215;
new status_authorization[MAX_PLAYERS];
new Float: positionCam[MAX_PLAYERS][3];
new Float: Reedeg[MAX_PLAYERS];
new const Float: Radiuses = 1.7;
new const Float: Height = 1.15;
new spike_areas[MAX_PLAYERS];
new radar_areas[MAX_PLAYERS];
new spike_objects[MAX_PLAYERS];
new radar_objects[MAX_PLAYERS];
new timertest[MAX_PLAYERS];
new timerbyexit[MAX_PLAYERS];
new bymestavis[21];
new bymestaniz[14];
new bymestasr[22];

//--------------------------------//
const MAX_INTERACTIONS = 10000;
const MAX_PLAYER_INTERACTION = 5;

new g_interactions[MAX_INTERACTIONS][E_INTERACTION_STRUCT];

enum infoitem
{
	i_item_name[16+16],
	i_item_price,
	i_item_type
};

new const ItemsInfo[361][infoitem] = {
	{"Деньги", 1, -1},						//0
	{"Канистра", 1500, -1},					//1
	{"Аптечка", 5000, -1},					//2
	{"Мёртвый олень", 15000, -1},			//3
	{"Буксировочный трос", 7000, -1},		//4
	{"Огнетушитель", 10000, -1},			//5
	{"Мешок с деньгами", 32700, 4},			//6
	{"Нож", 7000, 4},						//7
	{"Бита", 9500, -1},						//8
	{"Катана", 23950, -1},					//9
	{"Бензопила", 6500, -1},				//10
	{"Коктейль Молотова", 48700, -1},		//11
	{"Пистолет", 27000, -1},				//12
	{"Пистолет с глушителем", 24000, -1},	//13
	{"Дробовик", 17300, -1},				//14
	{"Обрез", 15400, -1},					//15
	{"Боевой дробовик", 16950, -1},			//16
	{"УЗИ", 27950, -1},						//17
	{"MP5", 32540, -1},						//18
	{"Desert Eagle", 19500, -1},			//19
	{"M4", 43750, -1},						//20
	{"AK-47", 3835, -1},					//21
	{"Снайперская винтовка", 70000, -1},	//22
	{"РПГ", 170000, -1},					//23
	{"Гранаты", 25000, -1},					//24
	{"Наркотики", 230000, 4},				//25
	{"Патроны", 35000, 4},					//26
	{"Металл", 7900, -1},					//27
	{"Контрабанда", 270000, 4},				//28
	{"Отмычка", 4000, -1},					//29
	{"Ящик с патронами", 45000, -1},		//30
	{"Кастет", 1500, -1},					//31
	{"Дубинка", 3500, -1},					//32
	{"Двойной дилдо", 20000, -1},			//33
	{"Малый дилдо", 15000, -1},				//34
	{"Вибратор", 25000, -1},				//35
	{"Вибратор 2", 27500, -1},				//36
	{"Цветы", 7000, -1},					//37
	{"Топор", 2400, -1},					//38
	{"Камера", 17500, 2},					//39
	{"Парашют", 75000, 4},					//40
	{"Предмет интерьера", 23500, -1},		//41
	{"Воздушка", 20000, -1},				//42
	{"Слезоточивый газ", 6000, -1},			//43
	{"Ремонтный комплект", 50000, 4},		//44
	{"Взрывпакет", 25000, -1},				//45
	{"Детонатор", 5000, -1},				//46
	{"Обычный нож", 2000, -1},				//47
	{"Позолоченный нож", 90000, 0},			//48
	{"Рог изобилия", 80000, 0},				//49
	{"Картина с пейзажем", 270000, 0},		//50
	{"Картина с пятнами", 345000, 0},		//51
	{"Мушкет", 12500, -1},					//52
	{"Позолоченный мушкет", 37850, -1},		//53
	{"Старый телефон", 1200, -1},			//54
	{"Оленьи рога", 40000, 0},				//55
	{"Статуэтка (человек)", 60000, 0},		//56
	{"Стутуэтка (мамонт)", 45000, 0},		//57
	{"Статуэтка (луна)", 90000, 0},			//58
	{"Самурайский меч", 127990, 0},			//59
	{"Настольная лампа", 3500, -1},			//60
	{"Кувшин", 1500, -1},					//61
	{"Корона", 485900, 0},					//62
	{"Золотая корона", 800000, 0},			//63
	{"Шкатулка из дерева", 80000, 0},		//64
	{"Шкатулка с позолотой", 135000, 0},	//65
	{"Гитара", 50000, 4},					//66
	{"Рокерская гитара", 80000, 4},			//67
	{"Холодильник", 220000, 2},				//68
	{"Холодильник (черный)", 225000, 2},	//69
	{"Микроволновка", 15000, 2},			//70
	{"Стиральная машинка", 100000, 2},		//71
	{"Утюг", 5000, 2},						//72
	{"Утюг", 5500, 2},						//73
	{"Ноутбук", 35000, 2},					//74
	{"Сломанный ноутбук", 10000, 2},		//75
	{"Смартфон", 50000, 2},					//76
	{"Телевизор", 150000, 2},				//77
	{"Разбитый телевизор", 30000, 2},		//78
	{"Пылесос", 7000, 2},					//79
	{"XBOX ONE", 65000, 2},					//80
	{"PS4", 90000, 2},						//81
	{"Большая плазма", 100000, -1},			//82
	{"Коробка с микрофоном", 6750, -1},		//83
	{"Музыкальный центр", 85000, 2},		//84
	{"Антикварный костюм", 1, -1},			//85
	{"Антикварный костюм", 1, -1},			//86
	{"Антикварный костюм", 1, -1},			//87
	{"Антикварный костюм", 1, -1},			//88
	{"Антикварный костюм", 1, -1},			//89
	{"Антикварный костюм", 1, -1},			//90
	{"Кепка Radmir", 3000, -1},				//91
	{"Серая бандана", 6000, -1},			//92
	{"Темная бандана", 6000, -1},			//93
	{"Черная бандана", 6500, -1},			//94
	{"Зеленая бандана", 7500, -1},			//95
	{"Сумка с ремнем", 15000, -1},			//96
	{"Портфель", 450000, 4},				//97
	{"Куфия", 1, -1},						//98
	{"Автомобильный номер", 1, -1},			//99
	{"Одежда", 1, -1},						//100
	{"Слезоточивые гранаты", 7000, -1},		//101
	{"Ящик с патронами", 35000, 4},			//102
	{"Сломанный банкомат", 15000, 4},		//103
	{"Старое сиденье", 10000, 4},			//104
	{"Черное сиденье", 20000, 4},			//105
	{"Гоночное сиденье", 50000, 4},			//106
	{"Телефон Brick 3310", 5555, 4},		//107
	{"Телефон Brick", 9000, -1},			//108
	{"Телефон Galaxy", 15000, 4},			//109
	{"Телефон Orange", 115000, 2},			//110
	{"Золотой рубль", 60000, 4},			//111
	{"Золотые два рубля", 90000, 4},		//112
	{"Золотой червонец", 180000, 4},		//113
	{"Золотые пятьдесят", 500000, 4},		//114
	{"Системный блок", 10000, 2},			//115
	{"Отмычки", 100, -1},					//116
	{"Руль TAZ 2101", 3000, 4},				//117
	{"Руль GTR", 45000, 4},					//118
	{"Руль Sternchen AMG", 100000, 4},		//119
	{"Старый сейф", 18950, 4},				//120
	{"Сломанный проигрыватель", 25000, 4},	//121
	{"Диски", 30000, 4},					//122
	{"Ноутбук Apple", 270000, 2},			//123
	{"Металлолом", 3000, 4},				//124
	{"Лопата", 5000, 4},					//125
	{"Батареи", 600, -1},					//126
	{"Металлоискатель B.H Junior", 15000, -1},//127
	{"Металлоискатель Garrett 250", 25000, -1},//128
	{"Мертвая утка", 7500, -1},				//129
	{"Надувная лодка", 9000, -1},		//130
	{"Свисток на уток", 500, -1},			//131
	{"Удочка", 45000, -1},						//132
	{"Улов", 7000, -1},						//133
	{"Кусочки хлеба", 150, -1},				//134
	{"Лягушки", 250, 4},					//135
	{"Кузнечики", 300, 4},					//136
	{"Рецепт отмычки", 100, -1},			//137
	{"Тряпка", 100, -1},					//138
	{"Дерево", 200, -1},					//139
	{"Бутылка", 200, -1},					//140
	{"Шприц", 500, -1},						//141
	{"Бинт", 600, -1},						//142
	{"Жгут", 600, 4},						//143
	{"Порох", 700, 4},						//144
	{"Крахмал", 350, -1},					//145
	{"Прицел", 1500, -1},					//146
	{"Глушитель", 3500, -1},				//147
	{"Сломанный iPhone", 7500, 2},			//148
	{"Запчасти к iPhone", 500, 4},			//149
	{"Запчасти к ноутбуку", 1000, 4},		//150
	{"Денежная печат.машинка", 39000, 2},	//151
	{"Запчасти к печт.машинке", 3000, 4},	//152
	{"Инструменты", 800, 4},				//153
	{"Сварка", 5000, -1},					//154
	{"Колесо", 50000, 4},					//155
	{"Аккумулятор", 2500, 4},				//156
	{"Рецепт кастета", 200, -1},			//157
	{"Рецепт обреза", 250, -1},				//158
	{"Рецепт глюкозы", 250, -1},			//159
	{"Рецепт печат.машинки", 1000, -1},		//160
	{"Стеклянная бутылка", 300, -1},		//161
	{"Солярка", 1000, -1},					//162
	{"Наручные часы (корич)", 15000, -1},	//163
	{"Наручные часы (белые)", 15000, -1},	//164
	{"Моторное масло", 1000, -1},			//165
	{"Воздушный фильтр", 1500, -1},			//166
	{"Масляной фильтр", 1950, -1},			//167
	{"Лейка", 700, -1},						//168
	{"Марихуанна", 75000, -1},				//169
	{"Огурцы", 1000, -1},					//170
	{"Помидоры", 1000, -1},					//171
	{"Семена конопли", 1000, -1},			//172
	{"Семена томата", 350, -1},			//173
	{"Семена огурцов", 350, -1},			//174
	{"Косяк", 1400, -1},					//175
	{"Кристаллы", 75000, 4},				//176
	{"Ящик с материалами", 5000, 4},		//177
	{"Болторезы", 2000, -1},				//178
	{"Материалы", 3000, -1},				//179
	{"Сабвуфер", 150000, 2},				//180
	{"Очки", 5000, -1},						//181
	{"Бандана",6000, -1},					//182
	{"Маска",10000, -1},					//183
	{"Берет",3000, -1},						//184
	{"Шляпа", 1000, -1},					//185
	{"Бочка", 15000, 4},					//186
	{"Химия", 7000, 4},						//187
	{"Двигатель", 170000, 4},				//188
	{"Старый руль AMG", 14000, 4},			//189
	{"Запчасти к рулю AMG", 3000, 4},		//190
	{"Лобовое стекло", 30000, 4},			//191
	{"Спутник", 129600, -1},				//192
	{"Кристалл (красный)", 70000, 4},		//193
	{"Кристалл (фиолетовый)", 90000, 4},	//194
	{"Кристалл (зеленый)", 150000, 4},		//195
	{"Кристалл (синий)", 50000, 4},			//196
	{"Модель Volga", 45000, -1},			//197
	{"Модель ВАЗ 2109", 50000, 4},			//198
	{"Модель РАФ-2203", 47500, 4},			//199
	{"Гироскутер", 60000, 2},				//200
	{"Бинокль", 6000, -1},					//201
	{"Телескоп", 129000, 2},				//202
	{"Комиксы (Spider Man)", 1000, -1},		//203
	{"Комиксы (Ninja)", 1190, -1},			//204
	{"Комиксы (Bakugan)", 990, -1},			//205
	{"Клавиатура RGB", 15290, 2},			//206
	{"Клавиатура", 9000, 2},				//207
	{"Шахматы", 5000, -1},					//208
	{"Складной зонтик", 6000, -1},			//209
	{"Зонтик", 4000, -1},					//210
	{"Пирамидка", 400, -1},					//211
	{"Самокат", 7000, -1},					//212
	{"Фигурка пришельца", 15900, -1},		//213
	{"Фигурка пони", 6000, -1},				//214
	{"PSP", 9000, -1},						//215
	{"Анаболики", 6000, -1},				//216
	{"Противорвотное", 3450, -1},			//217
	{"Запчасти к двигателю", 29990, 4},		//218
	{"Сумка", 10000, -1},					//219
	{"Аксессуар на пояс", 2500, -1},		//220
	{"Украшение на руку", 29000, -1},		//221
	{"Рюкзак", 7900, -1},					//222
	{"Самовар", 29390, -1},					//223
	{"Фаберже", 7650, -1},					//224
	{"Часы", 25000, -1},					//225
	{"Граммофон", 170000, 0},				//226
	{"Кресло", 80000, 4},					//227
	{"Чайник", 2500, -1},					//228
	{"Статуя", 4000, -1},					//229
	{"Проигрыватель", 5990, -1},			//230
	{"Глобус", 4300, -1},					//231
	{"Печат.машинка", 23400, 4},			//232
	{"Поп-ит", 600, -1},					//233
	{"Брелок поп-ит", 150, -1},				//234
	{"Маска Гая-Фокса", 7000, -1},			//235
	{"Красный нож", 15000, -1},				//236
	{"Цветной нож", 25000, 4},				//237
	{"Золотой кастет", 70000, 4},			//238
	{"Поп-ит", 350, -1},					//239
	{"Поп-ит", 450, -1},					//240
	{"Стиральный порошок", 790, 4},			//241
	{"Рем.комплект к стир.машинке", 1500, 4},//242
	{"Конфеты", 350, -1},					//243
	{"Ёлочные украшения", 290, -1},			//244
	{"Снегоуборочная машинка", 15000, 4},	//245
	{"Украшение на шею", 3000, -1},			//246
	{"Наполненная лейка", 600, 4},			//247
	{"Животное", 100000, -1},				//248
	{"Будка для животных", 65000, -1},		//249
	{"Корм для животных", 1500, 4},			//250
	{"Коробка спичек", 500, -1},			//251
	{"Жареная рыба", 1000, -1},				//252
	{"Нелегальная продукция", 500, 4},		//253
	{"Аппарат для диагностики", 50000, -1},	//254
	{"Маска", 700, -1},						//255
	{"Автосигнализация", 300000, -1},		//256
	{"Лотерейный билет", 100, -1},			//257
	{"Кейс `Форсаж`", 5000, -1},			//258
	{"Ключ для кейса", 3000, -1},			//259
	{"Украшение на шею", 5000, -1},			//260
	{"Кейс `Темные дела`", 5000, -1},		//261
	{"Книга рецептов", 5000, -1},			//262
	{"Плащ", 5000, -1},						//263
	{"Растение (одуванчик)", 5000, -1},		//264
	{"Растение (крапива)", 5000, -1},		//265
	{"Растение (валериана)", 5000, -1},		//266
	{"Растение (пещерный гриб)", 5000, -1}, //267
	{"Плот монстра", 5000, -1},				//268
	{"Эликсир здоровья", 5000, -1},			//269
	{"Эликсир силы", 5000, -1},				//270
	{"Эликсир выносливости", 5000, -1},		//271
	{"Кейс `Велесова ночь`", 5000, -1},		//272
	{"Эликсир точности", 5000, -1},			//273
	{"Зеленые кристаллы", 5000, -1},		//274
	{"Акссесуар на левое плечо", 5000, -1},	//275
	{"Тауметр", 5000, -1},					//276
	{"Бронежилет", 5000, -1},				//277
	{"Кейс `Оперской`", 5000, -1},			//278
	{"Балончик с краской", 5000, -1},		//279
	{"Напиток", 5000, -1},					//280
	{"Трап", 5000, -1},						//281
	{"Лекарство", 5000, -1},				//282
	{"Гарелка", 5000, -1},					//283
	{"Кейс `Новогодний`", 5000, -1},		//284
	{"Украшение для транспорта", 5000, -1},	//285
	{"Бутылка", 5000, -1},					//286
	{"Крылья", 5000, -1},					//287
	{"Ценная бумага", 5000, -1},			//288
	{"Посох", 5000, -1},					//289
	{"Кейс `Черное золото`", 5000, -1},		//290
	{"Аксессуар на спину", 5000, -1},		//291
	{"Аксессуар на ногу", 5000, -1},		//292
	{"Фишки", 5000, -1},					//293
	{"Нож для свежевания", 5000, -1},		//294
	{"Шкура оленя", 5000, -1},				//295
	{"Шкура медведя", 5000, -1},			//296
	{"Шкура заяца", 5000, -1},				//297
	{"Шкура кабана", 5000, -1},				//298
	{"Животный жир", 5000, -1},				//299
	{"Кейс `Охотничий`", 5000, -1},			//300
	{"Игровая консоль", 5000, -1},			//301
	{"Виниловая пластинка", 5000, -1},		//302
	{"Запчасти проигрывателя", 5000, -1},	//303
	{"Сломанный сабвуфер", 5000, -1},		//304
	{"Запчасти сабвуфера", 5000, -1},		//305
	{"Сломанный металлоискатель", 5000, -1},//306
	{"Запчасти металлоискателя", 5000, -1},	//307
	{"Полотно для лопаты", 5000, -1},		//308
	{"Черенок для лопаты", 5000, -1},		//309
	{"Сломанный аппарата диагн-ки", 5000, -1},//310
	{"Запчасти аппарата диагн-ки", 5000, -1},//311
	{"Корпус наручных часов", 5000, -1},	//312
	{"Ремешок наручных часов", 5000, -1},	//313
	{"Механизм наручных часов", 5000, -1},	//314
	{"Стекло наручных часов", 5000, -1},	//315
	{"Мешочек для драгоценностей", 5000, -1},//316
	{"Кроссовки", 5000, -1},				//317
	{"Футболка", 5000, -1},					//318
	{"Джинсы", 5000, -1},					//319
	{"Золотые серьги", 5000, -1},			//320
	{"Бриллиант", 5000, -1},				//321
	{"Проигрыватель", 5000, -1},			//322
	{"Бронепластина", 5000, -1},			//323
	{"Скейтборд", 5000, -1},				//324
	{"Рыболовная леска", 5000, -1},			//325
	{"Наживка", 5000, -1},					//326
	{"Осетровая икра", 5000, -1},			//327
	{"Кейс `Египетская сила`", 5000, -1},	//328
	{"Золотой череп", 5000, -1},			//329
	{"Древняя табличка", 5000, -1},			//330
	{"Канистра воды", 5000, -1},			//331
	{"Рецепт для пошива", 5000, -1},		//332
	{"Известь", 5000, -1},					//333
	{"Гербицид", 5000, -1},					//334
	{"удобрение", 5000, -1},				//335
	{"Семена", 5000, -1},					//336
	{"Урожай", 5000, -1},					//337
	{"Эликсир бесшумности", 5000, -1},		//338
	{"Эликсир регенерации", 5000, -1},		//339
	{"Эликсир устойчивости", 5000, -1},		//340
	{"Эликсир удачи", 5000, -1},			//341
	{"Планшет", 5000, -1},					//342
	{"Растение (клевер)", 5000, -1},		//343
	{"Кейс `Велесова Ночь - 2`", 5000, -1},	//344
	{"Шкура белого медведя", 5000, -1},		//345
	{"Растение мох", 5000, -1},				//346
	{"Ёлочные игрушки", 5000, -1},			//347
	{"Кейс `Рождественский экспресс`", 5000, -1},//348
	{"Обручальное кольцо", 5000, -1},		//349
	{"Кейс `Путь воина`", 5000, -1},		//350
	{"Сигареты", 5000, -1},					//351
	{"Глушилка", 5000, -1},					//352
	{"Заточка", 5000, -1},					//353
	{"Чертеж тюнинга", 5000, -1},			//354
	{"Кейс `Пиратский`", 5000, -1},			//355
	{"Кейс `Проклятие`", 5000, -1},     //356
	{"Киберкоинс", 5000, -1}, //357
	{"Чертеж тюненга", 5000, -1},    //358
	{"Ледяные Механизмы", 5000, -1},    //359
	{"Кейс `Зимняя сказка`", 5000, -1}        //360
};
new gRandom[2] = {80,81};
new const g_business_clothing_quantity[2] = {172, 60};
enum e_g_business_clothing {
	g_cost,
	g_model
};
new const g_business_clothing_skins[2][172][e_g_business_clothing] =
{
    {
	 	{3000,14},
		{3000,20},
		{3000,21},
		{3000,22},
		{3000,24},
		{3000,25},
		{3000,52},
		{3000,15327},
		{3000,15353},
		{3000,15354},
		{3000,15355},
		{3000,78},
		{3000,95},
		{3000,96},
		{3000,200},
		{5000,49},
		{5000,62},
		{5000,135},
		{5000,137},
		{5000,212},
		{5000,230},
		{5000,239},
		{7500,7},
		{7500,160},
		{7500,213},
		{8000,103},
		{10000,102},
		{10000,2},
		{10000,26},
		{10000,132},
		{10000,184},
		{10000,209},
		{10000,229},
		{10000,235},
		{10000,236},
		{12000,32},
		{15000,144},
		{15000,133},
		{15000,100},
		{18000,97},
		{18000,159},
		{18000,242},
		{18000,248},
		{20000,107},
		{20000,155},
		{20000,203},
		{20000,289},
		{22000,247},
		{25000,37},
		{25000,45},
		{25000,177},
		{25000,262},
		{27000,299},
		{30000,15},
		{30000,104},
		{30000,101},
		{30000,204},
		{32000,291},
		{35000,240},
		{50000,210},
		{50000,34},
		{50000,99},
		{50000,119},
		{50000,146},
		{50000,154},
		{50000,217},
		{53000,18},
		{55000,181},
		{60000,44},
		{60000,60},
		{60000,73},
		{60000,10},
		{80000,117},
		{100000,23},
		{100000,295},
		{105000,54},
		{110000,173},
		{120000,185},
		{135000,108},
		{135000,109},
		{135000,110},
		{135000,118},
		{135000,189},
		{135000,254},
		{135000,272},
		{150000,3},
		{250000,59},
		{250000,241},
		{300000,180},
		{300000,15420},
		{350000,33},
		{350000,261},
		{350000,296},
		{400000,290},
		{400000,15392},
		{450000,15314},
		{500000,221},
		{500000,46},
		{500000,68},
		{500000,98},
		{500000,186},
		{500000,249},
		{500000,294},
		{500000,83},
		{500000,15391},
		{500000,15433},
		{550000,17},
		{560000,15304},
		{650000,120},
		{650000,15306},
		{650000,15315},
		{750000,15393},
		{780000,15305},
		{800000,15301},
		{850000,15390},
		{880000,15313},
		{900000,223},
		{930000,15302},
		{980000,15308},
		{1000000,15527},
		{1300000,82},
		{1300000,84},
		{1300000,15300},
		{1300000,15394},
		{1400000,29},
		{1400000,15312},
		{1500000,293},
		{1500000,15310},
		{1500000,15395},
		{1500000,15457},
		{2000000,15303},
		{2300000,15311},
		{2400000,15426},
		{2500000,15309},
		{2650000,15307},
		{3000000,228},
		{3000000,15526},
		{3300000,15409},
		{3700000,15410},
		{4000000,15408},
		{4000000,15542},
		{4000000,134},
		{4000000,15456},
		{4600000,15411},
		{5000000,15361},
		{5000000,15521},
		{5000000,192},
		{5000000,15561},
		{5600000,15448},
		{5800000,15449},
		{5800000,15425},
		{5900000,15424},
		{6000000,234},
		{6000000,297},
		{6700000,15435},
		{6800000,15437},
		{7000000,15518},
		{8000000,15540},
		{8000000,15553},
		{8000000,15418},
		{8000000,15431},
		{10000000,15406},
		{10000000,15363},
		{10000000,15532},
		{12000000,15430},
		{12000000,15537},
		{13000000,15452},
		{14000000,15429},
		{14000000,15432},
		{15000000,15360},
		{17000000,15548},
		{20000000,207}
    },
    {
		{3000,38},
		{3000,39},
		{3000,53},
		{3000,88},
		{3000,89},
		{3000,15345},
		{3000,15352},
		{10000,56},
		{10000,75},
		{15000,205},
		{30000,211},
		{38000,140},
		{45000,193},
		{50000,13},
		{65000,263},
		{70000,92},
		{80000,150},
		{80000,251},
		{120000,216},
		{150000,257},
		{150000,87},
		{160000,15317},
		{200000,169},
		{250000,138},
		{250000,237},
		{250000,150},
		{250000,9},
		{250000,226},
		{300000,225},
		{300000,145},
		{300000,256},
		{400000,91},
		{450000,152},
		{460000,129},
		{488599,231},
		{500000,246},
		{500000,12},
		{530000,195},
		{600000,15412},
		{650000,55},
		{650000,233},
		{666666,130},
		{700000,77},
		{700000,214},
		{700000,41},
		{700000,215},
		{800000,197},
		{800000,232},
		{800000,196},
		{1000000,199},
		{1000000,85},
		{1300000,15319},
		{1300000,31},
		{1500000,15413},
		{1700000,15364},
		{2000000,238},
		{2200000,15318},
		{2500000,172},
		{3000000,201},
		{5000000,93},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
    }
};
new p_business_clothing_page[MAX_PLAYERS];
enum E_CARSH_CAR_STRUCT
{
	OC_SQL_ID,
	OC_RENT_OWNER,
	OC_NUMBER[8],
	OC_REGION[10],
	OC_PRICE,
	OC_NUMBERTYPE,
	OC_MODEL_ID,
	Float: OC_IZNOS,
	OC_MASLO,
	OC_VINIL,
	OC_COLOR_1,
	OC_COLOR_2,
	Float: OC_POS_X,
	Float: OC_POS_Y,
	Float: OC_POS_Z,
	Float: OC_ANGLE,
	bool: OC_ALARM,
	bool: OC_KEY_IN,
	OC_CREATE,
	OC_SELECTS[155],
	OC_COLORS[155],
	OC_PROCENTS[155],
};
//----------Аренда авто---------------------------
enum E_RENT_CAR_STRUCT
{
	R_SQL_ID,
	R_RENT_OWNER,
	R_RENT_BIZ,
	R_NUMBER[8],
	R_REGION[10],
	R_PRICE,
	R_NUMBERTYPE,
	R_MODEL_ID,
	Float: R_IZNOS,
	Float: R_MASLO,
	R_VINIL,
	R_COLOR_1,
	R_COLOR_2,
	Float: R_POS_X,
	Float: R_POS_Y,
	Float: R_POS_Z,
	Float: R_ANGLE,
	R_CREATE,
	R_MESTO,
	Float: R_KOLESO_1,
	Float: R_KOLESO_2,
	Float: R_KOLESO_3,
	Float: R_KOLESO_4,
};
static const Float:Rent_Mesto[3][8][4] =
{
	{
		{451.01690,1732.13200,11.6040,260.6403},
		{450.31090,1729.04170,11.6123,261.2278},
		{449.87970,1726.28490,11.6097,260.3292},
		{449.34000,1723.34280,11.6073,261.6923},
		{464.85040,1730.89530,11.6094,95.86540},
		{465.18250,1727.99300,11.6068,94.78510},
		{464.79330,1725.07650,11.6071,94.89310},
		{473.10710,1729.65100,11.6079,244.6246} 
    },
	{
		{2165.0598,-1812.4137,18.7696,359.3905},
		{2161.6943,-1812.8040,18.9367,0.017700},
		{2158.0481,-1812.1659,18.7436,359.4655},
		{2154.5510,-1812.0975,18.9538,1.225700},
		{2151.0271,-1811.9778,18.6786,359.7066},
		{2147.4895,-1812.3109,18.5471,0.610500},
		{2144.0156,-1812.1764,18.4875,359.9574},
		{2140.6797,-1811.9991,18.5939,0.042700}
	},
	{
		{1730.7089,2481.00070,15.0299,214.2615},
		{1733.2258,2482.36300,15.4657,215.3279},
		{1735.7397,2483.84840,15.2401,214.8532},
		{1738.0343,2485.75440,15.2200,215.0737},
		{1740.3864,2487.60860,15.6744,214.4059},
		{1742.9143,2489.07200,15.9752,214.9236},
		{1745.0552,2490.85860,15.2088,215.5316},
		{1745.2952,2472.14330,15.5433,15.35350}
	}
};
new Float: Toilet_Positions[][3] =
{
    {-1643.78, -2776.75, 1004.96},
    {-1643.90, -2781.87, 1004.96},
    {-1643.93, -2776.61, 1001.55},
    {-1643.88, -2781.89, 1001.55},
    {-1645.31, -2792.16, 1004.96},
    {-1645.60, -2792.41, 1001.55},
    {-1633.08, -2777.07, 1005.42},
    {-1633.08, -2780.70, 1001.55},
    {-1633.10, -2785.95, 1004.96},
    {-1633.09, -2785.92, 1001.55},
    {-1661.53, -2796.47, 1002.06},
    {-1628.93, -2794.89, 1004.96},
    {-1628.88, -2795.00, 1001.55},
    {-1652.36, -2807.29, 1002.06},
    {-1655.87, -2807.23, 1002.01},
    {-1648.09, -2808.86, 1004.96},
    {-1648.03, -2808.95, 1001.57},
    {-1659.36, -2807.22, 1002.00},
    {-1631.47, -2811.44, 1004.96},
    {-1631.48, -2811.48, 1001.55},
    {-1613.52, -2795.20, 1001.40},
    {-1622.12, -2808.64, 1004.81},
    {-1622.12, -2808.81, 1001.40},
    {-1643.81, -2818.76, 1005.42},
    {-1643.84, -2818.76, 1002.03},
    {-1633.12, -2816.61, 1005.42},
    {-1633.13, -2816.61, 1002.00},
    {-1643.83, -2822.27, 1005.44},
    {-1643.79, -2822.27, 1001.99},
    {-1633.14, -2820.12, 1005.40},
    {-1633.14, -2820.12, 1002.00},
    {-1612.63, -2808.70, 1004.81},
    {-1612.69, -2808.72, 1001.40},
    {-1604.27, -2795.02, 1001.40},
    {-1604.13, -2795.06, 1004.81},
    {-1633.11, -2823.63, 1005.43},
    {-1643.80, -2825.78, 1005.41},
    {-1633.13, -2823.63, 1002.00},
    {-1643.82, -2825.78, 1002.02},
    {-1695.54, -2796.56, 1002.00},
    {-1693.37, -2807.22, 1002.0},
    {-1699.03, -2796.58, 1002.00},
    {-1696.88, -2807.19, 1002.01},
    {-1702.54, -2796.51, 1002.03},
    {-1706.65, -2795.12, 1001.55},
    {-1706.89, -2794.97, 1004.99},
    {-1711.07, -2778.00, 1005.43},
    {-1711.10, -2778.00, 1002.00},
    {-1711.11, -2781.51, 1005.41},
    {-1711.10, -2781.51, 1002.01},
    {-1711.10, -2785.02, 1005.41},
    {-1711.16, -2785.02, 1002.03},
    {-1709.57, -2811.60, 1004.96},
    {-1709.63, -2811.72, 1001.55},
    {-1721.74, -2780.14, 1005.42},
    {-1721.77, -2780.15, 1002.00},
    {-1721.73, -2783.65, 1005.42},
    {-1721.76, -2783.66, 1001.99},
    {-1721.77, -2787.17, 1002.01},
    {-1721.84, -2787.16, 1005.47},
    {-1723.13, -2792.12, 1004.97},
    {-1723.12, -2792.12, 1001.5},
    {-1711.06, -2821.96, 1004.96},
    {-1711.07, -2821.93, 1001.54},
    {-1711.01, -2827.29, 1004.96},
    {-1711.08, -2827.20, 1001.54},
    {-1721.74, -2817.63, 1001.58},
    {-1721.85, -2817.96, 1004.96},
    {-1726.11, -2808.72, 1004.96},
    {-1726.11, -2808.81, 1001.54},
    {-1721.85, -2823.22, 1001.55},
    {-1732.75, -2795.11, 1004.81},
    {-1732.75, -2795.15, 1001.40},
    {-1721.82, -2826.71, 1005.40},
    {-1742.19, -2795.04, 1004.81},
    {-1741.35, -2808.70, 1001.40},
    {-1750.70, -2808.71, 1004.81},
    {-1750.71, -2808.63, 1001.40}
};
new ToiletStatus[sizeof(Toilet_Positions)][2];
enum J_DoorStructure
{
    J_ModelID,
    Float: J_PosX,
    Float: J_POS_Y,
    Float: J_POS_Z,
    Float: J_POS_RX,
    Float: J_POS_RY,
    Float: J_POS_RZ,
    bool: J_Status,
    J_ObjID
}
new J_IntDoors[][J_DoorStructure] =
{
    {17134, -1643.13, -2779.19, 1003.82, 0.00, 0.00, 89.90, false},
    {17134, -1643.13, -2779.20, 1000.41, 0.00, 0.00, 89.25, false},
    {17134, -1643.14, -2784.49, 1003.81, 0.00, 0.00, 90.22, false},
    {17134, -1643.13, -2784.49, 1000.41, 0.00, 0.00, 90.48, false},
    {17134, -1633.92, -2779.21, 1003.82, 0.00, 0.00, 89.83, false},
    {17134, -1633.80, -2778.03, 1000.41, 0.00, 0.00, 270.58, false},
    {17134, -1633.79, -2783.31, 1003.81, 0.00, 0.00, 270.29, false},
    {17134, -1633.81, -2783.32, 1000.41, 0.00, 0.00, 270.90, false},
    {17132, -1637.75, -2790.69, 1003.81, 0.00, 0.00, 0.56, false},
    {17134, -1646.64, -2794.55, 1003.80, 0.00, 0.00, 46.50, false},
    {17132, -1637.76, -2790.70, 1000.41, 0.00, 0.00, 0.24, false},
    {17134, -1646.65, -2794.53, 1000.43, 0.00, 0.00, 43.97, false},
    {10017, -1663.75, -2781.17, 1000.38, 0.00, 0.00, 90.22, false},
    {10017, -1663.81, -2783.46, 1000.36, 0.00, 0.00, 88.65, false},
    {17134, -1652.85, -2797.34, 1000.43, 0.00, 0.00, 180.00, false},
    {17134, -1656.36, -2797.34, 1000.41, 0.00, 0.00, 179.65, false},
    {17134, -1631.11, -2793.71, 1003.81, 0.00, 0.00, 314.96, false},
    {17134, -1631.07, -2793.66, 1000.40, 0.00, 0.00, 314.73, false},
    {17132, -1649.63, -2801.35, 1003.83, 0.00, 0.00, 90.48, false},
    {17134, -1659.87, -2797.34, 1000.43, 0.00, 0.00, 180.28, false},
    {17132, -1649.64, -2801.35, 1000.41, 0.00, 0.00, 89.86, false},
    {17133, -1664.64, -2801.35, 1003.89, 0.00, 0.00, 0.66, false},
    {17133, -1664.63, -2801.36, 1000.48, 0.00, 0.00, 1.30, false},
    {17134, -1654.02, -2806.41, 1000.42, 0.00, 0.00, 358.46, false},
    {17134, -1657.54, -2806.43, 1000.42, 0.00, 0.00, 0.34, false},
    {17134, -1661.02, -2806.41, 1000.41, 0.00, 0.00, 0.02, false},
    {17132, -1627.29, -2802.50, 1003.82, 0.00, 0.00, 270.00, false},
    {17134, -1645.80, -2810.05, 1003.83, 0.00, 0.00, 136.69, false},
    {17132, -1627.28, -2802.49, 1000.41, 0.00, 0.00, 269.38, false},
    {17134, -1645.82, -2810.07, 1000.42, 0.00, 0.00, 134.19, false},
    {17134, -1618.42, -2797.24, 1003.81, 0.00, 0.00, 0.09, false},
    {17134, -1618.42, -2797.17, 1000.42, 0.00, 0.00, 0.53, false},
    {17134, -1630.30, -2809.23, 1003.81, 0.00, 0.00, 225.46, false},
    {17134, -1630.34, -2809.21, 1000.43, 0.00, 0.00, 227.15, false},
    {17132, -1638.88, -2813.06, 1003.82, 0.00, 0.00, 179.45, false},
    {17132, -1638.90, -2813.06, 1000.41, 0.00, 0.00, 179.45, false},
    {17132, -1676.89, -2799.57, 1000.43, 0.00, 0.00, 357.52, false},
    {17134, -1642.98, -2817.10, 1003.83, 0.00, 0.00, 268.84, false},
    {17134, -1642.98, -2817.09, 1000.41, 0.00, 0.00, 268.87, false},
    {17134, -1617.24, -2806.53, 1003.82, 0.00, 0.00, 179.98, false},
    {17134, -1617.25, -2806.57, 1000.41, 0.00, 0.00, 180.72, false},
    {17134, -1633.93, -2818.27, 1003.81, 0.00, 0.00, 89.95, false},
    {17134, -1633.92, -2818.27, 1000.40, 0.00, 0.00, 90.58, false},
    {17134, -1643.01, -2820.62, 1003.83, 0.00, 0.00, 270.10, false},
    {17134, -1643.00, -2820.61, 1000.42, 0.00, 0.00, 268.87, false},
    {17134, -1609.00, -2797.23, 1003.81, 0.00, 0.00, 0.72, false},
    {17134, -1609.01, -2797.24, 1000.41, 0.00, 0.00, 0.87, false},
    {17134, -1633.94, -2821.79, 1003.85, 0.00, 0.00, 89.32, false},
    {17134, -1633.97, -2821.78, 1000.40, 0.00, 0.00, 89.32, false},
    {17134, -1643.00, -2824.12, 1003.82, 0.00, 0.00, 269.78, false},
    {17134, -1643.00, -2824.12, 1000.41, 0.00, 0.00, 269.81, false},
    {17134, -1607.83, -2806.56, 1003.84, 0.00, 0.00, 180.63, false},
    {17133, -1690.37, -2801.36, 1003.88, 0.00, 0.00, -0.69, false},
    {17134, -1633.94, -2825.28, 1003.82, 0.00, 0.00, 89.47, false},
    {17134, -1607.82, -2806.55, 1000.41, 0.00, 0.00, 180.12, false},
    {17133, -1690.38, -2801.36, 1000.47, 0.00, 0.00, 1.73, false},
    {17134, -1633.93, -2825.30, 1000.42, 0.00, 0.00, 89.64, false},
    {17133, -1604.16, -2802.46, 1000.38, 0.00, 0.00, 178.74, false},
    {17132, -1679.80, -2816.62, 1000.42, 0.00, 0.00, 89.21, false},
    {17134, -1693.88, -2797.33, 1000.41, 0.00, 0.00, 180.79, false},
    {17133, -1677.99, -2819.65, 1000.48, 0.00, 0.00, 90.56, false},
    {17134, -1697.37, -2797.34, 1000.42, 0.00, 0.00, 181.42, false},
    {17133, -1684.60, -2819.24, 1000.47, 0.00, 0.00, 90.16, false},
    {17134, -1695.03, -2806.42, 1000.41, 0.00, 0.00, 0.00, false},
    {17134, -1700.87, -2797.32, 1000.41, 0.00, 0.00, 179.86, false},
    {17132, -1679.25, -2826.92, 1000.48, 0.00, 0.00, 89.89, false},
    {17134, -1698.53, -2806.43, 1000.44, 0.00, 0.00, 0.00, false},
    {17134, -1702.04, -2806.44, 1000.41, 0.00, 0.00, 0.00, false},
    {17132, -1705.26, -2802.43, 1003.83, 0.00, 0.00, 270.99, false},
    {17132, -1705.26, -2802.42, 1000.42, 0.00, 0.00, 270.68, false},
    {17134, -1709.08, -2793.71, 1003.81, 0.00, 0.00, 314.14, false},
    {17134, -1709.10, -2793.72, 1000.40, 0.00, 0.00, 315.99, false},
    {17134, -1711.91, -2779.67, 1003.82, 0.00, 0.00, 91.18, false},
    {17134, -1711.88, -2779.67, 1000.42, 0.00, 0.00, 91.81, false},
    {17134, -1711.90, -2783.17, 1003.81, 0.00, 0.00, 91.49, false},
    {17134, -1711.90, -2783.17, 1000.43, 0.00, 0.00, 90.24, false},
    {17134, -1711.88, -2786.68, 1003.82, 0.00, 0.00, 90.55, false},
    {17133, -1675.06, -2837.32, 1000.46, 0.00, 0.00, 0.23, false},
    {17134, -1711.87, -2786.68, 1000.42, 0.00, 0.00, 91.81, false},
    {17134, -1708.24, -2809.24, 1003.81, 0.00, 0.00, 225.27, false},
    {17134, -1708.26, -2809.23, 1000.41, 0.00, 0.00, 226.78, false},
    {17132, -1716.00, -2790.68, 1003.84, 0.00, 0.00, 0.89, false},
    {17132, -1716.00, -2790.67, 1000.42, 0.00, 0.00, 1.21, false},
    {17134, -1720.98, -2778.48, 1003.83, 0.00, 0.00, 269.76, false},
    {17134, -1720.97, -2781.99, 1003.82, 0.00, 0.00, 270.07, false},
    {17134, -1720.98, -2778.49, 1000.40, 0.00, 0.00, 269.45, false},
    {17134, -1720.98, -2782.00, 1000.42, 0.00, 0.00, 269.45, false},
    {17134, -1720.98, -2785.50, 1003.82, 0.00, 0.00, 269.76, false},
    {17134, -1720.98, -2785.51, 1000.43, 0.00, 0.00, 269.76, false},
    {17134, -1711.79, -2819.30, 1003.82, 0.00, 0.00, 270.61, false},
    {17134, -1711.77, -2819.28, 1000.43, 0.00, 0.00, 270.29, false},
    {17132, -1717.15, -2813.05, 1003.83, 0.00, 0.00, 180.43, false},
    {17132, -1717.15, -2813.06, 1000.42, 0.00, 0.00, 179.81, false},
    {17134, -1724.61, -2794.53, 1003.81, 0.00, 0.00, 45.43, false},
    {17134, -1724.60, -2794.54, 1000.43, 0.00, 0.00, 45.75, false},
    {17134, -1711.78, -2824.57, 1003.81, 0.00, 0.00, 270.90, false},
    {17134, -1711.78, -2824.57, 1000.41, 0.00, 0.00, 270.27, false},
    {17134, -1723.77, -2810.05, 1003.82, 0.00, 0.00, 134.64, false},
    {17134, -1723.76, -2810.06, 1000.40, 0.00, 0.00, 135.24, false},
    {17132, -1727.63, -2801.28, 1003.83, 0.00, 0.00, 90.51, false},
    {17132, -1727.62, -2801.28, 1000.41, 0.00, 0.00, 90.19, false},
    {17134, -1721.11, -2820.45, 1003.81, 0.00, 0.00, 89.57, false},
    {17134, -1721.08, -2820.45, 1000.41, 0.00, 0.00, 89.50, false},
    {17134, -1720.97, -2824.58, 1003.81, 0.00, 0.00, 269.64, false},
    {17134, -1721.09, -2825.74, 1000.42, 0.00, 0.00, 90.84, false},
    {17134, -1737.65, -2797.22, 1003.83, 0.00, 0.00, 359.81, false},
    {17134, -1737.66, -2797.25, 1000.41, 0.00, 0.00, 1.04, false},
    {17134, -1736.47, -2806.57, 1003.84, 0.00, 0.00, 178.68, false},
    {17134, -1736.48, -2806.54, 1000.41, 0.00, 0.00, 180.22, false},
    {17134, -1747.08, -2797.24, 1003.82, 0.00, 0.00, 0.49, false},
    {17134, -1747.06, -2797.18, 1000.40, 0.00, 0.00, 359.21, false},
    {17134, -1745.90, -2806.55, 1003.81, 0.00, 0.00, 179.28, false},
    {17134, -1745.89, -2806.56, 1000.40, 0.00, 0.00, 179.26, false},
    {17133, -1750.70, -2801.36, 1000.42, 0.00, 0.00, 1.39, false}
};
new J_WorldDoors[][J_DoorStructure] =
{
    {17137, -1812.94, -2718.18, 12.49, 0.00, 0.00, 195.81, false},
    {17137, -1768.42, -2732.76, 12.70, 0.00, 0.00, 287.31, false},
    {17137, -1801.89, -2714.43, 12.50, 0.00, 0.00, 21.97, false},
    {17137, -1771.78, -2721.77, 12.70, 0.00, 0.00, 109.35, false},
    {17137, -1787.89, -2663.88, 12.34, 0.00, 0.00, 339.86, false},
    {17135, -1775.28, -2666.40, 10.08, 0.00, 0.00, 166.36, false},
    {17137, -1798.88, -2659.93, 12.32, 0.00, 0.00, 161.28, false}
};
new JailActor[2];
new AreaJail, AreaJailInterior;
new timecarsharingprice[MAX_PLAYERS];
new pricecarsharing[MAX_PLAYERS];
new timecarsh[MAX_PLAYERS];
new timecarshs[MAX_PLAYERS];
new dtimer, atimer;
new stiliok;
new scores[MAX_PLAYERS], scplay[MAX_PLAYERS], chets[MAX_PLAYERS];
new metro_train[MAX_PLAYERS] = -1,metro_user,metro_status,metro_zarplata[MAX_PLAYERS],metro_taimer[MAX_PLAYERS][2];
new FirstPerson[MAX_PLAYERS], bool:switch_fp[MAX_PLAYERS];
new garage_area[MAX_GARAGE];
#define ID_CEF_RPC 215
enum CefStyle {
	s_CefNone,
	s_CefInterface = 2,
 	s_CefSync = 32,
 	s_CefTinting = 12,
 	s_CefTurn = 15,
 	s_CefTuning = 17,
};
enum CefType {
	t_CefNone,
	t_CefUpdate = 2,
	t_CefShow = 4,
	t_CefHide,
	t_CefNumber = 6,
};
#define REG_CEF 0x34
#define CEF_REG 0x58
new
	_player_skin[MAX_PLAYERS] = {78, ...},
	bool:_player_skin_sex[MAX_PLAYERS char];
new bool:admin_logged[MAX_PLAYERS];
new vibor_biz_atm[MAX_PLAYERS] = 0; // 1 - Снять, 2 - Пополнить
new vibor_kiosk_atm[MAX_PLAYERS] = 0; // 1 - Снять, 2 - Пополнить
new vetr1, vetr2, vetr4, vetr5, vetr6, vetr7, vetrlift;
new door_mz[4];
new Test_server = 1;
new snoybord[MAX_PLAYERS] = -1;
new snoybord_cp;
stock Float:D_PlayerVehicle(playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,PX,PY,PZ);
		GetVehiclePos(vehicleid, X,Y,Z);
		new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
		return Distance;
	}
	return 0.0;
}
new RPPoint[MAX_PLAYERS];
enum RInfo
{
    Rcarid,
    Rprice,
    ROwned
};
new RentCar[MAX_RENT_VEH][RInfo];
new IsRentableVehicle[MAX_VEHICLES];
new Obj_tune[MAX_PLAYERS];
new sab[MAX_VEHICLES];
new ceno[MAX_VEHICLES];
new vodila[MAX_VEHICLES] = -1;
new OwnedName[MAX_PLAYER_NAME];
new tmphour, tmpminute, tmpsecond;
new RouletteStarted[MAX_PLAYERS];

new remen[MAX_PLAYERS];
enum noclipenum
{
	camera_mode,
	fly_object,
	mode_mode,
	l_rold,
	u_dold,
	last_move,
	Float:acce_lmul,
}

new noclipdata[MAX_PLAYERS][noclipenum];
stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;
    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT;
		else if(ud > 0) direction = MOVE_BACK_LEFT;
		else            direction = MOVE_LEFT;
	}
	else if(lr > 0)
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;
		else if(ud > 0) direction = MOVE_BACK_RIGHT;
		else			direction = MOVE_RIGHT;
	}
	else if(ud < 0) 	direction = MOVE_FORWARD;
	else if(ud > 0) 	direction = MOVE_BACK;
	return direction;
}

#define MOVE_SPEED            300.0 // режим полёта
#define ACCEL_RATE            0.03
#define CAMERA_MODE_NONE      0
#define CAMERA_MODE_FLY       1
#define IsPlayerVMuted(%0)       GetPlayerData(%0, P_VMUTE)       // есть ли мут
#define RAND_WEATHER				// система рандомной погоды
#define ATM_CREATED_PICKUP			// создавать ли пикапы для банкоматов
#define ENTER_PASSWORD_ATTEMPS 	(5)  // кол-во попыток на ввод пароля
#define REFER_BONUS_MONEY	(555_555) // бонус выдача денег реферу
#define MAX_AFK_TIME 			(30) // максимальное время афк (в минутах)
#define MAX_BANK_ACCOUNTS 		(15)	 // максимальное кол счетов в банке
#define MAX_PHONE_BOOK_CONTACTS (20) // макс. кол-во контактов для телефонной книги
#define MAX_AUTHORIZATION_TIME	(231) // время на авторизацию (в секундах)
#define MAX_BUSINESS			(200)// максимальное кол-во предприятий
#define MAX_BUSINESS_GPS		(40) // максимальное кол-во предприятий в GPS
#define MAX_HOUSES				(1000)// максимальное кол-во домов
#define MAX_HOUSE_ROOMS			(5)	 // максимальное кол-во комнат в доме
#define MAX_HOTELS 				(3)	 // максимальное кол-во отелей
#define MAX_HOTEL_FLOORS 		(2)  // максимальное кол-во этажей отеля
#define MAX_HOTEL_ROOMS 		(MAX_HOTEL_FLOORS * 5) // максимальное кол-во номеров в отеле// максимальное кол-во личных ТС
#define MAX_GANG_REPOSITORIES	(3)  // максимальное кол-во складов для банд
#define MAX_GZ					(100)// максимальное кол-во ганг-зон
#define MAX_WEAPON_TINTS		(13) // максимальное кол-во раскрасок оружия
#define MAX_ADVERTS				(100)// максимальное кол-во объявлений
#define MAX_GREEN_ZONES			(24)	 // максимальное кол-во зеленых зон
#define MAX_CARSHARING          (250) // максимальное кол-во каршеринга
#define MAX_RENTCAR          	(50)
#define MIN_PLAYERS_FOR_CAPTURE (5)	 // минимальное кол-во игроков для захвата территории
#define BIZ_HEALTH_SERVICE_PRICE (3500)	// стоимость использование аптечки в бизнесе
#define ADVERT_SEND_PRICE		(2500) // стоимость отправки объявления
#define MAP_ICON_STREAM_DISTANCE (200.0) // прорисовка иконок на карте (радиус)
//------------Сигналка------------
new soundveh[MAX_VEHICLES];
new beepplayer[MAX_VEHICLES][MAX_PLAYERS+1];
new kryak[MAX_VEHICLES][MAX_PLAYERS+1];
//------------Стробоскопы------------
new stroboskopes[MAX_VEHICLES];
new strob = 0;

#define VEHICLE_COORD_TYPE_BOOT		(1)
#define VEHICLE_COORD_TYPE_BONNET	(2)
#define SELECT_PANEL_TYPE_NONE			0
#define SELECT_PANEL_TYPE_CLOTHING		1
#define SELECT_PANEL_TYPE_REG_SKIN      9
#define SELECT_PANEL_TYPE_CAR_MARKET    6
#define GPS_STATUS_ON	true
#define GPS_STATUS_OFF	false
#define ADMIN_TYPE_NONE 	0
#define YADMIN_TYPE_NONE 	0
#define CONVERT_TIME_TO_SECONDS 	1
#define CONVERT_TIME_TO_MINUTES 	2
#define CONVERT_TIME_TO_HOURS 		3
#define CONVERT_TIME_TO_DAYS 		4
#define CONVERT_TIME_TO_MONTHS 		5
#define CONVERT_TIME_TO_YEARS 		6
// ------------------------------------------
#define ACCOUNT_STATE_NONE 		0
#define ACCOUNT_STATE_REGISTER 	1
#define ACCOUNT_STATE_LOGIN 	2
#define ACCOUNT_STATE_REG_SKIN 	3
// ------------------------------------------
#define REQUEST_TYPE_OFF		-1
#define REQUEST_TYPE_SUBNET		1
#define REQUEST_TYPE_IP			2
// ------------------------------------------
#define HOUSE_TYPE_NONE		(-1) 	// нет
#define HOUSE_TYPE_HOME		(0) 	// дом
#define HOUSE_TYPE_ROOM		(1) 	// аренда комнаты
#define HOUSE_TYPE_HOTEL	(2) 	// гостиница
// ------------------------------------------
#define REALTOR_TYPE_NONE	(0)
#define REALTOR_TYPE_HOUSE	(1) // дом
#define REALTOR_TYPE_BIZ	(2) // биз
// ------------------------------------------
#define GetOwnableCarData(%0,%1) 		g_ownable_car[%0][%1]
#define SetOwnableCarData(%0,%1,%2)		g_ownable_car[%0][%1] = %2
#define AddOwnableCarData(%0,%1,%2,%3)	g_ownable_car[%0][%1] %2= %3
#define GetCarshCarData(%0,%1) 		g_carsh_car[%0][%1]
#define SetCarshCarData(%0,%1,%2)		g_carsh_car[%0][%1] = %2
#define AddCarshCarData(%0,%1,%2,%3)	g_carsh_car[%0][%1] %2= %3
#define GetRentCarData(%0,%1) 		g_rent_car[%0][%1]
#define SetRentCarData(%0,%1,%2)		g_rent_car[%0][%1] = %2
#define AddRentCarData(%0,%1,%2,%3)	g_rent_car[%0][%1] %2= %3
#define IsOwnableCarOwned(%0)			(GetOwnableCarData(%0, OC_OWNER_ID) > 0)
#define IsCarshCarOwned(%0)			(GetCarshCarData(%0, OC_OWNER_ID) > 0)
// ------------------------------------------
#define GetHotelData(%0,%1,%2) 			g_hotel[%0][%1][%2]
#define SetHotelData(%0,%1,%2,%3) 		g_hotel[%0][%1][%2] = %3
#define AddHotelData(%0,%1,%2,%3,%4) 	g_hotel[%0][%1][%2] %3= %4
#define IsHotelRoomOwned(%0,%1)		(GetHotelData(%0, %1, H_OWNER_ID) > 0) // занят ли номер отеля
// ------------------------------------------
#define GetOrderData(%0,%1)			g_order[%0][%1]
#define SetOrderData(%0,%1,%2)		g_order[%0][%1] = %2
#define AddOrderData(%0,%1,%2,%3)	g_order[%0][%1] %2= %3
// ------------------------------------------
#define AntiFloodPlayerInit(%0) 			g_player_flood[%0] = g_flood_default_values
#define GetPlayerAntiFloodData(%0,%1) 		g_player_flood[%0][%1]
#define SetPlayerAntiFloodData(%0,%1,%2)	g_player_flood[%0][%1] = %2
#define SetPlayerInGarage(%0,%1)			SetPlayerData(%0, P_IN_GARAGE, %1)		// установить гараж в котором находится
#define AddPlayerAntiFloodData(%0,%1,%2,%3)	g_player_flood[%0][%1] %2= %3
// ------------------------------------------
#define GetPlayerPhoneBook(%0,%1,%2) 	g_player_phone_book[%0][%1][%2]
#define SetPlayerPhoneBook(%0,%1,%2,%3)	g_player_phone_book[%0][%1][%2] = %3
#define IsPlayerPhoneBookInit(%0) 			g_player_phone_book_init[%0]
#define SetPlayerPhoneBookInitStatus(%0,%1) g_player_phone_book_init[%0] = %1
#define GetPlayerPhoneBookContacts(%0) 		g_player_phone_book_contacts[%0]
#define SetPlayerPhoneBookContacts(%0,%1) 	g_player_phone_book_contacts[%0] = %1
#define GetPlayerPhoneBookSelectContact(%0) 		g_player_phone_book_select_cont[%0]
#define SetPlayerPhoneBookSelectContact(%0,%1) 		g_player_phone_book_select_cont[%0] = %1
// ------------------------------------------
#define GetPlayerPhoneCall(%0,%1) 		g_player_phone_call[%0][%1]
#define SetPlayerPhoneCall(%0,%1,%2)	g_player_phone_call[%0][%1] = %2
#define ClearPlayerPhoneCall(%0) g_player_phone_call[%0] = g_phone_call_default_values
#define GetPlayerOfferInfo(%0,%1) 		g_player_offer[%0][%1]
#define SetPlayerOfferInfo(%0,%1,%2) 	g_player_offer[%0][%1] = %2
#define SetPlayerOfferValue(%0,%1,%2) g_player_offer[%0][O_INCOMING_VALUE][%1] = %2
#define ClearPlayerOffer(%0) g_player_offer[%0] = g_offer_default_values
// ------------------------------------------
#define GetRepositoryData(%0,%1,%2) 	g_repository[%0][%1][%2]
#define SetRepositoryData(%0,%1,%2,%3)	g_repository[%0][%1][%2] = %3
// ------------------------------------------
#define GetPlayerListitemValue(%0,%1) 		g_player_listitem[%0][%1]
#define SetPlayerListitemValue(%0,%1,%2) 	g_player_listitem[%0][%1] = %2
#define ClearPlayerListitemValues(%0)		g_player_listitem[%0] = g_listitem_values
#define GetPlayerUseListitem(%0) 		g_player_listitem_use[%0]
#define SetPlayerUseListitem(%0,%1) 	g_player_listitem_use[%0] = %1
#define	GetPlayerYAdminEx(%0)	GetPlayerData(%0, P_YADMIN) 			// уровень ютуб админки
// ------------------------------------------
#define GetBankAccountData(%0,%1,%2)		g_bank_account[%0][%1][%2]
#define SetBankAccountData(%0,%1,%2,%3) 	g_bank_account[%0][%1][%2] = %3
#define GetPlayerBankTransfer(%0,%1) 	g_player_bank_transfer[%0][%1]
#define SetPlayerBankTransfer(%0,%1,%2)	g_player_bank_transfer[%0][%1] = %2
// ------------------------------------------
#define GetInfoPickupData(%0,%1) info_pickup[%0][%1]
// ------------------------------------------
#define GetTempJobInfo(%0,%1) g_temp_jobs[%0][%1]
// ------------------------------------------
#define GetMonthName(%0) 	month_name[%0 - 1]
#define GetDayName(%0) 		day_name[%0 - 1]
// ------------------------------------------
#define GetNumericName(%0)	numeric_name[%0 - 1]
// ------------------------------------------
#define GetATMInfo(%0,%1)	g_atm[%0][%1]
#define SetATMInfo(%0,%1,%2)	g_atm[%0][%1] = %2
// ------------------------------------------
#define GetPlayerContSpawn(%0)  GetPlayerData(%0, P_CONTS)
#define SetPlayerContSpawn(%0)  SetPlayerData(%0, P_CONTS)
// ------------------------------------------
#define GetTeleportData(%0,%1)		g_teleport[%0][%1]
#define SetTeleportData(%0,%1,%2)	g_teleport[%0][%1] = %2
// ------------------------------------------
#define GetTeleportListData(%0,%1)		g_teleport_list[%0][%1]
// ------------------------------------------
#define GetGangZoneData(%0,%1)			g_gang_zone[%0][%1]
#define SetGangZoneData(%0,%1,%2)		g_gang_zone[%0][%1] = %2
// ------------------------------------------
#define GetGangRepositoryData(%0,%1)		g_gang_repository[%0][%1]
#define SetGangRepositoryData(%0,%1,%2)		g_gang_repository[%0][%1] = %2
// ------------------------------------------
#define GetServerRadioData(%0,%1)	g_server_radio[%0][%1]
#define GetHelpInfoData(%0,%1) 		help_info[%0][%1]
#define GetAnimListData(%0,%1) 		anim_list[%0][%1]
#define GetMapIconsData(%0,%1) 		map_icons[%0][%1]
// ------------------------------------------
#define GetPlayerGPSInfo(%0,%1) 	g_player_gps[%0][%1]
#define SetPlayerGPSInfo(%0,%1,%2) 	g_player_gps[%0][%1] = %2
// ------------------------------------------
#define GetPlayerSettingData(%0,%1)		g_player_setting[%0][%1]
#define SetPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] = %2
#define AddPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] += %2
#define GetPlayerData(%0,%1) 	g_player[%0][%1]
#define SetPlayerData(%0,%1,%2)	g_player[%0][%1] = %2
#define AddPlayerData(%0,%1,%2,%3) g_player[%0][%1] %2= %3
#define GetPlayerAccountID(%0)	GetPlayerData(%0, P_ACCOUNT_ID) 	// ид аккаунта
#define GetPlayerIpEx(%0)		GetPlayerData(%0, P_IP) 			// ип игрока		// ип игрока
#define GetPlayerNameEx(%0)		GetPlayerData(%0, P_NAME) 			// имя игрока
#define GetPlayerColorEx(%0)	GetPlayerData(%0, P_COLOR)			// цвет игрока
#define GetPlayerSelectSkin(%0)	GetPlayerData(%0, P_SELECT_SKIN) 	// выбраный скин
#define GetPlayerLevel(%0)		GetPlayerData(%0, P_LEVEL)			// уровень игрока
#define GetPlayerExp(%0)		GetPlayerData(%0, P_EXP)			// очки опыта игрока
#define GetPlayerSuspect(%0)	GetPlayerData(%0, P_SUSPECT)		// уровень розыска игрока
#define GetExpToNextLevel(%0)	((GetPlayerData(%0, P_LEVEL)+1)*4) 	// очков опыта к следуйщему уровню
#define GetPlayerPhone(%0)		GetPlayerData(%0, P_PHONE)			// номер телефона игрока
#define GetPlayerWatch(%0)		GetPlayerData(%0, P_WATCH)			// номер телефона игрока
#define GetPlayerSex(%0)		GetPlayerData(%0, P_SEX)			// пол игрока
#define GetPlayerSexName(%0)	GetPlayerData(%0, P_SEX) ? ("Женский") : ("Мужской") // название пола
#define GetPlayerSexNam(%0)	GetPlayerData(%0, P_SEX) ? ("Жен.") : ("Муж.") // название пола
#define GetPlayerChatType(%0)	GetPlayerData(%0, P_CHAT_TYPE) 		// тип чата
#define	GetPlayerAdminEx(%0)	GetPlayerData(%0, P_ADMIN) 			// уровень админки
#define	GetPlayerMedcarta(%0)	GetPlayerData(%0, P_MEDCARTA)			// военный билет
#define	GetPlayerKDSet(%0)		GetPlayerData(%0, P_KDSET) 			// уровень админки
#define	GetPlayerMinEx(%0)		GetPlayerData(%0, P_MIND) 			// мин доступ
#define	GetPlayerVoennikEx(%0)	GetPlayerData(%0, P_VOEN)
#define	GetPlayerBrakEx(%0)	GetPlayerData(%0, P_WIFE_NAME) 			//
#define GetPlayerMoneyEx(%0)	GetPlayerData(%0, P_MONEY) 			// деньги игрока
#define GetPlayerBankMoney(%0)	GetPlayerData(%0, P_BANK) 			// деньги игрока
#define GetPlayerAFKTime(%0)	GetPlayerData(%0, P_AFK_TIME) 		// время афк
#define GetPlayerLastVehicle(%0) GetPlayerData(%0, P_LAST_VEHICLE) 	// ид последнего авто в котором сидел
#define GetPlayerJobCar(%0)		GetPlayerData(%0, P_JOB_CAR) 		// рабочий транспорт
#define GetPlayerJob(%0)		GetPlayerData(%0, P_JOB) 			// работа
#define GetPlayerInBiz(%0)		GetPlayerData(%0, P_IN_BUSINESS) 	// в какой бизнес вошел\находится
#define GetPlayerInHouse(%0)	GetPlayerData(%0, P_IN_HOUSE) 		// в какой доме вошел\находится
#define GetPlayerInGarage(%0)	GetPlayerData(%0, P_IN_GARAGE) 		// в какой гараж вошел\находится
#define GetPlayerTeamEx(%0)		GetPlayerData(%0, P_TEAM)			// организация в которой состоит игрок
#define GetPlayerHealthEx(%0)	GetPlayerData(%0, P_HEALTH)			// количество здоровья
#define GetPlayerPremium(%0)	GetPlayerData(%0, P_PREMIUM)		// премиум-аккаунт
#define GetPlayerAdmRep(%0)     GetPlayerData(%0, P_ADMREP)
#define GetPlayerAdmDm(%0)     GetPlayerData(%0, P_ADMDM)
#define GetPlayerAdmBan(%0)     GetPlayerData(%0, P_ADMBAN)
#define GetPlayerAdmMute(%0)     GetPlayerData(%0, P_ADMMUTE)
#define GetPlayerAdmKick(%0)     GetPlayerData(%0, P_ADMKICK)
#define GetPlayerRepair(%0)		GetPlayerData(%0, P_REPAIR)		// премиум-аккаунт
#define GetPlayerPremiumTime(%0)	GetPlayerData(%0, P_PREMIUM_TIME) // время действия премиум-аккаунта
#define GetPlayerSpawnSetting(%0) 		GetPlayerData(%0, P_SPAWN)  // место спавна
#define SetPlayerSpawnSetting(%0,%1) 	SetPlayerData(%0, P_SPAWN, %1)  // установка места спавна
#define GetPlayerCoins(%0) 		GetPlayerData(%0, P_COINS) 	// текущий баланс донат-очков
#define GetPlayerCurrentDonate(%0) 		GetPlayerData(%0, P_DONATE_CURRENT) 	// текущий баланс донат-очков
#define GetPlayerTotalDonate(%0) 		GetPlayerData(%0, P_DONATE_TOTAL) 	// всего пополнений баланса
#define GetPlayerJobName(%0) 	job_name[GetPlayerData(%0, P_JOB)]
#define	GetPlayerGiftEx(%0)	GetPlayerData(%0, P_LOGOTIP) 			// фиг знает что
#define GetPlayerTempJob(%0) 			GetPlayerData(%0, P_TEMP_JOB) 		// временная работа
#define GetPlayerTempJobState(%0) 		GetPlayerData(%0, P_TEMP_JOB_STATE) // что делать
#define GetPlayerTempJobCheckAnim(%0)	GetPlayerData(%0, P_TEMP_JOB_CHECK) // проверка анимки
#define GetPlayerJobLoadItems(%0) 		GetPlayerData(%0, P_JOB_LOAD_ITEMS) // загружено (...)
#define GetPlayerJobWage(%0) 			GetPlayerData(%0, P_JOB_WAGE) 		// зарплата
#define GetPlayerRentCar(%0)			GetPlayerData(%0, P_RENT_CAR)		// ид арендованного ТС
#define GetPlayerRentMop(%0)			GetPlayerData(%0, P_RENT_MOPED)		// ид арендованного ТС
#define GetPlayerAllowedCar(%0)			GetPlayerData(%0, P_ALLOWED_CAR)	// ид доверенного ТС
#define GetPlayerCarSlots(%0)			GetPlayerData(%0, P_CAR_SLOTS)		// количество слотов для транспорта
#define GetPlayerBizSlots(%0)			GetPlayerData(%0, P_BIZ_SLOTS)		// количество слотов для транспорта
#define GetPlayerHouseSlots(%0)			GetPlayerData(%0, P_HOUSE_SLOTS)		// количество слотов для транспорта
#define GetPlayerGarageSlots(%0)			GetPlayerData(%0, P_GARAGE_SLOTS)		// количество слотов для транспорта
#define GetPlayerKioskSlots(%0)			GetPlayerData(%0, P_KIOSK_SLOTS)		// количество слотов для транспорта
#define GetPlayerGardenSlots(%0)			GetPlayerData(%0, P_GARDEN_SLOTS)		// количество слотов для транспорта
#define SetPlayerUseTrunk(%0,%1)			SetPlayerData(%0, P_USE_TRUNK,	%1)	// установить ид авто используемого багажника
#define SetPlayerLogged(%0,%1)				SetPlayerData(%0, P_LOGGED, %1) 	// установить статус авторизации
#define SetPlayerChatType(%0,%1)			SetPlayerData(%0, P_CHAT_TYPE, %1) 	// установить тип чата
#define SetPlayerInBiz(%0,%1)				SetPlayerData(%0, P_IN_BUSINESS, %1)	// установить биз в котором находится
#define SetPlayerInHouse(%0,%1)				SetPlayerData(%0, P_IN_HOUSE, %1)		// установить дом в котором находится
#define SetPlayerTeamEx(%0,%1)					SetPlayerData(%0, P_TEAM, %1)			// организация в которой состоит игрок
#define SetPlayerTempJob(%0,%1) 			SetPlayerData(%0, P_TEMP_JOB, %1) 		// временная работа
#define SetPlayerTempJobState(%0,%1) 		SetPlayerData(%0, P_TEMP_JOB_STATE, %1)	// что делать
#define SetPlayerTempJobCheckAnim(%0,%1)	SetPlayerData(%0, P_TEMP_JOB_CHECK, %1) // проверка анимки
#define SetPlayerJobLoadItems(%0,%1) 		SetPlayerData(%0, P_JOB_LOAD_ITEMS, %1)	// загружено (...)
#define IsPlayerLogged(%0)		GetPlayerData(%0, P_LOGGED)		// статус авторизации
#define IsPlayerUseAnim(%0)		GetPlayerData(%0, P_USE_ANIM)	// использует ли анимку (/anim)
#define IsPlayerInJob(%0)		GetPlayerData(%0, P_IN_JOB)		// на работе ли
#define IsPlayerAFK(%0)			(GetPlayerData(%0, P_AFK_TIME) >= 5) // афк ли игрок
#define IsPlayerMuted(%0)       GetPlayerData(%0, P_MUTE)       // есть ли мут
#define IsPlayerRMuted(%0)      GetPlayerData(%0, P_RMUTE)      // есть ли блокировка репорта
#define IsPlayerFMuted(%0)       GetPlayerData(%0, P_FMUTE)       // ???? ?? ???
#define GetHouseTypeInfo(%0,%1)		g_house_type[%0][%1]
#define SetHouseTypeInfo(%0,%1,%2)	g_house_type[%0][%1] = %2
#define GetGarageData(%0,%1) 			g_garage[%0][%1]
#define SetGarageData(%0,%1,%2) 		g_garage[%0][%1] = %2
#define AddGarageData(%0,%1,%2,%3) 		g_garage[%0][%1] %2= %3
#define IsGarageOwned(%0)				(GetGarageData(%0, G_OWNER_ID) > 0)
#define GetHouseData(%0,%1)			g_house[%0][%1]
#define SetHouseData(%0,%1,%2)		g_house[%0][%1] = %2
#define AddHouseData(%0,%1,%2,%3)	g_house[%0][%1] %2= %3
#define GetKioskData(%0,%1)			g_kiosk[%0][%1]
#define SetKioskData(%0,%1,%2)		g_kiosk[%0][%1] = %2
#define AddKioskData(%0,%1,%2,%3)	g_kiosk[%0][%1] %2= %3
#define IsKioskOwned(%0)				(GetKioskData(%0, K_OWNER_ID) > 0)
#define IsHouseOwned(%0)			(GetHouseData(%0, H_OWNER_ID) > 0) // куплен ли дом
#define GetHouseRenterInfo(%0,%1,%2) 		g_house_renters[%0][%1][%2]
#define SetHouseRenterInfo(%0,%1,%2,%3) 	g_house_renters[%0][%1][%2] = %3
#define AddHouseRenterInfo(%0,%1,%2,%3,%4)	g_house_renters[%0][%1][%2] %3= %4
#define GetHouseRentersCount(%0)			g_house_renters_count[%0]
#define SetHouseRentersCount(%0,%1)			g_house_renters_count[%0] = %1
#define AddHouseRentersCount(%0,%1,%2)		g_house_renters_count[%0] %1= %2
#define IsHouseRoomOwned(%0,%1)				(GetHouseRenterInfo(%0, %1, HR_OWNER_ID) > 0)
#define GetBusinessInteriorInfo(%0,%1)	 	g_business_interiors[%0][%1]
#define SetBusinessInteriorInfo(%0,%1,%2) 	g_business_interiors[%0][%1] = %2
#define GetBusinessData(%0,%1) 			g_business[%0][%1]
#define SetBusinessData(%0,%1,%2) 		g_business[%0][%1] = %2
#define AddBusinessData(%0,%1,%2,%3) 	g_business[%0][%1] %2= %3
#define IsBusinessOwned(%0)				(GetBusinessData(%0, B_OWNER_ID) > 0)
#define GetBusinessGPSInfo(%0,%1)		g_business_gps[%0][%1]
#define SetBusinessGPSInfo(%0,%1,%2)	g_business_gps[%0][%1] = %2
#define AddBusinessGPSInfo(%0,%1,%2,%3) g_business_gps[%0][%1] %2= %3
#define GetTeamRankName(%0,%1)			rank_names[%0-1][%1-1]
#define GetTeamData(%0,%1)				g_organization[%0-1][%1]
#define SetTeamData(%0,%1,%2)			g_organization[%0-1][%1] = %2
#define GetTeamName(%0)					GetTeamData(%0, O_NAME)
#define GetWeaponName(%0)				weapon_names[%0]
#define GetWeaponTint(%0)				weapon_tints[%0]
#define GetWeaponTintData(%0,%1)		g_weapon_tint[%0][%1]
#define GetPlayerSpectateData(%0,%1)	g_spectate[%0][%1]
#define SetPlayerSpectateData(%0,%1,%2) g_spectate[%0][%1] = %2
#define GetAdvertData(%0,%1)			g_advert[%0][%1]
#define SetAdvertData(%0,%1,%2)			g_advert[%0][%1] = %2
forward NoRoof(playerid);
forward anim2(playerid);
new report_message[MAX_PLAYERS][200];
new mptp;
new g_carsh_car[MAX_CARSHARING][E_CARSH_CAR_STRUCT];
new g_rent_car[MAX_RENTCAR][E_RENT_CAR_STRUCT];
new Float: mpPos[3],
	mpWorld[2],
	number_mp_player,
	mp_status;

stock Float: GetAngleToPoint(Float:x1, Float:y1, Float:x2, Float:y2)
{
	return atan2(y1-y2, x1-x2)-90.0;
}

stock Float: GetVehicleSpeed(vehicleid)
{
	new Float: speed = -1;
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;
		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);
		speed = x / floatsin(-angle, degrees);
		speed *= 100.0;
	}
	return speed;
}
#define MAX_ADZONE  (16)
enum antidminfo
{
    zName[130],
	zStatus,
	Float:zX,
	Float:zY,
	Float:zZ
};
#define MAX_CREATE_OBJECTS 200
enum obj_INFO
{
	objID,
	objName[30],
	objModel,
	Float:objPosX,
	Float:objPosY,
	Float:objPosZ,
	Float:objRotX,
	Float:objRotY,
	Float:objRotZ
}
new
	ObjInfo[MAX_CREATE_OBJECTS][obj_INFO],
	TOTALOBJECTS,
	EditObjectPlayer[MAX_PLAYERS],
	ObjectNamePlayer[MAX_PLAYERS][30];

new stagest[MAX_PLAYERS];
new stagestats[MAX_PLAYERS];
new EditStage1Player[MAX_VEHICLES];
new EditStage1_1Player[MAX_VEHICLES];
new EditStage2Player[MAX_VEHICLES];
new EditStage3Player[MAX_VEHICLES];
new Stage1[MAX_VEHICLES];
new Stage1_1[MAX_VEHICLES];
new Stage2[MAX_VEHICLES];
new Stage3[MAX_VEHICLES];

new AntiDm[MAX_ADZONE][antidminfo] =
{
    {"Автошкола", 1, 2280.9009,1399.0365,12.2522},
	{"Радио Арзамас", 1, -398.1861,945.5391,12.1484},
	{"Больница", 1, -286.9034, 576.8859, 12.8447},
	{"Банк Арзамас", 1, 262.7270,1709.3180,13.0819},
	{"Банк Южный", 1, 2376.7405,-2139.2598,22.0776},
	{"Шахта", 1, -570.2114,-1456.7656,41.0009},
	{"Армия", 1, 1695.4014,1316.6548,12.6094},
	{"Церковь", 1, -2478.2612,2518.5479,46.6686},
	{"МВД", 1, 2563.5522,-2420.1042,22.8922},
	{"МВД", 1, -352.0312,356.7699,13.0400},
	{"Правительство", 1, -2467.5537, 1541.8041, 53.0278},
	{"Русская мафия", 1, -133.3660,254.7621,12.3572},
	{"Японская мафия", 1, 409.0703,1677.5908,12.0400},
	{"Итальянская мафия", 1, -40.7463, 1361.4651, 12.8750},
	{"Военкомат", 1, 1919.4358,2304.0698,15.5697},
	{"Спавн Новичков", 1, -753.8085,870.4588,12.0300}
};
new DMStatus[MAX_PLAYERS];

enum E_PLAYER_STRUCT // структура игрока
{
	P_ACCOUNT_ID, 	// ид аккаунта
	P_REFER[21],	// рефер
	P_SEX,			// пол игрока
	P_PASSWORD[85], // пароль игрока
	P_EMAIL[60 + 1],// емайл игрока
	bool: P_CONFIRM_EMAIL,// подтвержден ли емайл
	P_SKIN,			// скин игрока
	P_MONEY[21],		// деньги игрока
	P_VOEN,      // военный билет
	P_BANK[21],			// деньги в банке
	P_ADMIN,		// уровень админки
	P_BUYADMIN,
	P_YADMIN,
	P_DISEASE[2],    //
	P_DDISEASE,
	P_KDSET,
	P_MIND,         // мин доступ
	P_DRIVING_LIC,	// лицензия на управление авто
	P_WEAPON_LIC,	// лицензия на оружие
	P_REG_TIME,		// время регистрации
	P_REG_IP[16],	// ип при регистрации
	P_LAST_IP[16],	// ип при последнем входе
	P_LEVEL,		// уровень игрока
	P_EXP,			// очки опыта игрока
	P_SUSPECT,		// уровень розыска
	P_PHONE,		// номер телефона
	P_WATCH,		// Apple Watch
	P_PHONE_BALANCE,// на счету телефона
	P_PHONE_COLOR,	// цвет телефона
	P_LAW_ABIDING,	// законопослушность
	P_IMPROVEMENTS, // улучшения
	P_WIFE,			// жена
	P_TEAM,			// организация
	P_OSKIN,		// скин организации
	P_SUBDIVISON,	// подразделение
	P_WAGE,			// зарплата
	P_JOB,			// работа / должность(ранг)
	P_HOUSE_TYPE,	// тип жилья (дом/гостиница/в гостях)
	P_HOUSE_ROOM,	// комната в доме
	P_HOUSE,		// дом
	P_ID_SPAWN,		// дом
	P_HOUSE_SLOTS,		// дом
	P_BUSINESS,		// бизнес
	P_SETTING_PHONE[13],// реальный телефон игрока
	P_SETTING_PIN[5], 	// пин код
	P_REQUEST_PHONE,	// запрос телефона при авторизации
	P_REQUEST_PIN,		// запрос пин кода при авторизации
	P_LAST_LOGIN_TIME,	// время последнего входа\выхода
	P_GAME_FOR_HOUR,	// время игры за час
	P_GAME_FOR_DAY,		// время игры за день
	P_GAME_FOR_DAY_PREV,// время игры за вчерашний день
	P_COLOR,		// цвет игрока
	P_SELECT_SKIN, 	// выбраный скин
	P_CHAT_TYPE,	// тип чата
	P_AFK_TIME,		// время афк
	P_LAST_VEHICLE,	// ид последнего авто в котором сидел
	P_LAST_DIALOG,	// ид последнего диалога
	P_USE_ANIM_TYPE,// тип анимки который использует
	P_PASS_ATTEMPS, // кол-во попыток на авторизацию
	P_TARGET_ID,	// нацелен на игрока
	Float: P_HEALTH,// хп игрока
	P_TEMP_JOB,				// временная работа
	P_TEMP_JOB_STATE,		// действие что надо делать
	P_TEMP_JOB_CHECK,		// проверка анимки
	P_JOB_SERVICE_NAME[17],	// название службы
	P_JOB_TARIFF,			// тариф
	P_JOB_WAGE,				// Зарплата
	P_JOB_LOAD_ITEMS,		// загружено/перенесено (груза/руды)
	P_JOB_CAR,				// рабочий транспорт
	P_END_JOB_TIMER,		// таймер окончания работы
	P_FACTORY_USE_DESK,		// Какой стол использует на заводе
	P_BUS_ROUTE, 			// маршрут автобуса
	P_POMOI_ROUTE_STEP,		// шаг маршрута
	P_LOAD_ROUTE_STEP,		// шаг маршрута
	P_BUS_ROUTE_STEP,		// шаг маршрута
	P_MECHANIC_FILL_PAY,	// заправлено на N руб
	P_MECHANIC_REPAIR_PAY,	// отремонтировано на N руб
	bool: P_IN_JOB,			// на работе ли
	bool: P_LOGGED,				// статус авторизации
	bool: P_USE_ANIM,			// использует ли анимку (/anim)
	bool: P_BLOCK_LEAVE_AREA, 	// заблокировать вызов OnPlayerLeaveDynamicArea
	bool: P_ANIMS_INIT,			// прогружены ли анимки при спавне
	bool: P_ANIM_LIST_INIT,		// прогружен ли анимлист
	bool: P_SNACK,				// есть ли у игрока закуска
	Text3D: P_ADVISOR_LABEL,	// бейджик советника
	bool: P_ADVISOR_BLOCK_CHAT,	// отключение чата организации
	Text3D: ADMIN_LABEL,	// бейджик admin'a
	Text3D: GAADMIN_LABEL,
	P_AUTH_TIME,		// время на авторизаци
	P_IN_BUSINESS,		// в какой бизнес вошел
	P_IN_HOUSE,			// в какой дом вошел
	P_IN_ENTRANCE,		// в каком подъезде
	P_IN_ENTRANCE_FLOOR,// на каком этаже в подъезде
	P_LAST_PICKUP,		// ид пикапа на которым стоял последний раз
	P_IN_HOTEL_ROOM,	// в каком номере в отеле
	P_IN_HOTEL_FLOOR,	// на каком этаже в отеле
	P_MASK,				// маска
	P_DRINK_STEP,		// кол-во использование напитка
	P_REALTOR_TYPE,		// риелторка
	P_IP[16], 			// ип игрока
	P_NAME[20 + 1], 	// имя игрока
	P_WIFE_NAME[21],	// имя жены
	P_ACCOUNT_STATE, 		// статус аккаунта (авторизаци/регистрация)
	P_ACCOUNT_STEP_STATE, 	// шаг (регистрации/авторизации)
	P_WARN,             // варны
	P_WARN_TIME,        // время варнов
	P_MUTE,             // время мута
	P_RMUTE,
	P_AUNRMUTE,
	P_ARMUTE,
	P_POWER,			// сила
	P_SKILL_COLT,     	// скилл кольт
	P_SKILL_SDPISTOL,   // скилл пистолет с глушителем
	P_SKILL_DEAGLE,     // скилл дигл
	P_SKILL_SHOTGUN,    // скилл дробовик
	P_SKILL_MP5,        // скилл мп5
	P_SKILL_AK47,	    // скилл ак47
	P_SKILL_M4,         // скилл м4
	P_SKILL_SNIPER_RIFLE,	// скилл снайперская винтовка
	P_SKILL_SAWNOFF,    // скилл обрез
	P_SKILL_COMBAT_SG,  // скилл тактический дробовик
 	P_SKILL_MICRO_UZI,  // скилл микро-узи
 	P_SPAWN,            // место спавна
	P_DONATE_CURRENT,	// текущий баланс донат-очков
	P_DONATE_TOTAL,		// всего приобретено донат-очков
	bool: P_HOSPITAL,	// лежит ли в больнице
	P_OCCUPIED_BED,		// номер койки
	bool: P_WEAPON_RELOADING,	// перезаряжает ли оружие
	P_RELOADINGS_COUNT[11],		// количество перезарядок для каждого оружия
	bool: P_CUFFED,		// наручники на игроке
	P_BUY_CAR,			// покупает ли авто
	P_CARSH_CAR,		// каршеринг авто
	P_RENT_CAR,			// арендованная машина
	P_ALLOWED_CAR,		// доверенная машина
	P_CAR_SLOTS,		// количество слотов для авто
	P_JAIL,				// время заключения
	P_ARREST,           // время заключения в КПЗ
	P_HEAL,
	P_WEAPON_TINT[MAX_WEAPON_TINTS], // раскраски оружия
	P_ORDER,			// выполняет ли заказ
	P_PREMIUM,			// уровень премиум аккаунта
	P_PREMIUM_TIME,		// время действия премиум аккаунта
	Text3D: P_FAM_LABEL,	// бейджик фамы
	P_FORTUNE_WHEEL,
	P_END_CAR_TIMER, //таймер выхода из авто
	P_ADMIN_PASSWORD[16],
	P_VMUTE,
	P_STYLE_1,
	P_STYLE_2,
	P_STYLE_3,
	P_STYLE_4,
	P_STYLE_5,
    P_PATRON[13],
    P_WEAPON[13],
	P_GARAGE_SLOTS,
    P_BIZ_SLOTS,		// количество слотов для авто
    P_KIOSK_SLOTS,		// количество слотов для авто
	P_GARDEN_SLOTS,
    P_AWARN,
    bool: P_ESCORTE,
 	P_FAMILY,
	P_FAMILY_RANK,
	P_FMUTE,
	P_FWARN,
    P_IN_GARAGE,
	P_RENT_MOPED,
	P_SCORE,
	P_VIPPREFIX[64],
	P_MYPREFIX[64],
	P_MYPREFIX_COLOR[64],
	P_EAT,
	P_MUDER,
	P_ADVOKAT,
	P_MOBILE,
	P_VIP,
	P_SPONSOR,
	pPlainLic,
	P_NG_CALENDAR[21],
	P_EAT_STATUS,
	P_EAT_STATUS_SRED,
	P_EAT_STATUS_BIG,
	P_MEDCARTA,
	Float: P_AFTER_X,
	Float: P_AFTER_Y,
	Float: P_AFTER_Z,
	P_DANCE_0,
	P_DANCE_1,
	P_DANCE_2,
	P_DANCE_3,
	P_DANCE_4,
	P_DANCE_5,
	P_DANCE_6,
	P_DANCE_7,
	P_DANCE_8,
	P_DANCE_9,
	P_DANCE_10,
	P_DANCE_11,
	P_DANCE_12,
	P_DANCE_13,
	P_DANCE_14,
	P_DANCE_15,
	P_DANCE_16,
	P_DANCE_17,
	P_DANCE_18,
	P_DANCE_19,
	P_DANCE_20,
	P_DANCE_21,
	P_DANCE_22,
	P_DANCE_23,
	P_DANCE_24,
	P_DANCE_25,
	P_DANCE_26,
	P_DANCE_27,
	P_DANCE_28,
	P_DANCE_29,
	P_DANCE_30,
	P_DANCE_31,
	P_DANCE_32,
	P_DANCE_33,
	P_CARSH_TIME,
	P_PAYDAY,
	P_KILL_CAPT,
	P_DOSTIJ1,
	P_DOSTIJ2,
	P_DOSTIJ3,
	P_DOSTIJ4,
	P_DOSTIJ5,
	P_DOSTIJ6,
	P_DOSTIJ7,
	P_DOSTIJ8,
	P_DOSTIJ9,
	P_DOSTIJ10,
	P_DOSTIJ11,
	P_DOSTIJ12,
	P_DOSTIJ13,
	P_DOSTIJ14,
	P_DOSTIJ15,
	P_DOSTIJ16,
	P_DOSTIJ17,
	P_DOSTIJ18,
	P_DOSTIJ19,
	P_DOSTIJ20,
	P_DOSTIJ21,
	P_DOSTIJ22,
	P_DOSTIJ23,
	P_DOSTIJ24,
	P_DOSTIJ25,
	P_PLSBAD,
	P_NAKOLKA,
	P_MESHOK,
	P_MESHOKK,
	P_OGLOX,
	P_ADMREP,
	P_ADMDM,
	P_ADMBAN,
	P_ADMMUTE,
	P_MEDCARD,
	P_MEDCARD_STATUS,
	P_ADMKICK,
	P_BLACK_MARKET_WIN,
	P_BLACK_MARKET_BET,
	P_COINS,
	P_WARDS_PRIZE,
	P_WARDS_TYPE_PRIZES,
	P_HARDWARE_ID[250],
	P_HARDWARE_ID_TEMP[250],
	P_HARDWARE_BAN,
	P_DRAG_SCORE,
	P_TK_JOB,
	P_TK_JOB_TYPE,
	P_CASINO_ROLL,
	P_FORTUNE_KD,
	P_BP_PREMIUM,
	P_BP_LEVEL,
	P_BP_PRIZE_1,
	P_BP_PRIZE_2,
	P_BP_EXP,
	P_BP_TIME_TASKS,
	P_IN_TRADE_ROOM,
	P_AUCTION_SLOTS,
	P_VOICEMUTE,
	P_LOG
};

new woshtimer[MAX_PLAYERS];
new wosh_status[MAX_PLAYERS];
enum
{
	STORAGE_METALL = 0, // максимальное кол-во металла
	STORAGE_AMMO, // максимальное кол-во патронов
	STORAGE_DRUGS // максимальное кол-во наркотиков
}

new ranomnomber[MAX_PLAYERS][15];
new ranomnomberreg[MAX_PLAYERS][15];
enum E_OWNABLE_CAR_STRUCT
{
	OC_SQL_ID, 			// ea a aaca
	OC_OWNER_ID,		// ea aeaaaeuoa
	OC_OWNER_NAME[21],	// eiy aeaaaeuoa
	OC_NUMBER[8],
	OC_REGION[10],	
	OC_NUMBERTYPE,
	OC_MODEL_ID,
	OC_MASLO,
	OC_MASLO_FILTER,
	OC_FILTER,
	OC_COLOR_1,
	OC_COLOR_2,	
	OC_C1,
	Float: OC_POS_X,
	Float: OC_POS_Y,
	Float: OC_POS_Z,
	Float: OC_ANGLE,
	bool: OC_ALARM,	
	bool: OC_KEY_IN,
	OC_DISKI,
	OC_GIDRA,
	OC_NITRO,
	OC_CREATE,
	OC_RENT,
	OC_RANG,
	OC_RENTP,			// время создания
	Float: OC_KOLESO_1,
	Float: OC_KOLESO_2,
	Float: OC_KOLESO_3,
	Float: OC_KOLESO_4,
	OC_ST_LOAD,
    OC_TONERINSTALL,
	OC_PNEWMA,
	OC_SAB,
	OC_VINIL,
	OC_VINILTYPE,
	OC_GLASS,
	OC_PROCENT,
	OC_STEKLO_0,
	OC_STEKLO_1,
	OC_STEKLO_2,
	OC_STEKLO_3,
	OC_WASH,
	Float: OC_FUEL,
	OC_STAGE1,
	OC_STAGE2,
	OC_STAGE1_1,
	OC_STAGE,
	OC_STAGE3,
	OC_OBVES[100],
	Float: OC_ST1X,
	Float: OC_ST1Y,
	Float: OC_ST1Z,
	Float: OC_ST1RX,
	Float: OC_ST1RY,
	Float: OC_ST1RZ,
	Float: OC_ST2X,
	Float: OC_ST2Y,
	Float: OC_ST2Z,
	Float: OC_ST2RX,
	Float: OC_ST2RY,
	Float: OC_ST2RZ,
	Float: OC_ST3X,
	Float: OC_ST3Y,
	Float: OC_ST3Z,
	Float: OC_ST3RX,
	Float: OC_ST3RY,
	Float: OC_ST3RZ,
	Float: OC_ST11X,
	Float: OC_ST11Y,
	Float: OC_ST11Z,
	Float: OC_ST11RX,
	Float: OC_ST11RY,
	Float: OC_ST11RZ,
	OC_STATUSTS,
	OC_VEHID,
	OC_FAM_CAR,
	OC_FAM_CAR_RANK,
	OC_MESTOID,
	OC_BY_ID,
	Float: OC_BY_POS_X,
	Float: OC_BY_POS_Y,
	Float: OC_BY_POS_Z,
	Float: OC_BY_ANGLE,
	Float: OC_SAB_X,
	Float: OC_SAB_Y,
	Float: OC_SAB_Z,
	Float: OC_SAB_RX,
	Float: OC_SAB_RY,
	Float: OC_SAB_RZ,
	OC_NO_KEY_DOSTUP,
	OC_TSELECT[155],
	OC_TCOLOR[155],
	OC_TPROCENT[155],
	Float: OC_PNEWMA_1,
	Float: OC_PNEWMA_2,
	Float: OC_ENGINE_ACCELERATION,
	Float: OC_MAX_VELOCITY,
	OC_MUSIC_NAME[148],
	OC_MUSIC_STATUS,
	OC_MUSIC_VOLUME,
	Float: OC_MUSIC_X,
	Float: OC_MUSIC_Y,
	Float: OC_MUSIC_Z,
	OC_MUSIC_TIME,
	OC_NUMBER_STATUS,
	OC_INTER,
	OC_WORLD
};

enum E_HOTEL_STRUCT
{
	H_SQL_ID,
	H_OWNER_ID,
	H_RENT_DATE,
	bool: H_STATUS,
	H_OWNER_NAME[21]
};

enum E_HOTEL_CAR_PARK_STRUCT
{
	Float: HC_POS_X,
	Float: HC_POS_Y,
	Float: HC_POS_Z,
	Float: HC_ANGLE,
	HC_VEHICLE_ID
};

enum E_FER_STRUCT
{
	Float: FER_POS_X,
	Float: FER_POS_Y,
	Float: FER_POS_Z,
	Float: FER_POS_A
};

enum E_HOUSE_STRUCT
{
	H_SQL_ID,			// ид в базе данных
	H_NAME[20],			// название \ тип
	H_OWNER_ID,			// ид аккаунта владельца
	H_MIAMI,            // МАЙАМИ
	H_CITY,				// ид города
	H_ZONE,				// ид района
	H_IMPROVEMENTS,		// уровень улучшений
	H_RENT_DATE,		// аренда на n времени
	H_PRICE,			// стоимость дома
	H_RENT_PRICE,		// плата за аренду в день
	H_LOCK_STATUS,		// статус (открыто/закрыто)
	H_ENTRACE,			// ид подьезда
	H_TYPE,				// тип дома (интерьер)
	Float: H_POS_X,		// позиция пикапа входа
	Float: H_POS_Y,		// позиция пикапа входа
	Float: H_POS_Z,		// позиция пикапа входа
	Float: H_EXIT_POS_X,// позиция после выхода из дома
	Float: H_EXIT_POS_Y,// позиция после выхода из дома
	Float: H_EXIT_POS_Z,// позиция после выхода из дома
	Float: H_EXIT_ANGLE,// угол поворота
	Float: H_CAR_POS_X,	// позиция транспорта
	Float: H_CAR_POS_Y,	// позиция транспорта
	Float: H_CAR_POS_Z,	// позиция транспорта
	Float: H_CAR_ANGLE,	// угол поворота транспорта
	Float: H_STORE_X,	// позиция шкафа
	Float: H_STORE_Y,	// позиция шкафа
	Float: H_STORE_Z,	// позиция шкафа
	H_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: H_STORE_LABEL,	// 3д текст (шкаф)
	H_ENTER_PICKUP,			// пикап входа
	H_HEALTH_PICKUP,		// пикап аптечки
	H_MAP_ICON,				// иконка на карте
	H_FLAT_ID,				// номер квартиры
	H_EVICTION			// продажа из-за задолженности
};

enum E_HOUSE_TYPE_STRUCT
{
	HT_NAME[40],
	Float: HT_ENTER_POS_X,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Y,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Z,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_ANGLE,	// позиции после входа в интерьера
	Float: HT_HEALTH_POS_X,		// позиции аптечки
	Float: HT_HEALTH_POS_Y,		// позиции аптечки
	Float: HT_HEALTH_POS_Z,		// позиции аптечки
	Float: HT_STORE_POS_X,		// позиции шкафа
	Float: HT_STORE_POS_Y,		// позиции шкафа
	Float: HT_STORE_POS_Z,		// позиции шкафа
	Float: HT_SKLAD_POS_X,		// позиции склада банды
	Float: HT_SKLAD_POS_Y,		// позиции склада банды
	Float: HT_SKLAD_POS_Z,		// позиции склада банды
	HT_INTERIOR,				// ид интерьера
	HT_ROOMS					// кол-во комнат
};

enum E_HOUSE_ROOM_STRUCT
{
	HR_SQL_ID,			// ид в базе
	HR_OWNER_ID,		// ид игрока
	HR_RENT_DATE,		// насколько арендована комната
	HR_RENT_TIME,		// когда поселился
	HR_OWNER_NAME[21]	// ник арендатора
};

enum // управление домом
{
	HOUSE_OPERATION_PARAMS, 		// изменение параметров дома
	HOUSE_OPERATION_LOCK,			// открыть / закрыть
	HOUSE_OPERATION_IMPROVEMENTS,	// улучшение
	HOUSE_OPERATION_CAR_DELIVERY,	// доставить ТС к дому
	HOUSE_OPERATION_CAR_GPS,		// отметить транспорт на GPS
	HOUSE_OPERATION_RENTERS			// список арендаторов
}

enum // управление домом
{
	GARAGE_OPERATION_PARAMS, 		// изменение параметров дома
	GARAGE_OPERATION_LOCK,			// открыть / закрыть
	GARAGE_OPERATION_CAR_GPS,		// отметить транспорт на GPS
	GARAGE_OPERATION_IMPROVEMENTS,	// улучшение
	GARAGE_OPERATION_CAR_DELIVERY	// доставить ТС к дому
}

enum E_BUSINESS_STRUCT
{
	B_SQL_ID,			// ид в базе данных
	B_NAME[30],			// название
	B_OWNER_ID,			// ид аккаунта владельца
	B_CITY,				// ид города
	B_ZONE,				// ид района
	B_ENTER_PRICE,		// цена за вход в биз
	B_ENTER_MUSIC,		// звук при входе
	B_IMPROVEMENTS,		// уровень улучшений
	B_PRODS,			// количества продуктов
	B_PROD_PRICE,		// стоимость 1 продукта
	B_BALANCE[21],			// бюджет бизнеса
	B_ARENDA_PRICE,
	B_RENT_DATE,		// аренда на n времени
	B_PRICE,			// стоимость бизнеса
	B_RENT_PRICE,		// плата за аренду в день
	B_LOCK_STATUS,		// статус (открыта/закрыта)
	B_TYPE,				// тип бизнеса
	B_INTERIOR,			// интерьер
	Float: B_POS_X,		// позиция бизнеса
	Float: B_POS_Y,		// позиция бизнеса
	Float: B_POS_Z,		// позиция бизнеса
	Float: B_EXIT_POS_X,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Y,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Z,// позиция после выхода из бизнеса
	Float: B_EXIT_ANGLE,// угол поворота
	Float: G_CAR_POS_X,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Y,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Z,// позиция после выхода из бизнеса
	Float: G_CAR_ANGLE,// угол поворота
	B_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: B_LABEL,		// 3д текст
	B_ORDER_ID,				// слот заказа
	B_HEALTH_PICKUP,		// ид пикапа аптечки
	B_EVICTION,
	B_GANG,
	B_GANG_NAME[50],
	B_ELECTRICITY,
	B_IZNOS,
	B_TIME_REPAIR_1,
	B_TIME_REPAIR_2,
	B_TYPEWETRIKI
};

enum // типы бизнесов
{
	BUSINESS_TYPE_SHOP_24_7 		= 1, 	   	// Магазин 24/7
	BUSINESS_TYPE_CLUB 				= 2, 	   	// Клуб (алхамбра)
	BUSINESS_TYPE_REALTOR_BIZ 		= 3, 	   	// Управление статистики (бизнесы)
	BUSINESS_TYPE_REALTOR_HOME 		= 4,	   	// Риелторское агенство (дома)
	BUSINESS_TYPE_CLOTHING_SHOP 	= 5,
	BUSINESS_TYPE_HOTEL 			= 6,       	// гостиница
	BUSINESS_TYPE_CAR_MARKET		= 7,      	// Автосалон
	BUSINESS_TYPE_CASINO 			= 8,       	// Казино
	BUSINESS_TYPE_CELL_SALON 		= 9,      	// Сотовый салон
	BUSINESS_TYPE_CAR_TUNING 		= 10,     	// станция тех. обслуживания
	BUSINESS_TYPE_BUY_GUN 			= 11,      	// Магазин оружия
	BUSINESS_TYPE_BANK 				= 12,      	// Банк
	BUSINESS_TYPE_COMP_CLUB 		= 13,      	// Компьютерный клуб
	BUSINESS_TYPE_SPORT 			= 14,      	// Спортзал
	BUSINESS_TYPE_DETEL	 			= 15,      	// Детейлинг
	BUSINESS_TYPE_ARENDA			= 16,      	// Аренда авто
	BUSINESS_TYPE_STO				= 17,      	// СТО
	BUSINESS_TYPE_FERMA				= 18,      	// Ферма
	BUSINESS_TYPE_DET 				= 19,      	// Детейлинг
	BUSINESS_TYPE_BY 				= 20,      	// Авторынок
	BUSINESS_TYPE_XZ 				= 21,      	// Фиг его знает
	BUSINESS_TYPE_METRO				= 22,      	// Метро новое
	BUSINESS_TYPE_SHIN      		= 23,      	// Шиномонтаж
	BUSINESS_TYPE_SHOP_GARDEN 		= 24,		// Садовод
	BUSINESS_TYPE_PARIK      		= 25,     	// Парикхмахерская
	BUSINESS_TYPE_AVTOZAP 			= 26,       // Автозапчасти
	BUSINESS_TYPE_TIR 				= 27,       // Тир
	BUSINESS_TYPE_DETEYLING 		= 28,      	// Тонировка
	BUSINESS_TYPE_NOTARIUS 			= 29,       // Нотариус
	BUSINESS_TYPE_WOSH 				= 30,       // Стиралка одежды
	BUSINESS_TYPE_ZAKUS 			= 31,       // Закусочная
	BUSINESS_TYPE_APTEKA 			= 32,       // Аптека
	BUSINESS_TYPE_KONDITER 			= 33,     	// Кондитерская
	BUSINESS_TYPE_BY_NIZ 			= 34,
	BUSINESS_TYPE_BY_SRED 			= 35,
	BUSINESS_TYPE_VETRIKI 			= 36,
	BUSINESS_TYPE_FUEL_STATION 		= 37,
	BUSINESS_TYPE_CAR_MARKET_NIZ 	= 38,		// Автосалон
	BUSINESS_TYPE_CAR_MARKET_AVIA	= 39,		// Автосалон
	BUSINESS_TYPE_CAR_MARKET_VODA 	= 40,		// Автосалон
	BUSINESS_TYPE_CAR_MARKET_MOTO 	= 41,		// Автосалон
	BUSINESS_TYPE_CAR_MARKET_SRED 	= 42,     	// Автосалон
	BUSINESS_TYPE_CAR_WASH 			= 43,      // автомойка
	BUSINESS_TYPE_TRUCK_TK 			= 44,      // Траспортная компания
	BUSINESS_TYPE_SHOP_FISH 		= 45,      // Рыболовный магазин
};

enum //
{
	BIZ_OPERATION_PARAMS = 0,		// управление заправкой
	BIZ_OPERATION_LOCK,				// открыть / закрыть
	BIZ_OPERATION_ENTER_PRICE,		// установить цену за вход
	BIZ_OPERATION_PROD_PRICE,		// установить стоимость продукта
	BIZ_OPERATION_PROD_ORDER,		// заказать продукты
	BIZ_OPERATION_PROD_ORDER_CANCEL,// отменить заказ
	BIZ_OPERATION_PROFIT_STATS,		// финансовая статистика
	BIZ_OPERATION_IMPROVEMENTS,		// Улучшения
	BIZ_OPERATION_PRICE_ELECTR,
};
enum E_BUSINESS_INTERIOR_STRUCT
{
	Float: BT_EXIT_POS_X, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Y, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Z, 	// позиции пикапа выхода
	Float: BT_ENTER_POS_X, 	// позиции входа
	Float: BT_ENTER_POS_Y, 	// позиции входа
	Float: BT_ENTER_POS_Z, 	// позиции входа
	Float: BT_ENTER_ANGLE, 	// угол поворота
	BT_ENTER_INTERIOR,		// интерьер
	Float: BT_HEALTH_POS_X,	// позиции аптечки
	Float: BT_HEALTH_POS_Y,	// позиции аптечки
	Float: BT_HEALTH_POS_Z,	// позиции аптечки
	Float: BT_BUY_POS_X, 	// позиции покупки
	Float: BT_BUY_POS_Y, 	// позиции покупки
	Float: BT_BUY_POS_Z, 	// позиции покупки
	Float: BT_LABEL_POS_X,	// позиции 3д текста
	Float: BT_LABEL_POS_Y,	// позиции 3д текста
	Float: BT_LABEL_POS_Z,	// позиции 3д текста
	BT_BUY_CHECK_ID			// ид чекпоинта
};

new House_CP[MAX_HOUSES];
new Garage_CP[MAX_GARAGE];
enum E_BUSINESS_GPS_STRUCT // список бизнесов в GPS
{
	BG_SQL_ID,
	BG_BIZ_ID,
	BG_POS,
	BG_TIME
};

enum E_GARAGE_STRUCT
{
	G_SQL_ID,			// ид в базе данных
	G_OWNER_ID,			// ид аккаунта владельца
	G_CITY,				// ид города
	G_MIAMI,           // металл
	G_ZONE,				// ид района
	G_IMPROVEMENTS,		// уровень улучшений
	G_RENT_DATE,		// аренда на n времени
	G_PRICE,			// стоимость бизнеса
	G_RENT_PRICE,		// плата за аренду в день
	G_LOCK_STATUS,		// статус (открыта/закрыта)
	G_TYPE,			// тип
	G_ENTER_PICKUP,			// пикап входа
	Float: G_POS_X,		// позиция бизнеса
	Float: G_POS_Y,		// позиция бизнеса
	Float: G_POS_Z,		// позиция бизнеса
	Float: G_EXIT_POS_X,// позиция после выхода из бизнеса
	Float: G_EXIT_POS_Y,// позиция после выхода из бизнеса
	Float: G_EXIT_POS_Z,// позиция после выхода из бизнеса
	Float: G_EXIT_ANGLE,// угол поворота
	Float: G_CAR_POS_X,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Y,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Z,// позиция после выхода из бизнеса
	Float: G_CAR_ANGLE,// угол поворота
	G_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: G_LABEL,		// 3д текст
	G_REPAIRS,          // рем. комплекты
	G_DRUGS,            // наркотики
	G_AMMO,             // патроны
	G_METALL,           // металл
	G_EVICTION,
	Text3D: G_WORKBENCH_LABEL
};

enum E_WEATHER_STRUCT
{
	W_NAME[16],
	W_ID,
	W_DEGREES
};

enum E_ORDER_STRUCT
{
	O_SQL_ID, 		// ид заказа
	O_TYPE,			// тип (азс,биз)
	O_COMPANY_ID,	// ид предприятия
	O_AMOUNT,		// кол-во
	O_PRICE,		// цена за 1 (продукт/л топлива/...)
	O_TIME,			// время оформления
	O_USED			// выполняется ли
};
enum
{
	ORDER_TYPE_BUSINESS 		// бизнес
};

enum E_PLAYER_SETTINGS_STRUCT
{
	S_CHAT_TYPE,	// тип чата (Отключен,Стандарт,Advance)
	S_TEAM_CHAT,	// отображение чата организации
	S_PLAYERS_NICK,	// отображение ников над игроками
	S_NICK_IN_CHAT,	// отображение ников в чате
	S_ID_IN_CHAT,	// отображение ид игрока в чате
	S_VEH_CONTROL	// управление транспортом (клавиши и команды/команды)
};
enum
{
	SETTING_CHAT_OFF = 0,
	SETTING_CHAT_STANDART,
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_OFF = 0,
	SETTING_TYPE_ON
};

enum E_IMPROVEMENTS_STRUCT
{
	I_NAME[32],
	I_PRICE,
	I_LEVEL
};

enum E_PLAYER_GPS_STRUCT
{
	bool: G_ENABLED,
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z
};
enum E_GPS_STURCT
{
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z,
	G_MARKET_TYPE
};

enum E_HELP_INFO_STRUCT
{
	H_TITLE[64],
	H_INFO[1024]
};

enum E_SERVER_RADIO_STRUCT
{
	SR_CHANNEL_NAME[32],
	SR_CHANNEL_URL[64]
};

enum E_ANIM_LIST_STRUCT
{
	AL_DESCRIPTION[32],
	AL_LIB[32],
	AL_NAME[32],
	Float: AL_DELTA,
	AL_LOOP,
	AL_LOCK_X,
	AL_LOCK_Y,
	AL_FREEZE,
	AL_TIME
};

enum E_MAP_ICONS_STRUCT
{
	Float: MI_POS_X,
	Float: MI_POS_Y,
	Float: MI_POS_Z,
	MI_TYPE
};

enum E_TELEPORT_STRUCT
{
	T_NAME[64],
	Float: T_PICKUP_POS_X,
	Float: T_PICKUP_POS_Y,
	Float: T_PICKUP_POS_Z,
	T_PICKUP_VIRTUAL_WORLD,
	Float: T_POS_X,
	Float: T_POS_Y,
	Float: T_POS_Z,
	Float: T_ANGLE,
	T_INTERIOR,
	T_VIRTUAL_WORLD,
	T_ACTION_TYPE,
	Text3D: T_LABEL
};

enum // типы телепорта
{
	T_ACTION_TYPE_BLOCK_LEAVE_AREA = 1, // заблокировать вызов паблика OnPlayerLeaveDynamicArea
	T_ACTION_TYPE_END_JOB,	// анулировать деньги на временной работе если выходит из инта
	T_ACTION_TYPE_LEAVE_HOSPITAL, // проверить вылечился или нет в больнице
	T_ACTION_TYPE_LEAVE_PPS, // проверить сидит ли в тюрьме
};

enum E_ATM_STRUCT
{
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z,
	Float: A_ROT_Z
};

enum E_BANK_ACCOUNT_STRUCT
{
	BA_ID,
	BA_NAME[20 + 1],
	BA_PIN_CODE[9],
	BA_BALANCE[21],
	BA_REG_TIME
};

enum E_BANK_TRANSFER_STRUCT
{
	BT_ID,
	BT_UID,
	BT_NAME[20 + 1]
};

enum E_PHONE_CALL_STRUCT
{
	PC_INCOMING_PLAYER,		// исходящий вызов
	PC_OUTCOMING_PLAYER,	// входящий вызов
	PC_TIME,				// время звонка
	bool:PC_ENABLED		// режим телефона (вкл\откл)
};

enum E_PHONE_BOOK_STRUCT
{
	PB_SQL_ID,
	PB_NAME[21],
	PB_NUMBER[10],
	PB_TIME
};
enum
{
	PHONE_BOOK_OPERATION_OPTIONS = 0,	// варианты
	PHONE_BOOK_OPERATION_CALL,			// позвонить
	PHONE_BOOK_OPERATION_SEND_SMS,		// отправить смс
	PHONE_BOOK_OPERATION_CHANGE_NAM,	// изменить имя
	PHONE_BOOK_OPERATION_CHANGE_NUM,	// изменить номер
	PHONE_BOOK_OPERATION_DELETE_CON,	// удалить контакт
};

enum E_INFO_PICKUP_STRUCT
{
	IP_TITLE[64],
	IP_INFO[1024],
	IP_LABEL_INFO[64],
	IP_TITLE_COLOR,
	Float: IP_POS_X,
	Float: IP_POS_Y,
	Float: IP_POS_Z
};

enum E_MINER_CARRIAGE_STRUCT
{
	Float: MC_START_POS_X,
	Float: MC_START_POS_Y,
	Float: MC_START_POS_Z,
	Float: MC_END_POS_X,
	Float: MC_END_POS_Y,
	Float: MC_END_POS_Z,
	bool: MC_STATUS,
	MC_OBJECT_ID,
	MC_PICKUP_ID,
	Text3D: MC_LABEL,
	MC_ORE_COUNT,
	bool: MC_IN_MOVE
};

enum E_FACTORY_DESK_STRUCT
{
	Float: FD_POS_X,
	Float: FD_POS_Y,
	Float: FD_POS_Z,
	FD_CHEK_ID,
	FD_OBJECT_ID,
	bool: FD_USED,
	Text3D: FD_LABEl
};

enum E_REPOSITORY_STRUCT
{
	R_AMOUNT, // кол-во
	Text3D: R_LABEL,
	Text3D: R_LABEL_2,
	bool: R_NOT_SAVE
};
enum // типы складов
{
	REPOSITORY_TYPE_MINER, 			// шахта
	REPOSITORY_TYPE_FACTORY, 		// завод
	REPOSITORY_TYPE_OIL_FACTORY, 	// нефтезавод
	REPOSITORY_TYPE_ARMY,			// воинская часть
	REPOSITORY_TYPE_SAWMILL,		// лесопилка
	REPOSITORY_TYPE_FERMER,         // ферма
};
enum
{ 
	REPOSITORY_ACTION_MINER_METAL = 0,	// металл шахты // шахта
	REPOSITORY_ACTION_MINER_ORE,		// руда
	REPOSITORY_ACTION_MINER_REMELTI,	// на переплавке // завод
	REPOSITORY_ACTION_FACTORY_METAL = 0, // металл
	REPOSITORY_ACTION_FACTORY_FUEL,		// топливо
	REPOSITORY_ACTION_FACTORY_PROD,		// продукты // нефтезавод
	REPOSITORY_ACTION_OIL_FACTORY_F = 0, // топливо на нефтезаводе // воинская часть
	REPOSITORY_ACTION_ARMY_METAL = 0,	// металл на складе воинской части
	REPOSITORY_ACTION_ARMY_AMMO,		// патроны на складе воинской части // лесопилка
	REPOSITORY_ACTION_SAWMILL_WOOD = 0,	// лесопилка дерево // ферма
	REPOSITORY_ACTION_FERMER = 0,           // ферма сено
};
new g_repository[6][3][E_REPOSITORY_STRUCT]; // склады

enum E_GANG_REPOSITORY_STRUCT
{
	GR_GANG,
	GR_METALL,
	GR_AMMO,
	GR_DRUGS,
	GR_MONEY,
	Text3D: GR_LABEL,
	GR_PICKUP,
	bool: GR_LOCK
}
new g_gang_repository[MAX_GANG_REPOSITORIES][E_GANG_REPOSITORY_STRUCT]; // склады банд

enum E_GANG_ZONES_STRUCT
{
	Float: GZ_MIN_X,
	Float: GZ_MIN_Y,
	Float: GZ_MAX_X,
	Float: GZ_MAX_Y,
	GZ_GANG,
	GZ_ZONE,
	GZ_AREA
}
new g_gang_zone[MAX_GZ][E_GANG_ZONES_STRUCT]; // гангзоны
new g_gang_zones_loaded; // количество загруженных гангзон

enum
{
	GANG_ARZ = 35,		// ОПГ Центральное
	GANG_BAT = 35,		// ОПГ Западное
	GANG_LYT = 35,		// ОПГ Северное
}

new gang_zone_colors[4] =
{
	0xFFFFFF90,	// Свободная зона
	0x00990090, // Центральная Мафия
	0x6666FF90, // Западная Мафия
	0xFFCD0090  // Северная Мафия
};
new nakolka_name[][32] =
{
	{"Нет"},
	{"Мужик"},
	{"Козёл"},
	{"Пацан"},
	{"Бык"},
	{"Барыга"},
	{"Вор"},
	{"Пахан"},
	{"Блатной"},
	{"Вор в законе"}
};

new weapon_tints[6] =
{
	0xFF4B5320, // Камуфляж
	0xFF9EAF43, // Зеленый
	0xFFFFAE1A, // Оранжевый
	0xFF0073E6, // Синий (полицейский)
	0xFFFF1493, // Розовый
	0xFFFFD700 	// Золотой
};
enum
{
	WEAPON_TINT_CAMO = 0,
	WEAPON_TINT_GREEN = 1,
	WEAPON_TINT_ORANGE,
	WEAPON_TINT_POLICE,
	WEAPON_TINT_PINK,
	WEAPON_TINT_GOLD
}

enum E_WEAPON_TINT_STRUCT
{
	WT_OBJECT,
	Float: WT_X,
	Float: WT_Y,
	Float: WT_Z,
	Float: WT_RX,
	Float: WT_RY,
	Float: WT_RZ,
	Float: WT_SCALE_X,
	Float: WT_SCALE_Y,
	Float: WT_SCALE_Z
}

new g_weapon_tint[MAX_WEAPON_TINTS][E_WEAPON_TINT_STRUCT] =
{
	{346, 	-0.004999, 	-0.003999, 	-0.006000, 	0.000000, 	0.000000, 	-1.800000, 	1.007000,	1.337999, 	1.069000},
	{347, 	-0.003999, 	-0.001999, 	-0.003999, 	0.000000, 	0.299999, 	-0.999999, 	1.000000,	1.188000, 	1.063000},
	{348, 	-0.006999, 	-0.004000, 	0.002000, 	-1.600000, 	-0.200000, 	0.400000, 	1.019999, 	1.146999, 	1.027000},
	{349, 	0.000000, 	-0.008999, 	-0.004000, 	0.000000, 	1.099999, 	1.499999, 	1.000000, 	1.222000, 	1.088000},
	{351, 	0.003000, 	-0.014000, 	-0.003000, 	0.000000, 	0.000000, 	2.199999, 	1.000000, 	1.371000, 	1.023000},
	{352, 	-0.002000, 	-0.008000, 	-0.001999, 	-0.300000, 	0.000000, 	1.199999, 	1.019999, 	1.245000, 	1.043000},
	{353, 	0.000000, 	-0.009000, 	-0.009000, 	0.000000, 	0.099999, 	2.100000, 	1.000000, 	1.290001, 	1.053000},
	{355, 	0.000000, 	-0.011000, 	0.000000, 	0.000000, 	0.000000, 	2.100000, 	1.009000, 	1.424000, 	1.013000},
	{356, 	-0.002000, 	-0.005999, 	0.001000, 	0.000000, 	0.899999, 	1.699999, 	0.997999, 	1.318999, 	1.088001},
	{372, 	-0.003000, 	-0.009000, 	-0.001999, 	0.000000, 	0.400000, 	0.800000, 	1.015000, 	1.232000, 	1.055000},
	{357, 	0.000000, 	-0.015000, 	-0.001999, 	0.000000, 	1.200000, 	2.199999, 	1.000000, 	1.286001, 	1.096001},
	{359, 	0.001999, 	-0.007000, 	-0.009000, 	0.000000, 	-0.100000, 	0.000000, 	0.989999, 	1.213001, 	1.084001},
	{360, 	0.001000, 	-0.004999, 	-0.008000, 	0.000000, 	0.000000, 	0.000000, 	1.000000, 	1.140000, 	1.055000}
};

enum E_GREEN_ZONES_STRUCT
{
    Float: GZ_MIN_X,
    Float: GZ_MIN_Y,
    Float: GZ_MAX_X,
    Float: GZ_MAX_Y,
	Float:GZ_ACTOR[4],
	GZ_NAME[32],
    GZ_AREA,
	GZ_ACTOR_ID,
    Text3D:GZ_TEXT_ID
}

new g_green_zones[22][E_GREEN_ZONES_STRUCT] =
{
    {551.7003,1846.3165,704.3073,1646.1545,{578.2440,1723.3358,12.1756,181.9056}, "Больница Арзамас"},
    {408.6671,1611.0054,501.8497,1514.4403,{436.3647,1562.2180,12.2021,183.0116}, "Новый Спавн Арз"},
    {-2439.6182,2822.7542,-2499.7090,2861.3582,{-2464.9138,2850.1689,37.7199,8.8457}, "Спавн Эдово"},
    {-2706.4543,241.2068,-2647.0610,43.9125,{-2677.8374,184.4783,12.2208,5.2775}, "Спавн Лыткарино"},
    {-2120.2087,2752.9897,-1698.1597,3005.0923,{-2108.1538,2758.8706,5.9972,7.4242}, "Порт"},
    {-2124.2585,-259.9935,-2267.3943,-351.1943,{-2211.7898,-284.1801,23.5022,95.2307}, "Казино Лыткарино"},
    {1015.3820,424.2216,732.3823,698.3463,{837.4645,570.9501,15.8932,79.5404}, "Спавн Арзамас"},
    {732.3823,698.3463,879.2080,793.4481,{397.8531,773.1319,12.2179,337.0670}, "Автобусы Арзамас"},
    {-525.0851,3258.4309,-322.2323,3478.4412,{-504.1178,3357.0920,29.7678,184.8215}, "Шахта"},
    {2162.1733,2388.5747,2242.3176,2281.8894,{1868.7927,2847.2537,12.2283,180.5050}, "БУ Низкого"},
    {1919.3080,2788.5122,1823.2552,2850.6716,{2578.7075,-627.0167,12.0825,176.8900}, "Автосалон Высокий"},
    {416.8062,718.9493, 379.4702,858.6207,{1045.3507,-1903.8646,34.2169,230.1572}, "Автосалон Средний"},
    {1946.1272,1914.1825,1876.0299,1960.6541,{2399.6978,-2344.8074,22.0000,6.7484}, "Автошкола"},
    {1904.3466,-1833.1650,1954.8192,-2012.2712,{1928.3876,-1966.8367,31.7385,157.2713}, "Казино Южный"},
    {2350.4697,-2306.5549,2406.9956,-2355.8052,{3639.3445,4000.3030,8.0036,179.4201}, "Спавн Южный"},
    {2776.0161,-2404.5928,2670.3665,-2499.3706,{0.0,0.0,0.0,0.0}, "БУ Высокий"},
    {413.0094,443.9093, 644.8279,545.2263,{0.0,0.0,0.0,0.0}, "Банк Арзамас"},
    {-2633.4036,-1500.8442, -2860.6121,-1187.6040,{-2733.0918,-1284.9432,10.2625,316.3994}, "Свалка"},
    {2428.4375,-764.5795, 2631.2297,-574.5925,{0.0,0.0,0.0,0.0}, "Ашан"},
    {-167.5524,658.7496,-284.1878,878.9001,{0.0,0.0,0.0,0.0}, "Парк Арзамас"},
    {48.8999,994.2867, -85.0770,860.5194,{0.0,0.0,0.0,0.0}, "Магазин Оружия"},
    {1736.5280,2418.4602, 1830.0422,2585.6372,{0.0,0.0,0.0,0.0}, "Пром.База"}
};
new Float:npcaltplayer[][4] = {
    {578.2440, 1723.3358, 12.1756, 181.9056},
    {436.3647, 1562.2180, 12.2021, 183.0116},
    {-2464.9138, 2850.1689, 37.7199, 8.8457},
    {-2677.8374, 184.4783, 12.2208, 5.2775},
    {-2108.1538, 2758.8706, 5.9972, 7.4242},
    {-2211.7898, -284.1801, 23.5022, 95.2307},
    {837.4645, 570.9501, 15.8932, 79.5404},
    {397.8531,773.1319,12.2179,337.0670},
    {-504.1178, 3357.0920, 29.7678, 184.8215},
    {1868.7927,2847.2537,12.2283,180.5050},
    {2578.7075,-627.0167,12.0825,176.8900},
    {1045.3507,-1903.8646,34.2169,230.1572},
    {1928.3876, -1966.8367, 31.7385, 157.2713},
    {2399.6978,-2344.8074,22.0000,6.7484},
    {3639.3445,4000.3030,8.0036,179.4201},
    {-2733.0918, -1284.9432, 10.2625, 316.3994}
};
#define MAX_NPCALTPLAYERS 16
#define INTERACTION_DISTANCE 2.0

enum E_BUS_ROUTE_STRUCT
{
	BR_NAME[32],
	BR_COLOR,
	BR_IN_JOB
};
enum E_BUS_ROUTE_STEP_STRUCT
{
	Float: BRS_POS_X,
	Float: BRS_POS_Y,
	Float: BRS_POS_Z,
	bool: BRS_STOP
};

enum E_PLAYER_SPECTATE_STRUCT
{
	Float: S_START_POS_X,
	Float: S_START_POS_Y,
	Float: S_START_POS_Z,
	Float: S_START_ANGLE,
	S_START_INTERIOR,
	S_START_VIRTUAL_WORLD,
	S_PLAYER
};
new g_spectate[MAX_PLAYERS][E_PLAYER_SPECTATE_STRUCT];

enum
{
	PEDAL_TYPE_NONE = 0, // не жмёт ни на какую педаль
	PEDAL_TYPE_GAS, // педаль газа
	PEDAL_TYPE_BRAKE // педаль тормоза
}
new player_press_pedal[MAX_PLAYERS];

enum // иды диалогов
{
	INVALID_DIALOG_ID,
	//===============
	DIALOG_BYU_VIP,
	ADMIN_AHELP,
	DIALOG_CAR_LIST_NOTARY,
	DIALOG_BIZ_LIST_NOTARY,
	DIALOG_GARAGE_LIST_NOTARY,
	DIALOG_HOME_LIST_NOTARY,
	DIALOG_GARDEN_LIST_NOTARY,
	DIALOG_KIOSK_LIST_NOTARY,
	DIALOG_SHINOMONTAJ,
	DIALOG_SHINOMONTAJ_INSTAL,
	DIALOG_VINIL_INSTAL,
	DIALOG_PLAYER_CAR_CONTAINER,
	DIALOG_PLAYER_SKIN_CONTAINER,
	DIALOG_PLAYER_ITEM_CONTAINER,
	DIALOG_PLAYER_ACS_CONTAINER,
	DIALOG_CONTAINER_BET,
	DIALOG_COINS_INFO,
	DIALOG_EXJAIL,
	DIALOG_COINS_LIST,
	DIALOG_COINS_LEVEL,
	DIALOG_COINS_SKIN,
	DIALOG_COINS_POLICE_TABLE_1,
	DIALOG_COINS_TAXI_TABLE_1,
	DIALOG_COINS_LIST_CAR,
	DIALOG_DONAT_VALUTE,
	DIALOG_CARWASH_START,
	DIALOG_NONCEF_MENU,
	DIALOG_CREATE_CODE,
	DIALOG_NAME_CODE,
	DIALOG_TIME_CODE,
	DIALOG_TAB,
	DIALOG_RAFFLE_SHOP,
	DIALOG_TINTING_INSTAL,
	DIALOG_SETTINGS_CODE_1,
	DIALOG_SETTINGS_CODE_2,
	DIALOG_SETTINGS_CODE_3,
	DIALOG_SETTINGS_CODE_4,
	DIALOG_SETTINGS_CODE_ITEM,
	DIALOG_SETTINGS_CODE_FINAL,
	DIALOG_BONUSCODE_ACTIVATE,
	DIALOG_PROMO_ACTIVATE,
	DIALOG_PROMO_LIST,
	DIALOG_OWNABLE_GARAGE_OPLATA,
	DIALOG_SELL_GARAGE_LIST,
	DIALOG_INFO_GARAGE_LIST,
	DIALOG_INFO,
	DIALOG_PLAYER_LIST,
	BUY_TICKET_METRO,
	DIALOG_SELL_MY_GARAGE_LIST,
	DIALOG_GANG_MENU,
	DIALOG_COLOR_GANG_CR,
	DIALOG_GANG_BIZ,
	DIALOG_GANG_RANG,
	DIALOG_GANG_REPOSITORY_USE,
	DIALOG_GANG_CAR_ADD,
	DIALOG_GANG_CAR_DELL,
	DIALOG_GANG_REPOSITORY,
	DIALOG_GANG_RANG_EDIT,
    DIALOG_GANG_SK_EDIT_2,
    DIALOG_GANG_SK_EDIT_3,
    DIALOG_GANG_SK_EDIT_4,
    DIALOG_GANG_SK_EDIT_1,
    DIALOG_GANG_SK_EDIT,
    DIALOG_GANG_RANG_EDIT_1,
	DIALOG_FAM_HYSTORY,
	DIALOG_FAMILY_DELL,
	DIALOG_OWNABLE_CAR_FAMILY,
	DIALOG_FAMILY_CAR_SELL,		// продажа семейного ТС
	DIALOG_FAMILY_CAR_ADD,
	DIALOG_FAMILY_CAR_REMOVE,
	DIALOG_FAMILY_CAR_RANG_SET,
	DIALOG_FAMILY_CAR_RANG,
 	DIALOG_CREATE_FAMILY,           // создание семьи
	DIALOG_FAMILY_PL,
 	DIALOG_FAMILY_PLA,
    DIALOG_FAMILY_MENU,             // Меню семьи
	DIALOG_FAMILY_BANK_PUT,
    DIALOG_FAMILY_BANK_PICK,
    DIALOG_FAMILY_BANK,
    DIALOG_FAMILY_FFF,
    DIALOG_FAMILY_RANG,             // смена рангов семьи
    DIALOG_FAMILY_RCHANGE,          // смена рангов семьи
    DIALOG_FAMILY_LEAVE,            // Выход из семьи
    DIALOG_FAMILY_SETTINGS,         // Настройки семьи
	DIALOG_ACTION_TYPE_GET_FAMILY,
	DIALOG_FAMILY_COLOR,
	DIALOG_COLOR_FAMILY_SET,
	DIALOG_PAY_FAMILY,
	DIALOG_OWNABLE_HOME_FAMILY,
	DIALOG_BUY_DONATE_PACK_1,
	DIALOG_BUY_DONATE_PACK_2,
	DIALOG_ENTRANCE_LIFT,
	DIALOG_END_PURSUIT,
	DIALOG_CASE_TWO,
	DIALOG_KEY_ONE,
	DIALOG_KIOSK_INTER,
	DIALOG_KIOSK_NAME,
	DIALOG_KIOSK_CHEK,
	DIALOG_KIOSK_BUY_INTER,
	DIALOG_KEYSN,
	DIALOG_SPAWN_HOME_LIST,
	DIALOG_PAY_FOR_RENT_HOME,
	DIALOG_OWNABLE_HOME_LIST,
	DIALOG_SELL_HOME_LIST,
	DIALOG_SELL_MY_HOME_LIST,
	DIALOG_KEYST,
	DIALOG_KIOCK,
	DIALOG_OBNOVA,
	DIALOG_DESTROY_NEFTENASOS,
	DIALOG_NEFTENASOS,
	DIALOG_NEFTENASOS2,
	DIALOG_NEFTENASOS3,
	DIALOG_NEFTENASOS4,
	DIALOG_NEFTENASOS5,
	DIALOG_SELL_NEFTENASOS,
	DIALOG_SELL_NEFTENASOS2,
	DIALOG_CREATE_NEFTENASOS,
	DIALOG_BUY_STALL,
	DIALOG_LOTTERY,
	DIALOG_RENTBUY,
	DIALOG_BUY_MEDCARD,
	DIALOG_BUY_MEDCARD1,
    DIALOG_SELL_STALL,
    DIALOG_SELL_MYSTALL,
    DIALOG_REMOVE_STALL_ITEM,
    DIALOG_SET_MIN_PRICE,
    DIALOG_SET_NALOG,
    DIALOG_OMENU,
    DIALOG_OMENUUU,
   	DIALOG_SELL_ITEM_KIOSK,
    DIALOG_SELL_ITEM_PRICE,
    DIALOG_SELL_ITEM_ACCEPT,
    DIALOG_SELL_NUMBER_ACCEPT,
    DIALOG_SELL_ACS_ACCEPT,
    DIALOG_SELL_SKIN_ACCEPT,
    DIALOG_SELL_NUMBER_KIOSK,
    DIALOG_SELL_NUMBER_PRICE,
    DIALOG_SELL_SKIN_KIOSK,
    DIALOG_SELL_ACS_KIOSK,
    DIALOG_REMOVE_OWNED_ITEM,
    DIALOG_STALL_BUY_ITEM,
	DIALOG_START_UGONKA,
    DIALOG_STALL_BUY_ITEM_ACCEPT,
	DIALOG_BILLBOARD_SELECT,
	DIALOG_JAIL_ALERT,
	DIALOG_JAIL_TRADE,
	DIALOG_MEROPRIATIE,
	DIALOG_SETBONUS,
	DIALOG_LOGIN,					// Авторизация
	DIALOG_REGISTER,				// Регистрация
	DIALOG_RENT_MOP,
	DIALOG_KIOSK_SELL,
	DIALOG_KIOSK_SELL_LIST,
	DIALOG_KIOSK_MIN_PRICE,
	DIALOG_BIZ_SELL_TEST,
	DIALOG_BIZ_MANAGER,
	DIALOG_MAFIA_YGON,
	DIALOG_INFO_HELP,
	DIALOG_HELP_CMD,
	DIALOG_SYSTEM,
	DIALOG_BIZ_SELL_MY_BIZ2,
	DIALOG_ATM_BIZ_LIST,            // пополнить/снять Бизнес
	DIALOG_ATM_KIOSK_LIST,            // пополнить/снять Бизнес
	DIALOG_AHELP,
	DIALOG_SELECT_OSTANOVKA,
	DIALOG_SETTING_SERV,
	DIALOG_GOTO_GPS, // телепорт по gps
    DIALOG_GARDEN_BUY,                      // покупка скина
	DIALOG_TEMP_LEADER,
	DIALOG_TELEGRAM_BUY,
	DIALOG_OWNABLE_BIZ_LIST,//Тестовая Версия(Просмотр статистики бизнеса)
	DIALOG_OWNABLE_BLACK_MARKET,
	DIALOG_OWNABLE_NEFTENASOS_LIST,
	DIALOG_OWNABLE_NEFTENASOS_LIST2,
	DIALOG_ATM_NEFTENASOS_RENT,
	DIALOG_OWNABLE_BIZ_NOTARY,//Тестовая Версия(Просмотр статистики бизнеса)
	DIALOG_OWNABLE_GARAGE_NOTARY,
   	DIALOG_OWNABLE_GARAGE_LIST,//Тестовая Версия(Просмотр статистики бизнеса)
	DIALOG_OWNABLE_BIZ_OPLATA,
	DIALOG_OWNABLE_KIOSK_OPLATA,
	DIALOG_OWNABLE_BIZ_MUZ,
	DIALOG_BIZ_SELL_MY_BIZ,
	DIALOG_PRIZE,
	DIALOG_TRUCKER_RENT_CAR,		// арендовать грузовик
	DIALOG_TRUCKER_START_JOB,		// начать работу
	DIALOG_PNEWMA_DESTROY,
	DIALOG_PNEWMA_BUY,
	DIALOG_PLAYER_STATS, 			// статистика игрока
	DIALOG_REPLACE_TIRE,
	DIALOG_TAKE_ITEM,
	DIALOG_TAKE_MONEY,
	DIALOG_TAKE_ITEM_SKIN,
	DIALOG_TAKE_ITEM_GUN,
	DIALOG_TAKE_ITEM_NUMBER,
	DIALOG_TAKE_ITEM_ACS,
	DIALOG_SECURITY_SETTING_PASS_1, // смена пароля (проверка текущего)
	DIALOG_SECURITY_SETTING_PASS_2, // смена пароля (смена)
	DIALOG_REPORT_2,
	DIALOG_REPORT_1,
	DIALOG_REPORT_Z,
	DIALOG_BUG_REPORT,
	DIALOG_CHARITY,
	DIALOG_BUG_REPORT_LIST,
	DIALOG_BUG_REPORT_EDIT,
	DIALOG_CHANGE_NAME, 			// смена ника
	DIALOG_GPS_BUSINESS,
	DIALOG_ANIM_LIST,
 	DIALOG_ANIM_LIST_1,
 	DIALOG_ANIM_LIST_2,
 	DIALOG_ANIM_LIST_3,
 	DIALOG_ANIM_LIST_4,
 	DIALOG_ANIM_LIST_5,
 	DIALOG_ANIM_LIST_6,
 	DIALOG_ANIM_LIST_7,
 	DIALOG_ANIM_LIST_8,
 	DIALOG_ANIM_LIST_9,
	DIALOG_OPEN_HOOD_OR_TRUNK,		// управление капотом/багажником
	DIALOG_ATM, 					// банкомат
	DIALOG_ATM_TAKE_MONEY, 			// снять деньги
	DIALOG_ATM_TAKE_OTHER_MONEY,	// снять деньги (другая сума)
	DIALOG_ATM_PUT_MONEY, 			// положить деньги
	DIALOG_ATM_PUT_OTHER_MONEY, 	// положить деньги (другая сума)
	DIALOG_ATM_BALANCE, 			// баланс в банке
	DIALOG_ATM_PHONE_BALANCE,		// пополнить баланс телефона
	DIALOG_ATM_SELECT_COMPANY_TAKE,	// выбрать предприятие с которого снять деньги
	DIALOG_ATM_SELECT_COMPANY_PUT,	// выбрать предприятие на которое положить деньги
	DIALOG_ATM_FUEL_ST_TAKE_MONEY,	// снять деньги с заправочной станции
	DIALOG_ATM_FUEL_ST_PUT_MONEY,	// полижить деньги на счет заправочной станции
	DIALOG_ATM_BIZ_TAKE_MONEY,		// снять деньги с предприятия
	DIALOG_ATM_BIZ_PUT_MONEY,		// полижить деньги на счет предприятия
	DIALOG_ATM_NEFTENASOS_PUT_MONEY,		// полижить деньги на счет предприятия
	DIALOG_ATM_KIOSK_TAKE_MONEY,
	DIALOG_ATM_TRANSFER_MONEY_1, 	// перевод на банковский счет
	DIALOG_ATM_TRANSFER_MONEY_2, 	// перевод на банковский счет
	DIALOG_ATM_CHARITY, 			// Благотворительность
	DIALOG_ATM_TICKET_SELECT,		// Выбор способа оплаты штрафа
	DIALOG_ATM_TICKET_LIST,			// Список штрафов
	DIALOG_ATM_TICKET_PAY,			// Оплата штрафа по номеру
	DIALOG_ATM_TICKET_PAY_ALL,
	// ---------------
	DIALOG_PAY_FOR_RENT,			// оплата аренды (биз,дом,азс)
	DIALOG_PAY_FOR_RENT_FUEL_ST,	// оплата за АЗС
	DIALOG_PAY_FOR_RENT_BIZ,
	DIALOG_PAY_FOR_RENT_KIOSK,
	DIALOG_PAY_FOR_RENT_HOUSE,		// оплата за дом
	DIALOG_PAY_FOR_RENT_GARAGE,
	DIALOG_GARDEN_LIST,
	DIALOG_PAY_FOR_RENT_GARDEN,
	DIALOG_PAINT_BALL_EXIT,
	DIALOG_QUEST_END,
	DIALOG_HEALTH_BUSINESS,
	// ---------------
	DIALOG_BANK,					// банк
	DIALOG_BANK_ACCOUNTS, 			// мои счета
	DIALOG_BANK_ACCOUNT_LOGIN, 		// авторизация
	DIALOG_BANK_ACCOUNT_OPERATION,	// Список операций
	DIALOG_BANK_ACCOUNT_INFO, 		// информация о счете
	DIALOG_BANK_ACCOUNT_TAKE_MONEY,	// снять деньги
	DIALOG_BANK_ACCOUNT_PUT_MONEY,	// положить деньги
	DIALOG_BANK_ACCOUNT_TRANSFER_1, // перевод денег на другой счет 1
	DIALOG_BANK_ACCOUNT_TRANSFER_2, // перевод денег на другой счет 2
	DIALOG_BANK_ACCOUNT_CHANGE_NAME,// переименирование счета
	DIALOG_BANK_ACCOUNT_CHANGE_PIN,	// смена пин-кода
    DIALOG_CONT_SPAWN,
    DIALOG_CONT_SPAWN_LIST,
	DIALOG_BANK_CREATE_ACCOUNT, 	// создание счета
	DIALOG_BANK_CREATED_ACCOUNT, 	// создание счета
	DIALOG_PHONE_CALL,				// Номера государственных организаций
	DIALOG_PHONE_CALL_BALANCE,		// Узнать баланс мобильного
	DIALOG_ACTION,					// меню действия
	DIALOG_VIEV_JOBS_LIST,			// посмотреть список работ
	DIALOG_JOIN_TO_JOB,				// устроится на работу
	DIALOG_END_JOB,					// закончить работу
	DIALOG_BUS_RENT_CAR,			// арендовать автобус
	DIALOG_BUS_ROUTE_COST,			// ввести стоимость проезда
	DIALOG_BUS_ROUTE_SELECTION,			// выбрать маршрут
	DIALOG_TAXI_RENT_CAR,			// арендовать такси
	DIALOG_TAXI_NAME,				// название такси
	DIALOG_TAXI_TARIFF,				// тариф
	DIALOG_RERFECT_RENT_CAR,			// арендовать такси
	DIALOG_RERFECT_NAME,				// название такси
	DIALOG_RERFECT_START_JOB,				// тариф
	DIALOG_MECHANIC_RENT_CAR,		// арендовать эвакуатор
	DIALOG_MECHANIC_START_JOB,		// начать работу механика
	DIALOG_MECHANIC_NAME,			// название службы
	DIALOG_PHONE_BOOK,				// телефонная книга
	DIALOG_PHONE_BOOK_OPTION,		// варианты
	DIALOG_PHONE_BOOK_SEND_SMS,		// отправить смс
	DIALOG_PHONE_BOOK_CHANGE_NAME,	// сменить имя контакта
	DIALOG_PHONE_BOOK_CHANGE_NUMBER,// сменить номер контакта
	DIALOG_PHONE_BOOK_ADD_CONTACT,	// телефонная книга (добавить контакт)
	DIALOG_MINER_BUY_METALL, 		// покупка металла на шахте
	DIALOG_TEMP_JOB_MINER_START,	// Начать работу шахтера
	DIALOG_TEMP_JOB_MINER_END,		// Закончить работу шахтера
	DIALOG_TEMP_JOB_FACTORY_TRUCKER,// Служба доставки завода
	DIALOG_TEMP_JOB_FACTORY,
	DIALOG_TEMP_JOB_MECHANICC_ST,    // Начать работу механика
	DIALOG_TEMP_JOB_MECHANICC_END,		// Производственный цех
	DIALOG_TEMP_JOB_LUMBERJACK_ST, 	// Начать работу лесоруба
	DIALOG_TEMP_JOB_LUMBERJACK_END,	// Закончить работу лесоруба
	DIALOG_TEMP_JOB_FERMER_ST,    	// Начать работу фермера
	DIALOG_TEMP_JOB_FERMER_END,
	DIALOG_TEMP_JOB_INKAS_START,	// Начать работу инкассатора
	DIALOG_TEMP_JOB_INKAS_END,	   	// Закончить работу фермера
	DIALOG_FUEL_STATION_PRICE_FUEL,	// Цена топлива
	DIALOG_FUEL_STATION_BUY_FUEL_PR,// закупочная цена
	DIALOG_FUEL_STATION_BUY_JERRICA,// покупка канистры на АЗС
	DIALOG_JERRICAN_FILL_CAR,		// заправка авто с канистры
	DIALOG_KIOSK_BUY,
	DIALOG_KIOSK_NALOG,
	DIALOG_GARDEN,
	DIALOG_BIZ_BUY,					// покупка бизнеса
	DIALOG_BIZ_INFO,				// инфо о бизнесе
	DIALOG_BIZ_PARAMS,              // меню управления бизнесом
	DIALOG_BIZ_ARENDA_PRICE,
	DIALOG_BIZ_ARENDA_CAR,
	DIALOG_BIZ_ARENDA_CAR_SELECT,
	DIALOG_BIZ_CAR_ARENDA_1,
	DIALOG_BIZ_CAR_LIST,
	DIALOG_BIZ_ARENDA,
	DIALOG_BIZ_ARENDA_CARS,
	DIALOG_BIZ_ENTER_PRICE,			// установить цену за вход
	DIALOG_BIZ_PROD_PRICE,			// установить стоимость продутка
	DIALOG_BIZ_ORDER_PRODS,			// заказ продуктов
	DIALOG_BIZ_ORDER_CANCEL,		// отмена заказа
	DIALOG_BIZ_IMPROVEMENT,			// улучшение
	DIALOG_BIZ_ELECT,			// улучшение
	DIALOG_BIZ_SELL,				// продажа Бизнеса государству
	DIALOG_BIZ_ENTER_MUSIC,			// установить звук при входе
	DIALOG_BIZ_ENTER,				// платный вход
	DIALOG_ACTION_FISH,
	DIALOG_BIZ_SHOP_FISH,
	DIALOG_BIZ_GUN,
	DIALOG_BIZ_SHOP_24_7,			// магазин 24\7
	DIALOG_BIZ_VETRIKI,			// магазин 24\7
	DIALOG_BIZ_SHOP_APTEKA,         // аптека
	DIALOG_BIZ_SHOP_ZAKUS,          // закусочная
	DIALOG_BIZ_SHOP_KONDITER,       // кондитерская
	DIALOG_BIZ_LOTTERY,				// лотерея
    DIALOG_BUY_LEYKA,
    DIALOG_BUY_MARIH,
    DIALOG_BUY_POMIDOR,
    DIALOG_BUY_OGUREC,
	DIALOG_BIZ_SHOP_GARDEN,         // магазин Садовод
	DIALOG_BIZ_SHOP_GARDEN_ACCEPT,
	DIALOG_BIZ_AVTOZAP,             // магазин Автозапчастей
    DIALOG_BIZ_AVTOZAP_1,
	DIALOG_BIZ_CAR_MARKET,			// авторынок
	DIALOG_BIZ_CAR_MARKET_SRED,			// авторынок
	DIALOG_BIZ_CAR_MARKET_NIZ,
	DIALOG_BIZ_CAR_MARKET_MOTO,	// информация об авто
	DIALOG_BIZ_CAR_MARKET_GRUZ,	// информация об авто
	DIALOG_BIZ_CAR_MARKET_HOME,	// информация об авто
	DIALOG_BIZ_CAR_MARKET_AVIA,	// информация об авто
	DIALOG_BIZ_CAR_MARKET_KATER,
	DIALOG_BIZ_CELL_SALON,			// сотовый салон
	DIALOG_BIZ_PHONE_BALANCE,		// пополнить счет телефона
	DIALOG_BIZ_CHANGE_PHONE_NUMBER,	// смена номера телефона
	DIALOG_BIZ_CHANGE_PHONE_COLOR,	// смена цвет телефона
	DIALOG_BIZ_CLUB,				// меню бара (клуб)
	DIALOG_GARAGE_BAR,				// меню бара (гараж)
	DIALOG_BIZ_REALTOR_BIZ_LIST,	// список свободных бизнесов (управление статистики)
	DIALOG_BIZ_REALTOR_BIZ_INFO,	// фото бизнеса
	DIALOG_BIZ_REALTOR_HOME_GET,	// найти информацию о доме
	DIALOG_BIZ_REALTOR_HOME_INFO,	// фото дома
	DIALOG_BIZ_CLOTHING_BUY,		// покупка одежды
	DIALOG_BIZ_CAR_TUNING,			// тюнинг транспорта
	DIALOG_BIZ_TIR,
	DIALOG_HOUSE_BUY,				// покупка дома
	DIALOG_HOUSE_SELL,				// продажа дома
	DIALOG_HOUSE_INFO,				// инфо о доме
	DIALOG_HOUSE_PARAMS,			// меню управления домом
	DIALOG_HOUSE_IMPROVEMENTS,		// улучшение для дома
	DIALOG_HOUSE_RENTERS,			// список арендаторов
	DIALOG_HOUSE_RENTER_INFO,		// информация о арендаторе
	DIALOG_HOUSE_RENTER_EVICT,		// выселение арендатора
	DIALOG_HOUSE_EVICT,				// выселение арендатора (/liveout)
	DIALOG_HOUSE_MOVE_STORE,		// переставить шкаф (/makestore)
	DIALOG_HOUSE_ENTER,				// вход в дом
	DIALOG_HOTEL,					// меню отеля
	DIALOG_HOTEL_FLOOR_SELECT,		// Выбрать этаж (просмотр инфы о номерах)
	DIALOG_HOTEL_FLOOR_INFO,		// Информация о номерах этажа
	DIALOG_HOTEL_FLOOR_LIFT,		// лифт в отеле
	DIALOG_HOTEL_REG_ROOM,			// регистрация в номере
	DIALOG_HOTEL_CLIENT_MENU,		// меню клиента
	DIALOG_HOTEL_PAY_FOR_ROOM,		// оплата за комнату
	DIALOG_HOTEL_OUT,				// выселиться
	DIALOG_OWNABLE_CAR,
	DIALOG_SHTRAF_ST,
	DIALOG_SHTRAFKA,				// система управления транспортом
	DIALOG_OWNABLE_CAR_LOAD,		// загрузить транспорт
	DIALOG_OWNABLE_CAR_LIST,		// выбор транспорта из списка
	DIALOG_OWNABLE_CAR_NOTARY,
	DIALOG_OWNABLE_CAR_LIST2,
	DIALOG_OWNABLE_CAR_LIST3,
	DIALOG_OWNABLE_CAR_SPAWN,
	DIALOG_SELL_OWNABLE_CAR,
	DIALOG_OWNABLE_CAR_SELECT,
	DIALOG_OWNABLE_CAR_SELECTS,
	DIALOG_OWNABLE_CAR_SELL,		// продажа личного ТС
	DIALOG_OWNABLE_CAR_NUMBER,
	DIALOG_BIZ_CAR_SELL,
 	DIALOG_FAM_CAR_LIST,
 	DIALOG_FAMILT_CAR_RANK,
 	DIALOG_FAM_CAR_LIST_RANK,
	DIALOG_SET_SPAWN,               // диалог смены спавна
	DIALOG_SET_PRIVATE,               // диалог смены спавна
	DIALOG_ADMIN_FLY, 
	DIALOG_ADMIN_SPAWN,             // возврат
	DIALOG_DONATE_INFO, 			// информация о донате (первый диалог)
	DIALOG_DONATE_MENU,				// меню доната
	DIALOG_DONATE_MENU1,	
	DIALOG_COINS_LIST_ACS_CAR,
	DIALOG_COINS_VIP,
	DIALOG_DONATIONS,				// все пополнения
	DIALOG_DONATE_BUY_NUMBER,		// смена номера телефона на 4-хзначный
	DIALOG_DONATE_LEVEL,
	DIALOG_DONATE_BUY,
	DIALOG_DONAT_MEN,
	DIALOG_DONAT_NAKAZ,
	DIALOG_DONAT_MEN1,
	DIALOG_DONAT_MEN2,
	DIALOG_DONAT_MEN3,
	DIALOG_DONAT_MEN4,
	DIALOG_SET_CMD,
	DIALOG_CREATE_DONATE_1,
	DIALOG_CREATE_DONATE_2,
	DIALOG_CREATE_DONATE_3,
	DIALOG_CREATE_DONATE_4,
	DIALOG_CREATE_DONATE_5,
	DIALOG_CREATE_DONATE_FINISH,
	DIALOG_TEAM_CHANGE_SKIN,		// смена скина игрока
	DIALOG_TEAM_LEAVE,				// уволиться по собственному желанию
	DIALOG_DEBTORLIST, 				// список должников
	DIALOG_DEBTORLIST_HOUSE, 		// дома должников
	DIALOG_DEBTORLIST_BIZ, 			// бизы должников
	DIALOG_DEBTORLIST_FUEL_ST, 		// АЗС должников
	DIALOG_DEBTOR_SELL_LIST, 		// Выселение
	DIALOG_DEBTOR_SELL_HOUSE, 		// Выселение дома
	DIALOG_DEBTOR_SELL_BIZ, 		// Выселение биза
	DIALOG_DEBTOR_SELL_FUEL_ST, 	// Выселение АЗС
	DIALOG_ADVISOR_MENU,			// Меню советника прав-ва
	DIALOG_ADVISOR_TEAM_STRUCTURE,	// Структура организации
	DIALOG_ADMIN_CREATE,
	DIALOG_ADMIN_PASS,
	DIALOG_ADMIN_PASS_2,
	DIALOG_ADMIN_CREATE_2,
	DIALOG_TELEPORT_LIST,			// Список мест для телепорта
	DIALOG_MY_TELEPORT_LIST,
	DIALOG_SET_DOUBLING,			// Включить удвоение
	DIALOG_ADVERT_EDIT,				// редактирование объявления
	DIALOG_ARMORY,				// оружейный склад
	DIALOG_ARMORY1,
	DIALOG_BIZ_ORDERS,				// список заказов для бизнесов
	DIALOG_BIZ_ORDERS_INVITE,
	R_F, //аренда авто
	DIALOG_POBEG_MAFIA_JAPAN,
	DIALOG_POBEG_MAFIA_ITALIA,
	DIALOG_POBEG_MAFIA_RUSSIAN,
	DIALOG_SET_ELECT,
	DIALOG_SET_ELECT2,
    DIALOG_F_STYLE,
	DIALOG_24_7,
	DIALOG_SELL_CAR,
	DIALOG_SELL_CAR_ELITE,
	DIALOG_SELL_CAR_NIZ,
	DIALOG_SELL_CAR_SR,
	DIALOG_BY_EXIT_SR,
	DIALOG_BY_EXIT_MVD,
	DIALOG_BY_EXIT_HOSPITAL,
	DIALOG_MVDPICKUP,
	DIALOG_INFOMVD,
	DIALOG_BY_EXIT,
	DIALOG_BY_EXIT_NIZ,
	DIALOG_RAZDEVALKA,
	DIALOG_RAZDEVALKAM,
	DIALOG_CONFIG,
	DIALOG_FIX_CAR,
	DIALOG_GARAGE_BUY,
	DIALOG_GARAGE_SELL,
	DIALOG_GARAGE_IMPROVEMENTS,
	DIALOG_GARAGE_PARAMS,
	DIALOG_GARAGE_ENTER,            // вход в гараж
    DIALOG_GARAGE_INFO,
	DIALOG_GARAGE_ZAEZD,
	DIALOG_BUY_LIC,
	DIALOG_WOSH_SKIN,
	DIALOG_REMONT,
	DIALOG_GARDEN_SELL,
	DIALOG_INVITE_METRO,
	DIALOG_EXIT_METRO,
	DIALOG_STAGE_1,
	DIALOG_STAGES_1,
	DIALOG_STAGES_1_1,
	DIALOG_STAGES_2,
	DIALOG_STAGES_3,
	DIALOG_RULLET_SHOW,
	RENT_WORK_VEHICLE,
	dBuyPlainLic,
	dJobPilot,	
	DIALOG_SHK_ST,
	DIALOG_REMOVE_STYLE,
	DIALOG_SORTIROVKA_MUSOR,
	DIALOG_CREATE_GUN,
	DIALOG_CREATE_GUN1,
	DIALOG_CREATE_GUN2,
	DIALOG_CREATE_GUN3,
	DIALOG_CREATE_BONUSK,
	DIALOG_CREATE_BONUS,
	DIALOG_VARKA_DRUGS,
	DIALOG_ANTISKLAD,
	DIALOG_FREE_HEAL,
	DIALOG_CAR_ACCESSORIES_LIST,
	DIALOG_CAR_ACTIVE_ACS_LIST,
	DIALOG_TAKE_CAR_PRIZE,
	DIALOG_DRAG_RACING,
	DIALOG_TK_MENU_INVITE_1,
	DIALOG_TK_MENU_INVITE_2,
	DIALOG_TK_MENU_H,
	DIALOG_TK_JMENU,
	DIALOG_TK_JMENU_1,
	DIALOG_TK_JMENU_TUTORIAL,
	DIALOG_TK_JMENU_TUTORIAL_EXIT,
	TRASH_PLAYER_WORK,
	DIALOG_JOB_ITEM,
	DIALOG_JOB_ITEM_1,
	DIALOG_JOB_ITEM_2,
	DIALOG_JOB,
	DIALOG_BET_SVALKA,
	DIALOG_PLAYER_BONUS,
	DIALOG_PLAYER_NOTIFICATION,
	DIALOG_PLAYER_NOTIFICATION_2,	
	DIALOG_FSB_O,
	DIALOG_OPEN_CONTEINER
};

enum // иды работ (официальные)
{
	JOB_BUS_DRIVER = 1, // водитель автобуса
	JOB_TAXI_DRIVER,	// таксист
	JOB_RERFECT_DRIVER,		// механик
	JOB_TRUCKER,		// дальнобойщик
	JOB_ELECTRIK,		// дальнобойщик
	JOB_FIREMAN
};

enum // типы пикапов
{
	PICKUP_ACTION_TYPE_TELEPORT = 1, 	// Телепорт (входы/выходы)
	PICKUP_ACTION_TYPE_SKLAD,
	PICKUP_ACTION_TYPE_KIOSK,
	PICKUP_ACTION_TYPE_ATM,
	PICKUP_ACTION_TYPE_FREE_HEAL,
	PICKUP_HP_MP,
	PICKUP_ACTION_TYPE_PRITON,
	PICKUP_ACTION_TYPE_FSIN_VHOD,
	PICKUP_ACTION_TYPE_FSIN_VIHOD,
	PICKUP_ACTION_TYPE_ELECT,
	PICKUP_ACTION_TYPE_NEFT,
	PICKUP_ACTION_TYPE_PENT, //new
	PICKUP_ACTION_TYPE_INFOMVD,
	PICKUP_ACTION_TYPE_RESPMVD,
	BUY_TICKET,
	PICKUP_ACTION_TYPE_RESPHOSPITAL,
	PICKUP_ACTION_TYPE_TRAILER,
	PICKUP_ACTION_TYPE_SELLSAB,
	PICKUP_ACTION_TYPE_BANK, 			// банк
	PICKUP_ACTION_TYPE_TEMP_JOB, 		// временная работа
	PICKUP_ACTION_TYPE_MINER_SELL_M, 	// покупка металла на шахте
	PICKUP_ACTION_TYPE_FACTORY_MET,		// брать металл (завод)
	PICKUP_ACTION_TYPE_BIZ_ENTER,		// вход в бизнес
	PICKUP_ACTION_TYPE_BIZ_APTEKA,      // аптека
	PICKUP_ACTION_TYPE_BIZ_KONDITER,    // кондитерская
	PICKUP_ACTION_TYPE_BIZ_EXIT,
	PICKUP_ACTION_TYPE_INKAS_ARM,		// выход в бизнес
	PICKUP_ACTION_TYPE_BIZ_HEALTH,		// аптечка в бизнесе
	PICKUP_ACTION_TYPE_BIZ_SHOP_247,	// покупка в 24\7
	PICKUP_ACTION_TYPE_BIZ_AVTOZAP,
	PICKUP_ACTION_TYPE_BIZ_GARDEN,      // покупка в Садоводе
	PICKUP_ACTION_TYPE_CELL_SALON,		// покупка в сотовом салоне
	PICKUP_ACTION_TYPE_HOUSE,			// вход в дом
	PICKUP_ACTION_TYPE_HOUSE_HEALTH,	// аптечка дома
	PICKUP_ACTION_TYPE_REALTOR_HOME,	// риелторское агенство
	PICKUP_ACTION_TYPE_BIZ_CLOTHING,	// магазин одежды
	PICKUP_ACTION_TYPE_HOTEL_ROOM,		// номер в отеле
	PICKUP_ACTION_TYPE_BIZ_CAR_MARK,	// покупка авто
	PICKUP_ACTION_TYPE_BIZ_CAR_SRED,	// покупка авто
	PICKUP_DM,	// dm зона
	PICKUP_ACTION_TYPE_KIOSK_ENTER,
	PICKUP_ACTION_TYPE_BIZ_CAR_NIZ,
	PICKUP_ACTION_INFO_B,
	PICKUP_ACTION_BLACK_MARKET,
	PICKUP_JOB_MUSOR,
	PICKUP_ACTION_TYPE_BIZ_CAR_ENT,		// телепорт ко входу в авторынок
	PICKUP_ACTION_TYPE_BIZ_CAR_EXI,
	PICKUP_ACTION_TYPE_BIZ_CAR_GRUZ,
	PICKUP_ACTION_TYPE_BIZ_CAR_HOME,	// телепорт к выходу из авторынка
	PICKUP_ACTION_TYPE_MINER_CARRI,		// пикап у вагонетки
	PICKUP_ACTION_TYPE_GANG_REPOSIT,	// склады для банд
	PICKUP_ACTION_TYPE_LUMBERJACK_P,	// положить дрова на склад лесопилки
	PICKUP_ACTION_TYPE_ARMORY,			// оружейный склад
	PICKUP_ACTION_TYPE_BIZ_CAR_TUN,		// тюнинг транспорта
	PICKUP_ACTION_TYPE_BIZ_GUN,
	PICKUP_ACTION_TYPE_BIZ_TIR,
	PICKUP_ACTION_TYPE_AMMO_BUY,			// магазин оружия
	PICKUP_ACTION_TYPE_GIFT,
	PICKUP_ACTION_TYPE_SELL_CAR,
	PICKUP_ACTION_TYPE_FREE_VELIK,
	PICKUP_ACTION_TYPE_CONT_INFO,
	PICKUP_ACTION_TYPE_SELLSIM,
	PICKUP_ACTION_TYPE_INFO_BOLKA,
	PICKUP_ACTION_TYPE_FERMER_P,
	PICKUP_ACTION_TYPE_DUTY,
	PICKUP_ACTION_TYPE_BIZ_PC_CLUB,		// компьютерный клуб
	PICKUP_ACTION_TYPE_BIZ_PC_GAME,
	PICKUP_ACTION_TYPE_BUY_DRUGS,
	PICKUP_ACTION_TYPE_TEAM_RAZDEV,
	PICKUP_ACTION_TYPE_FREE_EAT,
	PICKUP_ACTION_TYPE_GOVS_EAT,
	PICKUP_ACTION_TYPE_SHIN,
	PICKUP_ACTION_TYPE_GARAGE,
	PICKUP_ACTION_TYPE_GARAGE_SKLAD,
	PICKUP_ACTION_TYPE_GARAGE_EXIT,
	PICKUP_ACTION_TYPE_MVD,
	PICKUP_ACTION_TYPE_BANDRUSSIA,
	PICKUP_ACTION_TYPE_TOPBANDITALY,
	PICKUP_ACTION_TYPE_TOPBANDJAPAN,
	PICKUP_ACTION_TYPE_AK,
	PICKUP_ACTION_TYPE_AK1,
	PICKUP_ACTION_TYPE_AK2,
	PICKUP_ACTION_TYPE_MUSOR,
	PICKUP_ACTION_TYPE_AK3,
	PICKUP_ACTION_TYPE_AKTPSKLAD,
	PICKUP_ACTION_TYPE_BARBER,
	PICKUP_ACTION_TYPE_INVITE_METRO,
	PICKUP_ACTION_TYPE_WEARSPORT,
	PICKUP_ACTION_TYPE_PAINT_BALL,
	PICKUP_ACTION_TYPE_POPOLNENIE,
	PICKUP_ACTION_TYPE_SVALKA,
	PICKUP_ACTION_TYPE_INFAOSVALKE,
	PICKUP_ACTION_TYPE_VIXOD_RUSSIA,
	PICKUP_ACTION_TYPE_VIXOD_ITALIA,
	PICKUP_ACTION_TYPE_VIXOD_JAPAN,
	PICKUP_ACTION_TYPE_FIX_CAR,
	PICKUP_ACTION_TYPE_SHIPM,
	PICKUP_ACTION_TYPE_ENTRANCE_ENT,	// вход в подъезд
	PICKUP_ACTION_TYPE_ENTRANCE_EXI,	// выход из подъезда
	PICKUP_ACTION_TYPE_ENTRANCE_LIF,	// лифт в подъезде
	PICKUP_ACTION_TYPE_ENTRANCE_FLA,	// квартира в подьезде
	PICKUP_ACTION_TYPE_TK_MENU,
	PICKUP_ACTION_TYPE_TRADE_ROOM,
};
enum // типы авто
{
	VEHICLE_ACTION_TYPE_DRIVING_SCH = 1, // Учебный транспорт (для сдачи на права)
	VEHICLE_ACTION_TYPE_OWNABLE_CAR,	// личный транспорт
	VEHICLE_ACTION_TYPE_RENT_MOPED,
	VEHICLE_ACTION_TYPE_UGONKA,
	VEHICLE_ACTION_TYPE_RAFFLE_SHOP,
	VEHICLE_ACTION_TYPE_OWNABLE_TR,
	VEHICLE_ACTION_TYPE_WORKTRASH,
	VEHICLE_ACTION_TYPE_TRUCKS_CAR,     // TK
	VEHICLE_ACTION_TYPE_BUS_DRIVER,		// Водитель автобуса
	VEHICLE_ACTION_TYPE_TAXI_DRIVER,	// Таксист
	VEHICLE_ACTION_TYPE_RERFECT,
	VEHICLE_ACTION_TYPE_TESLA_CAR,      // TESLA Y DEDA      // Федеральная служба безопасности машины
	VEHICLE_ACTION_TYPE_MECHANIC,		// Автомеханик
	VEHICLE_ACTION_TYPE_TRUCKER_1,		// Дальнобойщик
	VEHICLE_ACTION_TYPE_TRUCKER_2,		// Дальнобойщик
	VEHICLE_ACTION_TYPE_TRUCKER_3,		// Дальнобойщик
	VEHICLE_ACTION_TYPE_RENT_CAR,		// Транспорт для аренды
	VEHICLE_ACTION_TYPE_GOV_CAR,		// Автомобили правительства
	VEHICLE_ACTION_TYPE_ARMY_CAR,		// Автомобили воинской части
	VEHICLE_ACTION_TYPE_BLACKMARKET,
	VEHICLE_ACTION_TYPE_MED_CAR,		// Автомобили больницы
	VEHICLE_ACTION_TYPE_RADIO_CAR,		// Автомобили радиоцентра
	VEHICLE_ACTION_TYPE_DPS_CAR,		// Автомобили МВД
	VEHICLE_ACTION_TYPE_INKAS_CAR,
	VEHICLE_ACTION_TYPE_PPS_CAR,		// Автомобили МВД
	VEHICLE_ACTION_TYPE_MCHS_CAR,		// Автомобили МЧС
	VEHICLE_ACTION_TYPE_FBI_CAR,		// Автомобили Федеральная служба безопасности
	VEHICLE_ACTION_TYPE_FSIN_CAR,
	VEHICLE_ACTION_TYPE_PACK,
	VEHICLE_ACTION_TYPE_ARZ_CAR,		// Автомобили Арзамасской ОПГ
	VEHICLE_ACTION_TYPE_ELECTRIK,
	VEHICLE_ACTION_TYPE_BAT_CAR,		// Автомобили Батыревской ОПГ
	VEHICLE_ACTION_TYPE_LYT_CAR,		// Автомобили Лыткаринской ОПГ
	VEHICLE_ACTION_TYPE_ADMIN_CAR,		// Транспорт, созданный администратором
	VEHICLE_ACTION_TYPE_FERMA_CAR,
	VEHICLE_ACTION_TYPE_CARSH_CAR,
	VEHICLE_ACTION_TYPE_FIRE_CAR,
	VEHICLE_ACTION_TYPE_KONTRA,
	VEHICLE_ACTION_TYPE_DONATE,
	VEHICLE_ACTION_TYPE_KONTRA1,
	VEHICLE_ACTION_TYPE_KONTRA2,
	VEHICLE_ACTION_TYPE_AUTOSALON,
	VEHICLE_ACTION_TYPE_FAMILY_CAR,
	CP_WBANK,
    CP_ACTION_RACE_WBANK,
	VEHICLE_ACTION_TYPE_SVALKA_CAR,
	VEHICLE_ACTION_TYPE_PRIZE,
	VEHICLE_ACTION_TYPE_SKATEBOARD,
	VEHICLE_ACTION_TYPE_ACTIVE_ACS
};
enum // типы cp
{
	CP_ACTION_TYPE_MINER_JOB_TAKE, 		// шахтер (брать руду)
	CP_ACTION_TYPE_MINER_JOB_PUT, 		// шахтер (класть руду)
    CP_ACTION_TYPE_LUMBERJACK_TAKE,		// лесоруб (брать дрова)
	CP_ACTION_TYPE_FERMER_TAKE,         // фермер (брать сено)
	CP_PUT_TRASH_WORK,
    CP_ACTION_TYPE_PUT_TRAIN
};
enum // типы race_cp
{
	RCP_ACTION_TYPE_BUS_ROUTE,	// водитель автобуса
	RCP_ACTION_TYPE_ORDER,		// служба доставки
	RCP_ACTION_TYPE_ORDER_INVITE,
	RCP_ACTION_TYPE_FERMA,
	RCP_ACTION_TYPE_YGON,
	RCP_ACTION_TYPE_PILOT_1,
	RCP_ACTION_TYPE_METRO_TRAIN_1,
	RCP_ACTION_TYPE_METRO_TRAIN_2,
	RCP_ACTION_TYPE_METRO_TRAIN_3,
	RCP_ACTION_TYPE_METRO_TRAIN_4,
	RCP_ACTION_TYPE_METRO_TRAIN_5,
	RCP_ACTION_TYPE_METRO_TRAIN_6,
	RCP_ACTION_TYPE_METRO_TRAIN_7,
	RCP_ACTION_TYPE_METRO_TRAIN_8,
	RCP_ACTION_TYPE_METRO_TRAIN_9,
	RCP_ACTION_TYPE_METRO_TRAIN_10,
	RCP_ACTION_TYPE_METRO_TRAIN_11,
	RCP_ACTION_TYPE_METRO_TRAIN_12,
	RCP_ACTION_TYPE_METRO_TRAIN_13,
	RCP_ACTION_TYPE_METRO_TRAIN_14,
	RCP_ACTION_TYPE_METRO_TRAIN_15,
	RCP_ACTION_TYPE_METRO_TRAIN_16,
	RCP_ACTION_TYPE_METRO_TRAIN_17,
	RCP_ACTION_TYPE_METRO_TRAIN_18,
	RCP_ACTION_TYPE_METRO_TRAIN_19,
	RCP_ACTION_TYPE_METRO_TRAIN_20,
	RCP_ACTION_TYPE_METRO_TRAIN_21,
	RCP_ACTION_TYPE_METRO_TRAIN_22,
	RCP_ACTION_TYPE_METRO_TRAIN_23,
	RCP_ACTION_TYPE_UGONKA,
	RCP_ACTION_TYPE_UGONKA1,
	RCP_ACTION_TYPE_POLICE,
	RCP_ACTION_TYPE_ELIT_RACE
};
// ------------------------------------------
enum // типы анимок
{
	USE_ANIM_TYPE_NONE,
	USE_ANIM_TYPE_CHAT, // анимка чата
};
// ------------------------------------------
enum // типы обьектов
{
	OBJECT_TYPE_FACTORY = 1,	// продукт на заводе
	OBJECT_TYPE_CARRIAGE,		// вагонетка в шахте
	OBJECT_TYPE_WOOD,			// дерево на лесопилке
	OBJECT_TYPE_TRAIN,			// поезд
};
// ------------------------------------------
enum E_PLAYER_OFFER_STURCT
{
	O_OUTCOMIG_PLAYER,  // отправленое предложение игроку
	O_INCOMING_PLAYER, 	// входящее предложение от игрока
	O_INCOMING_TYPE, 	// входящее предложение
	O_INCOMING_VALUE[2] // значение входящего предложения
};
enum // типы предложений
{
	OFFER_TYPE_NONE = -1,
	OFFER_TYPE_HANDSHAKE, 		// приветствие
	OFFER_TYPE_WEDDING,         // женитьба
	OFFER_TYPE_SELL_FUEL_ST, 	// продажа АЗС
	OFFER_TYPE_SELL_BUSINESS,	// продажа бизнеса
	OFFER_TYPE_BUSINESS_MANAGER,// пригласить сотрудника себе на предприятие
	OFFER_TYPE_SELL_HOME,		// продать дом игроку
	OFFER_TYPE_HOME_RENT_ROOM,	// предложить поселиться в комнате своего дома
	OFFER_TYPE_SELL_OWNABLE_CAR,// продать личный ТС
	OFFER_TYPE_SELL_GARAGE,
	OFFER_TYPE_SELL_KIOSK,
	OFFER_TYPE_INVITE,			// предложить вступить в организацию
	OFFER_TYPE_MEDHELP,			// лечение
	OFFER_TYPE_HEAL,			// лечение в машине скорой помощи
	OFFER_TYPE_CHANGE_SEX,		// смена пола
	OFFER_TYPE_SHOW_SKILL,		// просмотр навыков владения оружием
	OFFER_TYPE_SHOWMC,          // показать мед. карту
	OFFER_TYPE_GIVE_CAR_KEY,	// дать ключи от личного транспорта
	OFFER_TYPE_CASINO_DICE,		// бросить кости в казино
	OFFER_TYPE_GETHERE,			// телепорт к себе админа выше рангом
	OFFER_TYPE_GOTO,
	OFFER_TYPE_GIVE_MIC,		// доступ в радиоэфир
	OFFER_TYPE_FINVITE,
 	OFFER_TYPE_SELLSIM,
    OFFER_TYPE_KISS,
	OFFER_TYPE_GIVE_ITEM,
    OFFER_TYPE_FIGHT,
	OFFER_TYPE_SHOW_DOCS,
    OFFER_TYPE_SHOWPASS,
    OFFER_TYPE_SHOWADMSTATS,
    OFFER_TYPE_SHOWLIC,
    OFFER_TYPE_SELL_GARDEN,
	OFFER_TYPE_SELL_NEFTENASOS,
    OFFER_TYPE_TEST_DRIVE,
	OFFER_TYPE_EXCHANGE,
	OFFER_TYPE_TRADE
};
new
	Float: cars_pos_after_purchase[10][11][4] =
{
	{ // --- Мото-Вело рынок
		{-2250.6274,267.2955,24.0154,280.1208},
		{-2249.8101,270.5635,24.0196,262.6171},
		{-2249.0894,274.4236,24.0102,264.4334},
		{-2248.8113,277.8660,24.0164,265.6590},
		{-2248.0889,281.9852,24.0170,260.9164},
		{-2247.8179,284.9124,24.0181,254.3391},
		{-2247.4216,289.0184,24.0189,262.9468},
		{-2246.4475,292.7983,24.0246,218.4400},
		{-2243.1907,292.2455,24.0193,171.3951},
		{-2240.1814,290.0771,24.0167,134.1157},
		{-2237.5935,286.2572,24.0152,111.6432}
	},
	{ // --- Премиум класс
		{1882.5557,2832.2222,12.0596,89.8854},
		{1882.2219,2829.2625,12.0615,90.1194}, 
		{1882.1965,2826.2576,12.0596,90.8629},
		{1882.2971,2823.3337,12.0596,89.9820}, 
		{1882.3599,2820.4861,12.0596,90.2570},
		{1882.3717,2817.5117,12.0671,89.8157}, 
		{1882.3297,2814.5015,12.0671,90.7694}, 
		{1882.3187,2811.6084,12.0654,90.7239},
		{1882.1091,2808.6445,12.0596,89.9823},
		{1903.2375,2832.2148,12.0596,269.5676},
		{1903.2390,2829.2559,12.0615,269.8238}
	},
	{ // --- Эконом класс
		{2604.5193,-648.4668,11.9913,179.8412},
		{2601.8059,-663.1404,12.0031,0.2108},
		{2597.5320,-663.3077,11.9873,0.7883},
		{2592.5464,-663.5684,11.9870,0.6542},
		{2578.1572,-664.1323,11.9882,1.7210},
		{2571.7283,-663.9835,11.9881,0.4557},
		{2566.3403,-664.2360,11.9882,1.4785},
		{2564.4941,-629.1988,11.9872,180.2587},
		{2568.9873,-629.4592,11.9887,180.5780},
		{2574.8706,-629.3328,11.9892,180.2887},
		{2585.4563,-640.1770,11.9886,91.1589}
	},
	{ // --- Cредний класс
		{427.5580,777.4064,11.8428,67.9712},
		{426.5786,774.8287,11.8432,70.3927},
		{425.4217,772.1042,11.8436,70.8532},
		{406.5061,776.5790,11.6978,159.5490},
		{424.4465,769.2787,11.8431,70.4339},
		{423.4771,766.4811,11.8433,69.5840},
		{422.5185,763.7278,11.8422,71.0284},
		{427.5580,777.4064,11.8428,67.9712},
		{426.5786,774.8287,11.8432,70.3927},
		{425.4217,772.1042,11.8436,70.8532},
		{406.5061,776.5790,11.6978,159.5490}
	},
	{ // --- Авиа салон
		{-65.0162,939.1511,12.1710,358.0699},
		{-57.7549,973.1318,12.1519,286.3471},
		{-29.5055,966.0959,11.4341,289.0198},
		{-1.7095,953.9136,12.1709,282.3760},
		{11.9462,950.2479,12.1877,265.6378},
		{-11.4711,903.6136,12.1691,239.7835},
		{-65.0162,939.1511,12.1710,358.0699},
		{-57.7549,973.1318,12.1519,286.3471},
		{-29.5055,966.0959,11.4341,289.0198},
		{-1.7095,953.9136,12.1709,282.3760},
		{11.9462,950.2479,12.1877,265.6378}
	},
	{ // --- яхт клуб
		{255.3093,-190.3754,0.5415,2.8780},
		{232.4722,-193.6352,0.6988,1.8729},
		{218.2477,-191.6468,0.6195,4.7860},
		{199.1406,-194.3742,0.4724,2.2400},
		{196.6700,-224.4580,0.5092,180.6496},
		{217.7300,-223.3614,0.5615,177.8204},
		{234.3404,-222.5822,0.5772,174.9891},
		{251.8486,-221.6436,0.5055,178.2675},
		{255.3093,-190.3754,0.5415,2.8780},
		{232.4722,-193.6352,0.6988,1.8729},
		{218.2477,-191.6468,0.6195,4.7860}
	},
	{ // --- салон грузовиков
		{1037.6537,-1907.1952,34.4461,227.5526},
		{1033.6270,-1911.6687,34.4458,227.5249},
		{1030.0300,-1915.7257,34.4447,229.4517},
		{1043.7511,-1912.9106,34.4458,228.3046},
		{1039.9377,-1917.4933,34.4526,227.6205},
		{1036.1338,-1921.2515,34.4531,228.9321},
		{1037.6537,-1907.1952,34.4461,227.5526},
		{1033.6270,-1911.6687,34.4458,227.5249},
		{1030.0300,-1915.7257,34.4447,229.4517},
		{1043.7511,-1912.9106,34.4458,228.3046},
		{1039.9377,-1917.4933,34.4526,227.6205}
	},
	{ // --- салон домов на колесах
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879}
	},
	{ // --- салон вертолетов
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937}
	},
	{ // --- салон катеров
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443}
	}
};
stock GetVehicleCarMarketID(vehicleid)
{
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR) return -1;
	else return GetVehicleData(vehicleid, V_ACTION_ID);
}

enum E_ANTI_FLOOD_STRUCT
{
	AF_LAST_TICK,
	AF_RATE
}

enum E_TEMP_JOB_STRUCT // временные работы
{
	Float: TJ_POS_X,
	Float: TJ_POS_Y,
	Float: TJ_POS_Z,
	TJ_PAY_FOR_LOAD, // плата за 1 продукт (ящик/кг руды)
	TJ_SKIN[2]		// скин игрока (0 - мужской, 1 - женский)
};
new Float: vehicle_temp_position[MAX_PLAYERS][4]; // позиция автомобиля при въезде в тюнинг

enum E_ADVERT_STRUCT
{
	A_CREATOR,
	bool: A_EDIT,
	A_TEXT[50]
}
new g_advert[MAX_ADVERTS][E_ADVERT_STRUCT]; // объявления
new g_advert_created; // кол-во отправленных объявлений

enum // иды временных работ
{
	TEMP_JOB_NONE = -1,
	TEMP_JOB_MINER, 			// шахтер
	TEMP_JOB_FACTORY_TRUCKER,	// завод (служба доставки)
	TEMP_JOB_FACTORY,			// завод
	TEMP_JOB_LOAD,				// уборщик мусора
 	TEMP_JOB_LUMBERJACK,
	TEMP_JOB_INKAS,
	TEMP_JOB_MECHANIC            // фермер
};
enum //
{
	TEMP_JOB_STATE_NONE,
	TEMP_JOB_STATE_MINER_LOAD, 		// добывать руду
	TEMP_JOB_STATE_MINER_UNLOAD, 	// нести на склад
	TEMP_JOB_STATE_MINER_DROP_LOAD, // уронил руду
	TEMP_JOB_STATE_FACTORY_TAKE_MET, // брать металл
	TEMP_JOB_STATE_FACTORY_CREATE_P, // делать продукт
	TEMP_JOB_STATE_FACTORY_CREATED,  // делает продукт
	TEMP_JOB_STATE_FACTORY_PUT_PROD, // нести продукт на склад
	TEMP_JOB_STATE_FACTORY_DROP_P,	 // уронил продукт
	TEMP_JOB_STATE_LUMBERJACK_CHOP,	 // рубить дрова
	TEMP_JOB_STATE_LUMBERJACK_PUT,	 // нести на склад
	TEMP_JOB_STATE_LUMBERJACK_DROP,	 // уронил дрова
	TEMP_JOB_STATE_FERMER_CHOP,      // брать сено
	TEMP_JOB_STATE_FERMER_PUT,       // нести сено
	TEMP_JOB_STATE_FERMER_DROP,      // уронить сено
};
enum
{
	A_OBJECT_SLOT_SPINE = 0, 		// Торс
	A_OBJECT_SLOT_HEAD, 			// Голова
	A_OBJECT_SLOT_ARM, 				// Плечи
	A_OBJECT_SLOT_HAND, 			// Руки
	A_OBJECT_SLOT_THIGH, 			// Бедра
	A_OBJECT_SLOT_FOOT, 			// Ноги
	A_OBJECT_SLOT_CALF, 			// Голень
	A_OBJECT_SLOT_FOREARM, 			// Предплечье
	A_OBJECT_SLOT_CLAVICLE,			// Ключица
	A_OBJECT_SLOT_NECK, 			// Шея
};
enum
{
	A_OBJECT_BONE_SPINE = 1, 		// Торс
	A_OBJECT_BONE_HEAD, 			// Голова
	A_OBJECT_BONE_LEFT_ARM, 		// Левое плечо
	A_OBJECT_BONE_RIGHT_ARM, 		// Правое плечо
	A_OBJECT_BONE_LEFT_HAND, 		// Левая рука
	A_OBJECT_BONE_RIGHT_HAND, 		// Правая рука
	A_OBJECT_BONE_LEFT_THIGH, 		// Левое бедро
 	A_OBJECT_BONE_RIGHT_THIGH,		// Правое бедро
	A_OBJECT_BONE_LEFT_FOOT, 		// Левая нога
	A_OBJECT_BONE_RIGHT_FOOT, 		// Правая нога
	A_OBJECT_BONE_RIGHT_CALF, 		// Правая голень
	A_OBJECT_BONE_LEFT_CALF, 		// Левая голень
	A_OBJECT_BONE_LEFT_FOREARM, 	// Левое предплечье
	A_OBJECT_BONE_RIGHT_FOREARM,	// Правое предплечье
	A_OBJECT_BONE_LEFT_CLAVICLE,	// Левая ключица (плечо)
	A_OBJECT_BONE_RIGHT_CLAVICLE,	// Правая ключица (плечо)
	A_OBJECT_BONE_NECK, 			// Шея
	A_OBJECT_BONE_JAW				// Челюсть
};

enum // шаги авторизации
{
	LOGIN_STATE_CHECK_BAN = 0,	// проверка бана
	LOGIN_STATE_CHECK_BAN_IP,
	LOGIN_STATE_LOAD_ACC	 	// Загрузка аккаунта
};

new mysql; // ид соединения
new g_player_auth_inputs[MAX_PLAYERS] = 0;
new g_player_account_state[MAX_PLAYERS] = 0;
new g_player[MAX_PLAYERS][E_PLAYER_STRUCT];
new g_player_default_values[E_PLAYER_STRUCT] =
{
    0,        		 		// id
    0,        		 		// рефер
    0,        		 		// пол игрока
    "None",        	 		// пароль игрока
    "None",    		 		// емайл игрока
    false,     				// подтвержден ли емайл
    0,        		 		// скин игрока
    0,        		 		// деньги игрока
    0,      		 		// военный билет
    0,       		 		// деньги в банке
    ADMIN_TYPE_NONE, 		// уровень админки
	0,
    YADMIN_TYPE_NONE,		// уровень YouTube
    0,
    0,
    0,
    0,
    0,    					// лицензия на управление авто
    0,    					// лицензия на оружие
    0,        				// время регистрации
    "255.255.255.255", 	 	// ип при регистрации
    "255.255.255.255",   	// ип при последнем входе
	1,						// уровень игрока
	0,						// очки опыта игрока
	0,						// уровень розыска
	0,						// номер телефона
	0,						// Apple Watch
	0,						// на счету телефона
	0,						// цвет телефона
	0,						// законопослушность
	0, 						// улучшения
	0,						// жена
	0,						// организация
	0,						// скин организации
	0,						// подразделение
	0,						// зарплата
	0,						// работа / должность(ранг)
	HOUSE_TYPE_NONE, 		// тип жилья (дом/гостиница/в гостях)
	-1,						// комната в доме
	-1,						// дом
	-1,						// ид дома в котором спавнишься
	-1,						// слотов на дом
	-1,						// бизнес
	"None", 				// реальный телефон игрока
	"None", 				// пин код
	REQUEST_TYPE_OFF,		// запрос телефона при авторизации
	REQUEST_TYPE_OFF, 		// запрос пин кода при авторизации
	// -------------------------
	0,						// время последнего входа\выхода
	// -------------------------
	0,						// время игры за час
	0,						// время игры за день
	0,						// время игры за вчерашний день
	// -------------------------
	0xFFFFFF11,				// цвет игрока
	-1,						// выбраный скин
	0,						// тип чата
	0,						// время афк
	INVALID_VEHICLE_ID, 	// ид последнего авто в котором сидел
	INVALID_DIALOG_ID,		// ид последнего диалога
	USE_ANIM_TYPE_NONE,		// тип анимки который использует
	ENTER_PASSWORD_ATTEMPS, // кол-во попыток на авторизацию
	INVALID_PLAYER_ID,		// нацелен на игрока
	100.0,					// хп игрока
	// -------------------------
	TEMP_JOB_NONE,			// временная работа
	TEMP_JOB_STATE_NONE,	// действие что надо делать
	false,					// проверка анимки
	// ---------------------------------
	"",						// название службы
	0,						// тариф
	0,						// Зарплата
	0,						// загружено/перенесено (груза/руды)
	INVALID_VEHICLE_ID,		// рабочий транспорт
	-1,						// таймер окончания работы
	-1,						// Какой стол использует на заводе
	0, 						// маршрут автобуса
	0,						// шаг маршрута
	0,						// шаг маршрута
	0,						// шаг маршрута
	0,						// заправлено на N
	0,						// отремонтировано на N руб
	false,					// на работе ли
	// -------------------------
	false,					// статус авторизации
	false,					// использует ли анимку (/anim)
	false,					// заблокировать вызов OnPlayerLeaveDynamicArea
	false,					// прогружены ли анимки при спавне
	false,					// прогружен ли анимлист
	false,					// есть ли у игрока закуска
	Text3D: -1,				// бейджик советника
	false,					// отключение чата организации
	//--------------------------
	Text3D: -1,
	Text3D: -1,
	// -------------------------
	-1, 					// время на авторизаци
	-1, 					// в какой бизнес вошел
	-1, 					// в какой дом вошел
	-1,						// в каком подъезде
	-1,						// на каком этаже в подъезде
	-1,						// ид пикапа на которым стоял последний раз
	-1,						// в каком номере в отеле
	0,						// на каком этаже в отеле
	0,						// маска
	0,						// кол-во использование напитка
	REALTOR_TYPE_NONE,		// риелторка
	// -------------------------
	"255.255.255.255", 		// ип игрока
	"", 					// имя игрока
	"", 					// имя жены/мужа
	// -------------------------
	ACCOUNT_STATE_NONE, 	// статус аккаунта (авторизаци/регистрация)
	0, 						// шаг (регистрации/авторизации)
	// -------------------------
	0,             			// варны
	0,        				// время варнов
	0,             			// время мута
	0,                  	// время блокировки репорта
	0,                  	// кол-во снятия мутов
	0,                  	// кол-во снятия блокировок репорта
	// -------------------------
	0, 						// сила
	0,     					// скилл кольт
	0,   					// скилл пистолет с глушителем
	0,     					// скилл дигл
	0,    					// скилл дробовик
	0,        				// скилл мп5
	0,	    				// скилл ак47
	0,         				// скилл м4
	0,						// скилл снайперская винтовка
	0,    					// скилл обрез
	0,  					// скилл тактический дробовик
 	0,  					// скилл микро-узи
	//--------------------------
	0,                   	// место спавна
	//--------------------------
	0,						// текущий баланс донат-очков
	0,						// всего пополнений донат-очков
	//--------------------------
	false,					// лежит ли в больнице
	-1,						// номер койки
	//--------------------------
	false,					// перезаряжает ли оружие
	0,						// количество перезарядок
	false,					// есть ли наручники
	// -------------------------
	INVALID_VEHICLE_ID,	 	// покупает ли авто
	INVALID_VEHICLE_ID,		// каршеринг авто
	INVALID_VEHICLE_ID,		// арендованное авто
	INVALID_VEHICLE_ID,		// доверенное авто
	2,						// количество слотов для авто
	// -------------------------
	0,						// время заключения
	0,                  	// время заключения в КПЗ
	0,						// здоровье
	0,						// раскраски оружия
	false,     				// выполняет ли заказ
	// -------------------------
	0,						// уровень премиум аккаунта
	0,						// время действия премиум аккаунта
	Text3D: -1,        		// бейджик фамы
	0,						// рулетка
	0, 						//таймер выхода из авто
	"None"        	 		// пароль админки
};

new Float: g_taxi_mileage[MAX_PLAYERS] = {0.0, ...};
new Inkasator[7];//сколько машин
new PlayerIsInkasator[MAX_PLAYERS];//отвечает за работу
new Float:gInkasatorPoints[22][3] = {
{321.4886,775.2122,12.0010},
{388.6696,782.9905,12.1200},
{202.1470,1504.2362,12.0074},
{2597.4321,-628.1735,12.3025},
{973.7050,519.7670,14.7036},
{694.4942,587.2578,12.0021},
{510.9398,429.3804,12.0000},
{288.6430,986.2550,12.2796},
{152.8851,776.8303,12.1534},
{-97.6411,968.5718,12.1494},
{305.6220,1666.4200,12.0000},
{-383.4880,1352.2700,12.7161},
{-2501.1975,2012.1228,53.2180}, //ноунейм73636
{594.8910,-477.4010,9.8984},
{263.5430,2735.5400,11.0000},
{-321.0561,401.1047,12.6299},
{648.6100,651.5737,12.0000},
{-346.4320,959.4500,12.1494},
{408.2890,1960.3000,8.1641},
{2475.4333,-733.8907,12.0969},
{321.8790,775.6330,12.0010},
{388.9795,541.1783,12.0159}}; // это отвечает за координаты куда ехать

new g_ownable_car[MAX_OWNABLE_CARS][E_OWNABLE_CAR_STRUCT];
new g_ownable_car_loaded;
stock GetPlayerOwnableCarLast(playerid)
{
    new vehicleid = INVALID_VEHICLE_ID;
	if(GetPVarInt(playerid, "lli") != INVALID_VEHICLE_ID)
	{
		new idxd = GetVehicleData(GetPVarInt(playerid, "lli"), V_ACTION_ID);
		if(GetOwnableCarData(idxd,OC_OWNER_ID) == GetPlayerAccountID(playerid)) vehicleid = GetPVarInt(playerid, "lli");
		else return vehicleid;
	}
	return vehicleid;
}

stock GetPlayerOwnableCarLoad(playerid)
{
    new vehicleid = INVALID_VEHICLE_ID;
	if(GetPVarInt(playerid, "lli") != INVALID_VEHICLE_ID)
	{
		new idxd = GetVehicleData(GetPVarInt(playerid, "lli"), V_ACTION_ID);
		if(GetOwnableCarData(idxd,OC_OWNER_ID) == GetPlayerAccountID(playerid)) vehicleid = GetPVarInt(playerid, "lli");
		else return vehicleid;
	}
	return vehicleid;
}

new g_hotel[MAX_HOTELS][MAX_HOTEL_ROOMS][E_HOTEL_STRUCT];
new g_hotel_rooms_loaded[MAX_HOTELS];
new g_hotel_loaded;
new g_hotel_lift_CP[2];
new const
	Float: g_hotel_room_exit_pos[3][3] =
{
	{1275.9808, -772.4982, 1202.7220},
	{1275.9808, -764.2992, 1202.7220},
	{1275.9808, -756.2681, 1202.7220}
};
new const // позиции авто (парковка отеля / подогнать тс к отелю)
	g_hotel_car_park_pos[1][33][E_HOTEL_CAR_PARK_STRUCT] =
{
	{
		{-133.1494,	983.9849,	12.1618,	180.4495,	INVALID_VEHICLE_ID},
		{-137.5265,	983.8444,	12.1608,	179.9925,	INVALID_VEHICLE_ID},
		{-139.5423,	975.4324,	12.1614,	269.4506,	INVALID_VEHICLE_ID},
		{-139.2751,	971.6942,	12.1608,	267.8990,	INVALID_VEHICLE_ID},
		{-139.3615,	967.6329,	12.1618,	268.9070,	INVALID_VEHICLE_ID},
		{-139.2914,	963.4075,	12.1611,	270.4609,	INVALID_VEHICLE_ID},
		{-139.2221,	958.7978,	12.1608,	269.5585,	INVALID_VEHICLE_ID},
		{-116.4657,	971.6745,	12.1570,	89.46280,	INVALID_VEHICLE_ID},
		{-116.5386,	967.9235,	12.1557,	90.18910,	INVALID_VEHICLE_ID},
		{-116.5738,	963.9881,	12.1531,	90.00600,	INVALID_VEHICLE_ID},
		{-116.5876,	960.3621,	12.1551,	92.67610,	INVALID_VEHICLE_ID},
		{-116.2813,	950.5233,	12.1536,	90.45550,	INVALID_VEHICLE_ID},
		{-102.8195,	971.5937,	12.1614,	270.0878,	INVALID_VEHICLE_ID},
		{-102.6861,	968.0194,	12.1620,	269.5782,	INVALID_VEHICLE_ID},
		{-102.7776,	964.1411,	12.1621,	270.2165,	INVALID_VEHICLE_ID},
		{-102.9098,	960.6828,	12.1615,	270.6911,	INVALID_VEHICLE_ID},
		{-102.8726,	950.8474,	12.1610,	270.0904,	INVALID_VEHICLE_ID},
		{-116.2799,	950.5248,	12.1551,	90.53890,	INVALID_VEHICLE_ID},
		{-102.5865,	946.5525,	12.1611,	268.3489,	INVALID_VEHICLE_ID},
		{-94.7682,	983.9437,	12.1606,	178.0583,	INVALID_VEHICLE_ID},
		{-89.6837,	983.7529,	12.1627,	180.2712,	INVALID_VEHICLE_ID},
		{-88.7005,	975.4258,	12.1573,	91.58140,	INVALID_VEHICLE_ID},
		{-88.7543,	971.4301,	12.1574,	90.29010,	INVALID_VEHICLE_ID},
		{-88.7361,	968.0562,	12.1570,	90.12850,	INVALID_VEHICLE_ID},
		{-88.7494,	964.4591,	12.1579,	91.67410,	INVALID_VEHICLE_ID},
		{-88.6165,	960.7374,	12.1577,	90.89440,	INVALID_VEHICLE_ID},
		{-88.6389,	957.0118,	12.1556,	91.18100,	INVALID_VEHICLE_ID},
		{-88.5814,	953.0699,	12.1540,	90.86370,	INVALID_VEHICLE_ID},
		{-88.6637,	949.1523,	12.1536,	91.07860,	INVALID_VEHICLE_ID},
		{-88.6821,	945.1238,	12.1542,	91.11890,	INVALID_VEHICLE_ID},
		{-88.8479,	941.1545,	12.1542,	90.08610,	INVALID_VEHICLE_ID},
		{-88.8513,	937.4927,	12.1536,	90.22390,	INVALID_VEHICLE_ID},
		{-88.8047,	933.3365,	12.1541,	90.21220,	INVALID_VEHICLE_ID}
	}
};
//new bool: bInv[MAX_PLAYERS];
new g_house[MAX_HOUSES][E_HOUSE_STRUCT];
new g_house_loaded;
new g_house_renters[MAX_HOUSES][MAX_HOUSE_ROOMS][E_HOUSE_ROOM_STRUCT];
new g_house_renters_count[MAX_HOUSES];
new g_house_type[8][E_HOUSE_TYPE_STRUCT] =
{
	{
        "Деревенский дом", // название / тип
        2346.3789, -2459.9546, 1199.3516, 269.3445, // после входа
        2350.8967,-2463.9119,1199.3516, // аптечка
        2344.0784,-2457.1663,1199.3516, // шкаф
        2348.8140,-2456.3562,1199.3516, // Склад
        2, // интерьер
        1 // комнат
	},
	{
        "Эконом класс", // название / тип
        -2506.7422,-2802.6072,1049.8594, 359.3930, // после входа
        -2504.9829,-2798.5256,1049.8594, // аптечка
        -2502.9700,-2796.0068,1049.8594, // шкаф
        -2497.1707,-2795.8423,1049.8594, // Склад
        5, // интерьер
        3 // комнат
	},
	{
        "Низкий класс", // название / тип
        2344.7966, -2460.0222, 999.3516, 273.5191, // после входа
        2349.2537, -2465.4900, 999.3589, // аптечка
        2352.4089,-2463.5820,999.3516, // шкаф
        2349.2571,-2454.8821,999.3516, // Склад
        2, // интерьер
        3 // комнат
	},
	{
       "Средний класс", // название / тип
        435.5241, 1316.0438, 1615.5300, 358.1994, // после входа
        427.6841, 1318.7737, 1615.5300, // аптечка
        438.5707, 1322.1454, 1615.5300, // шкаф
        433.4722, 1332.2903, 1615.5300, // Склад
        3, // интерьер
        4 // комнат
	},
	{
        "VIP класс", // название / тип
        1604.4670, -411.6531, 1051.0000, 0.0, // после входа
        1608.6101, -406.6184, 1051.0000, // аптечка
        1613.3689, -405.9612, 1053.8750, // шкаф
        1609.9025, -404.2465, 1047.6719, // Склад
        10, // интерьер
        5 // комнат
	},
	{
        "Премиум класс+", // название / тип
        -1707.0907, 2752.7971, 1001.0391, 180.5050, // после входа
        -1694.7156, 2745.8916, 1001.0469, // аптечка
        -1700.0923, 2762.8831, 1005.1719, // шкаф
        -1701.3679, 2762.3721, 1005.1719, // Склад
        4, // интерьер
        2 // комнат
	},
	{
        "Элитный класс", // название / тип
        -2546.2422, -1248.9615, 1001.0000, 268.9145, // после входа
        -2522.9053, -1262.8729, 1000.9922, // аптечка
        -2553.7090, -1226.9863, 997.4988, // шкаф
        -2533.3398, -1228.5935, 997.5078, // Склад
        4, // интерьер
        5 // комнат
	},
	{
		"Особняк класс",
		-2698.1443,2185.9932,1000.9784,179.7354,
		-2700.8911,2208.5996,1004.7576,
		-2672.1753,2188.0967,1000.9988,
		-2638.9104,2186.7485,995.7699,
		4,
		30
	}
};
new const
	g_house_improvements[4][E_IMPROVEMENTS_STRUCT] =
{
	{"Домашняя аптечка", 		7_500_000, 0},
	{"Совместное проживание",	10_000_000, 0},
	{"Оформление субсидии",		13_000_000, 0},
	{"Шкаф для вещей",			15_000_000, 0}
};
new g_business[MAX_BUSINESS][E_BUSINESS_STRUCT];
new g_business_loaded;
new const
	g_business_improvements[6][E_IMPROVEMENTS_STRUCT] =
{
	{"Дополнительные продукты", 			12_000_000,	0},
	{"Медицинское обслуживание", 			15_000_000,	0},
	{"Пониженное налогообложение",			17_500_000,	0},
	{"Звуковые эффекты при входе",			20_000_000,	0},
	{"Дополн. склад для продуктов",			22_000_000,	0},
	{"Рекламная кампания",					25_500_000,	0}
};

new g_garage[MAX_GARAGE][E_GARAGE_STRUCT];
new g_garage_loaded;
enum // иды интерьеров
{
	BUSINESS_INTERIOR_SHOP_24_7 = 0,	// магазин 24/7
	BUSINESS_INTERIOR_CLUB = 1,			// клуб
	BUSINESS_INTERIOR_REALTOR_BIZ = 2,	// управление статистики (бизнесы)
	BUSINESS_INTERIOR_REALTOR_HOME = 3,	// риелторское агенство (дома)
	BUSINESS_INTERIOR_CLOTHING_SHOP = 4,// магазин одежды
	BUSINESS_INTERIOR_HOTEL = 5,		// гостиница
	BUSINESS_INTERIOR_CAR_MARKET = 6,	// авторынок
	BUSINESS_INTERIOR_CASINO = 7,		// казино
	BUSINESS_INTERIOR_CELL_SALON = 8,	// сотовый салон
	BUSINESS_INTERIOR_CAR_TUNING = 9,	// тюнинг транспорта
	BUSINESS_INTERIOR_BUY_GUN = 10,	// амунанция
	BUSINESS_INTERIOR_BANK = 11,         // банк
	BUSINESS_INTERIOR_COMP_CLUB = 12,
	BUSINESS_INTERIOR_SPORT = 13,
	BUSINESS_INTERIOR_DETEL = 14,
	BUSINESS_INTERIOR_ARENDA = 15,
	BUSINESS_INTERIOR_STO = 16,
	BUSINESS_INTERIOR_FERMA = 17,
	BUSINESS_INTERIOR_DET = 18,
	BUSINESS_INTERIOR_BY_NIZ = 19,
	BUSINESS_INTERIOR_BY_MED = 20,
	BUSINESS_INTERIOR_BY_HIG = 21,
	BUSINESS_INTERIOR_XZ = 22,
	BUSINESS_INTERIOR_SHOP_GARDEN = 23,	// магазин Садовод
	BUSINESS_INTERIOR_PARIK = 24,
	BUSINESS_INTERIOR_AVTOZAP = 25,
	BUSINESS_INTERIOR_TIR = 26,
	BUSINESS_INTERIOR_NOTARIUS = 27,
	BUSINESS_INTERIOR_WOSH = 28,	 // Прачечная
	BUSINESS_INTERIOR_ZAKUS = 29,	 // закусочная
	BUSINESS_INTERIOR_APTEKA = 30,   // Аптека
	BUSINESS_INTERIOR_KONDITER = 31,// Кондитерская
	BUSINESS_INTERIOR_VETRIKI = 32,
	BUSINESS_INTERIOR_CAR_MARKET_SR = 33,
};

new const
	g_business_interiors[34][E_BUSINESS_INTERIOR_STRUCT] =
{
	{ // магазин 24/7
		-508.5311, 1511.7339, 1001.0025, 		// позиции пикапа (выход)
		-508.4246, 1508.6708, 1001.0025, 180.0,// позиции входа
		5, 									// интерьер
		-500.3986, 1511.0310, 1001.0025, 		// позиции аптечки
		-502.3037, 1504.5017, 1001.0025, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // клуб (алхамбра)
		-2242.0076,1008.5794,1059.6974, // позиции пикапа (выход)
		-2240.1707,1008.6591,1059.6974,271.6833, // позиции входа
		5, // интерьер
		-2237.7664,1010.8090,1059.4712, // позиции аптечки
		-2232.6899,992.1184,1059.4712, // позиции покупки
		-2232.6899,992.1184,1061.4712, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // управление статистики
		-364.2391, 2740.8413, 2502.1704,	// позиции пикапа (выход)
		-368.1136, 2740.9727, 2502.1951, 90.0,	// позиции входа
		0,									// интерьер
		-366.2918, 2736.5081, 2502.1704,	// позиции аптечки
		-371.4008, 2739.6472, 2502.1704,	// позиции покупки
		-370.0462, 2738.7839, 2503.8501,	// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // риелторское агенство
		100.8657,712.1253,1.6028,		// позиции пикапа (выход)
		100.8657,712.1253,1.6028,39.7830,// позиции входа
		0,									// интерьер
		161.4340, 748.0493, 25.8272,		// позиции аптечки
		160.5056, 744.9833, 25.8272,		// позиции покупки
		154.5396, 748.7235, 26.9926,		// позиции 3д текста
		-1
	},
 { // магазин одежды
		2004.7367,1905.6750,1001.0000,		// позиции пикапа (выход)
		2003.1340,1905.1023,1001.0000,87.5794,// позиции входа
		4,									// интерьер
		1996.2866,1906.5070,1001.0000,		// позиции аптечки
		2003.4229,1901.8441,1001.0000,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // гостиница
		725.0262, 592.7350, 1002.9598,		// позиции пикапа (выход)
		725.0227, 594.9494,1002.9598, 360.0,// позиции входа
		1,									// интерьер
		718.5051, 593.9505, 1002.9598,		// позиции аптечки
		724.8739, 602.2747, 1002.9598,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // авторынок
		1582.5762,2809.1921,1014.6044,		// позиции пикапа (выход)
		1586.3915,2809.8518,1014.6044,268.8661, // позиции входа
		5,									// интерьер
		2307.5610,1753.6313,1001.0000,		// позиции аптечки
		1584.9692, 2802.4504, 1014.6044,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // казино
		216.0834, -337.6153, 1011.0956,		// позиции пикапа (выход)
		215.8622, -334.5533, 1011.0956, 0.0, // позиции входа
		5,									// интерьер
		218.8801, -301.1998, 1011.4786,		// позиции аптечки
		215.7990, -302.8007, 1011.4786,		// позиции покупки
		215.8162, -301.5210, 1012.7519, 	// позиции 3д текста
		-1
	},
	{ // сотовый салон
		-2693.9612, -0.0503, 1061.0000, 		// позиции пикапа (выход)
		-2696.3584, -0.0477, 1061.0000, 90.0, // позиции входа
		6, 									// интерьер
		-2707.7949, 4.2581, 1060.9922, 		// позиции аптечки
		-2708.6167, -0.1650, 1060.9922, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // тюнинг салон
		874.2732, 1329.8386, 1008.2256, 	// позиции пикапа (выход)
		873.0318, 1329.8650, 1008.2256, 0.0, // позиции входа
		7, 									// интерьер
		871.2307, 1328.5104, 1008.2359, 	// позиции аптечки
		868.7779, 1329.4622, 1008.2256, 	// позиции покупки
		868.7568, 1328.4609, 1008.9873,		// позиции 3д текста
		-1
	},
	{ // магазин оружия
		-2900.0266,1704.7983,1001.0000, 	// позиции пикапа (выход)
		-2900.0496,1702.7653,1001.0000,179.8120, // позиции входа
		4, 									// интерьер
		-2902.4924,1696.2982,1001.0000, 	// позиции аптечки
		-2900.6497,1697.5923,1001.3000, 	// позиции покупки
		295.7845,-38.4868,1001.5178,		// позиции 3д текста
		-1
	},
	{ // банк
		306.2370,299.3502,1001.0000,		// позиции пикапа (выход)
		303.7817,299.4347,1001.0000,88.0242,// позиции входа
		5,									// интерьер
		420.4626,562.2424,-36.6100,		// позиции аптечки
		0.0, 0.0, 0.0,		// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // компьютерный клуб
		647.6818, -12.0481, 1001.4328, 	// позиции пикапа (выход)
		649.4155, -11.8298, 1001.4328, 270.1732, // позиции входа
		10, 									// интерьер
		651.9509, -4.0348, 1001.4328, 	// позиции аптечки
		648.6971, -8.1276, 1001.4328, 	// позиции покупки
		648.6971, -8.1276, 1001.4328,		// позиции 3д текста
		-1
	},
    { // Спортзал
		207.2971,824.8159,1001.0000, 	// позиции пикапа (выход)
		207.3224,826.5656,1001.0038,359.4357, // позиции входа
		10, 									// интерьер
		216.0959,846.3589,1000.9922,	// позиции аптечки
		0.0, 0.0, 0.0,	 	// позиции покупки
		0.0, 0.0, 0.0,			// позиции 3д текста
		-1
	},
	{ // детейл старый
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // аренда авто
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		426.8594, 1780.2661, 12.2000, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // СТО new
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // ферма
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // новый детейлинг
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу низ
		2285.8457,1802.5986,1000.9609, 	// позиции пикапа (выход)
		2290.1001,1803.0746,1000.9609, 270.0, // позиции входа
		4, 									// интерьер
		2307.5640,1753.4691,1001.0000, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу сред
		1587.1837,1836.6561,996.5703, 	// позиции пикапа (выход)
		1587.1583,1830.3068,996.5703,178.9150, // позиции входа
		4, 									// интерьер
		1575.3284,1777.5909,996.5703, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу элит
		-1587.7252,995.5857,1001.1563, 	// позиции пикапа (выход)
		-1587.7893,998.9899,1001.1563, 0.0, // позиции входа
		4, 									// интерьер
		-1593.1305,1000.3550,1001.1563,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // стройка
		0.0, 0.0, 0.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		4, 									// интерьер
		0.0,0.0,1110.0,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // Садовод
		-1039.2823,681.1646,1001.1094, 	// позиции пикапа (выход)
		-1039.3754,682.9312,1001.0000,359.3967, // позиции входа
		4, 									// интерьер
		-1031.7572,689.3234,1001.0000,	// позиции аптечки
		-1038.4333,687.4626,1001.0000, 	// позиции покупки
		-1038.3456,687.4626,1001.0000,		// позиции 3д текста
		-1
	},
	{ // барбер
		1242.5327,-2769.0706,1001.0000, 	// позиции пикапа (выход)
		1240.8276,-2771.5818,1001.0000,179.8441, // позиции входа
		4, 									// интерьер
		1241.7601,-2775.8748,1001.0000,	// позиции аптечки
		1238.5682,-2774.2454,1001.0000, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // car
		1564.5455,-2400.1931,1001.0000, 	// позиции пикапа (выход)
		1561.9990,-2399.9319,1001.0000,87.8791, // позиции входа
		4, 									// интерьер
		1561.9594,-2397.4900,1001.0000,	// позиции аптечки
		1555.7836,-2400.7815,1001.0000, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // Тир
		-2728.0151,2922.9229,998.4399, 	// позиции пикапа (выход)
		-2729.8091,2922.9109,998.4442,90.0000, // позиции входа
		4, 									// интерьер
		-2729.2009,2926.7432,998.4540,	// позиции аптечки
		-2729.8062,2918.2976,998.4515, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // Нотариус
		494.0048,449.0796,1001.0000, 	// позиции пикапа (выход)
		495.7159,449.0718,1000.9922,272.4079, // позиции входа
		5, 									// интерьер
		500.6070,458.0250,1000.9922,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // прачка
		1701.1926,-2204.5754,1001.0000, // позиции пикапа (выход)
		1701.1406,-2201.5579,1001.0000,0.0000,// позиции входа
		4,                                  //интерьер
		1704.1678,-2195.7603,1001.0000, // позиции аптечки
		0.0,0.0,0.0, // позиции покупки
		0.0, 0.0, 0.0, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // закусочная
		-1846.7068,1268.6561,1115.8447, // позиции пикапа (выход)
		-1849.1172,1268.5806,1115.8447,91.2593,// позиции входа
		4,                                  //интерьер
		-1854.3073,1260.4597,1115.8447, // позиции аптечки
		-1852.5448,1276.9109,1115.8447, // позиции покупки
		-1852.5448,1276.9109,1115.8447, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // аптека
		-2278.1162,-1492.9065,1001.0078, // позиции пикапа (выход)
		-2278.2141,-1491.0653,1001.0000,0.0000,// позиции входа
		4,                                  //интерьер
		-2282.5586,-1485.3353,1001.0000, // позиции аптечки
		-2279.0376,-1485.3148,1001.0000, // позиции покупки
		-2279.0376,-1485.3148,1001.0000, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // Кондитерская
		303.9078,1804.6189,1031.0000, // позиции пикапа (выход)
		302.0430,1803.7839,1031.0000,127.4625,// позиции входа
		5,                                  //интерьер
		296.6795,1801.6278,1031.0000, // позиции аптечки
		300.7572,1801.3663,1031.0000, // позиции покупки
		0.0, 0.0, 0.0, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // ветрики
		-1633.4471, 947.4637, 111.8946, 		// позиции пикапа (выход)
		-1633.3441, 948.8265, 111.8946,5.7483,// позиции входа
		5, 									// интерьер
		0.0, 0.0, 0.0, 		// позиции аптечки
		-1633.4410, 947.4982, 147.8165, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // авторынок
		-1997.5229,-1318.3676,1031.0000,		// позиции пикапа (выход)
		-1997.3765,-1312.5791,1031.0000,358.9136, // позиции входа
		4,									// интерьер
		2307.5610,1753.6313,1001.0000,		// позиции аптечки
		456.0765,849.1674,-24.0743,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	}
};
new Text3D: g_business_realtor_label;
new g_business_realtor_list[1024];
new g_business_realtor_list_idx[MAX_BUSINESS];
new biz_area[MAX_BUSINESS];
new home_area[MAX_HOUSES];
new const
	g_business_sound[5] =
{
	17001,
	4203,
	21000,
	1135,
	1137
};

new g_business_gps[MAX_BUSINESS_GPS][E_BUSINESS_GPS_STRUCT];
new g_business_gps_count;
new bool: g_business_gps_init;
new g_order[MAX_BUSINESS][E_ORDER_STRUCT]; // заказы
new Float: g_med_bed_pos[48][3] = // позиции коек
{
    {429.4151,1700.6271,1001.0000},
    {429.4159,1695.6923,1001.0000},
    {427.3761,1695.8121,1001.0000},
    {427.3762,1700.6821,1001.0000},
    {426.0193,1709.4882,1001.0000},
    {426.0197,1714.2802,1001.0000},
    {428.0590,1714.2037,1001.0000},
    {428.0582,1709.2855,1001.0000},
    {431.2978,1709.4608,1001.0000},
    {431.2968,1714.3481,1001.0000},
    {433.3360,1714.1412,1001.0000},
    {433.3370,1709.3767,1001.0000},
    {432.7151,1700.7372,1001.0000},
    {432.6817,1695.9470,1001.0000},
    {434.7198,1695.8833,1001.0000},
    {434.7205,1700.4869,1001.0000},
    {437.9762,1700.6932,1001.0000},
    {437.9769,1695.7604,1001.0000},
    {440.0154,1695.6848,1001.0000},
    {440.0147,1700.6006,1001.0000},
    {438.6310,1709.3723,1001.0000},
    {438.6302,1714.2032,1001.0000},
    {436.5920,1714.3275,1001.0000},
    {436.5909,1709.4709,1001.0000},
    {438.6306,1741.8832,1301.0000},
    {438.6298,1736.9958,1301.0000},
    {436.5911,1741.8870,1301.0000},
    {436.5920,1737.0715,1301.0000},
    {437.9771,1728.2765,1301.0000},
    {437.9763,1723.3691,1301.0000},
    {440.0159,1723.4207,1301.0000},
    {440.0145,1728.2250,1301.0000},
    {433.3357,1737.0079,1301.0000},
    {433.3362,1741.7407,1301.0000},
    {431.2980,1741.9055,1301.0000},
    {431.2977,1737.0216,1301.0000},
    {432.6817,1728.3059,1301.0000},
    {432.6810,1723.3979,1301.0000},
    {434.7207,1723.3076,1301.0000},
    {434.7201,1728.2218,1301.0000},
    {428.0589,1737.0033,1301.0000},
    {428.0577,1741.8090,1301.0000},
    {426.0194,1741.8926,1301.0000},
    {426.0197,1736.9832,1301.0000},
    {427.3767,1728.1998,1301.0000},
    {427.3759,1723.3671,1301.0000},
    {429.4158,1723.4255,1301.0000},
    {429.4148,1728.2372,1301.0000}
};

new g_med_bed_used[sizeof g_med_bed_pos] = {false, ...}; // занята ли койка
new Text3D: g_med_bed_label[sizeof g_med_bed_pos]; // текст койки
enum
{
	ARMORY_TYPE_ARMOR = 0,
	ARMORY_TYPE_DPS,
	ARMORY_TYPE_SECURITY,
	ARMORY_TYPE_POLICE,
	ARMORY_TYPE_MCHS
}
enum E_ARMORY_STRUCT
{
	A_DESCRIPTION[21],
	A_TYPE,
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z
}
new g_armory[][E_ARMORY_STRUCT] =
{
	{"Воинская часть", ARMORY_TYPE_ARMOR, 1242.1392,3230.7715,12.4012},
	{"Охрана правительства", ARMORY_TYPE_SECURITY, -2524.2407,1481.2822,1080.4944},
	{"Полицейской службы", ARMORY_TYPE_POLICE, 214.7963,1501.9946,-27.6771},
	{"ФСИН", ARMORY_TYPE_POLICE, -1676.8533,-2843.1965,1004.8162},
	{"ФСБ", ARMORY_TYPE_POLICE, -1622.2333,-1786.6661,1000.7010}
};
#if defined RAND_WEATHER
new const
	g_weather[][E_WEATHER_STRUCT] =
{
	{"ясная погода", 18, 	22},
	{"туман", 		 9, 	15},
	{"ясная погода", 3, 	21},
	{"ясная погода", 1, 	23}
};
#endif
new g_player_setting[MAX_PLAYERS][E_PLAYER_SETTINGS_STRUCT];
new
	g_settings_default_values[E_PLAYER_SETTINGS_STRUCT] =
{
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_OFF,
	SETTING_TYPE_ON
};
new g_player_gps[MAX_PLAYERS][E_PLAYER_GPS_STRUCT];
new
	g_gps_default_values[E_PLAYER_GPS_STRUCT] =
{
	GPS_STATUS_OFF,
	0.0,
	0.0,
	0.0
};

new
	Float: g_jail_positions[][6] =
{
	{-1746.9283,-2790.1558,1001.3981,181.9716},
	{-1746.4226,-2814.4431,1001.3981,359.0066},
	{-1736.9752,-2789.4993,1001.3981,182.5983},
    {-1737.8453,-2814.6924,1001.3981,354.6199}
};

new anim_list[74][E_ANIM_LIST_STRUCT] =
{
	{"Танец 1",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 2",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 3",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 4", 						"",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 5",							"DANCING",			"DAN_Left_A",			4.0, true,  0, 0, 0, 0},
	{"Танец 6",							"DANCING",			"dnce_M_a",				4.0, true,  0, 0, 0, 0},
	{"Махать рукой",					"ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю",					"BEACH",			"bather",				4.0, true,  0, 0, 0, 0},
	{"Походка пьяного",					"PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0},
	{"Кувыркаться",						"ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1},
	{"Попрощаться",						"ped",				"endchat_03",			4.0, true,  1, 1, 1, 0},
	{"Читать рэп",						"benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0},
	{"Укрыться",						"ped",				"cower", 				3.0, true,  0, 0, 0, 0},
	{"Подложить бомбу",					"BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0},
	{"Надеть маску",					"SHOP",				"ROB_Shifty",			4.0, false, 0, 0, 0, 0},
	{"Вытянуть руку перед собой",		"SHOP",				"ROB_Loop_Threat",		4.0, true,  0, 0, 0, 0},
	{"Сложить руки вместе",				"COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0},
	{"Съел что-то не то...",			"FOOD",				"EAT_Vomit_P", 			3.0, false, 0, 0, 0, 0},
	{"Перекусить",						"FOOD",				"EAT_Burger", 			3.0, false, 0, 0, 0, 0},
	{"Шлепнуть кому-то по заднице",		"SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0},
	{"Предложить наркотики",			"DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0},
	{"Эффект электрошокера",			"CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0},
	{"Мужское курение",					"SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Женское курение",					"SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Присесть",						"BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0},
	{"Восточное единоборство",			"PARK",				"Tai_Chi_Loop",			4.0, true,  0, 0, 0, 0},
	{"Выпить напиток",					"BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0},
	{"Расслаблено сесть",				"BLOWJOBZ",			"BJ_COUCH_LOOP_P",		4.0, true,  0, 0, 0, 0},
	{"Поза вратаря",					"BSKTBALL",			"BBALL_def_loop",		4.0, true,  0, 0, 0, 0},
	{"Facepalm",						"MISC",				"plyr_shkhead",			4.0, false, 0, 0, 0, 0},
	{"Элемент восточного танца",		"BSKTBALL",			"BBALL_idle",			4.0, true,  0, 0, 0, 0},
	{"Позвать кого-то",					"CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0},
	{"Руки вверх!",						"PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0},
	{"Спать на боку",					"CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0},
	{"Спать на спине",					"CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0},
	{"Смотреть по сторонам",			"DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0},
	{"Облокотиться на бок",				"GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0},
	{"Толкнуть боком",					"GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0},
	{"Раздумье",						"GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0},
	{"Лечь, оперевшись на ладонь",		"BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0},
	{"Сесть на стул",					"INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0},
	{"Сидеть уставшим за компьютером",	"INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть за столом",				"INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть и печатать",				"INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0},
	{"Взять что-то и рассмотреть",		"INT_SHOP",			"shop_shelf",			4.0, false, 0, 0, 0, 0},
	{"Сесть, закинув ногу на ногу",		"JST_BUISNESS",		"girl_02",				4.0, true,  0, 0, 0, 0},
	{"Отказаться от чего-либо",			"KISSING",			"GF_StreetArgue_02",	4.0, false, 0, 0, 0, 0},
	{"Поцелуй 1",						"KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 2",						"KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 3",						"KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0},
	{"Размахивать руками на месте",		"LOWRIDER",			"RAP_B_Loop",			4.0, true,  0, 0, 0, 0},
	{"Искуственное дыхание",			"MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0},
	{"Пощечины для лежачего",			"MISC",				"bitchslap",			4.0, true,  0, 0, 0, 0},
	{"Подглядывать через что-то",		"MISC",				"bng_wndw",				4.0, false, 0, 0, 0, 0},
	{"Движения тореодора",				"MISC",				"KAT_Throw_K",			4.0, false, 0, 0, 0, 0},
	{"Сесть на стул (2)",				"MISC",				"SEAT_LR",				4.0, true,  0, 0, 0, 0},
	{"Сесть на стул (3)",				"ped",				"SEAT_idle",			4.0, true,  0, 0, 0, 0},
	{"Смотреть наверх",					"ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0},
	{"Указать рукой наверх",			"ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0},
	{"Быть в страхе",					"ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0},
	{"Призывать к чему-либо",			"ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0},
	{"Сходить по-маленькому",			"PAULNMAC",			"Piss_loop",			4.0, true,  0, 0, 0, 0},
	{"Гангстерский жест",				"GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0},
	{"Голосовать на остановке",			"ped",				"IDLE_taxi", 			3.0, true,  0, 0, 0, 0},
	{"Удар ногой",						"POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0},
	{"Стучаться в дверь",				"POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0},
	{"Устроить бунт",					"RIOT",				"RIOT_ANGRY_B",			4.0, true,  0, 0, 0, 0},
	{"Пританцовывать",					"RAPPING",			"RAP_C_Loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю (2)",				"SWAT",				"gnstwall_injurd",		4.0, true,  0, 0, 0, 0},
	{"Плохое самочувствие",				"SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0},
	{"Приветствие 1",					"RIOT",				"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0},
	{"Приветствие 2",					"GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 3",					"GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 4",					"GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0}
};

new anim_list_items[34 * (sizeof(anim_list)+1) + 1];
new
	g_anim_libs[38][13] =
{
	"BAR",
	"BASEBALL",
	"BEACH",
	"BENCHPRESS",
	"BLOWJOBZ",
	"BOMBER",
	"BSKTBALL",
	"CAMERA",
	"CARRY",
	"COP_AMBIENT",
	"CRACK",
	"CRIB",
	"DANCING",
	"DEALER",
	"FOOD",
	"GANGS",
	"GHANDS",
	"GRAVEYARD",
	"INT_HOUSE",
	"INT_OFFICE",
	"INT_SHOP",
	"JST_BUISNESS",
	"KISSING",
	"LOWRIDER",
	"MEDIC",
	"MISC",
	"ON_LOOKERS",
	"OTB",
	"PARK",
	"PAULNMAC",
	"PED",
	"POLICE",
	"RAPPING",
	"RIOT",
	"SHOP",
	"SMOKING",
	"SWAT",
	"SWEET"
};

new map_icons[34][E_MAP_ICONS_STRUCT] =
{
	{429.7691,-2444.4690,34.9269, 	38},   // Лесоруб
	{1934.0605,1938.6450,16.0539, 	36},   // автошкола
	{611.7523,1733.6365,12.1678, 	22},  // больница Арзамаса
	{183.0684,1446.6622,27.0717, 	30},   // ГИБДД
	{1777.9568, -2269.8176,  10.8263, 	30},  // УМВД
 	{-2464.7283, 1544.4351,  53.0278, 	19},  // Правительство
	{-1085.168, 2182.3547, 	38.0679, 	51},  // завод
	{1850.9291,2819.2183,38.3959, 55},     // Автосалон Высокий
	{397.2827,805.9502,22.7497, 55},       // Автосалон Средний
	{2599.4080,-620.5815,20.1871, 55}, 	   // Автосалон Низкий
	{1661.78, 738.389, 16.0372,    53},    // частная ферма
	{1919.4358,2304.0698,15.5697,	46},   // военкомат
	{1836.5201,2527.4819,22.0910,	30},   // Пожарка
	{764.6557,661.2494,13.7813,	 63},      // Метрополитен Спавн
	{191.4641,790.6199,12.1738,	 63},      // Метрополитен Центральный
	{299.3504,1720.5477,12.1484, 63},      // Метрополитен Больничная
	{35.1645,322.9391,11.4756,	 63},      // Метрополитен Арзамас-Сити
	{92.0683,1414.3101,21.8453,  63},      // Метрополитен Союзная (ГИБДД где)
	{-366.8674,450.9858,41.1753,  63},     // Здание новое ЖД (Где СТО)
	{2761.0110,-2062.8362,24.1562, 5},     // Аэропорт
	{1995.1902,1012.2449,15.1376, 9},      //Рыбалка
	{-486.2817,3337.2917,31.0381, 11},
	{845.3048,580.8884,15.8932, 55},       // Аренда скутеров
	{1659.8859,2210.5828,14.2180, 55},     // Аренда скутеров
	{-2683.1345,182.3660,12.2663, 55},     // Аренда скутеров
	{190.7534,1464.0500,12.0100, 55},     // Аренда скутеров
	{2393.2083,-2655.3909,21.9886, 55},   // Аренда скутеров
	{402.7792,1528.3496,12.1425, 55},     // Аренда скутеров
	{2355.5598,1969.6334,15.5313, 18},     // Пейнтбол
	{2409.0798,-2140.5208,22.7276, 48},     // Школа танцев
	{1874.3699,1652.3842,16.4301, 5},     
	{-2243.63,263.239,24.5337, 55},        // Мото-Вело
	{258.6693,703.7491,11.9887, 44},
	{2344.9880,-2610.1987,21.7958, 44}
};

new g_teleport[][E_TELEPORT_STRUCT] =
{
	{"Подъем на верх", -715.6300,3390.5684,73.3708, 0, -705.6320,3382.6101,78.3308,90.1486, 0, 0},
	{"Подъем на верх", -774.5002,3390.1340,73.1064, 0, -768.3911,3378.1833,78.0562,88.5693, 0, 0},
	{"Подъем на верх", -847.2874,3370.6763,73.0889, 0, -838.5340,3377.3086,78.0014,182.2084, 0, 0},
	{"Подъем на верх", -816.2671,3333.7427,100.7640, 0, -823.6414,3344.2786,105.7040,269.4148, 0, 0},
	{"Подъем на верх", -759.1786,3309.7981,100.7294, 0, -749.6307,3298.9268,105.6840,92.0272, 0, 0},
	{"", -1755.2251,-2753.3481,12.1247, 0, -1722.0129,-2895.8247,11.3093,192.8409, 0, 0},
	{"", -1723.0443,-2892.5293,12.1253, 0, -1755.5370,-2750.5334,11.5032,15.3867, 0, 0},
	{"{FFD700}Изготовление оружия", 2223.5452,-1899.9478,18.8125, 0, -1597.8700,-638.6998,1016.4700,358.6840, 4, 7}, // вход в мастер
	{"", -1598.0111,-640.8182,1016.4700, 7, 2222.8845,-1902.5688,18.8125,177.6729, 0, 0}, // выход из мастерскую
	{"", 1094.0562,2230.1128,2.0000, 7, 391.4023,1033.5271,12.1406,353.0863, 0, 0}, // выход из наркопритона
    {"{3399FF}Здание\nТеле-радио компании", 2175.3284, -1964.6138, 19.9816, 0, -2654.5029,2695.0859,996.9453,90.9146, 1, 69}, // вход в ТРК
	{"", -2650.6201,2695.1250,996.9453, 69, 2180.8669,-1963.9637,19.9816,268.5096, 0, 0}, // выход из ТРК
	{"ФСБ России", -286.7023,576.9769,12.8447, 0, -1576.1670,-1787.6793,1000.7010,89.9036, 4, 5}, // вход фсб
    {"", -1570.4862,-1787.6084,1000.7010, 5, -286.4595,579.9131,12.5869,354.2151, 0, 0}, // выход фсб
	{"ФСБ России", -280.2910,549.9521,13.7103, 0, -1631.0012,-1792.1259,1000.7010,269.9427, 4, 5}, // вход фсб
    {"Выход к парковке\nФСБ", -1632.7521,-1792.3463,1000.7010, 5, -276.3776,549.3843,12.8291,261.3441, 0, 0}, // выход фсб
	{"Стадион", -236.8071,408.3662,14.2830, 0, -140.5103, 395.4778, 1001.0000, 95.5560, 1, 0}, // вход в Стадион
	{"", -137.6778,395.2314,1001.0000, 0, -239.3561,408.3936,14.2461,75.9723, 0, 0}, // выход из Стадиона
	{"Вход в больницу", 642.0527,1767.5646,29.6967, 0, 441.1416,1705.1367,1001.0000,90.0, 3, 5},
	{"Выход на крышу", 443.2307,1705.0769,1001.0000, 5, 419.1524,1746.1851,21.0380, 170.0000, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	{"Больница", 613.8102,1735.4990,12.7278, 0, 417.2722,1696.8584,1001.0000, 0.0, 3, 5},
	{"", 417.3105,1694.5424,1001.0000, 5, 611.6102,1733.7014,12.1678,132.0934, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
 	{"Больница", 2403.8708,-2656.5151,22.2756, 0, 417.2722,1696.8584,1001.0000, 0.0, 3, 6},
	{"", 417.2587,1694.5411,1001.0000, 6, 2403.9500,-2659.4148,21.9886,181.3546, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
    {"Штаб\n{33CC00}'Армейская'", 1121.6503,3386.5498,11.8212, 0, 317.9288,2933.6672,999.4766,0.0, 1, 22}, // вход в казарму
	{"", 317.7869,2930.5464,999.4766, 22, 1121.6578,3383.2092,11.2562,179.7450, 0, 0}, // выход из казармы
    {"Столовая\n{33CC00}'Армейская'", 1163.2189,3356.4766,11.5150, 0, 393.3072,2867.7070,999.4688,267.5214, 1, 20}, // Вход в столовую МО
	{"", 390.9559,2867.7114,999.4844, 20, 1159.5204,3356.5378,11.2484,88.5015, 0, 0}, // Выход со столовой МО
	{"Мед-пункт\n{33CC00}'Армейский'", 1162.6353,3317.6287,11.8543, 0, 428.7844,2935.0559,999.5078,88.9666, 1, 23}, // вход в мед-пункт МО
	{"", 431.6185,2935.0408,999.5078, 23, 1159.7828,3317.7939,11.2484,88.2384, 0, 0}, // Выход с мед-пунка МО          
	{"Здание\nПолицейской службы", 258.6266,1384.2072,12.1993, 0, 2480.3062,1387.5244,1000.0529,1.5600, 4, 6}, // вход МВД
	{"", 2480.2617,1385.6453,1000.0530, 6, 260.2263,1386.2427,12.1993,325.2878, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход МВД
	{"Служебный вход\nПолицейской службы", 220.4349,1374.0316,12.8589, 0, 2506.4370,1394.8589,1000.0214,359.2494, 4, 6}, // вход МВД
	{"", 2506.7078,1392.5337,1000.0214, 6, 219.8833,1372.1230,12.1993,171.4554, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход МВД
    {"Оружейный склад\nПолицейской службы", 184.0167,1341.4846,12.3980, 0, 215.3441,1489.6472,-27.6699,1.0320, 0, 0}, // вход МВД
	{"", 215.2733,1487.1434,-27.6699, 0, 184.4844,1343.5339,12.1915,351.4419, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход МВД
    {"", 367.7674,-363.7007,997.1544, 0, -4663.0029,5824.1841,15.3601,68.7087, 0, 0}, // выход c корабля
    {"", 1611.3982,1836.6576,996.5703, 2, 651.7161,1782.7631,11.9725,4.9268, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL}, // выход c гаража больницы
	{"", 1611.3982,1836.6576,996.5703, 3, 204.6779,1393.3828,12.0986,81.2486, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход c гаража полиции
 	{"МЧС", -2591.7327,2114.9451,53.8285, 0, 209.6588,-468.0640,1006.4200,2.2671, 1, 7}, // вход МЧС
	{"", 209.5155,-469.9189,1006.4200, 7, -2591.6836,2113.6514,53.4516,178.9025, 0, 0}, // выход МЧС
	{"{FFD700}Изготовление оружия\n{AFAFAF}Русская мафия", 647.5056,2188.7515,1000.9975, 4, -1597.8700,-638.6998,1016.4700,358.6840, 4, 4}, // вход в мастер
	{"", -1598.0111,-640.8182,1016.4700, 4, -2650.7688,2188.7917,1000.9975,89.8294, 4, 4}, // выход из мастерскую
	{"{FFD700}Изготовление оружия\n{AFAFAF}Японская мафия", 647.5056,2188.7515,1000.9975, 5, -1597.8700,-638.6998,1016.4700,358.6840, 4, 5}, // вход в мастер
	{"", -1598.0111,-640.8182,1016.4700, 5, -2650.7688,2188.7917,1000.9975,89.8294, 4, 5}, // выход из мастерскую
	{"{FFD700}Изготовление оружия\n{AFAFAF}Итальянская мафия", 647.5056,2188.7515,1000.9975, 6, -1597.8700,-638.6998,1016.4700,358.6840, 4, 6}, // вход в мастер
	{"", -1598.0111,-640.8182,1016.4700, 6, -2650.7688,2188.7917,1000.9975,89.8294, 4, 6}, // выход из мастерскую
	{"Вход в лабараторную", 647.5056,2188.7515,1000.9975, 4, 1093.9169,2231.8499,2.0000,358.1637, 4, 4}, // вход в лабараторную
	{"", 1094.0562,2230.1128,2.0000, 4, -2650.7688,2188.7917,1000.9975,89.8294, 4, 4}, // выход из лабараторной
	{"Вход в лабараторную", 647.5056,2188.7515,1000.9975, 5, 1093.9169,2231.8499,2.0000,358.1637, 4, 5}, // вход в лабараторную
	{"", 1094.0562,2230.1128,2.0000, 5, -2650.7688,2188.7917,1000.9975,89.8294, 4, 5}, // выход из лабараторной
	{"Вход в лабараторную", 647.5056,2188.7515,1000.9975, 6, 1093.9169,2231.8499,2.0000,358.1637, 4, 6}, // вход в лабараторную
	{"", 1094.0562,2230.1128,2.0000, 6, -2650.7688,2188.7917,1000.9975,89.8294, 4, 6}, // выход из лабараторной
	{"Школа танцев", 2409.0798,-2140.5208,22.7276, 0, 12.4959,997.4105,1201.0000,89.3819, 0, 0},
	{"Выход", 15.0843,997.8723,1201.0000, 0, 2409.0591,-2142.7949,21.9577,179.6227, 0, 0},
 	{"Правительство\nобласти", -2449.1563,1605.3594,53.1889, 0, -2500.8599,1468.4968,1080.5190, 0.8444, 5, 21}, // Правительство вход
	{"", -2500.8672,1464.9657,1080.5190, 21, -2448.0356,1603.2677,53.1889,198.7375, 0, 0}, // выход из Правительства
	{"Здание\nВоенкомата", 1919.4358,2304.0698,15.5697, 0, 1999.8728,2293.6167,1004.1991,0.7286, 4, 3}, // военкомат вход
	{"", 1999.8643,2289.6365,1004.1919, 3, 1917.9813,2303.2090,15.5697, 120.4762, 0, 0}, // военкомат выход
	{"Автошкола", 1928.9601,1930.5726,15.7747, 0, 2004.6975,-1994.6841,1001.2400,225.9155, 4, 3}, // Автошкола вход
	{"", 2002.6439,-1992.5829,1001.2400, 3, 1933.2070,1930.3019,15.6825,268.0475, 0, 0}, // Автошкола выход
	{"Завод\nПроизводственный цех", -1060.9822,2208.5635,38.0987, 0, -2876.2761,-1184.9685,1001.0525,91.2042, 5, 3},
	{"", -2873.0332,-1185.0710,1000.9978, 3, -1060.7467,2206.3586,38.0990,179.8317, 0, 0},
	{"Здание\nМЧС", -2588.1392,2129.9092,53.4093, 0, 209.7607,-467.6448,1006.4200,3.2035, 0, 0},
	{"", 209.5111,-469.8284,1006.4200, 0, -2588.1472,2131.9321,53.3988,359.3073, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Центральная\n\n{2ff82f}Вход", 191.5362,790.5955,12.1729, 0, 122.8478,812.2729,-28.3549,94.0732, 0, 0}, //
	{"{ffffff}Станция метро:\n{ffd000}Центральная\n\n{e67e22}Выход", 125.2534,812.1542,-28.0948, 0, 191.1494,794.0597,12.1494,336.5722, 0, 0}, //
	{"{ffffff}Станция метро:\n{ffd000}Арзамас-Сити\n\n{2ff82f}Вход", 35.1512,323.1042,11.4756, 0, 20.7732,329.8734,-29.5295,83.4434, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Арзамас-Сити\n\n{e67e22}Выход", 24.9715,329.7268,-28.4569, 0, 37.6065,322.5181,11.3984,272.6750, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Вокзальная\n\n{2ff82f}Вход", 764.6354,661.2277,13.7813, 0, 759.6891,687.0150,-30.6505,352.5524, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Вокзальная\n\n{e67e22}Выход", 759.4855,679.6655,-28.2264, 0, 766.7106,659.7678,13.7813,222.2045, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Союзная\n\n{2ff82f}Вход", 86.6173,1414.8229,12.0000, 0, 84.9772,1442.0500,-30.4558,88.1200, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Союзная\n\n{e67e22}Выход", 91.6638,1441.8792,-28.3050, 0, 89.2862,1414.6790,12.0000,251.0315, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Больничная\n\n{2ff82f}Вход", 299.3550,1720.5997,12.1484, 0, 304.0856,1777.4458,-30.6494,1.6625, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Больничная\n\n{e67e22}Выход", 304.0158,1770.4369,-28.4717, 0, 301.6966,1720.6052,12.1484,263.9016, 0, 0},
 	{"Центр занятости", 319.8218,509.7292,12.7935, 0, -2701.7625,1482.5397,1007.4878,88.6115, 4, 4}, // вход
	{"", -2696.6296,1482.0575,1007.4878, 4, 318.0984,510.4846,12.6060,71.6740, 0, 0}, // выход
	{"Шахта", -486.2817,3337.2917,31.0381, 0, -476.1868,2876.5601,1192.7656,270.0000, 5, 5},
    {"", -478.4785,2876.6069,1192.7656, 5, -489.2321,3337.1628,31.0381,89.3090, 0, 0},
	{"Автосалон Грузовиков", 1050.2203,-1898.3051,34.2169, 0, 1047.1001,-1895.7366,34.3527,52.0475, 0, 0},
	{"", 1049.0859,-1897.3494,34.3762, 0, 1051.8107,-1899.4839,34.2169,228.5082, 0, 0},
	{"-Аукцион-", 2261.0996,-2106.7168,21.9688, 0, -144.3936,2423.4260,1001.1406,268.5103, 4, 4}, // вход в аук
	{"", -148.2778,2447.5713,1000.6406, 4, 2258.7661,-2106.8005,21.9688,85.9992, 0, 0}, // выход из аука
    {"", 2111.8669,-2509.8372,12.5427, 0, 2097.0986,-2498.5806,-88.9766,89.6931, 0, 0}, // вход в избу 5.6
    {"", 2099.4446,-2498.5349,-88.7188, 0, 2110.1970,-2508.3384,12.3085,46.2054, 0, 0}, // выход из избы 5.6
	{"", 422.5158,566.7045,-36.6100, 5, 413.9947,574.0319,12.0102,69.0172, 0, 0},
	{"", 3239.6987,-27.5807,5.5626, 0, 994.6002,2788.6887,1001.0078,0.4047, 9, 9}, // вход в избу 6.0
    {"", 994.0612,2784.8093,1001.0078, 9, 3238.5596,-30.2463,5.3847,166.1153, 0, 0}, // выход из избы 6.0
	{"", 1000.1050,2814.3411,1001.0156, 9, -148.0164,371.9189,1000.9922,240.4661, 9, 9}, // вход в избу 6.0
    {"", -150.6926,373.3741,1000.9922, 9, 999.7380,2811.7041,1001.0156,142.2534, 9, 9}, // выход из избы 6.0
	{"", -1771.7177,2893.8884,5.9906, 0, -1769.9291,2895.1975,6.0870,272.2030, 0, 4}, // вход в черный рынок
	{"",-1770.8884,2893.8682,6.0870, 4, -1774.8552,2893.3042,5.9906,99.9111, 0, 0}, // выход черного рынока
	{"Вход в вокзал", 2536.39, -2098.86, 33.31, 0, 2518.2329, -1848.8768, 1033.8522, 176.6539, 5, 0},
	{"", 2489.37, -2052.37, 21.96, 0, 2536.5415, -1905.8928, 1033.8577, 359.4140, 5, 0},
	{"", 2573.70, -2071.06, 36.69, 0, 2570.2739, -1880.9924, 1037.1300, 83.7886, 5, 0},
	{"", 2573.92, -2077.06, 36.69, 0, 2570.5879, -1887.0703, 1037.1300, 86.3333, 5, 0},
	{"", 2567.33, -2050.08, 21.96, 0, 2519.9148, -1905.2119, 1033.8562, 1.5692, 5, 0},
	{"", 2567.38, -2047.56, 21.96, 0, 2518.8752, -1905.9431, 1033.8578, 0.1893, 5, 0},
	{"", 2489.17, -2068.01, 21.96, 0, 2492.9016, -1872.2793, 1022.3878, 268.2995, 5, 0},
	{"", 2489.17, -2061.86, 21.96, 0, 2492.8032, -1877.4390, 1022.3956, 269.8871, 5, 0},
	{"", 2490.7698, -1877.9692, 1022.3644, 0, 2486.8010, -2067.9539, 21.9619, 89.0099, 0, 0},
	{"", 2490.9844, -1871.9182, 1022.3644, 0, 2487.0222, -2052.2605, 21.9619, 87.5239, 0, 0},
	{"", 2519.1753, -1907.4106, 1033.8610, 0, 2569.4336, -2050.0759, 21.9640, 266.4095, 0, 0},
	{"", 2536.7632, -1907.8308, 1033.8619, 0, 2518.7268, -2101.2903, 33.3085, 180.3785, 0, 0},
	{"", 2519.1753, -1907.4106, 1033.8610, 0, 2569.1763, -2050.0999, 21.9640, 266.4095, 0, 0},
	{"", 2572.4863, -1887.0782, 1037.1300, 0, 2575.4353, -2077.0581, 36.6906, 269.8870, 0, 0},
	{"", 2572.3223, -1881.0242, 1037.1300, 0, 2575.3882, -2071.1028, 36.6906, 271.0777, 0, 0}
};

new g_teleport_object[MAX_PLAYERS][2];
enum E_MY_TP_STRUCT
{
	Float: Tplist_X,
	Float: Tplist_Y,
	Float: Tplist_Z
}

new g_player_my_tplist[MAX_PLAYERS][100][E_MY_TP_STRUCT];
enum
	E_TELEPORT_LIST
{
	TL_NAME[27],
	Float: TL_POS_X,
	Float: TL_POS_Y,
	Float: TL_POS_Z
};

new
	g_teleport_list[][E_TELEPORT_LIST] =
{
	{"[Созданные телепорты]", 0.0,0.0,0.0},
	{"Административная Зона", 151.1216,-2404.9978,33.2663},
	{"БУ Низкий", 2202.3909, 2330.8015, 13.5938},
	{"БУ Средний", 2731.6252, -2462.4983, 21.6890},
	{"БУ Высокий", -1908.2120, 1871.5919, 175.2189},
	{"Элитный Автосалон", 1865.2200,2831.0110,12.0000},
	{"Средний Автосалон", 397.2827,805.9502,22.7497},
	{"Низкий Автосалон", 2599.4080,-620.5815,20.1871},
	{"Автосалон Грузовиков", 1037.9894,-1884.0105,46.5012},
	{"Контейнеры", -1916.2634,2932.2954,20.7050},
	{"Свалка", -2791.1084,-1274.8649,10.1493},
	{"Киоски", 3206.4382,-35.0639,5.4292},
	{"Барвиха", 3611.332,3988.607,8.523},
	{"Арзамас", 4.1080,324.8198,128.4940},
	{"Батырево", 1815.7345,2095.7419,28.6964},
	{"Лыткарино", -2676.8267,142.2164,28.9613},
	{"Южный", 2260.5208,-1820.6755,38.4406},
	{"Эдово", -2443.2261,2716.2600,98.7649},
	{"Бусаево", -248.1266,-1137.2886,41.0300},
	{"Майями", -3982.6299,-5516.6416,147.4668},
	{"Армия", 1287.8602,3273.2207,11.2685},
	{"Больница г.Арзамас", 611.7523,1733.6365,12.1678},
	{"ТРК", 2166.7607,-1956.2625,78.6144},
	{"Правительство", -2445.4399,1542.9020,65.1527},
	{"ФСБ", -448.9867,779.3796,14.8147},
	{"МВД", 264.6335,1398.2573,12.1993},
	{"ФСИН", -1791.6138,-2647.4792,10.5418},
	{"Русская Мафия", 1951.8390,-7.6525,6.6286},
	{"Итальянская Мафия", -3218.9988,833.3849,6.6309},
	{"Японская Мафия", 4029.8792,3801.1677,6.6343}
};

new const
	g_ferm_car[8][E_FER_STRUCT] =
{
	{1672.328,647.981,15.979,91.8827},
	{1672.319,645.007,16.034,91.8827},
	{1672.378,642.054,15.978,91.8827},
	{1672.378,639.084,15.979,91.8827},
	{1672.407,635.879,15.980,91.8827},
	{1672.407,632.879,15.980,91.8827},
	{1672.407,629.879,15.980,91.8827},
	{1672.407,626.500,15.980,91.8827}
};
new const g_atm[11][E_ATM_STRUCT] =
{
	{-510.197000, 1506.330000, 1000.57, 90.00000},
    {2261.110000, -2104.73000, 21.5887, -90.0000},
    {-1037.23960, 681.1439000, 1001.00, 359.5648},
    {-2468.87012, 2843.419920, 37.2900, -90.0000},
    {-2576.60010, 2875.949950, 37.2800, 0.000000},
    {432.6860000, 1564.970000, 11.7590, -4.00000},
    {1704.420000, -2204.11000, 1000.63, -89.3000}, //Прачечная
    {-1593.46000, 1009.390000, 1000.78, 89.90000},
    {222.6590000, -327.687000, 1010.60, -87.2001},
	{2288.630000, 1808.180000, 1000.56, 0.000000},
	{-1634.47000, -2507.73000, 7.39400, 34.90000}
};
new const atm_item_sum[7] = {1000000, 2000000, 5000000, 10000000, 20000000, 50000000, 100000000};
new g_bank_account[MAX_PLAYERS][MAX_BANK_ACCOUNTS][E_BANK_ACCOUNT_STRUCT];
new g_player_bank_transfer[MAX_PLAYERS][E_BANK_TRANSFER_STRUCT];
new g_player_listitem[MAX_PLAYERS][32];
new g_listitem_values[sizeof(g_player_listitem[])] = {0, ...};
new g_player_listitem_use[MAX_PLAYERS] = {-1, ...};
new g_player_offer[MAX_PLAYERS][E_PLAYER_OFFER_STURCT];
new const
	g_offer_default_values[E_PLAYER_OFFER_STURCT] =
{
	INVALID_PLAYER_ID,	// отправленое предложение игроку
	INVALID_PLAYER_ID, 	// входящее предложение от игрока
	OFFER_TYPE_NONE, 	// входящее предложение
	{-1, -1} 			// значение входящего предложения
};
new g_player_phone_call[MAX_PLAYERS][E_PHONE_CALL_STRUCT];
new
	g_phone_call_default_values[E_PHONE_CALL_STRUCT] =
{
	INVALID_PLAYER_ID,
	INVALID_PLAYER_ID,
	-1,
	true
};

new g_player_phone_book[MAX_PLAYERS][MAX_PHONE_BOOK_CONTACTS][E_PHONE_BOOK_STRUCT];
new g_player_phone_book_contacts[MAX_PLAYERS] = {0, ...};
new g_player_phone_book_select_cont[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new bool: g_player_phone_book_init[MAX_PLAYERS] = {false, ...};
new bool: g_admin_ears;
new g_player_flood[MAX_PLAYERS][E_ANTI_FLOOD_STRUCT];
new const
	g_flood_default_values[E_ANTI_FLOOD_STRUCT] =
{
	0,
	0
};
new g_bus_routes[4][E_BUS_ROUTE_STRUCT] =
{
	{"Арзамас — Завод",			0, 0},
	{"Арзамас — Шахта", 		0, 0},
	{"Арзамас — Лесопилка", 	0, 0},
	{"Междугородный",			0, 0}
};

new g_bus_routes_list[40 * (sizeof g_bus_routes) + 1];
new g_bus_route[sizeof g_bus_routes][128][E_BUS_ROUTE_STEP_STRUCT] =
{
	{ // Арзамас — Завод
		{787.6204,804.5402,11.8934, false},
		{724.3348,713.3471,11.7829, false},
		{691.1030,637.3086,11.7828, false},
		{622.0711,651.7424,11.7828, false},
		{400.7014,736.5615,11.7831, false},
		{249.6619,794.5271,11.7841, false},
		{163.0936,832.4301,11.7838, true},// Остановка
		{42.6301,871.1443,11.7829, false},
		{-77.8160,917.4790,11.7829, false},
		{-204.1598,964.9418,11.7848, false},
		{-343.2373,973.5761,11.7839, false},
		{-390.6439,846.2943,11.8961, false},
		{-408.9617,808.6368,12.1174, true},// Остановка
		{-406.2939,787.4290,12.0820, false},
		{-391.1823,729.3298,11.8948, false},
		{-389.8792,644.6184,11.8960, false},
		{-355.6494,572.9922,11.8817, false},
		{-250.2912,588.5584,11.7841, true},// Остановка
		{-97.1469,569.7258,11.7840, false},
		{6.2536,556.0126,11.7840, false},
		{98.9511,537.4021,11.7838, false},
		{92.3793,497.9005,11.1935, false},
		{39.2526,418.8616,10.1852, true},
		{47.2558,414.4609,9.9196, false},
		{155.3781,629.0843,11.7834, false},
		{233.4100,826.7098,11.7840, false},
		{288.0436,1144.9545,11.7831, false},
		{307.6457,1324.3252,14.8080, false},
		{324.8557,1478.9349,11.7832, false},
		{363.8856,1496.0903,11.7843, false},
		{437.7745,1528.2180,11.7581, false},
		{446.3716,1543.8534,11.7918, true}, // Остановка
		{422.2758,1563.5140,11.7848, false},
		{324.7205,1562.1366,11.7830, false},
		{291.9336,1209.1523,11.8490, false},
		{333.7977,1165.7565,12.2819, false},
		{492.6078,1257.7622,4.6877, false},
		{635.1933,1226.4041,4.6816, false},
		{717.0113,1222.6543,4.6806, false},
		{929.4216,1096.1611,7.3993, false},
		{840.9348,963.0351,9.2974, false},
		{769.3385,827.2700,11.7803, false},
		{803.8547,790.4081,11.8690, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Военный завод
		{787.6204,804.5402,11.8934, false},
		{724.3348,713.3471,11.7829, false},
		{691.1030,637.3086,11.7828, false},
		{622.0711,651.7424,11.7828, false},
		{400.7014,736.5615,11.7831, false},
		{249.6619,794.5271,11.7841, false},
		{163.0936,832.4301,11.7838, true},// Остановка
		{42.6301,871.1443,11.7829, false},
		{-77.8160,917.4790,11.7829, false},
		{-204.1598,964.9418,11.7848, false},
		{-343.2373,973.5761,11.7839, false},
		{-390.6439,846.2943,11.8961, false},
		{-408.9617,808.6368,12.1174, true},// Остановка
		{-406.2939,787.4290,12.0820, false},
		{-391.1823,729.3298,11.8948, false},
		{-389.8792,644.6184,11.8960, false},
		{-355.6494,572.9922,11.8817, false},
		{-250.2912,588.5584,11.7841, true},// Остановка
		{-97.1469,569.7258,11.7840, false},
		{6.2536,556.0126,11.7840, false},
		{98.9511,537.4021,11.7838, false},
		{92.3793,497.9005,11.1935, false},
		{39.2526,418.8616,10.1852, true},
		{47.2558,414.4609,9.9196, false},
		{155.3781,629.0843,11.7834, false},
		{233.4100,826.7098,11.7840, false},
		{288.0436,1144.9545,11.7831, false},
		{307.6457,1324.3252,14.8080, false},
		{324.8557,1478.9349,11.7832, false},
		{363.8856,1496.0903,11.7843, false},
		{437.7745,1528.2180,11.7581, false},
		{446.3716,1543.8534,11.7918, true}, // Остановка
		{422.2758,1563.5140,11.7848, false},
		{324.7205,1562.1366,11.7830, false},
		{291.9336,1209.1523,11.8490, false},
		{333.7977,1165.7565,12.2819, false},
		{492.6078,1257.7622,4.6877, false},
		{635.1933,1226.4041,4.6816, false},
		{717.0113,1222.6543,4.6806, false},
		{929.4216,1096.1611,7.3993, false},
		{840.9348,963.0351,9.2974, false},
		{769.3385,827.2700,11.7803, false},
		{803.8547,790.4081,11.8690, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Товарный порт
			{787.6204,804.5402,11.8934, false},
		{724.3348,713.3471,11.7829, false},
		{691.1030,637.3086,11.7828, false},
		{622.0711,651.7424,11.7828, false},
		{400.7014,736.5615,11.7831, false},
		{249.6619,794.5271,11.7841, false},
		{163.0936,832.4301,11.7838, true},// Остановка
		{42.6301,871.1443,11.7829, false},
		{-77.8160,917.4790,11.7829, false},
		{-204.1598,964.9418,11.7848, false},
		{-343.2373,973.5761,11.7839, false},
		{-390.6439,846.2943,11.8961, false},
		{-408.9617,808.6368,12.1174, true},// Остановка
		{-406.2939,787.4290,12.0820, false},
		{-391.1823,729.3298,11.8948, false},
		{-389.8792,644.6184,11.8960, false},
		{-355.6494,572.9922,11.8817, false},
		{-250.2912,588.5584,11.7841, true},// Остановка
		{-97.1469,569.7258,11.7840, false},
		{6.2536,556.0126,11.7840, false},
		{98.9511,537.4021,11.7838, false},
		{92.3793,497.9005,11.1935, false},
		{39.2526,418.8616,10.1852, true},
		{47.2558,414.4609,9.9196, false},
		{155.3781,629.0843,11.7834, false},
		{233.4100,826.7098,11.7840, false},
		{288.0436,1144.9545,11.7831, false},
		{307.6457,1324.3252,14.8080, false},
		{324.8557,1478.9349,11.7832, false},
		{363.8856,1496.0903,11.7843, false},
		{437.7745,1528.2180,11.7581, false},
		{446.3716,1543.8534,11.7918, true}, // Остановка
		{422.2758,1563.5140,11.7848, false},
		{324.7205,1562.1366,11.7830, false},
		{291.9336,1209.1523,11.8490, false},
		{333.7977,1165.7565,12.2819, false},
		{492.6078,1257.7622,4.6877, false},
		{635.1933,1226.4041,4.6816, false},
		{717.0113,1222.6543,4.6806, false},
		{929.4216,1096.1611,7.3993, false},
		{840.9348,963.0351,9.2974, false},
		{769.3385,827.2700,11.7803, false},
		{803.8547,790.4081,11.8690, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Автошкола
		{787.6204,804.5402,11.8934, false},
		{724.3348,713.3471,11.7829, false},
		{691.1030,637.3086,11.7828, false},
		{622.0711,651.7424,11.7828, false},
		{400.7014,736.5615,11.7831, false},
		{249.6619,794.5271,11.7841, false},
		{163.0936,832.4301,11.7838, true},// Остановка
		{42.6301,871.1443,11.7829, false},
		{-77.8160,917.4790,11.7829, false},
		{-204.1598,964.9418,11.7848, false},
		{-343.2373,973.5761,11.7839, false},
		{-390.6439,846.2943,11.8961, false},
		{-408.9617,808.6368,12.1174, true},// Остановка
		{-406.2939,787.4290,12.0820, false},
		{-391.1823,729.3298,11.8948, false},
		{-389.8792,644.6184,11.8960, false},
		{-355.6494,572.9922,11.8817, false},
		{-250.2912,588.5584,11.7841, true},// Остановка
		{-97.1469,569.7258,11.7840, false},
		{6.2536,556.0126,11.7840, false},
		{98.9511,537.4021,11.7838, false},
		{92.3793,497.9005,11.1935, false},
		{39.2526,418.8616,10.1852, true},
		{47.2558,414.4609,9.9196, false},
		{155.3781,629.0843,11.7834, false},
		{233.4100,826.7098,11.7840, false},
		{288.0436,1144.9545,11.7831, false},
		{307.6457,1324.3252,14.8080, false},
		{324.8557,1478.9349,11.7832, false},
		{363.8856,1496.0903,11.7843, false},
		{437.7745,1528.2180,11.7581, false},
		{446.3716,1543.8534,11.7918, true}, // Остановка
		{422.2758,1563.5140,11.7848, false},
		{324.7205,1562.1366,11.7830, false},
		{291.9336,1209.1523,11.8490, false},
		{333.7977,1165.7565,12.2819, false},
		{492.6078,1257.7622,4.6877, false},
		{635.1933,1226.4041,4.6816, false},
		{717.0113,1222.6543,4.6806, false},
		{929.4216,1096.1611,7.3993, false},
		{840.9348,963.0351,9.2974, false},
		{769.3385,827.2700,11.7803, false},
		{803.8547,790.4081,11.8690, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	}
};

new g_temp_jobs[6][E_TEMP_JOB_STRUCT] =
{
	{-474.9881,2873.9221,1192.7656, 	75000,	 	{16, 15582}},  	// шахтер
	{-1093.0382,2166.2014,38.0644, 	    300000,	 	{16, 198}}, 	// завод (служба доставки)
	{-2950.0012,-1186.8716,1000.9978, 	500000,  	{259, 15541}},  // завод
    {1833.3129,2259.4583,15.2718,		100000, 	{149, 15580}},	// инкасатор 
	{429.7691,-2444.4690,34.9269, 		500000,  	{158, 15580}},	// лесоруб
	{1614.2493, 654.5156, 16.0372,	    650000,  	{161, 198}}    // ферма
};

new const
	Float: miner_job_load_pos[13][3] = // позиции загрузки (шахтер)
{
    {-773.7363, 1202.9187, 3011.3450},
    {-770.5228, 1193.9725, 3011.3579},
    {-758.0850, 1183.2987, 3011.3269},
    {-744.2402, 1191.8135, 3011.3516},
    {-757.5181, 1198.3695, 3011.3398},
    {-747.2653, 1216.1454, 3011.3459},
    {-753.3427, 1218.5532, 3011.3315},
    {-747.3553, 1240.3322, 3011.3530},
    {-739.8178, 1245.4788, 3011.3420},
    {-748.3314, 1251.8119, 3011.3545},
    {-765.3642, 1226.7811, 3011.3264},
    {-769.1305, 1213.0474, 3011.3181},
    {-778.7079, 1216.6088, 3011.3789}
};

new miner_job_load_cp[sizeof miner_job_load_pos] = {-1, ...};
new miner_carriage[1][E_MINER_CARRIAGE_STRUCT] =
{
    {-846.4298, 1211.0444, 3011.6699, -1012.9698, 1211.0444, 3011.6699, false, 0, -1}
};
new miner_job_area; 

new Text3D: factory_store_label[2];
new factory_job_area;
new factory_put_zone;
new
    Float: factory_take_metall_pos[4][3] =
{
    {-2925.4326,-1171.3757,1000.9978},
    {-2934.4175,-1171.2388,1000.9978},
    {-2936.0869,-1204.9742,1000.9978},
    {-2926.8286,-1204.9141,1000.9978}
};
new factory_desk[18][E_FACTORY_DESK_STRUCT];
new
     Float: factory_desks[18][3] =
{
    {-2883.4763,-1188.6482,1000.9978},
    {-2890.3918,-1188.6483,1000.9978},
    {-2897.3613,-1188.6471,1001.0041},
    {-2904.3240,-1188.6459,1000.9978},
    {-2910.6943,-1188.6481,1000.9978},
    {-2917.5061,-1188.6458,1000.9978},
    {-2923.5498,-1188.6460,1000.9978},
    {-2930.1785,-1188.6456,1000.9978},
    {-2937.8408,-1188.6481,1000.9978},
    {-2937.8738,-1193.5781,1001.0525},
    {-2930.8865,-1193.5785,1001.0525},
    {-2923.9111,-1193.5784,1001.0525},
    {-2917.0010,-1193.5803,1001.0525},
    {-2910.7185,-1193.5814,1001.0525},
    {-2903.8745,-1193.5807,1001.0525},
    {-2897.8335,-1193.5790,1001.0525},
    {-2891.2339,-1193.5784,1001.0525},
    {-2883.4976,-1193.5789,1001.0525}
};

new const
	Float: lumberjack_job_chop_cp[14][2] =
{
	{376.4885,-2433.8342},
	{392.9308,-2447.9985},
	{383.0653,-2408.5261},
	{354.9216,-2440.9980},
	{357.1012,-2455.7456},
	{377.1790,-2468.5510},
	{366.8929,-2481.3188},
	{341.1831,-2466.4055},
	{357.8873,-2392.9934},
	{360.9946,-2391.6401},
	{381.0758,-2378.0637},
	{381.6475,-2368.4766},
	{367.8658,-2360.3906},
	{378.7424,-2354.0344}
};

new const
	Float: fermer_job_chop_cp[20][3] =
{
	{1640.3947,520.7092,15.7235},
	{1625.7362,503.4082,15.7235},
	{1605.3503,511.7393,15.7235},
	{1586.8341,498.8627,15.7235},
	{1573.7848,506.3951,15.7235},
	{1555.9869,495.1777,15.7235},
	{1540.7755,508.5947,15.7235},
	{1535.1112,519.4781,15.7235},
	{1550.8265,529.8506,15.7235},
	{1567.1196,532.4730,15.7235},
	{1568.5593,492.6431,15.7235},
	{1585.0281,492.4322,15.7235},
	{1597.2251,492.3761,15.7235},
	{1610.6942,492.3148,15.7235},
	{1626.8561,492.4362,15.7235},
	{1638.4661,492.5732,15.7235},
	{1652.7197,492.2384,15.7235},
	{1653.2321,502.9161,15.7235},
	{1644.2767,507.9686,15.7235},
	{1650.5563,516.0308,15.7235}
};

new Cache: charity_cache_data; 	// кэш пожертвований
new g_last_pay_day_time; 		// время последнего пейдея
new g_last_m_timer_time;		// время последнего 1-мин таймера

new const
	numeric_name[7][11] =
{
	"первого",
	"второго",
	"третьего",
	"четвертого",
	"пятого",
	"шестого",
	"седьмого"
};

new const
	job_name[6][18] =
{
	"Безработный",
	"Водитель автобуса",
	"Таксист",
	"Автомеханик",
	"Дальнобойщик",
	"Пожарный"
};

new const
	month_name[12][8 + 1] =
{
	"января",
	"февраля",
	"марта",
	"апреля",
	"мая",
	"июня",
	"июля",
	"августа",
	"сентября",
	"октября",
	"ноября",
	"декабря"
};
new const
	day_name[7][12] =
{
	"Понедельник",
	"Вторник",
	"Среда",
	"Четверг",
	"Пятница",
	"Суббота",
	"Воскресенье"
};

new join_to_job_CP; // прием на работу
new garage_elit_CP;
new army_ammo_CP; // взятие патронов со склада воинской части
new yz_bil_CP;
new mia_bil_CP;
new samolet_CP;
new chat_message[5][128 + 1];
new const
	Float: spawn_pos_data[9][4] = // позиции спавнов
{
	{450.9677,1562.2775,12.1943,177.4893}, // Арзамас-Старый возле Больницы
	{1649.4924,2189.7305,14.3863,0.0132}, // Батырево-Вокзал
	{857.7073,591.9888,15.8697,85.6262}, // Арзамас Новый
	{841.0414,592.4253,15.8857,89.7252}, // Арзамас Новый на улице
	{-2666.0386,142.1852,12.3876,268.8190}, // Лыткарино
	{-2465.2610,2840.8096,38.4074,90.0000}, // Эдово
	{-2469.5178,2830.0220,37.7199,90.0000}, // Эдово ещё
	{-2457.7319,2841.0525,38.4074,270.9400}, // Эдово ещё
	{2481.5686,-2056.6733,21.9619,95.2267} // Южный
};

stock GetSkillBar(amount)
{
	new tmp_bar[101];
	if(!amount) return tmp_bar;
 	for(new i = 0; i < amount; i++)
		strcat(tmp_bar, "|");
 	return tmp_bar;
}

stock ShowPlayerSkills(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;
	string_dialog[0] = EOS;
	format
	(
	    string_dialog,
	    sizeof(string_dialog),
	    "Сила\t\t%d%s\t%s\n\
	    {99ff66}\
		Colt 45\t\t%d%s\t%s\n\
		SD Pistol\t%d%s\t%s\n\
	    Desert Eagle\t%d%s\t%s\n\
	    Shotgun\t%d%s\t%s\n\
	    MP5\t\t%d%s\t%s\n\
	    AK47\t\t%d%s\t%s\n\
	    M4\t\t%d%s\t%s\n\
	    Sniper Rifle\t%d%s\t%s\n\
		Sawnoff\t%d%s\t%s\n\
		Combat SG\t%d%s\t%s\n\
		Micro Uzi\t%d%s\t%s\
	    ",
	    GetPlayerData(playerid, P_POWER), "%",
	    GetSkillBar(GetPlayerData(playerid, P_POWER)),
	    GetPlayerData(playerid, P_SKILL_COLT), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COLT)),
		GetPlayerData(playerid, P_SKILL_SDPISTOL), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SDPISTOL)),
		GetPlayerData(playerid, P_SKILL_DEAGLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_DEAGLE)),
		GetPlayerData(playerid, P_SKILL_SHOTGUN), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SHOTGUN)),
		GetPlayerData(playerid, P_SKILL_MP5), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MP5)),
		GetPlayerData(playerid, P_SKILL_AK47), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_AK47)),
		GetPlayerData(playerid, P_SKILL_M4), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_M4)),
		GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE)),
		GetPlayerData(playerid, P_SKILL_SAWNOFF), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SAWNOFF)),
		GetPlayerData(playerid, P_SKILL_COMBAT_SG), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COMBAT_SG)),
		GetPlayerData(playerid, P_SKILL_MICRO_UZI), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MICRO_UZI))
	);
	Dialog(to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Навыки владения оружием", string_dialog, "Закрыть", "");
	return 1;
}

stock GetPlayerSkillAmount(playerid, skill_index)
{
	new amount;
	switch(skill_index)
	{
		case 0: amount = GetPlayerData(playerid, P_POWER);
		case 1: amount = GetPlayerData(playerid, P_SKILL_COLT);
		case 2: amount = GetPlayerData(playerid, P_SKILL_SDPISTOL);
		case 3: amount = GetPlayerData(playerid, P_SKILL_DEAGLE);
		case 4: amount = GetPlayerData(playerid, P_SKILL_SHOTGUN);
		case 5: amount = GetPlayerData(playerid, P_SKILL_MP5);
		case 6: amount = GetPlayerData(playerid, P_SKILL_AK47);
		case 7: amount = GetPlayerData(playerid, P_SKILL_M4);
		case 8: amount = GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE);
		case 9: amount = GetPlayerData(playerid, P_SKILL_SAWNOFF);
		case 10: amount = GetPlayerData(playerid, P_SKILL_COMBAT_SG);
		case 11: amount = GetPlayerData(playerid, P_SKILL_MICRO_UZI);
	}
	return amount;
}

stock SetPlayerSkillAmount(playerid, skill_index, amount)
{
	switch(skill_index)
	{
		case 0: SetPlayerData(playerid, P_POWER, amount);
		case 1: SetPlayerData(playerid, P_SKILL_COLT, amount);
		case 2: SetPlayerData(playerid, P_SKILL_SDPISTOL, amount);
		case 3: SetPlayerData(playerid, P_SKILL_DEAGLE, amount);
		case 4: SetPlayerData(playerid, P_SKILL_SHOTGUN, amount);
		case 5: SetPlayerData(playerid, P_SKILL_MP5, amount);
		case 6: SetPlayerData(playerid, P_SKILL_AK47, amount);
		case 7: SetPlayerData(playerid, P_SKILL_M4, amount);
		case 8: SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, amount);
		case 9: SetPlayerData(playerid, P_SKILL_SAWNOFF, amount);
		case 10: SetPlayerData(playerid, P_SKILL_COMBAT_SG, amount);
		case 11: SetPlayerData(playerid, P_SKILL_MICRO_UZI, amount);
	}
	return 1;
}

stock ShowTeleportList(playerid)
{
	new list_text[34 * (sizeof g_teleport_list)];
	new dest[36];
	for(new i; i < sizeof g_teleport_list; i ++)
	{
		if(i == 0)
		{
			format(dest, sizeof dest, "%s\n", GetTeleportListData(i, TL_NAME));
		}
		else
		{
			format(dest, sizeof dest, "%d. %s\n",i, GetTeleportListData(i, TL_NAME));
		}
		strcat(list_text, dest);
	}
	Dialog(playerid, DIALOG_TELEPORT_LIST, DIALOG_STYLE_LIST, "{FFD83D}Список глобальных телепортов", list_text, "Выбрать", "Закрыть");
	return 1;
}

stock CreateTicket(playerid, amount, issuer[], description[])
{
	new query[190];
	mysql_format(mysql, query, sizeof query, "INSERT INTO tickets (uid, amount, issuer, description, time) VALUES (%d, %d, '%s', '%s', %d)",
	GetPlayerAccountID(playerid), amount, issuer, description, gettime());
	mysql_query(mysql, query, false);
	return 1;
}

stock PayTicket(playerid, ticketid)
{
	new query[90],
		Cache: result,
		rows;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d LIMIT 1", ticketid);
	result = mysql_query(mysql, query, true);
	rows = cache_num_rows();
	new uid = cache_get_field_content_int(0, "uid"),
		amount = cache_get_field_content_int(0, "amount"),
		status = cache_get_field_content_int(0, "status"),
		desc[64];
	cache_get_field_content(0, "description", desc);
	cache_delete(result);
	if(!rows)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф не найден");
	if(uid != GetPlayerAccountID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф выписан не Вам");
	if(status)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф уже оплачен");
	if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), amount))
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно средств.");
	GivePlayerMoneyEx(playerid, -amount, "Оплата штрафа", true, true);
	mysql_format(mysql, query, sizeof query, "UPDATE tickets SET status=1 WHERE id=%d", ticketid);
	mysql_query(mysql, query, false);
	format(query, sizeof query, "Вы оплатили штраф №%d (%s)", ticketid, desc);
	SendClientMessage(playerid, 0x66CC33FF, query);
	return 1;
}

stock SendAdvert(playerid, message[])
{
	new ad_id = g_advert_created;
	SetAdvertData(ad_id, A_CREATOR, 	playerid);
	SetAdvertData(ad_id, A_EDIT, 		false);
	format(g_advert[ad_id][A_TEXT], 128, message);
	g_advert_created ++;
	return 1;
}

stock DeleteAdvert(ad_id)
{
	if(!(0 <= ad_id <= g_advert_created - 1)) return 0;
	SetAdvertData(ad_id, A_CREATOR, 	INVALID_PLAYER_ID);
	SetAdvertData(ad_id, A_EDIT, 		false);
	format(g_advert[ad_id][A_TEXT], 128, "");
	if(ad_id == g_advert_created - 1 && ad_id != 0)
		g_advert_created --;
	return 1;
}

stock GetAdvertIndexInQueue(ad_id)
{
	new index;
	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;
		index ++;
		if(idx != ad_id) continue;
	}
	return index;
}

stock SendLog(playerid = INVALID_PLAYER_ID, type, desc[])
{
	new fmt_log[150];
	mysql_format(mysql, fmt_log, sizeof fmt_log, "INSERT INTO action_log (acc_id, uip, type, description, time) VALUES (%d, '%s', %d, '%s', %d)",
	GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), type, desc, gettime());
	mysql_query(mysql, fmt_log, false);
	return 1;
}

stock GetTruckIndex(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 609)
		return 0;
	else if(GetVehicleModel(vehicleid) == 514 || GetVehicleModel(vehicleid) == 584)
		return 1;
	else
		return -1;
}

stock StartSpectate(playerid, for_player)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	
	SetPlayerSpectateData(playerid, S_PLAYER, for_player);
	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));
	TogglePlayerSpectating(playerid, true);
	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "client.setCursorStatus(true)");
	}
	else PlayerSpectatePlayer(playerid, for_player);
	return 1;
}

stock StopSpectate(playerid)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;
	TogglePlayerSpectating(playerid, false);
	SetPlayerSpectateData(playerid, S_PLAYER, -1);
	SetPlayerPosEx
	(
		playerid,
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE),
		GetPlayerSpectateData(playerid, S_START_INTERIOR),
		GetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD)
	);
	return 1;
}

stock UpdateSpectate(playerid, disconnect)
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerAdminEx(i) < 1) continue;
		else if(GetPlayerSpectateData(i, S_PLAYER) != playerid) continue;
		if(disconnect)
		{
			StopSpectate(i);
			GameText(i, "~r~~h~игрок отключился", 4000, 1);
		}
		else if(IsPlayerInAnyVehicle(playerid))
		{
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
		else
		{
			PlayerSpectatePlayer(i, playerid);
		}
	}
	return 1;
}

new const
	weapon_names[47][30] =
{
	"Пусто",
	"Кастет",
	"Клюшка для гольфа",
	"Дубинка",
	"Нож",
	"Бита",
	"Лопата",
	"Кий",
	"Катана",
	"Бензопила",
	"Фиолетовый дилдо",
	"Дилдо",
	"Вибратор",
	"Серебряный вибратор",
	"Цветы",
	"Топор",
	"Граната",
	"Дымовая граната",
	"Коктейль молотова",
	"Пусто",
	"Пусто",
	"Пусто",
	"Пистолет",
	"Пистолет с глушителем",
	"Пустынный орёл",
	"Дробовик",
	"Обрез",
	"Тактический дробовик",
	"Micro-Uzi",
	"MP5",
	"AK-47",
	"M4",
	"TEC-9",
	"Винтовка",
	"Снайперская винтовка",
	"РПГ",
	"Самонаводящаяся установка",
	"Огнемет",
	"Миниган",
	"C4",
	"Кнопка детонатора",
	"Баллончик",
	"Огнетушитель",
	"Фотоаппарат",
	"Очки ночного видения",
	"Очки с тепловизором",
	"Парашют"
};

enum
{
	LOG_TYPE_ADMIN_MUTE = 1,
	LOG_TYPE_ADMIN_ANSWER,
	LOG_TYPE_ADMIN_JAIL,
	LOG_TYPE_ADMIN_KICK,
	LOG_TYPE_ADMIN_WARN,
	LOG_TYPE_ADMIN_BAN,
	LOG_TYPE_ADMIN_SETADMIN,
	LOG_TYPE_ADMIN_SETLEADER,
	LOG_TYPE_ADMIN_MSG,
	LOG_TYPE_SUPERADMIN_ACTION
}

new
	g_doubling[4] =
{
	1, 5, 1
};
enum
{
	DOUBLING_DONATE = 0,
	DOUBLING_EXP,
	DOUBLING_WAGE,
}

enum
{
	TEAM_NONE = 0,
	TEAM_GOVERNMENT, // Правительство
	TEAM_ARMY, // Воинская часть
	TEAM_HOSPITAL, // Городская больница
	TEAM_RADIO, // ТРК «Ритм»
	TEAM_FSIN, // МВД
	TEAM_PPS, // МВД
    TEAM_FSB, // МЧС// FSIN
	TEAM_FAMILY, // FAMILY TEST
	TEAM_FAMILY_TEST, // FAMILY TEST
    TEAM_MAFIA_RUSSIAN = 8, // Русская мафия
	TEAM_MAFIA_JAPAN = 9, // Японская мафия
	TEAM_MAFIA_ITALIAN = 10 // Итальянская мафия
};

new const
	team_names[9][28] =
{
	"Нет",
	"Правительство",
	"Воинская часть",
	"Больница",
	"ГТРК Ритм",
	"МВД",
	"Русская мафия",
	"Японская мафия",
	"Итальянская мафия"
};

new const
	team_colors[12] = // цвета
{
	0xFFFFFF11, // Гражданин / безработный
	0xCCFF00FF, // Правительство
	0x996633FF, // Воинская часть
	0xFF6666FF, // Больница
	0xFF6600FF, // ГТРК «Ритм»
	0x0000FFFF, // ФСИН
	0x0000FFFF, // МВД
	0x009999FF, // МЧС
	0xAFAFAFFF, // ФБР
	0x009900FF, // Русская мафия
	0x6666FFFF, // Японская мафия
	0xFFCD00FF  // Итальянская мафия
};

new const
	team_subdivision_name[4][32] =
{
	"Нет",
	"ФСИН",
	"МВД",
	"ФСБ"
};

enum
	E_ORG_DATA
{
	O_NAME[32],
	O_SKINS[12],
	O_WOMEN_SKIN,
	Float: O_SPAWN[4],
	Float: O_REPOSITORY_POS[3],
	O_SPAWN_INT,
	O_SPAWN_VW
};

new
	g_organization[10][E_ORG_DATA] =
{
 	{"Правительство",							{164, 165, 57, 208, 147, 227, 187, 187, 187, 187}, 141, 		{-2519.4226,1480.6204,1080.4944,90.0}, 		{0.0, 0.0, 0.0}, 					5, 21},
	{"Мин. Обороны",							{287, 179, 30, 253, 255, 61, 61, 61, 61,  61}, 191, 	{343.9309,2935.2080,999.4844,89.2135}, 	    {248.9328,2867.2319,7.4449}, 	1, 22}, // 363.3209,2962.0662,1.7700
	{"Больница",								{15384, 15381, 15387, 276, 15386, 15385, 15383, 276, 15388,   15382},	91, 	{418.9713,1710.7025,1001.0000,273.5817}, 		{0.0, 0.0, 0.0}, 					3, 5},
 	{"ТРК «Ритм»",								{170, 188, 188, 171, 189, 217, 217, 217, 59,   57},	172, 	{-2719.4170,2727.4170,996.9453,0.0}, 	{0.0, 0.0, 0.0}, 					1, 69},
	{"ФСИН",				    				{15404, 15403, 15401, 15400, 15402, 15405, 168, 168, 168, 168}, 15398, {-1668.1453, -2828.8369, 1004.8162, 55.3751}, {-1676.8533, -2843.2078, 1004.8162}, 4, 5},
	{"Отдел полиции №2 (МВД)",					{15321, 15323, 15325, 15332, 15334, 15335, 148, 15343, 15344, 15340, 15351, 15330}, 93, 	{2498.1772, 1406.4055, 1000.0214, 180.0}, 	{0.0, 0.0, 0.0}, 					4, 6},
	//{"МЧС", 									{277, 277, 277, 278, 278, 278, 278, 279, 279,  153}, 15316, 	    {209.5607,-447.5833,1006.4200,179.1997}, 	{0.0, 0.0, 0.0}, 					0, 0},
	{"ФСБ", 									{15549, 15504, 165, 15373}, 76, 	    {-1625.8083,-1785.5256,1000.7010}, 	{0.0, 0.0, 0.0}, 					4, 5},
	{"Русская мафия",							{111, 112, 15460, 15459, 125, 117, 15462, 15463, 15461, 15464},	15471, 	             {1950.0048,12.9552,8.1148,174.8495}, 		{2290.2510,-371.6559,-73.4000},     0, 0},
	{"Японская мафия",							{121, 122, 123, 15465, 15467, 15466, 15472, 15472, 15473, 15468}, 15470,	                         {4050.5374,3806.8599,7.4778,295.7402}, 	    {-2626.3762, 2912.3970, 2738.6248},	0, 0},
	{"Итальянская мафия",						{124, 126, 127, 15474, 161, 114, 15451, 15450, 15450, 163},	15458, 	                         {-3233.5601,830.0781,6.6309,269.1926}, 		{2326.1282, 405.3908, 2824.9443},	0, 0}
};
new const
	rank_names[10][10][50] =
{
	{"Водитель", "Охранник", "Начальник Охраны", "Секретарь", "Советник", "Лицензер", "Адвокат", "Депутат", "Вице-губернатор", "Губернатор"}, // Правительство области
	{"Рядовой", "Ефрейтор", "Сержант", "Прапорщик", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"}, // Воинская часть
	{"Интерн", "Фельдшер", "Участковый Врач", "Терапевт", "Проктолог", "Нарколог", "Хирург", "Заведующий отделением", "Зам.Глав.Врача", "Глав.Врач"}, // Больница
	{"Практикант", "Фотограф", "Журналист", "Корреспондент", "Ведущий", "Редактор", "Маркетолог", "Менеджер", "Продюсер", "Директор"}, // СМИ
	{"Рядовой ФСИН", "Сержант ФСИН", "Старший сержант ФСИН", "Прапорщик ФСИН", "Лейтенант ФСИН", "Капитан ФСИН", "Майор ФСИН" , "Подполковник ФСИН", "Полковник ФСИН", "Генерал ФСИН"}, // ФСИН
	{"Рядовой", "Сержант", "Старший сержант", "Прапорщик", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"}, // Отдел полиции №2 (МВД)
	{"Агент ФСБ", "Старший агент ФСБ", "Оперативник ФСБ", "Старший оперативник ФСБ", "Лейтенант ФСБ", "Капитан ФСБ", "Майор ФСБ", "Подполковник ФСБ", "Полковник ФСБ", "Генерал ФСБ"}, // ФСИН
	{"Босяк", "Шнырь", "Вышибала", "Барыга", "Бригадник", "Свояк", "Браток", "Смотрящий", "Авторитет", "Вор в законе"}, // Русская мафия
	{"Кобун", "Кайкей", "Шингиин", "Сятей", "Кёдай", "Сатейгасира", "Вакагасира", "Со-хонбучё", "Сайко-камон", "Вор в законе"}, 	// Японская мафия
	{"Новицио", "Пикиотто", "Ассосиато", "Тестато", "Солдато", "Свояк", "Браток", "Смотрящий", "Консильери", "Дон"}	// Итальянская мафия
};

new const rank_wages[7][10] =
{
	{2500000, 4000000, 6500000, 8000000, 10500000, 12000000, 14500000, 16000000, 18000000, 20000000}, // Правительство области
    {2000000, 4500000, 6500000, 8000000, 10500000, 12000000, 14500000, 16000000, 18500000, 20500000}, // Воинская часть
    {2000000, 4500000, 6500000, 8000000, 10500000, 12000000, 14500000, 16000000, 18500000, 20500000}, // Больница
    {2000000, 4000000, 6500000, 8500000, 10000000, 12500000, 14700000, 16500000, 18000000, 20000000}, // СМИ
    {2500000, 4000000, 6000000, 8543000, 10000000, 12000000, 14000000, 16500000, 18543000, 20000000}, // ФСИН
    {2500000, 4000000, 6000000, 8543000, 10000000, 12000000, 14000000, 16500000, 18543000, 20000000}, // Отдел полиции №2 (МВД)
    {2500000, 4500000, 6500000, 8000000, 10500000, 12000000, 14500000, 16000000, 18500000, 20500000}  // ФСБ
};
public: Float:PointToPoint(Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2)
{
	return floatsqroot(floatpower(floatabs(floatsub(x2,x)),2)+floatpower(floatabs(floatsub(y2,y)),2)+floatpower(floatabs(floatsub(z2,z)),2));
}
new g_carwash_player_id[MAX_PLAYERS];
new g_carwash_status[6];
new g_carwash_object[6][4];
enum G_CARWASH_POS_STRUCT
{
    G_CARWASH_ID,
    Float:G_CARWASH_X,
    Float:G_CARWASH_Y,
    Float:G_CARWASH_Z,
    Float:G_CARWASH_ANGEL
}
new g_carwash_object_pos[6][9][G_CARWASH_POS_STRUCT] =
{
    {   // Мойка Анашан
        {-1,1883.0500,-851.7705,14.8528,0.0},
        {18720, 1887.02, -850.685, 14.7136, 0.0},
        {18720, 1885.92, -849.134, 14.782, 0.0},
        {18720, 1880.82, -854.273, 14.782, 0.0},
        {18720, 1879.8, -852.505, 14.782, 0.0},
        {16231, 1883.21, -851.716, 16.312, 29.6},
        {16232, 1883.46, -851.541, 16.172, 29.3},
        {16233, 1882.73, -850.272, 16.142, 0.0},
        {16233, 1884.28, -853.019, 16.122, 0.0}
    },
    {   // Мойка Кольцевая
        {-1,516.7447, 449.4849, 12.1262,0.0},
        {18720, 513.448, 451.628, 12.039, 0.0},
        {18720, 512.754, 449.616, 12.0666, 0.0},
        {18720, 518.931, 449.519, 12.0666, 0.0},
        {18720, 518.211, 447.724, 12.0666, 0.0},
        {16231, 515.783, 449.892, 13.6366, -20.2},
        {16232, 515.877, 449.859, 13.3866, -20.8},
        {16233, 516.493, 451.464, 13.3766, 0.0},
        {16233, 515.245, 448.199, 13.3366, 0.0}
    },
    {   // Мойка Армейская
        {-1,715.2836, 2577.0464, 12.2778,0.0},
        {18720, 717.127, 2579.32, 12.2582, 0.0},
        {18720, 718.063, 2577.37, 12.2182, 0.0},
        {18720, 711.712, 2576.33, 12.2182, 0.0},
        {18720, 712.786, 2574.38, 12.2182, 0.0},
        {16231, 714.594, 2576.82, 13.5982, 29.7},
        {16232, 714.628, 2576.77, 13.4682, 31.6},
        {16233, 713.804, 2578.1, 13.5382, 0.0},
        {16233, 715.462, 2575.42, 13.5482, 0.0}
    },
    {   // Мойка Барвиха
        {-1,3998.1440,4332.0781,8.0176,0.0},
        {18720, 3996.43, 4335.38, 7.95801, 0.0},
        {18720, 3998.41, 4335.52, 7.95801, 0.0},
        {18720, 3999.95, 4328.67, 7.95801, 0.0},
        {18720, 3998.11, 4328.42, 7.95801, 0.0},
        {16231, 3998.13, 4332.49, 9.42802, -75.2},
        {16232, 3998.15, 4332.42, 9.41802, -76.6},
        {16233, 3999.65, 4332.78, 9.38802, 0.0},
        {16233, 3996.64, 4332.04, 9.38802, 0.0}
    },
    {   // Мойка У кремля
        {-1,-2567.7612, 1978.6449, 53.1044,0.0},
        {18720, -2564.94, 1975.47, 53.0449, 0.0},
        {18720, -2566.68, 1974.57, 53.0449, 0.0},
        {18720, -2568.2, 1981.27, 53.0449, 0.0},
        {18720, -2570.12, 1980.07, 53.0449, 0.0},
        {16231, -2567.62, 1978.33, 54.5193, -60.2},
        {16232, -2567.57, 1978.24, 54.4649, -62.6},
        {16233, -2566.12, 1978.98, 54.4349, 0.0},
        {16233, -2569.01, 1977.48, 54.4349, 0.0}
    },
    {   // Мойка Лыткарино
        {-1,-2600.3577,-34.3183,12.3184,0.0},
        {18720, -2601.33, -38.3194, 12.2588, 0.0},
        {18720, -2599.01, -38.5679, 12.2588, 0.0},
        {18720, -2599.47, -31.4229, 12.2588, 0.0},
        {18720, -2601.3, -31.5295, 12.2588, 0.0},
        {16231, -2600.28, -34.672, 13.7688, -90.9},
        {16232, -2600.29, -34.8114, 13.7288, 90.5001},
        {16233, -2598.7, -34.7995, 13.7288, 0.0},
        {16233, -2601.88, -34.8158, 13.7288, 0.0}
    }
};

stock CreateCarWashObject()
{
    for(new i; i < sizeof g_carwash_object_pos; i++)
    {
        CreateDynamic3DTextLabel("{FF9900}Автомойка\n{FFFFFF}Приведите в порядок свой транспорт", 0xFFFFFFFF, g_carwash_object_pos[i][0][G_CARWASH_X],g_carwash_object_pos[i][0][G_CARWASH_Y],g_carwash_object_pos[i][0][G_CARWASH_Z] + 1.5, 15.0);
        CreateDynamicObject(g_carwash_object_pos[i][5][G_CARWASH_ID], g_carwash_object_pos[i][5][G_CARWASH_X],g_carwash_object_pos[i][5][G_CARWASH_Y],g_carwash_object_pos[i][5][G_CARWASH_Z], 0.0, 0.0, g_carwash_object_pos[i][5][G_CARWASH_ANGEL]);
        CreateDynamicObject(g_carwash_object_pos[i][6][G_CARWASH_ID], g_carwash_object_pos[i][6][G_CARWASH_X],g_carwash_object_pos[i][6][G_CARWASH_Y],g_carwash_object_pos[i][6][G_CARWASH_Z], 0.0, 0.0, g_carwash_object_pos[i][6][G_CARWASH_ANGEL]);
        CreateDynamicObject(g_carwash_object_pos[i][7][G_CARWASH_ID], g_carwash_object_pos[i][7][G_CARWASH_X],g_carwash_object_pos[i][7][G_CARWASH_Y],g_carwash_object_pos[i][7][G_CARWASH_Z], 0.0, 0.0, g_carwash_object_pos[i][7][G_CARWASH_ANGEL]);
        CreateDynamicObject(g_carwash_object_pos[i][8][G_CARWASH_ID], g_carwash_object_pos[i][8][G_CARWASH_X],g_carwash_object_pos[i][8][G_CARWASH_Y],g_carwash_object_pos[i][8][G_CARWASH_Z], 0.0, 0.0, g_carwash_object_pos[i][8][G_CARWASH_ANGEL]);
    }
}

public: StopCarWash(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
    SCM(playerid, 0x6BB61BFF, "{F81414}[Автомойка] {6EF83C}Ваш транспорт вымыт.");
    new vehicleid = GetPlayerVehicleID(playerid);
    g_carwash_status[g_carwash_player_id[playerid]] = 0;
    SetVehicleData(vehicleid, V_GRYAZ, 0.0);
    DestroyObject(g_carwash_object[g_carwash_player_id[playerid]][0]);
    DestroyObject(g_carwash_object[g_carwash_player_id[playerid]][1]);
    DestroyObject(g_carwash_object[g_carwash_player_id[playerid]][2]);
    DestroyObject(g_carwash_object[g_carwash_player_id[playerid]][3]);
	TogglePlayerControllable(playerid,true);
    return 1;
}

new ACPlayerSleeping[MAX_PLAYERS char];
new ACPlayerCheckTP[MAX_PLAYERS char];
new Float:PlayerPosX[MAX_PLAYERS];
new Float:PlayerPosY[MAX_PLAYERS];
new Float:PlayerPosZ[MAX_PLAYERS];
new PlayerVehicleID[MAX_PLAYERS];
enum
{
    AC_TP_ONFOOT = 0,
    AC_TP_INCAR
}

public OnGameModeInit()
{
	print("------------------------------------------");
    print("                 artemplay AC                 ");
    print("------------------------------------------");
	#if defined ca_OnGameModeInit
		return ca_OnGameModeInit();
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnGameModeInit
    #undef OnGameModeInit
#else
    #define _ALS_OnGameModeInit
#endif
#if defined ca_OnGameModeInit
	forward ca_OnGameModeInit();
#endif
#define	OnGameModeInit ca_OnGameModeInit

//-----------------------------------[Перехват]
public OnPlayerSpawn(playerid)
{
    ACPlayerCheckTP{playerid} = ACPlayerSleeping{playerid};
    #if defined ca_OnPlayerSpawn
		return ca_OnPlayerSpawn(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerSpawn
    #undef OnPlayerSpawn
#else
    #define _ALS_OnPlayerSpawn
#endif
#if defined ca_OnPlayerSpawn
	forward ca_OnPlayerSpawn(playerid);
#endif
#define	OnPlayerSpawn ca_OnPlayerSpawn
stock ac_SetVehiclePos(vehid, Float:pos_x, Float:pos_y, Float:pos_z)
{
    foreach(Player, otherid) if(PlayerVehicleID[otherid] == vehid)
	{
		ACPlayerCheckTP{otherid} = ACPlayerSleeping{otherid};
	}
	return SetVehiclePos(vehid, pos_x, pos_y, pos_z);
}
#if defined _ALS_SetVehiclePos
    #undef SetVehiclePos
#else
    #define _ALS_SetVehiclePos
#endif
#define	SetVehiclePos ac_SetVehiclePos
stock ca_SetSpawnInfo(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
    ACPlayerCheckTP{playerid} = ACPlayerSleeping{playerid};
	return SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
}
#if defined _ALS_SetSpawnInfo
    #undef SetSpawnInfo
#else
    #define _ALS_SetSpawnInfo
#endif
#define	SetSpawnInfo ca_SetSpawnInfo
stock ca_SetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	ACPlayerCheckTP{playerid} = ACPlayerSleeping{playerid};
	PlayerPosX[playerid] = x;
	PlayerPosY[playerid] = y;
	PlayerPosZ[playerid] = z;
	return SetPlayerPos(playerid, x, y, z);
}
#if defined _ALS_SetPlayerPos
    #undef SetPlayerPos
#else
    #define _ALS_SetPlayerPos
#endif
#define	SetPlayerPos ca_SetPlayerPos
stock ca_PutPlayerInVehicle(playerid, vehid, seatid)
{
    ACPlayerCheckTP{playerid} = ACPlayerSleeping{playerid}; 
    return PutPlayerInVehicle(playerid, vehid, seatid);
}
#if defined _ALS_PutPlayerInVehicle
    #undef PutPlayerInVehicle
#else
    #define _ALS_PutPlayerInVehicle
#endif
#define	PutPlayerInVehicle ca_PutPlayerInVehicle
//---------------------------------------------------------------[Перехват end]
new platkadorogi[2];
new stationary_radars[8];
new Float: g_stationary_radars[8][3] = {
    {699.131200,181.648400,12.1928},
    {796.927100,72.6810000,13.6342},
    {902.244300,2600.59960,12.0595},
    {1041.50330,2693.76170,12.0595},
    {2739.21240,-1441.5228,23.7545},
    {2651.99610,-1554.9886,23.4025},
    {-2592.8132,-765.98210,29.8664},
    {-2602.6799,-605.00740,29.8838}
};
#include "modules/ElitRace.inc"
#include "modules/anticheat.inc"
#include "modules/MainMenu-Settings.inc"
public OnGameModeInit()
{
	PR_RegHandler(207, "OnPlayerOnfootSync", PR_EventType: PR_INCOMING_PACKET);
	for(new i; i < sizeof TrafficLight; i++)
    {
        TrafficLight[i][TR_ColorStatus] = RandomEx(0, 3);
        TrafficLight[i][TR_AreaID] = CreateDynamicSphere(TrafficLight[i][TR_POS_X], TrafficLight[i][TR_POS_Y], TrafficLight[i][TR_POS_Z], 5.0);
    }
    for(new i;i<24;i++) {
        Kall[i][0] = CreateDynamicObject(18291,KALL_POS[i][KALL_X],KALL_POS[i][KALL_Y],KALL_POS[i][KALL_Z],0.0, 0.0, -36.0);
        Kall[i][1] = i;
    }
    Kall_Lesso[0] = CreateDynamicObject(18290,-4186.431640625, 4317.2016601563, 136.71490478516, 330, 0, -36);
    Kall_Lesso[1] = 11;  Kall_Lesso[2] = 0;
    Timer_Kall[0] = 10;  Timer_Kall[1] = 20;	
    CreateActor(285,-3994.8853,4092.6680,38.8887,356.4808);
//=======Авторизация============
	CreateActor(17079,2067.4331,-2011.0673,19.1350,174.5948);
	CreateDynamicObject(18548, 2066.74, -2010.56, 18.885, 0, 0, -101.4);
	CreateDynamicObject(18549, 2066.28, -2010.08, 18.9894, -3.2, 0, 74.2);
//=======Авторизация============
    CreateDynamic3DTextLabel("{ffffff}Календарь волшебства", 0xFFFFFFFF, -3994.8853,4092.6680,38.8887 + 1.0, 6.0);	
    SetTimer("TrafficLightUpdate", 30000, true);	
	SetTimer("AddPayDayFinka", 3600000, true);	
	SetTimer("AddPayDayFinkaDonate", 3600000, true);	
	EliteRace_OnGameModeInit();
	OnCreateMetroStation();
	CreateTrash();
	new family_actor;
	family_actor = CreateActor(258, -2503.8015,1479.2994,1080.4944,140.9059);
	SetActorVirtualWorld(family_actor, 21);
	CreateDynamic3DTextLabel("{ffff00}Создание семьи", 0xFFFFFFFF, -2503.8015,1479.2994,1081.4944, 6.0);
	CreateActor(17015,-3626.3821,3229.2583,317.6395,40.4909);
	CreateDynamic3DTextLabel("{FF8800}Открыть 1 ворота\n{FFFFFF} L ALT", 0xFFFFFFFF, 1286.41,3279.45,12.8185, 6.0);
	CreateDynamic3DTextLabel("{FF8800}Открыть 2 ворота\n{FFFFFF} L ALT", 0xFFFFFFFF, 1286.39,3266.89,12.8168, 6.0);
	CreateDynamic3DTextLabel("{FF8800}Открыть 1 ворота\n{FFFFFF} L ALT", 0xFFFFFFFF, 1049.47,3267,12.6714, 6.0);
	CreateDynamic3DTextLabel("{FF8800}Открыть 2 ворота\n{FFFFFF} L ALT", 0xFFFFFFFF, 1049.44,3279.57,12.6692, 6.0);
	CreateDynamic3DTextLabel("{FFFFFF}Обменник предметов", 0xFFFFFFFF, -3626.3821,3229.2583,317.6395, 6.0);
	CreateDynamic3DTextLabel("{FF8800}Склад\n{FF8800}Денег в предприятии: {6EF83C}0 руб\n\n{FF8800}Выплата за производство г: {6EF83C}50 руб\n{FF8800}Выплата за системное производство г: {6EF83C}100 руб", 0xFFFFFFFF, 1087.5951,2243.4675,2.0000 + 0.1, 12.0);
	new autoscool_actor;
	autoscool_actor = CreateActor(208, -2508.9167,1478.8176,1080.4944,222.5378);
	SetActorVirtualWorld(autoscool_actor, 21);
	CreateDynamic3DTextLabel("{FFFFFF}Лицензер", 0xFFFFFFFF, -2508.9167,1478.8176,1080.4944 + 0.8, 6.0);
	CreateDynamic3DTextLabel("{FFAF00}Наркопритон\n{F3FF02}Западный особняк", 0xFFFFFFFF, 391.1584, 1031.3862, 12.1328 + 0.4, 6.0);
	new casino_actor[2];
	casino_actor[0] = CreateActor(141, 222.2848,-324.3180,1011.3044,119.9847);
	casino_actor[1] = CreateActor(141, 222.2848,-324.3180,1011.3044,119.9847);

	objectmp[0] = CreateObject(19128, -720.798, 3374.63, 77.2808, 0.00, 0.00, 0.00);
	objectmp[1] = CreateObject(19128, -740.068, 3374.59, 77.3011, 0.00, 0.00, 0.00);
	objectmp[2] = CreateObject(19128, -730.204, 3388.83, 77.3109, 0.00, 0.00, 0.00);
	objectmp[3] = CreateObject(19128, -747.694, 3388.26, 77.3062, 0.00, 0.00, 0.00);
	objectmp[4] = CreateObject(10383, -799.431, 3378.92, 76.4215, 0.00, 0.00, 0.00);
	objectmp[5] = CreateObject(10383, -780.188, 3381.69, 76.4562, 0.00, 0.00, 0.00);
	objectmp[6] = CreateObject(17972, -839.894, 3370.68, 77.831, 0.00, 0.00, 0.00);
	objectmp[7] = CreateObject(17974, -840.452, 3337.87, 86.0874, 0.00, 0.00, 0.00);
	objectmp[8] = CreateObject(2934, -838.201, 3340.07, 103.29, 0.00, 0.00, 0.00);
	objectmp[9] = CreateObject(17376, -762.839, 3299.45, 105.684, 0, 0, -90.1);
	objectmp[10] = CreateObject(17376, -797.291, 3300.77, 120.504, 0, 0, -90.7);
	objectmp[11] = CreateObject(17376, -806.844, 3301.12, 120.756, 0, 0, -92.5);
	SetTimer("objectmp1", 1, false);
	SetTimer("objectmpq1", 1, false);
	objectmpq[0] = CreateObject(17809, -810.382, 3348.82, 105.584, -88.2, 88, 0.00);
	objectmpq[1] = CreateObject(17809, -800.032, 3348.84, 105.561, 88.6, 86.4, 0);
	objectmpq[2] = CreateObject(19432, -782.962, 3348.89, 104.721, 0, 0, -89.1);
	objectmpq[3] = CreateObject(19432, -779.783, 3340.88, 104.718, 0, 0, -89.8);
	objectmpq[4] = CreateObject(19432, -776.575, 3348.65, 106.185, 0, 0, -55.2);
	objectmpq[5] = CreateObject(19432, -766.202, 3346.95, 107.989, 0, 0, 89.3);
	objectmpq[6] = CreateObject(19432, -758.472, 3342.38, 101.818, 0, -89.3, -90.1);

	CreateDynamic3DTextLabel("{ffb833}Кассир\n{ffffff}Подойдите для обмена фишек", 0xFFFFFFFF, 222.2848,-324.3180,1011.3044 + 0.1, 6.0);
	CreateDynamic3DTextLabel("{66CC33}Таинственый контейнер\n{ffffff}Взаимодействие: 'ALT'", 0xff9500FF, -1940.9128,2895.8516,5.9990, 4.0);
	SetActorVirtualWorld(casino_actor[0], 273);
	SetActorVirtualWorld(casino_actor[1], 274);
	SetTimer("informer", 600000, true);  
	SetTimer("DistributeRandomPrize", 10000, true); //DistributeRandomPrize

	g_pentball = CreateDynamicSphere(-1930.7145,1778.9061,60.4236, 50.0);
	g_jailSphere = CreateDynamicSphere(-1716.4701,-2801.9050,1001.4000, 250.0);
	CreatePickup(1275, 23, -1627.3270,-1786.8910,1000.7010,-1,DIALOG_FSB_O);
	CreateDynamic3DTextLabel("Взять одежду другой организации!", 0xCC6600EE, -1627.3270,-1786.8910,1000.7010 + 0.8, 5.0);
	//new actorID = CreateActor(17008, 835.7937, 645.3304, 15.8857, 125.6478);
	//ApplyActorAnimation(actorID, "BENCHPRESS", "gym_bp_celebrate", 4.0, true, 0, 1, 1, 0);
	CreateDynamicObject(11099, -2626.14, 2183.69, 994.787,   0.00000, 0.00000,0.00000);//dver v turme
    CreatePickup(353, 23, -603.0717,-639.7825,1016.4700, -1, PICKUP_ACTION_TYPE_AK3);
    CreateDynamic3DTextLabel("Сборка AK-47", 0xCC6600EE, -603.0717,-639.7825,1016.4700 + 0.8, 5.0);
    CreatePickup(353, 23, -1595.3082,-634.5688,1016.4700, -1, PICKUP_ACTION_TYPE_AK2);
    CreateDynamic3DTextLabel("Сборка Deagle", 0xCC6600EE, -1595.3082,-634.5688,1016.4700 + 0.8, 5.0);
    CreatePickup(353, 23, -1607.4114,-634.2926,1016.4700, -1, PICKUP_ACTION_TYPE_AK1);
    CreateDynamic3DTextLabel("Сборка M4", 0xCC6600EE, -1607.4114,-634.2926,1016.4700 + 0.8, 5.0);
    CreatePickup(353, 23, -1600.1956,-635.9432,1016.4700, -1, PICKUP_ACTION_TYPE_AK);
    CreateDynamic3DTextLabel("Сборка Shotgun", 0xCC6600EE, -1600.1956,-635.9432,1016.4700 + 0.8, 5.0);
    CreatePickup(1239, 23, -2692.3545,2196.3997,1000.9784, 4, PICKUP_ACTION_TYPE_BANDRUSSIA);
	CreatePickup(2969, 23, -1602.0881,-628.2050,1016.4700, -1, PICKUP_ACTION_TYPE_AKTPSKLAD);
	CreatePickup(1318, 23, 391.1498,1031.3878,12.1328, -1, PICKUP_ACTION_TYPE_PRITON);
	CreatePickup(1318, 23, -1788.6613,-2763.5493,12.12475, 0, PICKUP_ACTION_TYPE_FSIN_VHOD);
	CreatePickup(1318, 23, -1689.8936,-2837.7925,1001.4022, 5, PICKUP_ACTION_TYPE_FSIN_VIHOD);
	CreatePickup(1318, 23, -142.9258, 398.6687, 1001.0000, -1, PICKUP_ACTION_TYPE_PENT);
	CreatePickup(1318, 23, -2345.2776,190.5451,21.4445, 0); // Крафт ларек
    CreateDynamic3DTextLabel("{d9c72b}Сдать оружие на склад\n{FFFFFF}Нажмите {d9c72b}L.ALT{FFFFFF} чтобы сдать", 0xFFFFFFFF, -1602.0881,-628.2050,1016.4700 + 0.1, 7.0); // 1
    CreatePickup(353, 23, -1603.0717,-639.7825,1016.4700, -1, PICKUP_ACTION_TYPE_AK3);
    CreateDynamic3DTextLabel("Сборка AK-47", 0xCC6600EE, -1603.0717,-639.7825,1016.4700 + 0.8, 5.0);
    CreateDynamic3DTextLabel("{FFFF00}Варка наркотиков №4\n{ffffff}Нажмите л.Alt", -1, 1088.8300,2236.7720,2.0000, 4.0);
	CreateDynamic3DTextLabel("{FFFF00}Варка наркотиков №3\n{ffffff}Нажмите л.Alt", -1, 1090.5043,2236.7720,2.0000, 4.0);
	CreateDynamic3DTextLabel("{FFFF00}Варка наркотиков №2\n{ffffff}Нажмите л.Alt", -1, 1088.8397,2231.1621,2.0000, 4.0);
	CreateDynamic3DTextLabel("{FFFF00}Варка наркотиков №1\n{ffffff}Нажмите л.Alt", -1, 1091.9602,2231.1621,2.0000, 4.0);
	CreateDynamic3DTextLabel("Служебное помещение\n{91aa0e}Пилот", 0xFFFFFFFF, 2813.6897, -2036.2318, 21.3944 + 0.5, 7.0);
	CreatePickup(1275, 23, 2813.5034,-2036.3069,21.3944, -1);
	CreatePickup(1275, 23, -1672.6141,-2830.1606,1004.8162, -1);
	CreatePickup(1275, 23, 1801.4229,2507.0259,16.3863, -1, PICKUP_ACTION_TYPE_ELECT);
	CreateDynamic3DTextLabel("{1F75FE}-Аукцион-\n {FFFFFF}{FFAF00}Используйте:{FFFFFF} {FFA500}/auction", 0xCC6600FF, -137.6529,2426.3170,1001.2500, 6.5);
    CreateDynamic3DTextLabel("{ff9500}Загрузка продуктов\n{FFFFFF}активно", 0xff9500FF, -1044.0237,2203.1462,38.1194, 15.0);
	CreatePickup(19132, 23, 2559.9539,-1891.7540,21.9640,-1,-1);
	CreatePickup(19131, 23, 1820.9341,2259.5928,15.2729, -1, PICKUP_ACTION_TYPE_INKAS_ARM);
	CreateDynamic3DTextLabel("{FFA500}Гараж авторынка\n{FFA500}Посигнальте {FFFFFF}(по умолчанию L.ALT) {FFA500}для заезда", 0xFFFFFFFF, -1887.7517,1891.0359,175.9297 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{FFA500}Гараж авторынка\n{FFA500}Посигнальте {FFFFFF}(по умолчанию L.ALT) {FFA500}для заезда", 0xFFFFFFFF, 2728.8601,-2442.2361,21.8921 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{2CD0D1}Свадебная площадка{"#cW"}\n\nИспользуйте {FF5533}/wedding {"#cW"}чтобы пожениться\nИспользуйте {FF5533}/divorce {"#cW"}чтобы развестись", -1, 2965.8867,2745.7705,6.5968 + 0.2, 10.0);
    CreatePickup(1239, 23, 415.0379,1706.7762,1001.0000, -1, PICKUP_ACTION_TYPE_INFO_BOLKA);
	CreatePickup(1239, 23, -1770.0388,2891.1355,6.0870,-1,PICKUP_ACTION_BLACK_MARKET);
	CreatePickup(1239, 23, -2078.1506,-173.6383,25.8480,-1,PICKUP_JOB_MUSOR);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 740.6722,2593.2686,12.1875 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 524.7357,1216.0225,4.9021 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 524.3786,407.8583,12.0000 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, -2603.8452,-11.4564,12.1909 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 2222.0361,-1700.8455,22.0557 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 1884.8348,-2943.7678,3.8352 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 1902.7150,-884.1428,14.7064 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, -2557.9216,1946.0831,52.9992 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 3970.4331,4347.5366,7.9306 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, -2050.9451,-2013.4017,8.6395 + 0.5, 13.0);
    CreateDynamic3DTextLabel("{FF8800}Магазин антиквариата\nПродажа:\nИнвентарь -> продать", 0xFFFFFFFF, 2349.9390,-2138.3171,22.5854 + 1.0, 10.0);
    CreatePickup(1276, 23, 2349.9390,-2138.3171,22.5854,-1,-1);
    CreatePickup(19134, 23, 2847.3521,-2568.2800,4.3099, -1, PICKUP_ACTION_TYPE_SHIPM);
	CreateDynamic3DTextLabel("Покупка билетов\nв Майами", 0xCC6600EE, 2847.3521,-2568.2800,4.3099 + 0.8, 5.0);
	CreatePickup(19134, 23, -5355.2949,-4724.6738,3.0708, -1, PICKUP_ACTION_TYPE_SHIPM);
	CreateDynamic3DTextLabel("Покупка билетов\nв Россию", 0xCC6600EE, -5355.2949,-4724.6738,3.0708 + 0.8, 5.0);
	CreatePickup(19134, 23, -2627.7700,2182.0825,995.7933, 4, PICKUP_ACTION_TYPE_VIXOD_RUSSIA);
	CreatePickup(19134, 23, -2627.7700,2182.0825,995.7933, 5, PICKUP_ACTION_TYPE_VIXOD_JAPAN);
	CreatePickup(19134, 23, -2627.7700,2182.0825,995.7933, 6, PICKUP_ACTION_TYPE_VIXOD_ITALIA);
	CreateDynamic3DTextLabel("{659BEC}Выйти из подвала", 0xff0000AA, -2627.7700,2182.0825,995.7933, 4.0);
	platkadorogi[0] = CreateDynamicSphere(-711.0291,143.4278,27.9746, 12.0);
	platkadorogi[1] = CreateDynamicSphere(-975.0696,15.4151,40.0374, 12.0);
	for(new i; i < sizeof g_stationary_radars; i++)
	{
		stationary_radars[i] = CreateDynamicSphere(g_stationary_radars[i][0], g_stationary_radars[i][1], g_stationary_radars[i][2], 8.0);
	}	
	CreateActor(17060, 962.6889,-1965.2474,37.0288,311.0214);
	CreateActor(276, -1375.5135,5771.7778,75.2513,272.4825);
	CreateActor(276, -1377.1385,5845.5356,75.2045,269.4547);
	CreateActor(276, -1346.2678,5869.1133,102.2663,178.5929);
	CreateActor(276, -1267.2452,5870.1938,102.2072,91.6480);
	CreateActor(276, -1182.4801,5841.1323,71.2532,88.4111);
	CreateActor(276, -685.4864,5914.4971,69.7530,189.8229);
	CreateActor(276, -665.1837,5964.2378,69.6936,189.8236);
	CreateActor(276, -605.8196,5958.6484,69.7365,3.3100);
	CreateActor(276, -431.7410,5993.0347,106.7471,93.0809);
	CreateDynamic3DTextLabel("{F3FF02}Киоск (Вещи для крафта)\n{ffffff}Владелец: {0049FF}ООО «СВАЛКА»\n{ffffff}Реквизиты: ОГРН 1217700022396\n{6EF83C}Вход свободный", 0xFFFFFFFF, -2345.2776,190.5451,21.4445, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Барыга Виталий\n{ffffff}Автоугонщик", 0xFFFFFFFF,  962.6889,-1965.2474,37.0288, 5.0);
	CreateDynamicObject(14341, 1090.25, 2240.63, 1,   0.00000, 0.00000,0.00000); //osnova
	CreateDynamicObject(14344, 1090.34, 2233.98, 1.01,   0.00000, 0.00000,0.00000); //instr1
	CreateDynamicObject(14345, 1090.23, 2233.89, 0.97,   0.00000, 0.00000,0.00000); //instr1
	CreateDynamicObject(10879, 223.11900, -302.76999, 1010.64001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2934, -1940.74, 2892.23, 6.30898,   0.00, 0.00, -178.6); //Тайный контенер
	CreateDynamicObject(10733, -2346.6, 190.76, 20.4345,   0.00, 0.00, 76.6); //Крафт киоск
	CreateDynamicObject(18538, 1045.59, 3390.52, 10.6158,   0.00, 0.00, 0.00); //Армия стенка
	CreateDynamicObject(18507, 1661.58, 2211.59, 14.8563, 0, 0, -89.8999);
//---------------------------------------------------------------------------------------
	CreateDynamicObject(18516, 443.657, 1561.98, 12.209, 0, 0, -5.4);
	CreateDynamicObject(18516, -2472.35, 2846.54, 37.7223, 0, 0, -91.1);
	CreateDynamicObject(18507, 580.265, 1728.58, 12.6877, 0, 0, 39.6999);
	CreateDynamicObject(18507, -2668.07, 121.331, 13.0442, 0, 0, 89.4999);
	CreateDynamicObject(18516, 2578.75, -2042.04, 21.9756, 0, 0, 90);
	CreateDynamicObject(18516, 845.273, 582.756, 15.8857, 0, 0, -89.5999);
	CreateDynamicObject(19128, -725.488, 3381.59, 77.3157, 0, 0, 0);
//---------------------------------------------------------------------------------------
	CreateDynamic3DTextLabel("{56ff00}ИНФОРМАЦИЯ:\n\nПройдите прямо по спортзалу к двери, что-бы изучить стили боя.\n\nПройдите в мужскую раздевалку,чтобы переодеться.\n\nЧто-бы вернуть одежду, воспользуйтесь инвентарем.\n\nОколо ринга можно устроить спарринг - /fight\n\nЧто-бы выбрать стиль боя - /fstyle", -1, 207.2932,829.6254,1001.0000 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{56ff00}РИНГ:\n\nПройдите ко входу на ринг, что-бы позвать игрока на спарринг.\n\n", -1, 209.2534,839.0758,1001.0000 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{56ff00}РИНГ:\n\nИспользуйте /fight\n\n", -1, 216.3115,836.7546,1000.9922 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{ff0000}Покупка стилей боя", -1, 207.5137,846.7839,1001.3391, 4.0);
	CreatePickup(1275, 23, 198.1611,827.6237,1000.9922,-1, PICKUP_ACTION_TYPE_WEARSPORT);
	CreatePickup(19134, 23, -2372.1113,206.6911,22.2022, -1, PICKUP_ACTION_TYPE_BIZ_CAR_HOME);
	CreateDynamic3DTextLabel("Покупка\nдома на колёсах", 0xCC6600EE, -2372.1113,206.6911,22.2022 + 0.8, 5.0);
	CreatePickup(19134, 23, 1035.7145,-1883.5454,34.3527, -1, PICKUP_ACTION_TYPE_BIZ_CAR_GRUZ);
	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, 1035.7145,-1883.5454,34.3527 + 0.8, 5.0);
	CreateDynamic3DTextLabel("Работа\nмашиниста метро", 0x6495EDFF, -359.7038,450.0506,12.6005 + 0.7, 4.0);
    CreatePickup(1275, 23, -359.7038,450.0506,12.6005, -1, PICKUP_ACTION_TYPE_INVITE_METRO);
	fortune_wheel_object = CreateDynamicObject(10885, 214.907, -276.686, 1012.76, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(14786, 215.256, 1501.05 ,-26.1068, 0.00000, 0.00000,0.00000);
	CreatePickup(19134, 23, 2200.6851,303.9615,1028.9463, -1, PICKUP_ACTION_TYPE_BIZ_CAR_NIZ);
	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, 2200.6851,303.9615,1028.9463 + 0.8, 5.0);
	CreatePickup(19134, 23, -1996.0449,-1309.0819,1031.0000, -1, PICKUP_ACTION_TYPE_BIZ_CAR_SRED);
	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, -1996.0449,-1309.0819,1031.0000 + 0.8, 5.0);
	CreatePickup(19134, 23, 1584.9692, 2802.4504, 1014.6044, -1, PICKUP_ACTION_TYPE_BIZ_CAR_MARK);
	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, 1584.9692, 2802.4504, 1014.6044 + 0.8, 5.0);
	snoybord_cp = CreateDynamicCP(-967.2872,309.3848,198.6781, 1.9, _, _, _, 60.0);
	CreateDynamic3DTextLabel("{e67e22}Квестовый персонаж\n{ffffff}Священник", 0xff9500FF, -2482.0273,2517.2549,47.3222, 4.0);
	CreateActor(68, -2482.0273,2517.2549,46.4222,179.4082);
	CreatePickup(1239, 23, -2722.5725,-1338.7432,9.8895,-1, PICKUP_ACTION_TYPE_SVALKA);
   	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, -45.9415,925.9677,12.0000 + 0.5, 4.0);
	CreatePickup(1239, 23, -45.9415,925.9677,12.0000,-1, PICKUP_ACTION_TYPE_POPOLNENIE);
	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, 397.9555,794.8917,12.2102 + 0.5, 4.0);
	CreatePickup(1239, 23, 397.9555,794.8917,12.2102,-1, PICKUP_ACTION_TYPE_POPOLNENIE);
	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, 2645.5503,-3433.2161,3.2069 + 0.5, 4.0);
	CreatePickup(1239, 23, 2645.5503,-3433.2161,3.2069,-1, PICKUP_ACTION_TYPE_POPOLNENIE);
	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, 1860.8231,2827.2839,12.0000 + 0.5, 4.0);
	CreatePickup(1239, 23, 1860.8231,2827.2839,12.0000,-1, PICKUP_ACTION_TYPE_POPOLNENIE);
	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, 2601.3022,-626.2897,12.0825 + 0.5, 4.0);
	CreatePickup(1239, 23, 2601.3022,-626.2897,12.0825,-1, PICKUP_ACTION_TYPE_POPOLNENIE);
	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, -2242.4141,260.7904,24.5337 + 0.5, 4.0);
	CreatePickup(1239, 23, -2242.4141,260.7904,24.5337,-1, PICKUP_ACTION_TYPE_POPOLNENIE);
	CreateDynamic3DTextLabel("{FFFF00}Информация об организации\n{ffffff}Мин. внутренних дел", -1, 2475.2551,1399.7451,1000.0526 + 0.5, 4.0);
	CreatePickup(1239, 23, 2475.2551,1399.7451,1000.0526, -1, PICKUP_ACTION_TYPE_INFOMVD);
	CreateDynamic3DTextLabel("{FFFFFF}Лифт мафии", 0xFFFFFFFF, -2647.5056,2188.7515,1000.9975 + 0.1, 7.0); // 1
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 10.000.000 фишек", 0xFFFFFFFF, 208.0857,-303.2612,1012.0385 + 0.1, 7.0); // 1
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 10.000.000 фишек", 0xFFFFFFFF, 208.0874,-296.7935,1012.0684 + 0.1, 7.0); // 2
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 10.000.000 фишек", 0xFFFFFFFF, 223.0917,-296.7134,1012.0284 + 0.1, 7.0); //3
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 10.000.000 фишек", 0xFFFFFFFF, 223.3176,-302.4733,1012.0385 + 0.1, 7.0);// 4
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 10.000.000 фишек", 0xFFFFFFFF, 191.4132,-292.8013,1012.8684 + 0.1, 7.0); // 5
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 10.000.000 фишек", 0xFFFFFFFF, 201.3294,-331.8434,1012.0385 + 0.1, 7.0); // 6
	CreatePickup(1276, 23, 2349.8948,-2138.3157,22.5854, -1);
	CreatePickup(19135, 23, 169.9595,756.4844,12.1644, -1);
	CreateDynamic3DTextLabel("{d9c72b}лавка товаров из обновления!\n{FFFFFF}Используйте L-ALT для взаимодействия", 0xFFFFFFFF, 169.9595,756.4844,12.1644 + 0.1, 7.0); // 6
	CreateDynamic3DTextLabel("{DADA0B}Магазин Антиквариата\n{"#cW"}Используйте инвентарь, чтобы выгодно продавать\nполученные предметы из контейнера или со свалки\nЦены на некоторые вещи меняются ежечасно", 0xFFFF00FF, 2349.8948,-2138.3157,22.5854 + 0.3, 10.0);
	vetr1 = CreateDynamicObject(15830, 928.1540, 81.2516, 60.5637, 0.000000, 0.000000, 0.000000);
	vetr2 = CreateDynamicObject(15830, 884.04, 127.763, 60.5318, 0.000000, 0.000000, 0.000000);//2
	vetr4 = CreateDynamicObject(15830, -2059.39, 2638.64, 101.31, 0.000000, 0.000000, 0.000000);
	vetr5 = CreateDynamicObject(15830, -1994.93, 2673.58, 97.0886, 0.000000, 0.000000, 0.000000);
	vetr6 = CreateDynamicObject(15830, 2582.85, 1227.96, 64.172, 0.000000, 0.000000, 0.000000);
	vetr7 = CreateDynamicObject(15830, 2553.67, 1272.7, 61.8685, 0.000000, 0.000000, 0.000000);
	vetrlift = CreateDynamicObject(15843, -1633.41, 950.819, 110.884, 0, 0, 0);
    CreateDynamicObject(15842, -1633.39, 950.788, 110.91, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, 928.124, 84.5934, 11.1415, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, 884.051, 131.084, 11.1437, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, -2059.43, 2641.82, 51.9141, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, -1994.93, 2676.84, 47.6958, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, 2582.81, 1231.14, 14.8207, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, 2553.67, 1275.99, 12.5051, 0.000000, 0.000000, 0.000000);
	door_mz[0] = CreateDynamicObject(10434, 422.904815,1707.659667,1000.000244, 0.00,0.00,0.00);
    door_mz[1] = CreateDynamicObject(10434, 422.900177,1735.241333,1299.986328, 0.00,0.00,0.00);
    door_mz[2] = CreateDynamicObject(10434, 417.507476,1735.245117,1299.988647, 0.00,0.00,0.00);
    door_mz[3] = CreateDynamicObject(10434, 424.124816,1729.922485,1299.998291, 0.00,0.00,0.00);
	CreateDynamic3DTextLabel("{FFCC00}F", -1, 441.4,1703.6257,1001.0000 + 0.3, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 441.4,1731.1715,1301.0000 + 0.3, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 421.750396,1707.535034,1001.377685 + 0.1, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 421.615844,1735.112670,1301.399414 + 0.1, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 416.215911,1735.112670,1301.399414 + 0.1, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 422.926086,1730.010375,1301.399414 + 0.1, 5.0);
    CreateDynamicObject(10433, 441.869171,1704.578369,999.992675, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 441.869171,1705.462036,999.995239, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 414.123229,1725.398071,1300.005615, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 414.123229,1724.510375,1300.008911, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 414.138488,1696.926025,1000.012207, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 414.138488,1697.814697,1000.013549, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 441.860290,1733.056884,1300.020385, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 441.864410,1732.166015,1300.012207, 0.000000,0.000000,0.000000);
    army_ammo_CP = CreateDynamicCP(1243.0858,3223.8335,12.3937, 1.5, -1, -1, _, 7.0);
	CreatePickup(1239, 23, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2], -1);
	CreateDynamic3DTextLabel("Церковь\n\nИспользуйте {FF5533}/wedding чтобы пожениться\nИспользуйте {FF5533}/divorce чтобы развестись", -1, -1293.4110, 717.4692, 2002.0000 + 0.2, 10.0);
	CreateDynamic3DTextLabel("Покупка наркотиков", -1, 1754.4694,-973.4464,6.3359 + 0.2, 10.0);
	CreatePickup(1239, 23, 1754.4694,-973.4464,6.3359, -1, PICKUP_ACTION_TYPE_BUY_DRUGS); // PICKUP_ACTION_TYPE_TEAM_RAZDEV
	CreatePickup(1275, 23, 2498.5388,1408.0125,1000.0214, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, -2516.8591,1465.3381,1080.5034, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, 331.6048,2941.3892,999.4766, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, 421.3798,1694.9285,1001.0000, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, -2649.8096,2710.4299,996.9453, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, -1627.3636,-1781.8862,1000.7010, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, 206.2050,-450.7389,1006.4200, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, -1780.4790,-2834.1719,19.2475, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, 2392.2234,-1822.1984,32.5537, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1239,23,612.5666,1725.0234,12.1678,-1,PICKUP_ACTION_INFO_B);
	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 582.3073,1728.0310,12.1678 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,582.3073,1728.0310,12.1678,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 845.3048,580.8884,15.8932 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,845.3048,580.8884,15.8932,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, -2666.4521,122.5477,12.3833 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,-2666.4521,122.5477,12.3833,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 1659.8859,2210.5828,14.2180 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,1659.8859,2210.5828,14.2180,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 445.3655,1562.1160,12.1943 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,445.3655,1562.1160,12.1943,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 2487.24, -2049.23, 21.96 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,2487.24, -2049.23, 21.96,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 2578.99, -2040.55, 21.96 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,2578.99, -2040.55, 21.96,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, -2472.5283,2844.7231,37.7199 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,-2472.5283,2844.7231,37.7199,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
	CreateActor(141, 2965.8867,2745.7705,6.5968,144.1044); // нпс свадьба
	CreateActor(111, 1945.3853,-46.1837,6.4177,182.7155); // нпс русская мафия
	CreateDynamic3DTextLabel("{808080}Русская мафия\n{ffffff}Создание банды", 0xff9500FF, 1945.3853,-46.1837,7.4177, 4.0);
	CreateActor(124, -3180.8489,825.0446,6.4200,269.2828); // нпс итальянская мафия
	CreateDynamic3DTextLabel("{808080}Итальянская мафия\n{ffffff}Создание банды", 0xff9500FF, -3180.8489,825.0446,7.4200, 4.0);
	CreateActor(121, 4008.3857,3860.5872,8.0616,65.5433); // нпс японская мафия
	CreateDynamic3DTextLabel("{808080}Японская мафия\n{ffffff}Создание банды", 0xff9500FF, 4008.3857,3860.5872,9.0616, 4.0);
	CreateDynamic3DTextLabel("{79afe8}Каптерка\n{ffffff}Получение инструмента", 0xff9500FF, -4668.6104,5825.6763,12.2814, 15.0);
	CreateDynamic3DTextLabel("{"#cGold"}Продажа урожая с огорода\nПродажа шкуры животного", 0xFFFF00FF, 3771.1826,3877.6079,7.9300 + 0.6, 10.0);
	CreatePickup(19134, 23, 3771.1826,3877.6079,7.9300, -1);
	CreateDynamic3DTextLabel("", 0xFFFF00FF, 2482.7786,1402.9192,1000.0448 + 0.6, 10.0);
	CreatePickup(19134, 23, 2482.7786,1402.9192,1000.0448, -1, PICKUP_ACTION_TYPE_MVD);
	CreateDynamic3DTextLabel("{FF8800}Завод\n{FFFFFF}Сдача продуктов на склад", 0xFFFF00FF, -2908.6921,-1179.9351,1001.0041 + 1.0, 7.0);
	CreatePickup(1239, 23, 22.3557,348.3549,11.3672, -1, PICKUP_DM);
	CreateDynamicObject(14585, -2660.9,2189.62,1001.89, 0.00, 0.00, 93.1);   // ДВЕРЬ МАФИЯ
    CreatePickup(1240, 23, 412.2124,1730.2292,1301.0000, -1, PICKUP_ACTION_TYPE_FREE_HEAL); //А
    CreatePickup(10024, 23, -487.6182,3331.5359,31.0381, -1, PICKUP_ACTION_TYPE_FREE_EAT); // Шахта
    CreatePickup(10024, 23, 436.0983,1564.1613,12.2021, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр
    CreatePickup(10024, 23, 848.2681,596.7606,15.8857, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр
    CreatePickup(10024, 23, -2668.0198,151.9874,12.3158, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр
    CreatePickup(10024, 23, -2470.9436,2833.9607,37.7199, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр
    CreatePickup(10024, 23, 2490.1008,-2088.6753,21.9619, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр
    CreatePickup(10024, 23, 424.6284,-2443.4893,34.9269, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр
    CreatePickup(10024, 23, 1655.0183,2189.3977,14.3863, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Батырево
    CreatePickup(10024, 23, 1615.4211,658.8278,16.0372, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Ферма
	CreatePickup(10024, 23, -1631.2959,-1801.9590,1000.7010, -1, PICKUP_ACTION_TYPE_GOVS_EAT); //МВД
	CreatePickup(10024, 23, 400.0672,2870.5886,999.4688, -1, PICKUP_ACTION_TYPE_GOVS_EAT); //Армия
	CreatePickup(10024, 23, 2507.4829,1407.6005,1000.0214, -1, PICKUP_ACTION_TYPE_GOVS_EAT); //МВД
    CreatePickup(2969, 23, -324.7684,342.5574,13.1133, -1, PICKUP_ACTION_TYPE_FIX_CAR); //Арзамас-Центр
	//------------------------------------СКИЛ ТЕСТ МП-------------------------------------------------------------
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -1377.1644,5845.6147,75.2045 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -1375.3518,5771.7632,75.2513 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -1346.3937,5868.8481,102.2663 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -1267.2452,5870.1938,102.2072 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -1182.4801,5841.1323,71.2532 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -685.4864,5914.4971,69.7530 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -665.1837,5964.2378,69.6936 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -605.8196,5958.6484,69.7365 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Восполнить здоровия", 0xFFCD00FF, -431.7410,5993.0347,106.7471 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Подняться на верх", 0xFFCD00FF, -1367.5974,5777.2588,70.3331 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Подняться на верх", 0xFFCD00FF, -1341.2112,5855.7026,97.3363 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Подняться на верх", 0xFFCD00FF, -658.6159,5950.4038,64.7837 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Вход в лоберинт", 0xFFCD00FF, -1375.3518,5771.7632,75.2513 + 0.5, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Бои припасы\n{FFFFFF}L.ALT", 0xFFCD00FF, -1389.9951, 6079.3555, 80.5718 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Бои припасы\n{FFFFFF}L.ALT", 0xFFCD00FF, -1420.8037, 6068.3887, 81.0096 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Бои припасы\n{FFFFFF}L.ALT", 0xFFCD00FF, -1487.3479, 6080.0352, 82.3720 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Бои припасы\n{FFFFFF}L.ALT", 0xFFCD00FF, -1525.0974, 6067.6143, 80.6385 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Бои припасы\n{FFFFFF}L.ALT", 0xFFCD00FF, -1547.4147, 6056.1895, 80.5976 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Бои припасы\n{FFFFFF}L.ALT", 0xFFCD00FF, -1495.8475, 6125.1919, 80.7214 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Бои припасы\n{FFFFFF}L.ALT", 0xFFCD00FF, -1372.8329, 6029.9834, 81.1267 + 0.2, 10.0);
	CreateDynamic3DTextLabel("{FFAF00}Бои припасы\n{FFFFFF}L.ALT", 0xFFCD00FF, -1481.1653, 6091.2490, 80.6597 + 0.2, 10.0);
	//--------------------------------------------------------------------------------------------------------------
	CreateDynamic3DTextLabel("{33AA33}- Место для обмена -\n{FFFFFF}Используйте {FFD700}/exchange", -1, 503.3536,452.3311,1000.9922 + 0.2, 10.0);
    CreateDynamic3DTextLabel("{FF8800}Air Suspension\n{FFFFFF}Посигнальте, чтобы въехать\nв гараж для установки пневматической\nподвески транспортного средства", 0xFFFFFFFF, -397.3741,1009.9180,12.1382 + 1.0, 10.0);
    CreatePickup(19132, 23, -397.3741,1009.9180,12.1382,-1,-1);
    CreateDynamic3DTextLabel("{FF8800}Super Car\n{FFFFFF}Посигнальте, чтобы въехать\nв гараж для тюнинга мощности\n транспортного средства", 0xFFFFFFFF, 258.8138,703.6974,11.9849 + 1.0, 10.0);
    CreatePickup(19132, 23, 258.8138,703.6974,11.9849,-1,-1); //stage
    CreateDynamic3DTextLabel("{FF8800}Super Car\n{FFFFFF}Посигнальте, чтобы въехать\nв гараж для тюнинга мощности\n транспортного средства", 0xFFFFFFFF, 2346.1768,-2609.9480,21.7944 + 1.0, 10.0);
    CreatePickup(19132, 23, 2346.1768,-2609.9480,21.7944,-1,-1); //stage
    CreatePickup(1239, 23, 2707.5276,-3.6185,1060.9922, -1, PICKUP_ACTION_TYPE_SELLSIM);
	new hour;
	gettime(hour);
	SetWorldTime(hour);
	AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	SendRconCommand("ackslimit 20000");
	SendRconCommand("messageholelimit 20000");
	SendRconCommand("hostname  "SERVER_NAME_RP" | "SERVER_COUNT" | "SERVER_DEN"");
	SendRconCommand("weburl "SERVER_SITE"");
	SendRconCommand("mapname "SERVER_MAP_NAME"");
	ShowNameTags(true);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	SetNameTagDrawDistance(30.0);
	Streamer_SetVisibleItems(STREAMER_TYPE_MAP_ICON, 98);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000); // Default: 500
	Streamer_ToggleErrorCallback(true);
	Streamer_SetTickRate(40); // Default: 50
	CreateActor(28, 2885.0613,1410.4027,2.6106,269.6373); //Рыбалка
	stiliok = CreateDynamicCP(207.4784,846.7992,1001.0000, 1.0, -1, -1, _, 10.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2200.3008,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2199.3118,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2198.2979,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2197.3831,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2196.3933,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1699.8516,-2195.9128,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1700.8456,-2195.9128,1002.1298, 5.0);
	CreateDynamic3DTextLabel("{1f75fe}- Утилизация -\n {ffffff}наземного транспорта", -1, -2723.9658,-1341.3722,9.8674 + 0.2, 10.0);
	CreatePickup(19133, 23, -2723.9658,-1341.3722,9.8674,-1, PICKUP_ACTION_TYPE_SELL_CAR);
	CreateDynamic3DTextLabel("Прием на работу", 0xFFFF00FF, -2713.8264,1481.6355,1007.4878 + 1.8, 10.0);
	join_to_job_CP = CreateDynamicCP(-2713.8264,1481.6355,1007.4878, 1.5, -1, -1, _, 7.0);
	CreateDynamic3DTextLabel("Гаражный бар", 0xFFFF00FF, -1658.7354,-426.1173,1004.7665 + 1.0, 10.0);
	garage_elit_CP = CreateDynamicCP(-1658.7354,-426.1173,1004.7665, 1.5, -1, -1, _, 7.0);
	CreateDynamic3DTextLabel("{FFFFFF}Чтобы выйти из гаража, пропишите: {FF6347}/exit", 0xFFFFFFFF, 1603.3677, 1764.6927, 1097.1688 + 0.2, 4.0);
	CreateDynamic3DTextLabel("{FFFFFF}Чтобы выйти из гаража, пропишите: {FF6347}/exit", 0xFFFFFFFF, -1652.2556, -466.1541, 1001.2000 + 0.2, 4.0);
	CreateDynamic3DTextLabel("{FFFFFF}Чтобы выйти из гаража, пропишите: {FF6347}/exit", 0xFFFFFFFF, 2897.1111, 2888.8059, 1001.2000 + 0.2, 4.0);
	CreateDynamic3DTextLabel("{FFFFFF}Чтобы выйти из гаража, пропишите: {FF6347}/exit", 0xFFFFFFFF, -1620.0846, 1576.7509, 2005.9100 + 0.2, 4.0);
	CreateActor(7, 2188.9487,1371.6503,11.4361,176.6982);
	CreateDynamic3DTextLabel("{FF8800}Скупщик нелегальных растений\n{"#cW"}Нажмите {FF8800}ALT{FFFFFF} для взаимодействия", 0x66CC00FF, 2188.9487,1371.6503,11.4361 + 1.2, 2.0); // Армия вышка 2
	army_ammo_CP = CreateDynamicCP(1243.0858,3223.8335,12.3937, 1.5, -1, -1, _, 7.0);
	FixContainers();
	CreateDynamic3DTextLabel("{FF8800}Получение номеров", 0x3399FFFF, 2492.6079, 1394.9854, 1000.0214, 10.0);
	CreatePickup(1239, 23, 2492.6079, 1394.9854, 1000.0214, -1, -1);
	g_last_pay_day_time =
	g_last_m_timer_time = gettime();
	CreateMineObjects();
	CreateVehicles();
	CreateCasinoBlackJack();
	CreateAltHint();
	CreateCasinoTables();
	CreateMedBeds();
	CreateArmories();
	CreateGreenZones();
	CreateFishingZones();
	AnimListInit();
	BanksInit();
	TempJobsInit();
	MapIconsInit();
	TeleportPickupsInit();
	CreateStoGarage();
	CreateDetelingGarage();
	AtmsInit();
	LoadDragRacing();
	CreateCarWashObject();
	LoadVorotaDef();
	LoadObject();
	#if defined RAND_WEATHER
	SetRandomWeather();
	#endif
	#if defined _GANG_ZONES_INC
	CreateGangZonesCR();
	#endif
	mysql = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_BASE, MYSQL_PASS);
	mysql_set_charset("cp1251");
	switch(mysql_errno())
	{
		case 0: print("Подключение к базе данных удалось");
	    case 1044: return print("Подключение к базе данных не удалось [Указано несуществующее имя пользователя]");
	    case 1045: return print("Подключение к базе данных не удалось [Указан неправильный пароль]");
	    case 1049: return print("Подключение к базе данных не удалось [Указана несуществующая база данных]");
	    case 2003: return print("Подключение к базе данных не удалось [Хостинг с базой данных недоступен]");
	    case 2005: return print("Подключение к базе данных не удалось [Указан неправильный адрес хостинга]");
	    default: return printf("Подключение к базе данных не удалось [Неизвестная ошибка. Код ошибки: %d]", mysql_errno());
	}
	LoadServerConfig();
    UpdateCharity();
    RepositoriesLoad();
	CreateInteractions();
    LoadEntrances();
    LoadHouses();
   	LoadObjects();
    LoadHousesRenters();
    EntranceStatusInitAll();
    LoadBusinesses();
	LoadKiosks();
	Jail_Init();
    LoadGarages();
    LoadGardens();
	LoadNeft();
	LoadVorota();
    CreateCarsharingCar();
    LoadRentCar();
    LoadOrders();
    LoadFamily();
    LoadGangZones();
    LoadGangRepositories();
	LoadAuction();
	LoadItems();
	UpdateRating_DrageRacing();
	SetTimer("OnSecondTimer", 1000, true);
	SetTimer_("OnSpeedTimerUp", 100, 0, -1);
	CallLocalFunction("HospitalTreatment", "");
	SetGameModeText(SERVER_VERSION);
	return 1;
}

#define MAX_PLAYER_ITEMS 20000
#define GetPlayerItem(%0,%1) 		g_player_item[%0][%1]
#define SetPlayerItem(%0,%1,%2)		g_player_item[%0][%1] = %2
#define AddPlayerItem(%0,%1,%2,%3)	g_player_item[%0][%1] %2= %3
enum E_PLAYER_ITEM_STRUCT
{
	PI_SQL_ID,
	PI_OWNER_ID,
	PI_RETURN_ITEMS,
	PI_TYPE,
	PI_SLOTS,
	PI_ITEM,
	PI_COUNT,
	PI_NUMBER[32],
	PI_REGION[32],
	PI_TYPENUMBER,
	PI_AKS_ID,
	PI_TYPEACS,
	PI_STATUS,
	PI_INDX,
	Float: PI_FOFFSET_X,
	Float: PI_FOFFSET_Y,
	Float: PI_FOFFSET_Z,
	Float: PI_FROT_X,
	Float: PI_FROT_Y,
	Float: PI_FROT_Z,
	Float: PI_FSCALE_X,
	Float: PI_FSCALE_Y,
	Float: PI_FSCALE_Z,
	PI_SKIN_ID,
	PI_SKIN_IZNOS,
	PI_SHELF,
	PI_SKLAD,
	PI_CAR_ID,
	PI_TYPE_ITEM,
	PI_WEAPON,
	PI_PATRON,
	PI_TRADE_TYPE,
	PI_TRADE_COUNT,
	PI_TRADE_SLOT
};
new g_player_item[MAX_PLAYER_ITEMS][E_PLAYER_ITEM_STRUCT];
new g_player_mine_cp[MAX_PLAYERS];
new g_player_mine_status[MAX_PLAYERS];
new g_player_mine_object[MAX_PLAYERS] = INVALID_OBJECT_ID;
new g_player_mine_sphere[MAX_PLAYERS];
new g_player_mine_rack[MAX_PLAYERS];
new g_player_mine_ore[MAX_PLAYERS] = -1;

new Float: g_mine_vagon[5][4] =
{
    {-432.828, 2855.09, 1068.89, -56.6},
    {-420.774, 2907.64, 1068.91, -8.09999},
    {-524.798, 2877.41, 1068.91, 0.0},
    {-474.408, 2853.55, 1068.91, -61.6999},
    {-537.184, 2850.8, 1068.9, 64.5999}
};
#define MAX_MINE_ORE 30
#define MINE_COLOR "f49810"
new g_mine_rack_sphere[6];
new Float: g_mine_rack[6][3] =
{
    {-435.0599,2907.0371,1069.7866},
    {-435.9701,2863.0090,1069.7866},
    {-476.4646,2860.1262,1069.8044},
    {-503.3899,2870.7407,1069.7856},
    {-534.6988,2857.7498,1069.7856},
    {-529.7535,2879.3503,1069.8036}
};
enum E_MINE_ORE_POS_STRUCT
{
    Float:MOP_UP[6],
    Float:MOP_DOWN[3],
    Float:MOP_CART[4]
}
new g_mine_ore_pos[MAX_MINE_ORE][E_MINE_ORE_POS_STRUCT] =
{ //{{руда сверху}, {руда снизу}, {телега}}
    {{-532.517, 2850.62, 1070.02, -89.7000, -63.2001, 0.0000}, {-532.978, 2851.01, 1069.27}, {-532.952, 2852.64, 1069.33, 0.00}},
    {{-543.812, 2839.11, 1069.73, -20.7000, 88.40000, -12.60}, {-542.840, 2838.98, 1068.78}, {-542.607, 2837.62, 1068.78, 16.3}},
    {{-474.453, 2842.18, 1069.76, 0.000000, 87.79990, 0.0000}, {-473.583, 2842.29, 1068.89}, {-472.759, 2840.91, 1068.89, 15.0}},
    {{-476.840, 2850.00, 1069.83, -88.6000, 69.20000, 0.0000}, {-476.042, 2850.22, 1068.82}, {-475.020, 2849.18, 1068.99, 0.00}},
    {{-482.802, 2858.90, 1069.82, -90.5000, -99.6000, -152.1}, {-481.774, 2859.63, 1068.78}, {-481.068, 2858.53, 1068.81, 10.7}},
    {{-478.889, 2865.50, 1069.83, 89.00000, -38.8000, 0.0000}, {-479.565, 2864.89, 1068.77}, {-480.756, 2864.34, 1068.85, 15.6}},
    {{-469.460, 2850.78, 1069.80, 5.100000, -86.6000, 15.400}, {-470.047, 2850.31, 1068.89}, {-470.897, 2851.37, 1069.29, 7.40}},
    {{-520.011, 2873.31, 1069.59, -82.5000, 0.000000, 0.0000}, {-519.897, 2874.03, 1068.84}, {-518.783, 2874.26, 1069.00, 11.1}},
    {{-533.313, 2880.85, 1069.71, 81.80000, 0.000000, 0.0000}, {-533.344, 2880.12, 1068.89}, {-534.636, 2879.34, 1068.94, 14.6}},
    {{-542.955, 2873.38, 1069.59, -84.6000, 0.000000, 0.0000}, {-542.804, 2874.43, 1068.89}, {-541.791, 2874.74, 1068.94, 10.5}},
    {{-533.718, 2873.44, 1069.77, -87.3001, 90.00000, 84.700}, {-533.826, 2874.56, 1068.93}, {-533.006, 2874.28, 1068.99, 0.00}},
    {{-541.386, 2848.29, 1069.74, 5.400000, 89.50000, -28.80}, {-540.490, 2847.88, 1068.78}, {-540.889, 2846.51, 1068.81, 14.5}},
    {{-509.534, 2881.08, 1069.80, 88.30000, 0.000000, 0.0000}, {-509.543, 2880.24, 1068.80}, {-510.472, 2879.54, 1068.86, 15.4}},
    {{-427.861, 2853.44, 1069.80, 1.600000, -109.600, 30.800}, {-428.695, 2853.09, 1069.00}, {-429.138, 2854.17, 1068.90, 0.00}},
    {{-435.697, 2853.69, 1069.88, -94.7001, 48.60000, 0.0000}, {-435.168, 2853.93, 1068.79}, {-434.148, 2853.11, 1068.84, 14.8}},
    {{-444.451, 2863.60, 1069.73, 91.70000, 139.3000, 0.0000}, {-443.860, 2864.23, 1068.78}, {-442.889, 2863.74, 1068.80, 13.0}},
    {{-443.523, 2871.17, 1069.92, 97.39900, -35.2000, -0.600}, {-443.943, 2870.49, 1068.97}, {-445.224, 2870.87, 1069.05, 0.00}},
    {{-440.704, 2860.44, 1069.72, -86.1000, 0.000000, -43.90}, {-440.172, 2860.87, 1068.76}, {-439.237, 2860.07, 1068.83, 13.1}},
    {{-420.022, 2904.17, 1069.74, -86.1000, 16.90000, 0.0000}, {-419.847, 2904.93, 1068.77}, {-419.016, 2905.18, 1068.83, 13.5}},
    {{-424.047, 2911.69, 1069.77, 88.40000, 0.000000, 0.0000}, {-424.192, 2911.01, 1068.77}, {-425.530, 2910.15, 1068.83, 12.4}},
    {{-438.548, 2906.38, 1069.82, 0.000000, 89.39990, -52.20}, {-438.057, 2905.68, 1068.78}, {-439.084, 2904.31, 1068.83, 13.1}},
    {{-447.809, 2887.38, 1069.83, -87.8000, -87.3000, -28.20}, {-448.551, 2888.06, 1068.76}, {-447.741, 2888.85, 1068.83, 13.2}},
    {{-535.564, 2843.56, 1069.78, -0.90000, -88.4900, -15.50}, {-536.211, 2843.76, 1068.77}, {-537.091, 2842.35, 1068.79, 12.5}},
    {{-434.019, 2900.82, 1069.77, 0.000000, -88.7000, -60.10}, {-434.768, 2901.72, 1068.77}, {-433.697, 2902.44, 1068.83, 13.9}},
    {{-527.947, 2865.62, 1069.89, 89.40000, 24.40000, 0.0000}, {-527.549, 2864.85, 1068.78}, {-528.166, 2863.33, 1068.82, 14.0}},
    {{-516.072, 2862.67, 1069.79, -90.8000, -24.1000, 0.0000}, {-516.396, 2863.79, 1068.78}, {-515.306, 2864.19, 1068.82, 13.8}},
    {{-508.150, 2871.45, 1069.71, 89.39990, 8.600000, 0.0000}, {-508.193, 2870.56, 1068.80}, {-509.470, 2870.06, 1068.82, 12.4}},
    {{-498.229, 2865.33, 1069.83, -91.9000, -4.90000, 0.0000}, {-498.250, 2866.06, 1068.77}, {-497.473, 2866.88, 1068.81, 15.0}},
    {{-508.014, 2864.30, 1069.71, -86.9000, -7.90000, 0.0000}, {-508.101, 2865.10, 1068.77}, {-506.869, 2865.74, 1068.79, 14.1}},
    {{-520.551, 2860.86, 1069.70, -86.0999, -5.60000, 14.900}, {-520.971, 2861.77, 1068.77}, {-520.109, 2862.45, 1068.78, 17.6}}
};

enum E_MINE_ORE_STRUCT
{
    MO_OWNER_ID,
    MO_STATUS,
    MO_TYPE,
    MO_OBJECT,
    Text3D:MO_LABEL,
    MO_SPHERE
}
new g_mine_ore[MAX_MINE_ORE][E_MINE_ORE_STRUCT];
stock CreateMineOre()
{
    for(new i; i < sizeof g_mine_ore; i++)
    {
        if(g_mine_ore[i][MO_STATUS] != 0) continue;
        g_mine_ore[i][MO_STATUS] = 1;
        g_mine_ore[i][MO_OWNER_ID] = -1;
        g_mine_ore[i][MO_TYPE] = RandomEx(1,2);
        g_mine_ore[i][MO_LABEL] = CreateDynamic3DTextLabel("{"MINE_COLOR"}Руда", -1, g_mine_ore_pos[i][MOP_UP][0], g_mine_ore_pos[i][MOP_UP][1], g_mine_ore_pos[i][MOP_UP][2], 15.0);
        if(g_mine_ore[i][MO_TYPE] == 1)
            g_mine_ore[i][MO_OBJECT] = CreateDynamicObject(17106, g_mine_ore_pos[i][MOP_UP][0], g_mine_ore_pos[i][MOP_UP][1], g_mine_ore_pos[i][MOP_UP][2], g_mine_ore_pos[i][MOP_UP][3], g_mine_ore_pos[i][MOP_UP][4], g_mine_ore_pos[i][MOP_UP][5]);
        else if(g_mine_ore[i][MO_TYPE] == 2)
            g_mine_ore[i][MO_OBJECT] = CreateDynamicObject(17166, g_mine_ore_pos[i][MOP_UP][0], g_mine_ore_pos[i][MOP_UP][1], g_mine_ore_pos[i][MOP_UP][2], g_mine_ore_pos[i][MOP_UP][3], g_mine_ore_pos[i][MOP_UP][4], g_mine_ore_pos[i][MOP_UP][5]);
        g_mine_ore[i][MO_SPHERE] = CreateDynamicSphere(g_mine_ore_pos[i][MOP_DOWN][0], g_mine_ore_pos[i][MOP_DOWN][1], g_mine_ore_pos[i][MOP_DOWN][2],2.5,-1,-1);
    }
}
enum E_MINE_ELEVATOR_STRUCT // лифт в шахте
{
    MS_TIME_STATUS,
    MS_OBJECT_LIFT,
    MS_OBJECT_LIFT_STATUS,
    MS_OBJECT_GATES_1,
    MS_OBJECT_GATES_2,
    MS_OBJECT_GATES_3,
    MS_OBJECT_LIFT_AREA_1,
    MS_OBJECT_LIFT_AREA_2,
}
new g_mine_elevator[E_MINE_ELEVATOR_STRUCT];
stock CreateMineObjects()
{
    for(new i; i < sizeof g_mine_rack; i++)
    {
        g_mine_rack_sphere[i] = CreateDynamicSphere(g_mine_rack[i][0], g_mine_rack[i][1], g_mine_rack[i][2],2.5,-1,-1);
    }
    for(new i; i < sizeof g_mine_vagon; i++)
    {
        CreateDynamicObject(17105, g_mine_vagon[i][0], g_mine_vagon[i][1], g_mine_vagon[i][2], 0.0, 0.0, g_mine_vagon[i][3]);
    }
    g_mine_elevator[MS_OBJECT_GATES_1] = CreateDynamicObject(17113, -469.788, 2877.41, 1193.46, 0.0, 0.0, 0.0);
    g_mine_elevator[MS_OBJECT_GATES_2] = CreateDynamicObject(17113, -461.784, 2877.42, 1070.47, 0.0, 0.0, 0.0);
    g_mine_elevator[MS_OBJECT_GATES_3] = CreateDynamicObject(17113, -469.966, 2877.43, 1070.51, 0.0, 0.0, 0.0);
    g_mine_elevator[MS_OBJECT_LIFT] = CreateDynamicObject(17112, -465.842, 2876.61, 1192.96, 0.0, 0.0, 0.0);
    OnMineTimer();
}

stock OnMineTimer()
{
    if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 0) // когда лифт закрывается сверху
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 1;
        g_mine_elevator[MS_TIME_STATUS] = 7;
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_1], -469.788, 2877.41, 1193.46, 0.5, 0.0, 0.0, 0.0);
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1192.96)) continue;
            SCM(i, 0xa3bed9FF, "Лифт скоро начнёт движение. Покиньте его, если не хотите ехать.");
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 1) // когда лифт поехал вниз
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 2;
        g_mine_elevator[MS_TIME_STATUS] = 20;
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_LIFT], -465.842, 2876.61, 1070.09, 4.0, 0.0, 0.0, 0.0);
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1192.96)) continue;
            if(GetPlayerTempJob(i) != TEMP_JOB_MINER)
			{
                SetPlayerPosEx(i, -470.2869,2876.5969,1192.7656,88.1593, 5, 5);
            }
            else 
            {
                SCM(i, 0xa3bed9FF, "Лифт начал движение. Не переходите в меню паузы до выхода из лифта.");
                TogglePlayerControllable(i,false);
                BitStream_1(i, s_CefInterface, t_CefUpdate, "window.playSound('sounds/prison/sfx_lift_down.mp3', 1, 6, 0.50)");
            }
        }
    }   
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 2) //
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 3;
        g_mine_elevator[MS_TIME_STATUS] = 10;
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_2], -461.784, 2877.42, 1070.47, 0.5, 0.0, 0.0, 0.0);
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_3], -469.966, 2877.43, 1070.51, 0.5, 0.0, 0.0, 0.0);
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1070.09)) continue;
            SetPlayerPosEx(i, -471.4067,2876.7444,1069.7960,88.1593, 5, 5);
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 3) // когда лифт открывается снизу
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 4;
        g_mine_elevator[MS_TIME_STATUS] = 20;
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_2], -461.784, 2877.42 + 4, 1070.47, 0.5, 0.0, 0.0, 0.0);
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_3], -469.966, 2877.43 + 4, 1070.51, 0.5, 0.0, 0.0, 0.0);
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1070.09)) continue;
            SCM(i, -1, "Теперь возьмите инструменты со стойки (одна из стоек отмечена красной иконкой на мини-карте).");
            TogglePlayerControllable(i,true);
            if(g_player_mine_cp[i] == 2)
            {
                new random_rack = random(5);
                g_player_mine_rack[i] = random_rack;
                SetPlayerCheckpoint(i, g_mine_rack[random_rack][0],g_mine_rack[random_rack][1],g_mine_rack[random_rack][2], 1.0);
            }
            BitStream_1(i, s_CefInterface, t_CefUpdate, "window.stopSound(6)");
            BitStream_1(i, s_CefInterface, t_CefUpdate, "window.playSound('sounds/mine/amb_mine.wav', 1, 5, 1.00)");
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 4) // когда лифт закрывается снизу
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 5;
        g_mine_elevator[MS_TIME_STATUS] = 7;
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_2], -461.784, 2877.42, 1070.47, 0.5, 0.0, 0.0, 0.0);
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_3], -469.966, 2877.43, 1070.51, 0.5, 0.0, 0.0, 0.0);
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1070.09)) continue;
            SCM(i, 0xa3bed9FF, "Лифт скоро начнёт движение. Покиньте его, если не хотите ехать.");
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 5) // когда лифт едет вверх
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 6;
        g_mine_elevator[MS_TIME_STATUS] = 3;
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_LIFT], -465.842, 2876.61, 1192.96, 4.0, 0.0, 0.0, 0.0);
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1070.09)) continue;
            SCM(i, 0xa3bed9FF, "Лифт начал движение. Не переходите в меню паузы до выхода из лифта.");
            TogglePlayerControllable(i,false);
            BitStream_1(i, s_CefInterface, t_CefUpdate, "window.stopSound(5)");
            BitStream_1(i, s_CefInterface, t_CefUpdate, "window.playSound('sounds/prison/sfx_lift_down.mp3', 1, 6, 0.50)");
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 6) 
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 7;
        g_mine_elevator[MS_TIME_STATUS] = 27;
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_2], -461.784, 2877.42 + 4, 1070.47, 0.5, 0.0, 0.0, 0.0);
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_3], -469.966, 2877.43 + 4, 1070.51, 0.5, 0.0, 0.0, 0.0);
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 7) // когда лифт открывается сверху
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 0;
        g_mine_elevator[MS_TIME_STATUS] = 30;
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_1], -469.788, 2877.41 + 4, 1193.46, 0.5, 0.0, 0.0, 0.0);
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1192.96)) continue;
            TogglePlayerControllable(i,true);
            BitStream_1(i, s_CefInterface, t_CefUpdate, "window.stopSound(6)");
        }
    }
    CreateMineOre();
}

#define MAX_CONTAINERS 7
#define MAX_CONTAINERS_ITEMS 9
new alt_containers_bet[MAX_CONTAINERS];
new alt_containers_open[MAX_CONTAINERS];
new alt_containers_items[MAX_CONTAINERS];
new containers_bet[MAX_PLAYERS];
new containers_id[MAX_PLAYERS];
new containers_item_id[MAX_PLAYERS];
new containers_block_time[MAX_PLAYERS];
enum S_CONTAINERS_ITEMS_STRUCT
{
	S_CT_I_STATUS,
	S_CT_I_TYPE,
	S_CT_I_ID,
	S_CT_I_IDNX
};
new s_containers_items[MAX_CONTAINERS][MAX_CONTAINERS_ITEMS][S_CONTAINERS_ITEMS_STRUCT];
enum S_CONTAINERS_STRUCT
{
	S_CT_TYPE,
	S_CT_ITEM_TYPE,
	S_CT_PRICE,
	S_CT_WIN_ID,
	S_CT_STATUS,
	S_CT_TIME,
	S_CT_OBJ,
	S_CT_ITEM_OBJ,
	S_CT_DOOR_1,
	S_CT_DOOR_2,
	S_CT_CLOSE_OBJ,
	S_CT_CAR_OBJ,
	Text3D: S_CT_LABEL_1,
	Text3D: S_CT_LABEL_2
};
new s_containers[MAX_CONTAINERS][S_CONTAINERS_STRUCT];
enum S_CONTAINERS_TYPE_STRUCT
{
	SCT_NAME[38],
	SCT_OBJ_ID,
	SCT_OBJ_DOOR_1_ID,
	SCT_OBJ_DOOR_2_ID,
};
new s_containers_type[5][S_CONTAINERS_TYPE_STRUCT] =
{
	{"{FF5533}Российская Федерация", 10476, 10459, 10460},
	{"{4F80BF}Европейский Союз", 10464, 10461, 10462},
	{"{4F80BF}Соединенные Штаты Америки", 10465, 10472, 10473},
	{"{6B8E23}Объединённые Арабские Эмираты", 10466, 10474, 10475},
	{"{FF5533}Китайская Народная Республика", 10728, 10726, 10727}
};

new Float:s_containers_pos_obj[7][5][4] =
{//{{[контейнер]},	{[левая дверь]}, {[правая дверь]},	{[позиция текста (там где начинаются торги)]}, {[замок]}}
	{{-1958.89,2932.05,6.39267,-89.4}, {-1964.47,2933.31,7.04267,0.0}, {-1964.47,2930.77,7.04267,0.0}, {-1965.1040,2931.9771,7.9027,0.0}, {-1964.58,2932.01,7.93752,-80.0}},
	{{-1942.44,2932.09,6.39267,-89.4}, {-1948.01,2933.31,7.04267,0.0}, {-1948.01,2930.77,7.04267,0.0}, {-1948.9059,2932.0854,7.9027,0.0}, {-1948.10,2932.01,7.93752,-80.0}},
	{{-1925.19,2932.05,6.39267,-89.4}, {-1930.77,2933.31,7.04267,0.0}, {-1930.77,2930.77,7.04267,0.0}, {-1931.3438,2932.0632,7.9027,0.0}, {-1930.93,2932.01,7.93752,-80.0}},
	{{-1908.15,2932.03,6.39267,-89.4}, {-1913.71,2933.31,7.04267,0.0}, {-1913.71,2930.77,7.04267,0.0}, {-1914.4340,2932.1421,7.9027,0.0}, {-1913.88,2932.01,7.93752,-80.0}},
	{{-1898.45,2926.53,6.39267,-89.4}, {-1904.02,2927.78,7.04267,0.0}, {-1904.02,2925.26,7.04267,0.0}, {-1904.9874,2926.5583,7.9027,0.0}, {-1904.15,2926.49,7.93752,-80.0}},
	{{-1915.99,2926.53,6.39267,-89.4}, {-1921.56,2927.78,7.04267,0.0}, {-1921.56,2925.26,7.04267,0.0}, {-1922.7148,2926.5979,7.9027,0.0}, {-1921.76,2926.49,7.93752,-80.0}},
	{{-1931.92,2926.53,6.39267,-89.4}, {-1937.51,2927.78,7.04267,0.0}, {-1937.51,2925.26,7.04267,0.0}, {-1938.4766,2926.5254,7.9027,0.0}, {-1937.67,2926.49,7.93752,-80.0}}
};
new s_containers_type_obj[8] = {10469, 10468, 10467, 10470, 10471, 10467, 0, 10470};
new s_containers_type_name[8][24] = {"Антиквариат", "Техника", "Мебель", "Недорогая одежда", "Одежда", "Спец. Товары", "Транспорт", "Аксессуары"};
new s_containers_type_price[5][8] =
{ // Российская Федерация
    {150000, 70000, 150000, 80000, 280000, 15000, 300000, 70000},   // Европейский Союз
    {150000, 70000, 150000, 80000, 280000, 15000,  5500000, 70000},   // Соединенные Штаты Америки
    {150000, 70000, 150000, 80000, 280000, 15000, 5500000, 70000},    // Объединённые Арабские Эмираты
    {150000, 70000, 150000, 80000, 280000, 15000, 19000000, 70000},  // Китайская Народная Республика
    {150000, 70000, 150000, 80000, 280000, 15000, 1900000, 70000}
};
new s_containers_acs[5][20][2] =
{  // Российская Федерация
    {
        {13973,2}, 
        {14003,8},
        {18908,1},
        {18924,3},
        {18944,4},
        {19009,0},
        {18935,4},
        {13983,4},
        {13980,4},
        {13990,2},
        {14599,4},
        {18895,2},
        {18904,2},
        {18901,2},
        {18914,2},
        {18906,2},
        {14072,2},
        {13975,4},
        {15882,4},
        {15788,9}
    },     // Европейский Союз
    {
        {14520,2},
        {14521,2},
        {14522,2},
        {13983,4},
        {13980,4},
        {13990,2},
        {14599,4},
        {13985,2},
        {14056,2},
        {14460,4},
        {14461,2},
        {18941,4},
        {18947,4},
        {18951,4},
        {18972,4},
        {13991,2},
        {13978,4},
        {13958,2},
        {15886,4},
        {15884,4}
    },   // Соединенные Штаты Америки
    {
        {13988,2},
        {14004,8},
        {16744,4},
        {14067,2},
        {18912,2},
        {18909,3},
        {13983,4},
        {13980,4},
        {13990,2},
        {13995,0},
        {19010,0},
        {19012,0},
        {19013,0},
        {18925,4},
        {13982,4},
        {14063,2},
        {14053,2},
        {14006,8},
        {14052,2},
        {15890,11}
    }, // Объединённые Арабские Эмираты
    {
        {14614,7},
        {18946,3},
        {14001,6},
        {18898,2},
        {18899,2},
        {19007,0},
        {18902,2},
        {13976,4},
        {18921,3},
        {18913,2},
        {18903,2},
        {14059,2},
        {13970,2},
        {13987,2},
        {15849,4},
        {15848,4},
        {16224,4},
        {14195,8},
        {14048,2},
        {14054,2}
    },// Китайская Народная Республика
    {
        {13983,4},
        {13980,4},
        {13990,2},
        {14057,2},
        {14456,2},
        {14465,2},
        {14062,2},
        {14796,11},
        {15789,2},
        {15881,4},
        {13991,2},
        {13969,1},
        {13966,5},
        {13965,5},
        {14066,2},
        {18933,4},
        {18949,4},
        {18950,4},
        {15810,4},
        {14002,6}
    }
};

new s_containers_technique[20] = {107,108,109,110,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,123};
new s_containers_antiques[21] = {48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,85};
new s_containers_special_goods[16] = {103,104,105,106,111,112,113,114,116,117,118,119,120,121,122,332};
new s_containers_furniture[8] = {68,69,70,71,72,73,77,79};
new s_containers_skins[5][50][2] =
{ //{[ид скина],[цена скина]},// Российская Федерация
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{26,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{156,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{97,18000},
		{45,25000},
		{299,29000},
		{101,30000},
		{155,30000},
		{140,38000},
		{262,45000},
		{99,50000},
		{18,53000},
		{60,60000},
		{73,60000},
		{92,70000},
		{117,80000},
		{119,90000},
		{108,135000},
		{192,600000},
		{109,135000},
		{119,50000},
		{272,270000},
		{15305,1560000},
		{297,6000000},
		{15363,10000000},
		{162,6000000},
		{181,55000},
		{294,100000},
		{15361,5000000},
		{15433,700000},
		{15364,1700000},
		{15320,5000000},
		{15361,7000000},
		{15423,8000000},
		{15452,17000000}
    }, // Европейский Союз
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{160,7500},
		{26,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{235,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{97,18000},
		{45,25000},
		{193,45000},
		{155,30000},
		{146,50000},
		{99,50000},
		{60,60000},
		{73,60000},
		{92,70000},
		{117,80000},
		{119,90000},
		{23,100000},
		{108,135000},
		{295,150000},
		{169,200000},
		{231,488599},
		{120,650000},
		{129,460000},
		{225,600000},
		{233,1300000},
		{232,1600000},
		{15300,1300000},
		{207,20000000},
		{234,6000000},
		{15393,1300000},
		{206,4000000},
		{15300,1600000},
		{172,2500000},
		{15309,2500000},
		{15312,2500000},
		{270,5000000}
    },// Соединенные Штаты Америки
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{26,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{159,18000},
		{45,25000},
		{101,30000},
		{155,30000},
		{99,50000},
		{60,60000},
		{73,60000},
		{92,70000},
		{150,80000},
		{119,90000},
		{108,135000},
		{169,200000},
		{15317,200000},
		{138,250000},
		{55,650000},
		{41,700000},
		{258,20000000},
		{238,2000000},
		{115,4000000},
		{207,20000000},
		{257,700000},
		{176,4000000},
		{223,900000},
		{182,4000000},
		{116,4000000},
		{167,6000000},
		{228,3000000},
		{194,5000000},
		{297,8000000},
		{15540,8000000},
		{15431,8000000},
		{15363,15000000},
		{207,20000000}
    },// Объединённые Арабские Эмираты
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{26,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{97,18000},
		{45,25000},
		{101,30000},
		{155,30000},
		{99,50000},
		{60,60000},
		{73,60000},
		{150,60000},
		{46,500000},
		{15391,600000},
		{15390,850000},
		{31,1300000},
		{134,4000000},
		{130,666666},
		{15430,12000000},
		{15456,4000000},
		{215,700000},
		{15360,15000000},
		{15526,3000000},
		{172,2500000},
		{15518,7000000},
		{15407,10000000},
		{15426,2400000},
		{35,5000000},
		{36,5000000},
		{41,700000},
		{19,5000000},
		{5,5000000},
		{15414,5000000},
		{15416,5000000},
		{15418,8000000},
		{15425,8800000},
		{15406,10000000}
    }, // Китайская Народная Республика
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{184,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{97,18000},
		{242,18000},
		{45,25000},
		{101,30000},
		{155,30000},
		{99,50000},
		{60,60000},
		{73,60000},
		{92,70000},
		{117,80000},
		{119,90000},
		{185,120000},
		{189,135000},
		{3,250000},
		{59,250000},
		{33,350000},
		{186,500000},
		{296,550000},
		{145,300000},
		{146,100000},
		{152,450000},
		{15540,8000000},
		{245,7000000},
		{15542,4000000},
		{249,1000000},
		{140,38000},
		{15562,10000000},
		{150,160000},
		{261,550000},
		{55,700000},
		{77,700000},
		{15394,1700000},
		{29,1700000}
    }
};

new s_containers_cars[5][] =
{
    {15151,15150,15145,15124,15078,15074,799,600,576,567,566,565,561,555,549,547,546,542,536,527,496,492,478,526,404,546,542,536,527,496,492,478,526,404,546,542,536,527,496,492,478,526,404,546,542,536,527,496,492,478,526,404,527,496,492,478,526,404,526,404},
    {475,15118,15149,15152,15077,15086,612,585,614,909,15066,15067,15087,508,516,534,540,15176,15161,466,466,15071,15092,15167,15087,508,516,534,540,15176,15161,466,466,15071,15092,15167,15087,508,516,534,540,15176,15161,466,466,15071,15092,15167,15087,508,516,534,540,15176,15161,466,466,15071,15087,508},
    {15189,495,15156,15148,15073,15071,793,503,15087,15081,15158,15089,15148,15147,558,466,15071,15076,15092,15167,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15071,793,15073,15071},
    {15190,15229,15223,15104,15160,15156,15636,15179,15177,15176,15175,15182,15238,402,400,405,409,410,415,429,480,506,533,541,543,579,573,602,605,797,798,907,965,15071,15085,15105,15076,15107,15108,15120,15146,15166,15147,15150,15158,965,15071,15085,15105,15076,15107,15108,15120,15146,15166,15147,15150,15158,15671,15672},
    {15189,495,15156,15148,15073,15071,793,503,15087,15081,15158,15089,15148,15147,558,466,15071,15076,15092,15167,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15071,793,15073,15071,17419,17418,17417}
};

enum E_CONTAINER_VEHICLE_SPAWN_STRUC
{
	Float: CS_POS_X,
	Float: CS_POS_Y,
	Float: CS_POS_Z,
	Float: CS_POS_A
}
new container_spawn_vehicle_buy[7][E_CONTAINER_VEHICLE_SPAWN_STRUC] =
{
	{-1959.5929,2936.3940,6.1911,90.0},
	{-1943.7290,2936.5735,6.1911,90.0},
	{-1925.9305,2936.7769,6.1911,90.0},
	{-1925.9305,2936.7769,6.1911,90.0},
	{-1898.5448,2922.7205,6.1912,90.0},
	{-1916.5865,2922.8850,6.1911,90.0},
	{-1932.8942,2921.6682,6.1911,90.0}
};

stock FixContainers()
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		s_containers[i][S_CT_OBJ] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
		s_containers[i][S_CT_ITEM_OBJ] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
		s_containers[i][S_CT_DOOR_1] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
		s_containers[i][S_CT_DOOR_2] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
		s_containers[i][S_CT_CLOSE_OBJ] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
	}
}

stock DellContainers(container_id)
{
	new i = container_id;
	if(IsValidDynamicObject(s_containers[i][S_CT_OBJ])) DestroyDynamicObject(s_containers[i][S_CT_OBJ]);
	if(IsValidDynamic3DTextLabel(s_containers[i][S_CT_LABEL_1])) DestroyDynamic3DTextLabel(s_containers[i][S_CT_LABEL_1]);
	if(IsValidDynamic3DTextLabel(s_containers[i][S_CT_LABEL_2])) DestroyDynamic3DTextLabel(s_containers[i][S_CT_LABEL_2]);
	if(IsValidDynamicObject(s_containers[i][S_CT_ITEM_OBJ])) DestroyDynamicObject(s_containers[i][S_CT_ITEM_OBJ]);
	if(IsValidDynamicObject(s_containers[i][S_CT_DOOR_1])) DestroyDynamicObject(s_containers[i][S_CT_DOOR_1]);
	if(IsValidDynamicObject(s_containers[i][S_CT_DOOR_2])) DestroyDynamicObject(s_containers[i][S_CT_DOOR_2]);
	if(IsValidDynamicObject(s_containers[i][S_CT_CLOSE_OBJ])) DestroyDynamicObject(s_containers[i][S_CT_CLOSE_OBJ]);
	if(s_containers[i][S_CT_CAR_OBJ] != INVALID_VEHICLE_ID) DestroyVehicle(s_containers[i][S_CT_CAR_OBJ]);
	s_containers[i][S_CT_OBJ] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_ITEM_OBJ] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_DOOR_1] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_DOOR_2] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_CLOSE_OBJ] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_LABEL_1] = Text3D: INVALID_3DTEXT_ID;
	s_containers[i][S_CT_LABEL_2] = Text3D: INVALID_3DTEXT_ID;
	s_containers[i][S_CT_CAR_OBJ] = INVALID_VEHICLE_ID;
	s_containers[i][S_CT_STATUS] = 0;
	DestroyDynamicArea(alt_containers_bet[i]);
	alt_containers_bet[i] = 0;
	DestroyDynamicArea(alt_containers_open[i]);
	alt_containers_open[i] = 0;
	DestroyDynamicArea(alt_containers_items[i]);
	alt_containers_items[i] = 0; 
	return true;
}

stock AddContainers(containers_type)
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(s_containers[i][S_CT_STATUS] != 0) continue;
		DellContainers(i);
		new type_containers = random(4);
		new items_containers;
		if(containers_type == 8) 
		{
			items_containers = random(10);
			if(items_containers > 7) items_containers = 7;
		}
		else items_containers = containers_type;
		s_containers[i][S_CT_TYPE] = type_containers;
		s_containers[i][S_CT_ITEM_TYPE] = items_containers;
		s_containers[i][S_CT_PRICE] = s_containers_type_price[type_containers][items_containers];
		s_containers[i][S_CT_WIN_ID] = -1;
		s_containers[i][S_CT_STATUS] = 1;
		s_containers[i][S_CT_TIME] = 60;
		s_containers[i][S_CT_OBJ] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_ID], s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2], 0.00, 0.00, s_containers_pos_obj[i][0][3]);
		if(s_containers[i][S_CT_ITEM_TYPE] != 6) s_containers[i][S_CT_ITEM_OBJ] = CreateDynamicObject(s_containers_type_obj[items_containers], s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2], 0.00, 0.00, s_containers_pos_obj[i][0][3]);
		s_containers[i][S_CT_DOOR_1] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_DOOR_1_ID], s_containers_pos_obj[i][1][0], s_containers_pos_obj[i][1][1], s_containers_pos_obj[i][1][2], 0.00, 0.00, s_containers_pos_obj[i][1][3]);
		s_containers[i][S_CT_DOOR_2] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_DOOR_2_ID], s_containers_pos_obj[i][2][0], s_containers_pos_obj[i][2][1], s_containers_pos_obj[i][2][2], 0.00, 0.00, s_containers_pos_obj[i][2][3]);
		s_containers[i][S_CT_CLOSE_OBJ] = CreateDynamicObject(10477, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2], 0.00, 0.00, s_containers_pos_obj[i][4][3]);
		alt_containers_bet[i] = CreateDynamicSphere(s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2],3.0,-1,-1);
		new fmt_text[240];
		format(fmt_text, sizeof fmt_text, "%s(№%d)\n{ffffff}Содержимое: {3CB371}%s\n{ffffff}Cтоимость: {FF8C00}%s руб\n\n{FFFFFF}Через {FF8C00}%d {FFFFFF}сек контейнер будет передан\nво владение порта, если не начнутся торги",s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME], i + 1, s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], formatInt(s_containers[i][S_CT_PRICE]), s_containers[i][S_CT_TIME]);
		s_containers[i][S_CT_LABEL_1] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2] +3.5, 15.0);
		format(fmt_text, sizeof fmt_text, "Откройте торги за этот контейнер начальная\nстоимость которого составляет: {FF8C00}%s руб", formatInt(s_containers[i][S_CT_PRICE]));
		s_containers[i][S_CT_LABEL_2] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2], 15.0);
	}
	SendClientMessageToAll(0xFFA500FF, "{F3FF02}[Информация] {FFFFFF}В порт доставлена новая партия контейнеров.");
	return true;
}

stock Containers()
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(s_containers[i][S_CT_TIME] == 0) continue;
        s_containers[i][S_CT_TIME]--;
		if(s_containers[i][S_CT_WIN_ID] == -1)
		{
			new query[240];
			format(query, sizeof query, "%s(№%d)\n{ffffff}Содержимое: {3CB371}%s\n{ffffff}Cтоимость: {FF8C00}%s руб\n\n{FFFFFF}Через {FF8C00}%d {FFFFFF}сек контейнер будет передан\nво владение порта, если не начнутся торги",
			s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME], i + 1, s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], formatInt(s_containers[i][S_CT_PRICE]), s_containers[i][S_CT_TIME]);
			UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_1], 0xFFFFFFFF, query);
			format(query, sizeof query, "Откройте торги за этот контейнер начальная\nстоимость которого составляет: {FF8C00}%s руб",formatInt(s_containers[i][S_CT_PRICE]));
			UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_2], 0xFFFFFFFF, query);
			if(s_containers[i][S_CT_TIME] == 0)
			{
				DellContainers(i);
				new type_containers = random(4);
				new items_containers = random(10);
				if(items_containers > 7) items_containers = 7;
				s_containers[i][S_CT_TYPE] = type_containers;
				s_containers[i][S_CT_ITEM_TYPE] = items_containers;
				s_containers[i][S_CT_PRICE] = s_containers_type_price[type_containers][items_containers];
				s_containers[i][S_CT_WIN_ID] = -1;
				s_containers[i][S_CT_STATUS] = 1;
				s_containers[i][S_CT_TIME] = 60;
				alt_containers_bet[i] = CreateDynamicSphere(s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2],3.0,-1,-1);
				s_containers[i][S_CT_OBJ] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_ID], s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2], 0.00, 0.00, s_containers_pos_obj[i][0][3]);
				if(s_containers[i][S_CT_ITEM_TYPE] != 6) s_containers[i][S_CT_ITEM_OBJ] = CreateDynamicObject(s_containers_type_obj[items_containers], s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2], 0.00, 0.00, s_containers_pos_obj[i][0][3]);
				s_containers[i][S_CT_DOOR_1] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_DOOR_1_ID], s_containers_pos_obj[i][1][0], s_containers_pos_obj[i][1][1], s_containers_pos_obj[i][1][2], 0.00, 0.00, s_containers_pos_obj[i][1][3]);
				s_containers[i][S_CT_DOOR_2] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_DOOR_2_ID], s_containers_pos_obj[i][2][0], s_containers_pos_obj[i][2][1], s_containers_pos_obj[i][2][2], 0.00, 0.00, s_containers_pos_obj[i][2][3]);
				s_containers[i][S_CT_CLOSE_OBJ] = CreateDynamicObject(10477, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2], 0.00, 0.00, s_containers_pos_obj[i][4][3]);
				new fmt_text[240];
				format(fmt_text, sizeof fmt_text, "%s(№%d)\n{ffffff}Содержимое: {3CB371}%s\n{ffffff}Cтоимость: {FF8C00}%s руб\n\n{FFFFFF}Через {FF8C00}%d {FFFFFF}сек контейнер будет передан\nво владение порта, если не начнутся торги",s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME], i + 1, s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], formatInt(s_containers[i][S_CT_PRICE]), s_containers[i][S_CT_TIME]);
				s_containers[i][S_CT_LABEL_1] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2] +3.5, 15.0);
				format(fmt_text, sizeof fmt_text, "Откройте торги за этот контейнер начальная\nстоимость которого составляет: {FF8C00}%s руб", formatInt(s_containers[i][S_CT_PRICE]));
				s_containers[i][S_CT_LABEL_2] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2], 15.0);
			}
		}
		else
		{
			new query[300];
			format(query, sizeof query, "%s(№%d)\n{ffffff}Содержимое: {3CB371}%s\n{ffffff}Cтоимость: {FF8C00}%s руб",
			s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME], i + 1, s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], formatInt(s_containers[i][S_CT_PRICE])
			);
			UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_1], 0xFFFFFFFF, query);
			format(query, sizeof query, "{FFFFFF}Контейнер {FFD700}№%d\n{FFFFFF}До конца торгов осталось {FFD700}%d {FFFFFF}сек\n\nТекущая стоимость: {FF8C00}%s руб\n{FFFFFF}Предложил: {91764d}%s\n{FFFFFF}Оцените этот контейнер в свою пользу",
			i+1, s_containers[i][S_CT_TIME], formatInt(s_containers[i][S_CT_PRICE]), GetPlayerNameEx(s_containers[i][S_CT_WIN_ID])
			);
			UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_2], 0xFFFFFFFF, query);
			if(s_containers[i][S_CT_TIME] == 0)
        	{
				s_containers[i][S_CT_STATUS] = 2;
				DestroyDynamicArea(alt_containers_bet[i]);
				alt_containers_bet[i] = 0;
				alt_containers_open[i] = CreateDynamicSphere(s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2],3.0,-1,-1);
				if(IsValidDynamic3DTextLabel(s_containers[i][S_CT_LABEL_1])) DestroyDynamic3DTextLabel(s_containers[i][S_CT_LABEL_1]);
				s_containers[i][S_CT_LABEL_1] = Text3D: INVALID_3DTEXT_ID;
				format(query, sizeof query, "{32CD32}Контейнер был продан за {FF8C00}%s руб.\n\n{FFFFFF}Вы владелец? Тогда снимите замок с этого контейнера!", formatInt(s_containers[i][S_CT_PRICE]));
				UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_2], 0xFFFFFFFF, query);
				if(s_containers[i][S_CT_ITEM_TYPE] == 0) //Антиквариат
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(20);
						s_containers_items[i][idx][S_CT_I_TYPE] = 0;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_antiques[items];
						s_containers_items[i][idx][S_CT_I_IDNX] = 0;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 1)//Техника
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(19);
						s_containers_items[i][idx][S_CT_I_TYPE] = 1;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_technique[items];
						s_containers_items[i][idx][S_CT_I_IDNX] = 0;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 2)//Мебель
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(7);
						s_containers_items[i][idx][S_CT_I_TYPE] = 2;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_furniture[items];
						s_containers_items[i][idx][S_CT_I_IDNX] = 0;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 3)//Недорогая одежда
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(29);
						s_containers_items[i][idx][S_CT_I_TYPE] = 3;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_skins[s_containers[i][S_CT_TYPE]][items][0];
						s_containers_items[i][idx][S_CT_I_IDNX] = items;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 4)//Одежда
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(29);
						s_containers_items[i][idx][S_CT_I_TYPE] = 4;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_skins[s_containers[i][S_CT_TYPE]][items][0];
						s_containers_items[i][idx][S_CT_I_IDNX] = items;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 5)//Спец. Товары
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(15);
						s_containers_items[i][idx][S_CT_I_TYPE] = 5;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_special_goods[items];
						s_containers_items[i][idx][S_CT_I_IDNX] = 0;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 6)//Транспорт
				{
					new items = random(59);
					s_containers_items[i][0][S_CT_I_TYPE] = 6;
					s_containers_items[i][0][S_CT_I_ID] = s_containers_cars[s_containers[i][S_CT_TYPE]][items];
					s_containers_items[i][0][S_CT_I_IDNX] = 0;
					s_containers_items[i][0][S_CT_I_STATUS] = 1;
					s_containers[i][S_CT_CAR_OBJ] = CreateVehicle(s_containers_cars[s_containers[i][S_CT_TYPE]][items],s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2] + 2.5,90.0, 1, 1, 0, 0, VEHICLE_ACTION_TYPE_SVALKA_CAR);
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 7)//Аксессуары
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(19);
						s_containers_items[i][idx][S_CT_I_TYPE] = 7;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_acs[s_containers[i][S_CT_TYPE]][items][0];
						s_containers_items[i][idx][S_CT_I_IDNX] = s_containers_acs[s_containers[i][S_CT_TYPE]][items][1];
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				foreach(new idx: Player)
				{
					if(!IsPlayerConnected(idx)) continue;
            		else if(!IsPlayerLogged(idx)) continue;
					if(containers_id[idx] != i) continue;
					format(query, sizeof query, "{32CD32}%s победил в аукционе и получил контейнер за {FF8C00}%s руб.", GetPlayerNameEx(s_containers[i][S_CT_WIN_ID]), formatInt(s_containers[i][S_CT_PRICE]));
					SCM(idx, -1, query);
					if(idx == s_containers[i][S_CT_WIN_ID])
					{
						BitStream_1(idx, s_CefInterface, t_CefHide, "ContainersBet");
						SetCameraBehindPlayer(idx);
						GivePlayerMoneyEx(idx, -s_containers[i][S_CT_PRICE], "Ставка контейнера");
					}
					else
					{
						BitStream_1(idx, s_CefInterface, t_CefHide, "ContainersBet");
						SetCameraBehindPlayer(idx);
					}
					containers_id[idx] = -1;
					containers_bet[idx] = 0;
				}
			}
		}
	}
}

stock OpenItemContainers(playerid)
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 4.5, s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2])) continue;
		if(s_containers[i][S_CT_STATUS] != 3) return 1;
		if(s_containers[i][S_CT_WIN_ID] != playerid) return 1;
		if(s_containers[i][S_CT_ITEM_TYPE] != 6)
		{
			new query[124];
			new count_item;
			STRING_GLOBAL[0] = EOS;
			for(new idx; idx < MAX_CONTAINERS_ITEMS; idx ++)
			{
				if(s_containers_items[i][idx][S_CT_I_STATUS] != 1) continue;
				if(s_containers[i][S_CT_ITEM_TYPE] == 0) format(query, sizeof query, "[%d,15,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 1) format(query, sizeof query, "[%d,15,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 2) format(query, sizeof query, "[%d,15,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 5) format(query, sizeof query, "[%d,15,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 3) format(query, sizeof query, "[100,%d,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 4) format(query, sizeof query, "[100,%d,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 7) format(query, sizeof query, "[183,%d,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				strcat(STRING_GLOBAL, query);
				count_item++;
			}
			if(count_item == 0) return DellContainers(i);
			new str_len;
			str_len = strlen(STRING_GLOBAL);
			strdel(STRING_GLOBAL, str_len - 1, str_len);
			if(s_containers[i][S_CT_ITEM_TYPE] == 0) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[0],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[2],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 2) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[4],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 5) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[4],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 3) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[1],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 4) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[1],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 7) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[3],[%s]]",  STRING_GLOBAL);
			BitStream_2(playerid, s_CefInterface, t_CefShow, "Containers", STRING_GLOBAL);
		}
		else if(s_containers[i][S_CT_ITEM_TYPE] == 6)//Транспорт
		{
			new str_c[200];
			new port = GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID], VI_PRICE) / 100 * 20;
			format(str_c, sizeof str_c,
			"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20%)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE)), formatInt(GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE) - port));
			Dialog
			(
				playerid, DIALOG_PLAYER_CAR_CONTAINER, DIALOG_STYLE_LIST, "{769A37}Действие с транспортом", str_c,
				"Выбор", "Отмена"
			);	
		}
		containers_id[playerid] = i;
		break;
	}
	return true;
}

public:ClickPlayerContainerItemBox(playerid, item_id)
{
	new i = containers_id[playerid];
	containers_item_id[playerid] = item_id;
	if(s_containers[i][S_CT_ITEM_TYPE] == 3 || s_containers[i][S_CT_ITEM_TYPE] == 4)
	{
		new str_c[200],str_cs[70];
		new port = s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] / 100 * 20;
		format(str_cs, sizeof str_cs,"{769A37}Одежда: №%d",s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][0]);
		format(str_c, sizeof str_c,
		"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20 %)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1]), formatInt(s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] - port));
		Dialog
		(
			playerid, DIALOG_PLAYER_SKIN_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
			"Выбор", "Отмена"
		);
	}
	else if(s_containers[i][S_CT_ITEM_TYPE] != 7)
	{
		new str_c[200],str_cs[70];
		new port = ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] / 100 * 20;
		format(str_cs, sizeof str_cs,"{769A37}Предмет: №%d", s_containers_items[i][item_id][S_CT_I_ID]);
		format(str_c, sizeof str_c,
		"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20 %)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price]), formatInt(ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] - port));
		Dialog
		(
			playerid, DIALOG_PLAYER_ITEM_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
			"Выбор", "Отмена"
		);
	}
	else 
	{
		new str_c[200],str_cs[70];
		new port = 50000 / 100 * 20;
		format(str_cs, sizeof str_cs,"{769A37}Аксессуар: №%d", s_containers_items[i][item_id][S_CT_I_ID]);
		format(str_c, sizeof str_c,
		"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20 %)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(50000), formatInt(50000 - port));
		Dialog
		(
			playerid, DIALOG_PLAYER_ACS_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
			"Выбор", "Отмена"
		);
	}
    return 1;
}

stock OpenPlayersContainers(playerid)
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2])) continue;
		if(s_containers[i][S_CT_STATUS] == 2)
		{
			if(s_containers[i][S_CT_WIN_ID] != playerid) return 1;
			DestroyDynamicArea(alt_containers_open[i]);
			alt_containers_open[i] = 0;
			alt_containers_items[i] = CreateDynamicSphere(s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2],4.5,-1,-1);
			if(IsValidDynamic3DTextLabel(s_containers[i][S_CT_LABEL_2])) DestroyDynamic3DTextLabel(s_containers[i][S_CT_LABEL_2]);
			s_containers[i][S_CT_LABEL_2] = Text3D: INVALID_3DTEXT_ID;
			new fmt_text[100];
			format(fmt_text, sizeof fmt_text, "{32CD32}%s\n{FFFFFF}Осматрите содержимое контейнера", s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME]);
			s_containers[i][S_CT_LABEL_1] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2] + 2.5, 15.0);
			s_containers[i][S_CT_STATUS] = 3;
			if(IsValidDynamicObject(s_containers[i][S_CT_CLOSE_OBJ])) DestroyDynamicObject(s_containers[i][S_CT_CLOSE_OBJ]);
			s_containers[i][S_CT_CLOSE_OBJ] = INVALID_OBJECT_ID;
			new Float: pos_x, Float: pos_y, Float: pos_z,Float: pos_x2, Float: pos_y2, Float: pos_z2;
			GetDynamicObjectPos(s_containers[i][S_CT_DOOR_2], pos_x, pos_y, pos_z);
			GetDynamicObjectPos(s_containers[i][S_CT_DOOR_1], pos_x2, pos_y2, pos_z2);
			MoveDynamicObject(s_containers[i][S_CT_DOOR_2],pos_x-0.1, pos_y, pos_z,0.12,0.0000, 0.0000, 96.6);
			MoveDynamicObject(s_containers[i][S_CT_DOOR_1],pos_x2-0.1, pos_y2, pos_z2,0.12,0.0000, 0.0000, -96.6);
		}
		else if(s_containers[i][S_CT_STATUS] == 1) 
		{
			if(containers_block_time[playerid] == 0) Dialog(playerid, DIALOG_CONTAINER_BET, DIALOG_STYLE_MSGBOX, "{FFFFFF}Аукцион за контейнер", "{FFFFFF}Вы хотите войти в режим аукциона за этот контейнер?", "Готово", "Отмена");
			else SCMF(playerid, COLOR_RED, "У вас есть запрет на участие в аукционах за контейнер, осталось %d минут.", containers_block_time[playerid] / 60);
		}
		return 1;
	}
	return 1;
}

public: OnContainersChangeBet(playerid, bet)
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2])) continue;

		if(s_containers[i][S_CT_WIN_ID] == playerid) 
			return GameText(playerid, "Вы уже поставили максимальную ставку", 3000, 0);

		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10))
			return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

		if(bet > 1999999999) 
			return GameText(playerid, "Максимальная сумма для ставки~n~1.999.999.999 руб", 3000, 2);

		if(s_containers[i][S_CT_TIME] <= 3 && s_containers[i][S_CT_TIME] > 0) 
			return SCM(playerid, -1, "До открытия контейнера меньше 3-х секунд, ставки закрыты.");

		if(bet < s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10 || !GetILPlayerInt(GetPlayerMoneyEx(playerid),s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10))
		{
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid),s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10))
				return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

			if(bet < s_containers[i][S_CT_PRICE] / 10) SCMF(playerid, -1, "Следующая ставка не может быть меньше чем %s", formatInt(s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10));

			BitStream_1(playerid, s_CefInterface, t_CefHide, "ContainersBet");
			
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"%s\", %d, %d, %d, %d]", s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], s_containers[i][S_CT_TYPE], s_containers[i][S_CT_PRICE], s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10, s_containers[i][S_CT_TIME]);
			BitStream_2(playerid, s_CefInterface, t_CefShow, "ContainersBet", STRING_GLOBAL);
			containers_id[playerid] = i;
		}
		else
		{
			s_containers[i][S_CT_PRICE] = bet;
			s_containers[i][S_CT_TIME] = 30;
			s_containers[i][S_CT_WIN_ID] = playerid;
			containers_bet[playerid] = s_containers[i][S_CT_PRICE];

			foreach(new idx: Player)
			{
				if(!IsPlayerConnected(idx)) continue;
				else if(!IsPlayerLogged(idx)) continue;

				if(containers_id[idx] != i) continue;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('ContainersBet').setBetData(%d, %d, %d)", s_containers[i][S_CT_PRICE], s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10, s_containers[i][S_CT_TIME]);
				BitStream_1(idx, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
			}
		}
	}
	return 1;
}

stock OnContainersCloseBet(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "ContainersBet");
	SetCameraBehindPlayer(playerid);
	if(s_containers[containers_id[playerid]][S_CT_WIN_ID] == playerid)
	{
		s_containers[containers_id[playerid]][S_CT_WIN_ID] = -1;
		s_containers[containers_id[playerid]][S_CT_TIME] = 60;
		s_containers[containers_id[playerid]][S_CT_PRICE] = s_containers_type_price[s_containers[containers_id[playerid]][S_CT_TYPE]][s_containers[containers_id[playerid]][S_CT_ITEM_TYPE]];
	}
	if(containers_bet[playerid] != 0) containers_block_time[playerid] = 300, 
		SCM(playerid, COLOR_RED, "Вам было заблокирована возможность участвовать в аукционе за контейнер на 5 минут"),
		SCM(playerid, COLOR_RED, "Так как Вы вышли с торгов поставив ставку");
	containers_id[playerid] = -1;
	containers_bet[playerid] = 0;
}

CMD:alt(playerid)
{
	OnPlayerKeyStateChange(playerid,1024,0);
	return 1;
}

#define MAX_SVALKA_CARS 18
#define MAX_SVALKA_ITEMS 93
new alt_svalka_items[MAX_SVALKA_ITEMS];
new alt_svalka_cars[MAX_SVALKA_CARS];
new g_svalka_playerid[MAX_PLAYERS] = -1;
new g_svalka_playerid_type[MAX_PLAYERS];
new g_svalka_playerid_bet[MAX_PLAYERS][2];
new g_svalka_playerid_svalka_id_car[MAX_PLAYERS] = -1;
new g_svalka_playerid_svalka_item[MAX_PLAYERS] = -1;

enum S_SVALKA_CARS_STRUCT
{
    S_CAR_ID,
    S_CAR_BID, // ставка
    S_CAR_WIN_ID,
    S_CAR_TIME,
    S_CAR_STATUS,
    S_CAR_OBJECT,
    Text3D:S_CAR_LABEL,
    S_CAR_IZNOS,
    S_CAR_COLOR
}
new g_svalka_cars[MAX_SVALKA_CARS][S_SVALKA_CARS_STRUCT];
new Float: g_svalka_pos_cars[MAX_SVALKA_CARS][4] =
{
    {-2746.9509,-1449.7039,11.7463,14.1715},
    {-2748.4934,-1443.9131,11.7463,15.6358},
    {-2750.3896,-1436.3767,11.7965,14.5668},
    {-2752.1265,-1430.5571,11.7965,14.9631},
    {-2771.7644,-1369.8912,11.8200,18.8114},
    {-2773.8130,-1364.0001,11.8200,18.9847},
    {-2775.9368,-1356.6779,11.8200,14.2542},
    {-2777.5903,-1350.4185,11.8200,15.7583},
    {-2779.1279,-1343.1324,11.8111,10.8452},
    {-2780.4036,-1336.9703,11.8111,12.4337},
    {-2781.4551,-1329.4396,11.8180,6.7110},
    {-2782.3032,-1323.2158,11.8181,7.7379},
    {-2790.4866,-1243.8090,11.7981,8.8088},
    {-2791.4768,-1237.6049,11.7979,8.1332},
    {-2792.5254,-1230.0830,11.7583,10.5889},
    {-2793.7229,-1223.8425,11.7583,10.8525},
    {-2795.0344,-1216.3081,11.7134,11.9074},
    {-2796.3142,-1210.3247,11.7133,12.0640}
};
new Float: g_svalka_pos_cars_win[11][4] =
{
    {-2743.6868,-1414.3472,9.8857,135.2798},
    {-2750.9519,-1415.6448,9.9549,138.8938},
    {-2779.5432,-1441.6849,9.9129,310.6334},
    {-2786.2700,-1369.5956,9.9270,310.1269},
    {-2761.6501,-1335.1210,9.9270,143.7762},
    {-2790.3291,-1314.2927,9.9278,281.2876},
    {-2804.6755,-1283.0017,9.9308,254.6990},
    {-2814.6519,-1264.1732,9.9271,338.8241},
    {-2814.8931,-1241.9766,9.9266,207.7707},
    {-2775.7175,-1254.2181,9.8886,52.8942},
    {-2780.0249,-1243.4910,9.9967,169.8922}
};

new g_svalka_cars_id[265][2] = 
{//{ид машины, стартовая ставка}
	{401, 50000},
    {404, 165000},
    {412, 230000},
    {421, 350000},
    {422, 320000},
    {439, 100000},
    {445, 330000},
    {458, 320000},
    {467, 115000},
    {478, 50000},
    {491, 350000},
    {492, 190000},
    {496, 130000},
    {526, 210000},
    {527, 190000},
    {534, 490000},
    {536, 210000},
    {542, 100000},
    {546, 90000},
    {547, 200000},
    {549, 30000},
    {550, 300000},
    {554, 360000},
    {555, 25000},
    {561, 210000},
    {565, 145000},
    {566, 300000},
    {567, 99000},
    {576, 50000},
    {600, 50000},
    {613, 410000},
    {799, 350000},
    {15070, 190000},
    {15074, 215000},
    {15078, 160000},
    {15079, 85000},
    {15080, 105000},
    {15084, 300000},
    {15124, 220000},
    {15119, 700000},
    {15145, 150000},
    {15150, 160000},
    {15151, 170000},
    {15207, 150000},
    {15262, 350000},
    {15281, 20000},
    {15296, 200000},
    {15603, 490000},
    {15621, 350000},
    {15641, 250000},
    {15648, 150000},
    {15663, 110000},
	{411, 2000000},
    {419, 820000},
    {436, 1000000},
    {475, 1300000},
    {477, 2000000},
    {479,  450000},
    {495, 2800000},
    {507, 530000},
    {508, 490000},
    {516, 900000},
    {540, 780000},
    {551, 1300000},
    {559, 2000000},
    {560, 1800000},
    {562, 2000000},
    {585, 1800000},
    {589, 3000000},
    {612, 2000000},
    {614, 2600000},
    {699, 1700000},
    {793, 5700000},
    {908, 2500000},
    {909, 900000},
    {1326, 2000000},
    {15065, 1100000},
    {15066, 2000000},
    {15067, 1400000},
    {15068, 1050000},
    {15069, 1700000},
    {15072, 1200000},
    {15077, 990000},
    {15081, 1250000},
    {15086, 2200000},
    {15087, 1230000},
    {15088, 1020000},
    {15090, 1600000},
    {15093, 2100000},
    {15121, 700000},
    {15115, 800000},
    {15118, 3000000},
    {15128, 850000},
    {15125, 800000},
    {15131, 1000000},
    {15141, 3500000},
    {15144, 2100000},
    {15147, 2500000},
    {15149, 1500000},
    {15152, 1800000},
    {15140, 3200000},
    {15157, 3500000},
    {15162, 1200000},
    {15163, 1600000},
    {15168, 700000},
    {15171, 2000000},
    {15180, 2200000},
    {15183, 15000000},
    {15184, 900000},
    {15185, 2000000},
    {15181, 3300000},
    {15191, 2000000},
    {15209, 4500000},
    {15203, 4000000},
    {15240, 1600000},
    {15226, 4800000},
    {15214, 1200000},
    {15221, 10000000},
    {15220, 2800000},
    {15231, 700000},
    {15272, 800000},
    {15273, 1200000},
    {15274, 3000000},
    {15275, 3500000},
    {15276, 1900000},
    {15234, 5000000},
    {15619, 3990000},
    {15605, 4000000},
    {15645, 2500000},
    {15651, 4000000},
    {15664, 700000},
	{400, 10000000},
    {402, 500000},
    {405, 6000000},
    {409, 13000000},
    {410, 6000000},
    {415, 20000000},
    {429, 13000000},
    {451, 11000000},
    {466, 6000000},
    {480, 9000000},
    {489, 17000000},
    {490, 8000000},
    {494, 4300000},
    {502, 13500000},
    {503, 6800000},
    {505, 12000000},
    {506, 12400000},
    {533, 5500000},
    {541, 12000000},
    {543, 6000000},
    {558, 4000000},
    {573, 18000000},
    {579, 5500000},
    {587, 2500000},
    {602, 4000000},
    {604, 8400000},
    {605, 14100000},
    {794, 6300000},
    {795, 35000000},
    {796, 19000000},
    {797, 5500000},
    {798, 3200000},
    {907, 3600000},
    {965, 25000000},
    {999, 11500000},
    {15071, 7800000},
    {15073, 2900000},
    {15075, 13000000},
    {15076, 11300000},
    {15082, 10000000},
    {15085, 100000000},
    {15089, 5300000},
    {15092, 3150000},
    {15094, 4200000},
    {15109, 11500000},
    {15108, 6000000},
    {15107, 13000000},    
    {15106, 8000000},
    {15105, 22000000},
    {15113, 8000000},
    {15114, 13000000},
    {15116, 20000000},
    {15120, 11000000},
    {15126, 7000000},
    {15137, 40000000},
    {15142, 13000000},
    {15146, 55000000},
    {15148, 6000000},
    {15153, 12000000},
    {15155, 25000000},
    {15156, 300000000},
    {15158, 15000000},
    {15159, 15000000},
    {15164, 14500000},
    {15165, 11000000},
    {15166, 11000000},
    {15167, 6000000},
    {15169, 13500000},
    {15170, 40000000},
    {15172, 20000000},
    {15173, 18000000},
    {15178, 10000000},
    {15187, 15000000},
    {15188, 15000000},
    {15192, 20000000},
    {15213, 5000000},
    {15219, 5000000},
    {15225, 25000000},
    {15237, 14000000},
    {15211, 7000000},
    {15206, 16000000},
    {15236, 250000000},
    {15212, 30000000},
    {15224, 22000000},
    {15239, 3000000},
    {15216, 4000000},
    {15210, 4000000},
    {15228, 20000000},
    {15217, 5000000},
    {15215, 13000000},
    {15222, 120000000},
    {15205, 150000000},
    {15227, 100000000},
    {15218, 18000000},
    {15204, 11000000},
    {15235, 25000000},
    {15230, 35000000},
    {15266, 70000000},
    {15246, 7000000,},
    {15247, 5500000},
    {15248, 15000000},
    {15249, 15000000},
    {15250, 353000000},
    {15252, 75000000},
    {15259, 18000000},
    {15261, 164000000},
    {15263, 65000000},
    {15264, 8000000},
    {15265, 3800000},
    {15269, 20000000},
    {15270, 12000000},
    {15271, 3000000},
    {15286, 18000000},
    {15284, 15000000},
    {15288, 13000000},
    {15289, 15000000},
    {15290, 12000000},
    {15287, 65000000},
    {15602, 70000000},
    {15601, 20000000},
    {15611, 60000000},
    {15613, 125000000},
    {15622, 17000000},
    {15626, 200000000},
    {15627, 16000000},
    {15628, 16000000},
    {15630, 15000000},
    {15637, 12000000},
    {15640, 35000000},
    {15653, 13000000},
    {15652, 20000000},
    {15662, 15000000},
    {15666, 25000000},
    {15677, 1500000}
};

enum S_SVALKA_ITEMS_STRUCT
{
    S_ITEM_ID,
    S_ITEM_BID, 
    S_ITEM_WIN_ID,
    S_ITEM_TIME,
    S_ITEM_STATUS,
    S_ITEM_OBJECT,
    Text3D:S_ITEM_LABEL
}

new g_svalka_items[MAX_SVALKA_ITEMS][S_SVALKA_ITEMS_STRUCT];
new Float: g_svalka_pos_items[MAX_SVALKA_ITEMS][3] =
{
    {-2731.030762, -1360.448608, 11.294101},
	{-2733.709717, -1358.176025, 13.407500},
	{-2735.472656, -1365.781494, 13.180200},
	{-2737.954834, -1358.736694, 13.387300},
	{-2739.353271, -1366.995361, 13.488000},
	{-2711.956787, -1367.007813, 12.640800},
	{-2742.857422, -1372.010742, 8.967401},
	{-2745.194824, -1349.956055, 14.672600},
	{-2741.771484, -1338.635254, 12.623900},
	{-2706.632568, -1376.297485, 13.212400},
	{-2752.840088, -1349.164063, 13.503600},
	{-2732.849854, -1390.720459, 11.044500},
	{-2753.497070, -1341.885986, 13.610100},
	{-2728.641113, -1391.991089, 13.129500},
	{-2754.074951, -1378.973145, 12.440901},
	{-2755.940674, -1343.187012, 13.455900},
	{-2731.707764, -1393.218994, 13.164701},
	{-2759.259766, -1372.186768, 13.484000},
	{-2763.023926, -1371.922363, 13.395801},
	{-2752.253418, -1330.143066, 12.792500},
	{-2735.946289, -1401.074219, 13.084100},
	{-2765.409424, -1379.991333, 9.126400},
	{-2730.275879, -1403.450317, 13.210800},
	{-2738.738525, -1402.332153, 11.931900},
	{-2747.335938, -1320.171997, 11.758700},
	{-2731.824463, -1404.466064, 13.554701},
	{-2749.511475, -1399.713135, 14.398600},
	{-2749.526855, -1317.896851, 13.632000},
	{-2730.380371, -1407.789429, 13.673000},
	{-2745.645020, -1404.324829, 15.019300},
	{-2774.082520, -1384.497314, 13.014300},
	{-2775.507813, -1381.880249, 13.604200},
	{-2729.006836, -1413.049805, 13.588500},
	{-2774.477051, -1384.505249, 13.360100},
	{-2767.590820, -1320.717163, 10.626200},
	{-2778.715820, -1382.623901, 15.034201},
	{-2778.136963, -1386.708984, 14.992900},
	{-2773.811523, -1322.229370, 11.263400},
	{-2782.627930, -1384.223267, 15.070300},
	{-2703.946533, -1416.349731, 13.576700},
	{-2727.663330, -1421.325073, 13.254001},
	{-2745.454834, -1298.841919, 12.926800},
	{-2698.072754, -1417.835571, 12.236700},
	{-2728.685303, -1425.021484, 13.555301},
	{-2732.388672, -1429.224609, 13.351100},
	{-2698.282715, -1423.950684, 13.281600},
	{-2747.968994, -1291.967407, 12.323501},
	{-2751.286133, -1291.029419, 13.675800},
	{-2729.859863, -1432.651123, 13.532400},
	{-2781.469238, -1409.607666, 13.258600},
	{-2757.678467, -1292.395630, 10.233000},
	{-2754.483398, -1288.683472, 12.592401},
	{-2719.589844, -1436.088379, 15.308001},
	{-2785.478760, -1410.883301, 13.430700},
	{-2776.955078, -1299.892944, 13.461101},
	{-2760.370117, -1435.548828, 13.488500},
	{-2706.247559, -1440.092163, 13.662801},
	{-2773.089844, -1289.992554, 13.293401},
	{-2777.545898, -1289.868408, 13.510500},
	{-2793.373535, -1303.570435, 11.489300},
	{-2796.305420, -1304.875854, 13.238900},
	{-2800.079346, -1304.928345, 13.320801},
	{-2795.161865, -1294.657715, 9.219700},
	{-2803.954834, -1297.890381, 12.883400},
	{-2760.342773, -1454.120483, 11.917300},
	{-2768.979980, -1457.009644, 13.480200},
	{-2763.136230, -1259.737549, 14.689600},
	{-2768.465820, -1261.389771, 13.412701},
	{-2776.171143, -1264.656494, 13.772099},
	{-2780.468262, -1266.425171, 11.552401},
	{-2777.160889, -1262.108032, 13.666699},
	{-2809.139648, -1277.934082, 10.882300},
	{-2761.216797, -1246.052734, 13.247700},
	{-2760.465332, -1237.928345, 13.405400},
	{-2766.620361, -1231.973511, 13.279800},
	{-2774.134521, -1232.795654, 15.282899},
	{-2799.015137, -1243.624146, 11.160001},
	{-2771.252686, -1228.851440, 13.772700},
	{-2819.994629, -1257.139038, 10.600901},
	{-2801.128906, -1241.040527, 13.681000},
	{-2804.216797, -1240.584351, 13.630600},
	{-2819.766357, -1249.941040, 12.877100},
	{-2823.629639, -1250.733765, 13.532400},
	{-2801.206787, -1233.172974, 12.988700},
	{-2804.407471, -1233.613159, 13.715899},
	{-2824.150879, -1244.405273, 13.585200},
	{-2828.968018, -1242.233521, 11.989700},
	{-2818.881836, -1231.267944, 13.467000},
	{-2811.937988, -1223.236450, 13.525700},
	{-2818.380127, -1226.838623, 13.266900},
	{-2829.897461, -1233.098145, 11.952300},
	{-2483.381836, -1502.767456, 8.392940},
	{-2800.582764, -1299.616577, 12.722860}
};
new g_svalka_items_id[66][3] =
{//{ид предмета, объект предмета, стартовая ставка}
    {104, 10704, 3000},
    {105, 10705, 7000},
    {106, 10706, 13000},
    {115, 10715, 9000},
    {118, 10719, 19000},
    {119, 10718, 21000},
    {117, 10717, 4000},
    {103, 10703, 15000},
    {120, 10720, 15000},
    {122, 10722, 25000},
    {111, 10714, 35000},
    {112, 10713, 62000},
    {113, 10712, 41000},
    {114, 10711, 101000},
    {77, 10508, 22000},
    {78, 10509, 7000},
    {107, 10707, 3000},
    {108, 10708, 9000},
    {109, 10709, 12000},
    {110, 10507, 33000},
    {123, 10723, 41000},
    {74, 10505, 52000},
    {200, 13930, 40000},
    {192, 13922, 60000},
    {29, 10716, 2000},
    {197, 13927, 4000},
    {198, 13928, 4000},
    {199, 13929, 4000},
    {193, 13923, 10000},
    {189, 13949, 100000},
    {194, 13924, 7000},
    {195, 13925, 8000},
    {196, 13926, 9000},
    {301, 16196, 20000},
    {316, 16212, 10000},
    {317, 16214, 10000},
    {318, 16213, 10000},
    {319, 16215, 10000},
    {304, 16200, 500},
    {305, 16201, 300},
    {306, 16202, 300},
    {307, 16203, 250},
    {308, 16204, 150},
    {309, 16205, 150},
    {310, 16206, 1000},
    {311, 16207, 150},
    {312, 16208, 1000},
    {313, 16209, 150},
    {314, 16210, 5000},
    {315, 16211, 3000},
    {148, 10826, 500},
    {149, 10827, 1500},
    {150, 10828, 3000},
    {146, 10825, 1000},
    {147, 10824, 1000},
    {157, 10815, 700},
    {158, 10815, 700},
    {159, 10815, 700},
    {160, 10815, 700},
    {154, 10832, 1000},
    {153, 10831, 1000},
    {188, 13949, 1000},
    {155, 10833, 1000},
    {191, 13952, 1000},
    {156, 10834, 1000},
    {190, 13951, 1000}
};

stock OnCreateSvalka()
{
    for(new i; i < MAX_SVALKA_ITEMS; i++)
    {
        DestroyDynamicObject(g_svalka_items[i][S_ITEM_OBJECT]);
        new random_item = random(65);
        g_svalka_items[i][S_ITEM_OBJECT] = CreateDynamicObject(g_svalka_items_id[random_item][1], g_svalka_pos_items[i][0], g_svalka_pos_items[i][1], g_svalka_pos_items[i][2], 0.0, 0.0, 0.0);
        alt_svalka_items[i] = CreateDynamicSphere(g_svalka_pos_items[i][0], g_svalka_pos_items[i][1], g_svalka_pos_items[i][2],2.0,-1,-1);
        g_svalka_items[i][S_ITEM_TIME] = -1;
        g_svalka_items[i][S_ITEM_ID] = g_svalka_items_id[random_item][0];
        g_svalka_items[i][S_ITEM_BID] = g_svalka_items_id[random_item][2];
        g_svalka_items[i][S_ITEM_WIN_ID] = -1;
        g_svalka_items[i][S_ITEM_STATUS] = 1;
    }
    for(new i; i < MAX_SVALKA_CARS; i++)
    {
        DestroyVehicle(g_svalka_cars[i][S_CAR_OBJECT]);
        new random_car = random(264);
        new random_car_izons = RandomEx(50, 100);
        new procent = g_svalka_cars_id[random_car][1] / 150 * random_car_izons;
        new price = (g_svalka_cars_id[random_car][1] - procent) / 3;
        new car_color = random(10);
        g_svalka_cars[i][S_CAR_OBJECT] = CreateVehicle(g_svalka_cars_id[random_car][0],g_svalka_pos_cars[i][0],g_svalka_pos_cars[i][1],g_svalka_pos_cars[i][2],g_svalka_pos_cars[i][3], car_color, 0, 0, 0, VEHICLE_ACTION_TYPE_SVALKA_CAR);
        alt_svalka_cars[i] = CreateDynamicSphere(g_svalka_pos_cars[i][0],g_svalka_pos_cars[i][1],g_svalka_pos_cars[i][2],4.0,-1,-1);
        g_svalka_cars[i][S_CAR_TIME] = -1;
        g_svalka_cars[i][S_CAR_ID] = g_svalka_cars_id[random_car][0];
        g_svalka_cars[i][S_CAR_BID] = price; 
        g_svalka_cars[i][S_CAR_WIN_ID] = -1;
        g_svalka_cars[i][S_CAR_STATUS] = 1;
        g_svalka_cars[i][S_CAR_IZNOS] = random_car_izons;
        g_svalka_cars[i][S_CAR_COLOR] = car_color;
    }
    SendClientMessageToAll(0xead671FF, "{F3FF02}[Информация] {FFFFFF}Новая партия мусора была доставлена на свалку.");
}

public: Dump_OnPlayerClose(playerid)
{
    g_svalka_playerid[playerid] = -1;
	BitStream_1(playerid, s_CefInterface, t_CefHide, "BlackMarket");
	SetCameraBehindPlayer(playerid);
    return true;
}

public: Dump_OnPlayerSetBet(playerid, count)
{	
	if(g_svalka_playerid[playerid] == -1) return 1;
    new svalka_id = g_svalka_playerid[playerid];
    if(g_svalka_playerid_type[playerid] == 1)
    {
        if(g_svalka_cars[svalka_id][S_CAR_TIME] == 0) return GameText(playerid, "Аукцион окончен", 3000, 0);
        if(count > 1999999999) return GameText(playerid, "Максимальная допустимая ставка~r~~n~1.999.999.999 руб", 3000, 2);
        if(g_svalka_playerid_bet[playerid][0] == g_svalka_cars[svalka_id][S_CAR_BID]) return GameText(playerid, "Вы уже поставили максимальную ставку", 3000, 0);
        if(count <= g_svalka_cars[svalka_id][S_CAR_BID]) return GameText(playerid, "Нельзя поставить ставку равной или меньше текущей", 3000, 0);
        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), count - g_svalka_playerid_bet[playerid][0])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
        if(g_svalka_cars[svalka_id][S_CAR_TIME] == -1) 
        {
            g_svalka_cars[svalka_id][S_CAR_TIME] = 30;
            new query[200];
            format(query, sizeof query, "{FFFFFF}Аукцион\n{FFD700}%s\n{FFFFFF}Текущая стоимость: {FF8C00}%d руб\n{FFFFFF}Предложил: %s\n\nДо завершения аукциона осталось\n{FF8C00}%d {FFFFFF}сек",
            GetVehicleInfo(g_svalka_cars[svalka_id][S_CAR_ID], VI_NAME),
            count,
            GetPlayerNameEx(playerid),
            g_svalka_cars[svalka_id][S_CAR_TIME]
            );
            g_svalka_cars[svalka_id][S_CAR_LABEL] = CreateDynamic3DTextLabel(query, 0xFFFFFFFF, g_svalka_pos_cars[svalka_id][0],g_svalka_pos_cars[svalka_id][1],g_svalka_pos_cars[svalka_id][2], 15.0);
        }
        GivePlayerMoneyEx(playerid, -(count - g_svalka_playerid_bet[playerid][0]), "Ставка на свалке");
        g_svalka_playerid_svalka_id_car[playerid] = svalka_id;
        g_svalka_cars[svalka_id][S_CAR_BID] = count;
	    g_svalka_playerid_bet[playerid][0] = count;
        STRING_GLOBAL[0] = EOS;
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(g_svalka_cars[svalka_id][S_CAR_WIN_ID] == GetPlayerAccountID(i))
            {
                SCMF(i, 0xFFD700FF, "{FF8C00}%s {FFD700}предложил {FF8C00}%d руб {FFD700}за содержимое аукциона.", GetPlayerNameEx(playerid), count);
            }
            if(g_svalka_playerid[i] == -1) continue;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').setData('[0,0,0,%d,%d,%d,30,[[0,\"%s\"]]]'", 
            g_svalka_playerid_bet[i][0], 
            g_svalka_cars[svalka_id][S_CAR_BID], 
            g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100), 
            GetVehicleInfo(g_svalka_cars[svalka_id][S_CAR_ID], VI_NAME)
            );
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').bet = %d", g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100));
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').minBet = %d", g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100));
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').currentBet = %d", g_svalka_cars[svalka_id][S_CAR_BID]);
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').myBet = %d", g_svalka_playerid_bet[i][0]);
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        }
        g_svalka_cars[svalka_id][S_CAR_WIN_ID] = GetPlayerAccountID(playerid);
        g_svalka_cars[svalka_id][S_CAR_TIME] = 30;
    }
    else if(g_svalka_playerid_type[playerid] == 2)
    {
        if(g_svalka_items[svalka_id][S_ITEM_TIME] == 0) return GameText(playerid, "Аукцион окончен", 3000, 0);
        if(count > 1999999999) return GameText(playerid, "Максимальная допустимая ставка~r~~n~1.999.999.999 руб", 3000, 2);
        if(g_svalka_playerid_bet[playerid][1] == g_svalka_items[svalka_id][S_ITEM_BID]) return GameText(playerid, "Вы уже поставили максимальную ставку", 3000, 0);
        if(count <= g_svalka_items[svalka_id][S_ITEM_BID]) return GameText(playerid, "Нельзя поставить ставку равной или меньше текущей", 3000, 0);
        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), count - g_svalka_playerid_bet[playerid][1])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
        if(g_svalka_items[svalka_id][S_ITEM_TIME] == -1) 
        {
            g_svalka_items[svalka_id][S_ITEM_TIME] = 30;
            new query[200];
            format(query, sizeof query, "{FFFFFF}Аукцион\n{FFD700}%s\n{FFFFFF}Текущая стоимость: {FF8C00}%d руб\n{FFFFFF}Предложил: %s\n\nДо завершения аукциона осталось\n{FF8C00}%d {FFFFFF}сек",
            ItemsInfo[g_svalka_items[svalka_id][S_ITEM_ID]],
            count,
            GetPlayerNameEx(playerid),
            g_svalka_items[svalka_id][S_ITEM_TIME]
            );
            g_svalka_items[svalka_id][S_ITEM_LABEL] = CreateDynamic3DTextLabel(query, -1, g_svalka_pos_items[svalka_id][0],g_svalka_pos_items[svalka_id][1],g_svalka_pos_items[svalka_id][2] + 1.5, 15.0);
        }
        GivePlayerMoneyEx(playerid, -(count - g_svalka_playerid_bet[playerid][1]), "Ставка на свалке");
        g_svalka_playerid_svalka_item[playerid] = svalka_id;
        g_svalka_items[svalka_id][S_ITEM_BID] = count;
        g_svalka_playerid_bet[playerid][1] = count;
        STRING_GLOBAL[0] = EOS;
        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            if(g_svalka_items[svalka_id][S_ITEM_WIN_ID] == GetPlayerAccountID(i))
            {
                SCMF(i, 0xFFD700FF, "{FF8C00}%s {FFD700}предложил {FF8C00}%d руб {FFD700}за содержимое аукциона.", GetPlayerNameEx(playerid), count);
            }
            if(g_svalka_playerid[i] == -1) continue;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').setData('[0,0,0,%d,%d,%d,30,[[3,\"%s\"]]]'", 
            g_svalka_playerid_bet[i][1], 
            g_svalka_items[svalka_id][S_ITEM_BID], 
            g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100), 
            ItemsInfo[g_svalka_items[svalka_id][S_ITEM_ID]]
            );
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').bet = %d", g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100));
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').minBet = %d", g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100));
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').currentBet = %d", g_svalka_items[svalka_id][S_ITEM_BID]);
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').myBet = %d", g_svalka_playerid_bet[i][1]);
            BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        }
        g_svalka_items[svalka_id][S_ITEM_WIN_ID] = GetPlayerAccountID(playerid);
        g_svalka_items[svalka_id][S_ITEM_TIME] = 30;
    }
	return true;
}
stock OnPlayerOpenDump(playerid, svalka_id, type)
{
    g_svalka_playerid[playerid] = svalka_id;
    g_svalka_playerid_type[playerid] = type;
    if(type == 2) 
    {
        string_dialog[0] = EOS;
        format
        (
            string_dialog, sizeof string_dialog,
            "{FFFFFF}Вы что-то нашли, хотите прейти к торгам за этот предмет?\n\
            \n\
            {cda70e}Наименование: %s\n\
            {FFFFFF}Начальная стоимость: {cda70e}%d руб\n\
            \n\
            {FFFFFF}Эту награду можно будет продать в антикварном магазине.",
            ItemsInfo[g_svalka_items[svalka_id][S_ITEM_ID]], g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100)
        );
        Dialog
        (
            playerid, DIALOG_BET_SVALKA, DIALOG_STYLE_MSGBOX, 
            "Информация", 
            string_dialog,
            "Далее", "Закрыть"
        );
    }
    else
    {
        string_dialog[0] = EOS;
        format
        (
            string_dialog, sizeof string_dialog,
            "{FFFFFF}Вы хотите перейти к торгам за это транспортное средство?\n\
            \n\
            {cda70e}Модель: %s\n\
            {FFFFFF}Начальная стоимость: {cda70e}%d руб\n\
            {FFFFFF}Износ: {c77124}%d%",
            GetVehicleInfo(g_svalka_cars[svalka_id][S_CAR_ID], VI_NAME), g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100), g_svalka_cars[svalka_id][S_CAR_IZNOS]
        );
        Dialog
        (
            playerid, DIALOG_BET_SVALKA, DIALOG_STYLE_MSGBOX, 
            "Информация", 
            string_dialog,
            "Далее", "Закрыть"
        );
    }
    return 1;
}

stock OnPlayerOpenDumpInterface(playerid, svalka_id, type)
{
    g_svalka_playerid[playerid] = svalka_id;
    g_svalka_playerid_type[playerid] = type;
    if(type == 1) 
    {
        if(g_svalka_cars[svalka_id][S_CAR_TIME] == 0) return 1;
        if(g_svalka_playerid_svalka_id_car[playerid] != -1 && g_svalka_playerid_svalka_id_car[playerid] != svalka_id) return SCM(playerid, COLOR_YELLOW, "Вы уже начали торги за другой транспорт");
        STRING_GLOBAL[0] = EOS;
        new time_bet;
        if(g_svalka_cars[svalka_id][S_CAR_TIME] == -1) time_bet = 30;
        else time_bet = g_svalka_cars[svalka_id][S_CAR_TIME];
        format
        (	
            STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,0,0,%d,%d,%d,%d,[[0,\"%s\"]]]", 
            g_svalka_playerid_bet[playerid][0], 
            g_svalka_cars[svalka_id][S_CAR_BID], 
            g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100), 
            time_bet,
            GetVehicleInfo(g_svalka_cars[svalka_id][S_CAR_ID], VI_NAME)
        );
    }
    else if(type == 2)
    {
        if(g_svalka_items[svalka_id][S_ITEM_TIME] == 0) return 1;
        if(g_svalka_playerid_svalka_item[playerid] != -1 && g_svalka_playerid_svalka_item[playerid] != svalka_id) return SCM(playerid, COLOR_YELLOW, "Вы уже начали торги за другую вещь");
        new time_bet;
        if(g_svalka_items[svalka_id][S_ITEM_TIME] == -1) time_bet = 30;
        else time_bet = g_svalka_items[svalka_id][S_ITEM_TIME];
        STRING_GLOBAL[0] = EOS;
        format
        (	
            STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,0,0,%d,%d,%d,%d,[[3,\"%s\"]]]", 
            g_svalka_playerid_bet[playerid][1], 
            g_svalka_items[svalka_id][S_ITEM_BID], 
            g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100), 
            time_bet,
            ItemsInfo[g_svalka_items[svalka_id][S_ITEM_ID]]
        );
    }
    BitStream_2(playerid, s_CefInterface, t_CefShow,"BlackMarket", STRING_GLOBAL);
    return true;
}

stock Dump()
{
    for(new i; i < MAX_SVALKA_CARS; i++)
    {
        if(g_svalka_cars[i][S_CAR_TIME] == 0 || g_svalka_cars[i][S_CAR_TIME] == -1) continue;
        g_svalka_cars[i][S_CAR_TIME]--;
        new query[248];
        format(query, sizeof query, "{FFFFFF}Аукцион\n{FFD700}%s\n{FFFFFF}Текущая стоимость: {FF8C00}%d руб\n{FFFFFF}Предложил: %s\n\nДо завершения аукциона осталось\n{FF8C00}%d {FFFFFF}сек",
        GetVehicleInfo(g_svalka_cars[i][S_CAR_ID], VI_NAME),
        g_svalka_cars[i][S_CAR_BID],
        GetPlayerNameEx(GetPlayerIDBySqlID(g_svalka_cars[i][S_CAR_WIN_ID])),
        g_svalka_cars[i][S_CAR_TIME]
        );
        UpdateDynamic3DTextLabelText(g_svalka_cars[i][S_CAR_LABEL], 0xFFFFFFFF, query);
        if(g_svalka_cars[i][S_CAR_TIME] == 0)
        {
            DestroyDynamic3DTextLabel(g_svalka_cars[i][S_CAR_LABEL]);
            DestroyDynamicArea(alt_svalka_cars[i]);
            DestroyVehicle(g_svalka_cars[i][S_CAR_OBJECT]);
            new Random_car = random(10);
            format
            (
                query, sizeof query, 
                "INSERT INTO ownable_cars (owner_id,model_id,color_1,color_2,vinil,pos_x,pos_y,pos_z,angle,create_time,iznos) VALUES ('%d','%d','%d','%d','%d','%f','%f','%f','%f','%d','%d')",
                g_svalka_cars[i][S_CAR_WIN_ID],
                g_svalka_cars[i][S_CAR_ID],
                g_svalka_cars[i][S_CAR_COLOR],
                0,
                -1,
                g_svalka_pos_cars_win[Random_car][0],
                g_svalka_pos_cars_win[Random_car][1],
                g_svalka_pos_cars_win[Random_car][2],
                g_svalka_pos_cars_win[Random_car][3],
                gettime(),
                g_svalka_cars[i][S_CAR_IZNOS]
            );
            mysql_query(mysql, query, false);
            foreach(new idx: Player)
            {
                if(!IsPlayerConnected(idx)) continue;
                else if(!IsPlayerLogged(idx)) continue;
                if(g_svalka_playerid_svalka_id_car[idx] != i) continue;
                new win_id = GetPlayerIDBySqlID(g_svalka_cars[i][S_CAR_WIN_ID]);
	            if(win_id != INVALID_PLAYER_ID)
                {
                    format(query, sizeof query, "{FF8C00}%s {32CD32}одерживает победу в аукционе за {FF8C00}%d руб.", GetPlayerNameEx(win_id), g_svalka_playerid_bet[win_id][0]);
                    SCM(idx, 0x32CD32FF, query);
                }
                BitStream_1(idx, s_CefInterface, t_CefHide, "BlackMarket");
                if(g_svalka_cars[i][S_CAR_WIN_ID] == GetPlayerAccountID(idx))
                {
                    g_svalka_playerid_bet[idx][0] = 0;
                    g_svalka_playerid_svalka_id_car[idx] = -1;
                    SCM(idx, 0x7CFC00FF, "Вы получили своё транспортное средство со свалки, при спавне оно появится возле вогонов.");
                }
                else
                {
                    GivePlayerMoneyEx(idx, g_svalka_playerid_bet[idx][0], "Возврат ставки на свалке");
                    g_svalka_playerid_svalka_id_car[idx] = -1;
                    g_svalka_playerid_bet[idx][0] = 0;
                }
            }
        }
    }
    for(new i; i < MAX_SVALKA_ITEMS; i++)
    {
        if(g_svalka_items[i][S_ITEM_TIME] == 0 || g_svalka_items[i][S_ITEM_TIME] == -1) continue;
        g_svalka_items[i][S_ITEM_TIME]--;
        new query[248];
        format(query, sizeof query, "{FFFFFF}Аукцион\n{FFD700}%s\n{FFFFFF}Текущая стоимость: {FF8C00}%d руб\n{FFFFFF}Предложил: %s\n\nДо завершения аукциона осталось\n{FF8C00}%d {FFFFFF}сек",
        ItemsInfo[g_svalka_items[i][S_ITEM_ID]],
        g_svalka_items[i][S_ITEM_BID],
        GetPlayerNameEx(GetPlayerIDBySqlID(g_svalka_items[i][S_ITEM_WIN_ID])),
        g_svalka_items[i][S_ITEM_TIME]
        );
        UpdateDynamic3DTextLabelText(g_svalka_items[i][S_ITEM_LABEL], 0xFFFFFFFF, query);
        if(g_svalka_items[i][S_ITEM_TIME] == 0)
        {
            DestroyDynamic3DTextLabel(g_svalka_items[i][S_ITEM_LABEL]);
            DestroyDynamicArea(alt_svalka_items[i]);
            DestroyDynamicObject(g_svalka_items[i][S_ITEM_OBJECT]);
            format
            (
                query, sizeof query , 
                "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', %d, %d, %d, %d, %d)", 
                g_svalka_items[i][S_ITEM_WIN_ID], 
                ItemsInfo[g_svalka_items[i][S_ITEM_ID]], 
                8, 
                g_svalka_items[i][S_ITEM_ID],
                0, 
                1, 
                0
            );
            mysql_query(mysql, query, false);
            foreach(new idx: Player)
            {
                if(!IsPlayerConnected(idx)) continue;
                else if(!IsPlayerLogged(idx)) continue;
                if(g_svalka_playerid_svalka_item[idx] != i) continue;
                new win_id = GetPlayerIDBySqlID(g_svalka_items[i][S_ITEM_WIN_ID]);
	            if(win_id != INVALID_PLAYER_ID)
                {
                    format(query, sizeof query, "{FF8C00}%s {32CD32}одерживает победу в аукционе за {FF8C00}%d руб.", GetPlayerNameEx(win_id), g_svalka_playerid_bet[win_id][1]);
                    SCM(idx, 0x32CD32FF, query);
                }
                BitStream_1(idx, s_CefInterface, t_CefHide, "BlackMarket");
                if(g_svalka_items[i][S_ITEM_WIN_ID] == GetPlayerAccountID(idx))
                {
                    g_svalka_playerid_bet[idx][1] = 0;
                    g_svalka_playerid_svalka_item[idx] = -1;
                    SCM(idx, 0x7CFC00FF, "Вы получили свой предмет со свалки, оно находится в разделе `Мои награды`.");
                }
                else
                {
                    GivePlayerMoneyEx(idx, g_svalka_playerid_bet[idx][1], "Возврат ставки на свалке");
                    g_svalka_playerid_svalka_item[idx] = -1;
                    g_svalka_playerid_bet[idx][1] = 0;
                }
            }
        }
    }
}

new status_player_blackmarket[MAX_PLAYERS]; // открыто/закрыто меню
new type_blackmarket; // тип валюты донат/вирты
new bet_player_blackmarket[MAX_PLAYERS]; // ставка игрока
new last_bet_blackmarket; // последняя ставка
new time_blackmarket[2]; // 0 - время до начала | 1 - время до конца
new winner_player_blackmarket; // номер аккаунта игрока который выигрывает в аукционе
new dlya_vadima;
#define MAX_PRIZE_BLACKMARKET	(2)
new type_prize_blackmarket[MAX_PRIZE_BLACKMARKET]; // 0 - авто | 1 - одежда | 2 - аксессуар | 3 - предмет
new id_prize_blackmarket[MAX_PRIZE_BLACKMARKET];
new Text3D: text_blackmarket; // текст в ангаре
new object_blackmarket[2]; // объект в ангаре | 0 - машина , 1 - нпс
stock OnPlayerOpenBlackMarket(playerid)
{
	status_player_blackmarket[playerid] = 1;
	if(time_blackmarket[1] != 0)
	{
		STRING_GLOBAL[0] = EOS;
		for(new i; i < MAX_PRIZE_BLACKMARKET; i++)
		{
			new query[64];
			if(type_prize_blackmarket[i] == 0) format(query, sizeof query, "[%d,\"%s\"],", type_prize_blackmarket[i], GetVehicleInfo(id_prize_blackmarket[i], VI_NAME));
			else if(type_prize_blackmarket[i] == 1) format(query, sizeof query, "[%d,\"Одежда [№ %d]\"],", type_prize_blackmarket[i], id_prize_blackmarket[i]);
			else if(type_prize_blackmarket[i] == 2) format(query, sizeof query, "[%d,\"Аксессуар [№ %d]\"],", type_prize_blackmarket[i], id_prize_blackmarket[i]);
			else format(query, sizeof query, "[%d,\"%s\"],", type_prize_blackmarket[i], ItemsInfo[id_prize_blackmarket[i]]);
			strcat(STRING_GLOBAL, query);
		}
		new str_len = strlen(STRING_GLOBAL);
		strdel(STRING_GLOBAL, str_len - 1, str_len);
		format
		(	
			STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,0,%d,%d,%d,%d,%d,[%s]]", 
			type_blackmarket, 
			bet_player_blackmarket[playerid], 
			last_bet_blackmarket, 
			last_bet_blackmarket + (last_bet_blackmarket / 100), 
			time_blackmarket[1], 
			STRING_GLOBAL
		);
		BitStream_2(playerid, s_CefInterface, t_CefShow,"BlackMarket", STRING_GLOBAL);
		if(type_blackmarket == 0) GameText(playerid, "Данный аукцион~n~~r~принимает только фишки", 3000, 2);
		if(type_blackmarket == 1) GameText(playerid, "Данный аукцион~n~~y~принимает только донат", 3000, 2);
		SetPlayerCameraPos(playerid,-1766.024414,2891.523437,7.521500);
        SetPlayerCameraLookAt(playerid,-1759.6050,2894.0237,5.9712);
	}
	return true;
}

public: BlackMarket_OnPlayerClose(playerid)
{
	if(g_svalka_playerid[playerid] != -1) return Dump_OnPlayerClose(playerid);
	status_player_blackmarket[playerid] = 0; 
	BitStream_1(playerid, s_CefInterface, t_CefHide, "BlackMarket");
	SetCameraBehindPlayer(playerid);
	return true;
}

public: BlackMarket_OnPlayerSetBet(playerid, count)
{
	if(g_svalka_playerid[playerid] != -1) return Dump_OnPlayerSetBet(playerid, count);
	if(status_player_blackmarket[playerid] != 1) return 1;
	if(time_blackmarket[1] == 0) return GameText(playerid, "Аукцион окончен", 3000, 0);
	if(count > 1999999999) return GameText(playerid, "Максимальная допустимая ставка~r~~n~1.999.999.999 фишек", 3000, 2);
	if(bet_player_blackmarket[playerid] == last_bet_blackmarket) return GameText(playerid, "Вы уже поставили максимальную ставку", 3000, 0);
	if(count <= last_bet_blackmarket) return GameText(playerid, "Нельзя поставить ставку равной или меньше текущей", 3000, 0);
	if(type_blackmarket == 0) 
	{
		if(GetIteam(playerid, 293) < (count - bet_player_blackmarket[playerid])) return GameText(playerid, "~r~Недостаточно~n~фишек", 3000, 2);
		GiveIteam(playerid, 293, 0, count - bet_player_blackmarket[playerid], 0);
	}
	if(type_blackmarket == 1) 
	{
		if(GetPlayerCurrentDonate(playerid) < (count - bet_player_blackmarket[playerid])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerDonate(playerid, -(count - bet_player_blackmarket[playerid]), "Ставка на Черном рынке", true, true);
	}
	SetPlayerData(playerid, P_BLACK_MARKET_BET, count);
	UpdatePlayerDatabaseInt(playerid, "black_market_bet", GetPlayerData(playerid, P_BLACK_MARKET_BET));
	last_bet_blackmarket = count;
	bet_player_blackmarket[playerid] = count;
	time_blackmarket[1] = time_blackmarket[1] + 10;
	foreach(new i: Player)
    {
        if(!IsPlayerConnected(i)) continue;
        else if(!IsPlayerLogged(i)) continue;
		if(winner_player_blackmarket == GetPlayerAccountID(i))
		{
			SCMF(i, COLOR_BLUENEW, "Игрок {FFFFFF}%s [%d] {B8CEF6}Перебил вашу ставку на аукционе `Чёрный рынок`", GetPlayerNameEx(playerid), playerid);
		}
		if(status_player_blackmarket[i] != 1) continue;
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').bet = %d", last_bet_blackmarket + (last_bet_blackmarket / 100));
		BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').minBet = %d", last_bet_blackmarket + (last_bet_blackmarket / 100));
		BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').currentBet = %d", last_bet_blackmarket);
		BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').myBet = %d", bet_player_blackmarket[i]);
		BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
	if(winner_player_blackmarket) CreatePlayerNotification(winner_player_blackmarket, "Чёрный рынок", "Вашу ставку на аукционе `Чёрный рынок` перебили");
	winner_player_blackmarket = GetPlayerAccountID(playerid);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffa500}Лот {FFFFFF}№1\n {ffa500}Ставка: {FFFFFF}%s фишек", formatInt(last_bet_blackmarket));
    UpdateDynamic3DTextLabelText(text_blackmarket, 0xFFFFFFEE, STRING_GLOBAL);
	return true;
}

stock BlackMarket()
{
	if(time_blackmarket[0] != 0)
	{
		time_blackmarket[0]--;
		if(time_blackmarket[0] == 0)
		{
			time_blackmarket[1] = dlya_vadima;
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffa500}Лот {FFFFFF}№1\n {ffa500}Ставка: {FFFFFF}%s фишек", formatInt(last_bet_blackmarket));
			text_blackmarket = CreateDynamic3DTextLabel(STRING_GLOBAL, 0xFFFFFFFF, -1759.6050,2894.0237,6.9712 + 0.1, 8.0);
			for(new i; i < MAX_PRIZE_BLACKMARKET; i++)
			{
				if(type_prize_blackmarket[i] == 0)
				{
					object_blackmarket[0] = CreateVehicle(id_prize_blackmarket[i],-1759.6050,2894.0237,5.9712,90.3436, 1, 1, -1, 0, VEHICLE_ACTION_TYPE_BLACKMARKET);
					SetVehicleVirtualWorld(object_blackmarket[0], 4);
				}
				if(type_prize_blackmarket[i] == 1)
				{
					object_blackmarket[1] = CreateActor(id_prize_blackmarket[i], -1762.5723,2892.5132,6.0870,114.7690);
					SetActorVirtualWorld(object_blackmarket[1], 4);
				}
			}
			SendClientMessageToAll(COLOR_BLUENEW, "------------------------------ Чёрный Рынок ------------------------------");
			SendClientMessageToAll(COLOR_BLUENEW, "Прямо сейчас стартует Чёрный рынок с эксклюзивными авто и одеждой.");
			SendClientMessageToAll(COLOR_BLUENEW, "Место проведение Черного рынка — ангар недалеко от контейнеров.");
			SendClientMessageToAll(COLOR_BLUENEW, "------------------------------ Чёрный Рынок ------------------------------");
		}
	}
	else if(time_blackmarket[1] != 0)
	{
		time_blackmarket[1]--;
		if(time_blackmarket[1] == 0)
		{
			DestroyVehicle(object_blackmarket[0]);
			DestroyActor(object_blackmarket[1]);
            DestroyDynamic3DTextLabel(text_blackmarket);
			new player_win = -1;
			foreach(new i: Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				if(bet_player_blackmarket[i] != 0)
				{
					if(winner_player_blackmarket != GetPlayerAccountID(i)) 
					{
						GameText(i, "Аукцион черного рынка окончен~n~вы ~r~проиграли", 3000, 0);
						SCM(i, COLOR_YELLOW, "Вам вернули вашу ставку с аукциона `Чёрный рынок` находятся в `Мои награды`");
						if(type_blackmarket == 0) GivePlayerMyPrizes(i, "Фишки", 8, 293, 0, bet_player_blackmarket[i], 0);
						else if(type_blackmarket == 1) GivePlayerMyPrizes(i, "Донат", 10, 0, 0, bet_player_blackmarket[i], 0);
					}
					if(winner_player_blackmarket == GetPlayerAccountID(i)) 
					{
						GameText(i, "Аукцион черного рынка окончен~n~вы ~g~выиграли", 3000, 0);
						player_win = i;
						SCM(i, COLOR_YELLOW, "Ваш выигрыш с аукциона `Чёрный рынок` находится в `Мои награды`");
					}
				}
				if(bet_player_blackmarket[i] == 0) continue;
				bet_player_blackmarket[i] = 0;
			}
			if(winner_player_blackmarket != 0)
			{
				new query[200];
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s [№%d]", GetVehicleInfo(id_prize_blackmarket[0], VI_NAME), id_prize_blackmarket[0]);
				format(query, sizeof query , "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', 3, %d, 0, 1, -1)", winner_player_blackmarket, STRING_GLOBAL, id_prize_blackmarket[0]);
				mysql_tquery(mysql, query, "", "");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Одежда [№%d]", id_prize_blackmarket[1]);
				format(query, sizeof query , "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', 4, %d, 0, 1, 0)", winner_player_blackmarket, STRING_GLOBAL, id_prize_blackmarket[1]);
				mysql_tquery(mysql, query, "", "");
				if(player_win != -1)
				{
					STRING_GLOBAL[0] = EOS;
					SendClientMessageToAll(COLOR_BLUENEW, "{F81414}------------------------------[{FFFFFF}ИНФОРМАЦИЯ{F81414}]------------------------------");
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{F81414}Победил в аукционе `Черный рынок` {FFFFFF}%s [%d]", GetPlayerNameEx(player_win), player_win);
					SendClientMessageToAll(COLOR_BLUENEW, STRING_GLOBAL);
				}
				winner_player_blackmarket = 0;
			}
		}
	}
	return true;
}

public:OnPlayerFillClose(playerid)
{
	SetPVarInt(playerid, "VidTopliva", 0);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Fuel");
	return true;
}

public: OnPlayerStartFill(playerid, event, fuel)
{
    new stationid = GetNearestBusiness(playerid, 35.0);
    new vehicleid = GetPlayerVehicleID(playerid);
	new fuels = fuel - floatround(GetVehicleData(vehicleid, V_FUEL));
    new price = fuels * GetBusinessData(stationid, B_PROD_PRICE);
	if(GetPVarInt(playerid, "VidTopliva") != 1) return SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), BitStream_1(playerid, s_CefInterface, t_CefHide, "Fuel");
	if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return GameText(playerid, "~r~недостаточно~n~средств", 3000, 2);
    GivePlayerMoneyEx(playerid, -price, "Покупка топлива на заправке", true, true);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~b~+%d Л~n~~r~-%d РУБ", fuels, price);
	GameText(playerid, STRING_GLOBAL, 4000, 2);
    SetVehicleData(vehicleid, V_FUEL, fuel);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Fuel').stopFilling()");
	AddBusinessProfit(playerid, stationid, (price / 2), fuels);
	return 1;
}

stock OnPlayerSelectFuelClass(playerid, event)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new index = GetVehicleData(vehicleid, V_MODELID);
 	switch(event)
 	{
 		case 0:
		{
			if(GetVehicleInfo(index, VI_TYPE_FUEL) == 92) SetPVarInt(playerid, "VidTopliva", 1);
			else SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), SetPVarInt(playerid, "VidTopliva", 0);
		}
 		case 1:
		{
			if(GetVehicleInfo(index, VI_TYPE_FUEL) == 95) SetPVarInt(playerid, "VidTopliva", 1);
			else SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), SetPVarInt(playerid, "VidTopliva", 0);
		}
 		case 2: 
 		{
			if(GetVehicleInfo(index, VI_TYPE_FUEL) == 98) SetPVarInt(playerid, "VidTopliva", 1);
			else SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), SetPVarInt(playerid, "VidTopliva", 0);
	 	}
 		case 3:
 		{
 		    if(GetVehicleInfo(index, VI_TYPE_FUEL) == 33) SetPVarInt(playerid, "VidTopliva", 1);
			else SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), SetPVarInt(playerid, "VidTopliva", 0);
	 	}
 	}
}

new active_acs_id[MAX_PLAYERS];
new active_acs[MAX_PLAYERS];
#define MAX_ACTIVE_ACS	2
enum E_ACTIVE_ACCESSORIES_STRUCT
{
	ACTIVE_ACS_ID,
	ACTIVE_ACS_NAME[24]
};
new g_info_active_accessories[MAX_ACTIVE_ACS][E_ACTIVE_ACCESSORIES_STRUCT] = 
{
	{17163, "Гидроскутер"},
	{16229, "Велосипед"}
};

stock GetActiveAcsName(acs_id)
{
	new fmt_text[24];
	for(new i; i < sizeof g_info_active_accessories; i++)
	{
		if(g_info_active_accessories[i][ACTIVE_ACS_ID] != acs_id)
			continue;
		format(fmt_text, sizeof fmt_text, "%s", g_info_active_accessories[i][ACTIVE_ACS_NAME]);
		break;
	}
	return fmt_text;
}

stock IsActiveAcsID(acs_id)
{
	for(new i; i < sizeof g_info_active_accessories; i++)
	{
		if(g_info_active_accessories[i][ACTIVE_ACS_ID] != acs_id)
			continue;
		return 1;
	}
	return 0;
}

enum E_ACCESSORIES_STRUCT
{
	ACS_TYPE,
	ACS_COUNT,
    ACS_ID,
    ACS_NAME[32],
    ACS_PRICE,
    ACS_INDEX
};

new g_load_accessories_shop[121][E_ACCESSORIES_STRUCT] = 
{
 	{0, 0, 19006, "Красные", 300000, 0}, 
	{0, 1, 19007, "Желтые", 350000, 0}, 
	{0, 2, 19008, "Зеленые", 350000, 0},
	{0, 3, 19009, "Синие", 350000, 0}, 
	{0, 4, 19010, "Розовые", 350000, 0},
	{0, 5, 19011, "Гипноз", 350000, 0},
	{0, 6, 19012, "Черные", 350000, 0},
	{0, 7, 19013, "Глаза", 350000, 0},
	{0, 8, 19014, "Шахматы", 350000, 0},
	{0, 9, 19015, "Обычные", 350000, 0},
	{0, 10, 19016, "X-Ray", 350000, 0},
	{0, 11, 13953, "Для сноуборда", 8750000, 0},
	{0, 12, 13995, "Gucci", 1050000, 0},
	{0, 13, 13996, "American", 1050000, 0},
	{0, 14, 13997, "С обводкой", 1050000, 0},
	{0, 15, 13998, "Синий тигр", 1050000, 0},
	{0, 16, 13999, "Желтые", 1050000, 0},
	{0, 17, 14462, "Модные очки", 1665000, 0},
	{1, 0, 18908, "Морская", 850000, 0},
	{1, 1, 18909, "Небо", 850000, 0},
	{1, 2, 18910, "Огненная", 850000, 0},
	{1, 3, 13969, "Пустыня", 1500000, 0},
	{2, 0, 18891, "Пингвин", 1500000, 0},
	{2, 1, 18892, "Свинья", 1500000, 0},
	{2, 2, 18893, "Кошка", 1500000, 0},
	{2, 3, 18894, "Белый медведь", 1500000, 0},
	{2, 4, 18895, "Лошадь", 1500000, 0},
	{2, 5, 18896, "Кобра", 1500000, 0},
	{2, 6, 18897, "Заяц", 1500000, 0},
	{2, 7, 18898, "Бурый медведь", 1500000, 0},
	{2, 8, 18899, "Сова", 1500000, 0},
	{2, 9, 18900, "Петух", 1500000, 0},
	{2, 10, 18901, "Мышь", 1500000, 0},
	{2, 11, 18902, "Зебра", 1500000, 0},
	{2, 12, 18903, "Тигрица", 1500000, 0},
	{2, 13, 18904, "Тигр", 1500000, 0},
	{2, 14, 18905, "Лягушка", 1500000, 0},
	{2, 15, 18911, "Свинья 2", 1500000, 0},
	{2, 16, 18912, "Монстр", 1500000, 0},
	{2, 17, 18913, "Мясник", 1500000, 0},
	{2, 18, 18914, "Обезьяна", 1500000, 0},
	{2, 19, 18915, "Обезьяна 2", 1500000, 0},
	{2, 20, 18916, "Карнавал", 1500000, 0},
	{2, 21, 18918, "Гном", 1500000, 0},
	{2, 22, 18919, "Печенька", 1500000, 0},
	{2, 23, 18920, "Снеговик", 1500000, 0},
	{2, 24, 13954, "Perfect", 1500000, 0},
	{2, 25, 13956, "Обычная", 1500000, 0},
	{2, 26, 13957, "V", 4000000, 0},
	{2, 27, 13958, "Brift", 2000000, 0},
	{2, 28, 13959, "Chanel Black", 3000000, 0},
	{2, 29, 13960, "Chanel White", 3000000, 0},
	{2, 30, 13961, "Chanel Pink", 3000000, 0},
	{2, 31, 13962, "Chanel Gold", 3000000, 0},
	{2, 32, 13985, "Дьявол", 2500000, 0},
	{2, 33, 13986, "Монстр", 2500000, 0},
	{2, 34, 13987, "Supreme", 3000000, 0},
	{2, 35, 13988, "Bigness", 2000000, 0},
	{2, 36, 13989, "Bigness", 2000000, 0},
	{2, 37, 13990, "Bigness", 2000000, 0},
	{2, 38, 13991, "Bigness", 2000000, 0},
	{2, 39, 13992, "Bigness", 2000000, 0},
	{2, 40, 14456, "Маска", 15000000, 0},
	{2, 41, 14461, "Противогаз", 30000000, 0},
	{2, 42, 14465, "Загадочная маска", 7000000, 0},
	{3, 0, 18921, "Черный", 800000, 0},
	{3, 1, 18922, "Красный", 800000, 0},
	{3, 2, 18923, "Голубой", 800000, 0},
	{3, 3, 18924, "Армейский", 800000, 0},
	{3, 4, 18925, "Французский", 800000, 0},
	{4, 0, 18931, "Магическая", 1000000, 0},
	{4, 1, 18935, "Желтая кепка", 1000000, 0},
	{4, 2, 18941, "Черная кепка (Обратная)", 1000000, 0},
	{4, 3, 18943, "Зеленая кепка (Обратная)", 1000000, 0},
	{4, 4, 18944, "Огненная", 1000000, 0},
	{4, 5, 18945, "Черно-Белая", 1000000, 0},
	{4, 6, 18946, "Серая", 1000000, 0},
	{4, 7, 18947, "Черная", 1000000, 0},
	{4, 8, 18948, "Голубая", 1000000, 0},
	{4, 9, 18949, "Зеленая", 1000000, 0},
	{4, 10, 18950, "Красная", 1000000, 0},
	{4, 11, 18951, "Желтая", 1000000, 0},
	{4, 12, 18971, "Текстура 1", 1000000, 0},
	{4, 13, 18972, "Текстура 2", 1000000, 0},
	{4, 14, 18973, "Текстура 3", 1000000, 0},
	{4, 15, 13970, "Gucci", 3000000, 0},
	{4, 16, 13971, "Gucci", 3000000, 0},
	{4, 17, 13972, "Chill", 1500000, 0},
	{4, 18, 13973, "Nike", 1750000, 0},
	{4, 19, 13974, "Religion", 1400000, 0},
	{4, 20, 13975, "Adidas", 1750000, 0},
	{4, 21, 13976, "Mercedes-Benz", 2500000, 0},
	{4, 22, 13977, "Audi", 2500000, 0},
	{4, 23, 13978, "BMW", 2500000, 0},
	{4, 24, 13979, "Gucci Gold", 3000000, 0},
	{4, 25, 13980, "Gucci White", 3000000, 0},
	{4, 26, 13981, "Gucci Black", 3000000, 0},
	{4, 27, 13982, "Supreme", 3000000, 0},
	{4, 28, 13983, "Ralph Laurnen", 2200000, 0},
	{4, 29, 13984, "Ralph Laurnen White", 2200000, 0},
	{4, 30, 14460, "Шляпа из фольги", 2000000, 0},
	{4, 31, 14463, "Ушки демона", 10000000, 0},
	{5, 0, 13964, "Gucci", 50000000, 5},
	{5, 1, 13965, "Louis Vuitton", 50000000, 5},
	{5, 2, 13966, "OFF WHITE", 50000000, 5},
	{5, 3, 13967, "Radmir", 50000000, 5},
	{5, 4, 13968, "Adidas", 50000000, 5},
	{6, 0, 14001, "OFF-WHITE", 5000000, 6},
	{6, 1, 14002, "OFF-WHITE", 5000000, 6},
	{7, 0, 14009, "Серебряные", 2500000, 7},
	{7, 1, 14008, "Золотые", 2500000, 7},
	{7, 2, 14010, "Бронзовые", 2500000, 7},
	{7, 3, 14011, "Apple", 2500000, 7},
	{8, 0, 14003, "Разноцветная", 2750000, 12},
	{8, 1, 14004, "NIKE", 2200000, 10},
	{8, 2, 14005, "Gucci", 2750000, 12},
	{8, 3, 14006, "Louis Vuitton", 3300000, 15},
	{9, 0, 14457, "Красный чокер", 1750000, 9},
	{9, 1, 14458, "Чокер с сердечком", 1750000, 9},
	{9, 2, 14459, "Черный чокер", 1750000, 1},
	{9, 3, 14466, "Белый чокер", 1750000, 9}
};

public: RemovePlayerWeapon(playerid, weaponid)
{
    if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50)
        return;
    new saveweapon[13], saveammo[13];
    for(new slot = 0; slot < 13; slot++)
        GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
    ResetPlayerWeapons(playerid);
    for(new slot; slot < 13; slot++)
    {
        if(saveweapon[slot] == weaponid || saveammo[slot] == 0)
            continue;
        GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
    }
    GivePlayerWeapon(playerid, 0, 1);
}

public: BS_OnChangeCategory(playerid, category)
{
	SetPVarInt(playerid, "category_bs", category);
	new query[68];
	STRING_GLOBAL = "";
	for(new i; i < sizeof g_load_accessories_shop; i++)
	{
		if(g_load_accessories_shop[i][ACS_TYPE] == category)
		{
			format(query, sizeof query, "[%d,\"%s\",%d,%d,%d],", 
			g_load_accessories_shop[i][ACS_ID], 
			g_load_accessories_shop[i][ACS_NAME], 
			g_load_accessories_shop[i][ACS_PRICE], 
			category,
			g_load_accessories_shop[i][ACS_COUNT]
			);
			strcat(STRING_GLOBAL, query);
		}
	}
	new str_len;
	str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Accessories').setItems('[%s]')", STRING_GLOBAL);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	switch(category)
	{
	    case 0,1,2,3,4:
		{
			SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
			SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
			ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
		}
		case 5,6:
		{
			SetPlayerPos(playerid, 1243.4812,-2779.9861,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			TogglePlayerControllable(playerid, false);
			SetPlayerCameraPos(playerid,1241.211425,-2779.911376,1001.63);
			SetPlayerCameraLookAt(playerid,1251.122192,-2779.970458,1000.0);
		}
		case 7:
		{
			SetPlayerPos(playerid, 1243.4812,-2779.9861,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			TogglePlayerControllable(playerid, false);
			SetPlayerCameraPos(playerid,1242.810791,-2779.194580,1001.194885);
			SetPlayerCameraLookAt(playerid,1250.301391,-2785.346435,998.735961);
		}
		case 8:
		{
			SetPlayerPos(playerid, 1243.4812,-2779.9861,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			TogglePlayerControllable(playerid, false);
			SetPlayerCameraPos(playerid,1244.402343,-2778.809082,1001.75);
			SetPlayerCameraLookAt(playerid,1238.271728,-2786.645019,1000.0);
		}
		case 9:
		{
			SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
			SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
			ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
		}
	}
	return 1;
}

public: BS_OnPlayerClickItem(playerid, item)
{
	new category = GetPVarInt(playerid, "category_bs");
	new index;
	if(category == 0) index = 7;//очки
	if(category == 1) index = 1;//банданы
	if(category == 2) index = 1;//маски
	if(category == 3) index = 3;//береты
	if(category == 4) index = 3;//шляпы
	if(category == 5) index = 2;//сумка
	if(category == 6) index = 8;//ремень
	if(category == 7) index = 4;//часы
	if(category == 8) index = 0;//рюкзак
	if(category == 9) index = 5;//чекер
	for(new i; i < sizeof g_load_accessories_shop; i++)
	{
		if(g_load_accessories_shop[i][ACS_TYPE] == category && g_load_accessories_shop[i][ACS_COUNT] == item)
		{
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), g_load_accessories_shop[i][ACS_PRICE])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
			SetPVarInt(playerid, "Type1", 2);
			SetPVarInt(playerid, "akstype", category);
			SetPVarInt(playerid, "price_acs", g_load_accessories_shop[i][ACS_PRICE]);
			SetPVarInt(playerid, "EditObjectAcs", 1);
			SetPVarInt(playerid, "EditObjectAcsIndex", index);
			if(category == 0) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2,0.056999,0.018000,0.026000,93.999984,82.199966,-7.299994);
			if(category == 1) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2, 0.157999,0.015000,0.016999,96.100013,-49.100017,-88.999954);
			if(category == 2) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2);
			if(category == 3) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2);
			if(category == 4) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2, 0.3);
			if(category == 5) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 15,0.032000,-0.071999,-0.311999,0.000000,0.000000,-15.800003), SetPVarInt(playerid, "Type1", 15);
			if(category == 6) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 15,0.023000,-0.119999,-0.477999), SetPVarInt(playerid, "Type1", 15);
			if(category == 7) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 6,0.000000,-0.045999,0.012999,15.100001,-96.299995,-165.699935,1.224001,1.022000), SetPVarInt(playerid, "Type1", 6);
			if(category == 8) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 15), SetPVarInt(playerid, "Type1", 15);
			if(category == 9) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2, 0.157999,0.015000,0.016999,96.100013,-49.100017,-88.999954);
			EditAttachedObject(playerid, index);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('Accessories')");
			break;
		}
	}
	return true;
}

public: BS_OnCloseInterface(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Accessories");
	SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
	SetPlayerFacingAngle(playerid, 89.0);
	SetCameraBehindPlayer(playerid);
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);
	new businessid = GetPlayerInBiz(playerid);
	SetPlayerVirtualWorld(playerid, businessid + 255);
	DeletePVar(playerid,"aks_id");
	return 1;
}

public:MenuInt_OnPlayerKey(playerid) BitStream_2(playerid, s_CefInterface, t_CefShow, "PlayerInteraction", "[\"\",[[1,\"Персонаж\",\"Character\",1],[1,\"Транспорт\",\"Vehicle\",4],[1,\"Другое\",\"Other\",6]]]");
public:MenuInt_OnPlayerClickItem(playerid, type, event)
{
    if(event == 0)
    {
        if(type == 0) callcmd::menu(playerid);
        if(type == 1) callcmd::gps(playerid);
        if(type == 2) SendClientMessage(playerid, COLOR_GOLD, "{FFAF00}Используйте:{FFFFFF}{"#cW"} /pass [ID игрока]");
        if(type == 3) callcmd::anim(playerid, "");
        if(type == 4) callcmd::craft(playerid);
        if(type == 5)
        {
            if(GetPlayerData(playerid, P_TARGET_ID) != INVALID_PLAYER_ID)
                ShowPlayerTrade(playerid, GetPlayerData(playerid, P_TARGET_ID));
        } //задания
        if(type == 6){} //штрафы
        if(type == 7){} //мои професии
        if(type == 8) callcmd::warns(playerid);
        if(type == 9) callcmd::plist(playerid);
        if(type == 10) callcmd::liclist(playerid);
        if(type == 11) callcmd::leave(playerid);
        if(type == 12) callcmd::lock(playerid, "1");
        if(type == 13) callcmd::trunk(playerid);
        if(type == 14) SendClientMessage(playerid, 0xCECECEFF, "{FFAF00}Используйте:{FFFFFF} /carpass [ID игрока]");
        if(type == 15) MakeStroboskopes(playerid);
        if(type == 16)
        {
			MusicCarPlayer(playerid);
        }
        if(type == 17){} //список событий
        if(type == 18) callcmd::leaders(playerid);
        if(type == 19) 
        {
            new vehicleid = GetNearestVehicleID(playerid, 6.0),
			    vehicleid1 = GetPlayerOwnableCarLast(playerid);
            if(vehicleid1 == vehicleid)
			{
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new car_id = GetOwnableCarData(index, OC_SQL_ID);
                new query[250],
                    Cache: result;
                mysql_format(mysql, query, sizeof query, "SELECT * FROM cars_accessories WHERE car_id='%d'", car_id);
                result = mysql_query(mysql, query, true);
                new rows = cache_num_rows();
                if(!rows) return SendClientMessage(playerid, 0x4169E1FF, "На данном транспорте не установлены аксессуары");
                SetPVarInt(playerid, "AcsVehicleCar", vehicleid);
                string_dialog[0] = EOS;
                for(new i; i < rows; i++)
                {
                    SetPlayerListitemValue(playerid, i, cache_get_field_content_int(i, "id"));
                    format(query, sizeof query, "%d. Аксессуар [№%d]\n", i + 1, cache_get_field_content_int(i, "model_id"));
                    strcat(string_dialog, query);
                }
                strdel(string_dialog, strlen(string_dialog) - 2, strlen(string_dialog));
                Dialog
                (
                    playerid, DIALOG_CAR_ACCESSORIES_LIST, DIALOG_STYLE_LIST,
                    "{FFD83D}Список украшений",
                    string_dialog,
                    "Снять", "Выйти"
                );
                cache_delete(result);
            }
            else SendClientMessage(playerid, 0x4169E1FF, "Вы должны находиться около личного транспорта");
        }
        if(type == 20)
        {
            new vehicleid = GetNearestVehicleID(playerid, 6.0),
			    vehicleid1 = GetPlayerOwnableCarLast(playerid);
            if(vehicleid1 == vehicleid)
			{
                new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new car_id = GetOwnableCarData(index, OC_SQL_ID);
                new query[250],
                    Cache: result;
                mysql_format(mysql, query, sizeof query, "SELECT * FROM cars_accessories WHERE car_id='%d'", car_id);
                result = mysql_query(mysql, query, true);
                new rows = cache_num_rows();
                if(!rows) return SendClientMessage(playerid, 0x4169E1FF, "На данном транспорте не установлены активные аксессуары");
                SetPVarInt(playerid, "AcsVehicleCar", vehicleid);
                string_dialog = "Название\tСтатус\n";
                for(new i; i < rows; i++)
                {
                    new model_id = cache_get_field_content_int(i, "model_id");
                    if(!IsActiveAcsID(model_id)) 
                        continue;
                    SetPlayerListitemValue(playerid, i, cache_get_field_content_int(i, "id"));
                    format(query, sizeof query, "%s\t%s\n", GetActiveAcsName(model_id), active_acs_id[playerid] != cache_get_field_content_int(i, "id") ? "На транспорте" : "Снято с транспорта");
                    strcat(string_dialog, query);
                }
                strdel(string_dialog, strlen(string_dialog) - 2, strlen(string_dialog));
                Dialog
                (
                    playerid, DIALOG_CAR_ACTIVE_ACS_LIST, DIALOG_STYLE_TABLIST_HEADERS,
                    "{FFFFFF}Активные аксессуары",
                    string_dialog,
                    "Выбор", "Закрыть"
                );
                cache_delete(result);
            }
        }
    }
    if(event == 1)
    {
        if(type == 1) 
        {
            if(GetPlayerData(playerid, P_TARGET_ID) == INVALID_PLAYER_ID) 
                BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Личная информация\",1,0,0],[0,\"Навигация\",1,1,1],[0,\"Мои документы\",1,2,2],[0,\"Анимации\",1,3,3],[0,\"Скрафтить\",1,4,4],[0,\"Задания\",1,5,5],[0,\"Список штрафов\",1,6,6],[0,\"Список профессий\",1,7,7],[0,\"Список предупреждений\",1,8,8],[0,\"Бонусы\",1,9,9],[0,\"Списки доступных сотрудников\",1,10,0],[0,\"Уволиться\",1,11,0]]]')");
            else 
                BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Личная информация\",1,0,0],[0,\"Навигация\",1,1,1],[0,\"Мои документы\",1,2,2],[0,\"Анимации\",1,3,3],[0,\"Скрафтить\",1,4,4],[0,\"Обмен предметами\",1,5,5],[0,\"Список штрафов\",1,6,6],[0,\"Список профессий\",1,7,7],[0,\"Список предупреждений\",1,8,8],[0,\"Бонусы\",1,9,9]]]')");
        }
        if(type == 4)
        {
            new vehicleid = GetVehicleModel(GetPlayerVehicleID(playerid));
	        if(vehicleid == 15217 || vehicleid == 15620 || vehicleid == 528 || vehicleid == 15143 || vehicleid == 525 || vehicleid == 15186 || vehicleid == 596 || vehicleid == 597 || vehicleid == 598 || vehicleid == 15609 || vehicleid == 15608 || vehicleid == 15607 || vehicleid == 15606 || vehicleid == 15610 || vehicleid == 15241 || vehicleid == 523 || vehicleid == 427 || vehicleid == 15604 || vehicleid == 15282 || vehicleid == 15283)
                BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Закрыть двери\",4,12,0],[0,\"Багажник\",4,13,1],[0,\"Украшения\",4,19,2],[0,\"Посмотреть тех. паспорт\",4,14,3],[0,\"Стробоскопы\",4,15,4],[0,\"Активные украшения\",4,20,5]]]')");
            else BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Магнитолла\",4,16,0],[0,\"Закрыть двери\",4,12,1],[0,\"Багажник\",4,13,2],[0,\"Украшения\",4,19,3],[0,\"Посмотреть тех. паспорт\",4,14,4],[0,\"Активные украшения\",4,20,5]]]')");
        }
        if(type == 6) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Список событий\",6,17,0],[0,\"Список руководителей\",6,18,1]]]')");
    }	  
    return true;  
}

#define GetNeftData(%0,%1) 			g_neft[%0][%1]
#define SetNeftData(%0,%1,%2) 		g_neft[%0][%1] = %2
#define AddNeftData(%0,%1,%2,%3) 		g_neft[%0][%1] %2= %3
#define IsNeftOwned(%0)				(GetNeftData(%0, N_OWNER_ID) > 0)
#define MAX_NEFT			(100)
new neftobj[MAX_NEFT], neftobj1[MAX_NEFT], neftobj2[MAX_NEFT], neftobj3[MAX_NEFT], neftobj4[MAX_NEFT], neftobj5[MAX_NEFT], neftobj6[MAX_NEFT];
new status_neft = 0;
new status_nefte = 0;
new fuels_neft[MAX_NEFT] = 0;
new timerneft = 0;
new neftcreatetime[MAX_NEFT];
new neftfuels[MAX_NEFT];
new neftpickup[MAX_NEFT];
new Text3D:neftlabel[MAX_NEFT];
new Text3D:neftlabelty[MAX_NEFT];
new neft_cp[MAX_PLAYERS];
enum E_NEFT_STRUCT
{
	N_SQL_ID,			// ид в базе данных
	N_OWNER_ID,			// ид аккаунта владельца
	N_IMPROVEMENTS,		// уровень улучшений
	N_RENT_DATE,		// аренда на n времени
	N_PRICE,			// стоимость бизнеса
	N_RENT_PRICE,		// плата за аренду в день
	N_FUELS,
	N_BALANCE,
	N_WORK_STATUS,		// статус (открыта/закрыта)
	Float: N_POS_X,		// позиция бизнеса
	Float: N_POS_Y,		// позиция бизнеса
	Float: N_POS_Z,		// позиция бизнеса
	Float: N_POS_RZ,// позиция после выхода из бизнеса
	N_OWNER_NAME[20 + 1],	// имя владельца
};

new g_neft[MAX_NEFT][E_NEFT_STRUCT];
new g_neft_loaded;
public: LoadNeft()
{
	new query[200],
		Cache: result, rows;
    result = mysql_query(mysql, "SELECT * FROM neftenasos", true);
	rows = cache_num_rows();
	if(rows > MAX_NEFT){
		rows = MAX_NEFT;
		print("[Neft]: DB rows > MAX_NEFT");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetNeftData(idx, N_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetNeftData(idx, N_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
		SetNeftData(idx, N_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetNeftData(idx, N_RENT_DATE,		cache_get_field_content_int(idx, "rent"));
		SetNeftData(idx, N_PRICE,			cache_get_field_content_int(idx, "price"));
        SetNeftData(idx, N_RENT_PRICE,			cache_get_field_content_int(idx, "rent_price"));
		SetNeftData(idx, N_FUELS, 			cache_get_field_content_int(idx, "neftfuels"));
		SetNeftData(idx, N_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetNeftData(idx, N_WORK_STATUS,			cache_get_field_content_int(idx, "work"));
		SetNeftData(idx, N_POS_X,			cache_get_field_content_float(idx, "x"));
		SetNeftData(idx, N_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetNeftData(idx, N_POS_Z,			cache_get_field_content_float(idx, "z"));
		SetNeftData(idx, N_POS_RZ,			cache_get_field_content_float(idx, "rz"));
		cache_get_field_content(idx, "owner_name", g_neft[idx][N_OWNER_NAME], mysql, 21);
		mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET id=%d WHERE id=%d",idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);
		if(GetNeftData(idx, N_OWNER_ID) == 0){
			SetNeftData(idx, N_WORK_STATUS, 0);
	   	    SetNeftData(idx, N_IMPROVEMENTS,0);
			SetNeftData(idx, N_FUELS,0);
	   	    format(g_neft[idx][N_OWNER_NAME], 21, "None");
	   	    mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET owner_id=0,improvements=0,work=0,neftfuels=0,owner_name='None' WHERE id=%d", GetNeftData(idx, N_SQL_ID));
			mysql_query(mysql, query, false);
	   	}
		else{
			if(GetNeftData(idx, N_WORK_STATUS) == 0) neftobj[idx] = CreateDynamicObject(15836, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 2, GetNeftData(idx, N_POS_Z) -0.955624,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ)), neftcreatetime[idx] = 1800;
			if(GetNeftData(idx, N_WORK_STATUS) > 0){
				neftobj1[idx] = CreateDynamicObject(15831, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 2, GetNeftData(idx, N_POS_Z) -0.955624,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				neftobj2[idx] = CreateDynamicObject(15832, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 6.52, GetNeftData(idx, N_POS_Z) + 5.10438,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				neftobj3[idx] = CreateDynamicObject(15834, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 0.74, GetNeftData(idx, N_POS_Z) + 12.6144,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				neftobj4[idx] = CreateDynamicObject(15833, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 7.2, GetNeftData(idx, N_POS_Z) + 12.2344,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				neftobj5[idx] = CreateDynamicObject(15835, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 9.14, GetNeftData(idx, N_POS_Z) + 13.8844,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
			}
			neftobj6[idx] = CreateDynamicObject(15839, GetNeftData(idx, N_POS_X) + 9.22999, GetNeftData(idx, N_POS_Y) + 5.31, GetNeftData(idx, N_POS_Z) + 1.24437,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
			neftpickup[idx] = CreatePickup(19134, 23, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 6.82, GetNeftData(idx, N_POS_Z) + 0.0244, -1, PICKUP_ACTION_TYPE_NEFT);
			if(GetNeftData(idx, N_IMPROVEMENTS) == 0) neftfuels[idx] = 4500;
			if(GetNeftData(idx, N_IMPROVEMENTS) > 0) neftfuels[idx] = 6700;
			neftlabelty[idx] = CreateDynamic3DTextLabel("", -1, GetNeftData(idx, N_POS_X) + 9.22999,GetNeftData(idx, N_POS_Y) + 4.60,GetNeftData(idx, N_POS_Z)+3, 20.0);
			neftlabel[idx] = CreateDynamic3DTextLabel("", -1, GetNeftData(idx, N_POS_X) + 2,GetNeftData(idx, N_POS_Y) + 2,GetNeftData(idx, N_POS_Z)+3, 20.0);
			CreateDynamicMapIcon(GetNeftData(idx, N_POS_X), GetNeftData(idx, N_POS_Y), GetNeftData(idx, N_POS_Z), 11, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
        CallLocalFunction("UpdateNeftLabel", "i", idx);
	}
	g_neft_loaded = rows;
	cache_delete(result);
	printf("[Нефтевышки]: Нефтевышек загружено: %d", g_neft_loaded);
}

public: UpdateNeftLabel(neftid)
{
	new fmt_str[300 + 1];
	if(GetNeftData(neftid, N_WORK_STATUS) == 0){
		if(!IsNeftOwned(neftid)) format(fmt_str, sizeof fmt_str,"{FF8800}Строительство нефтяного насоса {ffffff}№%d\n{FF8800}Закончится через 0 мин.\n{FF8800}Владелец: {ffffff}Государство\n", neftid);
		else format(fmt_str, sizeof fmt_str,"{FF8800}Строительство нефтяного насоса {ffffff}№%d\n{FF8800}Закончится через {ffffff}%d мин.\n{FF8800}Владелец: {ffffff}%s\n", neftid, neftcreatetime[neftid] / 60, GetNeftData(neftid, N_OWNER_NAME));
	}
	if(GetNeftData(neftid, N_WORK_STATUS) > 0){
		if(!IsNeftOwned(neftid)) format(fmt_str, sizeof fmt_str,"{FF8800}Нефтяной насос {ffffff}№%d\n{FF8800}Владелец: {ffffff}Государство\n",neftid);
		else format(fmt_str, sizeof fmt_str,"{FF8800}Нефтяной насос {ffffff}№%d\n{FF8800}Владелец: {ffffff}%s\n",neftid,GetNeftData(neftid, N_OWNER_NAME));
	}
	UpdateDynamic3DTextLabelText(neftlabel[neftid], 0xFFFF00FF, fmt_str);
	format(fmt_str, sizeof fmt_str, "{FF8800}Резервуар:\n{FFFFFF}%d.%d/%d", GetNeftData(neftid, N_FUELS), fuels_neft[neftid], neftfuels[neftid]);
	UpdateDynamic3DTextLabelText(neftlabelty[neftid], 0xFFFF00FF, fmt_str);
}

public: CreatePlayerNeft(playerid)
{
	new query[148];
	new idx = GetNearestNeft(playerid, 8.0);
	if(GetNeftData(idx, N_OWNER_ID) != 0) return 1;
	SetNeftData(idx, N_OWNER_ID, GetPlayerAccountID(playerid));
	neftobj[idx] = CreateDynamicObject(15836, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 2, GetNeftData(idx, N_POS_Z) -0.955624,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ)), neftcreatetime[idx] = 1800;
	neftobj6[idx] = CreateDynamicObject(15839, GetNeftData(idx, N_POS_X) + 9.22999, GetNeftData(idx, N_POS_Y) + 5.31, GetNeftData(idx, N_POS_Z) + 1.24437,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
	neftpickup[idx] = CreatePickup(19134, 23, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 6.82, GetNeftData(idx, N_POS_Z) + 0.0244, -1, PICKUP_ACTION_TYPE_NEFT);
	neftlabelty[idx] = CreateDynamic3DTextLabel("", -1, GetNeftData(idx, N_POS_X) + 9.22999,GetNeftData(idx, N_POS_Y) + 4.60,GetNeftData(idx, N_POS_Z)+3, 20.0);
	neftlabel[idx] = CreateDynamic3DTextLabel("", -1, GetNeftData(idx, N_POS_X) + 2,GetNeftData(idx, N_POS_Y) + 2,GetNeftData(idx, N_POS_Z)+3, 20.0);
	neftfuels[idx] = 4500;
	CreateDynamicMapIcon(GetNeftData(idx, N_POS_X), GetNeftData(idx, N_POS_Y), GetNeftData(idx, N_POS_Z), 11, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
	format(g_neft[idx][N_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
	mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET owner_id=%d,owner_name='%s' WHERE id=%d", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), GetNeftData(idx, N_SQL_ID));
	mysql_query(mysql, query, false);
	CallLocalFunction("UpdateNeftLabel", "i", idx);
	return 1;
}

public: NeftMove()
{
	for(new idx; idx < g_neft_loaded; idx ++)
	{
		if(GetNeftData(idx, N_WORK_STATUS) == 2){
			if(status_nefte == 0){
				MoveDynamicObject(neftobj2[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) + 6.50, GetNeftData(idx, N_POS_Z) + 5.10638,0.01, 90.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj3[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) - 0.76, GetNeftData(idx, N_POS_Z) + 12.6344,0.01, 30.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj5[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) - 9.16, GetNeftData(idx, N_POS_Z) + 11.8844,0.6, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj4[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) + 7.22, GetNeftData(idx, N_POS_Z) + 16.2344,1.1, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				status_neft = 1;
				timerneft = 4;
			}
			if(status_nefte == 1){
				MoveDynamicObject(neftobj2[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 6.52, GetNeftData(idx, N_POS_Z) + 5.10438,0.01, 180.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj4[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 7.2, GetNeftData(idx, N_POS_Z) + 16.2344,0.01, -20.000000, 0, GetNeftData(idx, N_POS_RZ));
				status_neft = 2;
				timerneft = 4;
			}
			if(status_nefte == 2){
				MoveDynamicObject(neftobj2[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) + 6.50, GetNeftData(idx, N_POS_Z) + 5.10638,0.01, 270.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj3[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 0.74, GetNeftData(idx, N_POS_Z) + 12.6144,0.01, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj5[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 9.14, GetNeftData(idx, N_POS_Z) + 13.8844,0.6, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj4[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) + 7.22, GetNeftData(idx, N_POS_Z) + 12.2344,1.1, -20.000000, 0, GetNeftData(idx, N_POS_RZ));
				status_neft = 3;
				timerneft = 4;
			}
			if(status_nefte == 3){
				MoveDynamicObject(neftobj2[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 6.52, GetNeftData(idx, N_POS_Z) + 5.10438,0.01, 360.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj4[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 7.2, GetNeftData(idx, N_POS_Z) + 12.2344,0.01, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				status_neft = 0;
				timerneft = 4;
			}
			if(GetNeftData(idx, N_FUELS) < neftfuels[idx]){
				if(fuels_neft[idx] < 9) fuels_neft[idx] = fuels_neft[idx] + 1;
				else SetNeftData(idx, N_FUELS, GetNeftData(idx, N_FUELS) + 1), fuels_neft[idx] = 0;
			}
			new query[148];
			mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET neftfuels=%d WHERE id=%d", GetNeftData(idx, N_FUELS), GetNeftData(idx, N_SQL_ID));
			mysql_query(mysql, query, false);
			CallLocalFunction("UpdateNeftLabel", "i", idx);
		}	
	}
	return 0;
}

stock ShowMenuNeft(playerid)
{
	new fmt[248];
	if(GetNeftData(GetPVarInt(playerid, "ownableneft"), N_WORK_STATUS) <= 1) format(fmt, sizeof fmt, "Включить насос");
	if(GetNeftData(GetPVarInt(playerid, "ownableneft"), N_WORK_STATUS) == 2) format(fmt, sizeof fmt, "Выключить насос");
	format(fmt, sizeof fmt,"{FFFFFF}1. %s\n{FFFFFF}2. Заказать вывоз нефти\n{FFFFFF}3. Отменить заказ\n{FFFFFF}4. Информация\n{FFFFFF}5. Список улучшений\n{FFFFFF}6. Продать нефтяной насос игроку\n{FFFFFF}7. Демонтировать нефтяной насос",fmt);
	return Dialog(playerid, DIALOG_NEFTENASOS, DIALOG_STYLE_LIST, "{FFFFFF}Управление нефтенасосом", fmt, "Далее", "Закрыть");
}

stock GetNearestNeft(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new neft_id = -1;
	new Float: my_dist;
	for(new idx; idx < g_neft_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetNeftData(idx, N_POS_X), GetNeftData(idx, N_POS_Y), GetNeftData(idx, N_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			neft_id = idx;
		}
	}
	return neft_id;
}

new bool:donate_case[MAX_PLAYERS];
new kase_osnova[MAX_PLAYERS];
new kase_krishka[MAX_PLAYERS];
new kase_prize[MAX_PLAYERS];
new kase_open[MAX_PLAYERS];
enum E_CASE_STRUCT
{
	E_NAME_PRIZE[40],
	E_PRICE_PRIZE,
	E_ITEM_PRIZE,
	E_SIZE_PRIZE,
	E_TYPE_PRIZE, 
	E_BLOCK_PRIZE,
	E_INDX_PRIZE,
};
new g_case_info_1[20][E_CASE_STRUCT] =
{
	{"Кепка MB", 25000, 13976, 6, 0, 13976, 4},
    {"Кепка BMW", 25000, 13978, 6, 0, 13978, 4},
    {"ВАЗ 2106", 75000, 567, 3, 0, 14535, -1},
    {"ЗАЗ", 15000, 555, 3, 0, 14535, -1},
    {"BMW E30", 300000, 534, 3, 1, 14537, -1},
    {"Гонщик", 270000, 15314, 4, 1, 10816, 0},
    {"Toyota Mark 2", 700000, 15068, 3, 1, 14537, -1},
	{"Subaru Impreza WRX", 3000000, 15234, 3, 2, 14538, 0},
	{"MMC Lancer Evo", 6000000, 15256, 3, 2, 14538, 0},
	{"Mazda RX-7", 6000000, 15254, 3, 2, 14538, -1},
	{"Маска Форсаж", 0, 14520, 6, 3, 14520, 2},
	{"Маска Форсаж", 0, 14521, 6, 3, 14521, 2},
	{"Маска Форсаж", 0, 14522, 6, 3, 14522, 2},
	{"Крест Вин Дизеля", 0, 14519, 6, 3, 14519, 9},
	{"Пол Уокер", 0, 15453, 4, 4, 16506, 0},
	{"Вин Дизель", 0, 258, 4, 4, 16506, 0},
	{"Mazda RX-7", 0, 15255, 3, 3, 14536, 0},
	{"Nissan GTR", 0, 15257, 3, 4, 14536, -1},
	{"Dodge Charger", 0, 15253, 3, 4, 14536, -1},
	{"Toyota Supra", 0, 15258, 3, 4, 14536, 0}
};
new g_case_info_2[18][E_CASE_STRUCT] =
{
    {"Vip Silver(3 дня)", 25000, 0, 5, 0, 14609, 0},
	{"Золотые часы", 25000, 14598, 6, 0, 14598, 7},
	{"Шляпа `Мафиозника`", 25000, 14599, 6, 0, 14599, 4},
    {"ОКА", 20000, 549, 3, 0, 14535, -1},
    {"ВАЗ 2108", 80000, 565, 3, 0, 14535, -1},
    {"JEEP", 400000, 15115, 3, 1, 14537, -1},
    {"Перчаточный Маньяк", 150000, 108, 4, 1, 10816, 0},
    {"Mercedes W140 S600", 1000000, 585, 3, 1, 14537, -1},
    {"Toyota Land Cruiser 300", 9000000, 15290, 3, 2, 14538, -1},
	{"Саша `Белый`", 3000000, 15437, 4, 2, 16506, 0},
	{"Mersedes GLS 63 AMG", 10000000, 15286, 3, 2, 14538, -1},
	{"Берет", 0, 14597, 6, 3, 14597, 3},
	{"Чемодан", 0, 14600, 6, 3, 14600, 7},
	{"Чехол от гитары", 0, 14596, 6, 3, 14596, 8},
	{"Мафиозник", 0, 15455, 4, 3, 16506, 0},
	{"Тони Монтана", 0, 15454, 4, 3, 16506, 0},
	{"Rollce Royce Phantom Bunker", 0, 15283, 3, 4, 14536, -1},
	{"Rollce Royce Cullinan Bunker", 0, 15282, 3, 4, 14536, -1}
};
new g_case_info_3[18][E_CASE_STRUCT] =
{
	{"Маска тыквы", 30000, 14052, 6, 0, 14052 ,2},
	{"Цепочка пришельца", 25000, 14623, 6, 0, 14623, 9},
	{"Lada Инвалидка", 50000, 15281, 3, 0, 14535, -1},
	{"Иж Комби", 80000, 546, 3, 0, 14535, -1},
	{"Volvo V40", 1000000, 15152, 3, 1, 14537, -1},
	{"Шляпник", 300000, 33, 4, 1, 16506, 0},
	{"Hundai Santa Fe", 600000, 909, 3, 1, 14537, -1},
	{"Ford Mustang", 10000000, 15293, 3, 2, 14538, -1},
	{"Псих", 3500000, 234, 4, 2, 16506, 0},
	{"Дьявольский смайлик", 6666666, 14628, 6, 2, 14628, 9},
	{"Котелок", 0, 14707, 6, 3, 14707, 8},
	{"Плащ", 0, 14705, 6, 3, 14705, 10},
	{"Цири", 0, 15481, 4, 3, 16506, 0},
	{"Ведьмак", 0, 15479, 4, 3, 16506, 0},
	{"Призрак", 0, 14738, 6, 3, 14738, 9},
	{"Скин", 0, 15480, 4, 4, 16506, 0},
	{"Hot Rod", 0, 15295, 3, 4, 14536, 0},
	{"Mersedez-Benz BRABUS HALLOWEEN", 0, 15294, 3, 4, 14536, -1}
};
new g_case_info_4[18][E_CASE_STRUCT] =
{
	{"Берет", 30000, 18923, 6, 0, 18923, 3},
    {"Чёрные очки", 35000, 19012, 6, 0, 19012, 0},
	{"Москвич", 50000, 576, 3, 0, 14535, -1},
    {"ЛУАЗ", 80000, 542, 3, 0, 14535, -1},
    {"Mazda 3 MPS", 1200000, 15087, 3, 1, 14537, -1},
    {"УАЗ ХАНТЕР", 400000, 500, 3, 1, 14537, -1},
	{"Ford Focus 3", 800000, 516, 3, 1, 14537, -1},
    {"Шлем Алтын", 4000000, 14795, 6, 2, 14795, 2},
	{"Чёрный противогаз", 6000000, 14791, 6, 2, 14791, 2},
	{"Dodge Charger SRT HellCat", 1000000, 15217, 3, 2, 14538, 0},
	{"Бронижелет Gucci", 0, 14797, 6, 3, 14797, 11},
	{"Бронижелет Lui Vitton", 0, 14798, 6, 3, 14798, 11},
	{"Бородач", 0, 15484, 4, 3, 16506, 0},
	{"Бурунов", 0, 15485, 4, 3, 16506, 0},
	{"Фермер", 0, 15492, 4 ,3, 16506, 0},
	{"Стэтхэм", 0, 15496, 4, 4, 16506, 0},
	{"Скала", 0, 15493, 4, 4, 16506, 0},
	{"Волга КГБ", 0, 15604, 3, 4, 14536, -1}
};
new g_case_info_5[22][E_CASE_STRUCT] =
{
	{"Шапка ушанка", 28000, 14012, 6, 0, 14012,4},
	{"Новогодняя шапка", 25000, 14203, 6, 0, 14203,4},
	{"Скутер", 30000, 15127, 3, 0, 14535,-1},
	{"ВАЗ 2104", 45000, 15079, 3, 0, 14535,-1},
	{"ВАЗ 2101", 75000, 439, 3, 0, 14535,-1},
	{"Парень в черном", 200000, 15390, 4, 1, 10816,0},
	{"Toyota Hachiroku AE86", 450000, 15184, 3, 1, 14537,-1},
	{"Subaru Impreza WRX", 500000, 15131, 3, 1, 14537,-1},
	{"Nissan Silvia", 750000, 15090, 3, 1, 14537,-1},
	{"Mitsubitsi Lancer X", 1000000, 15125, 3, 1, 14537,-1},
	{"Мурад", 2000000, 15515, 4, 2, 16506,0},
	{"Бодров", 2000000, 15463, 4, 2, 16506,0},
	{"Верка сердючка", 0, 15516, 4, 2, 16506,0},
	{"Дом на колесах", 0, 15277, 3, 2, 14538,0},
	{"Фура", 0, 15618, 3, 2, 14538,-1},
	{"Шапочка", 0, 15751, 6, 2, 15751,4},
	{"Рюкзачок", 0, 15746, 6, 3, 15746,8},
	{"Крылья синие", 0, 14781, 6, 3, 14781,13},
	{"Скин", 0, 15504, 4, 3, 16506,0},
	{"Петушара", 0, 15517, 4, 4, 16506,0},
	{"Дельфинчик", 0, 15750, 6, 4, 15750,8},
	{"Хасбик", 0, 15498, 4, 4, 16506,0}
};
new g_case_info_6[17][E_CASE_STRUCT] =
{
	{"Lada Инвалидка", 30000, 15281, 3, 0, 14535, -1},
	{"ЗАЗ", 15000, 555, 3, 0, 14535, -1},
	{"Черные очки", 20000, 19012, 6, 0, 19012, 0},
	{"Золотая маска", 100000, 15847, 6, 0, 15847, 2},
	{"Кинжал", 300000, 15850, 6, 1, 15850, 7},
	{"Yamaha Wolverine", 600000, 424, 3, 1, 14537, -1},
	{"Модник", 300000, 15313, 4, 1, 10816, 0},
	{"Куфия", 2000000, 15849, 6, 2, 15849, 4},
	{"Золотая корона", 3000000, 15848, 6, 2, 15848, 4},
	{"Олигарх", 0, 15534, 4, 2, 16506, 0},
	{"Mercedes-Benz Vito", 0, 15630, 3, 2, 14538, 2},
	{"Сумка с деньгами", 0, 15851, 6, 2, 15851, 5},
	{"Бизнесмен", 0, 15520, 4, 2, 16506, 0},
	{"Mercedes EQG", 0, 15627, 3, 2, 14538, 2},
	{"Деловой", 0, 15530, 4, 2, 16506, 0},
	{"Ferrari Enzo", 0, 15624, 3, 2, 14536, 1},
	{"Ferrari Enzo", 0, 15624, 3, 2, 14536, 0}
};
new g_case_info_7[18][E_CASE_STRUCT] =
{
	{"УАЗ Буханка", 30000, 15070, 3, 0, 14535, -1},
	{"ЛуАЗ 969", 15000, 542, 3, 0, 14535, -1},
	{"2 EXP", 20000, -1,7,0, 16506, 0},
	{"Обэма", 300000, 180, 4, 1, 16506, 2},
	{"UAZ Patriot", 300000, 554, 3, 1, 14537, -1},
	{"Mercedes Benz X", 1200000, 15147, 3, 1, 14537, -1},
	{"Паша Техник", 1400000, 15552, 4, 2, 16506, 0},
	{"Jeep Rubicon", 1600000, 15221, 3, 2, 14538, -1},
	{"Шлем Водолаза", 3000000, 15968, 6, 2, 15968, 2},
	{"Mercedes-Benz Патч", 0, 15634, 3, 2, 14538, -1},
	{"Кенгурятник", 0, 15967, 6, 3, 15967, 14},
	{"Бурундук", 0, 15969, 6, 3, 15969, 5},
	{"Скин Gost", 0, 15562, 4, 3, 16506, 0},
	{"Скин Мент", 0, 15566, 4, 3, 16506, 2},
	{"БРДМ", 0, 444, 3, 4, 14536, -1},
	{"БРДМ", 0, 444, 3, 4, 14536, 1},
	{"БРДМ", 0, 444, 3, 4, 14536, 2},
	{"БРДМ", 0, 444, 3, 4, 14536, 0}
};
new g_case_info_8[15][E_CASE_STRUCT] =
{
	{"Citroen Ami", 75000, 15641, 3, 0, 14535, -1},
	{"ИЖ-5", 35000, 521, 3, 0, 14535, -1},
	{"Hotline Miami", 25000, 18903, 6, 0, 15313, 2},
	{"Летний прикид", 500000, 15304, 4, 1, 16506, 2},
	{"CrossBike", 250000, 15130, 3, 1, 14537, -1},
	{"Mazda MX5 Miata", 450000, 15088, 3, 1, 14537, -1},
	{"Японка", 5000000, 15581, 4, 2, 16506, 0},
	{"LEXUS LX570", 4000000, 15071, 3, 2, 14538, -1},
	{"Маска мумии", 3000000, 16511, 6, 2, 16511, 2},
	{"Lamborghini Diablo", 0, 15650, 3, 3, 14538, -1},
	{"Рюкзак Зведный войны", 0, 16460, 6, 3, 16460, 8},
	{"Рюкзак Хамилион", 0, 16454, 6, 3, 16454, 8},
	{"Мумия", 0, 15577, 4, 3, 16506, 0},
	{"GMC Hummer EV", 0, 15647, 3, 4, 14536, -1},
	{"Яхта", 0, 15646, 3, 4, 14536, -1}
};
new g_case_info_9[16][E_CASE_STRUCT] =
{
	{"Маска тыквы", 30000, 14052, 6, 0, 14052, 2},
	{"Volvo 940", 50000, 404, 3, 0, 14535, -1},
	{"BMW M5 E28", 45000, 15207, 3, 0, 14535, -1},
	{"Subaru Impreza WRX", 550000, 15131, 3, 1, 14537, -1},
	{"НЕО", 170000, 15530, 4, 1, 10816, 0},
	{"Volkswagen Touareg", 450000, 15066, 3, 1, 14537, -1},
	{"Mercedes 560 SE", 3000000, 15155, 3, 2, 14538, -1},
	{"Летучая мышь", 4000000, 16598, 6, 2, 16598, 5},
	{"Франкенштейн", 5500000, 17000, 4, 4, 16506, 0},
	{"Покемон", 0, 16608, 6, 3, 16608, 8},
	{"Бронежелет Helloween", 0, 16606, 6, 3, 16606, 11},
	{"Helloween Bike", 0, 15657, 3, 3, 14538, -1},
	{"Мясник", 0, 15591, 4, 4, 16506, 0},
	{"Венздей", 0, 15538, 4, 4, 16506, 0},
	{"Helloween RollsRoyce", 0, 15659, 3, 4, 14536, -1},
	{"Helloween RollsRoyce Armour", 0, 15658, 3, 4, 14536, -1}
};
new g_case_info_10[15][E_CASE_STRUCT] =
{
    {"ВАЗ 2105", 105000, 15080, 3, 0, 14535, -1},
    {"ВАЗ 2102", 50000, 15663, 3, 0, 14535, -1},
    {"Новогодняя шапка", 45000, 16745, 6, 0, 16745, 4},
    {"Chevrolet Suburban", 1200000, 15214, 3, 1, 14537, -1},
    {"Honda Civic TypeR FN2", 2000000, 15171, 3, 1, 14537, -1},
    {"Зимний прикид", 450000, 17016, 4, 1, 16506, -1},
    {"Mercedes-Benz SL65 AMG", 3000000, 15178, 3, 2, 14538, -1},
    {"Шарф Гуччи", 3000000, 16776, 6, 2, 16776, 9},
    {"Гусь в шапке", 2500000, 16748, 6, 2, 16748, 8},
    {"Адидас", 0, 17024, 4, 3, 16506, 0},
    {"Аксессуар дракон", 0, 16697, 6, 3, 16697, 19},
    {"Ковалевский", 0, 17010, 4, 3, 16506, 0},
    {"Tesla Semi", 0, 15665, 3, 4, 14536, -1},
	{"Дед Мороз", 0, 17017, 4, 3, 16506, 0},
    {"BMW XM OR", 0, 15667, 3, 4, 14536, -1}
};
new g_case_info_11[14][E_CASE_STRUCT] =
{
    {"Honda CRX", 65000, 496, 3, 0, 14535, -1},
    {"Маска ниндзя", 50000, 16977, 6, 0, 16977, 2},
    {"Маска Кицуне", 160000, 16947, 6, 1, 16947, 2},
    {"Маска Анбу", 120000, 16979, 6, 1, 16979, 2},
    {"Toyota Hachiroku AE86", 300000, 15184, 3, 1, 14537, -1},
    {"Шляпа Архимага", 1400000, 16975, 6, 2, 16975, 4},
    {"Красный клинок", 1800000, 16941, 6, 2, 16941, 7},
    {"Проклятый дух", 3000000, 17044, 4, 2, 16506, 0},
    {"Посох", 3200000, 16976, 6, 3, 16976, 12},
    {"Скейтборд", 6400000, 16982, 6, 3, 16982, 18},
    {"Скейтборд", 6400000, 16983, 6, 3, 16983, 18},
    {"ЗИЛ 103", 0, 15681, 3, 4, 14536, -1},
    {"Наруто", 0, 17045, 4, 4, 16506, 0},
	{"Porsche 911 Mansory", 0, 15682, 3, 4, 14536, -1}
};
new g_case_info_12[13][E_CASE_STRUCT] =
{
    {"LADA 2103", 45000, 15648, 3, 0, 14535, -1},
    {"Рыжик", 5000, 22, 4, 0, 16506, 0},
    {"VW Golf 2", 57000, 527, 3, 0, 14535, -1},
    {"BMW 525i E34", 250000, 507, 3, 1, 14537, -1},
    {"Летний прикид", 360000, 15392, 4, 1, 16506, 0},
    {"Mercedes S320 CDI W220", 250000, 15664, 3, 1, 14537, -1},
    {"Пиратский пояс", 1500000, 17257, 6, 2, 17257, 6},
    {"Mercedes Brabus Iseki 26", 1500000, 572, 3, 2, 14538, -1},
    {"Пират", 3500000, 17064, 4, 2, 16506, 0},
    {"Посох чародея", 0, 17253, 6, 3, 17253, 12},
    {"Рюкзак бочка", 0, 17248, 6, 3, 17248, 8},
    {"Mercedes-Benz Brabus KART", 0, 571, 3, 4, 14536, -1},
	{"Mercedes XLP 900 6x6", 0, 557, 3, 4, 14536, -1}
};
new g_case_info_13[13][E_CASE_STRUCT] =
{
    {"ZAZ 1102 Таврия", 45000, 15600, 3, 0, 14535, -1},
    {"Обруч с рожками", 45000, 14463, 6, 0, 14463, 1},
    {"VW Passat 3B", 57000, 15698, 3, 0, 14535, -1},
    {"VW Golf R", 250000, 15183, 3, 1, 14537, -1},
    {"Иван Золо", 360000, 15433 , 4, 1, 16506, 0},
    {"Infinity Q50", 250000, 15220, 3, 1, 14537, -1},
    {"Мишка с шипами", 1500000, 17390, 6, 2, 17390, 8},
    {"Mercedes G63 6x6", 1500000, 573, 3, 2, 14538, -1},//=
    {"Цой", 3500000, 15363, 4, 2, 16506, 0},
    {"Кости вай", 0, 17394, 6, 3, 17394, 11},
    {"Мини Москвич", 0, 15699, 3, 3, 14538, 0},
    {"Хорор Мен", 0, 17070, 4, 4, 16506, -1},
    {"БМВ Каспер Мобиль", 0, 15653, 3, 4, 14536, -1}//=
};

new g_case_info_14[12][E_CASE_STRUCT] =
{
    {"Vip Silver(3 дня)", 25000, 0, 5, 0, 14609, -1},
    {"Lada 2113", 45000, 15654, 3, 0, 14535, 1},
    {"АЗЛК 2141", 57000, 17403, 3, 0, 14535, -1},
    {"Zeekr 001", 250000, 15675, 3, 1, 14537, -1},
    {"Одежда Андерграунд", 360000, 285, 4, 1, 16506, 0},
    {"Nissan 370Z", 250000, 15191, 3, 1, 14537, -1},
    {"Рюкзак Луи", 1500000, 17999, 6, 2, 17999, 8},
    {"Acura NSX", 1500000, 15159, 3, 2, 14538, -1},
    {"Шматко", 3500000, 15513, 4, 2, 16506, 0},
    {"Рюкзак чертик", 0, 18000, 6, 3, 18000, 8},
    {"Бронежелет НГ", 0, 17985, 6, 3, 17985, 11},
	{"НГ Ламба", 0, 17409, 3, 4, 14536, -1}
};

public: OpenCase(playerid)
{
	new Float:X,Float:Y,Float:Z,Float:angle;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, angle);
	if(GetPVarInt(playerid, "case_type") == 1){
		new Float: case_x = X + (1.4 * floatsin(-angle, degrees)),Float: case_y = Y + (1.4 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.7, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 2){
		new Float: case_x = X + (1.4 * floatsin(-angle, degrees)),Float: case_y = Y + (1.4 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.8, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 3){
		new Float: case_x = X + (1.455 * floatsin(-angle, degrees)),Float: case_y = Y + (1.455 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.2, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 4){
		new Float: krishka_x1 = X + (1.63 * floatsin(-angle, degrees)),Float: krishka_y1 = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], krishka_x1, krishka_y1, Z-0.6, 0.03, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 5){
	    new Float: krishka_x = X + (1.45 * floatsin(-angle, degrees)),Float: krishka_y = Y + (1.45 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], krishka_x, krishka_y, Z-0.69, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 6){
		new Float: case_x = X + (1.4 * floatsin(-angle, degrees)),Float: case_y = Y + (1.4 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.7, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 7){
		new Float: case_x = X + (1.45 * floatsin(-angle, degrees)),Float: case_y = Y + (1.45 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.7, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 8){
		new Float: kr_x = X + (1.85 * floatsin(-angle, degrees)),Float: kr_y = Y + (1.85 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], kr_x, kr_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 9)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 10)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 11)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 12)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 13)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 14)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	SetTimerEx("SelectCase", 1000, false, "i", playerid); 
}

public: SelectCase(playerid){SelectPrizeCase(playerid);}
stock ShowCase(playerid)
{
	STRING_GLOBAL[0] = EOS;
    if(GetPVarInt(playerid, "case_type") == 1)
	{
		if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 258) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,\"Форсаж\",50,%d,1,[[0,0,\"Кепка MB\",6],[0,1,\"Кепка BMW\",6],[0,2,\"ВАЗ 2106\",3],[0,3,\"ЗАЗ\",3],[1,4,\"BMW E30\",3],[1,5,\"Гонщик\",4],[1,6,\"Toyota Mark 2\",3],[2,7,\"Subaru Impreza WRX\",3],[2,8,\"MMC Lancer Evo\",3],[2,9,\"Mazda RX-7\",3]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 258) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,\"Форсаж\",120,%d,0,[[0,0,\"Кепка MB\",6],[0,1,\"Кепка BMW\",6],[0,2,\"ВАЗ 2106\",3],[0,3,\"ЗАЗ\",3],[1,4,\"BMW E30\",3],[1,5,\"Гонщик\",4],[1,6,\"Toyota Mark 2\",3],[2,7,\"Subaru Impreza WRX\",3],[2,8,\"MMC Lancer Evo\",3],[2,9,\"Mazda RX-7\",3]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 2)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 261) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[1, \"Темные дела\", 1, %d, 1,[[0, 2, \"Шляпа Мафиозник\", 1],[0, 3, \"ОКА\", 1],[1, 4, \"ВАЗ 2108\", 1],[1, 5, \"JEEP\", 1],[1, 6, \"Перчаточный Маньяк\", 4],[1, 7, \"Mercedes W140 S600\", 1],[2, 8, \"Land Cruiser 300\", 1],[2, 9, \"Саша Белый\", 4]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 261) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[1, \"Темные дела\", 120, %d, 0,[[0, 2, \"Шляпа Мафиозник\", 1],[0, 3, \"ОКА\", 1],[1, 4, \"ВАЗ 2108\", 1],[1, 5, \"JEEP\", 1],[1, 6, \"Перчаточный Маньяк\", 4],[1, 7, \"Mercedes W140 S600\", 1],[2, 8, \"Land Cruiser 300\", 1],[2, 9, \"Саша Белый\", 4]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 3)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 272) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[2, \"Велесова ночь\", 1, %d, 1,[[0, 0, \"Маска тыквы\", 6],[0, 1, \"Цепочка пришельца\", 6],[0, 2, \"Lada Инвалидка\", 3],[0, 3, \"Иж Комби\", 3],[1, 4, \"Volvo V40\", 3],[1, 5, \"Шляпник\", 4],[1, 6, \"Hundai Santa Fe\", 3], [2, 7, \"Ford Mustang\", 3], [2, 8, \"Псих\", 4], [2, 9, \"Дявольский смайлик\", 6]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 272) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[2, \"Велесова ночь\", 120, %d, 0,[[0, 0, \"Маска тыквы\", 6],[0, 1, \"Цепочка пришельца\", 6],[0, 2, \"Lada Инвалидка\", 3],[0, 3, \"Иж Комби\", 3],[1, 4, \"Volvo V40\", 3],[1, 5, \"Шляпник\", 4],[1, 6, \"Hundai Santa Fe\", 3], [2, 7, \"Ford Mustang\", 3], [2, 8, \"Псих\", 4], [2, 9, \"Дявольский смайлик\", 6]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 4)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 278) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[3, \"Оперской\", 1, %d, 1,[[0, 0, \"Берет\",6],[0, 1, \"Черные очки\",6],[0, 2, \"Москвич\",3],[0, 3, \"ЛУАЗ\",3],[1, 4, \"Mazda 3 MPS\",3],[1, 5, \"УАЗ ХАНТЕР\",3],[1, 6, \"Ford Focus 3\",3],[2, 7, \"Шлем Алтын\",6],[2, 8, \"Черный противогаз\",6],[2, 9, \"Dodge Charger SRT HellCat\",3]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 278) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[3, \"Оперской\", 120, %d, 0,[[0, 0, \"Берет\",6],[0, 1, \"Черные очки\",6],[0, 2, \"Москвич\",3],[0, 3, \"ЛУАЗ\",3],[1, 4, \"Mazda 3 MPS\",3],[1, 5, \"УАЗ ХАНТЕР\",3],[1, 6, \"Ford Focus 3\",3],[2, 7, \"Шлем Алтын\",6],[2, 8, \"Черный противогаз\",6],[2, 9, \"Dodge Charger SRT HellCat\",3]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 5)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 284) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[4, \"Новогодний\", 1, %d, 1,[[0, 0, \"Шапка ушанка\",6],[0, 1, \"Новогодняя шапка\",6],[0, 2, \"Скутер\",3],[0, 3, \"ВАЗ 2104\",3],[0, 4, \"ВАЗ 2101\",3],[1, 5, \"Парень в черном\",4],[1, 6, \"Toyota Hachiroku AE86\",3],[1, 7, \"Subaru Impreza WRX\",3],[1, 8, \"Nissan Silvia\",3],[1, 9, \"Mitsubitshi Lancer X\",3],[2, 10, \"Мурад\",4],[2, 11, \"Бодров\",4],[2, 12, \"Верка сердючка\",4],[2, 13, \"Дом на колесах\",3],[2, 13, \"International ProStar LT\",3],[2, 14, \"C.P Company\",6]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 284) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[4, \"Новогодний\", 120, %d, 0,[[0, 0, \"Шапка ушанка\",6],[0, 1, \"Новогодняя шапка\",6],[0, 2, \"Скутер\",3],[0, 3, \"ВАЗ 2104\",3],[0, 4, \"ВАЗ 2101\",3],[1, 5, \"Парень в черном\",4],[1, 6, \"Toyota Hachiroku AE86\",3],[1, 7, \"Subaru Impreza WRX\",3],[1, 8, \"Nissan Silvia\",3],[1, 9, \"Mitsubitshi Lancer X\",3],[2, 10, \"Мурад\",4],[2, 11, \"Бодров\",4],[2, 12, \"Верка сердючка\",4],[2, 13, \"Дом на колесах\",3],[2, 13, \"International ProStar LT\",3],[2, 14, \"C.P Company\",6]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 6)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 290) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[5, \"Черное золото\", 1, %d, 1,[[0, 0, \"Lada Инвалидка\",3],[0, 1, \"ЗАЗ\",3],[0, 2, \"Черные очки\",6],[1, 3, \"Золотая маска\",6],[1, 4, \"Кинжал\",6],[1, 5, \"Yamaha Wolverine\",3],[1, 6, \"Модник\",4],[2, 7, \"Куфия\",6],[2, 8, \"Золотая корона\",6],[2, 9, \"Коломойский\",4],[2, 10, \"Mercedes-Benz Vito\",3]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 290) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[5, \"Черное золото\", 120, %d, 0,[[0, 0, \"Lada Инвалидка\",3],[0, 1, \"ЗАЗ\",3],[0, 2, \"Черные очки\",6],[1, 3, \"Золотая маска\",6],[1, 4, \"Кинжал\",6],[1, 5, \"Yamaha Wolverine\",3],[1, 6, \"Модник\",4],[2, 7, \"Куфия\",6],[2, 8, \"Золотая корона\",6],[2, 9, \"Коломойский\",4],[2, 10, \"Mercedes-Benz Vito\",3]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 7)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 300) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[6, \"Охотничий\", 1, %d, 1,[[0, 0, \"УАЗ Буханка\",3],[0, 1, \"Луаз 969\",3],[0, 2, \"2 EXP\",6],[1, 3, \"Обэма\",6],[1, 4, \"UAZ Patriot\",3],[1, 5, \"Mercedes Benz X\",3],[1, 6, \"Паша Техник\",4],[2, 7, \"Jeep Rubicon\",3]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 300) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[6, \"Охотничий\", 120, %d, 0,[[0, 0, \"УАЗ Буханка\",3],[0, 1, \"Луаз 969\",3],[0, 2, \"2 EXP\",6],[1, 3, \"Обэма\",6],[1, 4, \"UAZ Patriot\",3],[1, 5, \"Mercedes Benz X\",3],[1, 6, \"Паша Техник\",4],[2, 7, \"Jeep Rubicon\",3]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 8)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 328) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[7, \"Египетская сила\", 1, %d, 1,[[0, 0, \"Citroen ami\",3],[0, 1, \"ИЖ - 5\",3],[0, 2, \"Hotline Miami\",6],[1, 3, \"Летний прикид\",4],[1, 4, \"CrossBike\",3],[1, 5, \"Mazda MX5 Miata\",3],[2, 6, \"Японка(!)\",4],[2, 7, \"Lexus LX\",3],[2, 8, \"Маска мумии\",6]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 328) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[7, \"Египетская сила\", 120, %d, 0,[[0, 0, \"Citroen ami\",3],[0, 1, \"ИЖ - 5\",3],[0, 2, \"Hotline Miami\",6],[1, 3, \"Летний прикид\",4],[1, 4, \"CrossBike\",3],[1, 5, \"Mazda MX5 Miata\",3],[2, 6, \"Японка(!)\",4],[2, 7, \"Lexus LX\",3],[2, 8, \"Маска мумии\",6]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 9)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 344) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[8, \"Велесова ночь 2\", 1, %d, 1,[[0, 0, \"Маска тыквы\",6],[0, 1, \"Volvo 940\",3],[0, 2, \"BMW M5 E28\",3],[1, 3, \"Subaru Impreza WRX\",3],[1, 4, \"Нео\",4],[1, 5, \"Volkswagen Touareg\",3],[2, 6, \"Mercedes 560 SE\",3],[2, 7, \"Летучая мышь\",6],[2, 8, \"Франкенштейн\",4]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 344) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[8, \"Велесова ночь 2\", 120, %d, 0,[[0, 0, \"Маска тыквы\",6],[0, 1, \"Volvo 940\",3],[0, 2, \"BMW M5 E28\",3],[1, 3, \"Subaru Impreza WRX\",3],[1, 4, \"Нео\",4],[1, 5, \"Volkswagen Touareg\",3],[2, 6, \"Mercedes 560 SE\",3],[2, 7, \"Летучая мышь\",6],[2, 8, \"Франкенштейн\",4]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 10)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 348) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[9, \"Рождественский Экспресс\", 1, %d, 1,[[0, 0, \"ВАЗ 2105\",3],[0, 1, \"ВАЗ 2102\",3],[0, 2, \"Новогодняя шапка\",6],[1, 3, \"Chevrolet Suburban\",3],[1, 4, \"Honda Civic TypeR FN2\",3],[1, 5, \"Зимний прикид\",4],[2, 6, \"Mercedes-Benz SL65 AMG\",3],[2, 7, \"Шарф Гуччи\",6],[2, 8, \"Гусь в шапке\",6]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 348) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[9, \"Рождественский Экспресс\", 120, %d, 0,[[0, 0, \"ВАЗ 2105\",3],[0, 1, \"ВАЗ 2102\",3],[0, 2, \"Новогодняя шапка\",6],[1, 3, \"Chevrolet Suburban\",3],[1, 4, \"Honda Civic TypeR FN2\",3],[1, 5, \"Зимний прикид\",4],[2, 6, \"Mercedes-Benz SL65 AMG\",3],[2, 7, \"Шарф Гуччи\",6],[2, 8, \"Гусь в шапке\",6]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 11)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 350) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[10, \"Путь воина\", 1, %d, 1,[[0, 0, \"Honda CRX\",3],[0, 1, \"Маска ниндзя\",6],[1, 2, \"Маска Кицуне\",6],[1, 3, \"Маска Анбу\",6],[1, 4, \"Toyota Hachiroku AE86\",3],[2, 5, \"Шляпа Архимага\",6],[2, 6, \"Красный клинок\",6],[2, 7, \"Проклятый дух\",4]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 350) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[10, \"Путь воина\", 120, %d, 0,[[0, 0, \"Honda CRX\",3],[0, 1, \"Маска ниндзя\",6],[1, 2, \"Маска Кицуне\",6],[1, 3, \"Маска Анбу\",6],[1, 4, \"Toyota Hachiroku AE86\",3],[2, 5, \"Шляпа Архимага\",6],[2, 6, \"Красный клинок\",6],[2, 7, \"Проклятый дух\",4]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 12)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 355) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[11, \"Пиратский\", 1, %d, 1,[[0, 0, \"LADA 2103\",3],[0, 1, \"Рыжик\",4],[0, 2, \"VW Golf 2\",3],[1, 3, \"BMW 525i E34\",3],[1, 4, \"Летний прикид\",4],[1, 5, \"Mercedes S320 CDI W220\",3],[2, 6, \"Пиратский пояс\",6],[2, 7, \"Mercedes Brabus Iseki 26\",3],[2, 8, \"Пират\",4]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 355) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[11, \"Пиратский\", 120, %d, 0,[[0, 0, \"LADA 2103\",3],[0, 1, \"Рыжик\",4],[0, 2, \"VW Golf 2\",3],[1, 3, \"BMW 525i E34\",3],[1, 4, \"Летний прикид\",4],[1, 5, \"Mercedes S320 CDI W220\",3],[2, 6, \"Пиратский пояс\",6],[2, 7, \"Mercedes Brabus Iseki 26\",3],[2, 8, \"Пират\",4]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 13)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 356) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[12, \"Проклятие\", 1, %d, 1,[[0, 0, \"ZAZ 1102 Таврия\",3],[0, 1, \"Обруч с рожками\",6],[0, 2, \"VW Passat 3B\",3],[1, 3, \"VW Golf R\",3],[1, 4, \"Иван Золо\",4],[1, 5, \"Infinity Q50\",3],[2, 6, \"Мишка с шипами\",6],[2, 7, \"Mercedes G63 6x6\",3],[2, 8, \"Цой\",4]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 356) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[12, \"Проклятие\", 120, %d, 0,[[0, 0, \"ZAZ 1102 Таврия\",3],[0, 1, \"Обруч с рожками\",6],[0, 2, \"VW Passat 3B\",3],[1, 3, \"VW Golf R\",3],[1, 4, \"Иван Золо\",4],[1, 5, \"Infinity Q50\",3],[2, 6, \"Мишка с шипами\",6],[2, 7, \"Mercedes G63 6x6\",3],[2, 8, \"Цой\",4]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	if(GetPVarInt(playerid, "case_type") == 14)
	{
	    if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 356) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[13, \"Зимняя Сказка\", 1, %d, 1,[[0, 0, \"VIP SILER(3 Дня)\",5],[0, 1, \"Lada 2113\",3],[0, 2, \"АЗЛК 2141\",3],[1, 3, \"Zeekr 001\",3],[1, 4, \"Одежда Андерграунд\",4],[1, 5, \"Nissan 370Z\",3],[2, 6, \"Рюкзак Луи\",6],[2, 7, \"Acura NSX\",3],[2, 8, \"Шматко\",4]]]", kase_open[playerid]), donate_case[playerid] = false;
		else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 356) >= 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[13, \"Зимняя Сказка\", 120, %d, 0,[[0, 0, \"VIP SILER(3 Дня)\",5],[0, 1, \"Lada 2113\",3],[0, 2, \"АЗЛК 2141\",3],[1, 3, \"Zeekr 001\",3],[1, 4, \"Одежда Андерграунд\",4],[1, 5, \"Nissan 370Z\",3],[2, 6, \"Рюкзак Луи\",6],[2, 7, \"Acura NSX\",3],[2, 8, \"Шматко\",4]]]", kase_open[playerid]), donate_case[playerid] = true;
	}
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", STRING_GLOBAL);
	return 1;
}

public: Cases_OnPlayerCloseInterface(playerid, type,id)
{
	if(type == 1)
	{
		if(GetPVarInt(playerid, "type_priz") != 0)
		{
			new items = GetPVarInt(playerid, "type_priz") - 1;

		    if(id == 0)
			{
			    BitStream_1(playerid, s_CefInterface, t_CefHide,"CaseResult");
			    if(GetPVarInt(playerid, "case_type") == 1) GivePlayerMoneyEx(playerid, g_case_info_1[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 2) GivePlayerMoneyEx(playerid, g_case_info_2[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 3) GivePlayerMoneyEx(playerid, g_case_info_3[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
                if(GetPVarInt(playerid, "case_type") == 4) GivePlayerMoneyEx(playerid, g_case_info_4[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 5) GivePlayerMoneyEx(playerid, g_case_info_5[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 6) GivePlayerMoneyEx(playerid, g_case_info_6[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 7) GivePlayerMoneyEx(playerid, g_case_info_7[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 8) GivePlayerMoneyEx(playerid, g_case_info_8[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 9) GivePlayerMoneyEx(playerid, g_case_info_9[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 10) GivePlayerMoneyEx(playerid, g_case_info_10[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 11) GivePlayerMoneyEx(playerid, g_case_info_11[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 12) GivePlayerMoneyEx(playerid, g_case_info_12[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 13) GivePlayerMoneyEx(playerid, g_case_info_13[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
				if(GetPVarInt(playerid, "case_type") == 14) GivePlayerMoneyEx(playerid, g_case_info_14[items][E_PRICE_PRIZE],"продажа с кейса",true,true);
			}
			if(id == 1)
			{
				new fmt_msg[144];
		    	BitStream_1(playerid, s_CefInterface, t_CefHide,"CaseResult");
		    	if(GetPVarInt(playerid, "case_type") == 1) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Форсаж' {6495ED}и получили {ffffff}'%s'",g_case_info_1[items][E_NAME_PRIZE]);
		    	if(GetPVarInt(playerid, "case_type") == 2) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Темные дела' {6495ED}и получили {ffffff}'%s'",g_case_info_2[items][E_NAME_PRIZE]);
		    	if(GetPVarInt(playerid, "case_type") == 3) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Оперской' {6495ED}и получили {ffffff}'%s'",g_case_info_3[items][E_NAME_PRIZE]);
                if(GetPVarInt(playerid, "case_type") == 4) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Велесова ночь' {6495ED}и получили {ffffff}'%s'",g_case_info_4[items][E_NAME_PRIZE]);
                if(GetPVarInt(playerid, "case_type") == 5) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Новогодний' {6495ED}и получили {ffffff}'%s'",g_case_info_5[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 6) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Черное золото' {6495ED}и получили {ffffff}'%s'",g_case_info_6[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 7) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Охотничий' {6495ED}и получили {ffffff}'%s'",g_case_info_7[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 8) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Египетская сила' {6495ED}и получили {ffffff}'%s'",g_case_info_8[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 9) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Велесова ночь 2' {6495ED}и получили {ffffff}'%s'",g_case_info_9[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 10) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Рождественский Экспресс' {6495ED}и получили {ffffff}'%s'",g_case_info_10[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 11) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Путь воина' {6495ED}и получили {ffffff}'%s'",g_case_info_11[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 12) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Пиратский' {6495ED}и получили {ffffff}'%s'",g_case_info_12[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 13) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Проклятие' {6495ED}и получили {ffffff}'%s'",g_case_info_13[items][E_NAME_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 14) format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс 'Зимняя Сказка' {6495ED}и получили {ffffff}'%s'",g_case_info_14[items][E_NAME_PRIZE]);


				SendClientMessage(playerid, 0x6495EDFF, fmt_msg);
		    	SendClientMessage(playerid, 0x6495EDFF, "Приз был добавлен в ваши награды {ffffff}(Меню -> мои награды)");

				if(GetPVarInt(playerid, "case_type") == 1) GivePlayerMyPrizes(playerid, g_case_info_1[items][E_NAME_PRIZE], g_case_info_1[items][E_SIZE_PRIZE], g_case_info_1[items][E_ITEM_PRIZE], g_case_info_1[items][E_TYPE_PRIZE], 1, g_case_info_1[items][E_INDX_PRIZE]);
		    	if(GetPVarInt(playerid, "case_type") == 2) GivePlayerMyPrizes(playerid, g_case_info_2[items][E_NAME_PRIZE], g_case_info_2[items][E_SIZE_PRIZE], g_case_info_2[items][E_ITEM_PRIZE], g_case_info_2[items][E_TYPE_PRIZE], 1, g_case_info_2[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 3) GivePlayerMyPrizes(playerid, g_case_info_3[items][E_NAME_PRIZE], g_case_info_3[items][E_SIZE_PRIZE], g_case_info_3[items][E_ITEM_PRIZE], g_case_info_3[items][E_TYPE_PRIZE], 1, g_case_info_3[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 4) GivePlayerMyPrizes(playerid, g_case_info_4[items][E_NAME_PRIZE], g_case_info_4[items][E_SIZE_PRIZE], g_case_info_4[items][E_ITEM_PRIZE], g_case_info_4[items][E_TYPE_PRIZE], 1, g_case_info_4[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 5) GivePlayerMyPrizes(playerid, g_case_info_5[items][E_NAME_PRIZE], g_case_info_5[items][E_SIZE_PRIZE], g_case_info_5[items][E_ITEM_PRIZE], g_case_info_5[items][E_TYPE_PRIZE], 1, g_case_info_5[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 6) GivePlayerMyPrizes(playerid, g_case_info_6[items][E_NAME_PRIZE], g_case_info_6[items][E_SIZE_PRIZE], g_case_info_6[items][E_ITEM_PRIZE], g_case_info_6[items][E_TYPE_PRIZE], 1, g_case_info_6[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 7) GivePlayerMyPrizes(playerid, g_case_info_7[items][E_NAME_PRIZE], g_case_info_7[items][E_SIZE_PRIZE], g_case_info_7[items][E_ITEM_PRIZE], g_case_info_7[items][E_TYPE_PRIZE], 1, g_case_info_7[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 8) GivePlayerMyPrizes(playerid, g_case_info_8[items][E_NAME_PRIZE], g_case_info_8[items][E_SIZE_PRIZE], g_case_info_8[items][E_ITEM_PRIZE], g_case_info_8[items][E_TYPE_PRIZE], 1, g_case_info_8[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 9) GivePlayerMyPrizes(playerid, g_case_info_9[items][E_NAME_PRIZE], g_case_info_9[items][E_SIZE_PRIZE], g_case_info_9[items][E_ITEM_PRIZE], g_case_info_9[items][E_TYPE_PRIZE], 1, g_case_info_9[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 10) GivePlayerMyPrizes(playerid, g_case_info_10[items][E_NAME_PRIZE], g_case_info_10[items][E_SIZE_PRIZE], g_case_info_10[items][E_ITEM_PRIZE], g_case_info_10[items][E_TYPE_PRIZE], 1, g_case_info_10[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 11) GivePlayerMyPrizes(playerid, g_case_info_11[items][E_NAME_PRIZE], g_case_info_11[items][E_SIZE_PRIZE], g_case_info_11[items][E_ITEM_PRIZE], g_case_info_11[items][E_TYPE_PRIZE], 1, g_case_info_11[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 12) GivePlayerMyPrizes(playerid, g_case_info_12[items][E_NAME_PRIZE], g_case_info_12[items][E_SIZE_PRIZE], g_case_info_12[items][E_ITEM_PRIZE], g_case_info_12[items][E_TYPE_PRIZE], 1, g_case_info_12[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 13) GivePlayerMyPrizes(playerid, g_case_info_13[items][E_NAME_PRIZE], g_case_info_13[items][E_SIZE_PRIZE], g_case_info_13[items][E_ITEM_PRIZE], g_case_info_13[items][E_TYPE_PRIZE], 1, g_case_info_13[items][E_INDX_PRIZE]);
				if(GetPVarInt(playerid, "case_type") == 14) GivePlayerMyPrizes(playerid, g_case_info_14[items][E_NAME_PRIZE], g_case_info_14[items][E_SIZE_PRIZE], g_case_info_14[items][E_ITEM_PRIZE], g_case_info_14[items][E_TYPE_PRIZE], 1, g_case_info_14[items][E_INDX_PRIZE]);

			}
			SetPVarInt(playerid, "type_priz", 0);
			if(GetIteam(playerid, GetPVarInt(playerid, "case_id")) > 0) ShowCase(playerid);
			else DeletePVar(playerid,"case_type");

			if(kase_open[playerid] == 0)
			{
				DestroyDynamicObject(kase_osnova[playerid]);
				DestroyDynamicObject(kase_krishka[playerid]);
				DestroyDynamicObject(kase_prize[playerid]);
				SetCameraBehindPlayer(playerid);
			}
	    }
    }
	if(type == 0)
	{
		DeletePVar(playerid,"case_type");
	}
	return 1;
}

stock Cases_OnPlayerInterfaceRequest(playerid,event,fast)
{
	if(event == 0)
	{
		BitStream_1(playerid, s_CefInterface, t_CefHide,"Case");
		if(donate_case[playerid] == true) if(GetPlayerCurrentDonate(playerid) < 120) return SCM(playerid, 0xCECECEFF, "[Ошибка] Недостаточно донат валюты");
		if(donate_case[playerid] == false) if(GetIteam(playerid,259) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "* У вас нет ключа для открытия кейса");
		if(fast == 0)
		{
			new Float:X,Float:Y,Float:Z,Float:angle;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, angle);
			new Float: cam_x = X + (1.3 * floatsin(-angle + 90.0, degrees)),Float: cam_y = Y + (1.3 * floatcos(-angle + 90.0, degrees)),Float: cam_z = Z + 0.3;
			new Float: case_x, Float:case_y;
			kase_open[playerid] = 0;
			if(GetPVarInt(playerid, "case_type") == 1)//Форсаж
			{
				case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(14349, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(14348, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				GiveIteam(playerid, 258, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 2)//Темные
			{
				new Float: krx = X + (1.41 * floatsin(-angle, degrees)),Float: kry = Y + (1.41 * floatcos(-angle, degrees));
				case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(14594, krx, kry, Z-0.81, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(14593, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				GiveIteam(playerid, 261, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 3)//Велесова
			{
				case_x = X + (1.44 * floatsin(-angle, degrees)),case_y = Y + (1.44 * floatcos(-angle, degrees));
				new Float: krx = X + (1.455 * floatsin(-angle, degrees)),Float: kry = Y + (1.455 * floatcos(-angle, degrees));
				kase_osnova[playerid] = CreateDynamicObject(14692, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				kase_krishka[playerid] = CreateDynamicObject(14693, krx, kry, Z-0.82, 0.0,0.0,angle);
				GiveIteam(playerid, 272, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 4)
			{
				new Float: krishka_x = X + (1.6 * floatsin(-angle, degrees)),Float: krishka_y = Y + (1.6 * floatcos(-angle, degrees));
				case_x = X + (1.37 * floatsin(-angle, degrees)),case_y = Y + (1.37 * floatcos(-angle, degrees));
				kase_osnova[playerid] = CreateDynamicObject(14783, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				kase_krishka[playerid] = CreateDynamicObject(14784, krishka_x, krishka_y, Z-0.6, 0.0,0.0,angle);
				GiveIteam(playerid, 278, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 5)
			{
				case_x = X + (1.3 * floatsin(-angle, degrees)),case_y = Y + (1.3 * floatcos(-angle, degrees));
				new Float: krishka_x = X + (1.45 * floatsin(-angle, degrees)),Float: krishka_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_osnova[playerid] = CreateDynamicObject(15709, case_x, case_y, Z-1, 0.0,0.0,angle);
				kase_krishka[playerid] = CreateDynamicObject(15710, krishka_x, krishka_y, Z-0.71, 0.0,0.0,angle);
				GiveIteam(playerid, 284, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 6)
			{
				case_x = X + (1.4 * floatsin(-angle, degrees)), case_y = Y + (1.4 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(15845, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(15844, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				GiveIteam(playerid, 290, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 7)
			{
				case_x = X + (1.4 * floatsin(-angle, degrees)), case_y = Y + (1.4 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(15962, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(15961, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 300, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 8)
			{
				case_x = X + (1.7 * floatsin(-angle, degrees)), case_y = Y + (1.7 * floatcos(-angle, degrees));
				new Float: kr_x = X + (1.85 * floatsin(-angle, degrees)),Float: kr_y = Y + (1.85 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(16452, kr_x, kr_y, Z-0.74, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(16451, case_x, case_y, Z-1.0, 0.0,0.0,angle);
				GiveIteam(playerid, 328, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 9)
			{
				case_x = X + (1.6 * floatsin(-angle, degrees)), case_y = Y + (1.6 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(16663, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(16662, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 344, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 10)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(16772, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(16771, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 348, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 11)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(16965, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(16964, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 350, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 12)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(17205, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(17206, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 355, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 13)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(17608, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(17609, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 356, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 14)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(18237, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(18238, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 360, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else return BitStream_1(playerid, s_CefInterface, t_CefHide, "Case");
			if(donate_case[playerid] == true) GivePlayerDonate(playerid, -120, "Кейс", true, true);
			if(donate_case[playerid] == false) GiveIteam(playerid, 259, 0, 1, 0, "Открытие кейса [Cases]");
			ObjectCases(playerid);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			Streamer_UpdateEx(playerid, X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			InterpolateCameraPos(playerid, cam_x, cam_y, cam_z, X + (0.95 * floatsin(-angle, degrees)), Y + (0.95 * floatcos(-angle, degrees)), Z + 0.2, 5000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, X + (0.5 * floatsin(-angle, degrees)), Y + (0.5 * floatcos(-angle, degrees)), Z - 0.5, case_x, case_y, Z - 0.85, 5000, CAMERA_MOVE);
			SetTimerEx("OpenCase", 7000, false, "i", playerid);
		}
		if(fast == 1)
		{
			kase_open[playerid] = 1;
			if(GetPVarInt(playerid, "case_type") == 1) GiveIteam(playerid, 258, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 2) GiveIteam(playerid, 261, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 3) GiveIteam(playerid, 272, 0, 1, 0, "Открытие кейса [Cases]"); 
			if(GetPVarInt(playerid, "case_type") == 4) GiveIteam(playerid, 278, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 5) GiveIteam(playerid, 284, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 6) GiveIteam(playerid, 290, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 7) GiveIteam(playerid, 300, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 8) GiveIteam(playerid, 328, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 9) GiveIteam(playerid, 344, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 10) GiveIteam(playerid, 348, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 11) GiveIteam(playerid, 350, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 12) GiveIteam(playerid, 355, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 13) GiveIteam(playerid, 356, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 14) GiveIteam(playerid, 360, 0, 1, 0, "Открытие кейса [Cases]");
			if(donate_case[playerid] == true) GivePlayerDonate(playerid, -120, "Кейс", true, true);
			if(donate_case[playerid] == false) GiveIteam(playerid, 259, 0, 1, 0, "Открытие кейса [Cases]");
			RandomFastCases(playerid);
		}
	}
	return 1;
}

stock ObjectCases(playerid)
{
	new Random,Float:X,Float:Y,Float:Z,Float:angle, RandomPrize;
	RandomPrize = RandomEx(0,100);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, angle);
	new Float: case_x, Float: case_y;
	if(GetPVarInt(playerid, "case_type") == 1)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 8);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 12);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 15);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 19);
		case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_1[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 2)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 10);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 13);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 17);
		case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_2[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 3)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 3);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 9);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 14);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 17);
		case_x = X + (1.44 * floatsin(-angle, degrees)),case_y = Y + (1.44 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_3[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 4)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 10);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 13);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 17);
		case_x = X + (1.37 * floatsin(-angle, degrees)),case_y = Y + (1.37 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_4[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 5)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 10);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 15);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 19);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 21);
		case_x = X + (1.3 * floatsin(-angle, degrees)),case_y = Y + (1.3 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_5[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 6)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 10);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 13);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 16);
		case_x = X + (1.4 * floatsin(-angle, degrees)), case_y = Y + (1.4 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_6[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 7)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 10);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 13);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 17);
		case_x = X + (1.4 * floatsin(-angle, degrees)), case_y = Y + (1.4 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_7[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 8)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 9);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 12);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 14);
		case_x = X + (1.7 * floatsin(-angle, degrees)), case_y = Y + (1.7 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_8[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 9)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 9);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 12);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 15);
		case_x = X + (1.6 * floatsin(-angle, degrees)), case_y = Y + (1.6 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_9[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.9, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 10)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 2);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 5);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 9);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 12);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 14);
		case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_10[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.84, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 11)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 1);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 4);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 7);
		else if(75 < RandomPrize < 90) Random = RandomEx(0, 10);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 13);
		case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_11[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.84, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 12)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 2);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 5);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 8);
		else if(75 < RandomPrize < 90) Random = RandomEx(0, 10);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 12);
		case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_12[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.84, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 13)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 2);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 5);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 8);
		else if(75 < RandomPrize < 90) Random = RandomEx(0, 10);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 12);
		case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_13[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.84, 0.0, 0.0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 14)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 2);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 5);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 8);
		else if(75 < RandomPrize < 90) Random = RandomEx(0, 10);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 13);
		case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
		kase_prize[playerid] = CreateDynamicObject(g_case_info_14[Random][E_BLOCK_PRIZE], case_x, case_y, Z-0.84, 0.0, 0.0, angle);
	}
	Streamer_Update(playerid);
	SetPVarInt(playerid, "PrizeCases", Random);
	return 1;
}

stock SelectPrizeCase(playerid)
{
	new fmt[256];
	
	if(GetPVarInt(playerid, "case_type") == 1) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Форсаж\",%d,%d,0,%d]", g_case_info_1[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_1[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_1[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_1[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 2) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Тёмные дела\",%d,%d,1,%d]", g_case_info_2[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_2[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_2[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_2[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 3) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Велесова ночь\",%d,%d,2,%d]", g_case_info_3[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_3[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_3[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_3[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 4) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Оперской\",%d,%d,3,%d]", g_case_info_4[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_4[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_4[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_4[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 5) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Новогодний\",%d,%d,4,%d]", g_case_info_5[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_5[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_5[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_5[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 6) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Чёрное золото\",%d,%d,5,%d]", g_case_info_6[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_6[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_6[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_6[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 7) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Охотничий\",%d,%d,6,%d]", g_case_info_7[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_7[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_7[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_7[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 8) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Египетская сила\",%d,%d,7,%d]", g_case_info_8[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_8[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_8[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_8[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 9) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Велесова ночь 2\",%d,%d,8,%d]", g_case_info_9[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_9[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_9[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_9[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 10) format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Рождественский Экспресс\",%d,%d,9,%d]", g_case_info_10[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_10[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_10[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_10[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 11) format(fmt, sizeof fmt, "[%d,\"%s\",\"Путь воина\",%d,%d,10,%d]", g_case_info_11[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_11[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_11[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_11[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 12) format(fmt, sizeof fmt, "[%d,\"%s\",\"Пиратский\",%d,%d,11,%d]", g_case_info_12[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_12[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_12[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_12[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 13) format(fmt, sizeof fmt, "[%d,\"%s\",\"Проклятие\",%d,%d,12,%d]", g_case_info_13[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_13[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_13[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_13[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	if(GetPVarInt(playerid, "case_type") == 14) format(fmt, sizeof fmt, "[%d,\"%s\",\"Зимняя Сказка\",%d,%d,13,%d]", g_case_info_14[GetPVarInt(playerid, "PrizeCases")][E_PRICE_PRIZE], g_case_info_14[GetPVarInt(playerid, "PrizeCases")][E_NAME_PRIZE], g_case_info_14[GetPVarInt(playerid, "PrizeCases")][E_TYPE_PRIZE], GetPVarInt(playerid, "PrizeCases"), g_case_info_14[GetPVarInt(playerid, "PrizeCases")][E_SIZE_PRIZE]);
	SetPVarInt(playerid, "type_priz", GetPVarInt(playerid, "PrizeCases")+1);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "CaseResult", fmt);
}

stock RandomFastCases(playerid)
{
	new fmt[256], Random, RandomPrize;
	RandomPrize = RandomEx(0,100);
	if(GetPVarInt(playerid, "case_type") == 1)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 8);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 12);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 15);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 19);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Форсаж\",%d,%d,0,%d]", g_case_info_1[Random][E_PRICE_PRIZE], g_case_info_1[Random][E_NAME_PRIZE], g_case_info_1[Random][E_TYPE_PRIZE], Random, g_case_info_1[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 2)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 10);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 13);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 17);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Тёмные дела\",%d,%d,1,%d]", g_case_info_2[Random][E_PRICE_PRIZE], g_case_info_2[Random][E_NAME_PRIZE], g_case_info_2[Random][E_TYPE_PRIZE], Random, g_case_info_2[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 3)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 3);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 9);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 14);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 17);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Велесова ночь\",%d,%d,2,%d]", g_case_info_3[Random][E_PRICE_PRIZE], g_case_info_3[Random][E_NAME_PRIZE], g_case_info_3[Random][E_TYPE_PRIZE], Random, g_case_info_3[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 4)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 10);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 13);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 17);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Оперской\",%d,%d,3,%d]", g_case_info_4[Random][E_PRICE_PRIZE], g_case_info_4[Random][E_NAME_PRIZE], g_case_info_4[Random][E_TYPE_PRIZE], Random, g_case_info_4[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 5)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 10);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 15);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 19);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 21);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Новогодний\",%d,%d,4,%d]", g_case_info_5[Random][E_PRICE_PRIZE], g_case_info_5[Random][E_NAME_PRIZE], g_case_info_5[Random][E_TYPE_PRIZE], Random, g_case_info_5[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 6)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 10);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 13);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 16);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Чёрное золото\",%d,%d,5,%d]", g_case_info_6[Random][E_PRICE_PRIZE], g_case_info_6[Random][E_NAME_PRIZE], g_case_info_6[Random][E_TYPE_PRIZE], Random, g_case_info_6[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 7)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 10);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 13);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 17);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Охотничий\",%d,%d,6,%d]", g_case_info_7[Random][E_PRICE_PRIZE], g_case_info_7[Random][E_NAME_PRIZE], g_case_info_7[Random][E_TYPE_PRIZE], Random, g_case_info_7[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 8)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 9);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 12);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 14);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Египетская сила\",%d,%d,7,%d]", g_case_info_8[Random][E_PRICE_PRIZE], g_case_info_8[Random][E_NAME_PRIZE], g_case_info_8[Random][E_TYPE_PRIZE], Random, g_case_info_8[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 9)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 4);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 6);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 9);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 12);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 15);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Велесова ночь 2\",%d,%d,8,%d]", g_case_info_9[Random][E_PRICE_PRIZE], g_case_info_9[Random][E_NAME_PRIZE], g_case_info_9[Random][E_TYPE_PRIZE], Random, g_case_info_9[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 10)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 2);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 5);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 9);
		else if(75 <= RandomPrize < 90) Random = RandomEx(0, 12);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 14);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Кейс Рождественский Экспресс\",%d,%d,9,%d]", g_case_info_10[Random][E_PRICE_PRIZE], g_case_info_10[Random][E_NAME_PRIZE], g_case_info_10[Random][E_TYPE_PRIZE], Random, g_case_info_10[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 11)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 1);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 4);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 7);
		else if(75 < RandomPrize < 90) Random = RandomEx(0, 10);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 13);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Путь воина\",%d,%d,10,%d]", g_case_info_11[Random][E_PRICE_PRIZE], g_case_info_11[Random][E_NAME_PRIZE], g_case_info_11[Random][E_TYPE_PRIZE], Random, g_case_info_11[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 12)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 2);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 5);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 8);
		else if(75 < RandomPrize < 90) Random = RandomEx(0, 10);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 12);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Пиратский\",%d,%d,11,%d]", g_case_info_12[Random][E_PRICE_PRIZE], g_case_info_12[Random][E_NAME_PRIZE], g_case_info_12[Random][E_TYPE_PRIZE], Random, g_case_info_12[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 13)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 2);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 5);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 8);
		else if(75 < RandomPrize < 90) Random = RandomEx(0, 10);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 12);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Проклятие\",%d,%d,12,%d]", g_case_info_13[Random][E_PRICE_PRIZE], g_case_info_13[Random][E_NAME_PRIZE], g_case_info_13[Random][E_TYPE_PRIZE], Random, g_case_info_13[Random][E_SIZE_PRIZE]);
	}
	if(GetPVarInt(playerid, "case_type") == 14)
	{
		if(0 <= RandomPrize < 30) Random = RandomEx(0, 2);
		else if(30 <= RandomPrize < 55) Random = RandomEx(0, 5);
		else if(55 <= RandomPrize < 75) Random = RandomEx(0, 8);
		else if(75 < RandomPrize < 90) Random = RandomEx(0, 10);
		else if(90 <= RandomPrize < 101) Random = RandomEx(0, 13);
		format(fmt, sizeof fmt, "[%d,\"%s\",\"Зимняя сказка\",%d,%d,13,%d]", g_case_info_14[Random][E_PRICE_PRIZE], g_case_info_14[Random][E_NAME_PRIZE], g_case_info_14[Random][E_TYPE_PRIZE], Random, g_case_info_14[Random][E_SIZE_PRIZE]);
	}
	SetPVarInt(playerid, "type_priz", Random+1);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "CaseResult", fmt);
}

#define BE_MIN_HLS 500.00 
#define BE_MAX_SPD_VAR 30 
#define BE_MAX_SPD BE_MAX_SPD_VAR*0.005  
new const BE_Bad_Vehs[] = {460, 464, 476, 511, 512, 513, 519, 520, 539, 553, 577, 592, 593, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563};
new bool: BE_Play_Check[MAX_PLAYERS];  
forward BadEngine();
public BadEngine()
{
    new veh, Float:spd[3], Float:hls;
    foreach(new i: Player)
    {
        if(!IsPlayerConnected(i)) continue;
        else if(!IsPlayerLogged(i)) continue;
        if(!BE_Play_Check[i]) continue;
        veh = GetPlayerVehicleID(i);
        if(!veh) continue; 
        GetVehicleHealth(veh, hls);
        if(hls < 300) SetVehicleHealth(veh, 350);
        if(hls > BE_MIN_HLS) continue;
        GetVehicleVelocity(veh, spd[0], spd[1], spd[2]);
        if(floatabs(spd[0]) > floatabs(spd[1]))
        {
            if(floatabs(spd[0]) > BE_MAX_SPD)
            {
                hls = BE_MAX_SPD / floatabs(spd[0]);
                SetVehicleVelocity(veh, spd[0] * hls, spd[1] * hls, spd[2]);
            }
        }
        else
        {
            if(floatabs(spd[1]) > BE_MAX_SPD)
            {
                hls = BE_MAX_SPD / floatabs(spd[1]);
                SetVehicleVelocity(veh, spd[0] * hls, spd[1] * hls, spd[2]);
            }
        }
    }
} 

new DailyreWards_Time[MAX_PLAYERS];
enum DAILY_REWARDS_STRUCT
{
	DAILY_REWARDS_TYPE,
	DAILY_REWARDS_ID,
	DAILY_REWARDS_NAME[54],
	DAILY_REWARDS_COUNT
}

new	g_dailyrewards[10][7][DAILY_REWARDS_STRUCT] = 
{
	{
        {5, 0, "Деньги 100.000.000 руб", 100000000},
        {2, 1, "Игровой опыт 10 exp", 10},
        {8, 44, "Предмет Ремонтный комплект: 20 шт", 20},
        {6, 13971, "Аксессуар Кепка [№13971]", 4},
        {8, 2, "Предмет Аптечка: 10 шт", 10},
		{8, 259, "Предмет Ключ от кейса: 40 шт", 40},
		{8, 258, "Предмет Кейс Форсаж: 40 шт", 40}
    },
    {
        {5, 0, "Деньги 150.000.000 руб", 150000000},
        {8, 293, "Предмет Фишка: 200 шт", 200},
        {8, 44, "Предмет Ремонтный комплект: 20 шт", 20},
        {2, 1, "Игровой опыт 5 exp", 5},
		{8, 2, "Предмет Аптечка: 13 шт", 13},
		{8, 259, "Предмет Ключ от кейса: 25 шт", 25},
        {8, 261, "Предмет Кейс Темные дела: 30 шт", 30}
    },
    {
        {5, 0, "Деньги 100.000.000 руб", 100000000},
        {2, 1, "Игровой опыт 15 exp", 15},
        {8, 44, "Предмет Ремонтный комплект: 20 шт", 20},
        {8, 293, "Предмет Фишка: 150 шт", 150},
        {8, 2, "Предмет Аптечка: 3 шт", 3},
    	{8, 259, "Предмет Ключ от кейса: 20 шт", 20},
        {8, 272, "Предмет Кейс Велесова ночь: 20 шт", 20}
    },
    {
        {5, 0, "Деньги 150.000.000 руб", 150000000},
        {8, 44, "Предмет Ремонтный комплект: 10 шт", 10},
        {6, 13975, "Аксессуар Кепка [№13975]", 4},
        {2, 1, "Игровой опыт 5 exp", 5},
        {8, 2, "Предмет Аптечка: 4 шт", 4},
    	{8, 259, "Предмет Ключ от кейса: 20 шт", 20},
        {8, 278, "Предмет Кейс Оперской: 20 шт", 20}
    },
    {
        {5, 0, "Деньги 50.000.000 руб", 50000000},
        {8, 44, "Предмет Ремонтный комплект: 10 шт", 10},
        {8, 348, "Предмет Кейс Новогодний экспер: 10 шт", 10},
        {2, 1, "Игровой опыт 10 exp", 10},
        {6, 14006, "Аксессуар Рюкзак [№14006]", 8},
    	{8, 259, "Предмет Ключ от кейса: 20 шт", 20},
        {8, 284, "Предмет Кейс Новогодний: 20 шт", 20}
    },
    {
        {5, 0, "Деньги 75.000.000 руб", 75000000},
        {8, 44, "Предмет Ремонтный комплект: 10 шт", 10},
        {8, 259, "Предмет Ключ от кейса: 10 шт", 10},
        {2, 1, "Игровой опыт 3 exp", 3},
        {8, 272, "Предмет Кейс Велесова ночь: 10 шт", 10},
    	{8, 259, "Предмет Ключ от кейса: 20 шт", 20},
        {8, 290, "Предмет Кейс Черное золото: 20 шт", 20}
    },
    {
        {5, 0, "Деньги 75.000.000 руб", 75000000},
        {8, 44, "Предмет Ремонтный комплект: 10 шт", 10},
        {8, 2, "Предмет Аптечка: 4 шт", 4},
        {2, 1, "Игровой опыт 3 exp", 3},
        {6, 13982, "Аксессуар Кепка [№13982]", 4},
    	{8, 259, "Предмет Ключ от кейса: 20 шт", 20},
        {8, 300, "Предмет Кейс Охотничий: 20 шт", 20}
    },
    {
        {5, 0, "Деньги 100.000.000 руб", 100000000},
        {8, 44, "Предмет Ремонтный комплект: 10 шт", 10},
        {6, 13999, "Аксессуар очки [№13999]", 0},
        {2, 1, "Игровой опыт 2 exp", 2},
        {8, 2, "Предмет Аптечка: 4 шт", 4},
    	{8, 259, "Предмет Ключ от кейса: 20 шт", 20},
        {8, 328, "Предмет Кейс Египетский: 20 шт", 20}
    },
    {
        {5, 0, "Деньги 200.000.000 руб", 200000000},
        {8, 44, "Предмет Ремонтный комплект: 10 шт", 10},
        {6, 14054, "Аксессуар маска [№14054]", 2},
        {2, 1, "Игровой опыт 5 exp", 5},
        {8, 2, "Предмет Аптечка: 4 шт", 4},
    	{8, 259, "Предмет Ключ от кейса: 20 шт", 20},
        {8, 344, "Предмет Кейс Велесова ночь 2: 20 шт", 20}
    },
    {
        {5, 0, "Деньги 50.000.000 руб", 50000000},
        {8, 44, "Предмет Ремонтный комплект: 10 шт", 10},
        {6, 14004, "Аксессуар рюкзак [№14004]", 8},
        {2, 1, "Игровой опыт 5 exp", 5},
        {8, 2, "Предмет Аптечка: 4 шт", 4},
    	{8, 259, "Предмет Ключ от кейса: 20 шт", 20},
        {8, 348, "Предмет Кейс Новогодний экспер: 20 шт", 20}
    }
};

#define MAX_KIOSKS				(50)
new kioskobj[MAX_KIOSKS];
new kiosktext[MAX_KIOSKS];
new array_kiosk_data[MAX_KIOSKS];
enum E_KIOSK_STRUCT
{
	K_SQL_ID,			// ид в базе данных
	K_NAME[24],			// название
	K_OWNER_ID,			// ид аккаунта владельца
	K_CITY,				// ид города
	K_ZONE,				// ид района
	K_IMPROVEMENTS,		// уровень улучшений
	K_BALANCE[21],			// бюджет бизнеса
	K_ARENDA_PRICE,
	K_RENT_DATE,		// аренда на n времени
	K_PRICE,			// стоимость бизнеса
	K_RENT_PRICE,		// плата за аренду в день
	K_LOCK_STATUS,		// статус (открыта/закрыта)
	Float: K_POS_X,		// позиция бизнеса
	Float: K_POS_Y,		// позиция бизнеса
	Float: K_POS_Z,		// позиция бизнеса
	K_MIN_PRICE,
	// -------------------------
	K_OWNER_NAME[20 + 1],	// имя владельца
	K_INTER,
	Float: K_POS_X_INTER,
	Float: K_POS_Y_INTER,
	Float: K_POS_ANGEL_INTER,
	K_NALOG,
	K_DAY,
	K_MONTH,
	K_YEAR,
};

new g_kiosk[MAX_KIOSKS][E_KIOSK_STRUCT];
new g_kiosk_loaded;
stock GetImprovementsStall(playerid)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	new count,
		query[248],
		Cache: result;
	format(query, sizeof query, "SELECT * FROM kiosks_items WHERE kiosk_id='%d'", GetKioskData(kiosk_id, K_SQL_ID));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

stock GetNearestKiosk(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new kiosk_id = -1;
	new Float: my_dist;
	for(new idx; idx < g_kiosk_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetKioskData(idx, K_POS_X), GetKioskData(idx, K_POS_Y), GetKioskData(idx, K_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			kiosk_id = idx;
		}
	}
	return kiosk_id;
}

stock GetPlayerOwnableKiosk(playerid)
{
	new count,
		query[70],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

public: LoadKiosks()
{
	new query[85];
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT b.*, IFNULL(a.name, 'None') AS owner_name FROM kiosk b LEFT JOIN accounts a ON a.id=b.owner_id", true);
	rows = cache_num_rows();
	if(rows > MAX_KIOSKS)
	{
		rows = MAX_KIOSKS;
		print("[Kioski]: DB rows > MAX_KIOSKS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetKioskData(idx, K_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetKioskData(idx, K_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
		cache_get_field_content(idx, "name", g_kiosk[idx][K_NAME], mysql, 24);
		cache_get_field_content(idx, "balance", g_kiosk[idx][K_BALANCE], mysql, 21);
		SetKioskData(idx, K_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetKioskData(idx, K_RENT_DATE,		cache_get_field_content_int(idx, "rent"));
		SetKioskData(idx, K_PRICE,			cache_get_field_content_int(idx, "price"));
        SetKioskData(idx, K_RENT_PRICE,			cache_get_field_content_int(idx, "rent_price"));
		SetKioskData(idx, K_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));
        SetKioskData(idx, K_NALOG,			cache_get_field_content_int(idx, "nalog"));
        SetKioskData(idx, K_MIN_PRICE,			cache_get_field_content_int(idx, "min_price"));
		SetKioskData(idx, K_POS_X,			cache_get_field_content_float(idx, "x"));
		SetKioskData(idx, K_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetKioskData(idx, K_POS_Z,			cache_get_field_content_float(idx, "z"));
        SetKioskData(idx, K_DAY,			cache_get_field_content_int(idx, "day"));
        SetKioskData(idx, K_MONTH,			cache_get_field_content_int(idx, "month"));
        SetKioskData(idx, K_YEAR,			cache_get_field_content_int(idx, "year"));
		SetKioskData(idx, K_INTER,			cache_get_field_content_int(idx, "inter"));
		SetKioskData(idx, K_POS_X_INTER, cache_get_field_content_float(idx, "x_inter"));
		SetKioskData(idx, K_POS_Y_INTER, cache_get_field_content_float(idx, "y_inter"));
		SetKioskData(idx, K_POS_ANGEL_INTER, cache_get_field_content_float(idx, "angel_inter"));
		cache_get_field_content(idx, "owner_name", g_kiosk[idx][K_OWNER_NAME], mysql, 21);
		mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET id=%d WHERE id=%d", idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);
		kioskobj[idx] = CreateDynamicObject(GetKioskData(idx, K_INTER), GetKioskData(idx, K_POS_X_INTER), GetKioskData(idx, K_POS_Y_INTER), 1000, 0.0, 0.0, GetKioskData(idx, K_POS_ANGEL_INTER));
		array_kiosk_data[idx] = CreateDynamicSphere(GetKioskData(idx, K_POS_X), GetKioskData(idx, K_POS_Y), GetKioskData(idx, K_POS_Z), 3.0, -1, -1);
		if(GetKioskData(idx, K_IMPROVEMENTS) > 2)
		{
			SetKioskData(idx, K_IMPROVEMENTS, 2);
			mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET owner_id=0,improvements=%d WHERE id=%d", GetKioskData(idx, K_IMPROVEMENTS), GetKioskData(idx, K_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(!IsKioskOwned(idx) && !strcmp(GetKioskData(idx, K_OWNER_NAME), "None", true))
		{
			SetKioskData(idx, K_OWNER_ID, 0);
            format(g_kiosk[idx][K_OWNER_NAME], 21, "Государство", 0);
			mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET owner_id=0,improvements=1 WHERE id=%d", GetKioskData(idx, K_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(!IsKioskOwned(idx))
		{
			SetKioskData(idx, K_LOCK_STATUS, false);
		}
		CreatePickup(19134, 25, GetKioskData(idx, K_POS_X), GetKioskData(idx, K_POS_Y), GetKioskData(idx, K_POS_Z), 9, PICKUP_ACTION_TYPE_KIOSK_ENTER, idx);
		if(GetKioskData(idx, K_POS_ANGEL_INTER) == 0) kiosktext[idx] = CreateDynamicObject(15935, GetKioskData(idx, K_POS_X_INTER) + 0.04452, GetKioskData(idx, K_POS_Y_INTER) - 0.73069, 1000 + 3.61999,0.000000,0.000000, GetKioskData(idx, K_POS_ANGEL_INTER) + 180);
		else kiosktext[idx] = CreateDynamicObject(15935, GetKioskData(idx, K_POS_X_INTER) + 0.04452, GetKioskData(idx, K_POS_Y_INTER) + 0.73069, 1000 + 3.61999,0.000000,0.000000, GetKioskData(idx, K_POS_ANGEL_INTER) + 180);
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL,sizeof STRING_GLOBAL,"{FF8800}Магазин №%d\n{0E0101}\"%s\"", idx,g_kiosk[idx][K_NAME]);
		SetDynamicObjectMaterialText(kiosktext[idx], 0,STRING_GLOBAL, 120, "Arial", 20, 1, 0xFFFFFFFF, 0xFFFFFFFF, 1);
	}
	g_kiosk_loaded = rows;
	cache_delete(result);
	printf("[Kiosk]: Киосков загружено: %d", g_kiosk_loaded);
}

stock SellKiosk(playerid)
{
	new businessid = GetPVarInt(playerid, "ownablekiosk_id");
	if(businessid != -1)
	{
		new kiosk_price = GetKioskData(businessid, K_PRICE);
		new kiosk_percent = kiosk_price / 100 * 60;
		new kiosk_improvemnts_price = 0;
		if(kiosk_improvemnts_price)
			kiosk_improvemnts_price = kiosk_improvemnts_price / 100 * 35;
		new query[200];
		new return_money = kiosk_percent;
		SetKioskData(businessid, K_OWNER_ID, 	0);
		AddPlayerData(playerid, P_BANK, +, return_money);
		BankLog(playerid, return_money, "Продажа бизнеса");
		SetKioskData(businessid, K_IMPROVEMENTS, 	0);
		format(g_kiosk[businessid][K_BALANCE], 21, "0");
		SetKioskData(businessid, K_RENT_DATE,		0);
		SetKioskData(businessid, K_LOCK_STATUS,	false);
		format(g_kiosk[businessid][K_OWNER_NAME], 21, "Государство", 0);
		format(query, sizeof query, "UPDATE accounts a,kiosk b SET a.bank=%d,b.improvements=1,b.owner_id=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetKioskData(businessid, K_SQL_ID));
		mysql_query(mysql, query, false);
		GivePlayerMoneyEx(playerid, 0, "Продажа киоска государству", false, false);
		SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой киоск!");
		format(query, sizeof query, "Вы продали ваш киоск Государству за {99CC00}%d руб", kiosk_price);
		SendClientMessage(playerid, 0xCECECEFF, query);
		format(query, sizeof query, "Итого ваш счет перечислено: {3399FF}%d руб", kiosk_price);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "~g~+%d rub", kiosk_price);
		GameText(playerid, query, 4000, 2);
	}
}

stock BuyPlayerKiosk(playerid, kiosk_id, bool: buy_from_owner = false, price = -1)
{
	if(price <= 0)
		price = GetKioskData(kiosk_id, K_PRICE);
	if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
	{
		new query[256];
		format(query, sizeof query, "UPDATE accounts a, kiosk b SET a.money=%d,b.owner_id=%d WHERE a.id=%d AND b.id=%d", SetPlayerIntStr(playerid, GetPlayerMoneyEx(playerid), -price), kiosk_id, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetKioskData(kiosk_id, K_SQL_ID));
		mysql_query(mysql, query, false);
		if(!mysql_errno())
		{
			SetKioskData(kiosk_id, K_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetKioskData(kiosk_id, K_IMPROVEMENTS, 	0);
			new time = gettime();
			if(!buy_from_owner)
			{
				format(g_kiosk[kiosk_id][K_BALANCE], 21, "0");
				SetKioskData(kiosk_id,	K_RENT_DATE,	0);
				SetKioskData(kiosk_id,	K_LOCK_STATUS,	false);
			}
			else
			{
				if(GetElapsedTime(GetKioskData(kiosk_id, K_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0) SetKioskData(kiosk_id, K_RENT_DATE, 0);
			}
			format(g_kiosk[kiosk_id][K_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			GivePlayerMoneyEx(playerid, -price, "Покупка киоска", false, true);
			format(query, sizeof query, "UPDATE kiosk SET improvements=1,balance=%s,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1",  GetKioskData(kiosk_id, K_BALANCE), GetKioskData(kiosk_id, K_RENT_DATE), GetKioskData(kiosk_id, K_LOCK_STATUS), GetKioskData(kiosk_id, K_SQL_ID));
			mysql_query(mysql, query, false);
			return 1;
		}
		SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
		return 0;
	}
	return 0;
}

stock SellDebtorsPropertyKiosk()
{
	str_q[0] = EOS;
	for(new i=0; i < g_kiosk_loaded; i ++)
	{
	    if(GetKioskData(i, K_OWNER_ID) != 0)
	    {
	        if(GetKioskData(i, K_RENT_DATE) < -1)
	        {
	            format(g_kiosk[i][K_OWNER_NAME], 21, "Государство", 0);
	            SetKioskData(i, K_OWNER_ID, 0);
	            SetKioskData(i, K_IMPROVEMENTS, 0);
	            SetKioskData(i, K_RENT_DATE, 0);
	            format(str_q, sizeof str_q, "UPDATE kiosk SET owner_id=0,improvements=1,rent=0 WHERE id='%d'", GetKioskData(i, K_SQL_ID));
				mysql_query(mysql, str_q, false);
	        }
	    }
 	}
}

public: OnPlayerManageEvent(playerid, event)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	if(event == 0) return SendClientMessage(playerid,0xFFDE7AFF,"Это улучшение уже куплено.");
	if(event == 1)
	{
		if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 1) return SendClientMessage(playerid,0xFFDE7AFF,"Это улучшение уже куплено.");
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 20000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerMoneyEx(playerid, -20000000, "Купил улучшение в киоске", true, true);
		SendClientMessage(playerid,0xFFA500FF,"Вы приобрели улучшение киоска {FFFFFF}2 {FFA500}уровня за {FFFFFF}20.000.000 {FFA500}руб.");
		SetKioskData(kiosk_id, K_IMPROVEMENTS,1);
		new fmt_text[100];
		mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET improvements=%d WHERE id=%d", GetKioskData(kiosk_id, K_IMPROVEMENTS), GetKioskData(kiosk_id, K_SQL_ID));
		mysql_query(mysql, fmt_text, false);
		UpdKioskss(playerid);
	}
	if(event == 2)
	{
		if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 0) return SendClientMessage(playerid,0xFFDE7AFF,"Вам пока что недоступно текущее улучшение, сначала купите предыдущее.");
		if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 2) return SendClientMessage(playerid,0xFFDE7AFF,"Это улучшение уже куплено.");
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 40000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerMoneyEx(playerid, -40000000, "Купил улучшение в киоске", true, true);
		SendClientMessage(playerid,0xFFA500FF,"Вы приобрели улучшение киоска {FFFFFF}3 {FFA500}уровня за {FFFFFF}40.000.000 {FFA500}руб.");
		SetKioskData(kiosk_id, K_IMPROVEMENTS,2);
		new fmt_text[100];
		mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET improvements=%d WHERE id=%d", GetKioskData(kiosk_id, K_IMPROVEMENTS), GetKioskData(kiosk_id, K_SQL_ID));
		mysql_query(mysql, fmt_text, false);
		UpdKioskss(playerid);		
	}
	if(event == 3)
	{
	    new fmt_text[250];
	    format(fmt_text, sizeof fmt_text, "Текущая минимальная цена: %d руб.", GetKioskData(kiosk_id, K_MIN_PRICE));
	    Dialog(playerid, DIALOG_KIOSK_MIN_PRICE, DIALOG_STYLE_INPUT,fmt_text,"{FFDE7A}Введите новое значение, если хотите изменить<n>Имейте в виду, что вы устанавливаете минимальную цену<n>не на одну единицу товара, а на само предложение.","Далее", "Назад");
	}
	if(event == 4) Dialog(playerid, DIALOG_KIOSK_NALOG, DIALOG_STYLE_INPUT,"Установка налога","{FFDE7A}Введите процент налога на продажу (от {42B02C}1 {FFDE7A}до {42B02C}25).","Далее", "Назад");
	if(event == 5)
	{
		new Cache: result;
		string_dialog[0] = EOS;
		mysql_format(mysql, string_dialog, sizeof string_dialog, "SELECT * FROM kiosks_items WHERE kiosk_id=%d", GetKioskData(kiosk_id, K_SQL_ID));
		result = mysql_query(mysql, string_dialog, true);
		new rows = cache_num_rows();
		new query[170], price, item, id, name[32], number[32], region[32], typenumber, aks_id, typeacs, skin_id, item_type;
		format(string_dialog, sizeof string_dialog, "");
		if(!rows) string_dialog = "";
		for(new i = 0; i < rows; i ++)
		{
			cache_get_field_content(i, "region", region);
			cache_get_field_content(i, "number", number);
			cache_get_field_content(i, "name", name);
		    typenumber = cache_get_field_content_int(i, "typenumber");
		    aks_id = cache_get_field_content_int(i, "aks_id");
		    typeacs = cache_get_field_content_int(i, "typeacs");
			skin_id = cache_get_field_content_int(i, "skin_id");
			item_type = cache_get_field_content_int(i, "item_type");
			price = cache_get_field_content_int(i, "price");
			item = cache_get_field_content_int(i, "item_id");
			id = cache_get_field_content_int(i, "id");
			if(item_type == 1) format(query, sizeof query, "[\"%s\", %d, [99, %d, \"%s %s\"], %d, \"%s\"],", name, price, typenumber ,number, region, id, GetKioskData(kiosk_id, K_NAME));
			if(item_type == 2) format(query, sizeof query, "[\"%s\", %d, [%d, %d], %d, \"%s\"],", name, price, typeacs, aks_id, id, GetKioskData(kiosk_id, K_NAME));
			if(item_type == 3) format(query, sizeof query, "[\"%s\", %d, [100,0,%d], %d, \"%s\"],", name, price, skin_id, id, GetKioskData(kiosk_id, K_NAME));
			if(item_type == 0) format(query, sizeof query, "[\"%s\", %d, %d, %d, \"%s\"],", name, price, item, id, GetKioskData(kiosk_id, K_NAME));
			strcat(string_dialog, query);
		}
		new str_len;
		str_len = strlen(string_dialog);
		strdel(string_dialog, str_len - 1, str_len);
		cache_delete(result);
	    STRING_GLOBAL[0] = EOS;
	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s]", string_dialog);
	    BitStream_1(playerid, s_CefInterface, t_CefHide, "StallCard");
		BitStream_2(playerid, s_CefInterface, t_CefShow, "Stall", STRING_GLOBAL);
		SetPVarInt(playerid, "RemoveStallItems", 1);
	}
	if(event == 6)
	{
		new fmt_text[144];
		new day,month,year;
		getdate(year, month, day);
		ClearAnimations(playerid);
		ApplyAnimationEx(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
		SetKioskData(kiosk_id, K_DAY, day);
		SetKioskData(kiosk_id, K_MONTH, month);
		SetKioskData(kiosk_id, K_YEAR, year);
		mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET day=%d,month=%d,year=%d WHERE id=%d", GetKioskData(kiosk_id, K_DAY),GetKioskData(kiosk_id, K_MONTH),GetKioskData(kiosk_id, K_YEAR), GetKioskData(kiosk_id, K_SQL_ID));
		mysql_query(mysql, fmt_text, false);
		BitStream_1(playerid, s_CefInterface, t_CefShow,"StallManage");
		SetTimerEx("updkiosk", 3000, false, "i", playerid);
		SendClientMessage(playerid,0xFFA500FF,"Вы закончили уборку. Не забывайте, что убираться нужно не реже чем раз в {FFFFFF}1 {FFA500}день.");
		SendClientMessage(playerid,0xFFA500FF,"Иначе ваш киоск может начать ломаться и потеряет улучшения.");
		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 3.1, 0, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
		BitStream_1(playerid, s_CefInterface, t_CefHide,"StallManage");
	}
	if(event == 7)
	{
		if(GetKioskData(kiosk_id, K_LOCK_STATUS)) SetKioskData(kiosk_id, K_LOCK_STATUS, false), SendClientMessage(playerid, 0x66CC00FF, "Киоск открыт");
		else SetKioskData(kiosk_id, K_LOCK_STATUS, true), SendClientMessage(playerid, 0xFF6600FF, "Киоск закрыт");
	}
	if(event == 8) callcmd::sellstall(playerid);
	if(event == 9)
	{
		new fmt[148]; 
		format(fmt, sizeof fmt, "{ffffff}Текущее название: '%s'\nЕсли хотите изменить его, введите новое название в поле ниже.", GetKioskData(kiosk_id, K_NAME));
		Dialog(playerid, DIALOG_KIOSK_NAME, DIALOG_STYLE_INPUT,"Название киоска", fmt,"Готово", "Закрыть");
	}
	if(event == 10) Dialog(playerid, DIALOG_KIOSK_INTER, DIALOG_STYLE_LIST,"{FFFF00}Список интерьеров","{FFFFFF}№1\t{ffa500}10.000.000 руб.\n{FFFFFF}№2\t{ffa500}15.000.000 руб.\n{FFFFFF}№3\t{ffa500}20.000.000 руб.\n{FFFFFF}№4\t{ffa500}30.000.000 руб.","Далее", "Назад"), BitStream_1(playerid, s_CefInterface, t_CefHide,"StallManage");
	if(event == 11) SCM(playerid, 0xCECECEFF, "В разработке!");
	if(event == 255) BitStream_1(playerid, s_CefInterface, t_CefHide,"StallManage");
	return 1;
}

public: OnPlayerStallCardEvent(playerid, event)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	if(kiosk_id != -1)
	{
		if(event == 255) BitStream_1(playerid, s_CefInterface, t_CefHide,"StallCard");
	 	if(event == 1)
	 	{
	 	    new fmt_text[60],
				Cache: result,
				biz_id;
			mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_text, true);
			new rows = cache_num_rows();
			if(!rows)
				return SendClientMessage(playerid, 0x999999FF, "У вас не одного киоска во владении.");
			for(new i = 0; i < rows; i ++)
			{
				biz_id = cache_get_field_content_int(i, "id");
				if(biz_id == kiosk_id)
				{
		 	        BitStream_1(playerid, s_CefInterface, t_CefHide,"StallCard");
		 	        BitStream_1(playerid, s_CefInterface, t_CefShow,"StallManage");
                    updkiosk(playerid);
					SetTimerEx("updkiosk", 1000, false, "i", playerid);
		 	  	}
			}
			cache_delete(result);
	 	}
	 	if(event == 2)
	  	{
	  		if(GetKioskData(kiosk_id, K_LOCK_STATUS))
	  		{
	  		    SendClientMessage(playerid,0xFFDE7AFF,"Киоск закрыт.");
				return 1;
	  		}
	  		BitStream_1(playerid, s_CefInterface, t_CefHide, "StallCard");
	  		BitStream_1(playerid, s_CefInterface, t_CefHide, "Stall");
			ShowPlayerStall(playerid);
	  	}
	}
 	return 1;
}

stock ShowPlayerStall(playerid)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	new Cache: result;
	string_dialog[0] = EOS;
	mysql_format(mysql, string_dialog, sizeof string_dialog, "SELECT * FROM kiosks_items WHERE kiosk_id=%d", GetKioskData(kiosk_id, K_SQL_ID));
	result = mysql_query(mysql, string_dialog, true);
	new rows = cache_num_rows();
	new query[170], price, item, id, name[32], number[32], region[32], typenumber, aks_id, typeacs, skin_id, item_type;
	format(string_dialog, sizeof string_dialog, "");
	if(!rows) string_dialog = "";
	for(new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "region", region);
		cache_get_field_content(i, "number", number);
		cache_get_field_content(i, "name", name);
		typenumber = cache_get_field_content_int(i, "typenumber");
		aks_id = cache_get_field_content_int(i, "aks_id");
		typeacs = cache_get_field_content_int(i, "typeacs");
		skin_id = cache_get_field_content_int(i, "skin_id");
		item_type = cache_get_field_content_int(i, "item_type");
		price = cache_get_field_content_int(i, "price");
		item = cache_get_field_content_int(i, "item_id");
		id = cache_get_field_content_int(i, "id");
		if(item_type == 1) format(query, sizeof query, "[\"%s\", %d, [99, %d, \"%s %s\"], %d, \"%s\"],", name, price, typenumber ,number, region, id, GetKioskData(kiosk_id, K_NAME));
		if(item_type == 2) format(query, sizeof query, "[\"%s\", %d, [%d, %d], %d, \"%s\"],", name, price, typeacs, aks_id, id, GetKioskData(kiosk_id, K_NAME));
		if(item_type == 3) format(query, sizeof query, "[\"%s\", %d, [100,0,%d], %d, \"%s\"],", name, price, skin_id, id, GetKioskData(kiosk_id, K_NAME));
		if(item_type == 0) format(query, sizeof query, "[\"%s\", %d, %d, %d, \"%s\"],", name, price, item, id, GetKioskData(kiosk_id, K_NAME));
		strcat(string_dialog, query);
	}
	new str_len;
	str_len = strlen(string_dialog);
	strdel(string_dialog, str_len - 1, str_len);
	cache_delete(result);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s]", string_dialog);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "StallCard");
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Stall", STRING_GLOBAL);
	DeletePVar(playerid, "RemoveStallItems");
}

public: updkiosk(playerid){UpdKioskss(playerid);}
stock UpdKioskss(playerid)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').level = %d", GetKioskData(kiosk_id, K_IMPROVEMENTS));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').balance = %s.00", GetKioskData(kiosk_id, K_BALANCE));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').owner.name = '%s'", GetKioskData(kiosk_id, K_NAME));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').owner.number = %d", kiosk_id);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').tax = %d", GetKioskData(kiosk_id, K_NALOG));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').day = %d", GetKioskData(kiosk_id, K_DAY));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').month = %d", GetKioskData(kiosk_id, K_MONTH));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').year = %d", GetKioskData(kiosk_id, K_YEAR));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').paidDays = %d", GetKioskData(kiosk_id, K_RENT_DATE));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
	return 1;
}

stock GetStallItemsId(event)
{
	new query[64],
		count,
		Cache: result;
	format(query, sizeof query, "SELECT * FROM kiosks_items WHERE id=%d", event);
	result = mysql_query(mysql, query, true);
	if(!cache_num_rows()) count = -1;
	else count = cache_num_rows();
	cache_delete(result);
	return count;
}

public:OnPlayerStallBuy(playerid, event)
{
	new fmt_text[148],
		query[248],
		number[32], 
		region[32],
		Cache: result;
	format(fmt_text, sizeof fmt_text, "SELECT * FROM kiosks_items WHERE id=%d", event);
	result = mysql_query(mysql, fmt_text, true);
	if(!cache_num_rows()) return SCM(playerid, COLOR_BLUENEW, "Данный предемет был продан или снят с продажи.");
	new item_id = cache_get_field_content_int(0, "item_id");
	new count = cache_get_field_content_int(0, "count");
	new price = cache_get_field_content_int(0, "price");
	new owner_id = cache_get_field_content_int(0, "owner_id");
	new item_type = cache_get_field_content_int(0, "item_type");
	new typenumber = cache_get_field_content_int(0, "typenumber");
	new aks_id = cache_get_field_content_int(0, "aks_id");
	new typeacs = cache_get_field_content_int(0, "typeacs");
	new indx = cache_get_field_content_int(0, "indx");
	new skin_id = cache_get_field_content_int(0, "skin_id");
	cache_get_field_content(0, "region", region);
	cache_get_field_content(0, "number", number);
	cache_delete(result);
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	new to_player = GetPlayerIDBySqlID(owner_id);
	if(GetPlayerLevel(playerid) < 3) return SCM(playerid, -1, "Покупка в киосках доступна с 3 лвл.");
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
	if(owner_id == GetPlayerAccountID(playerid))
	{
		if(item_type == 0) GiveIteam(playerid, item_id, 1, count, 0), SCM(playerid, 0xADCEEAFF, "Вы сняли ваш предмет с продажи.");
		if(item_type == 1)
		{
			new i = GetFreeItemsID();
			format(query, sizeof query, "INSERT INTO items (owner_id, type, slots, number, region, typenumber, type_item, get_id) VALUES (%d, 1, %d, \"%s\", \"%s\", %d, 1, %d)", GetPlayerAccountID(playerid), GetInventorySlots(playerid), number, region, typenumber, i);
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetPlayerItem(i, PI_TYPE, 			1);
			SetPlayerItem(i, PI_SLOTS, 			GetInventorySlots(playerid));
			format(g_player_item[i][PI_NUMBER], 32, "%s", number);
			format(g_player_item[i][PI_REGION], 32, "%s", region);
			SetPlayerItem(i, PI_TYPENUMBER, 	typenumber);
			SetPlayerItem(i, PI_TYPE_ITEM, 		1);
			SCM(playerid, 0xADCEEAFF, "Вы сняли ваши автомобильные номера с продажи.");
		}
		if(item_type == 2)
		{
			new i = GetFreeItemsID();
			format(query, sizeof query, "INSERT INTO items (owner_id, type, slots, aks_id, typeacs, status, indx, type_item, get_id) VALUES (%d, 1, %d, %d, %d, 0, %d, 2, %d)", GetPlayerAccountID(playerid), GetInventorySlots(playerid), aks_id, typeacs, indx, i);
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetPlayerItem(i, PI_TYPE, 			1);
			SetPlayerItem(i, PI_SLOTS, 			GetInventorySlots(playerid));
			SetPlayerItem(i, PI_AKS_ID, 		aks_id);
			SetPlayerItem(i, PI_TYPEACS, 		typeacs);
			SetPlayerItem(i, PI_STATUS, 		0);
			SetPlayerItem(i, PI_INDX, 			indx);
			SetPlayerItem(i, PI_TYPE_ITEM, 		2);
			SCM(playerid, 0xADCEEAFF, "Вы сняли ваш аксессуар с продажи.");
		}
		if(item_type == 3) GiveSkin(playerid, skin_id), SCM(playerid, 0xADCEEAFF, "Вы сняли вашу одежду с продажи.");
		format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", event);
		mysql_query(mysql, query, false);
	}
	else
	{
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
	    if(item_type == 0)
	    {
			DLGF(playerid, DIALOG_STALL_BUY_ITEM, DIALOG_STYLE_INPUT, "Покупка предмета", "{FFFFFF}Сколько вы желаете приобрести?\nНа продаже: {006400}%d {FFFFFF}ед.", "Далее", "Назад", count);
			SetPVarInt(playerid, "count", count);
			SetPVarInt(playerid, "price", price);
			SetPVarInt(playerid, "item_id", item_id);
			SetPVarInt(playerid, "owner_id", owner_id);
			SetPVarInt(playerid, "count1", count);
			SetPVarInt(playerid, "id", event);
		}
		if(item_type == 1)
	    {
			new count1 = count;
			GivePlayerMoneyEx(playerid, -price, "покупка автомобильных намеров в киоске");
			format(g_kiosk[kiosk_id][K_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_kiosk[kiosk_id][K_BALANCE], (price / 100) * GetKioskData(kiosk_id, K_NALOG)));
			format(query, sizeof query, "UPDATE kiosk SET balance=%s WHERE id=%d", GetKioskData(kiosk_id, K_BALANCE),GetKioskData(kiosk_id, K_SQL_ID));
			mysql_query(mysql, query, false);
			new i = GetFreeItemsID();
			format(query, sizeof query, "INSERT INTO items (owner_id, type, slots, number, region, typenumber, type_item, get_id) VALUES (%d, 1, %d, \"%s\", \"%s\", %d, 1, %d)", GetPlayerAccountID(playerid), GetInventorySlots(playerid), number, region, typenumber, i);
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetPlayerItem(i, PI_TYPE, 			1);
			SetPlayerItem(i, PI_SLOTS, 			GetInventorySlots(playerid));
			format(g_player_item[i][PI_NUMBER], 32, "%s", number);
			format(g_player_item[i][PI_REGION], 32, "%s", region);
			SetPlayerItem(i, PI_TYPENUMBER, 	typenumber);
			SetPlayerItem(i, PI_TYPE_ITEM, 		1);
			SCM(playerid, 0xADCEEAFF, "Вы успешно приобрели автомобильные номера в киоске.");
			if(count1 - count != 0) format(query, sizeof query, "UPDATE kiosks_items SET count=%d WHERE id=%d LIMIT 1", count1 - count, event);
			else format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", event);
			mysql_query(mysql, query, false);
			if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
			{
				GivePlayerMoneyEx(to_player, price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), "продажа автомобильных намеров в киоске");
				SCM(to_player, 0xADCEEAFF, "Ваши автомобильные номера в киоске преобрели.");
			}
			else
			{
				format(query, sizeof query, "UPDATE accounts SET bank = bank + %d WHERE id=%d LIMIT 1", price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), owner_id);
				mysql_query(mysql, query, false);
			}
		}
		if(item_type == 2)
	    {
			new count1 = count;
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SCM(playerid, 0xADCEEAFF, "У вас недостаточно средств.");
			GivePlayerMoneyEx(playerid, -price, "покупка аксессуара в киоске");
			format(g_kiosk[kiosk_id][K_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_kiosk[kiosk_id][K_BALANCE], (price / 100) * GetKioskData(kiosk_id, K_NALOG)));
			format(query, sizeof query, "UPDATE kiosk SET balance=%s WHERE id=%d", GetKioskData(kiosk_id, K_BALANCE),GetKioskData(kiosk_id, K_SQL_ID));
			mysql_query(mysql, query, false);
			new i = GetFreeItemsID();
			format(query, sizeof query, "INSERT INTO items (owner_id, type, slots, aks_id, typeacs, status, indx, type_item, get_id) VALUES (%d, 1, %d, %d, %d, 0, %d, 2, %d)", GetPlayerAccountID(playerid), GetInventorySlots(playerid), aks_id, typeacs, indx, i);
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetPlayerItem(i, PI_TYPE, 			1);
			SetPlayerItem(i, PI_SLOTS, 			GetInventorySlots(playerid));
			SetPlayerItem(i, PI_AKS_ID, 		aks_id);
			SetPlayerItem(i, PI_TYPEACS, 		typeacs);
			SetPlayerItem(i, PI_STATUS, 		0);
			SetPlayerItem(i, PI_INDX, 			indx);
			SetPlayerItem(i, PI_TYPE_ITEM, 		2);
			SCM(playerid, 0xADCEEAFF, "Вы успешно приобрели аксессуар в киоске.");
			if(count1 - count != 0) format(query, sizeof query, "UPDATE kiosks_items SET count=%d WHERE id=%d LIMIT 1", count1 - count, event);
			else format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", event);
			mysql_query(mysql, query, false);
			if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
			{
				GivePlayerMoneyEx(to_player, price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), "продажа аксессуара в киоске");
				SCM(to_player, 0xADCEEAFF, "Ваш аксессуар в киоске преобрели.");
			}
			else
			{
				format(query, sizeof query, "UPDATE accounts SET bank = bank + %d WHERE id=%d LIMIT 1", price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), owner_id);
				mysql_query(mysql, query, false);
			}
		}
		if(item_type == 3)
	    {
			GivePlayerMoneyEx(playerid, -price, "покупка скина в киоске");
			format(g_kiosk[kiosk_id][K_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_kiosk[kiosk_id][K_BALANCE], (price / 100) * GetKioskData(kiosk_id, K_NALOG)));
			format(query, sizeof query, "UPDATE kiosk SET balance=%s WHERE id=%d", GetKioskData(kiosk_id, K_BALANCE),GetKioskData(kiosk_id, K_SQL_ID));
			mysql_query(mysql, query, false);
			GiveSkin(playerid, skin_id);
			format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", event);
			mysql_query(mysql, query, false);
			SCM(playerid, 0xADCEEAFF, "Вы успешно приобрели одежду в киоске.");
			if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
			{
				GivePlayerMoneyEx(to_player, price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), "продажа скина в киоске");
				SCM(to_player, 0xADCEEAFF, "Вашу одежду в киоске преобрели.");
			}
			else
			{
				format(query, sizeof query, "UPDATE accounts SET bank = bank + %d WHERE id=%d LIMIT 1", price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), owner_id);
				mysql_query(mysql, query, false);
			}
		}
	}
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Stall");
	return 1;
}

#if defined MainMenu
    #endinput
#endif
#define MainMenu. _mm

#if defined this
    #undef this
#endif
#define this. _mm
enum MainMenu.eEventType {
    MainMenu.MAP, //0
    MainMenu.STATISTICS, // 1
    MainMenu.IMPROVEMENTS, // 2 прокачка
    MainMenu.DOCS,// 3 доки
    MainMenu.PROMO,//- 4 неактив
    MainMenu.ACHIEVEMENTS,// 5 достижения
    MainMenu.PROPERTY,// 6 имущество
    MainMenu.TASKS,// 7 квесты
    MainMenu.REWARDS,// 8 награды мои
    MainMenu.BATTLE_PASS,// 9
    MainMenu.REWARDS_PLAYER,// 10 //неактив
    MainMenu.STORE,// 11 магазин
    MainMenu.ACCOUNT,// 12 неактив
    MainMenu.REPORT,// 13 репорт йоу
    MainMenu.PLAYERLIST,//- 14 //неактив
    MainMenu.DRAW//- 15 розыгрышщ
}
enum MainMenu.Size
{
    MainMenu.STAR = 0,
    MainMenu.WEAPON = 1,
    MainMenu.EXP = 2,
    MainMenu.CAR = 3,
    MainMenu.SKIN = 4,
    MainMenu.MONEY = 5,
    MainMenu.ACCS = 6,
    MainMenu.VIP = 7,
    MainMenu.ITEM = 8,
    MainMenu.SKILL = 9,
    MainMenu.DONATE = 10,
    MainMenu.X_BONUS = 11,
    MainMenu.CASES = 12,
    MainMenu.CASES_KEY = 13,
    MainMenu.ANIM = 14,
    MainMenu.LIC_ALL = 15,
    MainMenu.LIC = 16,
    MainMenu.MILITARY = 17,
    MainMenu.TATOO = 18,
    MainMenu.LOTTERY = 19,
    MainMenu.BATTLE_PASS_GIVE = 20,
    MainMenu.OPEN_CASE = 21
}
enum tatyStruct
{
	tatyPrice,
	tatyName[156],
	tatyid[156],
}
new g_donate_taty_price[][tatyStruct] =
{
	{35, "Мужик", 1},
	{63, "Козёл", 2},
	{126, "Пацан", 3},
	{189, "Бык", 4},
	{252, "Барыга", 5},
	{315, "Вор", 6},
	{378, "Пахан", 7},
	{441, "Блатной", 8},
	{504, "Вор в законе", 9}
};
new const g_Vinoslivost[] = {0,25,50,75,100};
enum donateStruct
{
	MainMenu.DIndex,
    MainMenu.DPrice,
    MainMenu.DValue[32],
    MainMenu.DValue2,
    MainMenu.DShow,
    MainMenu.DCurrentPrice,
    MainMenu.DSpecialPrice,
    MainMenu.DSpecialCurrentPrice,
    MainMenu.DOfferFactor
}
new g_donate_data[][donateStruct] =
{
	{0,125,"com.hassle.online.coins.100",0,1,125,10,10,0},
    {1,375,"com.hassle.online.coins.300",0,1,375,31,31,0},
    {2,625,"com.hassle.online.coins.500",0,1,625,52,52,0},
    {3,1250,"com.hassle.online.coins.1000",0,1,1250,104,104,0},
    {4,3750,"com.hassle.online.coins.3000",0,1,3750,312,312,0},
    {5,6250,"com.hassle.online.coins.5000",0,1,6250,520,520,0},
    {6,12500,"com.hassle.online.coins.10000",0,1,12500,1041,1041,0},
    {7,2250,"1",0,0,2250,187,187,3},
    {8,5000,"22500000",0,0,5000,416,416,3},
    {9,1000,"4170000",0,0,1000,83,83,3},
    {10,500,"1650000",0,0,500,41,41,3},
    {11,250,"750000",0,0,250,20,20,3},
    {12,113,"300000",0,0,113,9,9,3},
    {13,55000,"1",0,0,55000,4583,4583,0},
    {14,57291,"1",0,1,57291,4774,4774,0},
    {15,500,"1",0,0,500,41,41,0},
    {16,375,"1",0,0,375,31,31,0},
    {17,250,"1",0,0,250,20,20,0},
    {18,875,"1",0,0,6250000,612,4375000,0},
    {19,1730,"1",0,0,12500000,1211,8750000,0},
    {20,3365,"1",0,0,0,2355,0,0},
    {21,124,"1",0,0,124,10,10,0},
    {22,63,"1",0,0,63,5,5,0},
    {23,81,"1",0,0,81,6,6,0},
    {24,1875,"1",75,0,1875,156,156,0},
    {25,63,"1",0,0,63,5,5,0},
    {26,5,"1",0,0,5,0,0,0},
    {27,174,"1",0,0,174,14,14,0},
    {28,375,"1",0,0,375,31,31,0},
    {29,63,"1",0,0,63,5,5,0},
    {30,125,"1",0,0,125,10,10,0}
};
new pageprize[MAX_PLAYERS];
new pagemenu[MAX_PLAYERS];
new pageprizenumber[MAX_PLAYERS][2];
enum
{
	DONATE_PRICE_MONEY = 0,
	DONATE_PRICE_NAME,
	DONATE_PRICE_WARNS,
	DONATE_PRICE_DRUGS,
	DONATE_PRICE_LAW_ABIDING,
	DONATE_PRICE_PHONE_NUMBER,
	DONATE_PRICE_SKILLS,
	DONATE_PRICE_CAR_NUMBER,
	DONATE_PRICE_LIC_PACK,
	DONATE_PRICE_PODPISKA
}

enum
{
	DONATE_PRICE_PACK1,
	DONATE_PRICE_PACK2,
	DONATE_PRICE_PACK3,
	DONATE_PRICE_PACK4
}
stock GetCountImprovmentes(playerid, type)
{
    if (type == 0)
    {
		str_q[0] = EOS;
        mysql_format(mysql, str_q, sizeof str_q, "SELECT * FROM ownable_cars WHERE owner_id = '%d'", GetPlayerAccountID(playerid));
        new Cache:result = mysql_query(mysql, str_q, true);
        new rows = cache_num_rows();
        cache_delete(result);
        return rows;
    }
    if (type == 1)
    {
        str_q[0] = EOS;
        mysql_format(mysql, str_q, sizeof str_q, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
        new Cache:result = mysql_query(mysql, str_q, true);
        new rows = cache_num_rows();
        cache_delete(result);
        return rows;
    }
    if (type == 2)
    {
        str_q[0] = EOS;
        mysql_format(mysql, str_q, sizeof str_q, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
        new Cache:result = mysql_query(mysql, str_q, true);
        new rows = cache_num_rows();
        cache_delete(result);
        return rows;
    }
    return 0;
}
stock OpenMainMenu(playerid) {
    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0, 1,[\"%s\",\"%s\",[%d,%d],[%d,%d,%d],[%d,%d,%d],[%d,%d,%d,\"%s\",%d,%d],[],[],[],[10,\"Игрок\",\"Сервер\"],[]]]", GetPlayerNameEx(playerid), GetPlayerGameStatus(playerid), GetPlayerPremium(playerid), (GetPlayerPremiumTime(playerid) - gettime()) / 86400, GetPlayerLevel(playerid), GetPlayerExp(playerid), GetExpToNextLevel(playerid),GetCountImprovmentes(playerid,2),GetCountImprovmentes(playerid,1),GetCountImprovmentes(playerid,0),g_Vinoslivost[GetPlayerData(playerid, P_IMPROVEMENTS)],GetPlayerData(playerid, P_POWER),GetPlayerData(playerid, P_LAW_ABIDING),nakolka_name[GetPlayerData(playerid, P_NAKOLKA)],GetPlayerPhone(playerid),GetPlayerData(playerid, P_PHONE_BALANCE));
    BitStream_2(playerid, s_CefInterface, t_CefShow, "MainMenu", STRING_GLOBAL);
    return 1;
}
stock GetCarId(model_id) {
    for(new i,fa = sizeof(g_vehicle_info);i<fa;i++)
	{
		if(g_vehicle_info[i][VI_ID] != model_id) continue;
		return i;
	}
    return 0;
}
public:OnPlayerCreateTicket(playerid,const args[]) {
    format(report_message[playerid], sizeof report_message, "%s", args);
    Dialog(playerid, DIALOG_REPORT_2, DIALOG_STYLE_LIST, "Выберите действие", "1. Жалоба на игрока\n2. Задать вопрос", "Далее", "Закрыть");
    return 1;
}
public:GPS_OnPlayerUpdateData(playerid) {}
public:MainMenu_OnPlayerChangeTab(const playerid, event)
{
    if (!(0 <= event <= 13)) return 0;
    switch (event)
    {
        case MainMenu.STATISTICS:
        {
            STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(0, '[\"%s\",\"%s\",[%d,%d],[%d,%d,%d],[%d,%d,%d],[%d,%d,%d,\"%s\",%d,%d],[],[],[],[10,\"Игрок\",\"Сервер\"],[]]')", GetPlayerNameEx(playerid), GetPlayerGameStatus(playerid), GetPlayerPremium(playerid), (GetPlayerPremiumTime(playerid) - gettime()) / 86400, GetPlayerLevel(playerid), GetPlayerExp(playerid), GetExpToNextLevel(playerid),GetCountImprovmentes(playerid,2),GetCountImprovmentes(playerid,1),GetCountImprovmentes(playerid,0),g_Vinoslivost[GetPlayerData(playerid, P_IMPROVEMENTS)],GetPlayerData(playerid, P_POWER),GetPlayerData(playerid, P_LAW_ABIDING),nakolka_name[GetPlayerData(playerid, P_NAKOLKA)],GetPlayerPhone(playerid),GetPlayerData(playerid, P_PHONE_BALANCE));
            BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        }
        case MainMenu.DOCS: {
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(2, '[[0,[\"%s\",%d,\"Дом\",%d,1,%d,%d,0,\"\"]],[1,[\"%s\",[%d,%d,%d,0,0,0]]]]')",
			GetPlayerNameEx(playerid), GetPlayerData(playerid, P_SEX) ? 1 : 0, GetPlayerLevel(playerid), GetPlayerSkin(playerid), GetPlayerData(playerid, P_LAW_ABIDING),
		 	GetPlayerNameEx(playerid), GetPlayerData(playerid, P_DRIVING_LIC), GetPlayerData(playerid, P_DRIVING_LIC), GetPlayerData(playerid, P_WEAPON_LIC));
		    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        }
        case MainMenu.MAP: {
            BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').showMapBusiness('[[1,1],[2,1],[3,1],[4,1],[5,1],[9,1],[10,1],[11,1],[14,1],[16,1],[17,1],[18,1],[19,1],[20,1],[24,1],[25,1],[26,1],[28,1],[29,1],[31,1],[35,1],[37,1],[39,1],[41,1],[43,1],[44,1],[46,1],[51,1],[52,1],[55,1],[56,1],[57,1],[61,1],[62,1],[66,1],[69,0],[71,1],[75,1],[76,1],[78,1],[79,0],[80,0],[81,0],[86,0],[87,0],[88,0],[89,0],[92,0],[96,1],[97,1],[101,1],[102,1],[103,1],[105,0],[106,0],[107,0],[110,1],[111,0],[113,0],[116,0],[117,0],[118,0],[119,0],[120,0],[122,0],[126,1],[134,1],[135,1],[136,1],[137,0],[138,0],[139,0],[140,1],[141,0],[143,1],[144,1],[146,1],[147,1],[148,1],[149,1],[150,1],[151,0],[152,0],[153,0],[155,1],[159,1],[161,1],[162,1],[163,1],[174,1],[181,0],[182,1],[184,1],[185,1],[192,0],[193,1],[194,0],[195,0],[196,0],[198,0],[199,0],[201,1]]')");
            new Float:pos[3];
            GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
            format(STRING_GLOBAL,sizeof STRING_GLOBAL,"interface('MainMenu').setMapPlayer('[%d, %d, 1]')",floatround(pos[0]),floatround(pos[1]));
            BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        }
		case 12: {

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(10, '[\
            [0,\"Электронная почта\",0,\"%s\",1,5,0],\
            [0,\"Сменить пароль\",1,\"\",0,9,0],\
            [0,\"Настройки безопасности\",2,\"\",0,8,0],\
            [0,\"Сменить NonRP ник\",3,\"\",0,6,0],\
            [0,\"Привязать Telegram\",4,\"\",1,7,0],\
            [1,\"Подсказка кнопок управления\",8,\"[0,1]\",0,1,0,\"\",\"Скрывает кнопки управления под чатом\"],\
            [1,\"Эффекты изменения здоровья\",9,\"[0,1]\",0,1,0,\"\",\"При изменении здоровья отображаются визуальные эффекты: красные вспышки сигнализируют об уроне, а зеленые – о восстановлении здоровья. Эти эффекты помогают быстрее ориентироваться в боевой ситуации\"],\
            [1,\"Затухание чата\",14,\"[0,1]\",0,1,0,\"\",\"Функция, которая делает чат полупрозрачным при отсутствии новых сообщений. Это освобождает экран от лишних элементов, сохраняя возможность видеть чат при необходимости.\"],\
            [1,\"Отображение чисел в худе\",15,\"[0,1]\",1,1,0,\"\",\"Показывает точные цифровые значения здоровья, брони и уровня сытости на экране. Удобно для контроля состояния персонажа в любой момент\"]\
            ]')",GetPlayerData(playerid, P_EMAIL));
            BitStream_1(playerid,  s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        }
        case MainMenu.PROPERTY: {
            format(STRING_GLOBAL,sizeof STRING_GLOBAL,"interface('MainMenu').onServerResponse(18, '[75,[");
            str_q[0] = EOS;
            new Cache:result;
            mysql_format(mysql,str_q,sizeof str_q,"SELECT model_id,number,region FROM `ownable_cars` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);
            if(cache_num_rows()) {
                new number[32],region[8],model_id;
                model_id = cache_get_row_int(0, 0);
                cache_get_row(0, 1, number);
                cache_get_row(0, 2, region);
                format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[\"%s\",0,\"%s %s\", 0]",STRING_GLOBAL,g_vehicle_info[GetCarId(model_id)][VI_NAME], number, region);
                for(new i = 1; i<cache_num_rows(); i++) {
                    model_id = cache_get_row_int(i, 0);
                    cache_get_row(i, 1, number);
                    cache_get_row(i, 2, region);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s,[\"%s\",%d,\"%s %s\", 0]",STRING_GLOBAL,g_vehicle_info[GetCarId(model_id)][VI_NAME],i, number, region);
                }
            }
            strcat(STRING_GLOBAL, "],");
            cache_delete(result);
            strcat(STRING_GLOBAL,"[");
            mysql_format(mysql,str_q,sizeof str_q,"SELECT id,rent_time FROM `houses` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);

            if(cache_num_rows()) {
                for(new i;i<cache_num_rows(); i++) {
                    new id = cache_get_row_int(i, 0), rent_time = cache_get_row_int(i, 1);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d, [%d, 30, %d], 0],", STRING_GLOBAL,id, rent_time <= gettime() ? 0 :
                    GetElapsedTime(rent_time, gettime(), CONVERT_TIME_TO_DAYS), rent_time <= 3 ? 0 : 1);
                }
                strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            }
            strcat(STRING_GLOBAL,"],");
            cache_delete(result);

            strcat(STRING_GLOBAL,"[");
            mysql_format(mysql,str_q,sizeof str_q,"SELECT rent_time,name FROM `business` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);

            if(cache_num_rows()) {
                for(new i; i<cache_num_rows(); i++) {
                    new rent_time = cache_get_row_int(i, 0);
                    new name[32];
                    cache_get_row(i, 1, name);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[\"%s\", 0, [%d, 30, %d]],", STRING_GLOBAL,
                    name, rent_time <= gettime() ? 0 :
                    GetElapsedTime(rent_time, gettime(), CONVERT_TIME_TO_DAYS), rent_time <= 3 ? 0 : 1);
                }
                strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            }
            strcat(STRING_GLOBAL,"],");
            cache_delete(result);

            strcat(STRING_GLOBAL, "[],[],[],[]]')");
            BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
        }
        case MainMenu.STORE: {
			status_donate_number[playerid] = true;
            STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(13, '[");
            for(new i; i < sizeof g_donate_data; i++) {
                format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d,%d,\"%s\",%d,%d,%d,%d,%d,%d],",STRING_GLOBAL,g_donate_data[i][this.DIndex],g_donate_data[i][this.DPrice],g_donate_data[i][this.DValue],g_donate_data[i][this.DValue2],g_donate_data[i][this.DShow],g_donate_data[i][this.DCurrentPrice],g_donate_data[i][this.DSpecialPrice],g_donate_data[i][this.DSpecialCurrentPrice],g_donate_data[i][this.DOfferFactor]);
            }
            strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            strcat(STRING_GLOBAL,"]')");
            BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
        }
        case MainMenu.REWARDS: {
            pageprize[playerid] = 0;
			pageprizenumber[playerid][0] = 1;
			pageprizenumber[playerid][1] = 10;
            LoadMainPrizeMenu(playerid, pageprizenumber[playerid][0], pageprizenumber[playerid][1]);
        }
    }
    return 1;
}
public:DS_OnPlayerClickItem(playerid, index) {
    switch(index) {
        case 8: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[8,\"\"]')");
        case 13: BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('MainMenu').onServerResponse(14, '[13,\"Bentley R8 Titan\",[[17404,3,\"Bentley R8 Titan\",3,\"Легендарный\"]]]')");
        case 15: BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('MainMenu').onServerResponse(14, '[15,\"\",[\"Деньги {AEDC2D}(+262500 руб) {FFFFFF}\",\"Лицензия на вождение  {EF9D00}Уже имеется{FFFFFF}\",\"Проф.лицензия на вождение  {EF9D00}Уже имеется{FFFFFF}\",\"Медицинская карта  {EF9D00}Уже имеется{FFFFFF}\",\"Военный билет  {EF9D00}Уже имеется{FFFFFF}\",\"Владение Desert Eagle {AEDC2D}(+100%) {EF9D00}Уже имеется{FFFFFF}\",\"Владение Shotgun {AEDC2D}(+100%) {EF9D00}Уже имеется{FFFFFF}\",\"Владение MP5 {AEDC2D}(+50%) {EF9D00}Уже имеется{FFFFFF}\",\"Владение AK47 {AEDC2D}(+50%) {EF9D00}Уже имеется{FFFFFF}\",\"Ур.работы инкассатора {AEDC2D}(+1 ур) {FFFFFF}\",\"Ур.работы мойщика окон {AEDC2D}(+1 ур) {EF9D00}Уже имеется{FFFFFF}\",\"Ур.работы спасателя {AEDC2D}(+1 ур) {EF9D00}Уже имеется{FFFFFF}\",\"Ур.работы фермера {AEDC2D}(+1 ур) {FFFFFF}\",\"Ур.навыка компьютерщика {AEDC2D}(+1 ур) {FFFFFF}\",\"Ур.навыка взлома {AEDC2D}(+1 ур) {FFFFFF}\",\"Выносливость {AEDC2D}(+5000 очка(ов)) {FFFFFF}\",\"Сила {AEDC2D}(+5000 очка(ов)) {FFFFFF}\",\"Игровой опыт (до 3 лвл) {AEDC2D}(+4 очка(ов)) {EF9D00}Недоступно{FFFFFF}\"]]')");
        case 16: BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('MainMenu').onServerResponse(14, '[16,\"\",[\"Деньги {AEDC2D}(+225010 руб) {FFFFFF}\",\"Лицензия на вождение  {EF9D00}Уже имеется{FFFFFF}\",\"Проф.лицензия на вождение  {EF9D00}Уже имеется{FFFFFF}\",\"Медицинская карта  {EF9D00}Уже имеется{FFFFFF}\",\"Военный билет  {EF9D00}Уже имеется{FFFFFF}\",\"Владение Desert Eagle {AEDC2D}(+100%) {EF9D00}Уже имеется{FFFFFF}\",\"Владение Shotgun {AEDC2D}(+50%) {EF9D00}Уже имеется{FFFFFF}\",\"Ур.работы инкассатора {AEDC2D}(+1 ур) {FFFFFF}\",\"Ур.работы фермера {AEDC2D}(+1 ур) {FFFFFF}\",\"Ур.работы мойщика окон {AEDC2D}(+1 ур) {EF9D00}Уже имеется{FFFFFF}\",\"Выносливость {AEDC2D}(+3000 очка(ов)) {FFFFFF}\",\"Сила {AEDC2D}(+3000 очка(ов)) {FFFFFF}\",\"Игровой опыт (до 3 лвл) {AEDC2D}(+2 очка(ов)) {EF9D00}Недоступно{FFFFFF}\"]]')");
        case 17: BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('MainMenu').onServerResponse(14, '[17,\"\",[\"Деньги {AEDC2D}(+150000 руб) {FFFFFF}\",\"Лицензия на вождение  {EF9D00}Уже имеется{FFFFFF}\",\"Медицинская карта  {EF9D00}Уже имеется{FFFFFF}\",\"Ур.работы фермера {AEDC2D}(+1 ур) {FFFFFF}\",\"Ур.навыка компьютерщика {AEDC2D}(+1 ур) {FFFFFF}\",\"Выносливость {AEDC2D}(+3000 очка(ов)) {FFFFFF}\",\"Игровой опыт (до 3 лвл) {AEDC2D}(+1 очка(ов)) {EF9D00}Недоступно{FFFFFF}\",\"Владение Desert Eagle {AEDC2D}(+50%) {EF9D00}Уже имеется{FFFFFF}\",\"Военный билет  {EF9D00}Уже имеется{FFFFFF}\"]]')");
        case 21: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[21,\"\"]')");
        case 22: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[22,\"\",[\"Козёл|63|Возможность воровать металл на подработке в тюрьме|\",\"Пацан|126|Возможность занимать должность заместителя в банде|Возможность воровать металл на подработке в тюрьме\",\"Бык|189||Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде\",\"Барыга|252|Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы|Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде\",\"Вор|315||Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде$Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы\",\"Пахан|378|Возможность создавать личную банду|Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде$Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы\",\"Блатной|441||Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде$Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы$Возможность создавать личную банду\",\"Вор в законе|504||Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде$Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы$Возможность создавать личную банду\"]]')");
        case 23: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[23,\"\"]')");
        case 24: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[24,\"Покупка автомобильного номера\"]')");
        case 26: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[26,\"\"]')");
        case 27: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[27,\"\"]')");
        case 28: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[28,\"\"]')");
        case 29: BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(14, '[29,\"\"]')"); 
    }
    return 1;
}
public:DS_OnPlayerBuy(playerid,index,listitem,name[]) {
    if(GetPlayerCurrentDonate(playerid) < g_donate_data[index][this.DCurrentPrice]) return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "{FF6600}Ошибка", "{FFFFFF}Недостаточно средтсв для покупки", "Назад", "");
    switch(index) {
        case 7: {
            if(listitem < 1 || 2000000000 < listitem) return GameText(playerid, "~r~Неправильное кол-во", 3000, 2);
			if(GetPlayerCurrentDonate(playerid) < listitem) return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "{FF6600}Ошибка", "{FFFFFF}Недостаточно средтсв для покупки", "Назад", "");

			SCMF(playerid, COLOR_YELLOW, "Вы сконвертировали {33AA33}%d.00 руб. {FFFF00}в {33AA33}%d рублей", listitem, listitem * g_donate_data[index][this.DPrice]);
			SCM(playerid, 0x4169E1FF, "Вся сумма была перечислена наличными в игре");

			STRING_GLOBAL[0] = EOS;

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Конвертация %d руб. в игровую валюту", listitem);
			GivePlayerDonate(playerid, -listitem, STRING_GLOBAL, true, false);
			GivePlayerMoneyEx(playerid, listitem * g_donate_data[index][this.DPrice], STRING_GLOBAL, true, true);

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d рублей~n~~r~-%d доната", listitem * g_donate_data[index][this.DPrice], listitem);
			GameText(playerid, STRING_GLOBAL, 3000, 2);
        }
        case 8: {
            GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice],"Покупка в магазине");
            GivePlayerMoneyEx(playerid, 22500000,"Покупка в магазине");
        }
        case 9: {
            GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice],"Покупка в магазине");
            GivePlayerMoneyEx(playerid, 4170000,"Покупка в магазине");
        }
        case 10: {
            GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice],"Покупка в магазине");
            GivePlayerMoneyEx(playerid, 1650000,"Покупка в магазине");
        }
        case 11: {
            GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice],"Покупка в магазине");
            GivePlayerMoneyEx(playerid, 750000,"Покупка в магазине");
        }
        case 12: {
            GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice],"Покупка в магазине");
            GivePlayerMoneyEx(playerid, 300000,"Покупка в магазине");
        }
        case 13: return Dialog(playerid, DIALOG_BUY_DONATE_PACK_1, DIALOG_STYLE_MSGBOX, "Подтверждение", "Вы дейстительно хотите приобрести R8 Titan?", "Да", "Нет");
        case 14..16: return GameText(playerid,"~r~Недоступно", 3000, 3);
        case 21: {
            SetPlayerData(playerid, P_WEAPON_LIC, GetPlayerData(playerid, P_WEAPON_LIC) ^ 1);
			UpdatePlayerDatabaseInt(playerid, "weapon_lic", GetPlayerData(playerid, P_WEAPON_LIC));
			SetPlayerData(playerid, P_DRIVING_LIC, GetPlayerData(playerid, P_DRIVING_LIC) ^ 1);
			UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
			SetPlayerData(playerid, P_DRIVING_LIC, GetPlayerData(playerid, P_DRIVING_LIC) == 2 ? 0 : 2);
			UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
			GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice]);
        }
        case 22: {
            if(GetPlayerCurrentDonate(playerid) < g_donate_taty_price[listitem][tatyPrice]) return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "{FF6600}Ошибка", "{FFFFFF}Недостаточно средтсв для покупки", "Назад", "");
			GivePlayerDonate(playerid, -g_donate_taty_price[listitem][tatyPrice]);
			SetPlayerData(playerid, P_NAKOLKA, g_donate_taty_price[listitem][tatyid]);
			UpdatePlayerDatabaseInt(playerid, "nakolka", g_donate_taty_price[listitem][tatyid]);
        }
        case 23: {
            if(GetPlayerData(playerid, P_WARN) == 0) return GameText(playerid, "У вас нет предупреждений", 3000, 2);
	
			SetPlayerData(playerid, P_WARN, 0);
			UpdatePlayerDatabaseInt(playerid, "warn", 0);
			GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice]);
        }
        case 25: {
            new len = strlen(name);
			if(4 <= len <= 20)
			{
				new bool: valid_name = true;
				for(new idx; idx < len; idx ++)
				{
					switch(name[idx])
					{
						case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
						default:
							valid_name = false;
					}
				}
				if(!strcmp(GetPlayerNameEx(playerid), name, true)) SendClientMessage(playerid, 0xFF6600FF, "Вы уже используете это имя");
				else if(valid_name)
				{
					new query[128];
					new Cache: result, rows;

					mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();
					cache_delete(result);

					if(!rows)
					{
						if(ChangePlayerName(playerid, name, false))
						{

							GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice]);

							SCM(playerid, -1, "{ff8c00}[Уведомление] {ffffff}Вы успешно сменили никнейм. Перезайдите.");

							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "При смене ника произошла ошибка");

					}
					else SendClientMessage(playerid, 0xFF6600FF, "Введенное Вами имя уже используется");
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "Имя уже используется или содержит недопустимые символы");
					SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
				}
			}
			else SendClientMessage(playerid, 0xFF6600FF, "Недопустимый формат ввода");
        }
        case 26: {
            GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice]);
			SetPlayerData(playerid, P_LAW_ABIDING, GetPlayerData(playerid, P_LAW_ABIDING) + 10);
			UpdatePlayerDatabaseInt(playerid, "law_abiding", GetPlayerData(playerid, P_LAW_ABIDING));
        }
        case 27: {
            GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice]);
			SetPlayerData(playerid, P_VOEN, 1);
			UpdatePlayerDatabaseInt(playerid, "voennik", 1);
        }
        case 28,29: {
            GivePlayerDonate(playerid, -g_donate_data[index][this.DPrice]);
			SetPlayerData(playerid, P_SKILL_COLT, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_colt", 100);
			SetPlayerData(playerid, P_SKILL_SDPISTOL, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", 100);
			SetPlayerData(playerid, P_SKILL_DEAGLE, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_deagle", 100);
			SetPlayerData(playerid, P_SKILL_SHOTGUN, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_shotgun", 100);
			SetPlayerData(playerid, P_SKILL_MP5, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_mp5", 100);
			SetPlayerData(playerid, P_SKILL_AK47, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_ak47", 100);
			SetPlayerData(playerid, P_SKILL_M4, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_m4", 100);
			SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", 100);
			SetPlayerData(playerid, P_SKILL_SAWNOFF, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_sawnoff", 100);
			SetPlayerData(playerid, P_SKILL_COMBAT_SG, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_combat_sg", 100);
			SetPlayerData(playerid, P_SKILL_MICRO_UZI, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_micro_uzi", 100);
        }
        case 30: return GameText(playerid,"~r~Недоступно", 3000, 3);
    }
    GameText(playerid,"~g~Успешно", 3000, 2);
    return 1;
}

stock MainMenu_OnMoreDailyRewards(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "DailyRewards");
	new type = GetPlayerData(playerid, P_WARDS_TYPE_PRIZES);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[8, 8, [%d,7200,%d,-1,[[%d,%d,%d,1,\"%s\", 1],[%d,%d,%d,2,\"%s\", 2],[%d,%d,%d,3,\"%s\", 3],[%d,%d,%d,4,\"%s\", 4],[%d,%d,%d,5,\"%s\", 5],[%d,%d,%d,6,\"%s\", 6],[%d,%d,%d,7,\"%s\", 7]]]]",
	DailyreWards_Time[playerid], GetPlayerData(playerid, P_WARDS_PRIZE),
	g_dailyrewards[type][0][DAILY_REWARDS_TYPE],g_dailyrewards[type][0][DAILY_REWARDS_ID],g_dailyrewards[type][0][DAILY_REWARDS_COUNT],g_dailyrewards[type][0][DAILY_REWARDS_NAME],
	g_dailyrewards[type][1][DAILY_REWARDS_TYPE],g_dailyrewards[type][1][DAILY_REWARDS_ID],g_dailyrewards[type][1][DAILY_REWARDS_COUNT],g_dailyrewards[type][1][DAILY_REWARDS_NAME],
	g_dailyrewards[type][2][DAILY_REWARDS_TYPE],g_dailyrewards[type][2][DAILY_REWARDS_ID],g_dailyrewards[type][2][DAILY_REWARDS_COUNT],g_dailyrewards[type][2][DAILY_REWARDS_NAME],
	g_dailyrewards[type][3][DAILY_REWARDS_TYPE],g_dailyrewards[type][3][DAILY_REWARDS_ID],g_dailyrewards[type][3][DAILY_REWARDS_COUNT],g_dailyrewards[type][3][DAILY_REWARDS_NAME],
	g_dailyrewards[type][4][DAILY_REWARDS_TYPE],g_dailyrewards[type][4][DAILY_REWARDS_ID],g_dailyrewards[type][4][DAILY_REWARDS_COUNT],g_dailyrewards[type][4][DAILY_REWARDS_NAME],
	g_dailyrewards[type][5][DAILY_REWARDS_TYPE],g_dailyrewards[type][5][DAILY_REWARDS_ID],g_dailyrewards[type][5][DAILY_REWARDS_COUNT],g_dailyrewards[type][5][DAILY_REWARDS_NAME],
	g_dailyrewards[type][6][DAILY_REWARDS_TYPE],g_dailyrewards[type][6][DAILY_REWARDS_ID],g_dailyrewards[type][6][DAILY_REWARDS_COUNT],g_dailyrewards[type][6][DAILY_REWARDS_NAME]);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "MainMenu", STRING_GLOBAL);
}

public:OnPlayerSelectStallItem(playerid, event)
{
	if(GetPVarInt(playerid, "RemoveStallItems") == 1)
	{
		new fmt_text[50], 
			Cache: result;
		mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM kiosks_items WHERE id=%d", event);
		result = mysql_query(mysql, fmt_text, true);
		new item = cache_get_field_content_int(0, "item_id");
		cache_delete(result);
		SetPVarInt(playerid, "RemoveItem", item), SetPVarInt(playerid, "ItemSQLid", event);
		Dialog(playerid, DIALOG_REMOVE_STALL_ITEM, DIALOG_STYLE_MSGBOX, "Предмет", "Вы действительно хотите снять с продажи этот предмет?", "Да", "Нет");
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Stall");
		DeletePVar(playerid, "RemoveStallItems");
	}
}

#define MAX_GARDENS			500
#define MAX_GARDENS_YAM		21
#define GetGardenData(%0,%1) 			g_garden[%0][%1]
#define SetGardenData(%0,%1,%2) 		g_garden[%0][%1] = %2
#define AddGardenData(%0,%1,%2,%3) 		g_garden[%0][%1] %2= %3
#define IsGardenOwned(%0)				(GetGardenData(%0, G_OWNER_ID) > 0)
new	G_STATUS_YAM[MAX_GARDENS][MAX_GARDENS_YAM];
new	G_TYPE_YAM[MAX_GARDENS][MAX_GARDENS_YAM];
new	G_STATUSS[MAX_GARDENS][MAX_GARDENS_YAM];
new	G_STATUS_WOTER[MAX_GARDENS][MAX_GARDENS_YAM];
new rost[MAX_GARDENS][MAX_GARDENS_YAM];
new G_WT_ST[MAX_GARDENS][MAX_GARDENS_YAM];
new Garden_Status[MAX_GARDENS];
new array_gardens_data[MAX_GARDENS][MAX_GARDENS_YAM];
new gardenobj[MAX_GARDENS];
new gardenobj_1[MAX_GARDENS];
new gardenobj_1_woter[MAX_GARDENS];
new Text3D:gardenobj_1_label[MAX_GARDENS];
new gardenobj_2[MAX_GARDENS];
new gardendver[MAX_GARDENS];
new gardendyamka[MAX_GARDENS][MAX_GARDENS_YAM];
new Text3D:gardendyamkalab[MAX_GARDENS][MAX_GARDENS_YAM];
new Text3D:gardenlabel[MAX_GARDENS];
new Text3D:gardendvlabel[MAX_GARDENS];
new garden_name[9][32] =
{
	{"Помидоры"},
	{"Огурцы"},
	{"Марихуана"},
	{"Картофель"},
	{"Свёкла"},
	{"Перец"},
	{"Баклажан"},
	{"Капуста"},
	{"Морковь"}
};
new const Float:GardenGryadka_1[10][3] = 
{
	{2.3301700, 1.329370, -0.353425},
	{1.1589300, 1.179110, -0.353425},
	{0.0828660, 1.218390, -0.353425},
	{-1.106380, 1.110110, -0.353425},
	{-2.409940, 1.147260, -0.353425},
	{2.2354700, -1.30656, -0.353425},
	{1.0838900, -1.32176, -0.353425},
	{-0.030416, -1.34015, -0.353425},
	{-1.070720, -1.15078, -0.353425},
	{-2.323950, -1.31990, -0.353425}
};
new const Float:GardenGryadka_2[14][3] = 
{
	{3.2468700, 1.250690, -0.30281},
	{2.2132400, 1.212150, -0.30281},
	{1.2194400, 1.144390, -0.30281},
	{0.2158920, 1.262400, -0.30281},
	{-0.918480, 1.196750, -0.30281},
	{-1.912190, 1.130280, -0.30281},
	{-3.114080, 1.179900, -0.30281},
	{3.1987000, -1.35575, -0.30281},
	{2.2050000, -1.35272, -0.30281},
	{1.0236100, -1.33562, -0.30281},
	{0.1031830, -1.36212, -0.30281},
	{-0.969063, -1.35088, -0.30281},
	{-1.913220, -1.36969, -0.30281},
	{-3.044610, -1.38868, -0.30281}
};
new const Float:GardenGryadka_3[20][3] = 
{
	{1.5634500, -1.259690, -0.30954},
	{0.5423510, -1.285880, -0.30954},
	{-0.464825, -1.311840, -0.30954},
	{-1.486510, -1.328910, -0.30954},
	{-2.592960, -1.304490, -0.30954},
	{-3.790350, -1.285910, -0.30954},
	{-4.911210, -1.260120, -0.30954},
	{-4.854350, 1.3629200, -0.30954},
	{-3.850400, 1.3938200, -0.30954},
	{-2.874140, 1.3875700, -0.30954},
	{-1.775260, 1.3262900, -0.30954},
	{-0.786306, 1.2874100, -0.30954},
	{0.3654820, 1.2194600, -0.30954},
	{1.4934000, 1.2168800, -0.30954},
	{2.6332600, 1.2574800, -0.30954},
	{3.8631700, 1.2588600, -0.30954},
	{4.8718400, 1.2767000, -0.30954},
	{4.4897600, 0.1945770, -0.30954},
	{4.4936300, -0.697426, -0.30954},
	{4.4720600, -1.635830, -0.30954}
};
enum E_GARDEN_STRUCT
{
	G_SQL_ID,			// ид в базе данных
	G_OWNER_ID,			// ид аккаунта владельца
	G_STATUS,
	G_CITY,				// ид города
	G_ZONE,				// ид района
	G_IMPROVEMENTS,		// уровень улучшений
	G_RENT_DATE,		// аренда на n времени
	G_PRICE,			// стоимость бизнеса
	G_RENT_PRICE,		// плата за аренду в день
	G_LOCK_STATUS,		// статус (открыта/закрыта)
	Float: G_POS_X,		// позиция бизнеса
	Float: G_POS_Y,		// позиция бизнеса
	Float: G_POS_Z,		// позиция бизнеса
	// -------------------------
	G_OWNER_NAME[20 + 1]	// имя владельца
};

new g_garden[MAX_GARDENS][E_GARDEN_STRUCT];
new g_garden_loaded;
public: LoadGardens()
{
	new query[85];
	new Cache: result, rows;
    result = mysql_query(mysql, "SELECT * FROM gardens", true);
	rows = cache_num_rows();
	if(rows > MAX_GARDENS)
	{
		rows = MAX_GARDENS;
		print("[Gardens]: DB rows > MAX_GARDENS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetGardenData(idx, G_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetGardenData(idx, G_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
		SetGardenData(idx, G_STATUS, 	cache_get_field_content_int(idx, "status"));
		SetGardenData(idx, G_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetGardenData(idx, G_RENT_DATE,		cache_get_field_content_int(idx, "rent"));
		SetGardenData(idx, G_PRICE,			cache_get_field_content_int(idx, "price"));
        SetGardenData(idx, G_RENT_PRICE,			cache_get_field_content_int(idx, "rent_price"));
		SetGardenData(idx, G_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "g_lock"));
		SetGardenData(idx, G_POS_X,			cache_get_field_content_float(idx, "x"));
		SetGardenData(idx, G_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetGardenData(idx, G_POS_Z,			cache_get_field_content_float(idx, "z"));
        cache_get_field_content(idx, "owner_name", g_garden[idx][G_OWNER_NAME], mysql, 21);
		format(query, sizeof query, "UPDATE gardens SET id=%d WHERE id=%d",idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);
        gardenlabel[idx] = CreateDynamic3DTextLabel("", -1, GetGardenData(idx, G_POS_X),GetGardenData(idx, G_POS_Y),GetGardenData(idx, G_POS_Z)+4, 10.0);
	   	if(GetGardenData(idx, G_OWNER_ID) == 0)
	   	{
	   	    SetGardenData(idx, G_IMPROVEMENTS,0);
	   	    format(g_garden[idx][G_OWNER_NAME], 21, "None", 0);
	   	    mysql_format(mysql, query, sizeof query, "UPDATE gardens SET owner_id=0,improvements=0,owner_name='None' WHERE id=%d", GetGardenData(idx, G_SQL_ID));
			mysql_query(mysql, query, false);
	   	}
		if(GetGardenData(idx, G_IMPROVEMENTS) > 0)
		{
			if(GetGardenData(idx, G_IMPROVEMENTS) < 3) 
			{
				gardenobj_1[idx] = CreateDynamicObject(16560, GetGardenData(idx, G_POS_X) + -2.67, GetGardenData(idx, G_POS_Y) + -0.009998, GetGardenData(idx, G_POS_Z) + 0.124374,0.00000, 0.00000, 0.0);
				gardenobj_1_label[idx] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(idx, G_POS_X) + -2.67, GetGardenData(idx, G_POS_Y) + -0.009998, (GetGardenData(idx, G_POS_Z) + 0.124374) + 1.5, 2.0);
				gardenobj_1_woter[idx] = 0;
			}	
			if(GetGardenData(idx, G_IMPROVEMENTS) == 3) 
			{
				gardenobj_1[idx] = CreateDynamicObject(16560, GetGardenData(idx, G_POS_X) + -3.39779, GetGardenData(idx, G_POS_Y) + 0.025699, GetGardenData(idx, G_POS_Z) + 0.025609,0.00000, 0.00000, 0.0);
				gardenobj_1_label[idx] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(idx, G_POS_X) + -3.39779, GetGardenData(idx, G_POS_Y) + 0.025699, (GetGardenData(idx, G_POS_Z) + 0.025609) + 1.5, 2.0);
				gardenobj_1_woter[idx] = 0;
			}
			if(GetGardenData(idx, G_IMPROVEMENTS) == 4) 
			{
				gardenobj_1[idx] = CreateDynamicObject(16560, GetGardenData(idx, G_POS_X) + -5.07046, GetGardenData(idx, G_POS_Y) + 0.075143, GetGardenData(idx, G_POS_Z) + 0.036848,0.00000, 0.00000, 0.0);
				gardenobj_1_label[idx] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(idx, G_POS_X) + -5.07046, GetGardenData(idx, G_POS_Y) + 0.075143, (GetGardenData(idx, G_POS_Z) + 0.036848) + 1.5, 2.0);
				gardenobj_1_woter[idx] = 0;
			}
		}
		if(GetGardenData(idx, G_IMPROVEMENTS) > 1)
		{
			if(GetGardenData(idx, G_IMPROVEMENTS) < 4) gardenobj_2[idx] = CreateDynamicObject(16564, GetGardenData(idx, G_POS_X) + -0.034111, GetGardenData(idx, G_POS_Y) + -0.00752, GetGardenData(idx, G_POS_Z) + 0.017313,0.00000, 0.00000, 0.0);
			else gardenobj_2[idx] = CreateDynamicObject(16564, GetGardenData(idx, G_POS_X) + -0.434392, GetGardenData(idx, G_POS_Y) + -0.054589, GetGardenData(idx, G_POS_Z) + 0.461218,0.00000, 0.00000, 0.0);
		}
		if(GetGardenData(idx, G_IMPROVEMENTS) < 3)
		{
			for(new i = 0; i < 10; i ++)
			{
				gardendyamkalab[idx][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Нажмите {FFA500}ALT {FFFFFF}для посадки", -1, GetGardenData(idx, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_1[i][2] + 1, 2.0);
			}
			gardendvlabel[idx] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(idx, G_POS_X) + 2.97934, GetGardenData(idx, G_POS_Y) + 0.393404, GetGardenData(idx, G_POS_Z) + 1, 2.0);
		    gardendver[idx] = CreateObject(16563, GetGardenData(idx, G_POS_X) + 2.97934, GetGardenData(idx, G_POS_Y) + 0.393404, GetGardenData(idx, G_POS_Z) + -0.000461,   0.00000, 0.00000, 0.00000);
			gardenobj[idx] = CreateObject(16562, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.0);
		}
		if(GetGardenData(idx, G_IMPROVEMENTS) == 3)
		{
			for(new i = 0; i < 14; i ++)
			{
				gardendyamkalab[idx][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Нажмите {FFA500}ALT {FFFFFF}для посадки", -1, GetGardenData(idx, G_POS_X) + GardenGryadka_2[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_2[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_2[i][2] + 1, 2.0);
			}
		    gardendvlabel[idx] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(idx, G_POS_X) + 3.75328, GetGardenData(idx, G_POS_Y) + 0.393359, GetGardenData(idx, G_POS_Z) + 1, 2.0);
		    gardendver[idx] = CreateObject(10938, GetGardenData(idx, G_POS_X) + 3.75328, GetGardenData(idx, G_POS_Y) + 0.393359, GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.00000);
			gardenobj[idx] = CreateObject(10933, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.0);
		}
		if(GetGardenData(idx, G_IMPROVEMENTS) == 4)
		{
			for(new i = 0; i < 20; i ++)
			{
				gardendyamkalab[idx][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Нажмите {FFA500}ALT {FFFFFF}для посадки", -1, GetGardenData(idx, G_POS_X) + GardenGryadka_3[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_3[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_3[i][2] + 1, 2.0);
			}
		    gardendvlabel[idx] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(idx, G_POS_X) + 2.20977, GetGardenData(idx, G_POS_Y) + -2.19371, GetGardenData(idx, G_POS_Z) + 1, 2.0);
		    gardendver[idx] = CreateObject(16060, GetGardenData(idx, G_POS_X) + 2.20977, GetGardenData(idx, G_POS_Y) + -2.19371, GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.00000);
			gardenobj[idx] = CreateObject(16042, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.0);
		}
        CallLocalFunction("UpdateGardenLabel", "i", idx);
        CreateDynamicMapIcon(GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z), 58, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(!IsGardenOwned(idx))
		{
			SetGardenData(idx, G_LOCK_STATUS, false);
		}
	}
	g_garden_loaded = rows;
	cache_delete(result);
	printf("[Огороды]: Огородов загружено: %d", g_garden_loaded);
}

public: UpdateGardenLabel(gardenid)
{
	new fmt_str[300 + 1];
	if(!IsGardenOwned(gardenid))
	{
	    format
		(
			fmt_str, sizeof fmt_str,
			"{FF8800}Огород {ffffff}№%d\n"\
			"{FF8800}Цена: {ffffff}%s {FF8800}руб\n"\
			"Для покупки введите  {ffffff}/buygarden",gardenid,formatInt(GetGardenData(gardenid, G_PRICE))
		);
	}
	else
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"{FF8800}Огород {ffffff}№%d\n"\
			"{FF8800}Владелец: {ffffff}%s\n",
   			gardenid,GetGardenData(gardenid, G_OWNER_NAME)
		);
	}
	UpdateDynamic3DTextLabelText(gardenlabel[gardenid], 0xFFFF00FF, fmt_str);
}

stock ShowPlayerGardenPayForRent(playerid,garden)
{
	if(garden != -1)
	{
		new fmt_str[256];
		SetPVarInt(playerid, "garden_id", garden);
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Огород:<t><t><t><t>№%d\n"\
			"Оплаченных дней аренды:<t><t>%d из 14\n"\
			"Ежедневная арендная плата:<t>%d руб\n"\
			"На сколько дней Вы хотите арендовать огород?",
			garden,
			GetGardenData(garden, G_RENT_DATE),
			GetGardenData(garden, G_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_GARDEN, DIALOG_STYLE_INPUT, "{66CC00}Аренда огорода", fmt_str, "Оплатить", "Назад");
	}
}

stock GetNearestGarden(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new garden = -1;
	new Float: my_dist;
	for(new idx; idx < g_garden_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			garden = idx;
		}
	}
	return garden;
}

stock SellGarden(playerid, garden, to_player = INVALID_PLAYER_ID)
{
	if(garden != -1)
	{
	    SetGardenData(garden, G_OWNER_ID,		0);
        if(to_player == INVALID_PLAYER_ID)
		{
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), GetGardenData(garden, G_PRICE) / 100 * 70));
			BankLog(playerid, GetGardenData(garden, G_PRICE) / 100 * 70, "Продажа огорода");
			DestroyDynamic3DTextLabel(gardendvlabel[garden]);
			DestroyDynamicObject(gardenobj_1[garden]);
			DestroyDynamicObject(gardenobj_2[garden]);
			DestroyObject(gardendver[garden]);
			DestroyObject(gardenobj[garden]);
			gardendver[garden] = CreateObject(16563, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + -0.000461,   0.00000, 0.00000, 0.00000);
			gardenobj[garden] = CreateObject(16562, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z),   0.00000, 0.00000, 0.0);
			gardendvlabel[garden] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + 1, 2.0);
			if(GetGardenData(garden, G_IMPROVEMENTS) == 3)
			{
				for(new i = 0; i < 14; i ++)
				{
					DestroyDynamic3DTextLabel(gardendyamkalab[garden][i]);
				}
				for(new i = 0; i < 10; i ++)
				{
					gardendyamkalab[garden][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Нажмите {FFA500}ALT {FFFFFF}для посадки", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 2.0);
				}
			}
			if(GetGardenData(garden, G_IMPROVEMENTS) == 4)
			{
				for(new i = 0; i < 20; i ++)
				{
					DestroyDynamic3DTextLabel(gardendyamkalab[garden][i]);
				}
				for(new i = 0; i < 10; i ++)
				{
					gardendyamkalab[garden][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Нажмите {FFA500}ALT {FFFFFF}для посадки", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 2.0);
				}
			}
			SetGardenData(garden, G_IMPROVEMENTS,	0);
			SetGardenData(garden, G_RENT_DATE,		0);
			SetGardenData(garden, G_LOCK_STATUS,	false);
			new query[300];
			format(query, sizeof query, "UPDATE gardens SET owner_id=0,g_lock=0,improvements=0,owner_name='None' WHERE id=%d", GetGardenData(garden, G_SQL_ID));
			mysql_query(mysql, query, false);
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET bank=%s WHERE id=%d", GetPlayerData(playerid, P_BANK),GetPlayerAccountID(playerid));
			mysql_query(mysql, query, false);
			GivePlayerMoneyEx(playerid, 0, "Продажа огорода государству", false, false);
			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой огород!");
			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", GetGardenData(garden, G_PRICE) / 100 * 70);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
			format(g_garden[garden][G_OWNER_NAME], 21, "Государство", 0);
			CallLocalFunction("UpdateGardenLabel", "i", garden);
		}
		else
		{
			BuyPlayerGarden(to_player, garden, true);
		}
	}
	return 1;
}

stock BuyPlayerGarden(playerid, garden, bool: buy_from_owner = false, price = -1)
{
	if(!IsGardenOwned(garden))
	{
		if(price <= 0)
			price = GetGardenData(garden, G_PRICE);
		if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
		{
			new query[256];
			format(query, sizeof query, "UPDATE gardens SET owner_id=%d, owner_name='%s' WHERE id=%d",  GetPlayerAccountID(playerid),GetPlayerNameEx(playerid), GetGardenData(garden, G_SQL_ID));
			mysql_query(mysql, query, false);
			if(!mysql_errno())
			{
				SetGardenData(garden, G_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetGardenData(garden, G_IMPROVEMENTS, 	0);
				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;
				if(!buy_from_owner)
				{
					SetGardenData(garden,	G_RENT_DATE,	1);
					SetGardenData(garden,	G_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetGardenData(garden, G_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetGardenData(garden, G_RENT_DATE, rent_time);
					}
				}
				format(g_garden[garden][G_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateGardenLabel", "i", garden);
				GivePlayerMoneyEx(playerid, -price, "Покупка огорода", false, true);
				format(query, sizeof query, "UPDATE gardens SET improvements=0,rent=1,g_lock=%d WHERE id=%d LIMIT 1", GetGardenData(garden, G_LOCK_STATUS), GetGardenData(garden, G_SQL_ID));
				mysql_query(mysql, query, false);
				return 1;
			}
			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock GetPlayerGardens(playerid)
{
	new count,
		query[70],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM gardens WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

public: Garden_OnPlayerSelectUpgrade(playerid, type)
{
	new garden = GetPVarInt(playerid,"garden_id");
	new query[144];
	if(type == 0)
	{
		if(GetGardenData(garden, G_IMPROVEMENTS) > 0) return GameText(playerid, "~r~Это улучшение~n~уже куплено", 3000, 2);
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 5000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerMoneyEx(playerid, -5000000,"покупка 1 улучшения огорода", true,true);
		gardenobj_1[garden] = CreateDynamicObject(16560, GetGardenData(garden, G_POS_X) + -2.67, GetGardenData(garden, G_POS_Y) + -0.009998, GetGardenData(garden, G_POS_Z) + 0.124374,0.00000, 0.00000, 0.0);
		gardenobj_1_label[garden] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(garden, G_POS_X) + -2.67, GetGardenData(garden, G_POS_Y) + -0.009998, (GetGardenData(garden, G_POS_Z) + 0.124374) + 1.5, 2.0);
		gardenobj_1_woter[garden] = 0;
	}
	if(type == 1)
	{
		if(GetGardenData(garden, G_IMPROVEMENTS) > 1) return GameText(playerid, "~r~Это улучшение~n~уже куплено", 3000, 2);
		if(GetGardenData(garden, G_IMPROVEMENTS) != 1) return GameText(playerid, "~r~Предыдущее улучшение~n~не куплено", 3000, 2);
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 15000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerMoneyEx(playerid, -15000000,"покупка 2 улучшения огорода", true,true);
		gardenobj_2[garden] = CreateDynamicObject(16564, GetGardenData(garden, G_POS_X) + -0.034111, GetGardenData(garden, G_POS_Y) + -0.00752, GetGardenData(garden, G_POS_Z) + 0.017313,0.00000, 0.00000, 0.0);
	}
	if(type == 2)
	{
		if(GetGardenData(garden, G_IMPROVEMENTS) > 2) return GameText(playerid, "~r~Это улучшение~n~уже куплено", 3000, 2);
		if(GetGardenData(garden, G_IMPROVEMENTS) != 2) return GameText(playerid, "~r~Предыдущее улучшение~n~не куплено", 3000, 2);
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 20000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerMoneyEx(playerid, -20000000,"покупка 3 улучшения огорода", true,true);
		DestroyObject(gardendver[garden]);
		DestroyDynamicObject(gardenobj_1[garden]);
		DestroyDynamic3DTextLabel(gardenobj_1_label[garden]);
		DestroyObject(gardenobj[garden]);
		DestroyDynamic3DTextLabel(gardendvlabel[garden]);
		for(new i = 0; i < 10; i ++)
		{
			DestroyDynamic3DTextLabel(gardendyamkalab[garden][i]);
		}
		for(new i = 0; i < 14; i ++)
		{
			gardendyamkalab[garden][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Нажмите {FFA500}ALT {FFFFFF}для посадки", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_2[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[i][2] + 1, 2.0);
		}
		gardenobj_1[garden] = CreateDynamicObject(16560, GetGardenData(garden, G_POS_X) + -3.39779, GetGardenData(garden, G_POS_Y) + 0.025699, GetGardenData(garden, G_POS_Z) + 0.025609,0.00000, 0.00000, 0.0);
		gardenobj_1_label[garden] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(garden, G_POS_X) + -3.39779, GetGardenData(garden, G_POS_Y) + 0.025699, (GetGardenData(garden, G_POS_Z) + 0.025609) + 1.5, 2.0);
		gardenobj_1_woter[garden] = 0;
		gardendvlabel[garden] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z) + 1, 2.0);
		gardendver[garden] = CreateObject(10938, GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),   0.00000, 0.00000, 0.00000);
		gardenobj[garden] = CreateObject(10933, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z),   0.00000, 0.00000, 0.0);
	}
	if(type == 3)
	{
		if(GetGardenData(garden, G_IMPROVEMENTS) > 3) return GameText(playerid, "~r~Это улучшение~n~уже куплено", 3000, 2);
		if(GetGardenData(garden, G_IMPROVEMENTS) != 3) return GameText(playerid, "~r~Предыдущее улучшение~n~не куплено", 3000, 2);
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 30000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerMoneyEx(playerid, -30000000,"покупка 4 улучшения огорода", true,true);
		DestroyDynamicObject(gardenobj_1[garden]);
		DestroyDynamic3DTextLabel(gardenobj_1_label[garden]);
		DestroyDynamicObject(gardenobj_2[garden]);
		DestroyObject(gardendver[garden]);
		DestroyObject(gardenobj[garden]);
		DestroyDynamic3DTextLabel(gardendvlabel[garden]);
		for(new i = 0; i < 14; i ++)
		{
			DestroyDynamic3DTextLabel(gardendyamkalab[garden][i]);
		}
		for(new i = 0; i < 20; i ++)
		{
			gardendyamkalab[garden][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Нажмите {FFA500}ALT {FFFFFF}для посадки", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_3[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[i][2] + 1, 2.0);
		}
		gardenobj_1[garden] = CreateDynamicObject(16560, GetGardenData(garden, G_POS_X) + -5.07046, GetGardenData(garden, G_POS_Y) + 0.075143, GetGardenData(garden, G_POS_Z) + 0.036848,0.00000, 0.00000, 0.0);
		gardenobj_1_label[garden] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(garden, G_POS_X) + -5.07046, GetGardenData(garden, G_POS_Y) + 0.075143, (GetGardenData(garden, G_POS_Z) + 0.036848) + 1.5, 2.0);
		gardenobj_1_woter[garden] = 0;
		gardenobj_2[garden] = CreateDynamicObject(16564, GetGardenData(garden, G_POS_X) + -0.434392, GetGardenData(garden, G_POS_Y) + -0.054589, GetGardenData(garden, G_POS_Z) + 0.461218,0.00000, 0.00000, 0.0);
		gardendvlabel[garden] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z) + 1, 2.0);
		gardendver[garden] = CreateObject(16060, GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),   0.00000, 0.00000, 0.00000);
		gardenobj[garden] = CreateObject(16042, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z),   0.00000, 0.00000, 0.0);
	}
	SetGardenData(garden, G_IMPROVEMENTS, type + 1);
	format(query, sizeof query, "UPDATE gardens SET improvements=%d WHERE id=%d", GetGardenData(garden, G_IMPROVEMENTS), GetGardenData(garden, G_SQL_ID));
	mysql_query(mysql, query, false);
	format(query, sizeof query, "interface('Gardens').setBoughtUpgrades(%d)", GetGardenData(garden, G_IMPROVEMENTS));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
	return true;
}

public: OnPlayerGardensMenu(playerid, type)
{
	new garden = GetPVarInt(playerid,"garden_id");
	if(type == 0) //Закрыть огород
	{
	    if(GetGardenData(garden, G_LOCK_STATUS) == 1) SetGardenData(garden, G_LOCK_STATUS,0);
	    else
	    {
	        SetGardenData(garden, G_LOCK_STATUS,1);
         	if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z),50,   0.00000, 0.00000, 0.0);
	   		if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),50,   0.00000, 0.00000, 0.0);
			if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),50,   0.00000, 0.00000, 0.0);
	    }
		new query[144];
        format(query, sizeof query, "UPDATE gardens SET g_lock=%d WHERE id=%d",GetGardenData(garden, G_LOCK_STATUS), GetGardenData(garden, G_SQL_ID));
		mysql_query(mysql, query, false);
		format(query, sizeof query, "interface('Gardens').setDoorStatus(%d)",GetGardenData(garden, G_LOCK_STATUS));
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
	}
	if(type == 1) // продажа
	{
		SetCameraBehindPlayer(playerid);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Gardens");
	    SellGarden(playerid, garden);
	}
	if(type == 2) SetCameraBehindPlayer(playerid), BitStream_1(playerid, s_CefInterface, t_CefHide, "Gardens"); // закрыть
	if(type == 3) GameText(playerid, "В разработке", 3000, 2); // Управление арендой
}

public: gardengryadka(garden,yamka)
{
    new fmt_rank[144];
    if(G_STATUS_WOTER[garden][yamka] == 0)
    {
        new rand = 0;
	    format(fmt_rank, sizeof fmt_rank,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.%d %\n{FFFFFF}Требует полива",garden_name[G_TYPE_YAM[garden][yamka]-1],G_STATUSS[garden][yamka],rand);
		UpdateDynamic3DTextLabelText(gardendyamkalab[garden][yamka], 0xFFFF00FF, fmt_rank);
        return 1;
    }
    G_STATUSS[garden][yamka] ++;
    if(G_STATUSS[garden][yamka] == 100)
	{
	    if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka],   GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] + 0.3,0.12,   0.00000, 0.00000, 0.0000);
	    if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka],   GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] + 0.3,0.12,   0.00000, 0.00000, 0.0000);
	    if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka],   GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] + 0.3,0.12,   0.00000, 0.00000, 0.0000);
	    G_WT_ST[garden][yamka] = 0;
	    G_STATUSS[garden][yamka] = 0;
	    KillTimer(rost[garden][yamka]);
	    G_STATUS_WOTER[garden][yamka] = 0;
	    G_STATUS_YAM[garden][yamka] = 2;
		format(fmt_rank, sizeof fmt_rank,"{FF8800}%s\n{FFFFFF}Нажмите {FF8800}ALT {FFFFFF}для сбора",garden_name[G_TYPE_YAM[garden][yamka]-1]);
		UpdateDynamic3DTextLabelText(gardendyamkalab[garden][yamka], 0xFFFF00FF, fmt_rank);
		return 1;
	}
	if(G_STATUSS[garden][yamka] == 10) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.9,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.9,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.9,0.12,   0.00000, 0.00000, 0.0000);
	if(G_STATUSS[garden][yamka] == 20) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.8,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.8,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.8,0.12,   0.00000, 0.00000, 0.0000);
	if(G_STATUSS[garden][yamka] == 30) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.7,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.7,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.7,0.12,   0.00000, 0.00000, 0.0000);
	if(G_STATUSS[garden][yamka] == 40) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.6,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.6,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.6,0.12,   0.00000, 0.00000, 0.0000);
	if(G_STATUSS[garden][yamka] == 50) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.5,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.5,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.5,0.12,   0.00000, 0.00000, 0.0000);
	if(G_STATUSS[garden][yamka] == 60) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.4,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.4,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.4,0.12,   0.00000, 0.00000, 0.0000);
	if(G_STATUSS[garden][yamka] == 70) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.3,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.3,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.3,0.12,   0.00000, 0.00000, 0.0000);
	if(G_STATUSS[garden][yamka] == 80) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.2,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.2,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.2,0.12,   0.00000, 0.00000, 0.0000);
	if(G_STATUSS[garden][yamka] == 90) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.1,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.1,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.1,0.12,   0.00000, 0.00000, 0.0000);
    if(G_STATUSS[garden][yamka] == 25) G_STATUS_WOTER[garden][yamka] --;
    if(G_STATUSS[garden][yamka] == 50) G_STATUS_WOTER[garden][yamka] --;
    if(G_STATUSS[garden][yamka] == 75) G_STATUS_WOTER[garden][yamka] --;
    new rand = RandomEx(1,9);
    if(G_STATUS_WOTER[garden][yamka] == 1) format(fmt_rank, sizeof fmt_rank,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.%d %\n{FFFFFF}Почва: {FF8800}влажная",garden_name[G_TYPE_YAM[garden][yamka]-1],G_STATUSS[garden][yamka],rand);
	if(G_STATUS_WOTER[garden][yamka] == 2) format(fmt_rank, sizeof fmt_rank,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.%d %\n{FFFFFF}Почва: {FF8800}очень мокрая",garden_name[G_TYPE_YAM[garden][yamka]-1],G_STATUSS[garden][yamka],rand);
	UpdateDynamic3DTextLabelText(gardendyamkalab[garden][yamka], 0xFFFF00FF, fmt_rank);
	return 1;
}

public: OnHarvestingPlayerComplete(playerid)
{
	if(GetPVarInt(playerid, "g_garden_loaded") != 0 && GetPVarInt(playerid, "idgarden") != 0)
	{
		new idx = GetPVarInt(playerid, "g_garden_loaded") - 1;
		new i = GetPVarInt(playerid, "idgarden") - 1;
		new randomyam = RandomEx(3, 10);
		if(G_TYPE_YAM[idx][i] == 1) GiveIteam(playerid, 171, 1, randomyam, 0);
		if(G_TYPE_YAM[idx][i] == 2) GiveIteam(playerid, 170, 1, randomyam, 0);
		if(G_TYPE_YAM[idx][i] == 3) GiveIteam(playerid, 169, 1, randomyam, 0);
		if(G_TYPE_YAM[idx][i] == 4) GiveIteam(playerid, 337, 1, randomyam, 0);
		if(G_TYPE_YAM[idx][i] == 5) GiveIteam(playerid, 337, 1, randomyam, 1);
		if(G_TYPE_YAM[idx][i] == 6) GiveIteam(playerid, 337, 1, randomyam, 2);
		if(G_TYPE_YAM[idx][i] == 7) GiveIteam(playerid, 337, 1, randomyam, 3);
		if(G_TYPE_YAM[idx][i] == 8) GiveIteam(playerid, 337, 1, randomyam, 4);
		if(G_TYPE_YAM[idx][i] == 9) GiveIteam(playerid, 337, 1, randomyam, 5);
		SCMF(playerid, 0xFFFFFFFF, "Вы собрали {33AA33}\"%s\" {FFFFFF}в количестве {33AA33}%d{FFFFFF} шт с грядки", garden_name[G_TYPE_YAM[idx][i]-1], randomyam);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Harvesting");
		G_STATUS_YAM[idx][i] = 0;
		G_TYPE_YAM[idx][i] = 0;
		DestroyObject(gardendyamka[idx][i]);
		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
		ClearAnimations(playerid);
		UpdateDynamic3DTextLabelText(gardendyamkalab[idx][i], 0xFFFF00FF, "{FFA500}Свободная ямка\n{FFFFFF}Нажмите {FFA500}ALT {FFFFFF}для посадки");
	}
	return true;
}

public: OnHarvestingPlayerClose(playerid)
{
	ClearAnimations(playerid);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Harvesting");
	SetPVarInt(playerid, "g_garden_loaded", 0);
	SetPVarInt(playerid, "idgarden", 0);
}

stock GetPlayerOwnableGarden(playerid)
{
	new count,
		query[70],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM gardens WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

#define MAX_DICE_TABLE 7 //максимальное количество столов
new DiceTable[MAX_PLAYERS]; // id стола
new OwnerJoinDiceGame[MAX_PLAYERS]; // ид игроков присоединишихся к игре
new DiceTrowPlayer[MAX_PLAYERS][2]; // кости падающие 
new DiceTrowPlayerStatus[MAX_PLAYERS];
new Text3D: DiceTableLabel[MAX_DICE_TABLE]; // текст над столом
new dice_string[1024];
new Float: g_casino_table_pos[7][3] = // позиции столиков в казино
{
	{0.0,0.0,-1011.7900},
	{203.9708,-288.1277,1011.7900},
	{204.5368,-282.9423,1011.7900},
	{201.0867,-277.4176,1011.7900},
	{198.2179,-280.3122,1011.7900},
	{198.1618,-285.4484,1011.7900},
	{198.0668,-290.6460,1011.7900}
};

enum S_DICE_STRUCT
{
    DICE_GAME_BET, 			// Сумма ставки на столе
    DICE_GAME_MAX_PLAYERS, 	// Количество игроков на одном столе
    DICE_GAME_STATUS, 		// статус стола
    OWNER_CREATE_DICE_GAME, // ид игрока создавшего игру
    COUNT_PLAYER_DICE, 		// количество игроков за столом
    DICE_TROW_TIMER, 		// таймер ставки
    DICE_FINAL_TROW 		// сколько человек кинули кости
}

new s_dice[MAX_DICE_TABLE][S_DICE_STRUCT];
stock CreateCasinoTables()
{
	for(new idx = 1; idx < sizeof g_casino_table_pos; idx ++)
	{
		DiceTableLabel[idx] = CreateDynamic3DTextLabel("", -1, g_casino_table_pos[idx][0], g_casino_table_pos[idx][1], g_casino_table_pos[idx][2] + 0.1, 7.0);
		CallLocalFunction("UpdateCasinoTables", "i", idx);
	}
}

public: UpdateCasinoTables(event)
{
	dice_string[0] = EOS;
	if(s_dice[event][DICE_GAME_STATUS] == 0) format(dice_string, sizeof dice_string, "{d9c72b}Игра в кости\n{FFFFFF}Свободно");
	if(s_dice[event][DICE_GAME_STATUS] == 1) format(dice_string, sizeof dice_string, "{d9c72b}Ждем игроков {FFFFFF}[%d/%d]", s_dice[event][COUNT_PLAYER_DICE], s_dice[event][DICE_GAME_MAX_PLAYERS]);
	if(s_dice[event][DICE_GAME_STATUS] == 2) format(dice_string, sizeof dice_string, "{d9c72b}Играем");
	UpdateDynamic3DTextLabelText(DiceTableLabel[event], 0xFFFF00FF, dice_string);
}

public:CasinoDice_ClosePanel(playerid) // закрыл после окончания игры
{
	if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 0)
	{
		DiceTable[playerid] = 0;
		BitStream_1(playerid, s_CefInterface, t_CefHide, "CasinoDice");
	}
	else Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Информация", "{FFFFFF}Дождитесь завершения игры!", "Закрыть", "");
}

public: CasinoDice_UpdQueriesListPanel(playerid) // автоматическая загрузка ставок
{
	if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 0) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoDice').updateListGame('[]')");
	else if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 1)
	{
		new query[170];
		dice_string[0] = EOS;
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(OwnerJoinDiceGame[i] != 0 && DiceTable[i] == DiceTable[playerid])
			{
				format(query, sizeof query, ",\"%s\"", GetPlayerNameEx(i));
				strcat(dice_string, query);
			}
		}
		format(dice_string, sizeof dice_string, "interface('CasinoDice').updateListGame('[[0,%d,0,%d,0,[\"%s\"%s]]]')", s_dice[DiceTable[playerid]][DICE_GAME_BET], s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS], GetPlayerNameEx(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]), dice_string);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, dice_string);
	}
}

public: CasinoDice_OpenCreateGame(playerid) // начал создавать ставку
{
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoDice').toggleModal('createGame', true)");
	return 1;
}

public:OnCasinoDiceCreateBet(playerid, select_id, money, players) // создал ставку
{
	if(money < 1000 || money > 1000000) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену ставки. Минимальная ставка 1.000.000 фишек");
	if(GetIteam(playerid, 293) < money) return SCM(playerid, COLOR_GREY, "*У вас недостаточно фишек");
	if(select_id == 0)
	{
		if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 1) return SCM(playerid, -1, "В данный момент данный стол занят"); // прописать сообщение о том что уже создана ставка
		s_dice[DiceTable[playerid]][DICE_GAME_BET] = money;
		s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS] = players;
		s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME] = playerid;
		s_dice[DiceTable[playerid]][DICE_GAME_STATUS] = 1;
		s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] = 1;
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoDice').closeModalCreateQueries()");
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(DiceTable[i] == DiceTable[playerid])
			{
				dice_string[0] = EOS;
				format(dice_string, sizeof dice_string, "interface('CasinoDice').updateListGame('[[0,%d,0,%d,0,[\"%s\"]]]')", money, players, GetPlayerNameEx(playerid));
				BitStream_1(i, s_CefInterface, t_CefUpdate, dice_string);
			}
		}
		CallLocalFunction("UpdateCasinoTables", "i", DiceTable[playerid]);
	}
	else SCM(playerid, -1, "В разработке!");
	return 1;
}

public: OnCasinoDiceThrow(playerid) //кинул кости
{
	if(DiceTrowPlayer[playerid][0] != 0) return 1;
	if(s_dice[DiceTable[playerid]][DICE_TROW_TIMER] > 11) return 1;
	if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 0) return 1;
	DiceTrowPlayerStatus[playerid] = 1;
	DiceTrowPlayer[playerid][0] = RandomEx(1,6);
	DiceTrowPlayer[playerid][1] = RandomEx(1,6);
	s_dice[DiceTable[playerid]][DICE_FINAL_TROW]++;
	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
		if(DiceTable[i] == DiceTable[playerid]) LoadThrow(i);
	}
	if(s_dice[DiceTable[playerid]][DICE_FINAL_TROW] == s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS]) s_dice[DiceTable[playerid]][DICE_TROW_TIMER] = 0, PlayerWinnerDiceTrow(DiceTable[playerid]);
	return 1;
}

stock LoadThrow(playerid)
{
	new query[148];
	dice_string[0] = EOS;
	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
		if(DiceTable[i] == DiceTable[playerid] && OwnerJoinDiceGame[i] != 0)
		{
			if(s_dice[DiceTable[i]][OWNER_CREATE_DICE_GAME] != i) format(query, sizeof query, ",[\"%s\",%d,%d]", GetPlayerNameEx(i), DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1], s_dice[DiceTable[i]][DICE_GAME_BET]);
			strcat(dice_string, query);
		}
	}
	format(dice_string, sizeof dice_string, "interface('CasinoDice').updateGame('[0,%d,40,%d,%d,%d,[[\"%s\",%d,%d]%s]]')", s_dice[DiceTable[playerid]][DICE_GAME_BET] * s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS], DiceTrowPlayer[playerid][0], DiceTrowPlayer[playerid][1],s_dice[DiceTable[playerid]][DICE_TROW_TIMER], GetPlayerNameEx(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]), DiceTrowPlayer[s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]][0] + DiceTrowPlayer[s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]][1], s_dice[DiceTable[playerid]][DICE_GAME_BET], dice_string);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, dice_string);
	dice_string[0] = EOS;
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoDice').toggleWindow('queries', false)");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoDice').toggleWindow('game', true)");
	return 1;
}

public:OnJoinGameDiceCasino(playerid, rooms) // присоединился к игре
{
	dice_string[0] = EOS;
	if(OwnerJoinDiceGame[playerid] != 0) return 1;
	if(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME] == playerid) return 1;
	if(GetIteam(playerid, 293) < s_dice[DiceTable[playerid]][DICE_GAME_BET]) return SCM(playerid, COLOR_GREY, "*У вас недостаточно фишек");
	if(s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] == 0) s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] = 2;
	else s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] = s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] + 1;
	OwnerJoinDiceGame[playerid] = 1;
	if(s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] < s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS])
	{
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(DiceTable[i] == DiceTable[playerid]) UpdateListGame(i);
		}
	}
	else if(s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] == s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS])
	{
		s_dice[DiceTable[playerid]][DICE_TROW_TIMER] = 12;
		s_dice[DiceTable[playerid]][DICE_GAME_STATUS] = 2;
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 2 && OwnerJoinDiceGame[i] == 1 || s_dice[DiceTable[i]][OWNER_CREATE_DICE_GAME] == i)
			{
				if(DiceTable[i] == DiceTable[playerid] && s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 2)
				{
					LoadThrow(i);
					GiveIteam(i, 293, 0, s_dice[DiceTable[i]][DICE_GAME_BET], 0, "Ставка в dice [Казино]");
					format(dice_string, sizeof dice_string, "~r~-%s фишек", formatInt(s_dice[DiceTable[i]][DICE_GAME_BET]));
					GameText(i, dice_string, 3000, 2);
				}
			}
			if(DiceTable[i] != 0 && s_dice[DiceTable[i]][DICE_GAME_STATUS] == 2 && OwnerJoinDiceGame[i] != 1 && s_dice[DiceTable[i]][OWNER_CREATE_DICE_GAME] != i)
			{
				BitStream_1(i, s_CefInterface, t_CefHide, "CasinoDice");
				Dialog(i, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Информация", "{FFFFFF}В этой игре уже максимально количество участников", "Закрыть", "");
				DiceTable[i] = 0;
			}
		}
	}
	CallLocalFunction("UpdateCasinoTables", "i", DiceTable[playerid]);
	return 1;
}

stock UpdateListGame(playerid)
{
	new query[170];
	dice_string[0] = EOS;
	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
		if(OwnerJoinDiceGame[i] != 0 && DiceTable[i] == DiceTable[playerid])
		{
			if(s_dice[DiceTable[i]][OWNER_CREATE_DICE_GAME] != i) format(query, sizeof query, ",\"%s\"", GetPlayerNameEx(i));
			strcat(dice_string, query);
		}
	}
	format(dice_string, sizeof dice_string, "interface('CasinoDice').updateListGame('[[0,%d,0,%d,0,[\"%s\"%s]]]')", s_dice[DiceTable[playerid]][DICE_GAME_BET], s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS], GetPlayerNameEx(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]), dice_string);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, dice_string);
	dice_string[0] = EOS;
}

public: CasinoDice_LeaveTable(playerid) // вышел из стола
{	
	dice_string[0] = EOS;
	if(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME] == playerid)
	{
		s_dice[DiceTable[playerid]][DICE_GAME_STATUS] = 0;
		s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME] = 0;
		OwnerJoinDiceGame[playerid] = 0;
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(DiceTable[i] == DiceTable[playerid]) BitStream_1(i, s_CefInterface, t_CefUpdate, "interface('CasinoDice').updateListGame('[]')");
		}
	}
	else if(OwnerJoinDiceGame[playerid] == 1)
	{
		OwnerJoinDiceGame[playerid] = 0;
		s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] = s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] - 1;
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(OwnerJoinDiceGame[i] != 0 && DiceTable[i] == DiceTable[playerid]) UpdateListGame(i);
		}
	}
	CallLocalFunction("UpdateCasinoTables", "i", DiceTable[playerid]);
	DiceTable[playerid] = 0;
	BitStream_1(playerid, s_CefInterface, t_CefHide, "CasinoDice");
	return true;
}

stock UpdateDiceTrow()
{
	for(new i; i < MAX_DICE_TABLE; i++)
	{
		if(s_dice[i][DICE_GAME_STATUS] == 2 && s_dice[i][DICE_TROW_TIMER] != 0) s_dice[i][DICE_TROW_TIMER] = s_dice[i][DICE_TROW_TIMER] - 1;
		if(s_dice[i][DICE_GAME_STATUS] == 2 && s_dice[i][DICE_TROW_TIMER] < 2) PlayerWinnerDiceTrow(i);
	}
}

stock PlayerWinnerDiceTrow(table_id)
{
	if(s_dice[table_id][DICE_GAME_STATUS] == 2)
	{
		if(s_dice[table_id][DICE_TROW_TIMER] == 1)
		{
			foreach(new i: Player)
			{
				if(!IsPlayerLogged(i)) continue;
				if(DiceTable[i] == table_id)
				{
					if(DiceTrowPlayer[i][0] == 0)
					{
						DiceTrowPlayer[i][0] = RandomEx(1,6);
						DiceTrowPlayer[i][1] = RandomEx(1,6);
						DiceTrowPlayerStatus[i] = 1;
					}
				}
			}
			return true;
		}
		if(s_dice[table_id][DICE_TROW_TIMER] == 0)
		{
			new get_trow = GetDiceTrowTable(table_id);
			if(get_trow > 1)
			{
				foreach(new i: Player)
				{
					if(!IsPlayerLogged(i)) continue;
					if(DiceTable[i] != table_id) continue;
					DiceTrowPlayerStatus[i] = 0;
					if(DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1] == get_trow)
					{
						DiceTrowPlayer[i][0] = 0;
						DiceTrowPlayer[i][1] = 0;
					}
				}
				s_dice[table_id][DICE_TROW_TIMER] = 12;
				return true;
			}
			foreach(new i: Player)
			{
				if(!IsPlayerLogged(i)) continue;
				if(DiceTable[i] == table_id)
				{
					if(DiceTrowPlayerStatus[i] == 1)
					{
						if(i == GetDiceTrowWinner(table_id))
						{
							SCM(i, -1, "{ffd700}Уведомление: {FFFFFF}Поздравляем, Вы {00b300}выиграли");
							GiveIteam(i, 293, 1, s_dice[DiceTable[i]][DICE_GAME_BET] * s_dice[DiceTable[i]][DICE_GAME_MAX_PLAYERS], 0, "Выйгрыш в dice [Казино]");
							format(dice_string, sizeof dice_string, "~g~+%s фишек", formatInt(s_dice[DiceTable[i]][DICE_GAME_BET] * s_dice[DiceTable[i]][DICE_GAME_MAX_PLAYERS]));
							GameText(i, dice_string, 3000, 2);
						}
						else SCMF(i, -1, "{ffd700}Уведомление: {FFFFFF}К сожалению, Вы {ffa500}проиграли. {FFFFFF}Вам выпало {ffa500}%d", DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1]);
					}
					else SCMF(i, -1, "{ffd700}Уведомление: {FFFFFF}К сожалению, Вы {ffa500}проиграли. {FFFFFF}Вам выпало {ffa500}%d", DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1]);
				}
			}
			foreach(new i: Player)
			{
				if(!IsPlayerLogged(i)) continue;
				if(DiceTable[i] == table_id)
				{
					OwnerJoinDiceGame[i] = 0;
					DiceTrowPlayer[i][0] = 0;
					DiceTrowPlayer[i][1] = 0;
					DiceTable[i] = 0;
				}
			}
			s_dice[table_id][DICE_GAME_STATUS] = 0;
			s_dice[table_id][OWNER_CREATE_DICE_GAME] = 0;
			s_dice[table_id][DICE_GAME_BET] = 0;
			s_dice[table_id][DICE_GAME_MAX_PLAYERS] = 0;
			s_dice[table_id][DICE_TROW_TIMER] = 0;
			s_dice[table_id][COUNT_PLAYER_DICE] = 0;
			s_dice[table_id][DICE_FINAL_TROW] = 0;
			CallLocalFunction("UpdateCasinoTables", "i", table_id);
		}
	}
	return 1;
}

stock GetDiceTrowTable(table_id)
{
	new status;
	new max_dice_trow;
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		if(DiceTable[i] != table_id) continue;
		if(DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1] > max_dice_trow) max_dice_trow = DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1];
	}
	s_dice[table_id][DICE_FINAL_TROW] = 0;
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		if(DiceTable[i] != table_id) continue;
		if(DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1] == max_dice_trow) status++;
		else s_dice[table_id][DICE_FINAL_TROW]++;
	}
	if(status > 1) return max_dice_trow;
	else return 1;
}

stock GetDiceTrowWinner(table_id)
{
	new winner = -1;
	new max_dice_trow;
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		if(DiceTable[i] != table_id) continue;
		if(DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1] > max_dice_trow) max_dice_trow = DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1], winner = i;
	}
	return winner;
}

new g_player_status_fish[MAX_PLAYERS];
new g_player_fishing_zone[MAX_PLAYERS];
new g_player_type_fish_rod[MAX_PLAYERS];
new g_player_type_fish[MAX_PLAYERS];
new g_player_fish_timer[MAX_PLAYERS];
#define MAX_FISHING_ZONE 8
enum E_FISHING_ZONES_STRUCT
{
	Float:FZ_POS_X,
	Float:FZ_POS_Y,
	Float:FZ_POS_Z,
	Float:FZ_POS_SIZE
};

new g_fishing_zones[MAX_FISHING_ZONE][E_FISHING_ZONES_STRUCT] =
{
    {-275.550689, 2297.300537, 2.0, 200.0},
	{1315.585571, 2043.356323, 2.0, 200.0},
	{-2886.154541, -674.604858, 2.0, 200.0},
	{4204.732421, 3963.182128, 2.0, 200.0},
	{3070.477539, 1352.182861, 2.0, 200.0},
	{2549.223876, 2110.489501, 2.0, 200.0},
	{2078.196044, 1076.217773, 2.0, 200.0},
	{393.921234, -260.088745, 2.0, 200.0}
};

new indxFishType[9][14] = {"Красноперка", "Щука", "Сом", "Карась", "Тунец", "Лосось", "Карп", "Мальма", "Осетр"};
new g_fishing_sphere[MAX_FISHING_ZONE];
stock CreateFishingZones()
{
	for(new i; i < MAX_FISHING_ZONE; i++)
	{
		g_fishing_sphere[i] = CreateDynamicSphere(g_fishing_zones[i][FZ_POS_X], g_fishing_zones[i][FZ_POS_Y], g_fishing_zones[i][FZ_POS_Z], g_fishing_zones[i][FZ_POS_SIZE], -1, -1);
	}
	CreateDynamic3DTextLabel
	(
		"{eb8a08}Продажа выловленной рыбы\n\n\
		{FFFFFF}Цены\n\
		Красноперка - 180000 руб. за 1.5кг\n\
		Щука - 190000 руб. за 1.5кг\n\
		Сом - 130000 руб. за 1.5кг\n\
		Карась - 140000 руб. за 1.5кг\n\
		Тунец - 150000 руб. за 1.5кг\n\
		Лосось - 120000 руб. за 1.5кг\n\
		Карп - 170000 руб. за 1.5кг\n\
		Мальма - 120000 руб. за 1.5кг\n\
		Осетр - 130000 руб. за 1.5кг\n\
		Угорь - 560000 руб. за 1.5кг",
		-1, 
		-2242.0110,224.8079,24.7780, 
		15.0
	);
	CreatePickup(19134, 23, -2242.0110,224.8079,24.7780, -1);
}

stock OnFishPlayerTimer(playerid)
{
	if(g_player_status_fish[playerid] == 4)
	{
		if(g_player_fish_timer[playerid] != -2)
		{
			g_player_fish_timer[playerid]--;
			if(g_player_fish_timer[playerid] == 0)
			{
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Fishing').updateFishingInfo('[1, 1, 0.0, false, 45]')");
			}
			else if(g_player_fish_timer[playerid] == -2)
			{
				SCM(playerid, 0xf1951aFF, "Подсечка не удалась, рыба съела наживку и уплыла.");
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Fishing");
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Начать рыбалку\"]]");
				g_player_status_fish[playerid] = 2;
				TogglePlayerControllable(playerid,true);
				SetCameraBehindPlayer(playerid);
			}
		}
	}
}

new inventory_sklad_id[MAX_PLAYERS];
new inventory_shelf_id[MAX_PLAYERS];
new inventory_trunk_id[MAX_PLAYERS];
new inventory_bag_id[MAX_PLAYERS];
new inventory_load_status[MAX_PLAYERS];
new inventory_load_vehicle[MAX_VEHICLES];
new inventory_kd_move[MAX_PLAYERS];
new bool: inventory_status[MAX_PLAYERS] = true;
stock OnItemsInterfaceClose(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "InventoryNew");
	inventory_status[playerid] = true;
	inventory_sklad_id[playerid] = 0;
	inventory_shelf_id[playerid] = 0;
	inventory_trunk_id[playerid] = 0;
	inventory_bag_id[playerid] = 0;
	return true;
}

stock DestroyPlayerItems(playerid)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		DeleteItems(i);
	}
}

stock DestroyVehicleItems(vehicleid)
{
	new car_id = GetOwnableCarData(GetVehicleData(vehicleid, V_ACTION_ID), OC_SQL_ID);
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_CAR_ID) != car_id) continue;
		if(GetPlayerItem(i, PI_OWNER_ID) != -1) continue;
		DeleteItems(i);
	}
	inventory_load_vehicle[vehicleid] = 0;
}

public: LoadVehicleItems(vehicleid)
{
	if(inventory_load_vehicle[vehicleid] == 0)
	{
		new	Cache: result;
		new query[96];
		new car_id = GetOwnableCarData(GetVehicleData(vehicleid, V_ACTION_ID), OC_SQL_ID);
		format(query, sizeof query, "SELECT * FROM items WHERE car_id=%d AND owner_id=-1", car_id);
		result = mysql_query(mysql, query, true);
		new rows = cache_num_rows();
		if(rows > MAX_PLAYER_ITEMS)
		{
			rows = MAX_PLAYER_ITEMS;
			print("[PlayerItems] Привышен лимит предметов (MAX_PLAYER_ITEMS)");
		}
		if(rows)
		{
			for(new idx; idx < rows; idx++)
			{	
				new i = GetFreeItemsID();
				SetPlayerItem(i, PI_SQL_ID, 		cache_get_field_content_int(idx, "id"));
				SetPlayerItem(i, PI_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));
				SetPlayerItem(i, PI_RETURN_ITEMS, 	cache_get_field_content_int(idx, "return_items"));
				SetPlayerItem(i, PI_TYPE, 			cache_get_field_content_int(idx, "type"));
				SetPlayerItem(i, PI_SLOTS, 			cache_get_field_content_int(idx, "slots"));
				SetPlayerItem(i, PI_ITEM, 			cache_get_field_content_int(idx, "item"));
				SetPlayerItem(i, PI_COUNT, 			cache_get_field_content_int(idx, "count"));
				cache_get_field_content(idx, "number", g_player_item[i][PI_NUMBER], mysql, 32);
				cache_get_field_content(idx, "region", g_player_item[i][PI_REGION], mysql, 32);
				SetPlayerItem(i, PI_TYPENUMBER, 	cache_get_field_content_int(idx, "typenumber"));
				SetPlayerItem(i, PI_AKS_ID, 		cache_get_field_content_int(idx, "aks_id"));
				SetPlayerItem(i, PI_TYPEACS, 		cache_get_field_content_int(idx, "typeacs"));
				SetPlayerItem(i, PI_STATUS, 		cache_get_field_content_int(idx, "status"));
				SetPlayerItem(i, PI_INDX, 			cache_get_field_content_int(idx, "indx"));
				SetPlayerItem(i, PI_FOFFSET_X, 		cache_get_field_content_float(idx, "foffset_x"));
				SetPlayerItem(i, PI_FOFFSET_Y, 		cache_get_field_content_float(idx, "foffset_y"));
				SetPlayerItem(i, PI_FOFFSET_Z, 		cache_get_field_content_float(idx, "foffset_z"));
				SetPlayerItem(i, PI_FROT_X, 		cache_get_field_content_float(idx, "frot_x"));
				SetPlayerItem(i, PI_FROT_Y, 		cache_get_field_content_float(idx, "frot_y"));
				SetPlayerItem(i, PI_FROT_Z, 		cache_get_field_content_float(idx, "frot_z"));
				SetPlayerItem(i, PI_FSCALE_X, 		cache_get_field_content_float(idx, "fscale_x"));
				SetPlayerItem(i, PI_FSCALE_Y, 		cache_get_field_content_float(idx, "fscale_y"));
				SetPlayerItem(i, PI_FSCALE_Z, 		cache_get_field_content_float(idx, "fscale_z"));
				SetPlayerItem(i, PI_SKIN_ID, 		cache_get_field_content_int(idx, "skin_id"));
				SetPlayerItem(i, PI_SKIN_IZNOS, 	cache_get_field_content_int(idx, "skin_iznos"));
				SetPlayerItem(i, PI_SHELF, 			cache_get_field_content_int(idx, "shelf"));
				SetPlayerItem(i, PI_SKLAD, 			cache_get_field_content_int(idx, "sklad"));
				SetPlayerItem(i, PI_CAR_ID, 		cache_get_field_content_int(idx, "car_id"));
				SetPlayerItem(i, PI_TYPE_ITEM, 		cache_get_field_content_int(idx, "type_item"));
				SetPlayerItem(i, PI_WEAPON, 		cache_get_field_content_int(idx, "weapon"));
				SetPlayerItem(i, PI_PATRON, 		cache_get_field_content_int(idx, "patron"));
			}
		}
		cache_delete(result);
		inventory_load_vehicle[vehicleid] = 1;
	}
	return 1;
}

public: LoadPlayerItems(playerid)
{
	if(inventory_load_status[playerid] == 0)
	{
		new	Cache: result;
		new query[96];
		format(query, sizeof query, "SELECT * FROM items WHERE owner_id=%d", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);
		new rows = cache_num_rows();
		if(rows > MAX_PLAYER_ITEMS)
		{
			rows = MAX_PLAYER_ITEMS;
			print("[PlayerItems] Привышен лимит предметов (MAX_PLAYER_ITEMS)");
		}
		if(rows)
		{
			for(new idx; idx < rows; idx++)
			{	
				new i = GetFreeItemsID();
				SetPlayerItem(i, PI_SQL_ID, 		cache_get_field_content_int(idx, "id"));
				SetPlayerItem(i, PI_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));
				SetPlayerItem(i, PI_RETURN_ITEMS, 	cache_get_field_content_int(idx, "return_items"));
				SetPlayerItem(i, PI_TYPE, 			cache_get_field_content_int(idx, "type"));
				SetPlayerItem(i, PI_SLOTS, 			cache_get_field_content_int(idx, "slots"));
				SetPlayerItem(i, PI_ITEM, 			cache_get_field_content_int(idx, "item"));
				SetPlayerItem(i, PI_COUNT, 			cache_get_field_content_int(idx, "count"));
				cache_get_field_content(idx, "number", g_player_item[i][PI_NUMBER], mysql, 32);
				cache_get_field_content(idx, "region", g_player_item[i][PI_REGION], mysql, 32);
				SetPlayerItem(i, PI_TYPENUMBER, 	cache_get_field_content_int(idx, "typenumber"));
				SetPlayerItem(i, PI_AKS_ID, 		cache_get_field_content_int(idx, "aks_id"));
				SetPlayerItem(i, PI_TYPEACS, 		cache_get_field_content_int(idx, "typeacs"));
				SetPlayerItem(i, PI_STATUS, 		cache_get_field_content_int(idx, "status"));
				SetPlayerItem(i, PI_INDX, 			cache_get_field_content_int(idx, "indx"));
				SetPlayerItem(i, PI_FOFFSET_X, 		cache_get_field_content_float(idx, "foffset_x"));
				SetPlayerItem(i, PI_FOFFSET_Y, 		cache_get_field_content_float(idx, "foffset_y"));
				SetPlayerItem(i, PI_FOFFSET_Z, 		cache_get_field_content_float(idx, "foffset_z"));
				SetPlayerItem(i, PI_FROT_X, 		cache_get_field_content_float(idx, "frot_x"));
				SetPlayerItem(i, PI_FROT_Y, 		cache_get_field_content_float(idx, "frot_y"));
				SetPlayerItem(i, PI_FROT_Z, 		cache_get_field_content_float(idx, "frot_z"));
				SetPlayerItem(i, PI_FSCALE_X, 		cache_get_field_content_float(idx, "fscale_x"));
				SetPlayerItem(i, PI_FSCALE_Y, 		cache_get_field_content_float(idx, "fscale_y"));
				SetPlayerItem(i, PI_FSCALE_Z, 		cache_get_field_content_float(idx, "fscale_z"));
				SetPlayerItem(i, PI_SKIN_ID, 		cache_get_field_content_int(idx, "skin_id"));
				SetPlayerItem(i, PI_SKIN_IZNOS, 	cache_get_field_content_int(idx, "skin_iznos"));
				SetPlayerItem(i, PI_SHELF, 			cache_get_field_content_int(idx, "shelf"));
				SetPlayerItem(i, PI_SKLAD, 			cache_get_field_content_int(idx, "sklad"));
				SetPlayerItem(i, PI_CAR_ID, 		cache_get_field_content_int(idx, "car_id"));
				SetPlayerItem(i, PI_TYPE_ITEM, 		cache_get_field_content_int(idx, "type_item"));
				SetPlayerItem(i, PI_WEAPON, 		cache_get_field_content_int(idx, "weapon"));
				SetPlayerItem(i, PI_PATRON, 		cache_get_field_content_int(idx, "patron"));
			}
		}
		cache_delete(result);
		inventory_load_status[playerid] = 1;
	}
	return 1;
}

public: LoadItems()
{
	new	Cache: result;
	result = mysql_query(mysql, "SELECT * FROM items WHERE type=3 AND car_id=0", true);
	new rows = cache_num_rows();
	if(rows > MAX_PLAYER_ITEMS)
	{
		rows = MAX_PLAYER_ITEMS;
		print("[PlayerItems] Привышен лимит предметов (MAX_PLAYER_ITEMS)");
	}
	for(new i; i < rows; i++)
	{	
		SetPlayerItem(i, PI_SQL_ID, 		cache_get_field_content_int(i, "id"));
		SetPlayerItem(i, PI_OWNER_ID, 		cache_get_field_content_int(i, "owner_id"));
		SetPlayerItem(i, PI_RETURN_ITEMS, 	cache_get_field_content_int(i, "return_items"));
		SetPlayerItem(i, PI_TYPE, 			cache_get_field_content_int(i, "type"));
		SetPlayerItem(i, PI_SLOTS, 			cache_get_field_content_int(i, "slots"));
		SetPlayerItem(i, PI_ITEM, 			cache_get_field_content_int(i, "item"));
		SetPlayerItem(i, PI_COUNT, 			cache_get_field_content_int(i, "count"));
		cache_get_field_content(i, "number", g_player_item[i][PI_NUMBER], mysql, 32);
		cache_get_field_content(i, "region", g_player_item[i][PI_REGION], mysql, 32);
		SetPlayerItem(i, PI_TYPENUMBER, 	cache_get_field_content_int(i, "typenumber"));
		SetPlayerItem(i, PI_AKS_ID, 		cache_get_field_content_int(i, "aks_id"));
		SetPlayerItem(i, PI_TYPEACS, 		cache_get_field_content_int(i, "typeacs"));
		SetPlayerItem(i, PI_STATUS, 		cache_get_field_content_int(i, "status"));
		SetPlayerItem(i, PI_INDX, 			cache_get_field_content_int(i, "indx"));
		SetPlayerItem(i, PI_FOFFSET_X, 		cache_get_field_content_float(i, "foffset_x"));
		SetPlayerItem(i, PI_FOFFSET_Y, 		cache_get_field_content_float(i, "foffset_y"));
		SetPlayerItem(i, PI_FOFFSET_Z, 		cache_get_field_content_float(i, "foffset_z"));
		SetPlayerItem(i, PI_FROT_X, 		cache_get_field_content_float(i, "frot_x"));
		SetPlayerItem(i, PI_FROT_Y, 		cache_get_field_content_float(i, "frot_y"));
		SetPlayerItem(i, PI_FROT_Z, 		cache_get_field_content_float(i, "frot_z"));
		SetPlayerItem(i, PI_FSCALE_X, 		cache_get_field_content_float(i, "fscale_x"));
		SetPlayerItem(i, PI_FSCALE_Y, 		cache_get_field_content_float(i, "fscale_y"));
		SetPlayerItem(i, PI_FSCALE_Z, 		cache_get_field_content_float(i, "fscale_z"));
		SetPlayerItem(i, PI_SKIN_ID, 		cache_get_field_content_int(i, "skin_id"));
		SetPlayerItem(i, PI_SKIN_IZNOS, 	cache_get_field_content_int(i, "skin_iznos"));
		SetPlayerItem(i, PI_SHELF, 			cache_get_field_content_int(i, "shelf"));
		SetPlayerItem(i, PI_SKLAD, 			cache_get_field_content_int(i, "sklad"));
		SetPlayerItem(i, PI_CAR_ID, 		cache_get_field_content_int(i, "car_id"));
		SetPlayerItem(i, PI_TYPE_ITEM, 		cache_get_field_content_int(i, "type_item"));
		SetPlayerItem(i, PI_WEAPON, 		cache_get_field_content_int(i, "weapon"));
		SetPlayerItem(i, PI_PATRON, 		cache_get_field_content_int(i, "patron"));
	}
	cache_delete(result);
	printf("[PlayerItems] Предметов загружено: %d", rows);
	return 1;
}

stock DeleteItems(item_id)
{
	SetPlayerItem(item_id, PI_SQL_ID, 		0);
	SetPlayerItem(item_id, PI_OWNER_ID, 	0);
	SetPlayerItem(item_id, PI_RETURN_ITEMS, 0);
	SetPlayerItem(item_id, PI_TYPE, 		0);
	SetPlayerItem(item_id, PI_SLOTS, 		0);
	SetPlayerItem(item_id, PI_ITEM, 		0);
	SetPlayerItem(item_id, PI_COUNT, 		0);
	SetPlayerItem(item_id, PI_TYPENUMBER, 	0);
	SetPlayerItem(item_id, PI_AKS_ID, 		0);
	SetPlayerItem(item_id, PI_TYPEACS, 		0);
	SetPlayerItem(item_id, PI_STATUS, 		0);
	SetPlayerItem(item_id, PI_INDX, 		0);
	SetPlayerItem(item_id, PI_FOFFSET_X, 	0.0);
	SetPlayerItem(item_id, PI_FOFFSET_Y, 	0.0);
	SetPlayerItem(item_id, PI_FOFFSET_Z, 	0.0);
	SetPlayerItem(item_id, PI_FROT_X, 		0.0);
	SetPlayerItem(item_id, PI_FROT_Y, 		0.0);
	SetPlayerItem(item_id, PI_FROT_Z, 		0.0);
	SetPlayerItem(item_id, PI_FSCALE_X, 	0.0);
	SetPlayerItem(item_id, PI_FSCALE_Y, 	0.0);
	SetPlayerItem(item_id, PI_FSCALE_Z, 	0.0);
	SetPlayerItem(item_id, PI_SKIN_ID, 		0);
	SetPlayerItem(item_id, PI_SKIN_IZNOS, 	0);
	SetPlayerItem(item_id, PI_SHELF, 		0);
	SetPlayerItem(item_id, PI_SKLAD, 		0);
	SetPlayerItem(item_id, PI_CAR_ID, 		0);
	SetPlayerItem(item_id, PI_TYPE_ITEM, 	0);
	SetPlayerItem(item_id, PI_WEAPON, 		0);
	SetPlayerItem(item_id, PI_PATRON, 		0);
	return 1;
}

stock GetFreeItemsID()
{
	for(new i; i < MAX_PLAYER_ITEMS; i ++)
	{
		if(GetPlayerItem(i, PI_SQL_ID) != 0) continue;
		if(GetPlayerItem(i, PI_OWNER_ID) != 0) continue;
		if(GetPlayerItem(i, PI_CAR_ID) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE) != 0) continue;
		if(GetPlayerItem(i, PI_SLOTS) != 0) continue;
		return i;
	}
	return -1;
}

stock GetPlayerMoneyInventory(playerid)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_ITEM) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 0) continue;
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 1))
		{
			new query[248];
			format(query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);
			DeleteItems(i);
		}
		else
		{
			new query[248];
			format(query, sizeof query, "UPDATE items SET count=1 WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_COUNT, 1);
		}
		count++;
		break;
	}
	if(count == 0)
	{
		if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 1))
		{
			CreateItemsItem(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), 0, 1, 0, -1, -1, 0, 0);
		}
	}
	return true;
}

new Itemindx[6][24] = {"Картофель", "Свёкла", "Перец", "Баклажан", "Капуста", "Морковь"};
new indxFishRod[3][24] = {"Поплавочная удочка", "Улучшенная удочка", "Спиннинг"};
new indxFish[6][14] = {"Кусочки хлеба", "Лягушка", "Кузнечик", "Червь", "Мотыль", "Опарыш"};
stock LoadInventory(playerid, status = 0)
{
	GetPlayerMoneyInventory(playerid);
	new query[148];
	load_inventory[playerid] = "";
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new count = GetPlayerItem(i, PI_COUNT);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new indx = GetPlayerItem(i, PI_INDX);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new weapon = GetPlayerItem(i, PI_WEAPON);
		new patron = GetPlayerItem(i, PI_PATRON);
		new type = GetPlayerItem(i, PI_TYPE);
		new slots = GetPlayerItem(i, PI_SLOTS);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		if(typeitem == 0) 
		{
			if(item_id == 261) format(query, sizeof query, "[%d,%d,%d,0,\"Тёмные дела\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 258) format(query, sizeof query, "[%d,%d,%d,0,\"Форсаж\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 272) format(query, sizeof query, "[%d,%d,%d,0,\"Велесова ночь\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 278) format(query, sizeof query, "[%d,%d,%d,0,\"Оперской\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 284) format(query, sizeof query, "[%d,%d,%d,0,\"Новогодний\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 290) format(query, sizeof query, "[%d,%d,%d,0,\"Черное золото\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 300) format(query, sizeof query, "[%d,%d,%d,0,\"Охотничий\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 328) format(query, sizeof query, "[%d,%d,%d,0,\"Египетская сила\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 336) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d,1.0],", type, slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 337) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d,1.0],", type, slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 0) format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,\"%s\",1.0],", type, slots, item_id, slots, GetPlayerMoneyEx(playerid));
			else if(item_id == 295 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Плохая\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Нормальная\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Шикарная\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[%d,%d,%d,%d,\"\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,%d,1.0],", type, slots, item_id, slots, count);
		}
		else if(typeitem == 1) format(query, sizeof query, "[%d,%d,99,%d,\"%s %s\",%d,1,1.0],", type, slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
		else if(typeitem == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"\",%d,1,1.0],", type, slots, typeacs, aks_id, slots);
		else if(typeitem == 3) format(query, sizeof query, "[%d,%d,100,%d,\"\",%d,1,1.0,%d],", type, slots, skin_id, slots, skin_iznos);
		else if(typeitem == 4) format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,%d,1.0],", type, slots, GetInvIdWeapon(weapon), slots, patron);
		strcat(load_inventory[playerid], query);
	}
	if(inventory_shelf_id[playerid] != 0 || inventory_sklad_id[playerid] != 0 || inventory_trunk_id[playerid] != 0) 
	{
		string_inventory[0] = EOS;
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(inventory_shelf_id[playerid] != 0) if(GetPlayerItem(i, PI_SHELF) != inventory_shelf_id[playerid]) continue;
			if(inventory_sklad_id[playerid] != 0) if(GetPlayerItem(i, PI_SKLAD) != inventory_sklad_id[playerid]) continue;
			if(inventory_trunk_id[playerid] != 0) if(GetPlayerItem(i, PI_CAR_ID) != inventory_trunk_id[playerid]) continue;
			new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
			new count = GetPlayerItem(i, PI_COUNT);
			new item_id = GetPlayerItem(i, PI_ITEM);
			new indx = GetPlayerItem(i, PI_INDX);
			new typeacs = GetPlayerItem(i, PI_TYPEACS);
			new aks_id = GetPlayerItem(i, PI_AKS_ID);
			new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
			new skin_id = GetPlayerItem(i, PI_SKIN_ID);
			new weapon = GetPlayerItem(i, PI_WEAPON);
			new patron = GetPlayerItem(i, PI_PATRON);
			new type = GetPlayerItem(i, PI_TYPE);
			new slots = GetPlayerItem(i, PI_SLOTS);
			new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
			if(typeitem == 0) 
			{
				if(item_id == 261) format(query, sizeof query, "[%d,%d,%d,0,\"Тёмные дела\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 258) format(query, sizeof query, "[%d,%d,%d,0,\"Форсаж\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 272) format(query, sizeof query, "[%d,%d,%d,0,\"Велесова ночь\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 278) format(query, sizeof query, "[%d,%d,%d,0,\"Оперской\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 284) format(query, sizeof query, "[%d,%d,%d,0,\"Новогодний\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 290) format(query, sizeof query, "[%d,%d,%d,0,\"Черное золото\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 300) format(query, sizeof query, "[%d,%d,%d,0,\"Охотничий\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 328) format(query, sizeof query, "[%d,%d,%d,0,\"Египетская сила\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 336) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d,1.0],", type, slots, item_id, indx, Itemindx[indx], slots, count);
				else if(item_id == 337) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d,1.0],", type, slots, item_id, indx, Itemindx[indx], slots, count);
				else if(item_id == 295 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Шкура оленя (Плохая)\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 295 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Шкура оленя (Нормальная)\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 295 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Шкура оленя (Шикарная)\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[%d,%d,%d,%d,\"\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 132 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 132 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 132 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,%d,1.0],", type, slots, item_id, slots, count);
			}
			else if(typeitem == 1) format(query, sizeof query, "[%d,%d,99,%d,\"%s %s\",%d,1,1.0],", type, slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
			else if(typeitem == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"\",%d,1,1.0],", type, slots, typeacs, aks_id, slots);
			else if(typeitem == 3) format(query, sizeof query, "[%d,%d,100,%d,\"\",%d,1,1.0,%d],", type, slots, skin_id, slots, skin_iznos);
			else if(typeitem == 4) format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,%d,1.0],", type, slots, GetInvIdWeapon(weapon), slots, patron);
			strcat(string_inventory, query);
		}
	}
	if(inventory_shelf_id[playerid] != 0 || inventory_sklad_id[playerid] != 0 || inventory_trunk_id[playerid] != 0) 
		strcat(load_inventory[playerid], string_inventory);
	strdel(load_inventory[playerid], strlen(load_inventory[playerid]) - 1, strlen(load_inventory[playerid]));
	if(status == 1)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('InventoryNew').setItems([%s])", load_inventory[playerid]);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
	return 1;
}

stock StateCheck(playerid)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPEACS) != 222) continue;
		if(GetPlayerItem(i, PI_STATUS) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 2) continue;
		inventory_bag_id[playerid] = 1;
		return 1;
	}
	inventory_bag_id[playerid] = 0;
	return 1;
}

stock GetSlotItemInventory(playerid, dop_id, from, slot)
{
	new count = 0;
	if(dop_id == -1)
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
			if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
			if(GetPlayerItem(i, PI_TYPE) != from) continue;
			count = 1;
			return count;
		}
	}
	else
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(inventory_shelf_id[playerid] != 0) if(GetPlayerItem(i, PI_SHELF) != inventory_shelf_id[playerid]) continue;
			if(inventory_sklad_id[playerid] != 0) if(GetPlayerItem(i, PI_SKLAD) != inventory_sklad_id[playerid]) continue;
			if(inventory_trunk_id[playerid] != 0) if(GetPlayerItem(i, PI_CAR_ID) != inventory_trunk_id[playerid]) continue;
			if(GetPlayerItem(i, PI_TYPE) != 3) continue;
			if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
			count = 1;
			return count;
		}
	}
	return count;
}

stock OnInventoryDisplayChange(playerid, bool:status)
{
	if(GetPlayerAdminEx(playerid) > 0) if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(status_authorization[playerid] != 1) return true;
	if(DiceTable[playerid] == 0 && !GetPVarInt(playerid,"case_type"))
	{
		if(status)
		{
			UpdateWeapons(playerid), LoadInventory(playerid), StateCheck(playerid);
			STRING_GLOBAL[0] = EOS;
			if(inventory_bag_id[playerid] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[[2,\"Рюкзак\",%d.00,50.00,30]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoneyEx(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), GetWorkLoadItems(playerid, 1), load_inventory[playerid]);
			else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoneyEx(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), load_inventory[playerid]);
			BitStream_2(playerid, s_CefInterface, t_CefShow, "InventoryNew", STRING_GLOBAL);
			inventory_status[playerid] = false;
			return 1;
		}
		else
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "InventoryNew");
			inventory_status[playerid] = true;
			inventory_sklad_id[playerid] = 0;
			inventory_shelf_id[playerid] = 0;
			inventory_trunk_id[playerid] = 0;
			inventory_bag_id[playerid] = 0;
			return 1;
		}
	}
	return 1;
}

public:OnInventoryItemMove(playerid, where, event, from, slot, count_1)
{
	if(GetPlayerAdminEx(playerid) > 0) if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(inventory_kd_move[playerid] != 0) 
		return GameText(playerid, "Подождите, вы только что перенесли предмет", 2000, 0), LoadInventory(playerid, 1);
	inventory_kd_move[playerid] = 1;
	new str_log[148];
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{	
		if(where == 3)
		{
			if(inventory_shelf_id[playerid] != 0) if(GetPlayerItem(i, PI_SHELF) != inventory_shelf_id[playerid]) continue;
			if(inventory_sklad_id[playerid] != 0) if(GetPlayerItem(i, PI_SKLAD) != inventory_sklad_id[playerid]) continue;
			if(inventory_trunk_id[playerid] != 0) if(GetPlayerItem(i, PI_CAR_ID) != inventory_trunk_id[playerid]) continue;
			if(GetPlayerItem(i, PI_TYPE) != where) continue;
			if(GetPlayerItem(i, PI_SLOTS) != event) continue;
		}
		else
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
			if(GetPlayerItem(i, PI_SLOTS) != event) continue;
			if(GetPlayerItem(i, PI_TYPE) != where) continue;
		}
		new id = GetPlayerItem(i, PI_SQL_ID);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new item = GetPlayerItem(i, PI_ITEM);
		new count = GetPlayerItem(i, PI_COUNT);
		new status = GetPlayerItem(i, PI_STATUS);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new indx = GetPlayerItem(i, PI_INDX);
		new patron = GetPlayerItem(i, PI_PATRON);
		new weapon = GetPlayerItem(i, PI_WEAPON);
		if(count < count_1 && typeitem == 0 && item != 0) 
			return GameText(playerid, "В таком количестве нет данного предмета", 3000, 0), LoadInventory(playerid, 1);
		if (count < 0 || (count < count_1 && typeitem == 0 && item != 0)) 
    		return GameText(playerid, "Введите корректное количество предметов", 3000, 0), LoadInventory(playerid, 1);
		if(patron < count_1 && typeitem == 4) 
			return GameText(playerid, "В таком количестве нет данного оружия", 3000, 0), LoadInventory(playerid, 1);
		if(count_1 < 0)
			return LoadInventory(playerid, 1);
		if(from == where && event == slot)
			return LoadInventory(playerid, 1);
		if(typeitem == 0 && item == 0 && from != 1)
			return LoadInventory(playerid, 1);
		if(typeitem != 2 && from == 0)
			return GameText(playerid, "Этот предмет нельзя положить сюда", 3000, 0), LoadInventory(playerid, 1);
		if(typeitem == 2 && status == 1 && from != 0)
			return GameText(playerid, "Этот аксессуар сейчас используется", 3000, 0), LoadInventory(playerid, 1);
		if(typeitem == 3 && from != 1) // проверка на одетый скин
		{
			if(skin_id == GetPlayerData(playerid, P_SKIN))
			{
				SetPlayerSkin(playerid, 252);
				SetPlayerData(playerid, P_SKIN, 252);
				UpdatePlayerDatabaseInt(playerid, "skin", 252);
			}
		}
		if(from == 3 && where != 3) // проверка на то, занят слот или нет (не в инвентаре)
		{
			if(GetSlotItemInventory(playerid, 0, from, slot) != 0) 
				return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);
			if(typeitem == 0)
			{
				if(count_1 == count)
				{
					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET sklad=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_sklad_id[playerid], slot, from, id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET shelf=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_shelf_id[playerid], slot, from, id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET car_id=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_trunk_id[playerid], slot, from, id);
					mysql_query(mysql, query, false);
					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
					SetPlayerItem(i, PI_OWNER_ID, -1);
					if(inventory_sklad_id[playerid] != 0) SetPlayerItem(i, PI_SKLAD, inventory_sklad_id[playerid]), format(str_log, 148, "Положил предмет в склад");
					if(inventory_shelf_id[playerid] != 0) SetPlayerItem(i, PI_SHELF, inventory_shelf_id[playerid]), format(str_log, 148, "Положил предмет в шкаф");
					if(inventory_trunk_id[playerid] != 0) SetPlayerItem(i, PI_CAR_ID, inventory_trunk_id[playerid]), format(str_log, 148, "Положил предмет в багажник");
				}
				else
				{
					new query[148];
					format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count - count_1, id);
					mysql_query(mysql, query, false);
					SetPlayerItem(i, PI_COUNT, count - count_1);
					if(inventory_sklad_id[playerid] != 0) CreateItemsItem(-1, 0, from, slot, item, count_1, indx, -1, inventory_sklad_id[playerid], 0, 0);
					else if(inventory_shelf_id[playerid] != 0) CreateItemsItem(-1, 0, from, slot, item, count_1, indx, inventory_shelf_id[playerid], -1, 0, 0);
					else if(inventory_trunk_id[playerid] != 0) CreateItemsItem(-1, 0, from, slot, item, count_1, indx, -1, -1, inventory_trunk_id[playerid], 0);
				}
			}
			else if(typeitem == 4)
			{
				if(count_1 == patron)
				{
					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET sklad=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_sklad_id[playerid], slot, from, id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET shelf=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_shelf_id[playerid], slot, from, id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET car_id=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_trunk_id[playerid], slot, from, id);
					mysql_query(mysql, query, false);
					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
					SetPlayerItem(i, PI_OWNER_ID, -1);
					if(inventory_sklad_id[playerid] != 0) SetPlayerItem(i, PI_SKLAD, inventory_sklad_id[playerid]);
					if(inventory_shelf_id[playerid] != 0) SetPlayerItem(i, PI_SHELF, inventory_shelf_id[playerid]);
					if(inventory_trunk_id[playerid] != 0) SetPlayerItem(i, PI_CAR_ID, inventory_trunk_id[playerid]);
				}
				else
				{
					new query[148];
					format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", patron - count_1, id);
					mysql_query(mysql, query, false);
					SetPlayerItem(i, PI_PATRON, patron - count_1);
					if(inventory_sklad_id[playerid] != 0) CreateItemsGun(-1, 0, from, slot, -1, inventory_sklad_id[playerid], 0, 4, weapon, count_1);
					else if(inventory_shelf_id[playerid] != 0) CreateItemsGun(-1, 0, from, slot, inventory_shelf_id[playerid], -1, 0, 4, weapon, count_1);
					else if(inventory_trunk_id[playerid] != 0) CreateItemsGun(-1, 0, from, slot, -1, -1, inventory_trunk_id[playerid], 4, weapon, count_1);
				}
			}
			else
			{
				new query[148];
				if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, sklad=%d, owner_id=-1 WHERE id=%d",  slot, from, inventory_sklad_id[playerid], id);
				else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, shelf=%d, owner_id=-1 WHERE id=%d", slot, from, inventory_shelf_id[playerid], id);
				else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, car_id=%d, owner_id=-1 WHERE id=%d",  slot, from, inventory_trunk_id[playerid], id);
				mysql_query(mysql, query, false);
				if(inventory_sklad_id[playerid] != 0) SetPlayerItem(i, PI_SKLAD, inventory_sklad_id[playerid]);
				if(inventory_shelf_id[playerid] != 0) SetPlayerItem(i, PI_SHELF, inventory_shelf_id[playerid]);
				if(inventory_trunk_id[playerid] != 0) SetPlayerItem(i, PI_CAR_ID, inventory_trunk_id[playerid]);
				SetPlayerItem(i, PI_SLOTS, slot);
				SetPlayerItem(i, PI_TYPE, from);
				SetPlayerItem(i, PI_OWNER_ID, -1);
			}
		}
		else if(from != 3 && where == 3) // проверка на то, занят слот или нет (в инвентаре)
		{
			if(GetSlotItemInventory(playerid, -1, from, slot) != 0) 
				return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);
			if(typeitem == 0)
			{
				if(count_1 == count)
				{
					new query[148];
					format(query, sizeof query, "UPDATE items SET sklad=-1, shelf=-1, car_id=0, slots=%d, type=%d, owner_id=%d WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
					mysql_query(mysql, query, false);
					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
					SetPlayerItem(i, PI_OWNER_ID, GetPlayerAccountID(playerid));
					SetPlayerItem(i, PI_SKLAD, -1);
					SetPlayerItem(i, PI_SHELF, -1);
					SetPlayerItem(i, PI_CAR_ID, 0);
				}
				else
				{
					SetPlayerItem(i, PI_COUNT, count - count_1);
					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
					mysql_query(mysql, query, false);
					CreateItemsItem(GetPlayerAccountID(playerid), 0, from, slot, item, count_1, indx, -1, -1, 0, 0);
				}
			}
			else if(typeitem == 4)
			{
				if(count_1 == patron)
				{
					new query[148];
					format(query, sizeof query, "UPDATE items SET sklad=-1, shelf=-1, car_id=0, slots=%d, type=%d, owner_id=%d WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
					mysql_query(mysql, query, false);
					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
					SetPlayerItem(i, PI_OWNER_ID, GetPlayerAccountID(playerid));
					SetPlayerItem(i, PI_SKLAD, -1);
					SetPlayerItem(i, PI_SHELF, -1);
					SetPlayerItem(i, PI_CAR_ID, 0);
				}
				else
				{
					SetPlayerItem(i, PI_PATRON, patron - count_1);
					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
					mysql_query(mysql, query, false);
					CreateItemsGun(GetPlayerAccountID(playerid), 0, from, slot, -1, -1, 0, 4, weapon, count_1);
				}
			}
			else
			{
				new query[148];
				if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, owner_id=%d, sklad=-1 WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
				else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, owner_id=%d, shelf=-1 WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
				else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, owner_id=%d, car_id=0 WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
				mysql_query(mysql, query, false);
				if(inventory_sklad_id[playerid] != 0) SetPlayerItem(i, PI_SKLAD, -1);
				else if(inventory_shelf_id[playerid] != 0) SetPlayerItem(i, PI_SHELF, -1);
				else if(inventory_trunk_id[playerid] != 0) SetPlayerItem(i, PI_CAR_ID, 0);
				SetPlayerItem(i, PI_SLOTS, 		slot);
				SetPlayerItem(i, PI_TYPE, 		from);
				SetPlayerItem(i, PI_OWNER_ID, 	GetPlayerAccountID(playerid));
			}
		}
		else if(from == 1 && where == 2 || from == 2 && where == 1 || from == 1 && where == 1 || from == 2 && where == 2) 
		{
			if(typeitem == 0)
			{
				if(item != 0)
				{
					if(GetSlotItemInventory(playerid, -1, from, slot) == 0) 
					{
						if(count_1 == count)
						{
							new query[148];
							format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
							mysql_query(mysql, query, false);
							SetPlayerItem(i, PI_SLOTS, slot);
							SetPlayerItem(i, PI_TYPE, from);
						}
						else
						{
							SetPlayerItem(i, PI_COUNT, count - count_1);
							new query[148];
							format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
							mysql_query(mysql, query, false);
							CreateItemsItem(GetPlayerAccountID(playerid), 0, from, slot, item, count_1, indx, -1, -1, 0, 0);	
						}
					}
					else
					{
						if(from == 1 && where == 2 || from == 2 && where == 1)
							return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);
						for(new idx; idx < MAX_PLAYER_ITEMS; idx++)
						{
							if(GetPlayerItem(idx, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
							if(GetPlayerItem(idx, PI_TYPE) != from) continue;
							if(GetPlayerItem(idx, PI_SLOTS) != slot) continue;
							SetPlayerItem(idx, PI_COUNT, GetPlayerItem(idx, PI_COUNT) + count_1);
							new query[148];
							format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(idx, PI_COUNT), GetPlayerItem(idx, PI_SQL_ID));
							mysql_query(mysql, query, false);
						}
						if(count_1 == count)
						{
							DestroyItemsMysql(i);
						}
						else
						{
							SetPlayerItem(i, PI_COUNT, GetPlayerItem(i, PI_COUNT) - count_1);
							new query[148];
							format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
							mysql_query(mysql, query, false);
						}
					}
				}
				else
				{
					new query[148];
					format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
					mysql_query(mysql, query, false);
					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
				}
			}
			else if(typeitem == 4)
			{
				if(GetSlotItemInventory(playerid, -1, from, slot) == 0) 
				{
					if(count_1 == patron)
					{
						new query[148];
						format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
						mysql_query(mysql, query, false);
						SetPlayerItem(i, PI_SLOTS, slot);
						SetPlayerItem(i, PI_TYPE, from);
					}
					else
					{
						SetPlayerItem(i, PI_PATRON, patron - count_1);
						new query[148];
						format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
						mysql_query(mysql, query, false);
						CreateItemsGun(GetPlayerAccountID(playerid), 0, from, slot, -1, -1, 0, 4, weapon, count_1);
					}
				}
				else
				{
					if(from == 1 && where == 2 || from == 2 && where == 1)
						return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);
					for(new idx; idx < MAX_PLAYER_ITEMS; idx++)
					{
						if(GetPlayerItem(idx, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
						if(GetPlayerItem(idx, PI_TYPE) != from) continue;
						if(GetPlayerItem(idx, PI_SLOTS) != slot) continue;
						SetPlayerItem(idx, PI_PATRON, GetPlayerItem(idx, PI_PATRON) + count_1);
						new query[148];
						format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(idx, PI_PATRON), GetPlayerItem(idx, PI_SQL_ID));
						mysql_query(mysql, query, false);
					}
					if(count_1 == patron)
					{
						DestroyItemsMysql(i);
					}
					else
					{
						SetPlayerItem(i, PI_PATRON, GetPlayerItem(i, PI_PATRON) - count_1);
						new query[148];
						format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
						mysql_query(mysql, query, false);
					}
				}
			}
			else
			{
				new query[148];
				format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
				mysql_query(mysql, query, false);
				SetPlayerItem(i, PI_SLOTS, slot);
				SetPlayerItem(i, PI_TYPE, from);
			}
		}
		else if(where == 3 && from == 3) // проверка куда перекладываешь предмет (в этом случае предмет перемещается за пределами инвентаря)
		{
			if(GetSlotItemInventory(playerid, 0, from, slot) != 0) 
				return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);
			new query[148];
			if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d WHERE id=%d LIMIT 1", slot, id);
			else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d WHERE id=%d LIMIT 1", slot, id);
			else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d WHERE id=%d LIMIT 1", slot, id);
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_SLOTS, slot);
		}
		else if(where == 0 && from != 0 || where != 0 && from == 0 || where == 0 && from == 0)
		{
			new query[148];
			format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_SLOTS, slot);
			SetPlayerItem(i, PI_TYPE, from);
		}
		LoadInventory(playerid);
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('InventoryNew').setItems([%s])", load_inventory[playerid]);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		if(typeitem == 4) 
			ResetWeapons(playerid);
		return 1;
	}
	return true;	
}

public:OnInventoryItemUse(playerid, event, slot)
{
	if(GetPlayerAdminEx(playerid) > 0) if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;
		new number[32], region[32];
		format(number, sizeof number, "%s", GetPlayerItem(i, PI_NUMBER));
		format(region, sizeof region, "%s", GetPlayerItem(i, PI_REGION));
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new type = GetPlayerItem(i, PI_TYPEACS);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new status = GetPlayerItem(i, PI_STATUS);
		new boneid = GetPlayerItem(i, PI_INDX);
		new count = GetPlayerItem(i, PI_COUNT);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		if(typeitem == 0)
		{
			if(item_id == 132)
			{
				if(g_player_status_fish[playerid] == 0)
				{
					if(g_player_fishing_zone[playerid] != 1)
						return SCM(playerid, 0xf8d883FF, "Вы должны находится в зоне рыбалки.");
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					if(z > 3.40) return SCM(playerid, 0xf8d883FF, "Вы должны находится впритык к воде.");
					g_player_type_fish_rod[playerid] = boneid;
					SCMF(playerid, 0x50e958FF, "Вы успешно взяли \"%s\" в руки.", indxFishRod[boneid]);
					SCM(playerid, 0x50e958FF, "Перед рыбалкой не забудьте намотать леску на удочку.");
					if(boneid == 0) SetPlayerAttachedObject(playerid, 0, 16504, 6, 0.079376, 0.037070, 0.007706, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
					if(boneid == 1) SetPlayerAttachedObject(playerid, 0, 16503, 6, 0.079376, 0.037070, 0.007706, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
					if(boneid == 2) SetPlayerAttachedObject(playerid, 0, 16502, 6, 0.079376, 0.037070, 0.007706, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
					g_player_status_fish[playerid] = 1;
					OnItemsInterfaceClose(playerid);
					BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Начать рыбалку\"]]");
				}
				else
				{
					RemovePlayerAttachedObjectEx(playerid, 0, 6);
					g_player_status_fish[playerid] = 0;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				}
			} 
			if(item_id == 326)
			{
				if(g_player_status_fish[playerid] == 0) return SCM(playerid, 0xfcdb70FF, "Сначала возьмите в руку удочку.");
				if(g_player_status_fish[playerid] != 2) return SCM(playerid, 0xfcdb70FF, "Сначала намотайте леску на вашу удочку.");
				if(g_player_status_fish[playerid] == 3) return SCM(playerid, 0xfcdb70FF, "Вы уже посадили наживку на удочку.");
				if(g_player_status_fish[playerid] == 2)
				{
					SCMF(playerid, 0x50e958FF, "Вы выбрали \"%s\" в качестве наживки. Наживка будет автоматически применена во время рыбалки.", indxFish[boneid]);
					g_player_status_fish[playerid] = 3;
					GiveIteam(playerid, 326, 0, 1, boneid);
				}
			}
			if(item_id == 325)
			{
				if(g_player_status_fish[playerid] == 0) return SCM(playerid, 0xfcdb70FF, "Сначала возьмите в руку удочку.");
				if(g_player_status_fish[playerid] == 2) return SCM(playerid, 0xfcdb70FF, "Вы уже намотали леску на вашу удочку.");
				if(g_player_status_fish[playerid] == 1)
				{
					if(boneid == 0) SCMF(playerid, 0x50e958FF, "Вы успешно намотали леску 0.15мм на \"%s\".", indxFishRod[g_player_type_fish_rod[playerid]]);
					if(boneid == 1) SCMF(playerid, 0x50e958FF, "Вы успешно намотали леску 0.3мм на \"%s\".", indxFishRod[g_player_type_fish_rod[playerid]]);
					if(boneid == 2) SCMF(playerid, 0x50e958FF, "Вы успешно намотали леску 0.85мм на \"%s\".", indxFishRod[g_player_type_fish_rod[playerid]]);
					g_player_status_fish[playerid] = 2;
					GiveIteam(playerid, 325, 0, 1, boneid);
				}
			}
			if(item_id == 331)
			{
				new garden_status, garden = GetNearestGarden(playerid, 6.0);
				if(garden != -1)
				{
					if(GetGardenData(garden, G_IMPROVEMENTS) > 0)
					{
						if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -2.67, GetGardenData(garden, G_POS_Y) + -0.009998, GetGardenData(garden, G_POS_Z) + 0.124374)) garden_status = 1;
						if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -3.39779, GetGardenData(garden, G_POS_Y) + 0.025699, GetGardenData(garden, G_POS_Z) + 0.025609)) garden_status = 1;
						if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -5.07046, GetGardenData(garden, G_POS_Y) + 0.075143, GetGardenData(garden, G_POS_Z) + 0.036848)) garden_status = 1;
					}
				}
				if(garden_status == 1) 
				{
					if(count < 2) return SCM(playerid, 0xf8d883FF, "Данная канистра не наполнена водой.");
					if(gardenobj_1_woter[garden] + (count - 1) > 150) 
					{
						new fmt_text[84];
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count - (gardenobj_1_woter[garden] + (count - 1) - 150), GetPlayerItem(i, PI_SQL_ID));
						mysql_query(mysql, fmt_text, false);
						AddPlayerItem(i, PI_COUNT, -, gardenobj_1_woter[garden] + (count - 1) - 150);
						SCMF(playerid, 0xf8d883FF, "Вы наполнили бочку с водой на %d л.", gardenobj_1_woter[garden] + (count - 1) - 150);
						gardenobj_1_woter[garden] = 150;
						format(fmt_text, sizeof fmt_text, "{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}%d/150 л.", gardenobj_1_woter[garden]);
						UpdateDynamic3DTextLabelText(gardenobj_1_label[garden], 0xFFFF00FF, fmt_text);
					}
					else
					{
						new fmt_text[84];
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE items SET count=1 WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_SQL_ID));
						mysql_query(mysql, fmt_text, false);
						SetPlayerItem(i, PI_COUNT, 1);
						gardenobj_1_woter[garden] = gardenobj_1_woter[garden] + count - 1;
						SCMF(playerid, 0xf8d883FF, "Вы наполнили бочку с водой на %d л.", count - 1);
						format(fmt_text, sizeof fmt_text, "{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}%d/150 л.", gardenobj_1_woter[garden]);
						UpdateDynamic3DTextLabelText(gardenobj_1_label[garden], 0xFFFF00FF, fmt_text);
					}
				}
				else
				{
					if(count > 14) return SCM(playerid, 0xf8d883FF, "Данная канистра уже наполнена водой.");
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					if(z > 2.40) return SCM(playerid, 0xf8d883FF, "Вы должны находится впритык к воде.");
					new fmt_text[84];
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count + 14, GetPlayerItem(i, PI_SQL_ID));
					mysql_query(mysql, fmt_text, false);
					AddPlayerItem(i, PI_COUNT, +, 14);
					SCM(playerid, 0xabcdefFF, "Вы набрали воду в канистру");
				}
			}
			if(item_id == 168)
			{
				if(GetInventorySlots(playerid) == -1) return SCM(playerid, 0xf8d883FF, "У вас недостаточно свободных мест в инвентаре");
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				new garden_status, garden = GetNearestGarden(playerid, 6.0);
				if(garden != -1)
				{
					if(GetGardenData(garden, G_IMPROVEMENTS) > 0)
					{
						if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -2.67, GetGardenData(garden, G_POS_Y) + -0.009998, GetGardenData(garden, G_POS_Z) + 0.124374)) garden_status = 1;
						if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -3.39779, GetGardenData(garden, G_POS_Y) + 0.025699, GetGardenData(garden, G_POS_Z) + 0.025609)) garden_status = 1;
						if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -5.07046, GetGardenData(garden, G_POS_Y) + 0.075143, GetGardenData(garden, G_POS_Z) + 0.036848)) garden_status = 1;
					}
				}
				if(z > 2.40 && garden_status == 0) return SCM(playerid, 0xf8d883FF, "Вы должны находится возле бочки с водой в огороде либо стоять впритык к воде.");
				if(garden_status == 1)
				{
					if(gardenobj_1_woter[garden] > 50)
					{
						gardenobj_1_woter[garden] = gardenobj_1_woter[garden] - 50;
						GiveIteam(playerid, 168, 0, 1, 0);
						GiveIteam(playerid, 247, 1, 50, 0);
					}
					else
					{
						GiveIteam(playerid, 168, 0, 1, 0);
						GiveIteam(playerid, 247, 1, gardenobj_1_woter[garden], 0);
						gardenobj_1_woter[garden] = 0;
					}
					new fmt_text[84];
					format(fmt_text, sizeof fmt_text, "{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}%d/150 л.", gardenobj_1_woter[garden]);
					UpdateDynamic3DTextLabelText(gardenobj_1_label[garden], 0xFFFF00FF, fmt_text);
				}
				else
				{
					GiveIteam(playerid, 168, 0, 1, 0);
					GiveIteam(playerid, 247, 1, 50, 0);
				}
				SCM(playerid, 0xabcdefFF, "Вы набрали воду в лейку");
			}
			if(item_id == 342) BitStream_2(playerid, s_CefInterface, t_CefShow, "Tablet", "[0]");
			if(item_id == 288)
			{
				new string[148], Float:distance, fmt[MAX_PLAYERS];	
				for(new idx; idx < g_neft_loaded; idx ++)
				{
					if(GetNeftData(idx, N_OWNER_ID) == 0)
					{
						SetPlayerCheckpoint(playerid, GetNeftData(idx, N_POS_X),GetNeftData(idx, N_POS_Y),GetNeftData(idx, N_POS_Z), 3.0), EnablePlayerGPS(playerid, 37, GetNeftData(idx, N_POS_X),GetNeftData(idx, N_POS_Y),GetNeftData(idx, N_POS_Z), ""), distance = GetPlayerDistanceFromPoint(playerid, GetNeftData(idx, N_POS_X),GetNeftData(idx, N_POS_Y),GetNeftData(idx, N_POS_Z));
						neft_cp[playerid] = 1;
						format(string, sizeof(string), "{afdafc}Месторождение нефти найдено в {FFFFFF}%.1fм. {afdafc}от вас и отмечено на карте.", distance);
						SendClientMessage(playerid, 0xffffffFF, string);
						fmt[playerid] = 0;
						return 1;
					}
					else fmt[playerid] = 1;
				}
				if(fmt[playerid] == 1) SendClientMessage(playerid, 0xffffffFF, "{afdafc}*На данный момент вы не можете это использовать, так как привышен лимит нефтевышек.");
			}
			if(item_id == 258){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[0,\"Форсаж\",1,0,1,[[0,0,\"Кепка MB\",6],[0,1,\"Кепка BMW\",6],[0,2,\"ВАЗ 2106\",3],[0,3,\"ЗАЗ\",3],[1,4,\"BMW E30\",3],[1,5,\"Гонщик\",4],[1,6,\"Toyota Mark 2\",3],[2,7,\"Subaru Impreza WRX\",3],[2,8,\"MMC Lancer Evo\",3],[2,9,\"Mazda RX-7\",3]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[0,\"Форсаж\",120,0,0,[[0,0,\"Кепка MB\",6],[0,1,\"Кепка BMW\",6],[0,2,\"ВАЗ 2106\",3],[0,3,\"ЗАЗ\",3],[1,4,\"BMW E30\",3],[1,5,\"Гонщик\",4],[1,6,\"Toyota Mark 2\",3],[2,7,\"Subaru Impreza WRX\",3],[2,8,\"MMC Lancer Evo\",3],[2,9,\"Mazda RX-7\",3]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 1);
				SetPVarInt(playerid, "case_id", 258);
			} 
			if(item_id == 261){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[1, \"Темные дела\", 1, 0, 1,[[0, 2, \"Шляпа Мафиозник\", 1],[0, 3, \"ОКА\", 1],[1, 4, \"ВАЗ 2108\", 1],[1, 5, \"JEEP\", 1],[1, 6, \"Перчаточный Маньяк\", 4],[1, 7, \"Mercedes W140 S600\", 1],[2, 8, \"Land Cruiser 300\", 1],[2, 9, \"Саша Белый\", 4]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[1, \"Темные дела\", 120, 0, 0,[[0, 2, \"Шляпа Мафиозник\", 1],[0, 3, \"ОКА\", 1],[1, 4, \"ВАЗ 2108\", 1],[1, 5, \"JEEP\", 1],[1, 6, \"Перчаточный Маньяк\", 4],[1, 7, \"Mercedes W140 S600\", 1],[2, 8, \"Land Cruiser 300\", 1],[2, 9, \"Саша Белый\", 4]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 2);
				SetPVarInt(playerid, "case_id", 261);
			}
			if(item_id == 272){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[2, \"Велесова ночь\", 1, 0, 1,[[0, 0, \"Маска тыквы\", 6],[0, 1, \"Цепочка пришельца\", 6],[0, 2, \"Lada Инвалидка\", 3],[0, 3, \"Иж Комби\", 3],[1, 4, \"Volvo V40\", 3],[1, 5, \"Шляпник\", 4],[1, 6, \"Hundai Santa Fe\", 3], [2, 7, \"Ford Mustang\", 3], [2, 8, \"Псих\", 4], [2, 9, \"Дявольский смайлик\", 6]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[2, \"Велесова ночь\", 120, 0, 0,[[0, 0, \"Маска тыквы\", 6],[0, 1, \"Цепочка пришельца\", 6],[0, 2, \"Lada Инвалидка\", 3],[0, 3, \"Иж Комби\", 3],[1, 4, \"Volvo V40\", 3],[1, 5, \"Шляпник\", 4],[1, 6, \"Hundai Santa Fe\", 3], [2, 7, \"Ford Mustang\", 3], [2, 8, \"Псих\", 4], [2, 9, \"Дявольский смайлик\", 6]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 3);
				SetPVarInt(playerid, "case_id", 272);
			}
			if(item_id == 278){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[3, \"Оперской\", 1, 0, 1,[[0, 0, \"Берет\",6],[0, 1, \"Черные очки\",6],[0, 2, \"Москвич\",3],[0, 3, \"ЛУАЗ\",3],[1, 4, \"Mazda 3 MPS\",3],[1, 5, \"УАЗ ХАНТЕР\",3],[1, 6, \"Ford Focus 3\",3],[2, 7, \"Шлем Алтын\",6],[2, 8, \"Черный противогаз\",6],[2, 9, \"Dodge Charger SRT HellCat\",3]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[3, \"Оперской\", 120, 0, 0,[[0, 0, \"Берет\",6],[0, 1, \"Черные очки\",6],[0, 2, \"Москвич\",3],[0, 3, \"ЛУАЗ\",3],[1, 4, \"Mazda 3 MPS\",3],[1, 5, \"УАЗ ХАНТЕР\",3],[1, 6, \"Ford Focus 3\",3],[2, 7, \"Шлем Алтын\",6],[2, 8, \"Черный противогаз\",6],[2, 9, \"Dodge Charger SRT HellCat\",3]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 4);
				SetPVarInt(playerid, "case_id", 278);
			}
			if(item_id == 284){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[4, \"Новогодний\", 1, 0, 1,[[0, 0, \"Шапка ушанка\",6],[0, 1, \"Новогодняя шапка\",6],[0, 2, \"Скутер\",3],[0, 3, \"ВАЗ 2104\",3],[0, 4, \"ВАЗ 2101\",3],[1, 5, \"Парень в черном\",4],[1, 6, \"Toyota Hachiroku AE86\",3],[1, 7, \"Subaru Impreza WRX\",3],[1, 8, \"Nissan Silvia\",3],[1, 9, \"Mitsubitshi Lancer X\",3],[2, 10, \"Мурад\",4],[2, 11, \"Бодров\",4],[2, 12, \"Верка сердючка\",4],[2, 13, \"Дом на колесах\",3],[2, 13, \"International ProStar LT\",3],[2, 14, \"C.P Company\",6]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[4, \"Новогодний\", 120, 0, 0,[[0, 0, \"Шапка ушанка\",6],[0, 1, \"Новогодняя шапка\",6],[0, 2, \"Скутер\",3],[0, 3, \"ВАЗ 2104\",3],[0, 4, \"ВАЗ 2101\",3],[1, 5, \"Парень в черном\",4],[1, 6, \"Toyota Hachiroku AE86\",3],[1, 7, \"Subaru Impreza WRX\",3],[1, 8, \"Nissan Silvia\",3],[1, 9, \"Mitsubitshi Lancer X\",3],[2, 10, \"Мурад\",4],[2, 11, \"Бодров\",4],[2, 12, \"Верка сердючка\",4],[2, 13, \"Дом на колесах\",3],[2, 13, \"International ProStar LT\",3],[2, 14, \"C.P Company\",6]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 5);
				SetPVarInt(playerid, "case_id", 284);
			}
			if(item_id == 290){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[5, \"Черное золото\", 1, 0, 1,[[0, 0, \"Lada Инвалидка\",3],[0, 1, \"ЗАЗ\",3],[0, 2, \"Черные очки\",6],[1, 3, \"Золотая маска\",6],[1, 4, \"Кинжал\",6],[1, 5, \"Yamaha Wolverine\",3],[1, 6, \"Модник\",4],[2, 7, \"Куфия\",6],[2, 8, \"Золотая корона\",6],[2, 9, \"Коломойский\",4],[2, 10, \"Mercedes-Benz Vito\",3]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[5, \"Черное золото\", 120, 0, 0,[[0, 0, \"Lada Инвалидка\",3],[0, 1, \"ЗАЗ\",3],[0, 2, \"Черные очки\",6],[1, 3, \"Золотая маска\",6],[1, 4, \"Кинжал\",6],[1, 5, \"Yamaha Wolverine\",3],[1, 6, \"Модник\",4],[2, 7, \"Куфия\",6],[2, 8, \"Золотая корона\",6],[2, 9, \"Коломойский\",4],[2, 10, \"Mercedes-Benz Vito\",3]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 6);
				SetPVarInt(playerid, "case_id", 290);
			}
			if(item_id == 300){
				if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, 300) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[6, \"Охотничий\", 1, 0, 1,[[0, 0, \"УАЗ Буханка\",3],[0, 1, \"Луаз 969\",3],[0, 2, \"2 EXP\",6],[1, 3, \"Обэма\",6],[1, 4, \"UAZ Patriot\",3],[1, 5, \"Mercedes Benz X\",3],[1, 6, \"Паша Техник\",4],[2, 7, \"Jeep Rubicon\",3]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, 300) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[6, \"Охотничий\", 120, 0, 0,[[0, 0, \"УАЗ Буханка\",3],[0, 1, \"Луаз 969\",3],[0, 2, \"2 EXP\",6],[1, 3, \"Обэма\",6],[1, 4, \"UAZ Patriot\",3],[1, 5, \"Mercedes Benz X\",3],[1, 6, \"Паша Техник\",4],[2, 7, \"Jeep Rubicon\",3]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 7);
				SetPVarInt(playerid, "case_id", 300);
			}
			if(item_id == 328){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[7, \"Египетская сила\", 1, 0, 1,[[0, 0, \"Citroen ami\",3],[0, 1, \"ИЖ - 5\",3],[0, 2, \"Hotline Miami\",6],[1, 3, \"Летний прикид\",4],[1, 4, \"CrossBike\",3],[1, 5, \"Mazda MX5 Miata\",3],[2, 6, \"Японка(!)\",4],[2, 7, \"Lexus LX\",3],[2, 8, \"Маска мумии\",6]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[7, \"Египетская сила\", 120, 0, 0,[[0, 0, \"Citroen ami\",3],[0, 1, \"ИЖ - 5\",3],[0, 2, \"Hotline Miami\",6],[1, 3, \"Летний прикид\",4],[1, 4, \"CrossBike\",3],[1, 5, \"Mazda MX5 Miata\",3],[2, 6, \"Японка(!)\",4],[2, 7, \"Lexus LX\",3],[2, 8, \"Маска мумии\",6]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 8);
				SetPVarInt(playerid, "case_id", 328);
			} 
			if(item_id == 344){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[8, \"Велесова ночь 2\", 1, 0, 1,[[0, 0, \"Маска тыквы\",6],[0, 1, \"Volvo 940\",3],[0, 2, \"BMW M5 E28\",3],[1, 3, \"Subaru Impreza WRX\",3],[1, 4, \"Нео\",4],[1, 5, \"Volkswagen Touareg\",3],[2, 6, \"Mercedes 560 SE\",3],[2, 7, \"Летучая мышь\",6],[2, 8, \"Франкенштейн\",4]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[8, \"Велесова ночь 2\", 120, 0, 0,[[0, 0, \"Маска тыквы\",6],[0, 1, \"Volvo 940\",3],[0, 2, \"BMW M5 E28\",3],[1, 3, \"Subaru Impreza WRX\",3],[1, 4, \"Нео\",4],[1, 5, \"Volkswagen Touareg\",3],[2, 6, \"Mercedes 560 SE\",3],[2, 7, \"Летучая мышь\",6],[2, 8, \"Франкенштейн\",4]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 9);
				SetPVarInt(playerid, "case_id", 344);
			} 
			if(item_id == 348){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[9, \"Рождественский Экспресс\", 1, 0, 1,[[0, 0, \"ВАЗ 2105\",3],[0, 1, \"ВАЗ 2102\",3],[0, 2, \"Новогодняя шапка\",6],[1, 3, \"Chevrolet Suburban\",3],[1, 4, \"Honda Civic TypeR FN2\",3],[1, 5, \"Зимний прикид\",4],[2, 6, \"Mercedes-Benz SL65 AMG\",3],[2, 7, \"Шарф Гуччи\",6],[2, 8, \"Гусь в шапке\",6]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[9, \"Рождественский Экспресс\", 120, 0, 0,[[0, 0, \"ВАЗ 2105\",3],[0, 1, \"ВАЗ 2102\",3],[0, 2, \"Новогодняя шапка\",6],[1, 3, \"Chevrolet Suburban\",3],[1, 4, \"Honda Civic TypeR FN2\",3],[1, 5, \"Зимний прикид\",4],[2, 6, \"Mercedes-Benz SL65 AMG\",3],[2, 7, \"Шарф Гуччи\",6],[2, 8, \"Гусь в шапке\",6]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 10);
				SetPVarInt(playerid, "case_id", 348);
			} 
			if(item_id == 350){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[10, \"Путь воина\", 1, 0, 1,[[0, 0, \"Honda CRX\",3],[0, 1, \"Маска ниндзя\",6],[1, 2, \"Маска Кицуне\",6],[1, 3, \"Маска Анбу\",6],[1, 4, \"Toyota Hachiroku AE86\",3],[2, 5, \"Шляпа Архимага\",6],[2, 6, \"Красный клинок\",6],[2, 7, \"Проклятый дух\",4]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[10, \"Путь воина\", 120, 0, 0,[[0, 0, \"Honda CRX\",3],[0, 1, \"Маска ниндзя\",6],[1, 2, \"Маска Кицуне\",6],[1, 3, \"Маска Анбу\",6],[1, 4, \"Toyota Hachiroku AE86\",3],[2, 5, \"Шляпа Архимага\",6],[2, 6, \"Красный клинок\",6],[2, 7, \"Проклятый дух\",4]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 11);
				SetPVarInt(playerid, "case_id", 350);
			} 
			if(item_id == 355){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[11, \"Пиратский\", 1, 0, 1,[[0, 0, \"LADA 2103\",3],[0, 1, \"Рыжик\",4],[0, 2, \"VW Golf 2\",3],[1, 3, \"BMW 525i E34\",3],[1, 4, \"Летний прикид\",4],[1, 5, \"Mercedes S320 CDI W220\",3],[2, 6, \"Пиратский пояс\",6],[2, 7, \"Mercedes Brabus Iseki 26\",3],[2, 8, \"Пират\",4]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[11, \"Пиратский\", 120, 0, 0,[[0, 0, \"LADA 2103\",3],[0, 1, \"Рыжик\",4],[0, 2, \"VW Golf 2\",3],[1, 3, \"BMW 525i E34\",3],[1, 4, \"Летний прикид\",4],[1, 5, \"Mercedes S320 CDI W220\",3],[2, 6, \"Пиратский пояс\",6],[2, 7, \"Mercedes Brabus Iseki 26\",3],[2, 8, \"Пират\",4]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 12);
				SetPVarInt(playerid, "case_id", 355);
			} 
			if(item_id == 356){
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[12, \"Проклятие\", 1, 0, 1,[[0, 0, \"ZAZ 1102 Таврия\",3],[0, 1, \"Обруч с рожками\",6],[0, 2, \"VW Passat 3B\",3],[1, 3, \"VW Golf R\",3],[1, 4, \"Иван Золо\",4],[1, 5, \"Infinity Q50\",3],[2, 6, \"Мишка с шипами\",6],[2, 7, \"Mercedes G63 6x6\",3],[2, 8, \"Цой\",4]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[12, \"Проклятие\", 120, 0, 0,[[0, 0, \"ZAZ 1102 Таврия\",3],[0, 1, \"Обруч с рожками\",6],[0, 2, \"VW Passat 3B\",3],[1, 3, \"VW Golf R\",3],[1, 4, \"Иван Золо\",4],[1, 5, \"Infinity Q50\",3],[2, 6, \"Мишка с шипами\",6],[2, 7, \"Mercedes G63 6x6\",3],[2, 8, \"Цой\",4]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 13);
				SetPVarInt(playerid, "case_id", 356);
			} 		
			if(item_id == 360) {
				if(GetIteam(playerid,259) >= 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[13, \"Зимняя Сказка\", 1, 0, 1,[[0, 0, \"VIP SILER(3 Дня)\",5],[0, 1, \"Lada 2113\",3],[0, 2, \"АЗЛК 2141\",3],[1, 3, \"Zeekr 001\",3],[1, 4, \"Одежда Андерграунд\",4],[1, 5, \"Nissan 370Z\",3],[2, 6, \"Рюкзак Луи\",6],[2, 7, \"Acura NSX\",3],[2, 8, \"Шматко\",4]]]"), donate_case[playerid] = false;
				else if(GetIteam(playerid,259) < 1) BitStream_2(playerid, s_CefInterface, t_CefShow, "Case", "[13, \"Зимняя Сказка\", 120, 0, 0,[[0, 0, \"VIP SILER(3 Дня)\",5],[0, 1, \"Lada 2113\",3],[0, 2, \"АЗЛК 2141\",3],[1, 3, \"Zeekr 001\",3],[1, 4, \"Одежда Андерграунд\",4],[1, 5, \"Nissan 370Z\",3],[2, 6, \"Рюкзак Луи\",6],[2, 7, \"Acura NSX\",3],[2, 8, \"Шматко\",4]]]"), donate_case[playerid] = true;
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 14);
				SetPVarInt(playerid, "case_id", 360);
			}		
			if(item_id == 44)
			{
				if(GetIteam(playerid, 44) < 1) return SCM(playerid, 0xCECECEFF, "* У вас отсутствует рем. комплект");
				new vehicleid = GetNearestVehicleID(playerid, 6.0);
				if(vehicleid == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_GREY, "Вы должны находится около транспорта");
				new Float:pos[5];
				GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BONNET, pos[0], pos[1], pos[2], pos[3], pos[4]);
				if(!IsPlayerInRangeOfPoint(playerid, 4.0, pos[0], pos[1], pos[2])) return SCM(playerid, 0xCECECEFF, "* Вы должны находится около капота");
				if(GetVehicleParam(vehicleid, V_BONNET) != VEHICLE_PARAM_ON) return SCM(playerid, 0xCECECEFF, "* Капот должен быть открыт");
				g_player_progress_bar_type[playerid] = 1;
				g_player_progress_bar[playerid] = 0;
				BitStream_2(playerid, s_CefInterface, t_CefShow, "ProgressBar", "[[\"Нажимайте Y<br>с небольшим интервалом\", 0, 1000]]");
			}
			if(item_id == 257) callcmd::lottery(playerid);
			if(item_id == 254) callcmd::diagnostics(playerid);
			if(item_id == 1)
			{
				new vehicleid = GetNearestVehicleID(playerid, 2.3);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					SetPVarInt(playerid, "jerrican_fill_car", vehicleid);
					Dialog
					(
						playerid, DIALOG_JERRICAN_FILL_CAR, DIALOG_STYLE_MSGBOX,
						"{6699FF}Канистра",
						"{FFFFFF}Вы хотите заправить этот транспорт с канистры?",
						"Да", "Нет"
					);
				}
			}
			if(item_id == 25)
			{
				if(GetPVarInt(playerid, "DrugsTime") > gettime()) return SendClientMessage(playerid, 0xFF6600FF, "Вы недавно употребляли наркотики.. Подождите немного"),OnInventoryDisplayChange(playerid, false);
				new string[128];
				new Float:health;
				GetPlayerHealth(playerid, health);
				SetPlayerData(playerid, P_HEALTH, health+1*20);
				SetPlayerHealthEx(playerid, health+1*20);
				GetPlayerHealth(playerid, health);
				if(health > 120) return SendClientMessage(playerid, COLOR_GREY, "Вам плохо от наркотиков, пожалуйста подождите"),OnInventoryDisplayChange(playerid, false);
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
				format(string, sizeof(string), "Вы употребили %i гр. наркотиков. Ваше здоровье: %3.1f", 1, health);
				SendClientMessage(playerid, 0xCECECEFF, string);
				GiveIteam(playerid, 25, 0,1,0);
				SetPVarInt(playerid, "DrugsTime", gettime() + 60);
				new fmt_str[124];
				format(fmt_str, sizeof fmt_str, "%s употребил(a) %i грамм наркотиков", GetPlayerNameEx(playerid), 1);
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
				SetPlayerTime(playerid,17,0);
				SetPlayerDrunkLevel(playerid, 3000);
				SetPlayerWeather(playerid, 0);
			}
			if(item_id == 2)
			{
				SCM(playerid, COLOR_BLUE, "Вы использовали аптечку. Здоровье пополнено на 60 единиц");
				GameText(playerid, "~b~+ 60 Здоровья", 1000, 2);
				SetPlayerChatBubble(playerid, "+60 hp", 0x33CC33FF, 5.0, 1000);
				ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 0);
				SetPlayerHealthEx(playerid, 60.0, true);
				GiveIteam(playerid, 2, 0, 1, 0);
			}
		}
		if(typeitem == 1)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0x808080FF, "Вы должны находится возле капота");
			new vehicleid;
			new Float:POS[5];
			new Float:Distance_ = 50.0;
			for(new idx = 0; idx < MAX_VEHICLES; idx++)
			{
				if(GetVehicleData(idx, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(idx, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
					{
						new Float:Distance = D_PlayerVehicle(playerid, idx);
						if(Distance < Distance_)
						{
							Distance_ = Distance;
							vehicleid = idx;
						}
					}
				}
			}
			if(Distance_ == 50.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BONNET, POS[0], POS[1], POS[2], POS[3], POS[4]);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, POS[0], POS[1], POS[2]))
			{
				new fmt_texta[505];
				if(!strcmp(g_ownable_car[index][OC_NUMBER], "------"))
				{
					SCM(playerid, 0x66CC33FF, "Вы успешно повесили номерной знак на ваше транспортное средство");
					SCM(playerid, 0xFFA500FF, "Чтобы снять номера введите - /take_number");
					OnInventoryDisplayChange(playerid, false);
					SetOwnableCarData(index, OC_NUMBERTYPE, typenumber);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					format(g_ownable_car[index][OC_NUMBER], 10, number);
					format(g_ownable_car[index][OC_REGION], 10, region);
					SetVehicleNumber(vehicleid, typenumber, number, region);
					SendPacket_Plate(playerid, vehicleid, typenumber, number, region);
					mysql_format(mysql, fmt_texta, sizeof fmt_texta, "UPDATE ownable_cars SET number='%s', region='%s', typenumber='%d' WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_REGION), typenumber, GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_texta, false);
					mysql_format(mysql, fmt_texta, sizeof fmt_texta, "DELETE FROM items WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_SQL_ID));
					mysql_query(mysql, fmt_texta, false);
					DeleteItems(i);
				}
				else return SCM(playerid, -1, "На этом т/с уже есть номера. Снять номер: /take_number");
			}
			else return SCM(playerid, -1, "Вы должны быть возле капота");
		}
		if(typeitem == 2)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Функция недоступна находясь в транспорте");
			if(status == 1)
			{
				if(event != 0) return SCM(playerid, COLOR_ORANGE, "Сначала поместите аксессуар в один из слотов для аксессуаров");
				if(type == 222 && GetPlayerItemsBag(playerid) >= 1) return SCM(playerid, COLOR_RED, "Сначала заберите все вещи с рюкзака."), OnInventoryDisplayChange(playerid, false);
				RemovePlayerAttachedObject(playerid, boneid);
				SCM(playerid, 0xFAAC58FF, "{FFA500}Вы успешно сняли данный аксессуар");
				new query[512];
				format(query, sizeof query, "UPDATE items SET status=0 WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				SetPlayerItem(i, PI_STATUS, 0);
			}
			if(status == 0)
			{
				if(type != 285)
				{
					if(event != 0) return SCM(playerid, COLOR_ORANGE, "Сначала поместите аксессуар в один из слотов для аксессуаров");
					SCM(playerid, 0xFAAC58FF, "{FFA500}Вы успешно надели данный аксессуар, чтобы исправить расположение используйте редактор");
					SCM(playerid, 0xFAAC58FF, "{FFA500}Напоминание, чтобы переместить камеру зажмите пробел");
					SetPVarInt(playerid, "EditObjectAcs", 0);
					SetPVarInt(playerid, "EditObjectAcsInv", 1);
					SetPVarInt(playerid, "EditObjectAcsIndex", type);
					if(type == 181 && boneid == 7) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.145, 0.041, 0.004999, -2 ,90.1 ,93.2);//очки 
					else if(type == 182 && boneid == 1) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.061999 ,-0.006999 ,0.004999 ,0 ,93.0999 ,-177.1);//бандана
					else if(type == 183 && boneid == 1) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.061999 ,-0.006999 ,0.004999 ,0 ,93.0999 ,-177.1);//маска
					else if(type == 184 && boneid == 3) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.202 ,0 ,-0.003 ,0 ,0 ,0);//берет
					else if(type == 185 && boneid == 3) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.202 ,0 ,-0.003 ,0 ,0 ,0);//шляпа
					else if(type == 219 && boneid == 2) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.171 , 0.055999, 0.015, -158.3, 90, -23.9002);//Сумка
					else if(type == 220 && boneid == 8) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, -0.124999 ,0.086 ,0.001 ,-2.8 ,83.6001, 177.9);//Ремень
					else if(type == 221 && boneid == 4) SetPlayerAttachedObject(playerid, boneid, aks_id, 6, -0.03, -0.018, -0.011, 66.6, 63.3999, 110.5);//украшение на руку
					else if(type == 222 && boneid == 0) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.143999, -0.097999, -0.016, 0, 81.1, -177.5);//Рюкзак
					else if(type == 246 && boneid == 5) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.313, 0.046, 0, 6.2, 85.9001, 170.9);//Украшение на шею
					else if(type == 263 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.316, 0.042, 0.009, 18.9, 87.7001, 74.1);//Плащ
					else if(type == 277 && boneid == 9) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.148999, 0.005, -0.019999, 0, 90.1999, 99.5999);//бронижелет
					else if(type == 289 && boneid == 4) SetPlayerAttachedObject(playerid, boneid, aks_id, 6, 0.072 ,0.016999 ,0.092 ,0 ,0 ,0);//Посох
					else if(type == 287 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.164, -0.070999, -0.023, 1.6, 86.1, 86.9002);//Крылья
					else if(type == 324 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.129, -0.124999, 0, 0, 110.8, 95.8);//скейтборд
					else if(type == 275 && boneid == 5) SetPlayerAttachedObject(playerid, boneid, aks_id, 3);//украшение на левое плечо
					else if(type == 291 && boneid == 9) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.087999, -0.111999, -0.026, -0.000002, 132.2, -86.6);//аксессуар на спину	
					else SCM(playerid, 0xFFA500FF, "Данный аксессуар недоступен!");
					EditAttachedObject(playerid, boneid);
					SetPVarInt(playerid, "EditObjectAcsType", event);
					SetPVarInt(playerid, "EditObjectAcsSlots", slot);
				}
				else
				{
					new vehicleid = GetNearestVehicleID(playerid, 6.0);
					if(GetPlayerOwnableCarLast(playerid) == vehicleid)
					{
						SCM(playerid, 0x2C83DBFF, "Вы начали установку украшения \"Украшение для транспорта\" на свой ТС");
						new Float:tx,Float:ty,Float:tz,Float:tr;
						GetVehiclePos(vehicleid,tx,ty,tz);
						GetVehicleZAngle(vehicleid, tr);
						SetPVarInt(playerid, "EditCarAcs", 1);
						SetPVarInt(playerid, "model_id", aks_id);
						SetPVarInt(playerid, "AcsindxCar", boneid);
						SetPVarInt(playerid, "AcsVehicleCar", vehicleid);
						SetPVarInt(playerid, "event", event);
						SetPVarInt(playerid, "slot", slot);
						car_accessories[vehicleid][boneid] = CreateDynamicObject(aks_id, tx, ty, tz, 0.00000, 0.00000, tr);
						EditDynamicObject(playerid, car_accessories[vehicleid][boneid]);
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около личного транспорта");
				}
			}
		}
		if(typeitem == 3)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1699.7112,-2197.9077,1001.0000))
			{
				if(GetPlayerData(playerid, P_SKIN) == skin_id)
				{
					if(GetPVarInt(playerid, "skin_wosh")) 
						return SendClientMessage(playerid, 0xCECECEFF, "Ваша одежда уже в стирке");
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 12500000)) 
						return SendClientMessage(playerid, 0xCECECEFF, "У вас нет 12.500.000 рублей чтобы заплатить за услуги прачечной");	
					Dialog(playerid, DIALOG_WOSH_SKIN, DIALOG_STYLE_MSGBOX, "{FFFFFF}Прачечная", "{FFFFFF}Хотите постирать надетую одежду за {FF7F00}12.500.000 {FFFFFF}рублей?\nПосле стирки её износ будет равен {FF7F00}3 ед.", "Далее", "Отмена");
					SetPVarInt(playerid, "skin_wosh", i);	
				}
				else return SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть одеты в эту одежду");
			}
			else
			{
				SetPlayerItem(i, PI_SKIN_IZNOS, skin_iznos + 2);
				new query[94];
				format(query, sizeof query, "UPDATE items SET skin_iznos=%d WHERE id=%d", GetPlayerItem(i, PI_SKIN_IZNOS), GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				SetPlayerSkin(playerid, skin_id);
				Action(playerid, "переоделся", _, false);
				SCM(playerid, 0xCECECEFF, "Вы переодели одежду");
				SetPlayerData(playerid, P_SKIN, skin_id);
				UpdatePlayerDatabaseInt(playerid, "skin", skin_id);
			}
		}
		OnInventoryDisplayChange(playerid, false);	
		return 1;
	}
	return 1;
}

public:OnInventoryItemDrop(playerid, event, slot, count)
{	
	if(GetPlayerAdminEx(playerid) > 0) if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerLevel(playerid) < 3) return GameText(playerid, "выброс доступен с 3 уровня", 3000, 0);
	if(count < 1) return 1;
	for(new i; i < MAX_ITEMS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
		{
			SCM(playerid, -1, "*Рядом уже выброшен предмет, отойдите в другое место чтобы выбросить.");
			return 1;
		}
	}
	new query[345],
		number[32], 
		region[32];
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;
		format(number, sizeof number, "%s", GetPlayerItem(i, PI_NUMBER));
		format(region, sizeof region, "%s", GetPlayerItem(i, PI_REGION));
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new item = GetPlayerItem(i, PI_ITEM);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new status = GetPlayerItem(i, PI_STATUS);
		new indx = GetPlayerItem(i, PI_INDX);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new count_item = GetPlayerItem(i, PI_COUNT);
		new patron = GetPlayerItem(i, PI_PATRON);
		new weapon = GetPlayerItem(i, PI_WEAPON);
		if(item == 293) return GameText(playerid, "Вы не сможете это сделать: данный предмет является временным", 3000, 0);
		if(typeitem == 0 && count_item < count) return 1;
		else if(typeitem == 4 && patron < count) return 1;
		else if(typeitem != 4 && typeitem != 0 && 1 < count) return 1;
		if(typeitem == 0 && item == 0) if(count > 10000000) return SCM(playerid, COLOR_GREY, "*Максимально разрешено 10 000 000 руб. за раз");
		new idobject = -1;
		for(new idx; idx < MAX_ITEMS; idx++)
		{
			if(items_objs[idx] == -1)
			{
				idobject = idx;
				break;
			}
		}
		if(idobject == -1)
		{
			for(new idx; idx < MAX_ITEMS; idx++)
			{
				idobject = idx;
			}
		}
		new Float: x, Float: y, Float: z, Float: eagle;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, eagle);
		itempos[idobject][0] = x;
		itempos[idobject][1] = y;
		itempos[idobject][2] = z;
		type_item[idobject] = typeitem;
		Action(playerid, "выбросил(а) предмет");
		ItemDropSphere[idobject] = CreateDynamicSphere(itempos[idobject][0], itempos[idobject][1], itempos[idobject][2],2.0,-1,-1);
		STRING_GLOBAL[0] = EOS;
		if(typeitem == 0)
		{
			items_objs[idobject] = CreateObject(2969, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{1F75FE}%s", ItemsInfo[item]);
			number_labels[idobject] = CreateDynamic3DTextLabel(STRING_GLOBAL, COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);
			item1[idobject] = item;
			item2[idobject] = count;
		}
		if(typeitem == 1)
		{
			items_objs[idobject] = CreateObject(2969, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			number_labels[idobject] = CreateDynamic3DTextLabel("{1F75FE}Автомобильный номер", COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);
			item1[idobject] = typenumber;
			format(number_item[idobject], 10, number);
			format(region_item[idobject], 5, region);
		}
		if(typeitem == 2)
		{
			if(status == 1) return SCM(playerid, COLOR_RED, "Сначала снимите данный аксессуар."), OnInventoryDisplayChange(playerid, false);
			items_objs[idobject] = CreateObject(aks_id, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{1F75FE}%s", ItemsInfo[typeacs]);
			number_labels[idobject] = CreateDynamic3DTextLabel(STRING_GLOBAL, COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);
			item1[idobject] = aks_id;
			item2[idobject] = indx;
			item3[idobject] = typeacs;
		}
		if(typeitem == 3)
		{
			if(skin_id == GetPlayerData(playerid, P_SKIN))
			{
				SetPlayerSkin(playerid, 252);
				SetPlayerData(playerid, P_SKIN, 252);
				UpdatePlayerDatabaseInt(playerid, "skin", 252);
			}
			items_objs[idobject] = CreateObject(16506, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			number_labels[idobject] = CreateDynamic3DTextLabel("{1F75FE}Одежда", COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);
			item1[idobject] = skin_id;
		}
		if(typeitem == 4)
		{
			new object = 325 + weapon;
			items_objs[idobject] = CreateObject(object, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 90.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			number_labels[idobject] = CreateDynamic3DTextLabel("{1F75FE}Оружие", COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);
			item1[idobject] = weapon;
			item2[idobject] = count;
		}
		if(typeitem == 4)
		{
			if(count == patron)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				DeleteItems(i);
			}
			else if(count < patron)
			{
				format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d", count_item - count, GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				SetPlayerItem(i, PI_PATRON, patron - count);
			}
			ResetWeapons(playerid);
		}
		else if(typeitem != 0)
		{
			mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);
			DeleteItems(i);
		}
		else if(typeitem == 0 && item != 0)
		{
			if(count == count_item)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				DeleteItems(i);
				AddItemsLog(playerid, item, 0, -count, "Выбросил предмет [Инвентарь]");
			}
			else if(count < count_item)
			{
				format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d", count_item - count, GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				SetPlayerItem(i, PI_COUNT, count_item - count);
				AddItemsLog(playerid, item, 0, -count, "Выбросил предмет [Инвентарь]");
			}
		}
		else if(typeitem == 0 && item == 0) GivePlayerMoneyEx(playerid, -count, "Выбросил деньги");
		LoadInventory(playerid);
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('InventoryNew').setItems([%s])", load_inventory[playerid]);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		return 1;
	}
	return 1;
}

stock OnPlayerTakeIteam(playerid)
{
	for(new i; i < MAX_ITEMS; i++)
	{
	    if(items_objs[i] != -1)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
			{
				if(type_item[i] == 0 && item1[i] != 0) DLGF(playerid, DIALOG_TAKE_ITEM, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}%s{FFFFFF}' в количестве {"#cGold"}%d ?", "Да", "Отмена", ItemsInfo[item1[i]], item2[i]);
				if(type_item[i] == 0 && item1[i] == 0) DLGF(playerid, DIALOG_TAKE_MONEY, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}Деньги{FFFFFF}' в количестве {"#cGold"}%d ?", "Да", "Отмена", item2[i]);
				if(type_item[i] == 1) Dialog(playerid, DIALOG_TAKE_ITEM_NUMBER, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}Автомобильный номер{FFFFFF}' в количестве {"#cGold"}1 ?", "Да", "Отмена");
				if(type_item[i] == 2) DLGF(playerid, DIALOG_TAKE_ITEM_ACS, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}%s{FFFFFF}' в количестве {"#cGold"}1 ?", "Да", "Отмена", ItemsInfo[item3[i]]);
				if(type_item[i] == 3) Dialog(playerid, DIALOG_TAKE_ITEM_SKIN, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}Одежда{FFFFFF}' в количестве {"#cGold"}1 ?", "Да", "Отмена");
				if(type_item[i] == 4) DLGF(playerid, DIALOG_TAKE_ITEM_GUN, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}Оружие{FFFFFF}' в количестве {"#cGold"}%d ?", "Да", "Отмена", item2[i]);
			}
		}
	}
	return 1;
}

public:OnInventoryItemSell(playerid, type, slot)
{
	if(GetPlayerAdminEx(playerid) > 0) if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != type) continue;
		new typeitemmm = GetPlayerItem(i, PI_TYPE_ITEM);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new count = GetPlayerItem(i, PI_COUNT);
		new indx = GetPlayerItem(i, PI_INDX);
		new status = GetPlayerItem(i, PI_STATUS);
		if(item_id == 293) return GameText(playerid, "Вы не сможете это сделать: данный предмет является временным", 3000, 0);
		SetPVarInt(playerid, "SellItemSlot", slot);
		SetPVarInt(playerid, "SellItemType", type);
		SetPVarInt(playerid, "SellItem", item_id);
		if(kiosk_id != -1)
		{
			if(typeitemmm == 0 && indx != 0) return SCM(playerid, COLOR_GREY, "Данный предмет невозможно продать.");
			OnInventoryDisplayChange(playerid, false);
			if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 0) if(GetImprovementsStall(playerid) >= 10) return SCM(playerid, 0xADCEEAFF, "Места в этом киоске полностью заняты. (10/10)");
			if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 1) if(GetImprovementsStall(playerid) >= 20) return SCM(playerid, 0xADCEEAFF, "Места в этом киоске полностью заняты. (20/20)");
			if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 2) if(GetImprovementsStall(playerid) >= 30) return SCM(playerid, 0xADCEEAFF, "Места в этом киоске полностью заняты. (30/30)");
			if(typeitemmm == 2)
			{
				if(status == 1) return SCM(playerid, COLOR_RED, "Сначала снимите данный аксессуар"), OnInventoryDisplayChange(playerid, false);
				DLGF(playerid, DIALOG_SELL_ACS_KIOSK, DIALOG_STYLE_INPUT, "Продажа аксессуара", "{FFFFFF}Вы пытаетесь продать {006400}'Аксессуар'{FFFFFF}.\n{FFFFFF}Введите цену за {006400}1 {FFFFFF}шт.\nЦена не должна быть меньше {006400}%d {FFFFFF}руб.", "Далее", "Назад", GetKioskData(kiosk_id, K_MIN_PRICE));
			}
			if(typeitemmm == 0 && item_id != 0)
				DLGF(playerid, DIALOG_SELL_ITEM_KIOSK, DIALOG_STYLE_INPUT, "Продажа предмета", "{FFFFFF}Вы пытаетесь продать {006400}'Предмет'{FFFFFF}.\nУ вас есть: {006400}%d {FFFFFF}шт.\nСколько вы хотите выставить на продажу?", "Далее", "Назад", GetIteam(playerid, item_id));
			if(typeitemmm == 1)
				DLGF(playerid, DIALOG_SELL_NUMBER_KIOSK, DIALOG_STYLE_INPUT, "Продажа автомобильного номера", "{FFFFFF}Вы пытаетесь продать {006400}'Автомобильный номер'{FFFFFF}.\n{FFFFFF}Введите цену за {006400}1 {FFFFFF}шт.\nЦена не должна быть меньше {006400}%d {FFFFFF}руб.", "Далее", "Назад", GetKioskData(kiosk_id, K_MIN_PRICE));			
			if(typeitemmm == 3)
				DLGF(playerid, DIALOG_SELL_SKIN_KIOSK, DIALOG_STYLE_INPUT, "Продажа одежды", "{FFFFFF}Вы пытаетесь продать {006400}'Одежда'{FFFFFF}.\n{FFFFFF}Введите цену за {006400}1 {FFFFFF}шт.\nЦена не должна быть меньше {006400}%d {FFFFFF}руб.", "Далее", "Назад", GetKioskData(kiosk_id, K_MIN_PRICE));
			if(typeitemmm == 4) return SCM(playerid, COLOR_GREY, "Нельзя выставить оружие на продажу.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2349.9390,-2138.3171,22.5854))
		{
			if(typeitemmm == 0 && indx != 0) return SCM(playerid, COLOR_GREY, "Данный предмет невозможно продать.");
			SetPlayerData(playerid, P_DOSTIJ23, GetPlayerData(playerid, P_DOSTIJ23) + ItemsInfo[item_id][i_item_price]);
			UpdatePlayerDatabaseInt(playerid, "dostij23", GetPlayerData(playerid, P_DOSTIJ23) + ItemsInfo[item_id][i_item_price]);
			SCMF(playerid, 0xCECECEFF, "Вы продали предмет: '%s' в антиквариатной лавке за %d руб.", ItemsInfo[item_id][i_item_name], ItemsInfo[item_id][i_item_price]);
			GiveIteam(playerid, item_id, 0, 1, 0);
			GivePlayerMoneyEx(playerid, ItemsInfo[item_id][i_item_price], "[ItemSell] Продажа в антиквариатной лавке");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, 3771.1826,3877.6079,7.9300))
		{
			if(count > 5000)
				return SCM(playerid, COLOR_GREY, "Макимум за раз можно продать 5000 ед.");
			if(item_id == 337)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "300000", count));
				GiveIteam(playerid, 337, 0, count, indx);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа урожая");
				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"%s\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", Itemindx[indx], count, formatStr(fmt_text));
			}
			else if(item_id == 171)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "300000", count));
				GiveIteam(playerid, 171, 0, count, 0);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа урожая");
				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Помидоры\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
			}
			else if(item_id == 170)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "300000", count));
				GiveIteam(playerid, 170, 0, count, 0);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа урожая");
				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Огурцы\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
			}
			else if(item_id == 169)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "300000", count));
				GiveIteam(playerid, 169, 0, count, 0);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа урожая");
				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Марихуанна\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
			}
			else if(item_id == 295)
			{
				GiveIteam(playerid, 295, 0, count, indx);
				if(indx == 0)
				{
					new fmt_text[32];
					format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "10000000", count));
					GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа шкуры");
					SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Шкура оленя (Плохая)\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
				}
				else if(indx == 1)
				{
					new fmt_text[32];
					format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "15000000", count));
					GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа шкуры");
					SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Шкура оленя (Нормальная)\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
				}
				else if(indx == 2)
				{
					new fmt_text[32];
					format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "20000000", count));
					GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа шкуры");
					SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Шкура оленя (Шикарная)\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2242.0110,224.8079,24.7780))
		{
			if(count > 5000)
				return SCM(playerid, COLOR_GREY, "Макимум за раз можно продать 5000 ед.");
			if(item_id == 133)
			{
				GiveIteam(playerid, 133, 0, count, indx);
				new fmt_text[32];
				if(indx == 0) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "180000", count));				
				else if(indx == 1) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "190000", count));				
				else if(indx == 2) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "130000", count));				
				else if(indx == 3) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "140000", count));
				else if(indx == 4) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "150000", count));
				else if(indx == 5) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "120000", count));				
				else if(indx == 6) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "170000", count));			
				else if(indx == 7) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "120000", count));
				else if(indx == 8) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "130000", count));
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа рыбы");
				SCMF(playerid, 0xeb961fFF, "Вы продали \"%s\" весом {FFFFFF}%.2f {eb961f}за {FFFFFF}%s {eb961f}руб.", indxFishType[indx], floatmul(1.5, count), formatStr(fmt_text));
			}
		}
		else
		{
			SCM(playerid, 0xAFAFAFFF, "Вы не находитесь возле места для продажи.");
			SCM(playerid, 0xAFAFAFFF, "Могут подойти: киоски, антиквариатные лавки, прием металлолома/улова/урожая.");
			SCM(playerid, 0xAFAFAFFF, "Вы можете продать этот предмет на антиквариатной лавке около банка г. Южный.");
		}
		OnInventoryDisplayChange(playerid, false);
		return 1;
	}
	return 1;
}

public: OnInventoryItemTake(playerid, event, slot, count)
{
	if(GetPlayerAdminEx(playerid) > 0) if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new count_inv = GetPlayerItem(i, PI_COUNT);
		new item = GetPlayerItem(i, PI_ITEM);
		new id = GetPlayerItem(i, PI_SQL_ID);
		if(typeitem != 0 && typeitem != 4)
		{
			if(count > 1) return 1;
			new query[148];
			if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=1, owner_id=%d, sklad=-1 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), GetPlayerAccountID(playerid), id);
			else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=1, owner_id=%d, shelf=-1 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), GetPlayerAccountID(playerid), id);
			else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=1, owner_id=%d, car_id=0 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), GetPlayerAccountID(playerid), id);
			else format(query, sizeof query, "UPDATE items SET slots=%d, type=1 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), id); 
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_SLOTS, GetInventorySlots(playerid));
			SetPlayerItem(i, PI_TYPE, 1);
			SetPlayerItem(i, PI_OWNER_ID, GetPlayerAccountID(playerid));
		}
		else
		{
			if(typeitem == 0)
			{
				if(count > count_inv) return GameText(playerid, "У вас нет данного предмета в таком количестве", 3000, 0);
				if (count < 0 || count > count_inv) 
				{
					return GameText(playerid, "Введите корректное количество предметов", 3000, 0);
				}
				if(count == count_inv) 
				{
					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
					else format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id); 
					mysql_query(mysql, query, false);
					DeleteItems(i);
				}
				else 
				{
					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d AND sklad=%d LIMIT 1", count_inv - count, id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d AND shelf=%d LIMIT 1", count_inv - count, id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count_inv - count, id);
					else format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count_inv - count, id); 
					mysql_query(mysql, query, false);
					SetPlayerItem(i, PI_COUNT, count_inv - count);
				}
				new win;
				new query[148];
				for(new idx; idx < MAX_PLAYER_ITEMS; idx++)
				{
					if(GetPlayerItem(idx, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(idx, PI_ITEM) != item) continue;
					if(GetPlayerItem(idx, PI_TYPE_ITEM) != typeitem) continue;
					if(idx == i) continue;
					SetPlayerItem(idx, PI_COUNT, GetPlayerItem(idx, PI_COUNT) + count);
					format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(idx, PI_COUNT), id); 
					mysql_query(mysql, query, false);
					win = 1;
					break;
				}
				if(win == 0) CreateIteam(playerid, item, count);
			}
		}
		break;
	}
	LoadInventory(playerid);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('InventoryNew').setItems([%s])", load_inventory[playerid]);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	return 1;
}

public: OnInventoryItemGive(playerid, event, type, count)
{
	return true;
}

stock GiveWeapon(playerid, weapon_id, patron, status = 1)
{
	UpdateWeapons(playerid);
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 4) continue;
		if(GetPlayerItem(i, PI_WEAPON) != weapon_id) continue;
		new count = GetPlayerItem(i, PI_PATRON);
		new id = GetPlayerItem(i, PI_SQL_ID);
		if(status == 0)
		{
			if(count - patron != 0)
			{
				new query[148];
				format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", count - patron, id);
				mysql_query(mysql, query, false);
				SetPlayerItem(i, PI_PATRON, count - patron);
				ResetWeapons(playerid);
				return 1;
			}
			else
			{
				new query[148];
				format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
				mysql_query(mysql, query, false);
				DeleteItems(i);
				ResetWeapons(playerid);
				return 1;
			}
		}
		else if(status == 1)
		{
			new query[264];
			format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", count + patron, id);
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_PATRON, count + patron);
			ResetWeapons(playerid);
			return 1;
		}
	}
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
	CreateItemsGun(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), -1, -1, 0, 4, weapon_id, patron);
	ResetWeapons(playerid);
	return true;
}

stock ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 4) continue;
		new weapon = GetPlayerItem(i, PI_WEAPON);
		new patron = GetPlayerItem(i, PI_PATRON);
		GivePlayerWeapon(playerid, weapon, patron);
	}
	return true;
}

stock UpdateWeapons(playerid)
{
	new save_id[13];
	new status;
	for(new idx; idx < 13; idx++)
	{
		new weapon, patron;
		GetPlayerWeaponData(playerid, idx, weapon, patron);
		if(weapon != 0 && patron != 0)
		{
			for(new i; i < MAX_PLAYER_ITEMS; i++)
			{
				if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
				if(GetPlayerItem(i, PI_TYPE) != 1) continue;
				if(GetPlayerItem(i, PI_TYPE_ITEM) != 4) continue;
				if(GetPlayerItem(i, PI_WEAPON) != weapon) continue;
				SetPlayerItem(i, PI_PATRON, patron);
				new query[124];
				format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", patron, GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				save_id[idx] = i;
			}
		}
	}
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 4) continue;
		status = 0;
		for(new idx; idx < 13; idx++)
		{
			if(save_id[idx] == i) status = 1;
		}
		if(status == 0)
		{
			new query[148];
			format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);
			DeleteItems(i);
		}
	}
	return true;
}

stock GetInventorySlots(playerid)
{
	new slot_id = -1;
	for(new i = 1; i < 20; i++)
	{
		if(SelectInventorySlots(playerid, i) != 0) continue;
		slot_id = i;
		return slot_id;
	}
	return slot_id;
}

stock SelectInventorySlots(playerid, slot_id)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot_id) continue;
		count = -1;
		return count;
	}
	return count;
}

stock GetPlayerItemsBag(playerid)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 2) continue;

		count = 1;
		return count;
	}
	return count;
}

stock GetWorkLoadItems(playerid, status)
{
	new weight;
	if(status == 0) // инвентарь
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
			if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
			if(GetPlayerItem(i, PI_TYPE) != 1) continue;
			weight++;
		}
	}
	if(status == 1) // рюкзак
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
			if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
			if(GetPlayerItem(i, PI_TYPE) != 2) continue;
			weight++;
		}
	}
	return weight;
}

stock AddItemsLog(playerid, item_id, typeitem, count, text[])
{
	new fmt_text[94];
	if(typeitem == 0) format(fmt_text, sizeof fmt_text, "%s [№%d] (кол-во: %s | остаток: %s)", ItemsInfo[item_id], item_id, formatInt(count), formatInt(GetIteam(playerid, item_id)));
	InsertMysqlItemsLog(playerid, fmt_text, text);
	return true;
}

stock InsertMysqlItemsLog(playerid, items_text[], text[])
{
	new query[348];
	mysql_format(mysql, query, sizeof query, "INSERT INTO items_log (owner_id, items_text, text, time) VALUES (%d, '%s', '%s', NOW())", GetPlayerAccountID(playerid), items_text, text);
	mysql_tquery(mysql, query, "", "");
	return true;
}

new skateboard[MAX_PLAYERS];
stock I_OnPlayerFetchSkateboard(playerid, event)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;
		if(GetPlayerItem(i, PI_TYPEACS) != 324) continue;
		new status = GetPlayerItem(i, PI_STATUS);
		new boneid = GetPlayerItem(i, PI_INDX);
		if(status == 0) return GameText(playerid, "Аксессуар должен быть одет на вас", 3000, 0);
		if(status == 1)
		{
			new Float: x,
			Float: y,
			Float: z,
			Float: a;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);
			skateboard[playerid] = CreateVehicle(15644, x, y, z, a, 0, 0, -1, 0, VEHICLE_ACTION_TYPE_SKATEBOARD, 0);
			PutPlayerInVehicle(playerid, skateboard[playerid], 0);
			SetPlayerItem(i, PI_STATUS, 2);
			RemovePlayerAttachedObject(playerid, boneid);
		}
		else if(status == 2)
		{
			SetPlayerItem(i, PI_STATUS, 1);
			if(skateboard[playerid] != INVALID_VEHICLE_ID)
			{
				DestroyVehicle(skateboard[playerid]);
				skateboard[playerid] = INVALID_VEHICLE_ID;
			}
			callcmd::return_acsses(playerid);
		}
		return true;
	}
	return true;
}

stock CreateItemsAcs(owner_id, return_items, type, slots, aks_id, typeacs, status, indx, shelf, sklad, car_id, typeitem)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;
	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, aks_id, typeacs, status, indx, shelf, sklad, car_id, type_item) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, aks_id, typeacs, status, indx, shelf, sklad, car_id, typeitem
	);
	result = mysql_query(mysql, query);
	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());
	cache_delete(result);
	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	SetPlayerItem(i, PI_AKS_ID, 		aks_id);
	SetPlayerItem(i, PI_TYPEACS, 		typeacs);
	SetPlayerItem(i, PI_STATUS, 		status);
	SetPlayerItem(i, PI_INDX, 			indx);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);
	return true;
}

stock CreateItemsItem(owner_id, return_items, type, slots, item, count, indx, shelf, sklad, car_id, typeitem)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;
	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, item, count, indx, shelf, sklad, car_id, type_item) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, item, count, indx, shelf, sklad, car_id, typeitem
	);
	result = mysql_query(mysql, query);
	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());
	cache_delete(result);
	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	SetPlayerItem(i, PI_ITEM, 			item);
	SetPlayerItem(i, PI_COUNT, 			count);
	SetPlayerItem(i, PI_INDX, 			indx);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);
	return true;
}
stock CreateItemsCarNumber(owner_id, return_items, type, slots, number[], region[], typenumber, shelf, sklad, car_id, typeitem)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;
	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, number, region, typenumber, shelf, sklad, car_id, type_item) VALUES (%d, %d, %d, %d, '%s', '%s', %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, number, region, typenumber, shelf, sklad, car_id, typeitem
	);
	result = mysql_query(mysql, query);
	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());
	cache_delete(result);
	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	format(g_player_item[i][PI_NUMBER], 32, "%s", number);
	format(g_player_item[i][PI_REGION], 32, "%s", region);
	SetPlayerItem(i, PI_TYPENUMBER, 	typenumber);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);
	return true;
}

stock CreateItemsSkin(owner_id, return_items, type, slots, skin_id, skin_iznos, shelf, sklad, car_id, typeitem)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;
	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, skin_id, skin_iznos, shelf, sklad, car_id, type_item) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, skin_id, skin_iznos, shelf, sklad, car_id, typeitem
	);
	result = mysql_query(mysql, query);
	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());
	cache_delete(result);
	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	SetPlayerItem(i, PI_SKIN_ID, 		skin_id);
	SetPlayerItem(i, PI_SKIN_IZNOS, 	skin_iznos);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);
	return true;
}

stock CreateItemsGun(owner_id, return_items, type, slots, shelf, sklad, car_id, typeitem, weapon, patron)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;
	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, shelf, sklad, car_id, type_item, weapon, patron) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, shelf, sklad, car_id, typeitem, weapon, patron
	);
	result = mysql_query(mysql, query);
	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());
	cache_delete(result);
	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);
	SetPlayerItem(i, PI_WEAPON, 		weapon);
	SetPlayerItem(i, PI_PATRON, 		patron);
	return true;
}

stock DestroyItemsMysql(items_id)
{
	new query[148];
	format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1",GetPlayerItem(items_id, PI_SQL_ID));
	mysql_query(mysql, query, false);
	DeleteItems(items_id);
	return true;
}

#define MAX_COUNT_TRADE 12
enum E_PLAYER_TRADE_STRUCT
{
	PT_ITEM_ID[MAX_COUNT_TRADE],
	PT_STATUS[MAX_COUNT_TRADE],
	PT_COUNT[MAX_COUNT_TRADE],
}
new g_player_trade[MAX_PLAYERS][E_PLAYER_TRADE_STRUCT];
new g_player_trade_offer_id[MAX_PLAYERS];
new g_player_trade_status[MAX_PLAYERS];
new g_player_trade_owner[MAX_PLAYERS];
new g_player_trade_price[MAX_PLAYERS];
stock DestroyitemsTrade(playerid)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) 
			continue;

		if(GetPlayerItem(i, PI_TYPE) != 1) 
			continue;

		SetPlayerItem(i, PI_TRADE_TYPE, 0);
		SetPlayerItem(i, PI_TRADE_COUNT, 0);
		SetPlayerItem(i, PI_TRADE_SLOT, -1);
	}
	for(new idx; idx < MAX_COUNT_TRADE; idx++)
	{
		g_player_trade[playerid][PT_ITEM_ID][idx] = 0;
		g_player_trade[playerid][PT_STATUS][idx] = 0;
		g_player_trade[playerid][PT_COUNT][idx] = 0;
	}
	return true;
}

stock Trade_StartTradeItem(playerid)
{
	new to_player = g_player_trade_offer_id[playerid];
	if(g_player_trade_price[playerid] > 0)
	{
		GivePlayerMoneyEx(to_player, g_player_trade_price[playerid], "Получил доплату с обмена предметами");
		GivePlayerMoneyEx(playerid, -g_player_trade_price[playerid], "Оплатил доплату с обмена предметами");
	}
	for(new idx; idx < MAX_COUNT_TRADE; idx++)
	{
		if(g_player_trade[playerid][PT_STATUS][idx] == 0) continue;
		new i = g_player_trade[playerid][PT_ITEM_ID][idx];
		if(GetPlayerItem(i, PI_TYPE_ITEM) == 0)
		{
			if(g_player_trade[playerid][PT_COUNT][idx] == GetPlayerItem(i, PI_COUNT))
			{
				new query[148];
				format(query, sizeof query, "UPDATE items SET slots=%d, owner_id=%d WHERE id=%d LIMIT 1", GetInventorySlots(to_player), GetPlayerAccountID(to_player), GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				SetPlayerItem(i, PI_SLOTS, 		GetInventorySlots(to_player));
				SetPlayerItem(i, PI_OWNER_ID, 	GetPlayerAccountID(to_player));
			}
			else if(g_player_trade[playerid][PT_COUNT][idx] != GetPlayerItem(i, PI_COUNT))
			{
				new query[148];
				format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT) - g_player_trade[playerid][PT_COUNT][idx], GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);
				SetPlayerItem(i, PI_COUNT, 		GetPlayerItem(i, PI_COUNT) - g_player_trade[playerid][PT_COUNT][idx]);
				GiveIteam(to_player, GetPlayerItem(i, PI_ITEM), 1, g_player_trade[playerid][PT_COUNT][idx], GetPlayerItem(i, PI_INDX), "[Trade] Предмет полученый с обмена");
			}
		}
		if(GetPlayerItem(i, PI_TYPE_ITEM) == 1 || GetPlayerItem(i, PI_TYPE_ITEM) == 2 || GetPlayerItem(i, PI_TYPE_ITEM) == 3)
		{
			new query[148];
			format(query, sizeof query, "UPDATE items SET slots=%d, owner_id=%d WHERE id=%d LIMIT 1", GetInventorySlots(to_player), GetPlayerAccountID(to_player), GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_SLOTS, 		GetInventorySlots(to_player));
			SetPlayerItem(i, PI_OWNER_ID, 	GetPlayerAccountID(to_player));
		}
	}
	GameText(playerid, "Обмен успешно завершен", 3000, 0);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "TradeItems");
	g_player_trade_status[playerid] = 0;
	g_player_trade_owner[playerid] = 0;
	g_player_trade_price[playerid] = 0;
	g_player_trade_offer_id[playerid] = 0;
	status_authorization[playerid] = 1;
	DestroyitemsTrade(playerid);
	return true;
}

public: OnTradeItemsStart(playerid, event)
{
	new to_player = g_player_trade_offer_id[playerid];
	if(g_player_trade_owner[playerid] != 1)
		return GameText(playerid, "Совершить обмен может~n~только тот кто предложил", 3000, 0);
	if(g_player_trade_status[playerid] != 2 || g_player_trade_status[to_player] != 2)
		return GameText(playerid, "Кто то из вас~n~не готов к обмену", 3000, 0);
	if(event < 0)
		return GameText(playerid, "Введите корректную сумму", 3000, 0);
	if(!GetILPlayerInt(GetPlayerMoneyEx(to_player), g_player_trade_price[to_player]))
		return GameText(playerid, "У одной из сторон недостаточно~n~денег для доплаты / сделки", 3000, 0);
	if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), event))
		return GameText(playerid, "У одной из сторон недостаточно~n~денег для доплаты / сделки", 3000, 0);
	Trade_StartTradeItem(playerid);
	Trade_StartTradeItem(to_player);
	return true;
}

public: OnTradeItemsSetReady(playerid, status, price) // приготовится к обмену
{
	g_player_trade_status[playerid] = status + 1;
	g_player_trade_price[playerid] = price;
	new fmt_text[148];
	format(fmt_text, sizeof fmt_text, "interface('TradeItems').setTargetPlayer('[\"%d\", %d]')", g_player_trade_price[playerid], g_player_trade_status[playerid] - 1);
	BitStream_1(g_player_trade_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
	return true;
}

public: OnTradeItemsMove(playerid, removed_id, removed_slot, id, slot, count)
{
	new to_player = g_player_trade_offer_id[playerid];
	if(removed_id == 0)
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) 
				continue;
			if(GetPlayerItem(i, PI_TYPE) != 1) 
				continue;
			if(GetPlayerItem(i, PI_SLOTS) != removed_slot) 
				continue;
			new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
			new count_1 = GetPlayerItem(i, PI_COUNT) - GetPlayerItem(i, PI_TRADE_COUNT);
			new item_id = GetPlayerItem(i, PI_ITEM);
			if(count < 1) return LoadTradeItems(playerid, 1);
			if(typeitem == 0 && item_id == 0)
				return GameText(playerid, "Нельзя выставить~n~этот предмет", 3000, 0), LoadTradeItems(playerid, 1);
			if(typeitem == 4)
				return GameText(playerid, "Нельзя выставить~n~этот предмет", 3000, 0), LoadTradeItems(playerid, 1);
			if(count > count_1 && typeitem == 0 && item_id != 0) 
				return GameText(playerid, "В таком количестве~n~нет данного предмета", 3000, 0), LoadTradeItems(playerid, 1);
			if(GetInventorySlots(to_player) == -1) 
				return GameText(playerid, "У игрока недостаточно~n~места в инвентаре", 3000, 0), LoadTradeItems(playerid, 1);
			if(typeitem == 0)
			{
				if(count_1 != count) 
				{
					if(GetPlayerItem(i, PI_TRADE_SLOT) == -1)
						SetPlayerItem(i, PI_TRADE_SLOT, slot);
					SetPlayerItem(i, PI_TRADE_TYPE, 0);
					g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)] = g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)] + count;
				}
				else 
				{
					if(GetPlayerItem(i, PI_TRADE_SLOT) == -1)
						SetPlayerItem(i, PI_TRADE_SLOT, slot);
					SetPlayerItem(i, PI_TRADE_TYPE, 1);
					g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)] = g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)] + count;
				}
				SetPlayerItem(i, PI_TRADE_COUNT, g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)]);
				g_player_trade[playerid][PT_ITEM_ID][GetPlayerItem(i, PI_TRADE_SLOT)] = i;
				g_player_trade[playerid][PT_STATUS][GetPlayerItem(i, PI_TRADE_SLOT)] = 1;
			}
			else 
			{
				if(typeitem == 3) 
				{
					if(GetPlayerItem(i, PI_SKIN_ID) == GetPlayerData(playerid, P_SKIN))
					{
						SetPlayerSkin(playerid, 252);
						SetPlayerData(playerid, P_SKIN, 252);
						UpdatePlayerDatabaseInt(playerid, "skin", 252);
					}
				}
				SetPlayerItem(i, PI_TRADE_TYPE, 1);
				g_player_trade[playerid][PT_ITEM_ID][slot] = i;
				g_player_trade[playerid][PT_STATUS][slot] = 1;
			}
			break;
		}
	}
	else if(removed_id == 1)
	{
		if(g_player_trade[playerid][PT_STATUS][removed_slot] == 0) 
			return true;
		new item_id = g_player_trade[playerid][PT_ITEM_ID][removed_slot];
		new typeitem = GetPlayerItem(item_id, PI_TYPE_ITEM);
		new count_1 = GetPlayerItem(item_id, PI_TRADE_COUNT);
		if(count > count_1 && typeitem == 0) 
			return GameText(playerid, "В таком количестве~n~нет данного предмета", 3000, 0), LoadTradeItems(playerid, 1);
		if(typeitem == 0)
		{
			if(count == count_1)
			{
				SetPlayerItem(item_id, PI_TRADE_TYPE, 0);
				g_player_trade[playerid][PT_STATUS][removed_slot] = 0;
				g_player_trade[playerid][PT_COUNT][removed_slot] = 0;
				SetPlayerItem(item_id, PI_TRADE_SLOT, -1);
			}
			else
			{
				g_player_trade[playerid][PT_COUNT][removed_slot] = g_player_trade[playerid][PT_COUNT][removed_slot] - count;
				SetPlayerItem(item_id, PI_TRADE_TYPE, 0);
			}
			SetPlayerItem(item_id, PI_TRADE_COUNT, g_player_trade[playerid][PT_COUNT][removed_slot]);
		}
		else
		{
			SetPlayerItem(item_id, PI_TRADE_TYPE, 0);
			g_player_trade[playerid][PT_STATUS][removed_slot] = 0;
		}
	}
	LoadTradeItems(to_player, 1);
	LoadTradeItems(playerid, 1);
	return true;
}

public: OnTradeInterfaceClose(playerid)
{	
	print("OnTradeInterfaceClose(playerid)");
	return true;
}

public: OnTradeItemsCancel(playerid) //прекратить обмен
{
	if(g_player_trade_status[playerid] == 0)
		return true;
	GameText(playerid, "Обмен был прерван~n~одним из участников", 3000, 2);
	GameText(g_player_trade_offer_id[playerid], "Обмен был прерван~n~одним из участников", 3000, 2);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "TradeItems");
	BitStream_1(g_player_trade_offer_id[playerid], s_CefInterface, t_CefHide, "TradeItems");
	g_player_trade_status[playerid] = 0;
	g_player_trade_owner[playerid] = 0;
	g_player_trade_price[playerid] = 0;
	g_player_trade_status[g_player_trade_offer_id[playerid]] = 0;
	g_player_trade_owner[g_player_trade_offer_id[playerid]] = 0;
	g_player_trade_price[g_player_trade_offer_id[playerid]] = 0;
	g_player_trade_offer_id[g_player_trade_offer_id[playerid]] = 0;
	g_player_trade_offer_id[playerid] = 0;
	status_authorization[playerid] = 1;
	status_authorization[g_player_trade_offer_id[playerid]] = 1;
	DestroyitemsTrade(playerid);
	DestroyitemsTrade(g_player_trade_offer_id[playerid]);
	return true;
}

stock ShowPlayerTrade(playerid, to_player)
{
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return 1;
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(to_player, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(to_player, 10.0, X, Y, Z)) 
		return SCM(playerid, 0xFF5533FF, "Вы должны находиться ближе друг к другу!");
	if(g_player_trade_status[playerid] > 0) 
		return SCM(playerid, 0xFF5533FF, "Вы уже обмениваетесь с кем-то.");
	if(g_player_trade_status[to_player] > 0) 
		return SCM(playerid, 0xFF5533FF, "Игрок уже обменивается с кем-то.");
	SendPlayerOffer(playerid, to_player, OFFER_TYPE_TRADE);
  	return 1;
}

stock LoadTradeItems(playerid, status = 0)
{
	new to_player = g_player_trade_offer_id[playerid];
	GetPlayerMoneyInventory(playerid);
	new query[148];
	load_inventory[playerid] = "";
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 0) 
			if(GetPlayerItem(i, PI_TRADE_TYPE) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) == 0) 
			if(GetPlayerItem(i, PI_TRADE_COUNT) == GetPlayerItem(i, PI_COUNT)) continue;
		new indx = GetPlayerItem(i, PI_INDX);
		new count = GetPlayerItem(i, PI_COUNT);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		new slots = GetPlayerItem(i, PI_SLOTS);
		if(typeitem == 0) 
		{
			if(item_id == 336) format(query, sizeof query, "[0,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 337) format(query, sizeof query, "[0,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 0) format(query, sizeof query, "[0,%d,%d,0,\"\",%d,\"%s\",1.0],", slots, item_id, slots, GetPlayerMoneyEx(playerid));
			else if(item_id == 295 && indx == 0) format(query, sizeof query, "[0,%d,%d,%d,\"Плохая\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 295 && indx == 1) format(query, sizeof query, "[0,%d,%d,%d,\"Нормальная\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 295 && indx == 2) format(query, sizeof query, "[0,%d,%d,%d,\"Шикарная\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[0,%d,%d,%d,\"\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 132 && indx == 0) format(query, sizeof query, "[0,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 132 && indx == 1) format(query, sizeof query, "[0,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 132 && indx == 2) format(query, sizeof query, "[0,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else format(query, sizeof query, "[0,%d,%d,0,\"\",%d,%d,1.0],", slots, item_id, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
		}
		if(typeitem == 1) format(query, sizeof query, "[0,%d,99,%d,\"%s %s\",%d,1,1.0],", slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
		if(typeitem == 2) format(query, sizeof query, "[0,%d,%d,%d,\"\",%d,1,1.0],", slots, typeacs, aks_id, slots);
		if(typeitem == 3) format(query, sizeof query, "[0,%d,100,%d,\"\",%d,1,1.0,%d],", slots, skin_id, slots, skin_iznos);
		strcat(load_inventory[playerid], query);
	}
	for(new idx; idx < MAX_COUNT_TRADE; idx++)
	{
		if(g_player_trade[playerid][PT_STATUS][idx] == 0) continue;
		new i = g_player_trade[playerid][PT_ITEM_ID][idx];
		new indx = GetPlayerItem(i, PI_INDX);
		new count = GetPlayerItem(i, PI_TRADE_COUNT);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		new slots = idx;
		if(typeitem == 0) 
		{
			if(item_id == 336) format(query, sizeof query, "[1,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 337) format(query, sizeof query, "[1,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 0) format(query, sizeof query, "[1,%d,%d,0,\"\",%d,\"%s\",1.0],", slots, item_id, slots, GetPlayerMoneyEx(playerid));
			else if(item_id == 295 && indx == 0) format(query, sizeof query, "[1,%d,%d,%d,\"Плохая\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 1) format(query, sizeof query, "[1,%d,%d,%d,\"Нормальная\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 2) format(query, sizeof query, "[1,%d,%d,%d,\"Шикарная\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[1,%d,%d,%d,\"\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 0) format(query, sizeof query, "[1,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 1) format(query, sizeof query, "[1,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 2) format(query, sizeof query, "[1,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else format(query, sizeof query, "[1,%d,%d,0,\"\",%d,%d,1.0],", slots, item_id, slots, count);

		}
		if(typeitem == 1) format(query, sizeof query, "[1,%d,99,%d,\"%s %s\",%d,1,1.0],", slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
		if(typeitem == 2) format(query, sizeof query, "[1,%d,%d,%d,\"\",%d,1,1.0],", slots, typeacs, aks_id, slots);
		if(typeitem == 3) format(query, sizeof query, "[1,%d,100,%d,\"\",%d,1,1.0,%d],", slots, skin_id, slots, skin_iznos);
		strcat(load_inventory[playerid], query);
	}
	for(new idx; idx < MAX_COUNT_TRADE; idx++)
	{
		if(g_player_trade[to_player][PT_STATUS][idx] == 0) continue;
		new i = g_player_trade[to_player][PT_ITEM_ID][idx];
		new indx = GetPlayerItem(i, PI_INDX);
		new count = GetPlayerItem(i, PI_TRADE_COUNT);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		new slots = idx;
		if(typeitem == 0) 
		{
			if(item_id == 336) format(query, sizeof query, "[2,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 337) format(query, sizeof query, "[2,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 0) format(query, sizeof query, "[2,%d,%d,0,\"\",%d,\"%s\",1.0],", slots, item_id, slots, GetPlayerMoneyEx(playerid));
			else if(item_id == 295 && indx == 0) format(query, sizeof query, "[2,%d,%d,%d,\"Плохая\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 1) format(query, sizeof query, "[2,%d,%d,%d,\"Нормальная\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 2) format(query, sizeof query, "[2,%d,%d,%d,\"Шикарная\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[2,%d,%d,%d,\"\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 0) format(query, sizeof query, "[2,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 1) format(query, sizeof query, "[2,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 2) format(query, sizeof query, "[2,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else format(query, sizeof query, "[2,%d,%d,0,\"\",%d,%d,1.0],", slots, item_id, slots, count);
		}
		if(typeitem == 1) format(query, sizeof query, "[2,%d,99,%d,\"%s %s\",%d,1,1.0],", slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
		if(typeitem == 2) format(query, sizeof query, "[2,%d,%d,%d,\"\",%d,1,1.0],", slots, typeacs, aks_id, slots);
		if(typeitem == 3) format(query, sizeof query, "[2,%d,100,%d,\"\",%d,1,1.0,%d],", slots, skin_id, slots, skin_iznos);
		strcat(load_inventory[playerid], query);
	}
	strdel(load_inventory[playerid], strlen(load_inventory[playerid]) - 1, strlen(load_inventory[playerid]));
	if(status == 1)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TradeItems').setItems([%s])", load_inventory[playerid]);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
	return true;
}

public: DCrs_OnPlayerClose(playerid)
{
    SetCameraBehindPlayer(playerid);
    return 1;
}

stock OpenConteiner(playerid)
{
	if(GetIteam(playerid, 259) < 1500) return SCM(playerid, COLOR_GREY, "*У вас недостаточно ключей от кейса ля открытия данного контейнера");
	if(GetPlayerCurrentDonate(playerid) < 1500) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно доната для открытия данного контейнера.");
	if(GetIteam(playerid, 293) < 15000) return SCM(playerid, COLOR_GREY, "*У вас недостаточно фишек ля открытия данного контейнера");
	switch(random(7))
	{
		case 0:
		{
			STRING_GLOBAL[0] = EOS,
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"INSERT INTO ownable_cars \
				(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil) \
				VALUES \
				('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
				GetPlayerAccountID(playerid),
				15661,
				1,
				1,
				101.4864,827.0584,11.6183,33.6636,
				gettime(),
				1
			);
			mysql_query(mysql, STRING_GLOBAL, false);
			GiveSkin(playerid, 17002);
			GivePlayerCoins(playerid, 100);
			GivePlayerMoneyEx(playerid, 100000000);
			conteiners = "Bugatti Mistral | Одежда 'Призрак' | Rub: 100. | Деньги: 100млн.";
		}
		case 1:
		{
			STRING_GLOBAL[0] = EOS,
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"INSERT INTO ownable_cars \
				(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil) \
				VALUES \
				('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
				GetPlayerAccountID(playerid),
				15685,
				1,
				1,
				101.4864,827.0584,11.6183,33.6636,
				gettime(),
				1
			);
			mysql_query(mysql, STRING_GLOBAL, false);
			STRING_GLOBAL[0] = EOS,
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"INSERT INTO ownable_cars \
				(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil) \
				VALUES \
				('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
				GetPlayerAccountID(playerid),
				15668,
				1,
				1,
				101.4864,827.0584,11.6183,33.6636,
				gettime(),
				1
			);
			mysql_query(mysql, STRING_GLOBAL, false);
			GiveSkin(playerid, 15534);
			GivePlayerMoneyEx(playerid, 50000000);
			GivePlayerDonate(playerid, 400);
			conteiners = "Mercedes-Benz SL 63 Mansory | Одежда 'Коломойский' | BMW M4 G82 Camper | Деньги: 50млн. | Донат: 400 ед.";
		}
		case 2:
		{
			STRING_GLOBAL[0] = EOS,
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"INSERT INTO ownable_cars \
				(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil) \
				VALUES \
				('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
				GetPlayerAccountID(playerid),
				15257,
				1,
				1,
				101.4864,827.0584,11.6183,33.6636,
				gettime(),
				1
			);
			mysql_query(mysql, STRING_GLOBAL, false);
			GiveSkin(playerid, 15539);
			GiveSkin(playerid, 15572); 
			GivePlayerDonate(playerid, 299);
			GivePlayerCoins(playerid, 20);
			AddPlayerData(playerid, P_EXP, +, 40 * g_doubling[DOUBLING_EXP]);
			UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
			conteiners = "Одежда 'XXXTentacion' | Одежда 'Скотт' | Игровой Опыт 40 ед. | Rub: 20 ед. | Донат: 299 ед. | Nissan Skyline GTR(Форсаж)";
		}
		case 3:
		{
			STRING_GLOBAL[0] = EOS,
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"INSERT INTO ownable_cars \
				(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil) \
				VALUES \
				('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
				GetPlayerAccountID(playerid),
				15657,
				1,
				1,
				101.4864,827.0584,11.6183,33.6636,
				gettime(),
				1
			);
			mysql_query(mysql, STRING_GLOBAL, false);
			GiveSkin(playerid, 17033);
			GivePlayerCoins(playerid, 20);
			conteiners = " | Мотоцикл 'Призрачный гонщик' | Rub: 20 ед. | Одежда 'Павел Дуров'";
		}
		case 4:
		{
			STRING_GLOBAL[0] = EOS,
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"INSERT INTO ownable_cars \
				(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil, viniltype) \
				VALUES \
				('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
				GetPlayerAccountID(playerid),
				15658,
				1,
				1,
				101.4864,827.0584,11.6183,33.6636,
				gettime(),
				0,
				1
			);
			mysql_query(mysql, STRING_GLOBAL, false);
			GiveSkin(playerid, 17000);
			GivePlayerMoneyEx(playerid, 150000000);
			GivePlayerDonate(playerid, 400);
			conteiners = "Rolls-Royce Phantom 6x6 Halloween(+vinil) | Деньги: 150млн. | Донат: 400 ед. | Одежда 'Франкештейн'";
		}
		case 5:
		{
			STRING_GLOBAL[0] = EOS,
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"INSERT INTO ownable_cars \
				(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil) \
				VALUES \
				('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
				GetPlayerAccountID(playerid),
				17401,
				1,
				1,
				101.4864,827.0584,11.6183,33.6636,
				gettime(),
				1
			);
			mysql_query(mysql, STRING_GLOBAL, false);
			GiveSkin(playerid, 17070);
			GiveSkin(playerid, 17068);
			GivePlayerMoneyEx(playerid, 200000000);
			conteiners = " | Автомобиль 'Agera RS' | Деньги: 200млн. | Одежда 'Пила' | Одежда 'Школьница'";
		}
		case 6:
		{
			STRING_GLOBAL[0] = EOS,
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"INSERT INTO ownable_cars \
				(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil) \
				VALUES \
				('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
				GetPlayerAccountID(playerid),
				17400,
				1,
				1,
				101.4864,827.0584,11.6183,33.6636,
				gettime(),
				1
			);
			mysql_query(mysql, STRING_GLOBAL, false);
			GiveSkin(playerid, 17074);
			GiveSkin(playerid, 17077);
			GivePlayerCoins(playerid, 100);
			GivePlayerDonate(playerid, 500);
			GiveAcs(playerid, 14207, 5);
			conteiners = "Rub: 100. | Автомобиль 'Dodge Challenger Reaper' | Донат: 500ед. | Одежда 'Призрачная девушка' | Одежда 'Пила девушка' | Аксессуар 'Рюкзак ангела'";
		}
	}
	GiveIteam(playerid, 259, 0, 1500, 0);
	GiveIteam(playerid, 293, 0, 15000, 0);
	GivePlayerDonate(playerid, -1500);
	SCMF(playerid, 0x3399FFFF, "Поздравляем! Вы выиграли:{FFFFFF} %s", conteiners);
	new fmt_str[220];
	format(fmt_str, sizeof fmt_str, "Игрок: %s[%d] Совершил открытие Таинственого Контейнера", GetPlayerNameEx(playerid), playerid);
	SendClientMessageToAll(0xFFCD00FF, fmt_str);
	conteiners = "";
	return true;
}

#define TEST_DRIVE_VEHICLE_MODEL 17401
#define TEST_DRIVE_SPAWN_DISTANCE 10.0
new Float:TestDriveSpawnPos[3];
new TestDriveVehicleID[MAX_PLAYERS];
public: DCrs_OnPlayerTestDrive(playerid) 
{
    BitStream_2(playerid, s_CefInterface, t_CefHide, "DonateItem", "[\"Скоростной призрак\",\"Лимитированная коллекция\",12000]");
    SetCameraBehindPlayer(playerid);
    SetPlayerVirtualWorld(playerid, 37);
    SetPlayerSkin(playerid, 17062);    
    GetPlayerPos(playerid, TestDriveSpawnPos[0], TestDriveSpawnPos[1], TestDriveSpawnPos[2]);
    TestDriveVehicleID[playerid] = CreateVehicle(TEST_DRIVE_VEHICLE_MODEL, TestDriveSpawnPos[0] + TEST_DRIVE_SPAWN_DISTANCE, TestDriveSpawnPos[1], TestDriveSpawnPos[2], 0.0, 8, 8, 0);
    SetVehicleVirtualWorld(TestDriveVehicleID[playerid], 37); 
    PutPlayerInVehicle(playerid, TestDriveVehicleID[playerid], 0);
}
#define GetVorotaData(%0,%1) 			g_vorota[%0][%1]
#define SetVorotaData(%0,%1,%2) 		g_vorota[%0][%1] = %2
#define MAX_VOROTA 600
enum E_VOROTA_STRUCT
{
	V_SQL_ID,
	Float: V_POS_X,
	Float: V_POS_Y,
	Float: V_POS_Z,
	Float: V_POS_RZ,
	V_TYPE,
    V_TYPE_OPEN,
    V_TYPE_OBJECT,
};
new g_vorota[MAX_VOROTA][E_VOROTA_STRUCT];
new g_vorota_loaded;
new VorotaObject[MAX_VOROTA];
new VorotaStatus[MAX_VOROTA];
new array_vorota_data[MAX_VOROTA];
stock GetNearestVorota(playerid, event, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new kiosk_id = -1;
	new Float: my_dist;
	for(new idx; idx < g_vorota_loaded; idx ++)
	{
		if(GetVorotaData(idx, V_TYPE) == event){
			my_dist = GetPlayerDistanceFromPoint(playerid, GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z));
			if(my_dist < dist)
			{
				dist = my_dist,
				kiosk_id = idx;
			}
		}
	}
	return kiosk_id;
}

public: LoadVorota()
{
	new Cache: result, rows;
    result = mysql_query(mysql, "SELECT * FROM vorota", true);
	rows = cache_num_rows();
	if(rows > MAX_VOROTA)
	{
		print("[Vorota]: DB rows > MAX VOROTA");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetVorotaData(idx, V_SQL_ID, 	    cache_get_field_content_int(idx, "id"));
        SetVorotaData(idx, V_TYPE, 		    cache_get_field_content_int(idx, "type"));
		SetVorotaData(idx, V_POS_X,		    cache_get_field_content_float(idx, "x"));
		SetVorotaData(idx, V_POS_Y,		    cache_get_field_content_float(idx, "y"));
		SetVorotaData(idx, V_POS_Z,		    cache_get_field_content_float(idx, "z"));
		SetVorotaData(idx, V_POS_RZ,	    cache_get_field_content_float(idx, "rz"));
        SetVorotaData(idx, V_TYPE_OPEN,	    cache_get_field_content_int(idx, "type_open"));
        SetVorotaData(idx, V_TYPE_OBJECT,	cache_get_field_content_int(idx, "type_object"));
		VorotaStatus[idx] = 0;
        VorotaObject[idx] = CreateDynamicObject(GetVorotaData(idx, V_TYPE_OBJECT), GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z), 0.000000, 0.000000, GetVorotaData(idx, V_POS_RZ));
        array_vorota_data[idx] = CreateDynamicSphere(GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z), 5.5, -1, -1);
    }
	g_vorota_loaded = rows;
	cache_delete(result);
	printf("[Ворота]: Ворот загружено: %d", g_vorota_loaded);
}

public: OpenVorota(playerid)
{
    for(new idx; idx < g_vorota_loaded; idx ++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 6.5, GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z)))
        {
            if(GetVorotaData(idx, V_TYPE_OPEN) == 0 || GetVorotaData(idx, V_TYPE_OPEN) == 1) 
            {
                new houseid = GetNearestHouse(playerid, 46.0);
                if(houseid != -1)
                {
                    if(GetHouseData(houseid, H_OWNER_ID) != GetPlayerAccountID(playerid) && GetPlayerFamilyHouse(playerid) != houseid) return 1;
                }
            }
            if(GetVorotaData(idx, V_TYPE_OPEN) == 2) 
                if(GetPlayerTeamEx(playerid) != TEAM_MAFIA_ITALIAN) return 1;      
            if(GetVorotaData(idx, V_TYPE_OPEN) == 3) 
                if(GetPlayerTeamEx(playerid) != TEAM_MAFIA_RUSSIAN) return 1;
            if(GetVorotaData(idx, V_TYPE_OPEN) == 4) 
                if(GetPlayerTeamEx(playerid) != TEAM_MAFIA_JAPAN) return 1;
            if(GetVorotaData(idx, V_TYPE_OPEN) == 0 || GetVorotaData(idx, V_TYPE_OPEN) == 2 || GetVorotaData(idx, V_TYPE_OPEN) == 3 || GetVorotaData(idx, V_TYPE_OPEN) == 4)
            {
                if(GetNearestVorota(playerid, 1, 6.5) > 0 && GetNearestVorota(playerid, 2, 6.5) > 0)
                {
                    if(VorotaStatus[idx] == 0)
                    {
                        if(GetVorotaData(idx, V_TYPE) == 1)MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X)+0.1, GetVorotaData(idx, V_POS_Y)+0.1, GetVorotaData(idx, V_POS_Z),0.3,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ)+90);
                        if(GetVorotaData(idx, V_TYPE) == 2)MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X)+0.1, GetVorotaData(idx, V_POS_Y)+0.1, GetVorotaData(idx, V_POS_Z),0.3,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ)+270);
                        VorotaStatus[idx] = 1;
                    }
                    else
                    {
                        MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z),0.3,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ));
                        VorotaStatus[idx] = 0;
                    }
                }
            }
            if(GetVorotaData(idx, V_TYPE_OPEN) == 1)
            {
                if(VorotaStatus[idx] == 0) MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X)+0.1, GetVorotaData(idx, V_POS_Y)+0.1, GetVorotaData(idx, V_POS_Z)-2.5,0.6,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ)), VorotaStatus[idx] = 1;
                else MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z),0.6,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ)), VorotaStatus[idx] = 0;
            }
        }
    }
    return 1;
}

new vorota_status;
new vorota_mo, vorota_mo1, vorota_mo2, vorota_mo3, vorota_mo4, vorota_mo5;
new vorota_PRIDE;
new sarzamas1, sarzamas2, sarzamas3, sarzamas4, sarzamas5, sarzamas6;
new ssarzamas1, ssarzamas2, ssarzamas3, ssarzamas4, ssarzamas5, ssarzamas6;
new sssarzamas1, sssarzamas2, sssarzamas3, sssarzamas4, sssarzamas5, sssarzamas6;
new ssssarzamas1, ssssarzamas2, ssssarzamas3, ssssarzamas4, ssssarzamas5, ssssarzamas6;
new vorota_pps;
new vorota_mvd[3];
public: LoadVorotaDef()
{
    vorota_mo = CreateDynamicObject(18470, 1286.41,3279.45,12.8185, 0.00, 0.00, 0.00);
    vorota_mo1 = CreateDynamicObject(18470, 1286.39,3266.89,12.8168, 0.00, 0.00, 179.7);
    vorota_mo2 = CreateDynamicObject(18506, 1294.51,3264.11,11.5986, 0.00, 0.00, 0.00);
    vorota_mo3 = CreateDynamicObject(18470, 1049.47,3267,12.6714, 0.00, 0.00, -179.9);
    vorota_mo4 = CreateDynamicObject(18470, 1049.44,3279.57,12.6692, 0.00, 0.00, 0.00);
    vorota_mo5 = CreateDynamicObject(18506, 1041.54,3265.77,11.427, 0.00, 0.00, 0.00);
    vorota_PRIDE = CreateDynamicObject(19313, 2622.3899, 1792.8700, -1.4200, 0.0000, 90.0000, 0.0000);
    vorota_pps = CreateDynamicObject(14769, 188.696,1405.03,11.2418, 0.00, 0.00, -10.1); //Ворота МВД
	sarzamas1 = CreateDynamicObject(14802, 737.234, 119.325,13.9418, 0.00, -81.5997, 38.9999); //Ворота МВД
	sarzamas2 = CreateDynamicObject(14802, 753.651, 96.4827, 13.9288, 0.00, -82.9999, 36); //Ворота МВД
	sarzamas3 = CreateDynamicObject(14802, 758.445, 135.084, 13.9418, 0.00, -84.9, -143.3); //Ворота МВД
	sarzamas4 = CreateDynamicObject(14802, 774.864, 112.231, 13.9418, 0.00, -84, -144.3); //Ворота МВД
	sarzamas5 = CreateDynamicObject(10594, 744.988, 93.2492, 13.9388, 0, -84, 35.8); //Ворота МВД
	sarzamas6 = CreateDynamicObject(10594, 767.101, 138.302, 13.9312, 0, -84, -144.3); //Ворота МВД
	ssarzamas1 = CreateDynamicObject(14802, -2609.4, -667.615, 29.9688, 0, -84.1, 0); //Ворота МВД
	ssarzamas2 = CreateDynamicObject(14802, -2609.39, -695.748, 29.9652, 0, -84.4, 0); //Ворота МВД
	ssarzamas3 = CreateDynamicObject(14802, -2586.64, -695.605, 29.9666, 0, -85.1, 179.8); //Ворота МВД
	ssarzamas4 = CreateDynamicObject(14802, -2586.65, -667.466, 29.9644, 0, -84.9, -180); //Ворота МВД
	ssarzamas5 = CreateDynamicObject(10594, -2618.31, -693.322, 29.9676, 0, -84, 0); //Ворота МВД
	ssarzamas6 = CreateDynamicObject(10594, -2577.72, -669.894, 29.9666, 0, -84, -179.9); //Ворота МВД
	sssarzamas1 = CreateDynamicObject(14802, 964.054, 2630.17, 12.2925, 0, -85.2, 120.4); //Ворота МВД
	sssarzamas2 = CreateDynamicObject(14802, 988.326, 2644.41, 12.29, 0, -85.3, 121.4); //Ворота МВД
	sssarzamas3 = CreateDynamicObject(14802, 977.417, 2662.74, 12.3003, 0, -85.1, -58.5); //Ворота МВД
	sssarzamas4 = CreateDynamicObject(14802, 953.144, 2648.51, 12.3003, 0, -85, -60); //Ворота МВД
	sssarzamas5 = CreateDynamicObject(10594, 950.738, 2657.42, 12.3, 0, -84, -59.6); //Ворота МВД
	sssarzamas6 = CreateDynamicObject(10594, 990.738, 2635.49, 12.3003, 0, -84, 120.4); //Ворота МВД
	ssssarzamas1 = CreateDynamicObject(14802, 2684.84, -1505.53, 24.1764, 0, -81.2, -49.5); //Ворота МВД
	ssssarzamas2 = CreateDynamicObject(14802, 2663.29, -1523.62, 24.1885, 0, -82.7, -50.2); //Ворота МВД
	ssssarzamas3 = CreateDynamicObject(14802, 2677.38, -1538.89, 24.1764, 0, -83.4, 129.1); //Ворота МВД
	ssssarzamas4 = CreateDynamicObject(14802, 2698.92, -1520.81, 24.1664, 0, -83.4, 131.5); //Ворота МВД
	ssssarzamas5 = CreateDynamicObject(10594, 2702.79, -1529.19, 24.1653, 0, -84, 130.1); //Ворота МВД
	ssssarzamas6 = CreateDynamicObject(10594, 2659.43, -1515.24, 24.1764, 0, -84, -49.9); //Ворота МВД
    vorota_mvd[0] = CreateDynamicObject(11099, 2486.02, 1381.42, 999.03,0,0,0);
    vorota_mvd[1] = CreateDynamicObject(11099, 2491.22, 1381.43, 999.031,0,0,0);
    vorota_mvd[2] = CreateDynamicObject(11099, 2496.44, 1381.39, 999.021,0,0,0);
}
public: OpenVorotaDef(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 2487.1697,1381.8058,1000.0214))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mvd[0],2484.69, 1381.41, 999.04,0.4, 0, 0, 0), vorota_status = 1;
        else return MoveDynamicObject(vorota_mvd[0],2486.02, 1381.42, 999.03,0.4,0,0,0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 2492.3794,1381.8080,1000.0214))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mvd[1],2490.05, 1381.42, 999.031,0.4,0,0,0), vorota_status = 1;
        else return MoveDynamicObject(vorota_mvd[1],2491.22, 1381.43, 999.031,0.4,0,0,0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 2497.5918,1381.8079,1000.0214))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mvd[2],2495.23, 1381.39, 999.031,0.4,0,0,0), vorota_status = 1;
        else return MoveDynamicObject(vorota_mvd[2],2496.44, 1381.39, 999.021,0.4,0,0,0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 6.5, 2659.43, -1515.24, 24.1764))// 2.0, 2659.43, -1515.24, 24.1764))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas6,2659.43, -1515.24, 24.1764,0.4,0, 0, -49.9), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas6,2659.43, -1515.25, 24.1765,0.4,0, -84, -49.91), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 737.6868,119.7215,13.6275))// 2.0, 737.6868,119.7215,13.6275))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas1,737.234,119.325,13.9418,0.4, 0.00, 0.00, 38.9999), vorota_status = 1;
        else return MoveDynamicObject(sarzamas1,737.2345,119.326,13.9419,0.4, 0.00, -81.5997, 38.9998), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 754.0997,96.8653,13.6488))// 2.0, 754.0997,96.8653,13.6488))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas2,753.651000, 96.482700, 13.928800,0.4,0.000000, 0.000000, 36.000000), vorota_status = 1;
        else return MoveDynamicObject(sarzamas2,753.651000, 96.482700, 13.928800,0.4,0.000000, -82.999900, 36.000000), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 758.0597,134.5079,13.6377))// 2.0, 758.0597,134.5079,13.6377))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas3,758.445,135.084,13.9418,0.4, 0.00, 0.00, -143.3), vorota_status = 1;
        else return MoveDynamicObject(sarzamas3,758.445,135.084,13.9418,0.4, 0.00, -84.9, -143.3), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 774.4136,111.7526,13.6488))// 2.0, 774.4136,111.7526,13.6488))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas4,774.864,112.231,13.9418,0.4, 0.00, 0.00, -144.3), vorota_status = 1;
        else return MoveDynamicObject(sarzamas4,774.864,112.231,13.9418,0.4, 0.00, -84, -144.3), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 744.988, 93.2492, 13.9388))// 2.0, 744.988, 93.2492, 13.9388))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas5,744.988, 93.2492, 13.9388,0.4, 0, 0.00, 35.8), vorota_status = 1;
        else return MoveDynamicObject(sarzamas5,744.988, 93.2492, 13.9388,0.4, 0, -84, 35.8), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 767.101, 138.302, 13.9312))// 2.0, 767.101, 138.302, 13.9312))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");	
        if(vorota_status == 0) return MoveDynamicObject(sarzamas6,767.101, 138.302, 13.9312,0.4, 0, 0, -144.3), vorota_status = 1;
        else return MoveDynamicObject(sarzamas6,767.101, 138.302, 13.9312,0.4, 0, -84, -144.3), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2608.7622,-667.2278,29.6697))// 2.0, -2608.7622,-667.2278,29.6697))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas1,-2609.39,-667.614,29.9666,0.05, 0, 0, 0), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas1,-2609.4,-667.615,29.9688,0.05, 0, -84.4, 0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2608.7651,-695.3596,29.6651))// 2.0, -2608.7651,-695.3596,29.6651))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas2,-2609.39,-695.744,29.9666,0.4, 0, 0, 0), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas2,-2609.39,-695.748,29.9652,0.4, 0, -84.4, 0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2586.6460,-695.2100,29.8966))// 2.0, -2586.6460,-695.2100,29.8966))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas3,-2586.64,-695.609,29.9666,0.4, 0, 0, 179.9), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas3,-2586.64,-695.605,29.9666,0.4, 0, -84.4, 179.8), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2587.2786,-667.8477,29.6792))// 2.0, -2587.2786,-667.8477,29.6792))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas4,-2586.65,-667.465,29.9589,0.4, -0.399999, 0, 180), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas4,-2586.65,-667.466,29.9644,0.4, 0, -84.9, -180), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2618.31, -693.322, 29.9676))// 2.0, -2618.31, -693.322, 29.9676))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas5,-2618.31, -693.322, 29.9676,0.4, 0, 0, 0), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas5,-2618.31, -693.322, 29.9676,0.4, 0, -84, 0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2577.72, -669.894, 29.9666))// 2.0, -2577.72, -669.894, 29.9666))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas6,-2577.72, -669.894, 29.9666,0.4, 0, 0, -179.9), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas6,-2577.72, -669.894, 29.9666,0.4, 0, -84, -179.9), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 963.4028,2630.5281,12.0000))// 2.0, 963.4028,2630.5281,12.0000))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas1,964.058,2630.17,12.2903,0.4, 0, 0, 120.3), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas1,964.054,2630.17,12.2925,0.4, 0, -85.2, 120.4), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 987.6611,2644.7566,12.0000))// 2.0, 987.6611,2644.7566,12.0000))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas2,988.326,2644.41,12.2902,0.4, -0.199999, 0, 121.4), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas2,988.326,2644.41,12.29,0.4, 0, -85.3, 121.4), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 977.1450,2662.4414,12.2303))// 2.0, 977.1450,2662.4414,12.2303))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas3,977.413,2662.75,12.3023,0.4, 0.299999, 0, -58.4), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas3,977.417,2662.74,12.3003,0.4, 0, -85.1, -58.5), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 953.7897,2648.1458,12.0000))// 2.0, 953.7897,2648.1458,12.0000))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas4,953.139,2648.51,12.3,0.4, 0, 0, -60), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas4,953.144,2648.51,12.3003,0.4, 0, -85, -60), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 950.738, 2657.42, 12.3))// 2.0, 950.738, 2657.42, 12.3))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas5,950.738, 2657.42, 12.3,0.4, 0, 0, -59.6), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas5,950.738, 2657.42, 12.3,0.4, 0, -84, -59.6), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 990.738, 2635.49, 12.3003))// 2.0, 990.738, 2635.49, 12.3003))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas6,990.738, 2635.49, 12.3003,0.4, 0, 0, 120.4), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas6,990.738, 2635.49, 12.3003,0.4, 0, -84, 120.4), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2685.5598,-1505.7780,23.8835))// 2.0, 2685.5598,-1505.7780,23.8835))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas1,2684.85,-1505.53,24.1735,0.4, 0, 0, -49.5), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas1,2684.84,-1505.53,24.1764,0.4, 0, -81.2, -49.5), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2663.9968,-1523.8726,23.8387))// 2.0, 2663.9968,-1523.8726,23.8387))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas2,2663.3,-1523.62,24.1857,0.4, 0, 0, -50.2), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas2,2663.29,-1523.62,24.1885,0.4, 0, -82.7, -50.2), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2677.5801,-1538.5195,24.1064))// 2.0, 2677.5801,-1538.5195,24.1064))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas3,2677.38,-1538.9,24.1792,0.4, 0, 0, 129.1), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas3,2677.38,-1538.89,24.1764,0.4, 0, -83.4, 129.1), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2698.3972,-1521.3278,24.1064))// 2.0, 2698.3972,-1521.3278,24.1064))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas4,2698.92,-1520.8,24.1664,0.4,0, 0, 131.5), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas4,2698.92,-1520.81,24.1664,0.4,0, -83.4, 131.5), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2702.79, -1529.19, 24.1653))// 2.0, 2702.79, -1529.19, 24.1653))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");	
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas5,2702.79, -1529.19, 24.1653,0.4,0, 0, 130.1), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas5,2702.79, -1529.19, 24.1653,0.4,0, -84, 130.1), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1286.41,3279.45,12.8185))
    {
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY && GetPlayerTeamEx(playerid) != TEAM_FSB) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mo,1286.41,3285.12,12.8185,0.9, 0.00, 0.00, 0.00), vorota_status = 1;
        else return MoveDynamicObject(vorota_mo,1286.41,3279.45,12.8185,0.9, 0.00, 0.00, 0.00), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1286.39,3266.89,12.8168))
    {
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY && GetPlayerTeamEx(playerid) != TEAM_FSB) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mo1,1286.39,3260.42,12.8066,0.9, 0.00, 0.00, 179.9), vorota_status = 1;
        else return MoveDynamicObject(vorota_mo1,1286.39,3266.89,12.8168,0.9 ,0.00, 000, 179.7), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1294.51,3264.11,11.5986))
    {
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY && GetPlayerTeamEx(playerid) != TEAM_FSB) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mo2,1294.51,3264.12,11.6066,0.9, 0.00, 0.00, -90.4999), vorota_status = 1;
        else return MoveDynamicObject(vorota_mo2,1294.51,3264.11,11.5986,0.9 ,0.00, 000, 0.0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1049.47,3267,12.6714))
    {
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY && GetPlayerTeamEx(playerid) != TEAM_FSB) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mo3,1049.44,3261.26,12.6752,0.9, 0.00, 0.00, 179.5), vorota_status = 1;
        else return MoveDynamicObject(vorota_mo3,1049.47,3267,12.6714,0.9, 0.00, 0.00, -179.9), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1049.44,3279.57,12.6692))
    {
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY && GetPlayerTeamEx(playerid) != TEAM_FSB) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mo4,1049.46,3284.48,12.6456,0.9, 0.00, 0.00, 00.0), vorota_status = 1;
        else return MoveDynamicObject(vorota_mo4,1049.44,3279.57,12.6692,0.9, 0.00, 0.00, 00.0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1041.54,3265.77,11.427))
    {
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY && GetPlayerTeamEx(playerid) != TEAM_FSB) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mo5,1041.53,3265.77,11.4258,0.9, 0.00, 0.00, 94.3999), vorota_status = 1;
        else return MoveDynamicObject(vorota_mo5,1041.54,3265.77,11.427,0.9, 0.00, 0.00, 00.0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 9.5, 188.7192,1404.6619,12.2037))// 9.5, 188.7192,1404.6619,12.2037))
    {
        if(GetPlayerTeamEx(playerid) != TEAM_PPS && GetPlayerTeamEx(playerid) != TEAM_FSB) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
        if(vorota_status == 0) return MoveDynamicObject(vorota_pps,179.155,1406.71,11.2418,0.4, 0.00, 0.00, -10.1), vorota_status = 1;
        else return MoveDynamicObject(vorota_pps,188.696,1405.03,11.2418,0.4, 0.00, 0.00, -10.1), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -1633.4974,950.1698,112.0641) || IsPlayerInRangeOfPoint(playerid, 2.0, -1633.3749,950.4099,147.9468))// 2.0, -1633.3749,950.4099,147.9468))
    {
        if(vorota_status == 0) return MoveDynamicObject(vetrlift,-1633.41, 950.784, 146.767,0.7, 0.000000, 0.000000, 0), vorota_status = 1;
        else return MoveDynamicObject(vetrlift,-1633.41, 950.819, 110.884,0.7, 0.000000, 0.000000, 0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2622.3899, 1792.8700, -1.4200))// 5.0, 2622.3899, 1792.8700, -1.4200))
    {
        if(GetHouseData(GetNearestHouse(playerid, 45.0), H_OWNER_ID) != GetPlayerAccountID(playerid)) return SendClientMessage(playerid, -1, "Вы не владелец этого дома");
        if(vorota_status == 0) return MoveDynamicObject(vorota_PRIDE,2622.3899, 1792.8700, -5.4978,0.5, 0.0000, 90.0000, 0.0000), vorota_status = 1;
        else return MoveDynamicObject(vorota_PRIDE,2622.3899, 1792.8700, -1.4200,0.5, 0.0000, 90.0000, 0.0000), vorota_status = 0;
    }
    return 1;
}

enum eAltHint
{
	Float:eHintPos[4],
	eHintName[32],
	eHintType
}
#define MAX_ALT_HINT 500
new array_hint_data[MAX_ALT_HINT];
new g_alt_hint[][eAltHint] =
{
	{{2148.9890,-1841.8706,18.8191,5.0}, "Заехать в мастерскую", 1},
	{{2154.1694,-1841.8856,18.8135,5.0}, "Заехать в мастерскую", 1},
	{{2159.4741,-1841.8997,18.8135,5.0}, "Заехать в мастерскую", 1},
	{{2164.5117,-1841.7710,18.8052,5.0}, "Заехать в мастерскую", 1},
	{{-2506.4739, 1087.8359, 8.7268,5.0}, "Заехать в мастерскую", 1},
	{{-2505.1187, 1091.5752, 8.7268,5.0}, "Заехать в мастерскую", 1},
	{{-2502.2227, 1099.5433, 8.7268,5.0}, "Заехать в мастерскую", 1},
	{{-2500.9036, 1103.1984, 8.7268,5.0}, "Заехать в мастерскую", 1},
	{{-319.8949,300.4803,13.1182,5.0}, "Заехать в мастерскую", 1},
	{{-323.7070,301.0323,13.1182,5.0}, "Заехать в мастерскую", 1},
	{{-332.1658,302.5240,13.0760,5.0}, "Заехать в мастерскую", 1},
	{{-336.0356,303.2074,13.0577,5.0}, "Заехать в мастерскую", 1},
	{{2347.1785,-2610.2151,21.7931,4.0}, "Заехать в мастерскую", 1},
	{{258.8138,703.6974,11.9849,10.0}, "Заехать в мастерскую", 1},
	{{-2672.3538,-1354.2834,8.8302,20.0}, "Заправить транспорт", 1},
	{{2554.8345, -2425.6321, 21.8579,20.0}, "Заправить транспорт", 1},
    {{-428.4470,-1363.6104,40.3740,15.0}, "Заправить транспорт", 1},
    {{-479.5030, -1836.0088, 41.3189,15.0}, "Заправить транспорт", 1},
	{{512.768, 431.684, 12,15.0}, "Заправить транспорт", 1},
	{{550.892, 1209.29, 4.9099,15.0}, "Заправить транспорт", 1},
	{{726.887, 2559.55, 12.1875,15.0}, "Заправить транспорт", 1},
	{{1890.06, -2909.72, 3.8898,15.0}, "Заправить транспорт", 1},
	{{-251.635, -1185.07, 41.06,15.0}, "Заправить транспорт", 1},
	{{-2037.01, -2007.55, 8.5077}, "Заправить транспорт", 1},
	{{-2620.5, -37.8617, 12.1909,15.0}, "Заправить транспорт", 1},
	{{-2583.21, 1964.54, 52.9992,15.0}, "Заправить транспорт", 1},
	{{1894.89, -865.783, 14.7136,15.0}, "Заправить транспорт", 1},
	{{1913.65, 1706.91, 15.94,15.0}, "Заправить транспорт", 1},
	{{2247.17, -1715.46, 22.0362,15.0}, "Заправить транспорт", 1},
	{{2571.79, -1834.46, 21.97,15.0}, "Заправить транспорт", 1},
	{{3980.1, 4324.28, 7.9306,15.0}, "Заправить транспорт", 1},
	{{740.6722,2593.2686,12.1875,15.0}, "Зарядить транспорт", 1},
	{{524.7357,1216.0225,4.9021,15.0}, "Зарядить транспорт", 1},
	{{524.3786,407.8583,12.0000,15.0}, "Зарядить транспорт", 1},
	{{-2603.8452,-11.4564,12.1909,15.0}, "Зарядить транспорт", 1},
	{{2222.0361,-1700.8455,22.0557,15.0}, "Зарядить транспорт", 1},
	{{1884.8348,-2943.7678,3.8352,15.0}, "Зарядить транспорт", 1},
	{{1902.7150,-884.1428,14.7064,15.0}, "Зарядить транспорт", 1},
	{{-2557.9216,1946.0831,52.9992,15.0}, "Зарядить транспорт", 1},
	{{3970.4331,4347.5366,7.9306,15.0}, "Зарядить транспорт", 1},
	{{-2050.9451,-2013.4017,8.6395,15.0}, "Зарядить транспорт", 1},
	{{1883.0500,-851.7705,14.8528,4.5}, "Помыть транспорт", 1},
	{{516.7447, 449.4849, 12.1262,4.5}, "Помыть транспорт", 1},
	{{715.2836, 2577.0464, 12.2778,4.5}, "Помыть транспорт", 1},
	{{3998.1440,4332.0781,8.0176,4.5}, "Помыть транспорт", 1},
	{{-2567.7612, 1978.6449, 53.1044,4.5}, "Помыть транспорт", 1},
	{{-2600.3577,-34.3183,12.3184,4.5}, "Помыть транспорт", 1},
	{{214.88200, -276.60931, 1012.79022, 5.0}, "Играть в колесо фортуны", 0},
	{{-3181.1814,829.4647,6.2260,6.5}, "Открыть/Закрыть", 0},
	{{1041.54,3265.77,11.427,2.0}, "Открыть/Закрыть", 0},
	{{1949.5116,-45.7268,6.3105,6.5}, "Открыть/Закрыть", 0},
	{{4007.5266,3856.4973,7.9180,6.5}, "Открыть/Закрыть", 0},
	{{1993.4933,1306.0104,24.8804,6.5}, "Открыть/Закрыть", 0},
	{{-1793.2881,-2661.3774,11.1862,4.5}, "Открыть/Закрыть", 0},
	{{-1807.5492,-2716.1763,11.5656,4.5}, "Открыть/Закрыть", 0},
	{{-1770.5088,-2727.4299,11.6040,4.5}, "Открыть/Закрыть", 0},
	{{1286.41,3279.45,12.8185,2.0}, "Открыть/Закрыть", 0},
	{{1286.39,3266.89,12.8168,2.0}, "Открыть/Закрыть", 0},		
	{{1048.9650,3267.3442,11.2209,2.0}, "Открыть/Закрыть", 0},		
	{{1049.44,3279.57,12.6692,2.0}, "Открыть/Закрыть", 0},		
	{{1294.51,3264.11,11.5986,3.0}, "Открыть/Закрыть", 0},
	{{-1940.9128,2895.8516,5.9990,3.0}, "Взаимодействовать", 0},
	{{139.2284,703.8436,12.2744,3.0}, "Взаимодействовать", 0},
	{{-509.5371,1506.3298,1001.0025,4.0}, "Взаимодействовать", 0},
	{{-3626.3821,3229.2583,317.6395,4.0}, "Взаимодействовать", 0},
	{{2395.7681,-2308.1448,22.1084,4.0}, "Взаимодействовать", 0},
	{{2240.0740,-1719.7739,23.1200,4.0}, "Взаимодействовать", 0},
	{{1819.1329,2072.6802,15.8546,4.0}, "Взаимодействовать", 0},
	{{-1726.0348,-2805.9812,1001.4000,1.5}, "Взаимодействовать", 0},
	{{-1712.0469,-2811.3040,1004.8141,1.5}, "Взаимодействовать", 0},
	{{1819.1333,2071.1489,15.8546,4.0}, "Взаимодействовать", 0},
	{{-4668.6104,5825.6763,12.2814,2.0}, "Взаимодействовать", 0},
	{{300.3891, 303.9657, 1001.0000, 1.5}, "Взаимодействовать", 0},
	{{294.4982, 303.9030, 1001.0000, 1.5}, "Взаимодействовать", 0},
	{{-1676.8547, -2843.2412, 1004.8162, 1.5}, "Взаимодействовать", 0},
	{{-1672.4026, -2830.1602, 1004.8162, 1.5}, "Взаимодействовать", 0},
	{{2498.6218, 1408.0413, 1000.0214, 1.5}, "Взаимодействовать", 0},
	{{-1627.1138, -1781.9413, 1000.7010, 1.5}, "Взаимодействовать", 0},
	{{578.2440,1723.3358,12.1756, 4.0}, "Взаимодействовать", 0},
	{{436.3647,1562.2180,12.2021, 4.0}, "Взаимодействовать", 0},
	{{-2464.9138,2850.1689,37.7199, 4.0}, "Взаимодействовать", 0},
	{{-2677.8374,184.4783,12.2208, 4.0}, "Взаимодействовать", 0},
	{{-2108.1538,2758.8706,5.9972, 4.0}, "Взаимодействовать", 0},
	{{-2211.7898,-284.1801,23.5022, 4.0}, "Взаимодействовать", 0},
	{{-137.6529,2426.3170,1001.2500, 4.0}, "Взаимодействовать", 0},
	{{837.4645,570.9501,15.8932, 4.0}, "Взаимодействовать", 0},
	{{397.8531,773.1319,12.2179, 4.0}, "Взаимодействовать", 0},
	{{-504.1178,3357.0920,29.7678, 4.0}, "Взаимодействовать", 0},
	{{1868.7927,2847.2537,12.2283, 4.0}, "Взаимодействовать", 0},
	{{2578.7075,-627.0167,12.0825, 4.0}, "Взаимодействовать", 0},
	{{1045.3507,-1903.8646,34.2169, 4.0}, "Взаимодействовать", 0},
	{{2399.6978,-2344.8074,22.0000, 4.0}, "Взаимодействовать", 0},
	{{1928.3876,-1966.8367,31.7385, 4.0}, "Взаимодействовать", 0},
	{{3639.3445,4000.3030,8.0036, 4.0}, "Взаимодействовать", 0},
	{{-2733.0918,-1284.9432,10.2625, 4.0}, "Взаимодействовать", 0},
	{{-1377.1644,5845.6147,75.2045, 2.0}, "Восполнить здоровия", 0},
	{{-756.3052,3292.8477,105.6840, 2.0}, "Восполнить здоровия", 0},
	{{820.3765,3334.0579,105.7040, 2.0}, "Восполнить здоровия", 0},
	{{-1375.3518,5771.7632,75.2513, 2.0}, "Восполнить здоровия", 0},
	{{-1346.3937,5868.8481,102.2663, 2.0}, "Восполнить здоровия", 0},
	{{-1267.2452,5870.1938,102.2072, 2.0}, "Восполнить здоровия", 0},
	{{-1182.4801,5841.1323,71.2532, 2.0}, "Восполнить здоровия", 0},
	{{-685.4864,5914.4971,69.7530, 2.0}, "Восполнить здоровия", 0},
	{{-665.1837,5964.2378,69.6936, 2.0}, "Восполнить здоровия", 0},
	{{-605.8196,5958.6484,69.7365, 2.0}, "Восполнить здоровия", 0},
	{{-431.7410,5993.0347,106.7471, 2.0}, "Восполнить здоровия", 0},
    {{-1389.9951, 6079.3555, 80.5718, 2.0}, "Взаимодействовать", 0},
    {{-1420.8037, 6068.3887, 81.0096, 2.0}, "Взаимодействовать", 0},
    {{-1487.3479, 6080.0352, 82.3720, 2.0}, "Взаимодействовать", 0},
    {{-1525.0974, 6067.6143, 80.6385, 2.0}, "Взаимодействовать", 0},
    {{-1547.4147, 6056.1895, 80.5976, 2.0}, "Взаимодействовать", 0},
    {{-1495.8475, 6125.1919, 80.7214, 2.0}, "Взаимодействовать", 0},
    {{-1372.8329, 6029.9834, 81.1267, 2.0}, "Взаимодействовать", 0},
    {{-1481.1653, 6091.2490, 80.6597, 2.0}, "Взаимодействовать", 0},
	{{-1367.5974,5777.2588,70.3331, 2.0}, "Подняться на верх", 0},
	{{-1341.2112,5855.7026,97.3363, 2.0}, "Подняться на верх", 0},
	{{-658.6159,5950.4038,64.7837, 2.0}, "Подняться на верх", 0},
	{{-597.9608,5963.3374,69.7365, 2.0}, "Вход в лоберинт", 0},
	{{-534.9489,5964.0771,69.3314, 2.0}, "Выход из лоберинта", 0},
	{{-1812.94, -2718.18, 12.49, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.78, -2776.75, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1643.90, -2781.87, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1643.93, -2776.61, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1643.88, -2781.89, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1645.31, -2792.16, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1645.60, -2792.41, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1633.08, -2777.07, 1005.42, 1.5}, "Почистить унитаз", 0},
	{{-1633.08, -2780.70, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1633.10, -2785.95, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1633.09, -2785.92, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1661.53, -2796.47, 1002.06, 1.5}, "Почистить унитаз", 0},
	{{-1628.93, -2794.89, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1628.88, -2795.00, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1652.36, -2807.29, 1002.06, 1.5}, "Почистить унитаз", 0},
	{{-1655.87, -2807.23, 1002.01, 1.5}, "Почистить унитаз", 0},
	{{-1648.09, -2808.86, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1648.03, -2808.95, 1001.57, 1.5}, "Почистить унитаз", 0},
	{{-1659.36, -2807.22, 1002.00, 1.5}, "Почистить унитаз", 0},
	{{-1631.47, -2811.44, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1631.48, -2811.48, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1613.52, -2795.20, 1001.40, 1.5}, "Почистить унитаз", 0},
	{{-1622.12, -2808.64, 1004.81, 1.5}, "Почистить унитаз", 0},
	{{-1622.12, -2808.81, 1001.40, 1.5}, "Почистить унитаз", 0},
	{{-1643.81, -2818.76, 1005.42, 1.5}, "Почистить унитаз", 0},
	{{-1643.84, -2818.76, 1002.03, 1.5}, "Почистить унитаз", 0},
	{{-1633.12, -2816.61, 1005.42, 1.5}, "Почистить унитаз", 0},
	{{-1633.13, -2816.61, 1002.00, 1.5}, "Почистить унитаз", 0},
	{{-1643.83, -2822.27, 1005.44, 1.5}, "Почистить унитаз", 0},
	{{-1643.79, -2822.27, 1001.99, 1.5}, "Почистить унитаз", 0},
	{{-1633.14, -2820.12, 1005.40, 1.5}, "Почистить унитаз", 0},
	{{-1633.14, -2820.12, 1002.00, 1.5}, "Почистить унитаз", 0},
	{{-1612.63, -2808.70, 1004.81, 1.5}, "Почистить унитаз", 0},
	{{-1612.69, -2808.72, 1001.40, 1.5}, "Почистить унитаз", 0},
	{{-1604.27, -2795.02, 1001.40, 1.5}, "Почистить унитаз", 0},
	{{-1604.13, -2795.06, 1004.81, 1.5}, "Почистить унитаз", 0},
	{{-1633.11, -2823.63, 1005.43, 1.5}, "Почистить унитаз", 0},
	{{-1643.80, -2825.78, 1005.41, 1.5}, "Почистить унитаз", 0},
	{{-1633.13, -2823.63, 1002.00, 1.5}, "Почистить унитаз", 0},
	{{-1643.82, -2825.78, 1002.02, 1.5}, "Почистить унитаз", 0},
	{{-1695.54, -2796.56, 1002.00, 1.5}, "Почистить унитаз", 0},
	{{-1693.37, -2807.22, 1002.0, 1.5}, "Почистить унитаз", 0},
	{{-1699.03, -2796.58, 1002.00, 1.5}, "Почистить унитаз", 0},
	{{-1696.88, -2807.19, 1002.01, 1.5}, "Почистить унитаз", 0},
	{{-1702.54, -2796.51, 1002.03, 1.5}, "Почистить унитаз", 0},
	{{-1706.65, -2795.12, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1706.89, -2794.97, 1004.99, 1.5}, "Почистить унитаз", 0},
	{{-1711.07, -2778.00, 1005.43, 1.5}, "Почистить унитаз", 0},
	{{-1711.10, -2778.00, 1002.00, 1.5}, "Почистить унитаз", 0},
	{{-1711.11, -2781.51, 1005.41, 1.5}, "Почистить унитаз", 0},
	{{-1711.10, -2781.51, 1002.01, 1.5}, "Почистить унитаз", 0},
	{{-1711.10, -2785.02, 1005.41, 1.5}, "Почистить унитаз", 0},
	{{-1711.16, -2785.02, 1002.03, 1.5}, "Почистить унитаз", 0},
	{{-1709.57, -2811.60, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1709.63, -2811.72, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1721.74, -2780.14, 1005.42, 1.5}, "Почистить унитаз", 0},
	{{-1721.77, -2780.15, 1002.00, 1.5}, "Почистить унитаз", 0},
	{{-1721.73, -2783.65, 1005.42, 1.5}, "Почистить унитаз", 0},
	{{-1721.76, -2783.66, 1001.99, 1.5}, "Почистить унитаз", 0},
	{{-1721.77, -2787.17, 1002.01, 1.5}, "Почистить унитаз", 0},
	{{-1721.84, -2787.16, 1005.47, 1.5}, "Почистить унитаз", 0},
	{{-1723.13, -2792.12, 1004.97, 1.5}, "Почистить унитаз", 0},
	{{-1723.12, -2792.12, 1001.5, 1.5},  "Почистить унитаз", 0},
	{{-1711.06, -2821.96, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1711.07, -2821.93, 1001.54, 1.5}, "Почистить унитаз", 0},
	{{-1711.01, -2827.29, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1711.08, -2827.20, 1001.54, 1.5}, "Почистить унитаз", 0},
	{{-1721.74, -2817.63, 1001.58, 1.5}, "Почистить унитаз", 0},
	{{-1721.85, -2817.96, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1726.11, -2808.72, 1004.96, 1.5}, "Почистить унитаз", 0},
	{{-1726.11, -2808.81, 1001.54, 1.5}, "Почистить унитаз", 0},
	{{-1721.85, -2823.22, 1001.55, 1.5}, "Почистить унитаз", 0},
	{{-1732.75, -2795.11, 1004.81, 1.5}, "Почистить унитаз", 0},
	{{-1732.75, -2795.15, 1001.40, 1.5}, "Почистить унитаз", 0},
	{{-1721.82, -2826.71, 1005.40, 1.5}, "Почистить унитаз", 0},
	{{-1742.19, -2795.04, 1004.81, 1.5}, "Почистить унитаз", 0},
	{{-1741.35, -2808.70, 1001.40, 1.5}, "Почистить унитаз", 0},
	{{-1750.70, -2808.71, 1004.81, 1.5}, "Почистить унитаз", 0},
	{{-1750.71, -2808.63, 1001.40, 1.5}, "Почистить унитаз", 0},	
	{{-1768.42, -2732.76, 12.70, 2.5}, "Открыть/Закрыть", 0},
	{{-1787.89, -2663.88, 12.34, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.13, -2779.19, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.13, -2779.20, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.14, -2784.49, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.13, -2784.49, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.92, -2779.21, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.80, -2778.03, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.79, -2783.31, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.81, -2783.32, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1637.75, -2790.69, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1646.64, -2794.55, 1003.80, 2.5}, "Открыть/Закрыть", 0},
	{{-1637.76, -2790.70, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1646.65, -2794.53, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1663.75, -2781.17, 1000.38, 2.5}, "Открыть/Закрыть", 0},
	{{-1663.81, -2783.46, 1000.36, 2.5}, "Открыть/Закрыть", 0},
	{{-1652.85, -2797.34, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1656.36, -2797.34, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1631.11, -2793.71, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1631.07, -2793.66, 1000.40, 2.5}, "Открыть/Закрыть", 0},
	{{-1649.63, -2801.35, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1659.87, -2797.34, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1649.64, -2801.35, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1664.64, -2801.35, 1003.89, 2.5}, "Открыть/Закрыть", 0},
	{{-1664.63, -2801.36, 1000.48, 2.5}, "Открыть/Закрыть", 0},
	{{-1654.02, -2806.41, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1657.54, -2806.43, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1661.02, -2806.41, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1627.29, -2802.50, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1645.80, -2810.05, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1627.28, -2802.49, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1645.82, -2810.07, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1618.42, -2797.24, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1618.42, -2797.17, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1630.30, -2809.23, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1630.34, -2809.21, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1638.88, -2813.06, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1638.90, -2813.06, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1676.89, -2799.57, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1642.98, -2817.10, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1642.98, -2817.09, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1617.24, -2806.53, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1617.25, -2806.57, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.93, -2818.27, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.92, -2818.27, 1000.40, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.01, -2820.62, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.00, -2820.61, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1609.00, -2797.23, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1609.01, -2797.24, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.94, -2821.79, 1003.85, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.97, -2821.78, 1000.40, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.00, -2824.12, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1643.00, -2824.12, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1607.83, -2806.56, 1003.84, 2.5}, "Открыть/Закрыть", 0},
	{{-1690.37, -2801.36, 1003.88, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.94, -2825.28, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1607.82, -2806.55, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1690.38, -2801.36, 1000.47, 2.5}, "Открыть/Закрыть", 0},
	{{-1633.93, -2825.30, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1604.16, -2802.46, 1000.38, 2.5}, "Открыть/Закрыть", 0},
	{{-1679.80, -2816.62, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1693.88, -2797.33, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1677.99, -2819.65, 1000.48, 2.5}, "Открыть/Закрыть", 0},
	{{-1697.37, -2797.34, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1684.60, -2819.24, 1000.47, 2.5}, "Открыть/Закрыть", 0},
	{{-1695.03, -2806.42, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1700.87, -2797.32, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1679.25, -2826.92, 1000.48, 2.5}, "Открыть/Закрыть", 0},
	{{-1698.53, -2806.43, 1000.44, 2.5}, "Открыть/Закрыть", 0},
	{{-1702.04, -2806.44, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1705.26, -2802.43, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1705.26, -2802.42, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1709.08, -2793.71, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1709.10, -2793.72, 1000.40, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.91, -2779.67, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.88, -2779.67, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.90, -2783.17, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.90, -2783.17, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.88, -2786.68, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1675.06, -2837.32, 1000.46, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.87, -2786.68, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1708.24, -2809.24, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1708.26, -2809.23, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1716.00, -2790.68, 1003.84, 2.5}, "Открыть/Закрыть", 0},
	{{-1716.00, -2790.67, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1720.98, -2778.48, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1720.97, -2781.99, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1720.98, -2778.49, 1000.40, 2.5}, "Открыть/Закрыть", 0},
	{{-1720.98, -2782.00, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1720.98, -2785.50, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1720.98, -2785.51, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.79, -2819.30, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.77, -2819.28, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1717.15, -2813.05, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1717.15, -2813.06, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1724.61, -2794.53, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1724.60, -2794.54, 1000.43, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.78, -2824.57, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1711.78, -2824.57, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1723.77, -2810.05, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1723.76, -2810.06, 1000.40, 2.5}, "Открыть/Закрыть", 0},
	{{-1727.63, -2801.28, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1727.62, -2801.28, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1721.11, -2820.45, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1721.08, -2820.45, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1720.97, -2824.58, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1721.09, -2825.74, 1000.42, 2.5}, "Открыть/Закрыть", 0},
	{{-1737.65, -2797.22, 1003.83, 2.5}, "Открыть/Закрыть", 0},
	{{-1737.66, -2797.25, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1736.47, -2806.57, 1003.84, 2.5}, "Открыть/Закрыть", 0},
	{{-1736.48, -2806.54, 1000.41, 2.5}, "Открыть/Закрыть", 0},
	{{-1747.08, -2797.24, 1003.82, 2.5}, "Открыть/Закрыть", 0},
	{{-1747.06, -2797.18, 1000.40, 2.5}, "Открыть/Закрыть", 0},
	{{-1745.90, -2806.55, 1003.81, 2.5}, "Открыть/Закрыть", 0},
	{{-1745.89, -2806.56, 1000.40, 2.5}, "Открыть/Закрыть", 0},
	{{-1671.1311,-2826.4065,1004.8162, 2.0}, "Посмотреть камеры", 0},	
	{{-1668.2858,-2826.2517,1004.8162, 2.0}, "Сделать оповещение", 0},	
	{{-1633.3749,950.4099,147.9468,2.0}, "Лифт", 0},
	{{-1633.4974,950.1698,112.0641,2.0}, "Лифт", 0},
	{{-1633.3900,947.4431,147.8163,1.0}, "Диагностика", 0},
	{{-149.6540,372.6490,1000.9922,4.0}, "Открыть ставки", 0},
	{{222.2848,-324.3180,1011.3044,4.0}, "Обменять фишки", 0},
	{{-1759.6050,2894.0237,5.9712, 6.0}, "Открыть аукцион", 0},
	{{2492.6079, 1394.9854, 1000.0214, 2.0}, "Взаимодействовать", 0},
	{{-1852.6345,1277.0465,1115.8447, 2.0}, "Взаимодействовать", 0},
	{{223.4474,-302.4741,1012.0385,2.0}, "Играть в рулетку", 0},
	{{223.1531,-296.3004,1012.0284,2.0}, "Играть в рулетку", 0},
	{{207.7382,-296.5287,1012.0684,2.0}, "Играть в рулетку", 0},
	{{207.9463,-303.3881,1012.0385,2.0}, "Играть в рулетку", 0},
	{{191.6914,-293.2050,1012.8684,2.0}, "Играть в рулетку", 0},
	{{201.4565,-331.6115,1012.0385,2.0}, "Играть в рулетку", 0},
	{{203.0826, -311.5590, 1011.7958,2.5}, "Играть в БлекДжек", 0},
	{{203.1743, -316.7673, 1011.7958,2.5}, "Играть в БлекДжек", 0},
	{{199.7251, -306.3018, 1011.7958,2.5}, "Играть в БлекДжек", 0},
	{{199.3137, -311.7275, 1011.7958,2.5}, "Играть в БлекДжек", 0},
	{{203.5401, -306.3388, 1011.7958,2.5}, "Играть в БлекДжек", 0},
	{{199.5047, -316.9757, 1011.7958,2.5}, "Играть в БлекДжек", 0},
	{{-2508.9167,1478.8176,1080.4944,3.5}, "Купить лицензию", 0},
	{{-3994.8853,4092.6680,38.8887,3.5}, "Календарь волшебства", 0},
	{{204.5841,-282.9256,1011.7900,2.5}, "Играть в кости", 0},
	{{201.1470,-277.1536,1011.7900,2.5}, "Играть в кости", 0},
	{{197.9208,-280.2674,1011.7900,2.5}, "Играть в кости", 0},
	{{198.1707,-285.5460,1011.7900,2.5}, "Играть в кости", 0},
	{{197.7222,-291.1371,1011.7900,2.5}, "Играть в кости", 0},
	{{2346.3789,-2459.9546,1199.3516,1.1}, "Использовать дверь", 0},
	{{2294.7615,-2476.7600,999.5938,1.1}, "Использовать дверь", 0},
	{{2344.7966,-2460.0222,999.3516,1.1}, "Использовать дверь", 0},
	{{91.2822,240.9819,59.1718,1.1}, "Использовать дверь", 0},
	{{1604.4670,-411.6531,1051.0000,1.1}, "Использовать дверь", 0},
	{{-1707.0907,2752.7971,1001.0391,1.1}, "Использовать дверь", 0},
	{{-2546.2422,-1248.9615,1001.0000,1.1}, "Использовать дверь", 0},
	{{-2506.7422,-2802.6072,1049.8594,1.1}, "Использовать дверь", 0},
	{{-2503.8015,1479.2994,1080.4944,3.0}, "Поговорить", 0},
	{{972.4579,2185.8635,20.1675,2.0}, "Поговорить", 0},
	{{-3180.8489,825.0446,6.4200,2.0}, "Поговорить", 0},
	{{1944.6792,-46.1749,6.4177,2.0}, "Поговорить", 0},
	{{2325.9446,-2453.3491,998.63280,2.0}, "Взаимодействовать", 0},
	{{2326.7781,-2454.0798,1009.4453,2.0}, "Взаимодействовать", 0},
	{{3416.4893,2176.6191,5.7745,6.0}, "Записаться на событие", 0},
	{{5.6970000,2230.1436,5.3693,2.0}, "Починить проводку", 0},
	{{3466.4600,2310.8364,6.2727,2.0}, "Починить проводку", 0},
	{{3440.1262,2362.0852,6.4512,2.0}, "Починить проводку", 0},
	{{3515.2839,2378.2913,5.9953,2.0}, "Починить проводку", 0},
	{{3501.6208,2373.2319,6.6328,2.0}, "Позонить в полицию", 0},
	{{2904.5464,2915.6694,1001.0000,2.5}, "Использовать верстак", 0},
	{{-1633.6216,-454.4589,1001.0000,2.5}, "Использовать верстак", 0},
	{{-1613.2582,1581.6844,2005.7100,2.5}, "Использовать верстак", 0},
	{{1601.4122,1764.9572,1096.9688,2.5}, "Использовать верстак", 0}
};

new array_med_bed_data[sizeof g_med_bed_pos];
new array_business_interiors_data[sizeof g_business_interiors];
stock CreateAltHint()
{
	for(new i; i < sizeof g_alt_hint; i++)
	{
		array_hint_data[i] = CreateDynamicSphere(g_alt_hint[i][eHintPos][0], g_alt_hint[i][eHintPos][1], g_alt_hint[i][eHintPos][2], g_alt_hint[i][eHintPos][3], -1, -1);
	}
	for(new i; i < sizeof g_med_bed_pos; i++)
    {
		array_med_bed_data[i] = CreateDynamicSphere(g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2], 1.5, -1, -1);
	}
	for(new i; i < sizeof g_business_interiors; i ++)
	{
		array_business_interiors_data[i] = CreateDynamicSphere(GetBusinessInteriorInfo(i, BT_BUY_POS_X), GetBusinessInteriorInfo(i, BT_BUY_POS_Y), GetBusinessInteriorInfo(i, BT_BUY_POS_Z), 2.0, -1, -1);
	}
}

public: CarsKey_OnPlayerRequst(playerid, bardiq)
{
	new vehicleid = INVALID_VEHICLE_ID;
	new Float:Distance_ = 250.0;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
 		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
  			new iddx = GetVehicleData(i, V_ACTION_ID);
     		if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
       		{
				new Float:Distance = D_PlayerVehicle(playerid, i);
				if(Distance < Distance_)
				{
					Distance_ = Distance;
					vehicleid = i;
				}
			}
		}
	}
	if(Distance_ == 250.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");
	switch(bardiq)
	{
		case 2: // вкл/выкл двигатель
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				if(GetVehicleData(vehicleid, V_FUEL) <= 0.0) return GameText(playerid, "~r~нет бензина", 4000, 2);
				new engine = (GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_ON);
				SetVehicleParam(vehicleid, V_ENGINE, engine);
				if(GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_OFF)
				{
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/car/start_engine_car.wav', 0, 1)");
					GameText(playerid, "~g~ДВИГАТЕЛЬ ЗАВОДИТСЯ...", 1000, 3);
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0) SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 3: // безключевой доступ
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				new query[512];
                new idx = GetVehicleData(vehicleid, V_ACTION_ID);
				if(GetOwnableCarData(idx, OC_NO_KEY_DOSTUP) == 0)
				{
					GameText(playerid, "Вы ~g~включили ~n~~w~безключевой доступ~w~ на это авто", 4000, 1);
					SetOwnableCarData(idx, OC_NO_KEY_DOSTUP, 1);
					mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET no_key_dostup=1 WHERE id=%d", GetOwnableCarData(idx, OC_SQL_ID));
					mysql_query(mysql, query, false);
				}
				else
				{
					GameText(playerid, "Вы ~r~отключили ~n~~g~безключевой доступ~w~ на это авто", 4000, 1);
					SetOwnableCarData(idx, OC_NO_KEY_DOSTUP, 0);
					mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET no_key_dostup=0 WHERE id=%d", GetOwnableCarData(idx, OC_SQL_ID));
					mysql_query(mysql, query, false);
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else
					SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 4: // багажник
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				new status = GetVehicleParam(vehicleid, V_BOOT);
				if(status == VEHICLE_PARAM_OFF)
				{
					Action(playerid, "открыл багажник личного т/с", _, true);
					GameText(playerid, "~w~Багажник ~g~открыт", 4000, 1);
					SetVehicleParam(vehicleid, V_BOOT, VEHICLE_PARAM_ON);
				}
				else if(status == VEHICLE_PARAM_ON)
				{
					Action(playerid, "закрыл багажник личного т/с", _, true);
					GameText(playerid, "~w~Багажник ~r~закрыт", 4000, 1);
					SetVehicleParam(vehicleid, V_BOOT, VEHICLE_PARAM_OFF);
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else
					SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 5: // закрыть/открыть
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				new status = GetVehicleParam(vehicleid, V_LOCK);
				if(status)
				{
					Action(playerid, "открыл личный транспорт", _, true);
					GameText(playerid, "~w~Транспорт ~g~открыт", 4000, 1);
					SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.playSound('https://ik-euro-host.ru/key_unlock.mp3',0, 10311, 10)");
				}
				else
				{
					Action(playerid, "закрыл личный транспорт", _, true);
					GameText(playerid, "~w~Транспорт ~r~закрыт", 4000, 1);
					SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_ON);
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.playSound('https://ik-euro-host.ru/key_lock.mp3',0, 10311, 10)"); //якор
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else
					SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 6: // капот
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				new status = GetVehicleParam(vehicleid, V_BONNET);
				if(status == VEHICLE_PARAM_OFF)
				{
					Action(playerid, "открыл капот личного т/с", _, true);
					GameText(playerid, "~w~Капот ~g~открыт", 4000, 1);
					SetVehicleParam(vehicleid, V_BONNET, VEHICLE_PARAM_ON);
				}
				else if(status == VEHICLE_PARAM_ON)
				{
					Action(playerid, "закрыл капот личного т/с", _, true);
					GameText(playerid, "~w~Капот ~r~закрыт", 4000, 1);
					SetVehicleParam(vehicleid, V_BONNET, VEHICLE_PARAM_OFF);
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else
					SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 7: GameText(playerid, "хз", 3000, 1);
	}
	return 1;
}

stock OpenCarsKey(playerid)
{
	new vehicleid = INVALID_VEHICLE_ID;
	new Float:Distance_ = 250.0;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
 		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
  			new iddx = GetVehicleData(i, V_ACTION_ID);
     		if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
       		{
				new Float:Distance = D_PlayerVehicle(playerid, i);
				if(Distance < Distance_)
				{
					Distance_ = Distance;
					vehicleid = i;
				}
			}
		}
	}
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	if(Distance_ == 250.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");
	if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
	{
		if(GetOwnableCarData(index, OC_NO_KEY_DOSTUP) > 0)
		{
			if(GetPVarInt(playerid, "keys") == 0)
			{
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[[false, \"%s\", \"%s\", %d]]]", GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME_MARK), GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME), index);
				BitStream_2(playerid, s_CefInterface, t_CefShow, "CarKey", STRING_GLOBAL), SetPVarInt(playerid, "keys", 1);
			}
			else BitStream_1(playerid, s_CefInterface, t_CefHide, "CarKey"), DeletePVar(playerid, "keys");
		}
		else GameText(playerid, "На данный транспорт~n~~r~не установлена сигнализация", 2, 3000);
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0) SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");	
		else SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}
	return 1;
}

new gPlayerTuningMenu[MAX_PLAYERS];
#define MAX_TUNING 181
#define MAX_TUNING_MODELS 	25
enum E_VEHICLE_STRUCTS {
	VEH_COMPONENT[MAX_TUNING_MODELS]
}
new g_vehicle[MAX_VEHICLES][E_VEHICLE_STRUCTS];
enum E_VEHICLE_TUNING_STRUCT {
	VT_MODEL[MAX_TUNING_MODELS]
}
enum E_TUNING_MODELS
{
    E_MODEL_ID,
	E_ITEM_ID[MAX_TUNING_MODELS],
	E_ITEM_TYPE[MAX_TUNING_MODELS]
}

new g_tuning_models[MAX_TUNING][E_TUNING_MODELS] =
{
	{402, {5179,5180,5183,5184,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{409, {2874,2875,2876,2877,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{410, {4681,4682,4683,4684,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{411, {1196,1197,1198,1199,1200,1201,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{4,5,4,5,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{415, {4782,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{419, {6326,6327,6328,6329,6330,6331,6332,6333,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,1,1,0,0,15,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{421, {6010,6011,6012,6013,6142,6143,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,1,8,2,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{429, {5163,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{439, {6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{16,16,16,5,5,5,4,4,17,17,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{444, {6001,6002,6003,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,3,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{458, {6270,6271,6272,6273,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{467, {5192,5193,5194,5195,5197,5198,5199,5287,5288,5289,5291,5292,5293,5296,5297,5298,5299,-1,-1,-1,-1,-1,-1,-1,-1},{7,12,5,5,5,5,5,4,4,4,14,15,18,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1}},
	{477, {2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,3834,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,5,5,5,5,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{480, {5997,6054,5998,6055,5999,6056,6000,6057,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{489, {6072,6073,6074,6075,6076,6077,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,5,5,4,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{491, {6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,5,4,4,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{496, {6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,0,5,5,5,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{503, {5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,5,4,4,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{551, {6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{11,0,5,5,5,5,4,4,4,4,18,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{527, {6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,18,18,2,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{533, {5116,5117,5118,5119,5120,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,0,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{534, {6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,4,4,0,18,10,3,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{542, {5958,5959,5960,5961,5962,5963,5964,5965,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,3,5,4,17,17,19,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{547, {6261,6262,6263,6264,6265,6266,6267,6268,6269,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,0,5,5,4,4,18,18,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{549, {2712,2713,2714,2715,2716,2717,2718,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,1,1,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{559, {1065,1066,1067,1068,1158,1159,1160,1161,1162,1173,3809,3810,3811,3812,3813,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,0,0,12,12,2,2,4,4,5,5,5,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{558, {1088,1089,1090,1091,1092,1093,1094,1095,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,1,1,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{560, {1028,1029,1032,1033,1138,1139,1140,1141,1169,1170,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{1,1,8,8,2,2,4,4,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{562, {1034,1035,1036,1037,1038,1039,1040,1041,1146,1147,1148,1149,1171,1172,3874,3875,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,5,4,4,1,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{565, {1150,1151,1152,1153,5859,5860,5861,5862,1054,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{4,4,5,5,5,1,1,2,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{567, {1102,1129,1130,1131,1132,1133,1186,1187,1188,1189,6159,6160,6161,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,9,9,14,15,18,2,5,5,5,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{579, {1194,1195,2635,2636,2645,4691,4692,4693,4694,4695,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{4,5,15,19,7,20,20,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{585, {2659,2660,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{589, {4775,4776,4777,4778,4779,4780,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,5,5,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{600, {6310,6311,6312,6313,6314,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{605, {4675,4676,4677,4678,4679,4680,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{23,23,5,5,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{612, {2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,2,2,2,18,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{613, {1202,1203,1204,2641,2642,2643,2644,6469,6470,6471,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,20,5,4,4,4,6,23,23,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{794, {6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,5,1,1,1,4,2,2,2,2,7,-1,-1,-1,-1,-1,-1,-1,-1}},
	{796, {2637,2638,2639,2640,2646,2647,2648,2651,5890,5966,5967,5968,5969,6462,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{4,5,15,2,7,19,20,23,23,23,5,4,2,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{797, {2811,2812,2813,2814,2815,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{1,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{798, {5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,8,2,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{908, {6102,6103,6104,6105,6106,6107,6108,6109,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,5,5,1,1,1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{1326, {5144,5145,5146,5147,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15065, {3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,-1,-1,-1,-1,-1,-1},{6,6,6,6,24,24,24,5,5,5,5,4,4,4,15,15,2,2,2,2,-1,-1,-1,-1,-1}},
	{15066, {6458,6459,6460,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15068, {2883,2884,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,-1,-1,-1,-1,-1,-1},{6,6,6,3,3,3,3,3,5,5,5,4,4,4,15,2,2,2,2,-1,-1,-1,-1,-1,-1}},
	{15072, {2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,5,4,4,4,24,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15074, {5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,7,7,5,4,8,14,8,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15077, {6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,1,1,1,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15078, {6429,6430,6431,6432,6433,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15079, {6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,5,4,4,8,8,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15080, {2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,5854,5855,5856,5857,-1,-1,-1,-1,-1,-1,-1},{1,1,5,5,4,4,4,18,15,15,18,12,2,2,2,5,3,12,-1,-1,-1,-1,-1,-1,-1}},
	{15085, {5995,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15086, {6004,6005,6006,6007,6008,6009,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15087, {6357,6358,6359,6360,6361,6362,6363,6364,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,1,1,15,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15088, {3971,3972,3973,3974,3975,3976,3977,3978,5996,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,2,2,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15090, {4740,4741,4742,4743,4744,4745,4746,4747,4748,4749,4750,4751,4752,4753,4754,4755,4756,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,5,4,4,4,24,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15093, {4685,4686,4687,4688,4689,4690,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15104, {6463,6464,6465,6466,6467,6468,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,0,5,4,23,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15107, {2667,2668,2669,2670,2671,2672,6132,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,0,5,5,4,2,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15115, {2661,2662,2663,2664,2665,2666,2673,2674,2675,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,20,20,8,12,8,7,14,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15116, {6461,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15120, {2707,2708,2709,2710,2711,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15121, {1205,1206,2652,2694,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{2,5,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15124, {1573,1699,2634,2649,2650,2653,2654,2655,2656,2657,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,6,5,8,5,5,4,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15125, {1163,1164,1165,1166,2724,2725,2726,2727,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,15,0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15126, {2719,2720,2721,2722,2723,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15128, {2735,2736,2737,2738,2739,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15131, {2740,2741,2742,2743,2744,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15140, {2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2816,2817,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,24,24,2,2,0,0,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15141, {2772,2773,2774,2775,2776,2777,6200,6201,6202,6203,6204,6205,6206,6207,6208,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,18,24,2,2,0,5,5,5,4,4,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15142, {2778,2779,2780,2781,2782,6133,6134,6135,6136,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,1,2,2,0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15144, {2759,2760,2761,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15145, {2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,7,18,15,5,5,4,4,2,2,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15146, {6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,17,2,2,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15150, {3919,3920,3921,3922,6438,6439,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,5,4,0,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15151, {6434,6435,6436,6437,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15153, {2836,2837,2838,2839,2840,2841,6564,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15157, {3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,4,1,1,24,24,3,24,24,2,2,2,2,2,-1,-1,-1,-1,-1}},
	{15158, {5174,5175,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,0,0,5,5,4,4,2,2,2,6,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15161, {3823,3824,3825,3826,3827,3828,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15162, {3835,3836,3837,3838,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,6,6,0,0,5,5,4,4,18,18,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15163, {3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,-1,-1,-1,-1,-1,-1},{24,24,24,24,24,5,5,5,5,5,4,4,4,4,4,2,2,2,2,-1,-1,-1,-1,-1,-1}},
	{15164, {4794,4795,4796,4797,4798,4799,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,2,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15166, {3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,6,6,0,0,5,5,4,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15168, {3936,3937,3938,3939,3940,3941,6252,6253,6254,6255,6256,6257,6258,6259,6260,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,4,2,2,2,0,0,0,5,5,5,4,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15171, {6365,6366,6367,6368,6369,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15175, {6124,6125,6126,6127,6128,6129,6130,6131,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,2,6,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15180, {3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4648,4649,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,5,1,1,4,2,18,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15181, {3953,3954,3955,3956,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15183, {3944,3945,3946,3947,3948,3949,3950,3951,3952,6334,6335,6336,6337,6338,6339,6340,6341,-1,-1,-1,-1,-1,-1,-1,-1},{25,5,5,4,4,4,2,2,2,5,5,4,2,17,17,6,6,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15185, {3968,3969,3970,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{8,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15165, {6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,26,5,5,5,4,4,4,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15188, {6014,6015,6016,6017,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15189, {3979,3980,3981,3982,3983,3984,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,4,2,27,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15191, {4784,4785,4786,4787,4788,4789,4790,4791,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15209, {6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,5,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15210, {5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,10,2,2,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15213, {4650,4651,4652,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15217, {4653,4654,4655,4656,4657,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,28,2,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15219, {4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,5,5,5,5,5,5,4,4,2,2,2,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15221, {4672,4673,4674,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,24,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15270, {5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,4,8,8,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15282, {6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,17,15,2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15230, {4783,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15231, {4781,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15631, {5994,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15232, {4696,4697,4698,4699,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{30,19,5,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15237, {4757,4758,5157,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15240, {4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,6,3,3,3,5,5,5,5,4,4,8,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15246, {5161,5162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15247, {5158,5159,5160,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15248, {5152,5153,5154,5155,5156,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15260, {5149,5150,5151,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15266, {5148,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15273, {5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,5,4,4,4,4,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15274, {5125,5126,5127,5128,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,8,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15275, {5121,5122,5123,5124,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{20,31,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15286, {5970,5971,5972,5973,6455,6456,6457,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{17,5,5,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15287, {6425,6426,6427,6428,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15289, {5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,5,4,4,4,2,2,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15290, {6024,6025,6026,6027,6028,6029,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15602, {5176,5177,5178,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,9,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15603, {5181,5182,5185,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15611, {5189,5190,5191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{16,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15617, {5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,16,16,3,5,4,2,2,2,24,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15618, {5863,5864,5865,5866,5867,5868,5869,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{1,1,1,12,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15621, {5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,-1,-1,-1,-1,-1,-1},{6,9,9,3,9,5,12,5,4,4,4,4,4,18,18,2,2,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15622, {6162,6163,6164,6165,6166,6167,6168,6274,6275,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,2,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15630, {5938,5939,5940,5941,5942,5943,5944,5945,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{9,9,5,5,5,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15640, {6137,6138,6139,6140,6141,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15645, {6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,18,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15648, {6169,6170,6171,6172,6173,6174,6175,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,-1,-1,-1,-1,-1,-1,-1,-1},{3,9,9,9,5,5,5,5,1,1,5,5,2,2,8,18,14,12,-1,-1,-1,-1,-1,-1,-1}},
	{15651, {6276,6277,6278,6279,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15654, {1110,1111,1112,1113,1114,1042,1043,1044,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{1,1,8,2,2,6,5,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15655, {6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,5,5,4,4,4,4,10,15,2,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15663, {6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,9,9,5,5,5,4,4,12,8,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15664, {6440,6441,6442,6443,6444,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15675, {6474,6475,6476,6477,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15676, {6484,6485,6486,6487,6488,6489,6490,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,15,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15678, {6479,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15680, {1167,1168,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{475, {6507,6508,6509,6510,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{505, {6480,6481,6482,6483,6550,6551,6552,6553,6554,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,15,16,5,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15249, {6565,6566,6567,6568,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15114, {2676,2677,2678,2679,6472,6473,6569,6570,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,0,2,2,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15119, {2695,2697,2698,2699,2700,2701,2702,2704,2706,2969,2968,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,0,5,5,4,4,14,15,19,19,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{500, {6516,6517,6518,6519,6520,6521,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,23,0,19,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{554, {6523,6524,6525,6526,6527,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{508, {6528,6529,6530,6531,6532,6533,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{30,5,5,4,17,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15070, {6511,6512,6513,6514,6515,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{517, {6522,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15089, {6534,6535,6536,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15652, {6540,6541,6542,6543,6544,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{2,0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15684, {6545,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15685, {6546,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{451, {6547,6548,6549,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15184, {3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3957,3958,3959,3960,3961,3963,3966,-1,-1,-1,-1,-1,-1,-1},{0,5,5,5,1,4,4,2,2,2,2,3,7,5,5,4,0,2,-1,-1,-1,-1,-1,-1,-1}},
	{15280, {17524, 17525, 17526, 17527, 17528, 17529, 17530, 17531, 17532, 17533, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {0, 0, 5, 5, 4, 4, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15161, {1175, 1176, 1177, 1178, 1179, 1180, -1, -1, -1, -1, -1, -1, -1}, {5, 5, 4, 4, 2, 2, -1, -1, -1, -1, -1, -1, -1}},
	{15293, {5152, 5153, 5154, 5155, 5156, -1, -1, -1, -1, -1, -1, -1, -1}, {5, 5, 4, 4, 2, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15600, {6560, 6561, 6562, 6563, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {1, 2, 15, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15605, {17559, 17560, 17561, 17562, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {5, 19, 24, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15177, {2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, -1}, {5, 5, 5, 24, 24, 24, 24, 4, 4, 4, 16, 16, -1}},
	{15633, {17592, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15634, {17551, 17553, 17554, 17555, 17556, 17557, 17558, -1, -1, -1, -1, -1, -1}, {0, 22, 4, 19, 2, 2, 23, -1, -1, -1, -1, -1, -1}},
	{15638, {6210, 6211, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {2, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15637, {6537, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15653, {17582, 17583, 17584, 17585, 17586, 17587, 17588, 17589, 17590, -1, -1, -1, -1}, {0, 0, 0, 5, 5, 5, 4, 4, 4, -1, -1, -1, -1}},
	{15679, {1100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15686, {1123, 1124, 1125, 1126, 1127, -1, -1, -1, -1, -1, -1, -1, -1}, {6, 5, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15690, {18600, 18601, 18602, 18603, 18604, 18605, -1, -1, -1, -1, -1, -1, -1}, {6, 16, 5, 4, 4, 15, -1, -1, -1, -1, -1, -1, -1}},
	{15696, {4658, 4659, 4660, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{15697, {4661, 4662, 4663, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{17403, {17514, 17515, 17516, 17517, 17518, 17519, -1, -1, -1, -1, -1, -1, -1}, {7, 0, 5, 4, 2, 8, -1, -1, -1, -1, -1, -1, -1}},
	{17407, {1065, 1066, 1067, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {14, 7, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{17408, {1027, 1028, 1029, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {5, 4, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{17409, {1030, 1031, 1032, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {7, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}},
	{17412, {17569, 17570, 17571, 17572, 17573, 17574, 17575, 17576, 17577, 17578, 17579, 17580, 17581}, {0, 0, 0, 5, 5, 5, 4, 4, 4, 2, 2, 2, 2}},
	{17419, {3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, -1, -1, -1}, {7, 3, 5, 5, 4, 4, 2, 2, 2, 2, -1, -1, -1}}
};

stock GetTuningVehicle(playerid, vehicleid, tuning, status = 0)
{
	for(new idx; idx < sizeof (g_tuning_models); idx++)
	{
		for(new i; i < MAX_TUNING_MODELS; i++)
		{
			if(GetVehicleModel(vehicleid) == g_tuning_models[idx][E_MODEL_ID])
			{
				if(tuning == g_tuning_models[idx][E_ITEM_ID][i])
				{
					Sendpacket_tun(playerid, vehicleid, tuning, status);
				}
			}
		}
	}
}

enum E_COMPONENT_TYPE_STRUCT
{
	CT_NAME[21],
	Float:CT_POS[3],
	Float:CT_POS_LOOK_AT[3]
}

new g_component_camera_pos[32][E_COMPONENT_TYPE_STRUCT] =
{
   	{"Боковая юбка", {-2502.888427,-601.234802,1001.274719}, {-2498.882080,-598.369506,1000.414550}},
   	{"Система выхлопа", {-2493.299072,-597.512268,1001.173645}, {-2498.242187,-597.533020,1000.421386}},
   	{"Спойлер", {-2493.469726,-597.743896,1003.075073}, {-2497.838867,-597.578125,1000.649475}},
   	{"Фары", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Задний бампер", {-2493.208984, -599.609191, 1001.355590}, {-2497.524414, -597.288146, 1000.361083}},
   	{"Передний бампер", {-2504.3772, -596.3834, 1000.3870}, {-2498.8254, -597.6748, 1000.7870}},
   	{"Капот", {-2505.430664,-597.823425,1003.610046}, {-2501.039062,-597.817871,1001.219787}},
   	{"Накладка на капот", {-2505.430664,-597.823425,1003.610046}, {-2501.039062,-597.817871,1001.219787}},
   	{"Накладка на крышу", {-2503.8228, -597.8410, 1004.2870}, {-2498.8254, -597.6748, 1001.1870}},
   	{"Решетка", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Реснички", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Ноздри", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"LED оптика", {-2504.3772, -596.3834, 1000.3870}, {-2498.8254, -597.6748, 1000.7870}},
	{"Наклейка", {-2505.430664,-597.823425,1003.610046}, {-2501.039062,-597.817871,1001.219787}},
   	{"Багажник на крышу", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Спойлер на крышу", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
   	{"Кузов", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Накладка на кузов", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
  	{"Дефлектор на стекло", {-2493.469726,-597.743896,1003.075073}, {-2497.838867,-597.578125,1000.649475}},
	{"Запасное колесо", {-2493.208984, -599.609191, 1001.355590}, {-2497.524414, -597.288146, 1000.361083}},
	{"Кенгурятник", {-2504.3772, -596.3834, 1000.3870}, {-2498.8254, -597.6748, 1000.7870}},
	{"Кенгурятник задний", {-2493.208984, -599.609191, 1001.355590}, {-2497.524414, -597.288146, 1000.361083}},
	{"Защита", {-2493.208984, -599.609191, 1001.355590}, {-2497.524414, -597.288146, 1000.361083}},
	{"Кузовной набор", {-2502.888427,-601.234802,1001.274719}, {-2498.882080,-598.369506,1000.414550}},
	{"Крыша", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
	{"Кузов и салон", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
	{"Рейлинги", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
	{"Крыша на багажник", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
	{"Мигалки", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
	{"Камеры и радары", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
	{"Тент", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
	{"Шноркель", {-2505.430664,-597.823425,1003.610046}, {-2501.039062,-597.817871,1001.219787}}
};

stock Tuning_OnMenuEvent(playerid, event, category, item)
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	new modelid = GetVehicleData(vehicleid, V_MODELID);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	new query[148];
	new color;
	if(event == 3)
	{
		if(gPlayerTuningMenu[playerid] == 1)
		{
			new sto_exit_1 = GetPVarInt(playerid, "sto_id_exit_1");
			new sto_exit_2 = GetPVarInt(playerid, "sto_id_exit_2");
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				TogglePlayerControllable(playerid, true);
				SetCameraBehindPlayer(playerid);
				SetVehiclePos(vehicleid, g_exit_sto_garage[sto_exit_1][sto_exit_2][0], g_exit_sto_garage[sto_exit_1][sto_exit_2][1], g_exit_sto_garage[sto_exit_1][sto_exit_2][2]);
				SetVehicleZAngle(vehicleid, g_exit_sto_garage[sto_exit_1][sto_exit_2][3]);
				UpdateStoGarage(sto_exit_1, sto_exit_2, 0);
				SetPVarInt(playerid, "sto_id_exit_1", 0);
				SetPVarInt(playerid, "sto_id_exit_2", 0);
				SetPlayerInterior(playerid, 0);
				gPlayerTuningMenu[playerid] = 0;
				SetVehicleVirtualWorld(vehicleid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				LinkVehicleToInterior(vehicleid, 0);
			}
			BitStream_1(playerid, s_CefInterface, t_CefHide, "TuningMenu");
		}
	}	
	if(event == 0)
	{
		if(category == 0) // цвет
		{
  			if(GetPVarInt(playerid, "cl1") != 0)
			{
				color = GetOwnableCarData(vehicleid, OC_COLOR_2);
				if(GetPVarInt(playerid, "color_id1") == -1) ChangeVehicleColor(vehicleid, item, color);
				else ChangeVehicleColor(vehicleid, item, GetPVarInt(playerid, "color_id1"));
				SetPVarInt(playerid, "color_id", item);
			}
	        else
			{
				color = GetOwnableCarData(vehicleid, OC_COLOR_1);
				if(GetPVarInt(playerid, "color_id") == -1) ChangeVehicleColor(vehicleid, color, item);
				else ChangeVehicleColor(vehicleid, GetPVarInt(playerid, "color_id"), item);
				SetPVarInt(playerid, "color_id1", item);
			}
		}
		if(category == 2)
		{
			if(item == 0) RemoveVehicleComponent(vehicleid, GetPVarInt(playerid, "gidra"));  
			if(item == 1) AddVehicleComponent(vehicleid, 1087), SetPVarInt(playerid, "gidra", 1087);
		}
		if(category == 3)
		{
			for(new idx; idx != sizeof g_tuning_models; idx++)
			{
				if(g_tuning_models[idx][E_MODEL_ID] != modelid) continue;
				if(g_tuning_models[idx][E_ITEM_ID][item] == -1) continue;
				if(g_tuning_models[idx][E_MODEL_ID] == GetVehicleModel(vehicleid))
				{
					if(g_tuning_models[idx][E_ITEM_TYPE][item] != -1)
					{
						if(g_tuning_models[idx][E_ITEM_TYPE][item] != GetPVarInt(playerid, "g_tuning_models_id"))
						{
							SetPVarInt(playerid, "g_tuning_models_id", g_tuning_models[idx][E_ITEM_TYPE][item]);
							new Float:pos_x_1 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS][0];
							new Float:pos_y_1 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS][1];
							new Float:pos_z_1 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS][2];
							new Float:pos_x_2 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS_LOOK_AT][0];
							new Float:pos_y_2 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS_LOOK_AT][1];
							new Float:pos_z_2 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS_LOOK_AT][2];
							SetPlayerCameraPos(playerid, pos_x_1, pos_y_1, pos_z_1);
							SetPlayerCameraLookAt(playerid, pos_x_2, pos_y_2, pos_z_2, CAMERA_MOVE);
						}
					}
					Sendpacket_tun(playerid,vehicleid, g_tuning_models[idx][E_ITEM_ID][item]);
					break;
				}
			}
		}
	}
	if(event == 1)
	{
		new price;
		if(category == 0)
		{
	       	if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
			GivePlayerMoneyEx(playerid, -100000, "цвет", true, true);
            price = (100000 / 100) * 40;
			AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), price, 1);
			if(GetPVarInt(playerid, "color_id") != -1)
			{
				SetOwnableCarData(index, OC_COLOR_1, GetPVarInt(playerid, "color_id"));
				format(query, sizeof query, "UPDATE ownable_cars SET color_1=%d WHERE id=%d", GetPVarInt(playerid, "color_id"),GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, query, false);
			}
			if(GetPVarInt(playerid, "color_id1") != -1)
			{
				SetOwnableCarData(index, OC_COLOR_2, GetPVarInt(playerid, "color_id1"));
				format(query, sizeof query, "UPDATE ownable_cars SET color_2=%d WHERE id=%d", GetPVarInt(playerid, "color_id1"),GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		if(category == 2)
		{
		    if(item == 0)
		    {
		        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		        GivePlayerMoneyEx(playerid, -100000, "Гидравлика", true, true);
	            price = (10000 / 100) * 40;
				AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), price, 1);
		    }
  		    if(item == 1)
		    {
		        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 500000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		        GivePlayerMoneyEx(playerid, -500000, "Гидравлика", true, true);
	            price = (500000 / 100) * 40;
				AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), price, 1);
		    }
			if(GetPVarInt(playerid, "gidra") != -1)
			{
				SetOwnableCarData(index, OC_GIDRA, GetPVarInt(playerid, "gidra"));
				format(query, sizeof query, "UPDATE ownable_cars SET gidra=%d WHERE id=%d", GetPVarInt(playerid, "gidra"),GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		if(category == 3)
		{
            if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 2000000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
            GivePlayerMoneyEx(playerid, -2000000, "обвес", true, true);
            price = (2000000 / 100) * 40;
			AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), price, 1);
			STRING_GLOBAL[0] = EOS;
			for(new idx = 0; idx != sizeof g_tuning_models; idx ++)
			{
				if(g_tuning_models[idx][E_MODEL_ID] == GetVehicleModel(vehicleid)) g_vehicle[vehicleid][VEH_COMPONENT][item] = g_tuning_models[idx][E_ITEM_ID][item];
			}
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d", // РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р… РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р… РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р… 17+
			g_vehicle[vehicleid][VEH_COMPONENT][0], g_vehicle[vehicleid][VEH_COMPONENT][1], g_vehicle[vehicleid][VEH_COMPONENT][2], g_vehicle[vehicleid][VEH_COMPONENT][3], g_vehicle[vehicleid][VEH_COMPONENT][4], g_vehicle[vehicleid][VEH_COMPONENT][5],
			g_vehicle[vehicleid][VEH_COMPONENT][6], g_vehicle[vehicleid][VEH_COMPONENT][7], g_vehicle[vehicleid][VEH_COMPONENT][8], g_vehicle[vehicleid][VEH_COMPONENT][9], g_vehicle[vehicleid][VEH_COMPONENT][10], g_vehicle[vehicleid][VEH_COMPONENT][11],
			g_vehicle[vehicleid][VEH_COMPONENT][12], g_vehicle[vehicleid][VEH_COMPONENT][13], g_vehicle[vehicleid][VEH_COMPONENT][14], g_vehicle[vehicleid][VEH_COMPONENT][15], g_vehicle[vehicleid][VEH_COMPONENT][16]);
			if(IsAOwnableCar(vehicleid))
			{
				mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET obves='%s' WHERE id=%d", STRING_GLOBAL, GetOwnableCarData(index, OC_SQL_ID));
				mysql_tquery(mysql, query);
			}
			format(g_ownable_car[index][OC_OBVES], 111, STRING_GLOBAL);
		}
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TuningMenu').balance = %s", GetPlayerMoneyEx(playerid));
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		return 1;
	}

	if(event == 2)
	{
		if(category == 0)
		{
			SetPlayerCameraPos(playerid, -2502.4011, -601.2435, 1004.4632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);
		}
		if(category == 1)
		{
			SetPlayerCameraPos(playerid, -2493.1768, -597.2349, 1000.5632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TuningMenu').setItems('[]')");
		}
		if(category == 2)
		{
			SetPlayerCameraPos(playerid, -2502.4226, -601.2938, 1004.2793);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TuningMenu').setItems('[]')");
			BitStream_1(playerid,s_CefInterface,t_CefUpdate,"interface('TuningMenu').setItems('[[\"Cтоковая гидравливка\", 10000, 0, 0],[\"Гидравлика\", 500000, 0, 0]]')");
		}
		if(category == 3)
		{
			SetPlayerCameraPos(playerid, -2503.8564, -597.7042, 1004.4632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);
	    	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TuningMenu').setItems('[]')");
			STRING_GLOBAL = "";
			for(new i = 0; i != MAX_TUNING_MODELS; i ++)
			{
				for(new idx = 0; idx != sizeof g_tuning_models; idx ++)
				{
					if(g_tuning_models[idx][E_MODEL_ID] != GetVehicleModel(vehicleid)) continue;
					if(g_tuning_models[idx][E_ITEM_ID][i] == -1) continue;

					if(g_tuning_models[idx][E_ITEM_TYPE][i] == -1) strcat(STRING_GLOBAL, "[\"Элемент\", 2000000, 0, 0],");
					else
					{
						format(query, sizeof query, "[\"%s\", 2000000, 0, 0],", g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][i]][CT_NAME]);
						strcat(STRING_GLOBAL, query);
					}
				}
			}
			new str_len = strlen(STRING_GLOBAL);
			strdel(STRING_GLOBAL, str_len-1, str_len);
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TuningMenu').setItems('[%s]')", STRING_GLOBAL);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		if(category == 4)
		{
			SetPlayerCameraPos(playerid, -2493.3545, -599.2065, 1002.6632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TuningMenu').setItems('[]')");
		}
		if(category == 5)
		{
			SetPlayerCameraPos(playerid, -2502.4011, -601.2435, 1004.4632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TuningMenu').setItems('[]')");
		}
	}
	if(event == 4)
	{
     	if(category == 0)
	    {
  			if(GetPVarInt(playerid, "cl1") != 0)
			{
				SetPVarInt(playerid, "cl1", 0);
				GameText(playerid, "~g~Выбран слот №2", 4000, 2);
			}
	        else
			{
				SetPVarInt(playerid, "cl1", 1);
				GameText(playerid, "~g~Выбран слот №1", 4000, 2);
			}
		}
	}
	return 1;
}

new g_player_tinting_price[MAX_PLAYERS];
new const InfoRGB[][3] = {{255,255,255},{0,0,0},{177,177,177},{212,212,212},{36,158,203},{231,99,34},{175,37,129},{234,180,38},{114,201,67}};
stock ClearTintingParams(vehicleid)
{
	if(!IsValidVehicleID(vehicleid)) return 0;
	for(new i; i < 3; i++)
	{
		g_vehicle_data[vehicleid][V_TINTINGS][i] = -1;
		g_vehicle_data[vehicleid][V_TINTINGC][i] = -1;
		g_vehicle_data[vehicleid][V_TINTINGP][i] = -1;
	}
	return 1;
}

stock UpdateTinting(playerid, vehicleid)
{
	new select, color, procent;
	for(new i = 0; i <= 2; i++)
	{
		select = g_vehicle_data[vehicleid][V_TINTINGS][i], color = g_vehicle_data[vehicleid][V_TINTINGC][i], procent = g_vehicle_data[vehicleid][V_TINTINGP][i];
		if(select == -1 || !color || procent == -1 || color > 8) continue;
		if(procent >= 255) g_vehicle_data[vehicleid][V_TINTINGP][i] = 255;
		Sendpacket_toner(playerid, vehicleid, select, InfoRGB[color][0],InfoRGB[color][1],InfoRGB[color][2], procent);
	}
}

stock DeleteToner(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	for(new i = 0; i < 3; i++)
	{
		Sendpacket_toner(playerid, vehicleid, i, 0, 0, 0, 101);
	}
}

stock SetTintingParams(carid, select, color, procent)
{
	g_vehicle_data[carid][V_TINTINGS][select] = select;
	g_vehicle_data[carid][V_TINTINGC][select] = color;
    if(procent != 100) g_vehicle_data[carid][V_TINTINGP][select] = 100 + (procent / 2 * 3);
    else g_vehicle_data[carid][V_TINTINGP][select] = 255;
}

stock SaveOwnableTinting(vehicleid)
{
	new carid = GetVehicleData(vehicleid, V_ACTION_ID),index = GetOwnableCarData(carid, OC_SQL_ID);
	new fmt1[100],fmt2[100],fmt3[100];
	for(new i=0; i <= 2; i++)
	{
		format(fmt1, sizeof fmt1, "%s%i,",fmt1,g_vehicle_data[vehicleid][V_TINTINGS][i]);
		format(fmt2, sizeof fmt2, "%s%i,",fmt2,g_vehicle_data[vehicleid][V_TINTINGC][i]);
		format(fmt3, sizeof fmt3, "%s%i,",fmt3,g_vehicle_data[vehicleid][V_TINTINGP][i]);
	}
	new query[365];
	format(query, sizeof query, "UPDATE `ownable_cars` SET `pselect` = '%s', `tcolor` = '%s', `tprocent` = '%s',`tonerinstall` = '1' WHERE `id` = '%d' LIMIT 1",\
	fmt1,fmt2,fmt3, index);
    mysql_tquery(mysql, query);
}

public: OnPlayerTintingParams(playerid, params[])
{
    new carid = GetPlayerVehicleID(playerid), glass[9];
	sscanf(params, "P<,,|,,|,,>a<i>[9]",glass);
    if(glass[0] != 0)
    {
        SetTintingParams(carid, 0, glass[1], glass[2]);
    }
    if(glass[3] != 0)
    {
        SetTintingParams(carid, 1, glass[4], glass[5]);
    }
    if(glass[6] != 0)
    {
        SetTintingParams(carid, 2, glass[7], glass[8]);
    }
    new price;
    if(glass[2] != 0 || glass[5] != 0 || glass[8] != 0) price = 1200000;
    if(glass[2] != 0 && glass[5] != 0 || glass[8] != 0) price = 2400000;
    if(glass[2] != 0 || glass[5] != 0 && glass[8] != 0) price = 2400000;
    if(glass[2] != 0 && glass[5] != 0 && glass[8] != 0) price = 4800000;
    if(glass[2] > 80) price = price + (glass[2] * 10000);
    if(glass[5] > 80) price = price + (glass[5] * 10000);
    if(glass[8] > 80) price = price + (glass[8] * 10000);
    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TintingOrder').getPrice(%d)", price);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    g_player_tinting_price[playerid] = price;
    UpdateTinting(playerid, carid);
    return 1;
}

public: OnPlayerTintingOrder(playerid, buttons)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new toner_id = GetPlayerInBiz(playerid);
    if(buttons == 1)
    {
        if(g_player_tinting_price[playerid] == 0) return 1;

        string_dialog[0] = EOS;
	    format(string_dialog, 148, "{AFAFAF}Вы хотите приобрести выбранную тонировку за {cc9507}%s руб{AFAFAF}?", formatInt(g_player_tinting_price[playerid]));
	    Dialog(playerid, DIALOG_TINTING_INSTAL, DIALOG_STYLE_MSGBOX, "{FFFFFF}Установка тонировки", string_dialog, "Да", "Отмена");
    }
    if(buttons == 2)
    {
        g_player_tinting_price[playerid] = 0;
        ClearTintingParams(vehicleid);
    }
    if(buttons == 3) 
    {
        SetVehiclePos(vehicleid, GetBusinessData(toner_id, B_EXIT_POS_X), GetBusinessData(toner_id, B_EXIT_POS_Y), GetBusinessData(toner_id, B_EXIT_POS_Z));
        SetVehicleZAngle(vehicleid, GetBusinessData(toner_id, B_EXIT_ANGLE));
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        LinkVehicleToInterior(vehicleid, 0);
        SetVehicleVirtualWorld(vehicleid, 0);
        SetPlayerInBiz(playerid, -1);
        TogglePlayerControllable(playerid, true);
        SetCameraBehindPlayer(playerid);
        BitStream_1(playerid, s_CefInterface, t_CefHide, "TintingOrder");
        ClearTintingParams(vehicleid);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 0)");
    }
    UpdateTinting(playerid, vehicleid);
    return 1;
}

public: OnPlayerTintingSelectGlass(playerid, glass)
{
    if(glass == 1)
    {
        SetPlayerCameraPos(playerid, -3.6452, 498.7973, 1001.8854);
		SetPlayerCameraLookAt(playerid, -6.6452, 501.9935, 1001.2854);
    }
    if(glass == 2)
    {
        SetPlayerCameraPos(playerid, -3.9640, 506.2433, 1001.8854);
		SetPlayerCameraLookAt(playerid, -6.6452, 502.4935, 1001.2854);
    }
    if(glass == 3)
    {
        SetPlayerCameraPos(playerid, -5.6099, 507.8572, 1001.8854);
		SetPlayerCameraLookAt(playerid, -6.6452, 502.4935, 1001.2854);
    }
	return 1;
}

#define MAX_FAMILY              (1000) // максимальное кол-во семей
new gangsklads[MAX_FAMILY];
#define GetFamilyCarData(%0,%1)        g_family_car[%0][%1]
#define SetFamilyCarData(%0,%1,%2)     g_family_car[%0][%1] = %2
#define AddFamilyCarData(%0,%1,%2,%3)  g_family_car[%0][%1] %2= %3
#define GetFamilyData(%0,%1)    g_family[%0][%1]
#define SetFamilyData(%0,%1,%2) g_family[%0][%1] = %2
#define AddFamilyData(%0,%1,%2,%3) g_family[%0][%1] %2= %3
#define GetPlayerFamily(%0)	    GetPlayerData(%0, P_FAMILY)
#define GetPlayerRankFamily(%0)	    GetPlayerData(%0, P_FAMILY_RANK)
enum E_WAR_STRUCT
{
	bool: W_STATUS,
	W_ATTACK_TEAM,
	W_PROTECT_TEAM,
	W_ATTACKER_KILLS,
	W_PROTECTOR_KILLS,
	W_TIME,
	W_WAIT_TIME[3],
	W_BIZ
}

new page_fam[MAX_PLAYERS];
new g_war[E_WAR_STRUCT]; // капты для ОПГ
new zone_war_z[MAX_BUSINESS];
new zone_war_a[MAX_BUSINESS];
enum E_FAMILY_STRUCT // структура семьи
{
    F_SQL_ID,       // ид аккаунта
    F_NAME[63 + 1], // название семьи
    F_USER_ID,      // создатель семьи
    F_TIME,         // время создания
    F_COLOR,        // цвет семьи
    F_LEVEL,        // уровень семьи
    F_EXP,          // опыт семьи
    F_RANK1[32],    // ранг 1
    F_RANK2[32],    // ранг 2
    F_RANK3[32],    // ранг 3
    F_RANK4[32],    // ранг 4
    F_RANK5[32],    // ранг 5
    F_RANK6[32],    // ранг 6
    F_RANK7[32],    // ранг 7
    F_RANK8[32],    // ранг 8
    F_RANK9[32],    // ранг 9
    F_RANK10[32],   // ранг 10
    F_MONEY,        // общак: деньги
    F_DRUGS,        // общак: наркотики
    F_TREE,         // общак: дерево
    F_METAL,        // общак: металл
    F_AMMO,         // общак: патроны
    F_HOUSE_ID,      // номер дома
    Float:F_SPAWN_POSITION[4],    // Позиция спавна
    F_SPAWN_IV[2],
    F_TAKE_MONEY,    //ранг доступа взятия денег со склада семьи
	F_TAKE_DRUGS,    //ранг доступа взятия нарко со склада семьи
	F_TAKE_METALL,    //ранг доступа взятия металла со склада семьи
	F_TAKE_AMMO,    //ранг доступа взятия патронов со склада семьи
	F_RANG_INV,
	F_RANG_UNINV,
	F_RANG_MUTE,
	F_RANG_UNMUTE,
	F_RANG_WARN,
	F_RANG_UNWARN,
	F_RANG_GIVER,
	F_FAMILY_CARS,
	F_GANG,
    F_TIME_DAY,
    F_TIME_MOUNTH,
    F_TIME_YEAR,
    F_TIME_HOUR,
    F_TIME_MINUTE,
    F_TIME_SECOND,
    Text3D: F_SKLAD,
    F_SKLAD_ST,
    F_KD,
};

new g_family[MAX_FAMILY][E_FAMILY_STRUCT];
new F_RANK_MON[MAX_FAMILY][10];
new F_RANK_PAT[MAX_FAMILY][10];
new g_family_loaded;
new g_family_rank[300][5][20];
enum fm
{
	fID,
	fName[32],
	fLeader[32]
};
new FamInfo[300][fm];
new TOTALFAM;

enum E_FAMILY_COLORS
{
	FC_NUMBER[11],
	FC_NAME[32],
	FC_COLOR[7]
}

enum E_FAMILY_CAR_STRUCT
{
    F_CAR_ID,           // Ид авто
    F_SQL_ID,          // ид в базе
    F_OWNER_ID,        // ид владельца
    F_OWNER_NAME[21],  // имя владельца
    F_MODEL_ID,        // модель
    F_COLOR_1,         // цвет 1
    F_COLOR_2,         // цвет 2
    F_RANG,             // С какого ранга
    Float: F_POS_X,    // позиции ТС
    Float: F_POS_Y,    // позиции ТС
    Float: F_POS_Z,    // позиции ТС
    Float: F_ANGLE,    // позиции ТС (угол поворота)
    F_World,
	F_Int,
    bool: OC_KEY_IN,    // вставлен ли ключ
    OC_CREATE,          // время создания
    Float: OC_FUEL      // топливо
};
new g_family_car[MAX_OWNABLE_CARS][E_FAMILY_CAR_STRUCT];
new family_colors[18] =
{
    0xFFFFFFFF, // белый
    0xCD5C5CFF, // багровый
    0xFF0000FF, // красный
    0x8B0000FF, // темно-красный
    0xFFC0CBFF, // светло-розовый
    0xFFA07AFF, // цвет кожи
    0xFFFF00FF, // желтый
    0xFFD700FF, // золотой
    0xEE82EEFF, // фиолетовый
    0x800080FF, // темно-фиолетовый
    0x808080FF, // серый
    0xC0C0C0FF, // серебристый
    0xFF00FFFF, // розовый
    0x8000FFCC, // сиреневый
    0x228B22FF, // лесной
    0x1E90FFFF, // Голубой
    0x00BFFFFF, // цвет неба
    0x0000FFFF, // синий
};

new family_colors_name[18][32] =
{
    {"Белый"},
    {"Багровый"},
    {"Красный"},
    {"Темно-красный"},
    {"Светло-розовый"},
    {"Цвет кожи"},
    {"Желтый"},
    {"Золотой"},
    {"Фиолетовый"},
    {"Темно-фиолетовый"},
    {"Серый"},
    {"Серебристый"},
    {"Розовый"},
    {"Сиреневый"},
    {"Лесной"},
    {"Голубой"},
    {"Цвет неба"},
    {"Синий"}
};

new family_color_car[19][1] =
{
	{1},
	{74},
	{3},
	{78},
	{126},
	{107},
	{6},
	{6},
	{232},
	{233},
	{13},
	{11},
	{226},
	{16},
	{234},
	{2},
	{93},
	{0},
 	{1}
};

enum E_CAPTURE_STRUCT
{
	bool: C_STATUS,
	C_GANG_ZONE,
	C_ATTACK_TEAM,
	C_PROTECT_TEAM,
	C_ATTACKER_KILLS,
	C_PROTECTOR_KILLS,
	C_TIME,
	C_WAIT_TIME[3]
}

new g_capture[E_CAPTURE_STRUCT]; // капты для ОПГ
stock GetFamilyOwnableCarLast(playerid,famid)
{
	new vehicleid = INVALID_VEHICLE_ID;
	new veh_id = GetPlayerVehicleID(playerid);
	new idx = GetVehicleData(veh_id, V_ACTION_ID);
	if(GetOwnableCarData(idx,OC_OWNER_ID) == famid) vehicleid = veh_id;
	return vehicleid;
}

stock GiveFamilyMoneyEx(fam_id, money)
{
    new fmt_str[185];
    AddFamilyData(fam_id, F_MONEY, +, money);
    format(fmt_str, sizeof fmt_str, "UPDATE family SET money=%d WHERE id=%d LIMIT 1", GetFamilyData(fam_id, F_MONEY), fam_id);
    mysql_query(mysql, fmt_str, false);
    return 1;
}
stock FInvitePlayer(playerid, fam_id, give_rang = 1, bool: save = false)
{
    if(!(1 <= give_rang <= 10)) give_rang = 1;

    SetPlayerData(playerid, P_FAMILY, fam_id);
    SetPlayerData(playerid, P_FAMILY_RANK, give_rang);

    if(save)
    {
        new query[80];
        format(query, sizeof query, "UPDATE accounts SET family=%d,family_rank=%d WHERE id=%d",\
            GetPlayerData(playerid, P_FAMILY), GetPlayerData(playerid, P_FAMILY_RANK), GetPlayerAccountID(playerid));
        mysql_query(mysql, query, false);
    }
    return 1;
}

stock FUnInvite(playerid, to_player, reason[] = "")
{
    if(playerid != to_player)
    {
		new fmt_msg[110];
        format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из семьи \"%s\"", GetPlayerNameEx(playerid), playerid, GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME));
        SendClientMessage(to_player, 0xCECECEFF, fmt_msg);
        if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
        {
            format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей семьи", GetPlayerNameEx(to_player), to_player);
            SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
        }
        else
        {
            format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из семьи \"%s\"", GetPlayerNameEx(to_player), to_player, GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME));
            SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
        }
        format(fmt_msg, sizeof fmt_msg, "Уволил %s[acc:%d] из семьи %s. Причина: %s",
        GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME), reason);
		DestroyDynamic3DTextLabel(g_player[to_player][P_FAM_LABEL]);
		g_player[to_player][P_FAM_LABEL] = Text3D: -1;
		SetPlayerColorEx(to_player, GetPlayerTeamColor(playerid));
    }
    else
    {
		new fmt_msg[110];
        format(fmt_msg, sizeof fmt_msg, "Покинул семью %s по собственному желанию", GetPlayerTeamName(to_player));
		DestroyDynamic3DTextLabel(g_player[to_player][P_FAM_LABEL]);
		SetPlayerColorEx(to_player, GetPlayerTeamColor(playerid));
		g_player[to_player][P_FAM_LABEL] = Text3D: -1;
    }
    FInvitePlayer(to_player, 0, 0, true);
    return 1;
}

public: LoadFamily()
{
    new idx;
    new Cache: result, rows;
    result = mysql_query(mysql, "SELECT * FROM family", true);
    rows = cache_num_rows();
    for(idx = 0; idx < rows; idx ++)
    {
        SetFamilyData(idx+1, F_SQL_ID,        cache_get_field_content_int(idx, "id"));
        cache_get_field_content(idx, "name", g_family[idx+1][F_NAME], mysql, 64);
        SetFamilyData(idx+1, F_USER_ID,       cache_get_field_content_int(idx, "u_id"));
        SetFamilyData(idx+1, F_TIME,          cache_get_field_content_int(idx, "time"));
        SetFamilyData(idx+1, F_COLOR,         cache_get_field_content_int(idx, "color"));
        SetFamilyData(idx+1, F_LEVEL,         cache_get_field_content_int(idx, "level"));
        SetFamilyData(idx+1, F_EXP,           cache_get_field_content_int(idx, "exp"));
        SetFamilyData(idx+1, F_TIME_DAY,          cache_get_field_content_int(idx, "day"));
        SetFamilyData(idx+1, F_TIME_MOUNTH,          cache_get_field_content_int(idx, "mounth"));
        SetFamilyData(idx+1, F_TIME_YEAR,          cache_get_field_content_int(idx, "year"));
        SetFamilyData(idx+1, F_TIME_HOUR,          cache_get_field_content_int(idx, "hour"));
        SetFamilyData(idx+1, F_TIME_MINUTE,          cache_get_field_content_int(idx, "minute"));
        SetFamilyData(idx+1, F_TIME_SECOND,          cache_get_field_content_int(idx, "second"));
        F_RANK_MON[idx+1][0] = cache_get_field_content_int(idx, "mon_rank1");
        F_RANK_MON[idx+1][1] = cache_get_field_content_int(idx, "mon_rank2");
        F_RANK_MON[idx+1][2] = cache_get_field_content_int(idx, "mon_rank3");
        F_RANK_MON[idx+1][3] = cache_get_field_content_int(idx, "mon_rank4");
        F_RANK_MON[idx+1][4] = cache_get_field_content_int(idx, "mon_rank5");
        F_RANK_MON[idx+1][5] = cache_get_field_content_int(idx, "mon_rank6");
        F_RANK_MON[idx+1][6] = cache_get_field_content_int(idx, "mon_rank7");
        F_RANK_MON[idx+1][7] = cache_get_field_content_int(idx, "mon_rank8");
        F_RANK_MON[idx+1][8] = cache_get_field_content_int(idx, "mon_rank9");
        F_RANK_MON[idx+1][9] = cache_get_field_content_int(idx, "mon_rank10");
        F_RANK_PAT[idx+1][0] = cache_get_field_content_int(idx, "pat_rank1");
        F_RANK_PAT[idx+1][1] = cache_get_field_content_int(idx, "pat_rank2");
        F_RANK_PAT[idx+1][2] = cache_get_field_content_int(idx, "pat_rank3");
        F_RANK_PAT[idx+1][3] = cache_get_field_content_int(idx, "pat_rank4");
        F_RANK_PAT[idx+1][4] = cache_get_field_content_int(idx, "pat_rank5");
        F_RANK_PAT[idx+1][5] = cache_get_field_content_int(idx, "pat_rank6");
        F_RANK_PAT[idx+1][6] = cache_get_field_content_int(idx, "pat_rank7");
        F_RANK_PAT[idx+1][7] = cache_get_field_content_int(idx, "pat_rank8");
        F_RANK_PAT[idx+1][8] = cache_get_field_content_int(idx, "pat_rank9");
        F_RANK_PAT[idx+1][9] = cache_get_field_content_int(idx, "pat_rank10");
        cache_get_field_content(idx, "rank1", g_family[idx+1][F_RANK1], mysql, 32);
        cache_get_field_content(idx, "rank2", g_family[idx+1][F_RANK2], mysql, 32);
        cache_get_field_content(idx, "rank3", g_family[idx+1][F_RANK3], mysql, 32);
        cache_get_field_content(idx, "rank4", g_family[idx+1][F_RANK4], mysql, 32);
        cache_get_field_content(idx, "rank5", g_family[idx+1][F_RANK5], mysql, 32);
        cache_get_field_content(idx, "rank6", g_family[idx+1][F_RANK6], mysql, 32);
        cache_get_field_content(idx, "rank7", g_family[idx+1][F_RANK7], mysql, 32);
        cache_get_field_content(idx, "rank8", g_family[idx+1][F_RANK8], mysql, 32);
        cache_get_field_content(idx, "rank9", g_family[idx+1][F_RANK9], mysql, 32);
        cache_get_field_content(idx, "rank10", g_family[idx+1][F_RANK10], mysql, 32);
        g_family[idx+1][F_SPAWN_POSITION][0] = cache_get_field_content_float(idx, "pos_x");
        g_family[idx+1][F_SPAWN_POSITION][1] = cache_get_field_content_float(idx, "pos_y");
        g_family[idx+1][F_SPAWN_POSITION][2] = cache_get_field_content_float(idx, "pos_z");
        g_family[idx+1][F_SPAWN_POSITION][3] = cache_get_field_content_float(idx, "pos_fa");
        g_family[idx+1][F_SPAWN_IV][0] =    cache_get_field_content_int(idx, "inter");
        g_family[idx+1][F_SPAWN_IV][1] =    cache_get_field_content_int(idx, "world");
        SetFamilyData(idx+1, F_MONEY,         cache_get_field_content_int(idx, "money"));
        SetFamilyData(idx+1, F_DRUGS,         cache_get_field_content_int(idx, "drugs"));
        SetFamilyData(idx+1, F_TREE,          cache_get_field_content_int(idx, "tree"));
        SetFamilyData(idx+1, F_METAL,         cache_get_field_content_int(idx, "metal"));
        SetFamilyData(idx+1, F_AMMO,          cache_get_field_content_int(idx, "ammo"));
        SetFamilyData(idx+1, F_HOUSE_ID,      cache_get_field_content_int(idx, "house_id"));
        SetFamilyData(idx+1, F_TAKE_MONEY,	cache_get_field_content_int(idx, "r_TakeMoney"));
		SetFamilyData(idx+1, F_TAKE_DRUGS,	cache_get_field_content_int(idx, "r_TakeDrugs"));
		SetFamilyData(idx+1, F_TAKE_METALL,	cache_get_field_content_int(idx, "r_TakeMetall"));
		SetFamilyData(idx+1, F_TAKE_AMMO,		cache_get_field_content_int(idx, "r_TakeAmmo"));
		SetFamilyData(idx+1, F_RANG_INV,		cache_get_field_content_int(idx, "r_Inv"));
		SetFamilyData(idx+1, F_RANG_UNINV,		cache_get_field_content_int(idx, "r_UnInv"));
		SetFamilyData(idx+1, F_RANG_MUTE,		cache_get_field_content_int(idx, "r_Mute"));
		SetFamilyData(idx+1, F_RANG_UNMUTE,		cache_get_field_content_int(idx, "r_UnMute"));
		SetFamilyData(idx+1, F_RANG_WARN,		cache_get_field_content_int(idx, "r_Warn"));
		SetFamilyData(idx+1, F_RANG_UNWARN,		cache_get_field_content_int(idx, "r_UnWarn"));
		SetFamilyData(idx+1, F_RANG_GIVER,		cache_get_field_content_int(idx, "r_GiveRang"));
  		SetFamilyData(idx+1, F_GANG,		cache_get_field_content_int(idx, "gang"));
		SetFamilyData(idx+1, F_FAMILY_CARS,		cache_get_field_content_int(idx, "family_cars"));
		SetFamilyData(idx+1, F_SKLAD_ST,		cache_get_field_content_int(idx, "skladst"));
		SetFamilyData(idx+1, F_SKLAD, Text3D:-1);
		if(GetFamilyData(idx+1, F_USER_ID) == -1) SetFamilyData(idx+1, F_HOUSE_ID, -1);
    }
    g_family_loaded = rows;
    cache_delete(result);
    printf("[Family]: Семьи : %d", g_family_loaded);
	LoadSkladFamily();
}

public: LoadSkladFamily()
{
    for(new fam_id = 0; fam_id <= g_family_loaded; fam_id++)
	{
        new houseid = GetFamilyData(fam_id, F_HOUSE_ID);
		if(houseid != -1)
		{
	        new type = GetHouseData(houseid, H_TYPE);
			DestroyPickup(gangsklads[fam_id]);
			if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
			gangsklads[fam_id] = CreatePickup(1239, 23, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_SKLAD);
			SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z) + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));
			CallLocalFunction("UpdateGangSklad", "i", fam_id);
		}
	}
}

public: UpdateGangSklad(fam_id)
{
	STRING_GLOBAL[0] = EOS;
    format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"{"#cGold"}Склад\n\
		{%06x}%s\n\
		\n\
		{FFFFFF}Наркотики: {FFA500}%d из 2000 г\n\
		{FFFFFF}Патроны: {FFA500}%d из 50000 шт\n\
		{FFFFFF}Материалы: {FFA500}%d из 6000 кг\n\
		{FFFFFF}Деньги: {2a52be}0 руб\n\
		\n\
		%s",

		family_colors[GetFamilyData(fam_id, F_COLOR)] >>> 8,
		GetFamilyData(fam_id, F_NAME),
		GetFamilyData(fam_id, F_SKLAD_ST) ? "{FF6600}Закрыт" : "{33AA33}Открыт"
	);
	UpdateDynamic3DTextLabelText(GetFamilyData(fam_id, F_SKLAD), 0xFFFF00FF, STRING_GLOBAL);
}

stock GetFamilyRang(fam_id, rang_id)
{
    new fmt_rank[32];
    switch(rang_id)
    {
        case 1: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK1]);
        case 2: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK2]);
        case 3: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK3]);
        case 4: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK4]);
        case 5: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK5]);
        case 6: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK6]);
        case 7: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK7]);
        case 8: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK8]);
        case 9: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK9]);
        case 10: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK10]);
        default: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK1]);
    }
    return fmt_rank;
}

stock ShowPayFamilyDialog(playerid)
{
    Dialog
    (
        playerid, DIALOG_PAY_FAMILY, DIALOG_STYLE_INPUT,
        "Банк семьи",
        "{FFFFFF} Введите сумму которую хотите снять с банка семьи",
        "Снять", "Назад"
    );
    return 1;
}

stock ShowChangeRangDialog(playerid)
{
    new query[148],
        fam_id = GetPlayerData(playerid, P_FAMILY);
    string_dialog[0] = EOS;
    format(query, sizeof query, "{%s}1. %s\n", !strcmp(g_family[fam_id][F_RANK1], "Пусто") ? ("FFFFFF") : ("32a44b"), g_family[fam_id][F_RANK1]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}2. %s\n", !strcmp(g_family[fam_id][F_RANK2], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK2]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}3. %s\n", !strcmp(g_family[fam_id][F_RANK3], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK3]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}4. %s\n", !strcmp(g_family[fam_id][F_RANK4], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK4]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}5. %s\n", !strcmp(g_family[fam_id][F_RANK5], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK5]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}6. %s\n", !strcmp(g_family[fam_id][F_RANK6], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK6]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}7. %s\n", !strcmp(g_family[fam_id][F_RANK7], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK7]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}8. %s\n", !strcmp(g_family[fam_id][F_RANK8], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK8]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}9. %s\n", !strcmp(g_family[fam_id][F_RANK9], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK9]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}10. %s\n", !strcmp(g_family[fam_id][F_RANK10], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK10]);
    strcat(string_dialog, query);

    Dialog
    (
        playerid, DIALOG_FAMILY_RANG, DIALOG_STYLE_LIST,
        "Выберите номер ранга",
        string_dialog,
        "Выбрать", "Отмена"
    );
}

stock ShowFamilyInfo(playerid)
{
	new fam_id = GetPlayerFamily(playerid);
    new query[144],name[25],
		Cache: result,
		rows;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE family='%d'", fam_id);
	result = mysql_query(mysql, query);
	rows = cache_num_rows();
	for(new i; i < rows; i ++)
	{
	    new family_rank = cache_get_field_content_int(i, "family_rank");
	    if(family_rank == 10)
	    {
	    	cache_get_field_content(i, "name", name);
	    }
	}
	cache_delete(result);
	string_dialog[0] = EOS;
    format(string_dialog, sizeof string_dialog,
    "{ffffff}Название:{ffd700} \t\t\t%s\n"\
    "{ffffff}Основатель:{ffd700} \t\t\t%s\n"\
    "{ffffff}Дата создания:{ffd700} \t\t\t%02d.%02d.%d %02d:%02d:%02d\n"\
    "{ffffff}Состав:{ffd700} \t\t\t%d чел.\n\n"\
    "{ffffff}Участие в захвате бизнесов:{9acd32} \t\t\tРазрешено\n"\
    "{ffffff}Возможность продавать наркотики:{9acd32} \t\t\tРазрешено\n"\
    "{ffffff}Возможность продавать оружие:{9acd32} \t\t\tРазрешено\n"\
    "{ffffff}Расширенный склад:{9acd32} \t\t\tРазрешено\n\n"\
    "{faac58}Криминальное влияние{ffffff} - это рейтинг который выдается за\n"\
    "{ffffff}совершение криминальных действий, чем больше у вас влияния, тем больше\n"\
    "{ffffff}вы можете получить разрешений от вашей контролирующей мафии, но очки за\n"\
    "{ffffff}каждое действие хранятся всего неделю с момента их начисления\n\n"\
    "{faac58}Рейтинг банды{ffffff} - это криминальное влияние заработанное за все время",
    GetFamilyData(fam_id, F_NAME),
    name,
	GetFamilyData(fam_id, F_TIME_DAY),
    GetFamilyData(fam_id, F_TIME_MOUNTH),
    GetFamilyData(fam_id, F_TIME_YEAR),
    GetFamilyData(fam_id, F_TIME_HOUR),
    GetFamilyData(fam_id, F_TIME_MINUTE),
    GetFamilyData(fam_id, F_TIME_SECOND),
	rows);
    Dialog(playerid, DIALOG_FAMILY_FFF, DIALOG_STYLE_MSGBOX, "Информация", string_dialog, "Назад", "");
}

stock ShowChangeNameDialog(playerid)
{
	if(GetPlayerCurrentDonate(playerid) < 100) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно рублей, требуется 100");
	Dialog
	(
		playerid, DIALOG_FAMILY_NCHANGE, DIALOG_STYLE_INPUT,
		"Смена названия семьи",
		"{FFFFFF}Введите название, которое Вы хотите {ffff00}установить:",
		"Далее", "Отмена"
	);
	return 1;
}

stock ShowFamilyRangSetMenu(playerid)
{
	new fam_id = GetPlayerData(playerid, P_FAMILY);
	string_dialog[0] = EOS;
 	format(string_dialog, sizeof string_dialog,
	"[1]  /finvite | Ранг доступа: %d+\n"\
	"[2]  /funinvite | Ранг доступа: %d+\n"\
	"[3]  /fmute | Ранг доступа: %d+\n"\
	"[4]  /funmute | Ранг доступа: %d+\n"\
	"[5]  /fwarn | Ранг доступа: %d+\n"\
	"[6]  /funwarn | Ранг доступа: %d+\n"\
	"[7]  /frang | Ранг доступа: %d+\n"\
	"[8] Брать деньги со склада | Ранг доступа: %d+\n"\
	"[9] Брать наркотики со склада | Ранг доступа: %d+\n"\
	"[10] Брать металл со склада | Ранг доступа: %d+\n"\
	"[11] Брать патроны со склада | Ранг доступа: %d+",
	GetFamilyData(fam_id, F_RANG_INV),
	GetFamilyData(fam_id, F_RANG_UNINV),
	GetFamilyData(fam_id, F_RANG_MUTE),
	GetFamilyData(fam_id, F_RANG_UNMUTE),
	GetFamilyData(fam_id, F_RANG_WARN),
	GetFamilyData(fam_id, F_RANG_UNWARN),
	GetFamilyData(fam_id, F_RANG_GIVER),
	GetFamilyData(fam_id, F_TAKE_MONEY),
	GetFamilyData(fam_id, F_TAKE_DRUGS),
	GetFamilyData(fam_id, F_TAKE_METALL),
	GetFamilyData(fam_id, F_TAKE_AMMO));
	Dialog(playerid, DIALOG_FAMILY_SETRANG_MENU, DIALOG_STYLE_LIST, "Настройка доступа", string_dialog, "Далее", "Закрыть");
}

stock ShowFamilyHelpCommands(playerid)
{
	new fam_id = GetPlayerData(playerid, P_FAMILY);
	string_dialog[0] = EOS;
 	format(string_dialog, sizeof string_dialog,
	"/finvite - принять игрока | Ранг доступа: %d+\n"\
	"/funinvite - выгнать игрока | Ранг доступа: %d+\n"\
    "/fmute - выдать бан чата| Ранг доступа: %d+\n"\
    "/funmute - снять бан чата | Ранг доступа: %d+\n"\
    "/fwarn - выдать предупреждение | Ранг доступа: %d+\n"\
    "/funwarn - снять предупреждение | Ранг доступа: %d+\n"\
	"/frang- сменить игроку ранг | Ранг доступа: %d+\n"\
	"/f - чат семьи\n"\
	"/fn- NonRP чат семьи\n"\
	"/fpark - припарковать сем транспорт\n"\
	"/sellfcar - продать сем транспорт",
	GetFamilyData(fam_id, F_RANG_INV),
	GetFamilyData(fam_id, F_RANG_UNINV),
	GetFamilyData(fam_id, F_RANG_MUTE),
	GetFamilyData(fam_id, F_RANG_UNMUTE),
	GetFamilyData(fam_id, F_RANG_WARN),
	GetFamilyData(fam_id, F_RANG_UNWARN),
	GetFamilyData(fam_id, F_RANG_GIVER));
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды семьи", string_dialog, "Закрыть", "");
}

stock DestroyFamilyCar(vehicleid)
{
	if(IsAFamilyCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		mysql_format(mysql, query, sizeof query, "DELETE FROM family_cars WHERE id=%d", GetFamilyCarData(index, F_SQL_ID));
		mysql_query(mysql, query, false);
		if(!mysql_errno())
		{
			g_family_car[index][F_OWNER_ID] = -1;
			g_family_car[index][F_SQL_ID] = 0;
			DestroyVehicleLabel(vehicleid);
			UnloadOwnableCarTrunk(vehicleid);
			SetOwnableCarData(index, OC_CREATE, 0);
			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [FamilyCars]: Ошибка удаления семейного ТС: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock GetFreeFamilyCarID()
{
    for(new idx; idx < sizeof g_ownable_car; idx ++)
    {
        if(GetOwnableCarData(idx, OC_CREATE)) continue;

        return idx;
    }
    return -1;
}

public: SaveFamilyCar(vehicleid)
{
	if(IsAFamilyCar(vehicleid))
	{
		new Float: veh_health;
		GetVehicleHealth(vehicleid, veh_health);
		new query[512];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new Float: health;
		GetVehicleHealth(vehicleid, health);
		format
		(
			query, sizeof query,
			"UPDATE family_cars SET "\
			"color_1=%d,"\
			"pos_x=%f,"\
			"pos_y=%f,"\
			"pos_z=%f,"\
			"angle=%f,"\
			"status=%d,"\
			"alarm=%d,"\
			"key_in=%d,"\
			"diski=%d,"\
			"gidra=%d,"\
			"nitro=%d,"\
			"mileage=%f,"\
			"iznos=%d,"\
			"gryaz=%f,"\
			"fuel=%f,"\
			"health=%f,"\
			"vinil=%d,"\
			"typenumber=%d,"\
			"number='%s',"\
			"region='%s'"\
			" WHERE id=%d LIMIT 1",
			GetOwnableCarData(index, OC_COLOR_1),
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z),
			GetOwnableCarData(index, OC_ANGLE),
			GetVehicleParam(vehicleid, V_LOCK),
			GetVehicleParam(vehicleid, V_ALARM),
			GetOwnableCarData(index, OC_KEY_IN),
			GetOwnableCarData(index, OC_DISKI),
			GetOwnableCarData(index, OC_GIDRA),
			GetOwnableCarData(index, OC_NITRO),
			GetVehicleData(vehicleid, V_MILEAGE),
			GetVehicleData(vehicleid, V_IZNOS),
			GetVehicleData(vehicleid, V_GRYAZ),
			GetVehicleData(vehicleid, V_FUEL),
			veh_health,
			GetOwnableCarData(index, OC_VINIL),
			GetOwnableCarData(index, OC_NUMBERTYPE),
			GetOwnableCarData(index, OC_NUMBER),
			GetOwnableCarData(index, OC_REGION),
			GetOwnableCarData(index, OC_SQL_ID)
		);
		mysql_query(mysql, query, false);
	    new fmt_str[148];
	    format(fmt_str, sizeof fmt_str, "UPDATE family_cars SET obves='%s', tonerinstall=%d WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_OBVES),GetOwnableCarData(index, OC_TONERINSTALL), GetOwnableCarData(index, OC_SQL_ID));
	    mysql_query(mysql, fmt_str, false);
		return mysql_errno();
	}
	return -1;
}
stock IsAFamilyCar(vehicleid)
{
    if(IsValidVehicleID(vehicleid))
    {
        if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FAMILY_CAR)
        {
            return 1;
        }
    }
    return 0;
}

stock ViewFamilyCar(playerid)
{
    new id, Cache: result;
	STRING_GLOBAL[0] = EOS;
    mysql_format(mysql, STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM family_cars WHERE owner_id='%d'", GetPlayerData(playerid, P_FAMILY));
    result = mysql_query(mysql, STRING_GLOBAL, true);
    new rows = cache_num_rows();
    if(!rows)
        SendClientMessage(playerid, 0x999999FF, "У Вашей банды нет транспорта");
	else
	{
		new query[140],
			model_id;
		format(string_dialog, sizeof string_dialog, "");
		for(new i = 0; i < rows; i ++)
		{
			id = cache_get_field_content_int(i, "id");
			new rang = cache_get_field_content_int(i, "rang");
			model_id = cache_get_field_content_int(i, "model_id")  ;
			format(query, sizeof query, "{FFFFFF}%d. %s {888888}[%d]<t>Ранг: %d\n", i + 1, GetVehicleInfo(model_id, VI_NAME), model_id + 400,rang);
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, id);
		}
		Dialog
		(
			playerid, DIALOG_FAM_CAR_LIST, DIALOG_STYLE_LIST,
			"{0099FF}Выберите транспорт",
			string_dialog,
			"Выбрать", "Закрыть"
		);
	}
    cache_delete(result);
    return 1;
}

public: LoadFamilyCar(famid, oc_id)
{
	if(g_ownable_car_loaded + 1 > MAX_OWNABLE_CARS)
	{
		print("[OwnableCars]: Ошибка в загрузке. Превышен лимит личного транспорта (MAX_OWNABLE_CARS)");
		return -1;
	}
	new query[55],
		Cache: result,
		vehicleid;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM family_cars WHERE id='%d' LIMIT 1", oc_id);
	result = mysql_query(mysql, query, true);
	new idx = GetFreeOwnableCarID();
	SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(0, "id"));
	SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(0, "owner_id"));
	SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(0, "model_id"));
	SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(0, "color_1"));
	SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(0, "color_2"));
    SetOwnableCarData(idx, OC_VINIL, 		cache_get_field_content_int(0, "vinil"));
	SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(0, "pos_x"));
	SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(0, "pos_y"));
	SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(0, "pos_z"));
	SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(0, "angle"));
	cache_get_field_content(0, "number", GetOwnableCarData(idx, OC_NUMBER), mysql, 30);
    cache_get_field_content(0, "region", g_ownable_car[idx][OC_REGION], mysql, 10);
	cache_get_field_content(0, "obves", g_ownable_car[idx][OC_OBVES], mysql, 333);
 	SetOwnableCarData(idx, OC_TONERINSTALL, 		cache_get_field_content_int(0, "tonerinstall"));
	SetOwnableCarData(idx, OC_DISKI, 		cache_get_field_content_int(0, "diski"));
	SetOwnableCarData(idx, OC_GIDRA, 		cache_get_field_content_int(0, "gidra"));
	SetOwnableCarData(idx, OC_NITRO, 		cache_get_field_content_int(0, "nitro"));
	SetOwnableCarData(idx, OC_NUMBERTYPE, 		cache_get_field_content_int(0, "typenumber"));
	SetOwnableCarData(idx, OC_RANG,         cache_get_field_content_int(0, "rang"));
	SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));
	vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_FAMILY_CAR,
		idx
	);
	if(GetOwnableCarData(idx, OC_TONERINSTALL) != 0)
	{
	}
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		SetVehicleNumberPlate(vehicleid, GetOwnableCarData(idx,OC_NUMBER));
		SetVehicleNumber(vehicleid, GetOwnableCarData(idx, OC_NUMBERTYPE), g_ownable_car[idx][OC_NUMBER], g_ownable_car[idx][OC_REGION]);
		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(0, "mileage"));
		SetVehicleData(vehicleid, V_IZNOS, cache_get_field_content_int(0, "iznos"));
		SetVehicleData(vehicleid, V_GRYAZ, cache_get_field_content_float(0, "gryaz"));
		SetVehicleData(vehicleid, V_FUEL, cache_get_field_content_float(0, "fuel"));
		ChangeVehiclePaintjob(vehicleid, GetOwnableCarData(idx, OC_VINIL));
		new color = family_color_car[GetFamilyData(GetOwnableCarData(idx, OC_OWNER_ID), F_COLOR)][0];
		ChangeVehicleColor(vehicleid, color, color);
		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
		if(GetVehicleData(vehicleid, V_IZNOS) > 65)
		{
		    SetVehicleData(vehicleid, V_HEALTH, 500);
		}
	}
	cache_delete(result);
	return 1;
}

stock UnloadFamilyOwnableCar(vehicleid)
{
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		return -1;
	}
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
    SetOwnableCarData(index, OC_OWNER_ID, 0);
	SetOwnableCarData(index, OC_CREATE, 0);
	SaveFamilyCar(vehicleid);
	DestroyVehicleLabel(vehicleid);
	DestroyVehicle(vehicleid);
	SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);
	return 1;
}

public: FamilyOwnableCarInit(famid, idcar)
{
	new index;
	new vehicleid = -1;
	while(vehicleid < MAX_VEHICLES-1)
	{
		vehicleid ++;
		index = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_FAMILY_CAR) continue;
		if(GetOwnableCarData(index, OC_OWNER_ID) != famid) continue;
		break;
	}
}

stock ShowOwnableCarFamilyLoadDialog(playerid, id, bool: show_menu = false)
{
	SetPVarInt(playerid, "ownablecar_id", id);
	if(show_menu)
		SetPVarInt(playerid, "show_menu", 1);
	if(GetPlayerData(playerid, P_FAMILY_RANK) == 10 || GetPlayerData(playerid, P_FAMILY_RANK) == 9)
	{
		Dialog
		(
			playerid, DIALOG_OWNABLE_CAR_FAMILY, DIALOG_STYLE_LIST,
			"{0099FF}Система управления транспортом",
			"1. Отметить транспорт на GPS {FF6600}(300 рублей)\n"\
			"2. Доставить траспорт на парковку {FF6600}(1000 рублей)\n"\
			"3. Выгрузить транспорт\n"\
			"4. Изменить ранг-доступ транспорта",
			"Выбрать", "Закрыть"
		);
  	}
  	else
  	{
 		Dialog
		(
			playerid, DIALOG_OWNABLE_CAR_FAMILY, DIALOG_STYLE_LIST,
			"{0099FF}Система управления транспортом",
			"1. Отметить транспорт на GPS {FF6600}(300 руб)\n"\
			"2. Доставить траспорт на парковку {FF6600}(1000 руб)",
			"Выбрать", "Закрыть"
		);
  	}

}

stock FamilyLog(playerid = INVALID_PLAYER_ID, desc[])
{
	new query_string[512];
	mysql_format(mysql, query_string, sizeof query_string, "INSERT INTO family_log (fam_id, text) VALUES (%d, '%s')",
	GetPlayerFam(playerid), desc);
	mysql_query(mysql, query_string, false);
	return 1;
}

stock GetPlayerFamilyRang(playerid)
{
	new rang,
		query[80],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT famrank FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	if(cache_num_rows())
		rang = cache_get_row_int(0, 0);
	cache_delete(result);
	return rang;
}

stock GetFamilyCountUsers(f_id)
{
	new count,
		query[80],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE pfam=%d", f_id);
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

stock GetPlayerFamilyRank(playerid)
{
	new family = GetPlayerFam(playerid);
	return g_family_rank[family][g_player[playerid][P_FAMRANK] - 1];
}

stock SendFamilyMessage(playerid, message[])
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || GetPlayerFamily(i) != GetPlayerFamily(playerid)) continue;
		new fmt_str[144];
		format(fmt_str, sizeof fmt_str, "{%s}<%s> %s [%d]: %s", g_family[GetPlayerFamily(playerid)][F_COLOR], g_family[GetPlayerFamily(playerid)][F_NAME], GetPlayerNameEx(playerid), playerid, message);
		SendClientMessage(i, 0xFFFFFFFF, fmt_str);
	}
}

stock PlayerFamilyCreate(playerid)
{
	if(GetPlayerData(playerid, P_LEVEL) < 3) return SendClientMessage(playerid, 0xCECECEFF, "* У вас должен быть 3 лвл");
	if(GetPlayerData(playerid, P_FAMILY) != 0) return SendClientMessage(playerid, 0xCECECEFF, "* Вы уже состоите в семье");
    Dialog
    (
        playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
        "Создание семьи",
        "{999999}- Цена: 50.000.000 рублей<n>\
		{999999}- Только русские и английские символы<n>\
		{999999}- Используйте от 6 до 36 символов<n>\
		{FFFFFF}Введите название Вашей семьи",
        "Создать", "Отмена"
    );
	return 1;
}

public: Gang_OnPlayerCreate(playerid)
{
	new fmt_text[512],query[50];
    for(new i = 0; i < 18; i ++)
	{
    	format(query, sizeof query, "\"%06x\",", family_colors[i]);
		strcat(fmt_text, query);
    }
  	new str_len;
	str_len = strlen(fmt_text);
	strdel(fmt_text, str_len - 1, str_len);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Выберите цвет банды\", [%s], 1]",  fmt_text);
	SetPVarInt(playerid,"colortype",1);
    BitStream_2(playerid, s_CefInterface, t_CefShow, "GangColor", STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefHide, "GangCreate");
}
public: ColorPicker_OnSelect(playerid,list_id)
{
	if(GetPVarInt(playerid,"colortype") == 1)
	{
	    if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 50000000))
	    {
			new query[148],
				Cache: result,
				biz_id;
			mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, query, true);
			new rows = cache_num_rows();
			if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");
			for(new i = 0; i < rows; i ++)
			{
				biz_id = cache_get_field_content_int(i, "id");
			}
			cache_delete(result);
	        GivePlayerMoneyEx(playerid,-50000000,"создание банды",true,true);
		    new fam_id = GetPlayerData(playerid, P_FAMILY),
				fmt_text[556];
		    SetFamilyData(fam_id, F_COLOR, list_id);
	        SetFamilyData(fam_id, F_GANG, 1);
	        SetFamilyData(fam_id, F_FAMILY_CARS, 10);
			SetFamilyData(fam_id, F_HOUSE_ID, biz_id);
	        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d',gang=1,house_id=%d,family_cars=10 WHERE id='%d' LIMIT 1", list_id,biz_id, fam_id);
			mysql_query(mysql, fmt_text, false);
			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				if(GetPlayerData(i, P_FAMILY) == GetPlayerData(playerid, P_FAMILY))
				{
					DestroyDynamic3DTextLabel(g_player[i][P_FAM_LABEL]);
					g_player[i][P_FAM_LABEL] = Text3D: -1;
					SetPlayerColorEx(i, family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)]);
					new text_str[144];
					format(text_str, 144, "{%06x}%s", family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerFamily(i)][F_NAME]);
					g_player[i][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, i, INVALID_VEHICLE_ID, 1);
				}
			}
	        new houseid = GetFamilyData(fam_id, F_HOUSE_ID);
	        new type = GetHouseData(houseid, H_TYPE);
			DestroyPickup(gangsklads[fam_id]);
			if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
	        gangsklads[fam_id] = CreatePickup(1239, 23, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_SKLAD);
			SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z) + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));
			CallLocalFunction("UpdateGangSklad", "i", fam_id);
			format(fmt_text, sizeof fmt_text, "<%s> Ваша семья стала бандой! База находится в доме №%d", GetFamilyData(fam_id, F_NAME), GetFamilyData(fam_id, F_HOUSE_ID));
			SendClientMessage(playerid, 0xFF9C18FF, fmt_text);
		    SetPVarInt(playerid,"colortype",0);
		}
		else SendClientMessage(playerid, 0xFF9C18FF, "Недостаточно средств!");
	}
	if(GetPVarInt(playerid,"colortype") == 2)
	{
	    new fam_id = GetPlayerData(playerid, P_FAMILY),
			fmt_text[556];
	    SetFamilyData(fam_id, F_COLOR, list_id);
        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d' WHERE id='%d' LIMIT 1", list_id, fam_id);
		mysql_query(mysql, fmt_text, false);
		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			if(GetPlayerData(i, P_FAMILY) == GetPlayerData(playerid, P_FAMILY))
			{
				DestroyDynamic3DTextLabel(g_player[i][P_FAM_LABEL]);
				g_player[i][P_FAM_LABEL] = Text3D: -1;
				SetPlayerColorEx(i, family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)]);
				new text_str[144];
				format(text_str, 144, "{%06x}%s", family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerFamily(i)][F_NAME]);
				g_player[i][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, i, INVALID_VEHICLE_ID, 1);
			}
		}
		format(fmt_text, sizeof fmt_text, "Вы успешно изменили цвет семьи {ffff00}%s {1E90FF}на {%06x}%s", GetFamilyData(fam_id, F_NAME), family_colors[list_id] >>> 8, family_colors_name[list_id]);
		SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
		SetPVarInt(playerid,"colortype",0);
	}
	return true;
}

stock GetFamilyCars(fam_id)
{
	new count, query[70], Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM family_cars WHERE owner_id='%d'", fam_id);
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

stock PlayerGangCreate(playerid)
{
    if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не состоите в семье");
    if(1 <= GetPlayerTeamEx(playerid) <= 10) return SendClientMessage(playerid, 0xCECECEFF, "* Для того что бы создать банду вам необходимо уволиться из организации");
	if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "* Вам недоступна данная функция");
    if(GetPlayerData(playerid, P_NAKOLKA) < 7) return SendClientMessage(playerid, 0xCECECEFF, "* Вы должны иметь ранг-наколку 'Пахан' или выше");
    if(GetPlayerHouse(playerid) == -1) return SendClientMessage(playerid, 0xCECECEFF, "* У вас нет дома.");
	if(g_family[GetPlayerFamily(playerid)][F_GANG] != 0) return SendClientMessage(playerid, 0xCECECEFF, "У Вас есть уже банда!");
	BitStream_1(playerid, s_CefInterface, t_CefShow, "GangCreate");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('GangCreate').price = 50000000");
 	return true;
}

new kapt;
CMD:bizwar(playerid)
{
	if(GetPlayerFamily(playerid) != 0 && GetPlayerRankFamily(playerid) >= 8)
	{
	    if(kapt == 1) return SendClientMessage(playerid, 0xCECECEFF, "* В данный момент идет борьба за бизнес!");
		new businessid = GetNearestBusiness(playerid, 4.0);
		if(businessid != -1)
		{
		    if(g_family[GetPlayerFamily(playerid)][F_GANG] == 0) return SendClientMessage(playerid, 0xCECECEFF, "* У вас нет банды, чтобы ее создать подъедьте к одной из особняков мафии");
		    if(g_family[GetPlayerFamily(playerid)][F_KD] == 1) return SendClientMessage(playerid, 0xCECECEFF, "* Недавно у вашей банды был захват бизнеса!");
		    if(GetBusinessData(businessid, B_OWNER_ID) == 0) return SendClientMessage(playerid, 0xCECECEFF, "* Данный бизнес не куплен игроком!");
			if(GetBusinessData(businessid, B_GANG) == GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не можете захватить свой бизнес!");
			if(GetBusinessData(businessid, B_GANG) == 0)
			{
				SetBusinessData(businessid, B_GANG, GetPlayerFamily(playerid));
	            CallLocalFunction("UpdateBusinessLabel", "i", businessid);
				new query[64 + 1];
				format(query, sizeof query, "%s захватили новый бизнес.",g_family[GetPlayerFamily(playerid)][F_NAME]);
				SendFamilysMessage(query);
				format(query, sizeof query, "UPDATE business SET gang=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_GANG), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);
				SetFamilyData(GetPlayerFamily(playerid), F_KD,1);
				SetTimerEx("FamilyKaptKd", 300000, false, "i", GetPlayerFamily(playerid));
			}
			else
			{
			    if(g_family[GetBusinessData(businessid, B_GANG)][F_KD] == 1) return SendClientMessage(playerid, 0xCECECEFF, "* У банды у которой, Вы хотите захватить бизнес недавно был захват!");
			    kapt = 1;
				g_war[W_BIZ] = businessid;
				StartWar(playerid, businessid, GetPlayerFamily(playerid), GetBusinessData(businessid, B_GANG));
			}
		}
	}
	return 1;
}

stock StartWar(playerid, businessid, attack_team, protect_team)
{
	if(g_war[W_STATUS]) return 0;
	new fmt_text[128];
	format(fmt_text, sizeof fmt_text, "%s начали захват бизнеса у %s",
	g_family[attack_team][F_NAME], g_family[protect_team][F_NAME]);
	foreach(new i: Player)
	{
		if(GetPlayerFamily(i) != 0)
		{
			STRING_GLOBAL[0] = EOS;
			SetPlayerData(i,P_KILL_CAPT,0);
		    BitStream_1(i, s_CefInterface, t_CefUpdate, "openInterface('Capture')");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team1.name = '%s'", g_family[attack_team][F_NAME]);
			BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team2.name = '%s'", g_family[protect_team][F_NAME]);
			BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
	}
	SendFamilysMessage(fmt_text);
	g_war[W_STATUS] = true;
	new str[144];
	format(str, sizeof(str), "%s [%d] инициировал захват бизнеса. У вас есть 10 минут для захвата бизнеса", GetPlayerNameEx(playerid), playerid);
	foreach(new i: Player)
	{
		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;
		SendClientMessage(i, 0xFFFFFFFF, str);
	}
	foreach(new idx: Player)
	{
		if(GetPlayerData(idx, P_FAMILY) == g_war[W_ATTACK_TEAM]) continue;
		EnablePlayerGPS(idx, 56, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z), "Место захвата отмечено у вас на карте жёлтым кружочком");
	}
	foreach(new idx: Player)
	{
		if(GetPlayerData(idx, P_FAMILY) == g_war[W_PROTECT_TEAM]) continue;
		EnablePlayerGPS(idx, 56, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z), "Место захвата отмечено у вас на карте жёлтым кружочком");
	}
	GangZoneFlashForAll(zone_war_z[businessid], gang_zone_colors[3]);
	g_war[W_ATTACK_TEAM] = attack_team;
	g_war[W_PROTECT_TEAM] = protect_team;
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Аттака: %d Отпор:%d", g_war[W_ATTACK_TEAM], g_war[W_PROTECT_TEAM]);
	SCM(playerid, -1, STRING_GLOBAL);
	g_war[W_ATTACKER_KILLS] = 0;
	g_war[W_PROTECTOR_KILLS] = 0;
	g_war[W_TIME] = 600;
	UpdateCaptureTextDraw();
	return 1;
}

stock GetFamilyFind(fam_id)
{
	new find;
    foreach(new i: Player)
	{
		if(GetPlayerFamily(i) == fam_id)
		{
		    find++;
		}
	}
	return find;
}
stock SendFamilysMessage(message[])
{
	foreach(new i: Player)
	{
		if(GetPlayerFamily(i) != 0)
		{
			new fmt_str[144];
			format(fmt_str, sizeof fmt_str, "%s", message);
			SendClientMessage(i, COLOR_LIGHTRED, fmt_str);
		}
	}
}

stock EndWar()
{
	if(!g_war[W_STATUS]) return 0;
	new fmt_text[90],
		attack_team = g_war[W_ATTACK_TEAM],
		protect_team = g_war[W_PROTECT_TEAM];
	if(g_war[W_ATTACKER_KILLS] > g_war[W_PROTECTOR_KILLS] || (g_war[W_ATTACKER_KILLS] == 0 && g_war[W_PROTECTOR_KILLS] == 0))
		format(fmt_text, sizeof fmt_text, "%s захватили бизнеса у %s", g_family[attack_team][F_NAME], g_family[protect_team][F_NAME]);
	else
		format(fmt_text, sizeof fmt_text, "Попытка %s захватить бизнеса у %s провалилась", g_family[attack_team][F_NAME],g_family[protect_team][F_NAME]);

	SendFamilysMessage(fmt_text);
	GangZoneStopFlashForAll(zone_war_z[g_war[W_BIZ]]);
	if(g_war[W_ATTACKER_KILLS] > g_war[W_PROTECTOR_KILLS] || (g_war[W_ATTACKER_KILLS] == 0 && g_war[W_PROTECTOR_KILLS] == 0))
	{
		new biz_id = g_war[W_BIZ];
		SetBusinessData(biz_id, B_GANG, g_war[W_ATTACK_TEAM]);
		STRING_GLOBAL[0] = EOS;
		mysql_format(mysql, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE business SET gang = %d WHERE id = %d", GetBusinessData(biz_id, B_GANG), GetBusinessData(biz_id, B_SQL_ID));
		mysql_query(mysql, STRING_GLOBAL, false);
	}
	CallLocalFunction("UpdateBusinessLabel", "i", g_war[W_BIZ]);
	g_war[W_STATUS] = false;
    kapt = 0;
	SetFamilyData(attack_team, F_KD,1);
	SetFamilyData(protect_team, F_KD,1);
	SetTimerEx("FamilyKaptKd", 300000, false, "i", attack_team);
	SetTimerEx("FamilyKaptKd", 300000, false, "i", protect_team);
	g_war[W_ATTACK_TEAM] = -1;
	g_war[W_PROTECT_TEAM] = -1;
	g_war[W_ATTACKER_KILLS] = 0;
	g_war[W_PROTECTOR_KILLS] = 0;
	g_war[W_BIZ] = -1;

	g_war[W_TIME] = 0;
	foreach(new i: Player)
	{
		if(GetPlayerFamily(i) != 0) continue;BitStream_1(i, s_CefInterface, t_CefHide, "Capture");
	}
	foreach(new idx : Player) RemovePlayerMapIcon(idx, 97);
	return 1;
}

public: FamilyKaptKd(fam_id)
{
    SetFamilyData(fam_id, F_KD,0);
}
stock GetPlayerFamilyHouse(playerid)
{
	new fam_id = GetPlayerFamily(playerid);
	if(GetFamilyData(fam_id,F_HOUSE_ID) != -1)
	{
	    return GetFamilyData(fam_id,F_HOUSE_ID);
	}
	return 0;
}
stock ShowInfoGangSklad(playerid)
{
    page_fam[playerid] = 1;
    new fmt_text[148],id,Cache: result;
    mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM family_log WHERE fam_id='%d'", GetPlayerData(playerid, P_FAMILY));
    result = mysql_query(mysql, fmt_text, true);
    new rows = cache_num_rows();
	new query[160], text[144], name[64];
	string_dialog[0] = EOS;
	format(string_dialog, sizeof string_dialog, "");
	for(new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "text", text);
		cache_get_field_content(i, "name", name);

		format(query, sizeof query, "{FFFFFF}%d. %s \t %s\n", i + 1, name, text);
		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, id);
	}
	Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"{0099FF}История склада",string_dialog,"","Закрыть");
    cache_delete(result);
    return 1;
}
stock GiveFamilyLog(playerid, fam_id, text[])
{
	new querys[333];
	mysql_format(mysql, querys, sizeof querys, "INSERT INTO family_log (fam_id, name, text) VALUES (%d,'%s','%s')", fam_id, GetPlayerNameEx(playerid), text);
	mysql_query(mysql, querys, false);
	return 1;
}

stock SetPlayerGravity(playerid, Float: gravity)
{
	if(!IsPlayerConnected(playerid)) return false;
	SPG_PlayerGravity[playerid] = gravity;
	new BitStream:spg_bs = BS_New();
	BS_WriteValue (
		spg_bs,
		PR_FLOAT, gravity
	);
	PR_SendRPC(spg_bs, playerid, 0x02);
	BS_Delete(spg_bs);
	return true;
}

stock BitStream_1(playerid, CefStyle:style, CefType:type, string[])
{
    new
        BitStream:bsn = BS_New();
    BS_WriteValue(bsn, PR_UINT8, ID_CEF_RPC);
    BS_WriteValue(bsn, PR_UINT16, _:style);
	BS_WriteValue(bsn, PR_UINT32, _:type);
	BS_WriteValue(bsn, PR_UINT8, 1);
	BS_WriteValue(
		bsn,
		PR_UINT32, strlen(string),
		PR_STRING, string, strlen(string)
	);
    PR_SendPacket(bsn, playerid);
    BS_Delete(bsn);
	return true;
}

stock BitStream_2(playerid, CefStyle:style, CefType:type, string[], string1[])
{
    new
        BitStream:bsn = BS_New();
    BS_WriteValue(bsn, PR_UINT8, ID_CEF_RPC);
    BS_WriteValue(bsn, PR_UINT16, _:style);
	BS_WriteValue(bsn, PR_UINT32, _:type);
	BS_WriteValue(bsn, PR_UINT8, 2);
	BS_WriteValue(
		bsn,
		PR_UINT32, strlen(string),
		PR_STRING, string, strlen(string)
	);
	BS_WriteValue(
		bsn,
		PR_UINT32, strlen(string1),
		PR_STRING, string1, strlen(string1)
	);
    PR_SendPacket(bsn, playerid);
    BS_Delete(bsn);
	return true;
}

stock SendPacket_Plate(playerid, vehicleid, type, number[], region[])
{
    new
        BitStream:bsn = BS_New();
    BS_WriteValue(bsn, PR_UINT8, ID_CEF_RPC);
    BS_WriteValue(bsn, PR_UINT16, _:s_CefSync);
	BS_WriteValue(bsn, PR_UINT32, vehicleid);
	BS_WriteValue(bsn, PR_UINT32, 0);
	BS_WriteValue(bsn, PR_UINT16, 256);
	BS_WriteValue(bsn, PR_UINT32, type);
	BS_WriteValue(
		bsn,
		PR_UINT32, strlen(number),
		PR_STRING, number, strlen(number)
	);
	BS_WriteValue(
		bsn,
		PR_UINT32, strlen(region),
		PR_STRING, region, strlen(region)
	);
    PR_SendPacket(bsn, playerid);
    BS_Delete(bsn);
}
stock Sendpacket_toner(playerid,  vehicleid, id_glass, color, color1, color2, procent)
{
    new
        BitStream:bsn = BS_New();
    BS_WriteValue(bsn, PR_UINT8, ID_CEF_RPC);
    BS_WriteValue(bsn, PR_UINT16, _:s_CefTinting);
	BS_WriteValue(bsn, PR_UINT32, vehicleid);
	BS_WriteValue(bsn, PR_UINT32, id_glass);
    BS_WriteValue(bsn, PR_UINT8, color);
    BS_WriteValue(bsn, PR_UINT8, color1);
    BS_WriteValue(bsn, PR_UINT8, color2);
    BS_WriteValue(bsn, PR_UINT8, procent);
    PR_SendPacket(bsn, playerid);
    BS_Delete(bsn);
}

stock Sendpacket_tun(playerid, vehicleid, id, status = 0)
{
    new
        BitStream:bsn = BS_New();
    BS_WriteValue(bsn, PR_UINT8, ID_CEF_RPC);
    BS_WriteValue(bsn, PR_UINT16, _:s_CefTuning);
	BS_WriteValue(bsn, PR_UINT32, vehicleid);
	BS_WriteValue(bsn, PR_UINT32, id);
	BS_WriteValue(bsn, PR_UINT32, status);
    PR_SendPacket(bsn, playerid);
    BS_Delete(bsn);
}
stock Cef(playerid, CefStyle:style, CefType:type, string[])
{
    new
        BitStream:bsn = BS_New();
    BS_WriteValue(bsn, PR_UINT8, ID_CEF_RPC);
    BS_WriteValue(bsn, PR_UINT16, _:style);
	BS_WriteValue(bsn, PR_UINT32, _:type);
	BS_WriteValue(bsn, PR_UINT8, 1);
	BS_WriteValue(
		bsn,
		PR_UINT32, strlen(string),
		PR_STRING, string, strlen(string)
	);
    PR_SendPacket(bsn, playerid);
    BS_Delete(bsn);
	return true;
}
stock SendPacket_Chat(playerid, states)
{
    new
        BitStream:bsn = BS_New();
    BS_WriteValue(bsn, PR_UINT8, ID_CEF_RPC);
    BS_WriteValue(bsn, PR_UINT16, 29);
    BS_WriteValue(bsn, PR_UINT32, playerid);
	BS_WriteValue(bsn, PR_UINT32, states);
    PR_SendPacketToPlayerStream(bsn, playerid);
    BS_Delete(bsn);
}
new count_cef_rpc[MAX_PLAYERS];
public OnIncomingPacket(playerid, packetid, BitStream:bs)
{
	switch (packetid) {
		case 207: {

			if(!IsPlayerLogged(playerid))
			{
				if(GetPlayerPing(playerid) > 1200)
				{
					printf("["DETECT_ACH"] Обнаружено подключение бота на сервер | %s", GetPlayerNameEx(playerid));
					Kick(playerid);
					return 1;
				}
			}
		}			
		case ID_CEF_RPC: {

			new bytes;
			BS_GetNumberOfBytesUsed(bs, bytes);
			if (bytes < 6) {
			return 0;
			}
			new
			style, types;
			BS_IgnoreBits(bs, 8);
			BS_ReadUint16(bs, style);
			BS_ReadUint32(bs, types);
			if (style == 3 && IsPlayerVoicMuted(playerid) <= 0)
            {
                if (bytes < 70) return 1;
                SendPacketVoice(playerid, bs);
            }
			if(style == 29)
			{
				SendPacket_Chat(playerid,types);
			}
			if(style == 1)
			{
			static hardware_str[250];
			new mobile;
			BS_ReadUint8(bs, mobile);
			if(mobile == 1) {//MOBILE
			SetPlayerData(playerid,P_MOBILE,1);
			online[0]++;
			}
			else {
			SetPlayerData(playerid,P_MOBILE,0);
			online[1]++;
			}
			BS_ReadString32(bs, hardware_str);
			format(g_player[playerid][P_HARDWARE_ID_TEMP], 250, "%s", hardware_str);
			printf("[CONNECTION] Name: %s[%d] | Hardware: %s | Device: %s", GetPlayerNameEx(playerid),playerid,hardware_str,mobile == 1 ? ("Hassle") : ("Radmir"));//это по желанию
			GetHardwareIDBanned(playerid, hardware_str);
			}
			if (style == _:s_CefInterface) {
				new
					call[64 + 1];
				BS_ReadString32(bs, call);
				if (strcmp(call, "EndedInitializeBrowser") == 0) {
				new
					event;
				BS_IgnoreBits(bs, 40);
				BS_ReadUint32(bs, event);
				#if defined EndedInitializeBrowser
					EndedInitializeBrowser(playerid, event);
				#endif
				}else if(strcmp(call, "ClickPlayerContainerItemBox") == 0) {
					new
						event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					#if defined ClickPlayerContainerItemBox
						ClickPlayerContainerItemBox(playerid, event);
					#endif
				}else if(strcmp(call, "TrainMetro_OnPlayerBuyTicket") == 0) {
				#if defined TrainMetro_OnPlayerBuyTicket
				TrainMetro_OnPlayerBuyTicket(playerid);
				#endif			
				} else if(strcmp(call, "OnContainersChangeBet") == 0) {
	                new
						bet;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, bet);
					#if defined OnContainersChangeBet
						OnContainersChangeBet(playerid, bet);
					#endif
				} else if(strcmp(call, "NewYear_OnPlayerOpenGift") == 0) {
   					#if defined NewYear_OnPlayerOpenGift
						NewYear_OnPlayerOpenGift(playerid);
					#endif
				} else if(strcmp(call, "ADVCAL_OnPlayerTakeReward") == 0) {
			    	new snowiuy;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, snowiuy);
   					#if defined ADVCAL_OnPlayerTakeReward
						ADVCAL_OnPlayerTakeReward(playerid, snowiuy);
					#endif					
				} else if(strcmp(call, "OnContainersCloseBet") == 0) {
					#if defined OnContainersCloseBet
						OnContainersCloseBet(playerid);
					#endif
                } else if(strcmp(call, "OnInteractionsClick") == 0) {
					new type;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
					#if defined OnInteractionsClick
						OnInteractionsClick(playerid, type);
					#endif
				}else if(strcmp(call, "Lottery_OnShowResult") == 0) {
					#if defined Lottery_OnShowResult
						Lottery_OnShowResult(playerid);
					#endif
                }else if(strcmp(call, "Lottery_OnAcceptResult") == 0) {
					#if defined Lottery_OnAcceptResult
						Lottery_OnAcceptResult(playerid);
					#endif
				}else if(strcmp(call, "HackGame_OnPlayerChange") == 0) {
					#if defined HackGame_OnPlayerChange
						HackGame_OnPlayerChange(playerid);
					#endif
				}else if(strcmp(call, "HackGame_OnCloseInterface") == 0) {
					#if defined HackGame_OnCloseInterface
						HackGame_OnCloseInterface(playerid);
					#endif
				}else if(strcmp(call, "CookDrugs_OnCompleteTask") == 0) {
					#if defined CookDrugs_OnCompleteTask
						CookDrugs_OnCompleteTask(playerid);
					#endif
				} else if(strcmp(call, "DCrs_OnPlayerTestDrive") == 0) {
				#if defined DCrs_OnPlayerTestDrive
					DCrs_OnPlayerTestDrive(playerid);
				#endif						
				} else if(strcmp(call, "DCrs_OnPlayerClose") == 0) {
					#if defined DCrs_OnPlayerClose
						DCrs_OnPlayerClose(playerid);
					#endif
				} else if(strcmp(call, "DCrs_OnPlayerBuy") == 0) {
   					#if defined DCrs_OnPlayerBuy
						DCrs_OnPlayerBuy(playerid);
					#endif
                }else if(strcmp(call, "Market_OnSelect") == 0) {
	                new event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					#if defined Market_OnSelect
						Market_OnSelect(playerid, event);
					#endif
                } else if(strcmp(call, "PlayerImprove_OnPlayerBuy") == 0) {
			    	new moderfour;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, moderfour);
   					#if defined PlayerImprove_OnPlayerBuy
						PlayerImprove_OnPlayerBuy(playerid, moderfour);
					#endif
                } else if(strcmp(call, "ADVCAL_OnPlayerTakeReward") == 0) {
	                new
						gift;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, gift);
					#if defined ADVCAL_OnPlayerTakeReward
						ADVCAL_OnPlayerTakeReward(playerid, gift);
					#endif	
				} else if (strcmp(call, "DS_OnPlayerBuyVIP") == 0) {
					new event, event2, event3;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);

					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, event2);

					
					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, event3);

					#if defined DS_OnPlayerBuyVIP
						DS_OnPlayerBuyVIP(playerid, event, event2, event3);
					#endif				
				}else if (strcmp(call, "PlayerSetting_OnPlayerName") == 0) {
					new name[64 + 1];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, name);
					#if defined PlayerSetting_OnPlayerName
						PlayerSetting_OnPlayerName(playerid, name);
					#endif
				}else if (strcmp(call, "PlayerSetting_OnChangePassword") == 0) {
	              	new password[64 + 1];
					new password2[64 + 1];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, password);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, password2);
					#if defined PlayerSetting_OnChangePassword
						PlayerSetting_OnChangePassword(playerid, password, password2);
					#endif
				} else if(strcmp(call, "PlayerSetting_OnPlayerRequest") == 0) {
			    	new type, event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, event);
   					#if defined PlayerSetting_OnPlayerRequest
						PlayerSetting_OnPlayerRequest(playerid, type, event);
					#endif
				} else if(strcmp(call, "CarsKey_OnPlayerRequst") == 0) {
	                new
						moderfourkey;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, moderfourkey);
					#if defined CarsKey_OnPlayerRequst
						CarsKey_OnPlayerRequst(playerid, moderfourkey);
					#endif
				} else if(strcmp(call, "OnBlackJackBetConfirm") == 0) {
	                new bet;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, bet);
					#if defined OnBlackJackBetConfirm
						OnBlackJackBetConfirm(playerid, bet);
					#endif
				} else if(strcmp(call, "OnBlackJackStop") == 0) {
					#if defined OnBlackJackStop
						OnBlackJackStop(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackSplit") == 0) {
					#if defined OnBlackJackSplit
						OnBlackJackSplit(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackDouble") == 0) {
					#if defined OnBlackJackDouble
						OnBlackJackDouble(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackPlusCard") == 0) {
					#if defined OnBlackJackPlusCard
						OnBlackJackPlusCard(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackClose") == 0) {
					#if defined OnBlackJackClose
						OnBlackJackClose(playerid);
					#endif	
				}else if (strcmp(call, "OnPlayerStallCloseTrading") == 0) {
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Stall");
					SetPVarInt(playerid, "stallmanage", 0);
                } else if(strcmp(call, "OnPlayerStallBuy") == 0) {
				    new id;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, id);
					#if defined OnPlayerStallBuy
						OnPlayerStallBuy(playerid, id);
					#endif
				} else if(strcmp(call, "MainMenu_OnPlayerClickDraw") == 0) {
						#if defined MainMenu_OnPlayerClickDraw
					MainMenu_OnPlayerClickDraw(playerid);
					#endif					
				}else if(strcmp(call, "OnPlayerSelectFuelClass") == 0) {
	                new event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					#if defined OnPlayerSelectFuelClass
						OnPlayerSelectFuelClass(playerid, event);
					#endif
				}else if(strcmp(call, "OnPlayerFillClose") == 0) {
					#if defined OnPlayerFillClose
						OnPlayerFillClose(playerid);
					#endif
                }else if(strcmp(call, "OnPlayerStallCardEvent") == 0) {
				    new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined OnPlayerStallCardEvent
						OnPlayerStallCardEvent(playerid, event);
					#endif
	            } else if(strcmp(call, "OnPlayerSelectStallItem") == 0) {
				    new id;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, id);
					#if defined OnPlayerSelectStallItem
						OnPlayerSelectStallItem(playerid, id);
					#endif
				}else if(strcmp(call, "OnPlayerManageEvent") == 0) {
	                new
						event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					#if defined OnPlayerManageEvent
						OnPlayerManageEvent(playerid, event);
					#endif
	            } else if (strcmp(call, "OnRegistrationCharacter") == 0) {
					new
					    eventid, row, skin;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, eventid);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, row);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, skin);
					#if defined OnRegistrationCharacter
						OnRegistrationCharacter(playerid, eventid, row, skin);
					#endif
				} else if (strcmp(call, "OnRegistrationBonuses") == 0) {
					new name[21];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, name);
					#if defined OnRegistrationBonuses
						OnRegistrationBonuses(playerid, name);
					#endif
                }else if(strcmp(call, "OnPlayerSelectSpawn") == 0){
				    new
						listitem;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, listitem);
					#if defined OnPlayerSelectSpawn
						OnPlayerSelectSpawn(playerid, listitem);
					#endif
 				}else if(strcmp(call, "OnPlayerSelectSpawnClose") == 0){
					#if defined OnPlayerSelectSpawnClose
						OnPlayerSelectSpawnClose(playerid);
					#endif
	            } else if(strcmp(call, "Gang_OnPlayerCreate") == 0) {
	       			#if defined Gang_OnPlayerCreate
						Gang_OnPlayerCreate(playerid);
					#endif
				}else if(strcmp(call, "OnInventoryItemMove") == 0) {
					new
						where, event, from, slot, count_1;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, where);
		            BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, from);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, slot);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, count_1);
					#if defined OnInventoryItemMove
						OnInventoryItemMove(playerid, where, event, from, slot, count_1);
					#endif
				}else if(strcmp(call, "OnItemsInterfaceClose") == 0) {
					#if defined OnItemsInterfaceClose
						OnItemsInterfaceClose(playerid);
					#endif
				}else if(strcmp(call, "ColorPicker_OnChangePage") == 0) {
					#if defined ColorPicker_OnChangePage
						ColorPicker_OnChangePage(playerid);
					#endif
				}else if(strcmp(call, "ColorPicker_OnClose") == 0) {
					#if defined ColorPicker_OnClose
						ColorPicker_OnClose(playerid);
					#endif
				}else if(strcmp(call, "OnMiniGamePlayerComplete") == 0) {
					#if defined OnMiniGamePlayerComplete
						OnMiniGamePlayerComplete(playerid);
					#endif
                }else if(strcmp(call, "ActionBot_OnPressButton") == 0){
				    new
						event, id_actor;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, id_actor);
					#if defined ActionBot_OnPressButton
						ActionBot_OnPressButton(playerid, event, id_actor);
					#endif
                }else if(strcmp(call, "BonusCode_OnPlayerOpenRewards") == 0) {
                    new
					    listitem;
					BS_ReadUint32(bs, listitem);
					BS_IgnoreBits(bs, 8);
					#if defined BonusCode_OnPlayerOpenRewards
						BonusCode_OnPlayerOpenRewards(playerid, listitem);
					#endif
                }else if(strcmp(call, "ActionBot_OnPressButton") == 0){
				    new
						event, id_actor;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, id_actor);
					#if defined ActionBot_OnPressButton
						ActionBot_OnPressButton(playerid, event, id_actor);
					#endif
                }else if(strcmp(call, "Promocode_OnPlayerActivate") == 0) {
                    new
						inputtext[250];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, inputtext);
					#if defined Promocode_OnPlayerActivate
						Promocode_OnPlayerActivate(playerid, inputtext);
					#endif
				}else if(strcmp(call, "BonusCode_OnPlayerActivate") == 0) {
                    new
						inputtext[250];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, inputtext);
					#if defined BonusCode_OnPlayerActivate
						BonusCode_OnPlayerActivate(playerid, inputtext);
					#endif
				}else if(strcmp(call, "OnProgressBarClick") == 0) {
					#if defined OnProgressBarClick
						OnProgressBarClick(playerid);
					#endif
				}else if(strcmp(call, "OnMiniGamePlayerClose") == 0) {
					#if defined OnMiniGamePlayerClose
						OnMiniGamePlayerClose(playerid);
					#endif
				}else if(strcmp(call, "ColorPicker_OnSelect") == 0) {
	                new
						idx;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, idx);
					#if defined ColorPicker_OnSelect
						ColorPicker_OnSelect(playerid, idx);
					#endif
                }else if(strcmp(call, "CarSH_OnPlayerRequest") == 0) {
				    new app_id, xz, ssss;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, app_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, xz);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, ssss);
					#if defined CarSH_OnPlayerRequest
						CarSH_OnPlayerRequest(playerid, app_id, xz, ssss);
					#endif
				}else if(strcmp(call, "Employment_OnPlayerApply") == 0) {
				    new type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);
					#if defined Employment_OnPlayerApply
						Employment_OnPlayerApply(playerid, type);
					#endif
				}else if(strcmp(call, "Employment_OnPlayerClose") == 0) {
					#if defined Employment_OnPlayerClose
						Employment_OnPlayerClose(playerid);
					#endif
				}else if(strcmp(call, "Employment_OnPlayerQuit") == 0) {
					#if defined Employment_OnPlayerQuit
						Employment_OnPlayerQuit(playerid);
					#endif
	 			}else if(strcmp(call, "PaintBall_OnPlayerCreateLobby") == 0) {
				    new gun,price,players,status,code,location,round;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, gun);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, price);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, players);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, code);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, location);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, round);
					#if defined PaintBall_OnPlayerCreateLobby
						PaintBall_OnPlayerCreateLobby(playerid, gun,price,players,status,code,location,round);
					#endif
	 			}else if(strcmp(call, "PaintBall_OnPlayerExitMenu") == 0) {
	                BitStream_1(playerid, s_CefInterface, t_CefHide, "Paintball");
	                SetPVarInt(playerid, "paintboll", 0);
				}else if(strcmp(call, "OnTrainingHintsClose") == 0) {
	                BitStream_1(playerid, s_CefInterface, t_CefHide, "Tutorial");
		   			{
	   			 	SetCameraBehindPlayer(playerid);
					return 1;
					}
				}else if(strcmp(call, "PaintBall_OnPlayerSelectLobby") == 0) {
				    new lobby_id, status;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, lobby_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status);
					#if defined PaintBall_OnPlayerSelectLobby
						PaintBall_OnPlayerSelectLobby(playerid, lobby_id, status);
					#endif
				} else if (strcmp(call, "OnPlayerTicketClick") == 0) {
	                new t;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, t);
	       			#if defined OnPlayerTicketClick
						OnPlayerTicketClick(playerid);
					#endif
  			    }else if(strcmp(call, "OnPlayerStartCharging") == 0) {
				    new fuelmax;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, fuelmax);
		            format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Бензин откладка: %d", fuelmax);
					#if defined OnPlayerStartCharging
						OnPlayerStartCharging(playerid, fuelmax);
					#endif
				}else if(strcmp(call, "OnInventoryItemGive") == 0) {
				    new event, type, count;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, count);
					#if defined OnInventoryItemGive
						OnInventoryItemGive(playerid, event, type, count);
					#endif
		        }else if(strcmp(call, "OnPlayerStopCharging") == 0) {
					#if defined OnPlayerStopCharging
						OnPlayerStopCharging(playerid);
					#endif
				} else if (strcmp(call, "OnRegistrationData") == 0) {
	            	new
						email[64 + 1],
						password_first[64 + 1],
						password_second[64 + 1];
	                BS_IgnoreBits(bs, 40);
	                BS_ReadString32(bs, email);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, password_first);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, password_second);
					#if defined OnRegistrationData
						OnRegistrationData(playerid, email, password_first, password_second);
					#endif					
                } else if(strcmp(call, "ClickPlayerDancingList") == 0) {
		       	    new danceid;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, danceid);
					#if defined ClickPlayerDancingList
						ClickPlayerDancingList(playerid, danceid);
					#endif
	            } else if (strcmp(call, "OnPlayerRoulSetBet") == 0) {
					new
					    ty, te;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, ty);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, te);
	                #if defined OnPlayerRoulSetBet
	                    OnPlayerRoulSetBet(playerid, ty, te);
					#endif
	            } else if(strcmp(call, "OnPlayerRoulClose") == 0) {
					#if defined OnPlayerRoulClose
						OnPlayerRoulClose(playerid);
					#endif
				} else if (strcmp(call, "OnPlayerDumpSetBet") == 0) {
					new
					    ta;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, ta);
		            #if defined OnPlayerDumpSetBet
		                OnPlayerDumpSetBet(playerid, ta);
					#endif
		        }else if(strcmp(call, "OnPlayerDumpClose") == 0) {
  					#if defined OnPlayerDumpClose
						OnPlayerDumpClose(playerid);
					#endif
	            } else if(strcmp(call, "OnPlayerRoulClickBet") == 0) {
				    new ti;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, ti);
					#if defined OnPlayerRoulClickBet
						OnPlayerRoulClickBet(playerid, ti);
					#endif
				}else if (strcmp(call, "OnActivateBonusOrPromocode") == 0) {
					new
					password[64 + 1];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, password);
					#if defined OnActivateBonusOrPromocode
						OnActivateBonusOrPromocode(playerid, password);
					#endif		
				}else if (strcmp(call, "OnPlayerOpenMainMenuPromocodes") == 0) {
					new
					password[64 + 1];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, password);
					#if defined OnPlayerOpenMainMenuPromocodes
						OnPlayerOpenMainMenuPromocodes(playerid);
					#endif	
	            }else if(strcmp(call, "OnInventoryDisplayChange") == 0) {
						#if defined OnInventoryDisplayChange
							OnInventoryDisplayChange(playerid, inventory_status[playerid]);
						#endif
	            }else if (strcmp(call, "OnAuthorizationStart") == 0) {
	              	new
	            	    password[64 + 1];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, password);
					#if defined OnAuthorizationStart
						OnAuthorizationStart(playerid, password);
					#endif
                }else if (strcmp(call, "OnPlayerSelectBillboardItem") == 0) {
	              	new
						id;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, id);
					#if defined OnPlayerSelectBillboardItem
						OnPlayerSelectBillboardItem(playerid, id);
					#endif
                }else if (strcmp(call, "OnPlayerEventRentCar") == 0) {
	              	new
						id;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, id);
					#if defined OnPlayerEventRentCar
						OnPlayerEventRentCar(playerid, id);
					#endif
				} else if(strcmp(call, "OnAuctionPlayerSetBet") == 0) {
				    new id, count;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, id);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, count);
					#if defined OnAuctionPlayerSetBet
						OnAuctionPlayerSetBet(playerid, id, count);
					#endif
	            } else if(strcmp(call, "OnAuctionPlayerAction") == 0) {
				    new type, event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, event);
					#if defined OnAuctionPlayerAction
						OnAuctionPlayerAction(playerid, type, event);
					#endif
				}else if(strcmp(call, "OnAuctionPlayerClose") == 0) {
					#if defined OnAuctionPlayerClose
						OnAuctionPlayerClose(playerid);
					#endif
				}else if(strcmp(call, "OnAuctionPlayerCreateLot") == 0) {
					new type, bet, time;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, bet);
					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, time);
					#if defined OnAuctionPlayerCreateLot
						OnAuctionPlayerCreateLot(playerid, type, bet, time);
					#endif
				}else if(strcmp(call, "OnDetailingVinylsInstall") == 0) {
					new type;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
					#if defined OnDetailingVinylsInstall
						OnDetailingVinylsInstall(playerid, type);
					#endif
				}else if(strcmp(call, "OnDetailingVinylsChange") == 0) {
					new type;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
					#if defined OnDetailingVinylsChange
						OnDetailingVinylsChange(playerid, type);
					#endif
				}else if(strcmp(call, "OnDetailingVinylsClose") == 0) {
					#if defined OnDetailingVinylsClose
						OnDetailingVinylsClose(playerid);
					#endif
				}else if(strcmp(call, "Tuning_OnRimItemChange") == 0) {
					new type;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
					#if defined Tuning_OnRimItemChange
						Tuning_OnRimItemChange(playerid, type);
					#endif
				}else if(strcmp(call, "Tuning_OnRimInstall") == 0) {
					new type;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
					#if defined Tuning_OnRimInstall
						Tuning_OnRimInstall(playerid, type);
					#endif
				}else if(strcmp(call, "Tuning_OnRimCamera") == 0) {
					new type;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
					#if defined Tuning_OnRimCamera
						Tuning_OnRimCamera(playerid, type);
					#endif
				}else if(strcmp(call, "Tuning_OnRimClose") == 0) {
					#if defined Tuning_OnRimClose
						Tuning_OnRimClose(playerid);
					#endif
				} else if (strcmp(call, "OnRaceLobbyEnter") == 0) {

					#if defined OnRaceLobbyEnter
						OnRaceLobbyEnter(playerid);
					#endif
                }else if(strcmp(call, "OnRaceLobbyCreate") == 0) { // гонки

				    new type, bet, members, password[3 + 1], class;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, type);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, bet);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, members);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, password);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, class);
					#if defined OnRaceLobbyCreate
						OnRaceLobbyCreate(playerid, type, bet, members, password, class);
					#endif
	            }else if (strcmp(call, "OnPlayerSetupBillboard") == 0) {
	              	new
						id, type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, id);
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);
					#if defined OnPlayerSetupBillboard
						OnPlayerSetupBillboard(playerid, id, type);
					#endif
				}else if (strcmp(call, "OnDragEditorSelectType") == 0) {
	              	new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined OnDragEditorSelectType
						OnDragEditorSelectType(playerid, event);
					#endif
				}else if (strcmp(call, "OnDragChangePlayerStatus") == 0) {
	              	new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined OnDragChangePlayerStatus
						OnDragChangePlayerStatus(playerid, event);
					#endif
				}else if(strcmp(call, "OnDragEditorClose") == 0) {
					#if defined OnDragEditorClose
						OnDragEditorClose(playerid);
					#endif
	            } else if (strcmp(call, "Tuning_OnMenuEvent") == 0) {
	              	new
						event, category, item;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, category);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, item);
					#if defined Tuning_OnMenuEvent
						Tuning_OnMenuEvent(playerid, event, category, item);
					#endif
	            }else if(strcmp(call, "Tuning_OnTuningPneumaEvent") == 0){
	    			new trf;
					BS_IgnoreBits(bs, 40);
	    			BS_ReadInt32(bs, trf);
					#if defined Tuning_OnTuningPneumaEvent
						Tuning_OnTuningPneumaEvent(playerid, trf);
					#endif
	            }else if(strcmp(call, "Tuning_OnPlayerPneumaEvent") == 0){
	    			new type, event;
					BS_IgnoreBits(bs, 40);
	    			BS_ReadInt32(bs, type);
					BS_IgnoreBits(bs, 8);
	    			BS_ReadInt32(bs, event);
					#if defined Tuning_OnPlayerPneumaEvent
						Tuning_OnPlayerPneumaEvent(playerid, type, event);
					#endif				
				}else if(strcmp(call, "Trailers_CloseShop") == 0) {
   				#if defined Trailers_CloseShop
					Trailers_CloseShop(playerid);
				#endif
    			}else if(strcmp(call, "Trailers_CancelBuy") == 0) {
    			}else if(strcmp(call, "Trailers_CloseShop") == 0) {
   				#if defined Trailers_CloseShop
					Trailers_CloseShop(playerid);
				#endif
    			}else if(strcmp(call, "Trailers_CancelBuy") == 0) {
   				#if defined Trailers_CancelBuy
					Trailers_CancelBuy(playerid);
				#endif
            	}else if(strcmp(call, "Trailers_Buy") == 0) {
			    new tra,d;
                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, tra);
                BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, d);
   				#if defined Trailers_Buy
					Trailers_Buy(playerid, tra,d);
				#endif
				}else if(strcmp(call, "ItemStoreMenu_OnClose") == 0) {
				#if defined ItemStoreMenu_OnClose
					ItemStoreMenu_OnClose(playerid);
	 			#endif
                }else if(strcmp(call, "ItemStoreMenu_OnCategory") == 0) {
                new
					event;
                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);
				#if defined ItemStoreMenu_OnCategory
					ItemStoreMenu_OnCategory(playerid, event);
				#endif
				}else if(strcmp(call, "ItemStoreMenu_OnBuy") == 0) {
                new
					event;
                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);
				#if defined ItemStoreMenu_OnBuy
					ItemStoreMenu_OnBuy(playerid, event);
				#endif
                }else if(strcmp(call, "ItemStoreMenu_OnClick") == 0) {
                new
					event;
                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);
				#if defined ItemStoreMenu_OnClick
					ItemStoreMenu_OnClick(playerid, event);
				#endif
				#if defined WeaponShop_OnPlayerEvent
				#endif
				}else if(strcmp(call, "ClickPlayerShipMenuButton") == 0) {
                new
					event;
                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);
				#if defined ClickPlayerShipMenuButton
					ClickPlayerShipMenuButton(playerid, event);
				#endif
				} else if (strcmp(call, "OnMultiDialogClickNavigButton") == 0) {
					new page, prio, dialogid;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, page);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, prio);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, dialogid);
					#if defined OnMultiDialogClickNavigButton
						OnMultiDialogClickNavigButton(playerid, page, dialogid, prio);
					#endif
	            } else if (strcmp(call, "OnDialogResponse") == 0) {
					new
					    dialogid, response, listitem,
						inputtext[256 + 1];
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, dialogid);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, response);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, listitem);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, inputtext);
	                #if defined OnDialogResponse
	                    OnDialogResponse(playerid, dialogid, response, listitem, (isnull(inputtext)) ? ("\1") : (inputtext));
					#endif
	            } else if (strcmp(call, "OnCaptchaGetToken") == 0) {
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('Captcha')");
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Captcha");
					BuyPlayerBusiness(playerid, GetPVarInt(playerid, "buy_biz_id"));
				}else if(strcmp(call, "OnPlayerStartFill") == 0) {
				    new event, fuel;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, fuel);
					#if defined OnPlayerStartFill
						OnPlayerStartFill(playerid, event, fuel);
					#endif
	            }else if(strcmp(call, "OnPlayerShowroomMenu") == 0) {
				    new type, current, vehid;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, current);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, vehid);
	   				#if defined OnPlayerShowroomMenu
						OnPlayerShowroomMenu(playerid, type, current, vehid);
					#endif
				}else if(strcmp(call, "BlackMarket_OnPlayerSetBet") == 0) {
					new count;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, count);
					#if defined BlackMarket_OnPlayerSetBet
						BlackMarket_OnPlayerSetBet(playerid, count);
					#endif
				}else if(strcmp(call, "BlackMarket_OnPlayerClose") == 0) {
					#if defined BlackMarket_OnPlayerClose
						BlackMarket_OnPlayerClose(playerid);
					#endif
				}else if(strcmp(call, "OnHarvestingPlayerComplete") == 0) {
					#if defined OnHarvestingPlayerComplete
						OnHarvestingPlayerComplete(playerid);
					#endif
				}else if(strcmp(call, "OnHarvestingPlayerClose") == 0) {
					#if defined OnHarvestingPlayerClose
						OnHarvestingPlayerClose(playerid);
					#endif
				}else if(strcmp(call, "CasinoDice_OpenCreateGame") == 0) {
	   				#if defined CasinoDice_OpenCreateGame
						CasinoDice_OpenCreateGame(playerid);
					#endif
				}else if(strcmp(call, "CasinoDice_UpdQueriesListPanel") == 0) {
	   				#if defined CasinoDice_UpdQueriesListPanel
						CasinoDice_UpdQueriesListPanel(playerid);
					#endif
	            }else if(strcmp(call, "Trailers_CloseShop") == 0) {
   				#if defined Trailers_CloseShop
						Trailers_CloseShop(playerid);
					#endif
	            }else if(strcmp(call, "Trailers_CancelBuy") == 0) {
   				#if defined Trailers_CancelBuy
						Trailers_CancelBuy(playerid);
					#endif
	            }else if(strcmp(call, "Trailers_Buy") == 0) {
			    new tra,d;
                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, tra);
                BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, d);
   				#if defined Trailers_Buy
					Trailers_Buy(playerid, tra,d);
					#endif
				}else if(strcmp(call, "BS_OnCloseInterface") == 0) {
	   				#if defined BS_OnCloseInterface
						BS_OnCloseInterface(playerid);
					#endif
	            }else if(strcmp(call, "BS_OnChangeCategory") == 0){
	    			new cat;
					BS_IgnoreBits(bs, 40);
	    			BS_ReadInt32(bs, cat);
					#if defined BS_OnChangeCategory
						BS_OnChangeCategory(playerid, cat);
					#endif
				}else if(strcmp(call, "BS_OnPlayerClickItem") == 0){
	   				new item;
					BS_IgnoreBits(bs, 40);
					BS_ReadInt32(bs, item);
					#if defined BS_OnPlayerClickItem
						BS_OnPlayerClickItem(playerid, item);
					#endif
	            }else if(strcmp(call, "OnPlayerTintingSelectGlass") == 0) {
				    new glass;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, glass);
	   				#if defined OnPlayerTintingSelectGlass
						OnPlayerTintingSelectGlass(playerid, glass);
					#endif
	            }else if(strcmp(call, "OnPlayerTintingParams") == 0) {
				    new param[155];
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadString32(bs, param);
	   				#if defined OnPlayerTintingParams
						OnPlayerTintingParams(playerid, param);
					#endif
				}else if(strcmp(call, "OnPlayerGardensMenu") == 0) {
				    new type;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, type);
	   				#if defined OnPlayerGardensMenu
						OnPlayerGardensMenu(playerid, type);
					#endif
				}else if(strcmp(call, "Garden_OnPlayerSelectUpgrade") == 0) {
				    new type;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, type);
	   				#if defined Garden_OnPlayerSelectUpgrade
						Garden_OnPlayerSelectUpgrade(playerid, type);
					#endif
				}else if(strcmp(call, "OnPlayerFortuneWheelMenu") == 0) {
				    new fortune;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, fortune);
	   				#if defined OnPlayerFortuneWheelMenu
						OnPlayerFortuneWheelMenu(playerid, fortune);
					#endif
	            }else if(strcmp(call, "OnPlayerTintingOrder") == 0) {
				    new poradok;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, poradok);
	   				#if defined OnPlayerTintingOrder
						OnPlayerTintingOrder(playerid, poradok);
					#endif
                }else if(strcmp(call, "Taumetr_OnPlayerSelect") == 0) {
				    new menuitem;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, menuitem);
	   				#if defined Taumetr_OnPlayerSelect
						Taumetr_OnPlayerSelect(playerid, menuitem);
					#endif
				}else if(strcmp(call, "ESTP_OnPlayerBuyItem") == 0) {
					new event;
					BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
	   				#if defined ESTP_OnPlayerBuyItem
						ESTP_OnPlayerBuyItem(playerid, event);
					#endif
    			}else if(strcmp(call, "MainMenu_OnPlayerChangeTab") == 0) {
					new event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					#if defined MainMenu_OnPlayerChangeTab
						MainMenu_OnPlayerChangeTab(playerid, event);
					#endif
    			}else if(strcmp(call, "DS_OnPlayerClickItem") == 0) {
					new event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					#if defined DS_OnPlayerClickItem
						DS_OnPlayerClickItem(playerid, event);
					#endif				
				}else if(strcmp(call, "DS_OnPlayerBuy") == 0) {
                    new index, listitem, name[32];
                    BS_IgnoreBits(bs, 40);
                    BS_ReadUint32(bs, index);
                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, listitem);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs,name);
                    #if defined DS_OnPlayerBuy
                        DS_OnPlayerBuy(playerid, index,listitem,name);
                    #endif
				}else if(strcmp(call, "DonationStore_OnPlayerBuy") == 0) {
					new index, options, output[156];
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, index);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, options);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, output);
					#if defined DonationStore_OnPlayerBuy
						DonationStore_OnPlayerBuy(playerid, index, options, output);
					#endif
				}else if(strcmp(call, "DonationStore_OnPlayerClickItem") == 0) {
					new index;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, index);
					#if defined DonationStore_OnPlayerClickItem
						DonationStore_OnPlayerClickItem(playerid, index);
					#endif
				}else if(strcmp(call, "OnPlayerShowroomSelectColor") == 0) {
				    new color;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, color);
	   				#if defined OnPlayerShowroomSelectColor
						OnPlayerShowroomSelectColor(playerid, color);
					#endif
				}else if(strcmp(call, "MenuInt_OnPlayerKey") == 0) {
					if(GetPVarInt(playerid, "rmenu") == 0) //меню игрока R 
					{
						#if defined MenuInt_OnPlayerKey
							MenuInt_OnPlayerKey(playerid);
						#endif
						SetPVarInt(playerid, "rmenu", 1);
					}
					else
					{
					    SetPVarInt(playerid, "rmenu", 0);
						BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.closeInterface('PlayerInteraction')");
						BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 0)");
					}
				}else if(strcmp(call, "MenuInt_OnPlayerClickItem") == 0) {
				    new type, event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, event);
	   				#if defined MenuInt_OnPlayerClickItem
						MenuInt_OnPlayerClickItem(playerid, type, event);
					#endif
				}else if(strcmp(call, "GPS_OnPlayerGetDirection") == 0) {
	   				new Float:X, Float:Y;
					BS_IgnoreBits(bs, 40);
	    			BS_ReadFloat(bs, X);
	       			BS_IgnoreBits(bs, 8);
	          		BS_ReadFloat(bs,  Y);
	   				#if defined GPS_OnPlayerGetDirection
						GPS_OnPlayerGetDirection(playerid, X, Y);
					#endif
				}else if(strcmp(call, "OnSelectSpectateMenu") == 0) {
				    new item;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, item);
	   				#if defined OnSelectSpectateMenu
						OnSelectSpectateMenu(playerid, item);
					#endif
				}else if(strcmp(call, "OnSelectSpectateTab") == 0){
					new item;
	   				#if defined OnSelectSpectateTab
						OnSelectSpectateTab(playerid, item);
					#endif
				}else if(strcmp(call, "OnPlayerClientSideKey") == 0){
				    new key;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, key);
	   				#if defined OnPlayerClientSideKey
						OnPlayerClientSideKey(playerid, key);
					#endif
 				}else if(strcmp(call, "OnPlayerQuestEndSound") == 0){
	   				#if defined OnPlayerQuestEndSound
						OnPlayerQuestEndSound(playerid);
					#endif
				}else if(strcmp(call, "OnChangeSpectatePlayer") == 0){
					new item, none; //none - пока хз
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, item);
	       			BS_IgnoreBits(bs, 8);
	       			BS_ReadUint32(bs, none);
	   				#if defined OnChangeSpectatePlayer
						OnChangeSpectatePlayer(playerid, item, none);
					#endif					
				}else if (strcmp(call, "GetRandomUnusedLicensePlate") == 0) {
						new typeplate;
						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, typeplate);
						#if defined GetRandomUnusedLicensePlate
		                    GetRandomUnusedLicensePlate(playerid, typeplate);
						#endif
				}
				else if (strcmp(call, "BuyVehicleLicensePlate") == 0) {
						new
							number[10],
							region[5], type33;
		                BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, type33);
						BS_IgnoreBits(bs, 8);
	                    BS_ReadString32(bs, number);
						BS_IgnoreBits(bs, 8);
	                    BS_ReadString32(bs, region);
						#if defined BuyVehicleLicensePlate
							BuyVehicleLicensePlate(playerid, type33, number, region);
						#endif
				} else if (strcmp(call, "ClothingStore_OnPlayerEvent") == 0) {
					new
						t, e;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, t);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, e);
					#if defined ClothingStore_OnPlayerEvent
						ClothingStore_OnPlayerEvent(playerid, t,e);
					#endif
				}else if(strcmp(call, "OnInventoryItemDrop") == 0) {
					new event, slot, count;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);
		            BS_IgnoreBits(bs, 8);
	       			BS_ReadUint32(bs, slot);
					BS_IgnoreBits(bs, 8);
	       			BS_ReadUint32(bs, count);
					#if defined OnInventoryItemDrop
						OnInventoryItemDrop(playerid, event, slot, count);
					#endif
				}else if(strcmp(call, "OnSelectTicket") == 0) {
					new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined OnSelectTicket
						OnSelectTicket(playerid, event);
					#endif
				}else if(strcmp(call, "MarktPlc_OnPlayerSelectCategory") == 0) {					
					new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);					
					#if defined MarktPlc_OnPlayerSelectCategory
						MarktPlc_OnPlayerSelectCategory(playerid, event);
					#endif
				}else if(strcmp(call, "MarktPlc_OnPlayerOpenMyAds") == 0) {					
					#if defined MarktPlc_OnPlayerOpenMyAds
						MarktPlc_OnPlayerOpenMyAds(playerid);
					#endif
                }else if(strcmp(call, "MarktPlc_OnUploadPhoto") == 0) {					
					new event, type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);					
					#if defined MarktPlc_OnUploadPhoto
						MarktPlc_OnUploadPhoto(playerid, event, type);
					#endif
				}else if(strcmp(call, "OnHelloweenBuildComplete") == 0) {					
					#if defined OnHelloweenBuildComplete
						OnHelloweenBuildComplete(playerid);
					#endif
				}else if(strcmp(call, "OnHelloweenBuildExit") == 0) {					
					#if defined OnHelloweenBuildExit
						OnHelloweenBuildExit(playerid);
					#endif
				}else if(strcmp(call, "MarktPlc_OnPlayerViewedEntity") == 0) {					
					new event, type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					#if defined MarktPlc_OnPlayerViewedEntity
						MarktPlc_OnPlayerViewedEntity(playerid, event, type);
					#endif
                }else if(strcmp(call, "MarktPlc_OnPlayerAddFavorite") == 0) {
					new event, type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					#if defined MarktPlc_OnPlayerAddFavorite
						MarktPlc_OnPlayerAddFavorite(playerid, event, type);
					#endif
            	}else if(strcmp(call, "MarktPlc_OnPlayerRemoveFavorite") == 0) {
					new event, type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					#if defined MarktPlc_OnPlayerRemoveFavorite
						MarktPlc_OnPlayerRemoveFavorite(playerid, event, type);
					#endif
                }else if(strcmp(call, "MarktPlc_OnPlayerContact") == 0) {
					new event, type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					#if defined MarktPlc_OnPlayerContact
						MarktPlc_OnPlayerContact(playerid, event, type);
					#endif
                }else if(strcmp(call, "MarktPlc_OnCreateAd") == 0) {
					new hours, price, description[124], items_id, items_type, name[32];
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, hours);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, price);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, description);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, items_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, items_type);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, name);
					#if defined MarktPlc_OnCreateAd
						MarktPlc_OnCreateAd(playerid, hours, price, description, items_id, items_type, name);
					#endif
                }else if(strcmp(call, "MarktPlc_OnPlayerShowItems") == 0) {
					new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined MarktPlc_OnPlayerShowItems
						MarktPlc_OnPlayerShowItems(playerid, event);
					#endif
                }else if(strcmp(call, "Tablet_OnPlayerCloseApp") == 0) {
					new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined Tablet_OnPlayerCloseApp
						Tablet_OnPlayerCloseApp(playerid, event);
					#endif
				}else if(strcmp(call, "ToiletCleaning_OnPlayerEnd") == 0) {
	   				#if defined ToiletCleaning_OnPlayerEnd
						ToiletCleaning_OnPlayerEnd(playerid);
					#endif
                }else if(strcmp(call, "Tablet_OnPlayerOpenApp") == 0) {
					new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined Tablet_OnPlayerOpenApp
						Tablet_OnPlayerOpenApp(playerid, event);
					#endif
                }else if(strcmp(call, "OnInventoryItemUse") == 0) {
					new
						event, slot;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
		            BS_ReadUint32(bs, slot);
					#if defined OnInventoryItemUse
						OnInventoryItemUse(playerid, event, slot);
					#endif
				}else if(strcmp(call, "I_OnPlayerFetchSkateboard") == 0) {
					new
						event;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);
					#if defined I_OnPlayerFetchSkateboard
						I_OnPlayerFetchSkateboard(playerid, event);
					#endif
				}else if(strcmp(call, "OnInventoryItemTake") == 0) {
					new event, slot, count;
		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
		            BS_ReadUint32(bs, slot);
					BS_IgnoreBits(bs, 8);
		            BS_ReadUint32(bs, count);
					#if defined OnInventoryItemTake
						OnInventoryItemTake(playerid, event, slot, count);
					#endif
			    }else if(strcmp(call, "OnInventoryItemSell") == 0) {
			    new event, item;
                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);
                BS_IgnoreBits(bs, 8);
			 	BS_ReadUint32(bs, item);
   				#if defined OnInventoryItemSell
					OnInventoryItemSell(playerid, event, item);
				#endif
				}else if(strcmp(call, "OnPlayerSellSkinEvent") == 0){
				    new
						status;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, status);
					#if defined OnPlayerSellSkinEvent
						OnPlayerSellSkinEvent(playerid, status);
					#endif
                }else if(strcmp(call, "Cases_OnPlayerInterfaceRequest") == 0){
				    new
						event, type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					#if defined Cases_OnPlayerInterfaceRequest
						Cases_OnPlayerInterfaceRequest(playerid, event, type);
					#endif
				}else if(strcmp(call, "Cases_OnPlayerCloseInterface") == 0){
				    new
						type,id;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);
					BS_IgnoreBits(bs, 8);
					BS_ReadValue(bs, PR_UINT32, id);
					#if defined Cases_OnPlayerCloseInterface
						Cases_OnPlayerCloseInterface(playerid, type,id);
					#endif
				}else if(strcmp(call, "OnPlayerCraftingSelect") == 0){
					new items;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, items);
					#if defined OnPlayerCraftingSelect
						OnPlayerCraftingSelect(playerid, items);
					#endif
                }else if(strcmp(call, "PoliceTablet_OnPlayerPage") == 0) {
					new event;
					BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					#if defined PoliceTablet_OnPlayerPage
						PoliceTablet_OnPlayerPage(playerid, event);
					#endif
				}else if(strcmp(call, "RequestHelp_OnPlayerRespond") == 0) {
					new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined RequestHelp_OnPlayerRespond
						RequestHelp_OnPlayerRespond(playerid, event);
					#endif
				}else if(strcmp(call, "PoliceTablet_OnPlayerIssueFine") == 0) {
					new amount[32 + 1], name[32 + 1], reason[32 + 1];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, amount);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, name);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, reason);
					#if defined PoliceTablet_OnPlayerIssueFine
					PoliceTablet_OnPlayerIssueFine(playerid, amount, name, reason);
					#endif
				}else if(strcmp(call, "Phone_OnOpenAppPhone") == 0) {
				    new app_id, xz;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, app_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, xz);
					#if defined Phone_OnOpenAppPhone
						Phone_OnOpenAppPhone(playerid, app_id, xz);
					#endif
				}else if(strcmp(call, "PhoneCamera_Close") == 0){
					#if defined PhoneCamera_Close
						PhoneCamera_Close(playerid);
					#endif
				}else if(strcmp(call, "Phone_ContactAction") == 0){
					new id_switch, id_xz, number;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, id_switch);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, id_xz);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, number);
					#if defined Phone_ContactAction
						Phone_ContactAction(playerid, id_switch, id_xz, number);
					#endif
				}else if(strcmp(call, "Phone_OnOpenContact") == 0){
					#if defined Phone_OnOpenContact
						Phone_OnOpenContact(playerid);
					#endif
				}else if(strcmp(call, "Delivery_CreateOrder") == 0){
				    new xz, status_id, method;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, method);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, xz);
					#if defined Delivery_CreateOrder
						Delivery_CreateOrder(playerid, method, status_id, xz);
					#endif
				}else if(strcmp(call, "Delivery_OnPlayerAddCart") == 0){
				    new order_id;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, order_id);
					#if defined Delivery_OnPlayerAddCart
						Delivery_OnPlayerAddCart(playerid, order_id);
					#endif
				} else if (strcmp(call, "Tuning_OnStageMenuEvent") == 0) {
				new
				    sss, sss2,sss3;
				BS_IgnoreBits(bs, 40);
				BS_ReadValue(bs, PR_UINT32, sss);
				BS_IgnoreBits(bs, 8);
				BS_ReadValue(bs, PR_UINT32, sss2);
				BS_IgnoreBits(bs, 8);
				BS_ReadValue(bs, PR_UINT32, sss3);
				#if defined Tuning_OnStageMenuEvent
					Tuning_OnStageMenuEvent(playerid, sss, sss2,sss3);
				#endif
				}else if(strcmp(call, "Phone_CreateContact") == 0){
				    new name[40], number[50];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, name);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, number);
				    #if defined Phone_CreateContact
				    	Phone_CreateContact(playerid, name, number);
	                #endif
				}else if(strcmp(call, "Phone_StartCall") == 0){
				    #if defined Phone_StartCall
				    	Phone_StartCall(playerid);
	                #endif
				}else if(strcmp(call, "Phone_CancelCall") == 0){
				    #if defined Phone_CancelCall
				    	Phone_CancelCall(playerid);
	                #endif
				}else if(strcmp(call, "PhoneBlack_Check") == 0){
				    new number, status_id, message[120];
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, number);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, message);
				    #if defined PhoneBlack_Check
					    	PhoneBlack_Check(playerid, number, status_id, message);
		                #endif
				}else if(strcmp(call, "OnPlayerCreateTicket") == 0) { 
                    new message[150];
                    BS_IgnoreBits(bs, 40);
                    BS_ReadString32(bs, message);
                    #if defined OnPlayerCreateTicket
                            OnPlayerCreateTicket(playerid, message);
                     #endif
				}else if(strcmp(call, "Notary_HidePlayerPanel") == 0) { 
					#if defined Notary_HidePlayerPanel
							Notary_HidePlayerPanel(playerid);
					#endif
				}else if(strcmp(call, "Notary_CancelPlayerStatus") == 0) { 
					#if defined Notary_CancelPlayerStatus
							Notary_CancelPlayerStatus(playerid);
					#endif	
				}else if(strcmp(call, "Notary_AcceptExchange") == 0) { 
					#if defined Notary_AcceptExchange
							Notary_AcceptExchange(playerid);
					#endif
				}else if(strcmp(call, "Notary_SetExchangeObject") == 0) { 
					new type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);

					#if defined Notary_SetExchangeObject
							Notary_SetExchangeObject(playerid, type);
					#endif
				}else if(strcmp(call, "Notary_SetAdditionCommission") == 0) { 
					new count;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, count);
					#if defined Notary_SetAdditionCommission
							Notary_SetAdditionCommission(playerid, count);
					#endif
				}else if(strcmp(call, "Notary_SetSurchargeObject") == 0) { 
					new price;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, price);
					#if defined Notary_SetSurchargeObject
							Notary_SetSurchargeObject(playerid, price);
					#endif
				}else if(strcmp(call, "Notary_StartTrade") == 0) { 
					#if defined Notary_StartTrade
							Notary_StartTrade(playerid);
					#endif
				}else if(strcmp(call, "Notary_UpdateAdditionCommission") == 0) { 
					#if defined Notary_UpdateAdditionCommission
							Notary_UpdateAdditionCommission(playerid);
					#endif
                }else if(strcmp(call, "Report_OnPlayerCloseTicket") == 0) { 
				    #if defined Report_OnPlayerCloseTicket
					    	Report_OnPlayerCloseTicket(playerid);
	         		#endif
                }else if(strcmp(call, "OnSendChatMessageTicket") == 0) { 
					new message[120];
					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, message);
				    #if defined OnSendChatMessageTicket
					    	OnSendChatMessageTicket(playerid, message);
	         		#endif
	 			}else if(strcmp(call, "OnPlayerClosedTicketInterface") == 0) {
	 			    #if defined OnPlayerClosedTicketInterface
					    	OnPlayerClosedTicketInterface(playerid);
	         		#endif
				}else if(strcmp(call, "CarSiren_OnPlayerBeepEnable") == 0) {
					#if defined CarSiren_OnPlayerBeepEnable
						CarSiren_OnPlayerBeepEnable(playerid);
					#endif
				}else if(strcmp(call, "CarSiren_OnPlayerBeepDisable") == 0) {
					#if defined CarSiren_OnPlayerBeepDisable
						CarSiren_OnPlayerBeepDisable(playerid);
					#endif
				}else if(strcmp(call, "OnCasinoDiceCreateBet") == 0){
					new select_id,  money, players;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, select_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, money);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, players);
	 			    #if defined OnCasinoDiceCreateBet
					    	OnCasinoDiceCreateBet(playerid, select_id, money, players);
	         		#endif
				}else if(strcmp(call, "OnCasinoDiceThrow") == 0){
	 			    #if defined OnCasinoDiceThrow
					    	OnCasinoDiceThrow(playerid);
	         		#endif
				}else if(strcmp(call, "OnJoinGameDiceCasino") == 0){
				    new rooms1;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, rooms1);
	 			    #if defined OnJoinGameDiceCasino
					    	OnJoinGameDiceCasino(playerid, rooms1);
	         		#endif
				}else if(strcmp(call, "CasinoDice_ClosePanel") == 0){
	 			    #if defined CasinoDice_ClosePanel
					    	CasinoDice_ClosePanel(playerid);
	         		#endif
				}
				else if(strcmp(call, "CasinoDice_LeaveTable") == 0){
	 			    #if defined CasinoDice_LeaveTable
					    	CasinoDice_LeaveTable(playerid);
	         		#endif
                }else if(strcmp(call, "AS_OnPlayerExamAnswer") == 0) {
				    new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined AS_OnPlayerExamAnswer
						AS_OnPlayerExamAnswer(playerid, event);
					#endif
				}else if(strcmp(call, "AS_OnPlayerExamTheoryClose") == 0) {
				    BitStream_1(playerid, s_CefInterface, t_CefHide,"DrivingExamTheory");
				}else if(strcmp(call, "OnClickQuests") == 0) {
				    new quest_id;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, quest_id);
					#if defined OnClickQuests
						OnClickQuests(playerid, quest_id);
					#endif
					}else if(strcmp(call, "OnPlayerSlotMachineButton") == 0) {
					new
					event, betPlus, betMinus;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
	                BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, betPlus);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, betMinus);
					#if defined OnPlayerSlotMachineButton
						OnPlayerSlotMachineButton(playerid, event, betPlus, betMinus);
					#endif
					} else if(strcmp(call, "OnVoiceChatStartRecord") == 0) {
					#if defined OnVoiceChatStartRecord
					OnVoiceChatStartRecord(playerid);
					#endif
					} else if(strcmp(call, "OnVoiceChatEndRecord") == 0) {
					#if defined OnVoiceChatEndRecord
					OnVoiceChatEndRecord(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerOpenHelp") == 0){
		            #if defined MainMenu_OnPlayerOpenHelp
		                MainMenu_OnPlayerOpenHelp(playerid);
					#endif
					}else if(strcmp(call, "OnBookmakerSelectLeague") == 0){
	   				#if defined OnBookmakerSelectLeague
						OnBookmakerSelectLeague(playerid);
					#endif
					}else if(strcmp(call, "OnBookmakerLoadPage") == 0){
						new type, event;
						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, type);
						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event);
	   				#if defined OnBookmakerLoadPage
						OnBookmakerLoadPage(playerid, type, event);
					#endif
					}else if(strcmp(call, "OnBookmakerMakeBet") == 0){
						new count, event, event1;
						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, count);
						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event);
						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event1);
	   				#if defined OnBookmakerMakeBet
						OnBookmakerMakeBet(playerid, count, event, event1);
					#endif
					}else if(strcmp(call, "Casino_OnPlayerExchange") == 0){
						new type, event;
						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, type);
						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event);
	   				#if defined Casino_OnPlayerExchange
						Casino_OnPlayerExchange(playerid, type, event);
					#endif
					}else if(strcmp(call, "MainMenu_OnMoreDailyRewards") == 0){

	   				#if defined MainMenu_OnMoreDailyRewards
						MainMenu_OnMoreDailyRewards(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerClickPromoCode") == 0){	
	   				#if defined MainMenu_OnPlayerClickPromoCode
						MainMenu_OnPlayerClickPromoCode(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerClickBonusCode") == 0){	
	   				#if defined MainMenu_OnPlayerClickBonusCode
						MainMenu_OnPlayerClickBonusCode(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerTakeRewards") == 0){
						new event;
						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, event);
	   				#if defined MainMenu_OnPlayerTakeRewards
						MainMenu_OnPlayerTakeRewards(playerid, event);
					#endif
					}else if(strcmp(call, "OnPlayerCraftingStart") == 0){
						new event1, event2;
						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, event1);
						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event2);
	   				#if defined OnPlayerCraftingStart
						OnPlayerCraftingStart(playerid, event1, event2);
					#endif
					}else if(strcmp(call, "OnPlayerCraftingFinish") == 0){
	   				#if defined OnPlayerCraftingFinish
						OnPlayerCraftingFinish(playerid);
					#endif
					}else if(strcmp(call, "OnPlayerCraftingClose") == 0){
	   				#if defined OnPlayerCraftingClose
						OnPlayerCraftingClose(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerRewardPrevPage") == 0){
	   				#if defined MainMenu_OnPlayerRewardPrevPage
						MainMenu_OnPlayerRewardPrevPage(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerRewardNextPage") == 0){
	   				#if defined MainMenu_OnPlayerRewardNextPage
						MainMenu_OnPlayerRewardNextPage(playerid);
					#endif
					}else if(strcmp(call, "FoodSort_OnSelectCategory") == 0){
						new event, event1, event2, event3;
						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, event);
						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event1);
						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event2);
						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event3);
	   				#if defined FoodSort_OnSelectCategory
						FoodSort_OnSelectCategory(playerid, event, event1, event2, event3);
					#endif
					}else if(strcmp(call, "OnTradeItemsCancel") == 0) { 
						#if defined OnTradeItemsCancel
								OnTradeItemsCancel(playerid);
						#endif
					}else if(strcmp(call, "OnTradeInterfaceClose") == 0) { 
						#if defined OnTradeInterfaceClose
								OnTradeInterfaceClose(playerid);
						#endif
					}else if(strcmp(call, "OnTradeItemsStart") == 0) { 
						new event;
						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, event);
						#if defined OnTradeItemsStart
								OnTradeItemsStart(playerid, event);
						#endif
					}else if(strcmp(call, "OnTradeItemsSetReady") == 0) { 
						new status, price;
						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, status);
						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, price);
						#if defined OnTradeItemsSetReady
								OnTradeItemsSetReady(playerid, status, price);
						#endif
					}else if(strcmp(call, "OnTradeItemsMove") == 0) { 
						new removed_id, removed_slot, id, slot, count;
						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, removed_id);
						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, removed_slot);
						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, id);
						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, slot);
						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, count);
						#if defined OnTradeItemsMove
								OnTradeItemsMove(playerid, removed_id, removed_slot, id, slot, count);
						#endif
					}else if (strcmp(call, "MUSIC_OnClientSendData") == 0){
						new type,name[64],index,volume;
						BS_IgnoreBits(bs,40);
						BS_ReadValue(bs,PR_UINT32,type);
						BS_IgnoreBits(bs,8);
						BS_ReadString32(bs,name);
						BS_IgnoreBits(bs,8);
						BS_ReadValue(bs,PR_UINT32,index);
						BS_IgnoreBits(bs,8);
						BS_ReadValue(bs,PR_UINT32,volume);
						Music_Start(playerid,type,name,index,volume);						
					}else if (strcmp(call, "MUSIC_OnClientGetServerTime") == 0) {
					new fmt_str[100];
					format(fmt_str, sizeof fmt_str, "interface('MusicPlayer').srv_onReceiveData(%d, 1)", gettime());
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
				}
			}
		}
	}
	return 1;
}

new m_player_report_id[MAX_PLAYERS];
public: MainMenu_OnPlayerRewardPrevPage(playerid)
{
	pageprize[playerid] = pageprize[playerid] - 1;
	pageprizenumber[playerid][0] = pageprizenumber[playerid][0] - 10;
	pageprizenumber[playerid][1] = pageprizenumber[playerid][1] - 10;
	LoadMainPrizeMenu(playerid, pageprizenumber[playerid][0], pageprizenumber[playerid][1]);
}

public: MainMenu_OnPlayerRewardNextPage(playerid)
{
	pageprize[playerid] = pageprize[playerid] + 1;
	pageprizenumber[playerid][0] = pageprizenumber[playerid][0] + 10;
	pageprizenumber[playerid][1] = pageprizenumber[playerid][1] + 10;
	LoadMainPrizeMenu(playerid, pageprizenumber[playerid][0], pageprizenumber[playerid][1]);
}

stock LoadMainPrizeMenu(playerid, event, event1)
{
    STRING_GLOBAL[0] = EOS;
    str_q[0] = EOS;
    new name[32];
    new rowss;
    mysql_format(mysql,str_q,sizeof str_q, "SELECT * FROM prizes WHERE owner_id='%d'", GetPlayerAccountID(playerid));
    new Cache:result = mysql_query(mysql, str_q, true);
    if(cache_num_rows()) {
        for(new i, j=cache_num_rows(); i < j; i ++)
        {
            rowss = rowss + 1;

            if(event <= rowss <= event1)
            {
                new id = cache_get_field_content_int(i, "id");
                new size = cache_get_field_content_int(i, "size");
                new item = cache_get_field_content_int(i, "item");
                new type = cache_get_field_content_int(i, "type");
                new count = cache_get_field_content_int(i, "count");
                cache_get_field_content(i, "name", name);

                if(count < 2) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s[%d,%d,0,0,\"%s\",%d,%d],", STRING_GLOBAL, size, item, name, id, type);
                else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s[%d,%d,%d,0,\"%s (%d шт.)\",%d,%d],", STRING_GLOBAL, size, item, count, name, count, id, type);
            }
        }
        new str_len = strlen(STRING_GLOBAL);
        strdel(STRING_GLOBAL, str_len - 1, str_len);
    }
    cache_delete(result);
    pagemenu[playerid] = rowss / 10 + 1; 
    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"interface('MainMenu').onServerResponse(9, '[%d,%d,[%s]]')",pageprize[playerid], pagemenu[playerid], STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    return 1;
}

public:OnBattlePass_GetLevel(playerid)
{
	return 1;
}

public: PlayerImprove_OnPlayerBuy(playerid, item)
{
	new levelImprove, moneyImprove;
	if(item == 0) levelImprove = 5, moneyImprove = 250000;
	if(item == 1) levelImprove = 8, moneyImprove = 500000;
	if(item == 2) levelImprove = 11, moneyImprove = 750000;
	if(item == 3) levelImprove = 15, moneyImprove = 1000000;
	if(GetPlayerData(playerid, P_LEVEL) < levelImprove) return SendClientMessage(playerid, 0x79cb64FF, "Ваш уровень слишком мал!");
	GivePlayerMoneyEx(playerid, -moneyImprove);
	AddPlayerData(playerid, P_IMPROVEMENTS, +, 1);
	UpdatePlayerDatabaseInt(playerid, "improvements", GetPlayerData(playerid, P_IMPROVEMENTS));
	return 1;
}

public: PlayerSetting_OnChangePassword(playerid, password[], password2[]) {

    if(IsPlayerLogged(playerid))
    {
        if(strcmp(password, GetPlayerData(playerid, P_PASSWORD), false))
        {
            GameText(playerid, "~r~ Пароль не совпадает с текущим паролем!", 4000, 1);
            
            return 1;
        }
        else
        {
            if(strlen(password2) < 6) SendClientMessage(playerid,-1,"[Ошибка!] Пароль должен быть больше 6 символов");
            if(strlen(password2) > 32) SendClientMessage(playerid,-1,"[Ошибка!] Пароль должен быть меньше 32 символов");
            SendClientMessage(playerid,-1,"[Ошибка!] Совпадение паролей");
            ChangePlayerPassword(playerid,password2);
        }

    }

    return 1;
}

stock ChangePlayerPassword(playerid,pass[])
{
    mysql_format(mysql, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET password='%e' WHERE id=%d LIMIT 1", pass, GetPlayerAccountID(playerid));
    mysql_query(mysql, STRING_GLOBAL, false);
    if(!mysql_errno())
    {
        format(g_player[playerid][P_PASSWORD], 85, "%s", pass);
        SCMF(playerid,0xFFFF00FF, "Ваш новый пароль: {3399FF}%s", GetPlayerData(playerid, P_PASSWORD));
        SendClientMessage(playerid, 0xFFFFFFFF, "Рекомендуем сделать скрин {00CC00}(клавиша F8) {FFFFFF}чтобы не забыть его");
        GameText(playerid, "~g~ УСПЕШНО", 4000, 3);

        return 1;
    }
    else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 05)");

    return 1;
}

public:PlayerSetting_OnPlayerName(playerid, name[])
{
    if(!IsPlayerLogged(playerid) || !(6<strlen(name)<32)) return 1;
    if(GetPVarInt(playerid, "change_name_status")) {
        return BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('MainMenu').onServerModalResponse([1, \"Вы уже подавали заявку\"])");
    }
    new bool: valid_name = true;
    for(new idx, len = strlen(name); idx < len; idx ++)
    {
        switch(name[idx])
        {
            case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
            default:
                valid_name = false;
        }
    }
    if(!strcmp(GetPlayerNameEx(playerid), name, true))
    {
        return BitStream_1(playerid,s_CefInterface, t_CefUpdate,"interface('MainMenu').onServerModalResponse([1, \"Вы уже используете это имя\"])");
    }
    else if(valid_name)
    {
        new query[128];
        new Cache: result, rows;

        mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
        result = mysql_query(mysql, query, true);

        rows = cache_num_rows();
        cache_delete(result);

        if(!rows)
        {
            SetPVarInt(playerid, "change_name_status", 1);
            SetPVarString(playerid, "change_name", name);

            BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerModalResponse([0, \"\"])");
            GameText(playerid, "~g~Успешно", 3000, 2);

            format(query, sizeof query, "{F81414}Игрок %s[%d] хочет сменить NonRP Name на %s | /okay %d для одобрения" , GetPlayerNameEx(playerid), playerid, name, playerid);
            SendMessageToAdmins(query, 0x66CC99FF);

        }
        else BitStream_1(playerid,s_CefInterface, t_CefUpdate,"interface('MainMenu').onServerModalResponse([1, \"Имя занято\"])");

    }
    else
    {
        BitStream_1(playerid,s_CefInterface, t_CefUpdate,"interface('MainMenu').onServerModalResponse([1, \"Недопустимые символы\"])");
    }
    return 1;
}

public: PlayerSetting_OnPlayerRequest(playerid, type, event)
{
    STRING_GLOBAL[0] = EOS;
    switch(type) {
        case 8: {
            STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Hud').setShowControls(%d)", event);
        }
        case 9: {
            STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Hud').setEffectEnabled(%d)", event);
        }
        case 14: {
            STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Hud').setCanChatFadeout(%d)", event);
        }
        case 15: {
            STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Hud').setInfoValuesVisible(%d)", event);
        }
    }
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	return 1;
}

stock MainMenu_OnPlayerOpenHelp(playerid) callcmd::help(playerid, "");
stock MainMenu_OnPlayerClickPromoCode(playerid) callcmd::pcode(playerid, "");
stock MainMenu_OnPlayerClickBonusCode(playerid) Dialog(playerid, DIALOG_BONUSCODE_ACTIVATE, DIALOG_STYLE_INPUT,"Активация бонус кода","Введите ваш бонус код в поле ниже","Далее", "Отмена");
public: MainMenu_OnPlayerTakeRewards(playerid, event)
{
	new id = event,
		query[64],
		name[64],
		Cache: result;
	format(query, sizeof query, "SELECT * FROM prizes WHERE id='%d'", id);
	result = mysql_query(mysql, query, true);
	cache_get_field_content(0, "name", name);
	cache_delete(result);
	DLGF(playerid, DIALOG_PRIZE, 0, "Информация",  "{EEEEEE}Вы хотите забрать {F6C300}%s {EEEEEE}из списка?", "Забрать", "Отмена", name);
	SetPVarInt(playerid, "id_priz",id);
	return 1;
}

stock GivePlayerMyPrizes(playerid, name[], size, item, type, count, indx)
{
	new query[256]; //size - Это тип предмета (0 - значек вопроса | 1 - оружие | 2 - ехp | 3 - авто | 4 - скин | 5 - деньги | 6 -  | 7 - вип | 8 - предмет | 9 - патроны | 10 - донат)
	format(query, sizeof query , "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', %d, %d, %d, %d, %d)", GetPlayerAccountID(playerid), name, size, item, type, count, indx);
	mysql_tquery(mysql, query, "", "");
}

stock LoadReportMesage(playerid, report_id)
{
	new query[320];
	new	Cache: result;
	format(query, sizeof query, "SELECT * FROM `report_mesage` WHERE `report_id`=%d", report_id);
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
	new text[150], name[32];
	STRING_GLOBAL = "";
	for(new i; i < rows; i ++)
	{
		cache_get_field_content(i, "name", name);
		cache_get_field_content(i, "text", text);
		new status = cache_get_field_content_int(i, "status");
		new data = cache_get_field_content_int(i, "data");
   		format(query, sizeof query, "[0, \"%s\", %d, %d, \"%s\"],", text, status, data, name);
		strcat(STRING_GLOBAL, query);
	}
	strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
	cache_delete(result);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(12, '[%s]')", STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    STRING_GLOBAL[0] = EOS;
    return true;
}

stock LoadReportTicket(playerid)
{
	new query[320];
	new	Cache: result;
	format(query, sizeof query, "SELECT * FROM `report_ticket` WHERE `owner_id`=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
	new text[150], name[32];
	STRING_GLOBAL = "";
	for(new i; i < rows; i ++)
	{
		cache_get_field_content(i, "name", name);
		cache_get_field_content(i, "text", text);
		new lock = cache_get_field_content_int(i, "lock");
		new data = cache_get_field_content_int(i, "data");
   		format(query, sizeof query, "[\"%s\", 0, 1, %d, \"%s\", %d],", name, data, text, lock);
		strcat(STRING_GLOBAL, query);
	}
	strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
	cache_delete(result);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(11, '[%s]')", STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    STRING_GLOBAL[0] = EOS;
    return true;
}

stock OnSendChatMessageTicket(playerid, message[])
{
	if(m_player_report_id[playerid] == -1) return GameText(playerid, "Выберите один из запросов", 3000, 0);
    if(strlen(message) < 5 || strlen(message) > 149) 
        return GameText(playerid, "~w~Ответ должен быть от 5 до 149 символов!", 4000, 3);
    if(strfind(message,"|") != -1 || strfind(message,"&") != -1 || strfind(message,"#") != -1 || strfind(message,"@") != -1 || strfind(message,"%") != -1)
        return SCM(playerid, COLOR_RED, "И куда это мы лезим ненене я про кодер by artem play");
    new query[345];
    format(query, sizeof query, "INSERT INTO `report_mesage` (`owner_id`, `report_id`, `name`, `text`, `data`, `status`) VALUES (%d, %d, '%s', '%s', %d, 0)", GetPlayerAccountID(playerid), m_player_report_id[playerid], GetPlayerNameEx(playerid), message, gettime());
    mysql_query(mysql, query, false);
    format(query, sizeof query, "UPDATE `report_ticket` SET `name`='%s', `text`='%s' WHERE id=%d", GetPlayerNameEx(playerid), message, m_player_report_id[playerid]);
    mysql_query(mysql, query, false);
    LoadReportMesage(playerid, m_player_report_id[playerid]), LoadReportTicket(playerid);
	return 1;
}

public: OnSelectTicket(playerid, event)
{
	new query[56],
		Cache: result;
	format(query, sizeof query, "SELECT * FROM `report_ticket` WHERE `owner_id`=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	new id = cache_get_field_content_int(event, "id");
    m_player_report_id[playerid] = id;
    cache_delete(result);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(16, '[2, \"Ожидайте ответа администратора\", 0]')");
	LoadReportMesage(playerid, id);
    return true;
}

public: Report_OnPlayerCloseTicket(playerid)
{
    new event = m_player_report_id[playerid],
        query[148],
        Cache: result;
    format(query, sizeof query, "UPDATE `report_ticket` SET `lock`=1 WHERE id=%d", event);
	mysql_query(mysql, query, false);
    format(query, sizeof query, "SELECT * FROM `report_mesage` WHERE `report_id`=%d", event);
    result = mysql_query(mysql, query, true);
	for(new i; i < cache_num_rows(); i ++)
	{
        new id = cache_get_field_content_int(i, "id");
        format(query, sizeof query, "DELETE FROM `report_mesage` WHERE `id`=%d", id);
	    mysql_query(mysql, query, false);
    }
    cache_delete(result);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerResponse(16, '[1, \"Вы закрыли запрос\", 0]')");
	LoadReportTicket(playerid);
    m_player_report_id[playerid] = -1;
    foreach(new i: Player)
    {
        if(!IsPlayerConnected(i)) continue;
        else if(!IsPlayerLogged(i)) continue;
        if(GetPlayerData(i, P_ADMIN) == 0) continue;
        LoadAdminsReport(i);
    }
    return true;
}

stock LoadAdminsReport(playerid)
{
    new query[32],
        Cache: result;
    result = mysql_query(mysql, "SELECT * FROM `report_ticket` WHERE `lock`=0", true);
    STRING_GLOBAL[0] = EOS;
	for(new i; i < cache_num_rows(); i ++)
	{
        new id = cache_get_field_content_int(i, "id");
        format(query, sizeof query, "[%d],", id);
		strcat(STRING_GLOBAL, query);
	}
	strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
	cache_delete(result);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('UnansweredRequests').setRequests([[%s],[%d]])", STRING_GLOBAL, gettime());
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    return true;
}

#define MAX_PLAYER_DRAG 2
enum E_DRAG_RACING_STRUCT
{
	E_SPHERE,
	E_STATUS,
	E_PLAYER,
	E_STATUS_PLAYER,
	E_BET_PLAYER,
	E_TYPE,
	E_WIN_PLAYER,
	E_BET
}
new g_drag_racing_time;
new g_drag_racing_finish;
new Text3D: g_drag_racing_rating; // текст в ангаре
new g_drag_racing[MAX_PLAYER_DRAG][E_DRAG_RACING_STRUCT];
new g_drag_racing_id[MAX_PLAYERS];
new g_drag_racing_status[MAX_PLAYERS];
new Float: g_drag_racing_pos[3][2][4] =
{
	{
		{1695.3965,1641.6962,16.9935,4.5},
		{1691.1057,1635.8171,16.9948,144.5379}
	},
	{
		{1688.9054,1643.2876,16.9918,4.5},
		{1686.2905,1639.3320,16.9948,143.9645}
	},
	{
		{1580.7694,1744.2955,16.9478,236.0479},
		{1577.0437,1739.3364,16.9530,235.1329}
	}
};

stock LoadDragRacing()
{
	g_drag_racing[0][E_SPHERE] = CreateDynamicSphere(g_drag_racing_pos[0][0][0], g_drag_racing_pos[0][0][1], g_drag_racing_pos[0][0][2], g_drag_racing_pos[0][0][3], -1, -1);
	g_drag_racing[1][E_SPHERE] = CreateDynamicSphere(g_drag_racing_pos[1][0][0], g_drag_racing_pos[1][0][1], g_drag_racing_pos[1][0][2], g_drag_racing_pos[1][0][3], -1, -1);
	g_drag_racing_finish = CreateDynamicSphere(1404.1278,1231.1156,17.0392, 8.5, -1, -1);
	g_drag_racing_rating = CreateDynamic3DTextLabel("", 0x000000FF, 1710.7104,1707.0219,16.8864 + 2.0, 15.0);
}

stock UpdateRating_DrageRacing()
{
	new query[148], Cache: result;
	result = mysql_query(mysql, "SELECT * FROM accounts ORDER BY drag_score DESC LIMIT 10", true);
	new count;
	new name[32];
	STRING_GLOBAL[0] = EOS;
	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new drag_score = cache_get_field_content_int(idx, "drag_score");
			if(drag_score < 1) continue;

			count++;

			cache_get_field_content(idx, "name", name);

			format(query, sizeof query, "\n{FFFFFF}%d. {FFD700}%s {FFFFFF}| Всего успешных заездов: {FFD700}%d", count, name, drag_score);
			strcat(STRING_GLOBAL, query);
		}		
	}
	cache_delete(result);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{42aaff}ТОП 10 ДРАГ РЕЙСИНГА\n%s", STRING_GLOBAL);
	UpdateDynamic3DTextLabelText(g_drag_racing_rating, 0x000000FF, STRING_GLOBAL);
}

stock FinishDragRacing()
{
	UpdateRating_DrageRacing();
	for(new i; i < MAX_PLAYER_DRAG; i++)
	{
		g_drag_racing[i][E_STATUS] = 0;
		g_drag_racing[i][E_PLAYER] = 0;
		g_drag_racing[i][E_STATUS_PLAYER] = 0;
		g_drag_racing[i][E_BET_PLAYER] = 0;
		g_drag_racing[i][E_TYPE] = 0;
		g_drag_racing[i][E_WIN_PLAYER] = 0;
		g_drag_racing[i][E_BET] = 0;
	}
	return true;
}

stock OpenDragRacingStart(playerid)
{
	BitStream_2(playerid, s_CefInterface, t_CefShow, "DragRacingStart", "[0, [0]]");
	return true;
}

public: OnDragEditorClose(playerid)
{
	print("OnDragEditorClose(playerid)");
	BitStream_1(playerid, s_CefInterface, t_CefHide, "DragRacingStart");
	return true;
}

public: OnDragEditorSelectType(playerid, event)
{
	printf("OnDragEditorSelectType(playerid, %d)", event);
	if(event == 0) // бесплатный 
	{
		BitStream_1(playerid, s_CefInterface, t_CefHide, "DragRacingStart");
		BitStream_2(playerid, s_CefInterface, t_CefShow, "DragRacingStart", "[1, [0, [2, 2], 0, 0]]");
		g_drag_racing[g_drag_racing_id[playerid]][E_TYPE] = 0;
	}
	if(event == 1) // платный
	{
		string_dialog[0] = EOS;
		format(string_dialog, sizeof string_dialog, "Деньги (Всего: %s руб)\nФишки (Всего: %s фишек)\nДонат (Всего: %s донат-монет)", formatStr(GetPlayerMoneyEx(playerid)), formatInt(GetIteam(playerid, 293)), formatInt(GetPlayerCurrentDonate(playerid)));
		Dialog
		(
			playerid, DIALOG_DRAG_RACING, DIALOG_STYLE_LIST, "Выберите валюту", 
			string_dialog,
			"Далее", "Закрыть"
		);
	}
	return true;
}

public: OnDragChangePlayerStatus(playerid, event)
{
	if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 0) if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), event)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
	if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 1) if(GetIteam(playerid, 293) < event) return GameText(playerid, "~r~Недостаточно~n~фишек", 3000, 2);
	if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 2) if(GetPlayerCurrentDonate(playerid) < event) return GameText(playerid, "~r~Недостаточно~n~доната", 3000, 2);
	g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] = event;
	if(g_drag_racing[g_drag_racing_id[playerid]][E_STATUS_PLAYER] == 1) g_drag_racing[g_drag_racing_id[playerid]][E_STATUS_PLAYER] = 0;
	else g_drag_racing[g_drag_racing_id[playerid]][E_STATUS_PLAYER] = 1;
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('DragRacingStart').setLobbyData('[%d, [2, 2], %d, %d]')", g_drag_racing[g_drag_racing_id[playerid]][E_TYPE], g_drag_racing[g_drag_racing_id[playerid]][E_STATUS_PLAYER], g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER]);
	BitStream_1(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER], s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	if(g_drag_racing[0][E_STATUS_PLAYER] == 1 && g_drag_racing[1][E_STATUS_PLAYER] == 1)
	{
		BitStream_1(g_drag_racing[0][E_PLAYER], s_CefInterface, t_CefHide, "DragRacingStart");
		BitStream_1(g_drag_racing[1][E_PLAYER], s_CefInterface, t_CefHide, "DragRacingStart");
		if(g_drag_racing[0][E_BET_PLAYER] != g_drag_racing[1][E_BET_PLAYER] || g_drag_racing[0][E_BET] != g_drag_racing[1][E_BET])
		{
			SCM(g_drag_racing[0][E_PLAYER], 0x709CC9FF, "Участники заезда телепортированы на парковку, т.к их ставки или валюта отличаются.");
			SCM(g_drag_racing[1][E_PLAYER], 0x709CC9FF, "Участники заезда телепортированы на парковку, т.к их ставки или валюта отличаются.");
			new vehicleid_1 = GetPlayerVehicleID(g_drag_racing[0][E_PLAYER]);
			SetVehiclePos(vehicleid_1, g_drag_racing_pos[2][0][0],g_drag_racing_pos[2][0][1],g_drag_racing_pos[2][0][2]);
			SetVehicleZAngle(vehicleid_1, g_drag_racing_pos[2][0][3]);
			new vehicleid_2 = GetPlayerVehicleID(g_drag_racing[1][E_PLAYER]);
			SetVehiclePos(vehicleid_2, g_drag_racing_pos[2][1][0],g_drag_racing_pos[2][1][1],g_drag_racing_pos[2][1][2]);
			SetVehicleZAngle(vehicleid_2, g_drag_racing_pos[2][1][3]);
			return 1;
		}
		if(g_drag_racing[0][E_BET_PLAYER] == g_drag_racing[1][E_BET_PLAYER])
		{
			g_drag_racing[0][E_STATUS] = 2;
			g_drag_racing[1][E_STATUS] = 2;
			new vehicleid_1 = GetPlayerVehicleID(g_drag_racing[0][E_PLAYER]);
			SetVehiclePos(vehicleid_1, g_drag_racing_pos[0][1][0],g_drag_racing_pos[0][1][1],g_drag_racing_pos[0][1][2]);
			SetVehicleZAngle(vehicleid_1, g_drag_racing_pos[0][1][3]);
			new vehicleid_2 = GetPlayerVehicleID(g_drag_racing[1][E_PLAYER]);
			SetVehiclePos(vehicleid_2, g_drag_racing_pos[1][1][0],g_drag_racing_pos[1][1][1],g_drag_racing_pos[1][1][2]);
			SetVehicleZAngle(vehicleid_2, g_drag_racing_pos[1][1][3]);
			if(g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] != 0)
			{
				if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 0)
				{
					GivePlayerMoneyEx(g_drag_racing[0][E_PLAYER], -g_drag_racing[0][E_BET_PLAYER], "Заезд драг рейсинг");
					GivePlayerMoneyEx(g_drag_racing[1][E_PLAYER], -g_drag_racing[1][E_BET_PLAYER], "Заезд драг рейсинг");
				}
				if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 1)
				{
					GiveIteam(g_drag_racing[0][E_PLAYER], 293, 0, g_drag_racing[0][E_BET_PLAYER], 0, "Ставка в заезде [Драг рейсинг]");
					GiveIteam(g_drag_racing[1][E_PLAYER], 293, 0, g_drag_racing[1][E_BET_PLAYER], 0, "Ставка в заезде [Драг рейсинг]");
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%s фишек", formatInt(g_drag_racing[0][E_BET_PLAYER]));
					GameText(g_drag_racing[0][E_PLAYER], STRING_GLOBAL, 3000, 2);
					GameText(g_drag_racing[1][E_PLAYER], STRING_GLOBAL, 3000, 2);
				}
				if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 2)
				{
					GivePlayerDonate(g_drag_racing[0][E_PLAYER], -g_drag_racing[0][E_BET_PLAYER]);
					GivePlayerDonate(g_drag_racing[1][E_PLAYER], -g_drag_racing[1][E_BET_PLAYER]);
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%s донат-монет", formatInt(g_drag_racing[0][E_BET_PLAYER]));
					GameText(g_drag_racing[0][E_PLAYER], STRING_GLOBAL, 3000, 2);
					GameText(g_drag_racing[1][E_PLAYER], STRING_GLOBAL, 3000, 2);
				}
			}
			SCM(g_drag_racing[0][E_PLAYER], 0x709CC9FF, "Вы были телепортированы на участие в заезде.");
			SCM(g_drag_racing[1][E_PLAYER], 0x709CC9FF, "Вы были телепортированы на участие в заезде.");
			g_drag_racing_time = 11;
			g_drag_racing_status[g_drag_racing[0][E_PLAYER]] = 1;
			g_drag_racing_status[g_drag_racing[1][E_PLAYER]] = 1;
		}
	}
	return true; //event // ставка
}
new g_player_notary_offer_id[MAX_PLAYERS];
new g_player_notary_status[MAX_PLAYERS];
new g_player_notary_owner[MAX_PLAYERS];
new g_player_notary_price[MAX_PLAYERS];
new g_player_notary_type_item[MAX_PLAYERS];
new g_player_notary_item_id[MAX_PLAYERS];
stock Notary_StartTradeItem(playerid)
{
	new type = g_player_notary_type_item[playerid];
	new item_id = g_player_notary_item_id[playerid];
	new to_player = g_player_notary_offer_id[playerid];
	new query[148];
	if(type == 1) // гараж
	{
		SetGarageData(item_id, G_OWNER_ID, GetPlayerAccountID(to_player));
		format(g_garage[item_id][G_OWNER_NAME], 21, GetPlayerNameEx(to_player), 0);
		CallLocalFunction("UpdateGarageLabel", "i", item_id);
		format(query, sizeof query, "UPDATE garage SET owner_id=%d WHERE id=%d LIMIT 1", GetGarageData(item_id, G_OWNER_ID), GetGarageData(item_id, G_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 2) // бизнес
	{
		SetBusinessData(item_id, B_OWNER_ID, GetPlayerAccountID(to_player));
		format(g_business[item_id][B_OWNER_NAME], 21, GetPlayerNameEx(to_player), 0);
		CallLocalFunction("UpdateBusinessLabel", "i", item_id);
		format(query, sizeof query, "UPDATE business SET owner_id=%d WHERE id=%d LIMIT 1", GetBusinessData(item_id, B_OWNER_ID), GetBusinessData(item_id, B_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 3) // транспорт
	{
		new index = GetVehicleData(item_id, V_ACTION_ID);
		SetOwnableCarData(index, OC_OWNER_ID, GetPlayerAccountID(to_player));
		format(query, sizeof query, "UPDATE ownable_cars SET owner_id=%d WHERE id=%d", GetOwnableCarData(index, OC_OWNER_ID), GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 4) // дом
	{
		SetHouseData(item_id, H_OWNER_ID, GetPlayerAccountID(to_player));
		format(g_house[item_id][H_OWNER_NAME], 21, GetPlayerNameEx(to_player), 0);
		UpdateHouse(item_id);
		mysql_format(mysql, query, sizeof query, "UPDATE houses SET owner_id=%d WHERE id=%d", GetHouseData(item_id, H_OWNER_ID), GetHouseData(item_id, H_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 6) // семья
	{
	}
	if(type == 7) // сим-карта
	{
		SetPlayerData(to_player, P_PHONE, item_id);
		UpdatePlayerDatabaseInt(to_player, "phone", GetPlayerData(to_player, P_PHONE));
		SetPlayerData(playerid, P_PHONE, 0);
		UpdatePlayerDatabaseInt(playerid, "phone", GetPlayerData(playerid, P_PHONE));
	}
	if(type == 8) // огород
	{
		SetGardenData(item_id, G_OWNER_ID, GetPlayerAccountID(to_player));
		format(g_garden[item_id][G_OWNER_NAME], 21, GetPlayerNameEx(to_player), 0);
		CallLocalFunction("UpdateGardenLabel", "i", item_id);
		mysql_format(mysql, query, sizeof query, "UPDATE gardens SET owner_id=%d WHERE id=%d LIMIT 1", GetGardenData(item_id, G_OWNER_ID), GetGardenData(item_id, G_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 9) // киоск
	{
		SetKioskData(item_id, K_OWNER_ID, GetPlayerAccountID(to_player));
		mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET owner_id=%d WHERE id=%d", GetPlayerAccountID(to_player), GetKioskData(item_id, K_SQL_ID));
		mysql_query(mysql, query, false);
	}
	g_player_notary_price[playerid] = 0;
	g_player_notary_owner[playerid] = 0;
	g_player_notary_status[playerid] = 0;
	g_player_notary_item_id[playerid] = 0;
	g_player_notary_type_item[playerid] = 0;
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Trade");
	return true;
}

public:Notary_StartTrade(playerid) // совершить обмен
{
	if(g_player_notary_owner[playerid] != 1)
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Совершить обмен может только тот кто предложил");
	new to_player = g_player_notary_offer_id[playerid];
	if(g_player_notary_status[to_player] != 2)
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Ожидайте потверждение второго игрока");
	if(g_player_notary_price[playerid] > 0)
	{
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), g_player_notary_price[playerid])) 
			return SCM(playerid, 0xeb622aFF, "У одной из сторон недостаточно денег для доплаты / сделки");
		GivePlayerMoneyEx(to_player, g_player_notary_price[playerid], "Получил доплату с обмена в нотариусе");
		GivePlayerMoneyEx(playerid, -g_player_notary_price[playerid], "Оплатил доплату с обмена в нотариусе");
	}
	if(g_player_notary_price[to_player] > 0)
	{
		if(!GetILPlayerInt(GetPlayerMoneyEx(to_player), g_player_notary_price[to_player])) 
			return SCM(playerid, 0xeb622aFF, "У одной из сторон недостаточно денег для доплаты / сделки");
		GivePlayerMoneyEx(playerid, g_player_notary_price[to_player], "Получил доплату с обмена в нотариусе");
		GivePlayerMoneyEx(to_player, -g_player_notary_price[to_player], "Оплатил доплату с обмена в нотариусе");
	}
	if(g_player_notary_price[to_player] != 0 && g_player_notary_price[playerid] != 0)
	{
		new fmt_text[148];
		format(fmt_text, sizeof fmt_text, "~g~+%s руб~n~~r~-%s руб", formatInt(g_player_notary_price[to_player]), formatInt(g_player_notary_price[playerid]));
		GameText(playerid, fmt_text, 3000, 2);
		format(fmt_text, sizeof fmt_text, "~g~+%s руб~n~~r~-%s руб", formatInt(g_player_notary_price[playerid]), formatInt(g_player_notary_price[to_player]));
		GameText(to_player, fmt_text, 3000, 2);
	}
	Notary_StartTradeItem(playerid);
	Notary_StartTradeItem(to_player);
	return true;
}

public:Notary_SetSurchargeObject(playerid, price)
{
	if(price < 1 || price > 2000000000)
		return SCM(playerid, COLOR_GREY, "Выставить доплату можно от 1 до 2.000.000.000 руб");
	if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) 
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Недостаточно средств для доплаты / сделки");
	SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Сумма доплаты с вашей стороны успешно установлена");
	new fmt_text[148];
	format(fmt_text, sizeof fmt_text, "interface('Trade').player1.itemSurcharge = %d", price);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
	format(fmt_text, sizeof fmt_text, "interface('Trade').player2.itemSurcharge = %d", price);
	BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
	g_player_notary_price[playerid] = price;
	return true;
}

public:Notary_SetExchangeObject(playerid, type) // выбор что ты хочешь обменять
{
	if(type == 1) // гараж
	{
		new query[124],
			Cache: result;
		format(query, sizeof query, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);
		new rows = cache_num_rows();
		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного гаража во владении.");
		string_dialog = "";
		for(new i = 0; i < rows; i ++)
		{
			new biz_id = cache_get_field_content_int(i, "id");
			format(query, sizeof query, "{FFFFFF}-Гараж: %d\n", biz_id);
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, biz_id-1);
		}
		Dialog
		(
			playerid, DIALOG_GARAGE_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите гараж",
			string_dialog,
			"Выбрать", "Закрыть"
		);
		cache_delete(result);
	}
	if(type == 2) // бизнес
	{
		new query[124],
			Cache: result,
			biz_id,
			biz_name[64];
		format(query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);
		new rows = cache_num_rows();
		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного бизнеса во владении.");
		string_dialog = "";
		for(new i = 0; i < rows; i ++)
		{
			biz_id = cache_get_field_content_int(i, "id");
			cache_get_field_content(i, "name", biz_name);
			format(query, sizeof query, "{FFFFFF}%d. - %s (№%d)\n", i + 1, biz_name, biz_id);
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, biz_id-1);
		}
		Dialog
		(
			playerid, DIALOG_BIZ_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите бизнес",
			string_dialog,
			"Выбрать", "Закрыть"
		);
		cache_delete(result);
	}
	if(type == 3) // транспорт
	{
		page_cars[playerid] = 1;
		type_page_cars[playerid] = 15;
		ShowOwnableCars(playerid, DIALOG_CAR_LIST_NOTARY, page_cars[playerid]);
	}
	if(type == 4) // дом
	{
		new query[94],
			Cache: result,
			biz_id;
		mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);
		new rows = cache_num_rows();
		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного дома во владении.");
		string_dialog[0] = EOS;
		for(new i = 0; i < rows; i ++)
		{
			biz_id = cache_get_field_content_int(i, "id");
			new entrance = cache_get_field_content_int(i, "entrance");

			if(entrance == -1)
			{
				if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
				else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
			}
			else
			{
				if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
				else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
			}
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, biz_id-1);
		}
		Dialog
		(
			playerid, DIALOG_HOME_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите дом",
			string_dialog,
			"Выбрать", "Закрыть"
		);
		cache_delete(result);
	}
	if(type == 5) // команда
	{
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Данный вид недоступен для обмена");
	}
	if(type == 6) // семья
	{
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Данный вид недоступен для обмена");
	}
	if(type == 7) // сим-карта
	{
		if(GetPlayerData(playerid, P_PHONE) == 0) 
			return SendClientMessage(playerid, 0xeb622aFF, "У Вас отсутствует сим-карта для обмена");
		new fmt_text[360];
		format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player1\": {\"item\": 6,\"itemName\": \"Сим-карта: %d\",\"itemPrice\": 500,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", GetPlayerData(playerid, P_PHONE));
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
		format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player2\": {\"item\": 6,\"itemName\": \"Сим-карта: %d\",\"itemPrice\": 500,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", GetPlayerData(playerid, P_PHONE));
		BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
		g_player_notary_item_id[playerid] = GetPlayerData(playerid, P_PHONE);
	}
	if(type == 8) // огород
	{
		new query[256],
			Cache: result,
			garden_id;
		mysql_format(mysql, query, sizeof query, "SELECT * FROM gardens WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);
		new rows = cache_num_rows();
		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного огорода во владении.");
		string_dialog[0] = EOS;
		for(new i = 0; i < rows; i ++)
		{
			garden_id = cache_get_field_content_int(i, "id");
			format(query, sizeof query, "%d.{FFFFFF} Огород №%d\n",i+1, garden_id);
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, garden_id);
		}
		Dialog
		(
			playerid, DIALOG_GARDEN_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите огород",
			string_dialog,
			"Выбрать", "Закрыть"
		);
		cache_delete(result);
	}
	if(type == 9) // киоск
	{
		new query[256],
			Cache: result,
			kiosk_id,
			kiosk_name[24];
		mysql_format(mysql, query, sizeof query, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);
		new rows = cache_num_rows();
		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного киоска во владении.");
		vibor_kiosk_atm[playerid] = 1;
		string_dialog[0] = EOS;
		for(new i = 0; i < rows; i ++)
		{
			kiosk_id = cache_get_field_content_int(i, "id");
			cache_get_field_content(i, "name", kiosk_name);
			format(query, sizeof query, "{FFFFFF}Киоск %s №%d\n", kiosk_name, kiosk_id);
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, kiosk_id-1);
		}
		Dialog
		(
			playerid, DIALOG_KIOSK_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите киоск",
			string_dialog,
			"Выбрать", "Закрыть"
		);
		cache_delete(result);
	}
	if(type == 10) // деньги
	{
		SCM(playerid, 0xeb622aFF, "Для подтверждения вы должны установить доплату");
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Trade').updateData('{\"player1\": {\"item\": 9,\"itemName\": \"Деньги\",\"itemPrice\": 0,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')");
		BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, "interface('Trade').updateData('{\"player2\": {\"item\": 9,\"itemName\": \"Деньги\",\"itemPrice\": 0,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')");
	}
	g_player_notary_type_item[playerid] = type;
	g_player_notary_price[playerid] = 0;
	g_player_notary_status[playerid] = 1;
	return true;
}

public:Notary_AcceptExchange(playerid)
{
	if(g_player_notary_type_item[playerid] == 0) 
		return true;
	if(g_player_notary_type_item[playerid] == 10 && g_player_notary_price[playerid] < 1)
		return SCM(playerid, 0xeb622aFF, "Для подтверждения вы должны установить доплату");
	g_player_notary_status[playerid] = 2;
	SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Ожидайте подтверждение обмена");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Trade').player1.state = 1");
	BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, "interface('Trade').player2.state = 1");
	return true;
}

public:Notary_CancelPlayerStatus(playerid)
{
	if(g_player_notary_type_item[playerid] == 0) 
		return true;
	g_player_notary_status[playerid] = 1;
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Trade').player1.state = 0");
	BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, "interface('Trade').player2.state = 0");
	return true;
}

public: Notary_HidePlayerPanel(playerid) // закрытие панели игроком
{
	if(g_player_notary_status[playerid] == 0)
		return true;
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Trade");
	BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefHide, "Trade");
	SCM(g_player_notary_offer_id[playerid], 0xf9a118FF, "Уведомление: {FFFFFF}Игрок отказался от обмена");
	g_player_notary_price[playerid] = 0;
	g_player_notary_owner[playerid] = 0;
	g_player_notary_status[playerid] = 0;
	g_player_notary_item_id[playerid] = 0;
	g_player_notary_type_item[playerid] = 0;
	g_player_notary_price[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_owner[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_status[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_item_id[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_type_item[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_offer_id[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_offer_id[playerid] = 0;
	return true;
}

forward Float:GetDistanceBetweenPlayers(p1,p2);
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock SelectSpawn(playerid)
{
	BitStream_2(playerid, s_CefInterface, t_CefShow, "SelectSpawn", "[[\
	[\"На ЖД вокзале, автостанции\",1,34],\
	[\"В личном доме\",0,24],\
	[\"В гостях (совместное проживание)\",0,24],\
	[\"На базе организации\",0,101],\
	[\"В доме банды\",0,101],\
	[\"В доме на колесах\",0,8],\
	[\"В личном гараже\",0,39]\
	]]");
	return 1;
}

stock OnPlayerSelectSpawnClose(playerid) BitStream_1(playerid, s_CefInterface, t_CefHide, "SelectSpawn");
public: OnPlayerSelectSpawn(playerid, listitem)
{
	switch(listitem){
		case 1: 
		{
			new query[94],
				Cache: result;
			mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, query, true);
			new rows = cache_num_rows();
			if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");
			string_dialog[0] = EOS;
			for(new i; i < rows; i ++)
			{
				new biz_id = cache_get_field_content_int(i, "id");
				new entrance = cache_get_field_content_int(i, "entrance");
				if(entrance == -1)
				{
					if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
					else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
				}
				else
				{
					if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
					else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
				}
				strcat(string_dialog, query);
				SetPlayerListitemValue(playerid, i, biz_id-1);
			}
			Dialog(playerid, DIALOG_SPAWN_HOME_LIST, DIALOG_STYLE_LIST, "{FFCD00}Выберите дом", string_dialog, "Выбрать", "Закрыть");
			cache_delete(result);
			return true;
		}
		case 2: if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1) return GameText(playerid, "~r~Вы не проживаете ни у кого в гостях", 3000, 1);
		case 3: if(!GetPlayerTeamEx(playerid)) return GameText(playerid, "~r~Вы не состоите в организации", 3000, 1);
		case 4: if(!GetPlayerFamily(playerid)) return GameText(playerid, "~r~Вы не состоите в банде", 3000, 1);
		case 5:
		{
			page_cars[playerid] = 1;
			type_page_cars[playerid] = 17;
			ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SPAWN, page_cars[playerid]);
			return true;
		}
	}
	SetPlayerData(playerid, P_SPAWN, listitem);
	UpdatePlayerDatabaseInt(playerid, "setting_spawn", listitem);
    SendClientMessage(playerid, 0x3399FFFF, "Место появления в игре изменено");
    BitStream_1(playerid, s_CefInterface, t_CefHide, "SelectSpawn");
	return true;
}

new g_vehicle_house[4] = 
{
	15277,
	15278,
	15279,
	15668
};

new vehicle_house_id[MAX_PLAYERS];
new vehicle_house_status[MAX_PLAYERS];
stock EnterVehicleHouse(playerid)
{
	new vehicleid = IsVehicleIdHouse(playerid);
	if(!vehicleid) return true;
	if(!IsAOwnableCar(vehicleid)) return true;
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleData(i, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) 
			continue;
		if(vehicleid != i) 
			continue;
		new action_id = GetVehicleData(i, V_ACTION_ID);
		vehicle_house_id[playerid] = GetOwnableCarData(action_id, OC_SQL_ID);
		SetPlayerPosEx(playerid, -2803.1982,-1500.1239,1001.0106,180.8575, 4, vehicle_house_id[playerid]);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		vehicle_house_status[playerid] = 0;
		BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выйти из дома\"]]");
	}
	return true;
}

stock ExitVehicleHouse(playerid)
{
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleData(i, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR)
			continue;
		new auction_id = GetVehicleData(i, V_ACTION_ID);
		if(GetOwnableCarData(auction_id, OC_OWNER_ID) != GetPlayerAccountID(playerid))
			continue;
		if(GetOwnableCarData(auction_id, OC_SQL_ID) != vehicle_house_id[playerid])
			continue;
	    new Float: POS[5];
		GetCoordVehicle(i, VEHICLE_COORD_TYPE_BOOT, POS[0], POS[1], POS[2], POS[3], POS[4]);
		SetPlayerPosEx(playerid, POS[0] + 1.5, POS[1] + 1.5, POS[2], POS[3], 0, 0);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		vehicle_house_id[playerid] = 0;
		return true;
	}
	SCM(playerid, COLOR_GREY, "Ошибка! Ваше транспортное средство не загружено на сервере");
	return true;
}

stock IsVehicleIdHouse(playerid)
{
	new vehicleid = GetNearestVehicleID(playerid, 5.0);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(vehicle_house_status[playerid] == 1)
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
			vehicle_house_status[playerid] = 0;
		}
	}
	else
	{
		if(!IsAOwnableCar(vehicleid)) return 0;
		new model_id = GetVehicleData(vehicleid, V_MODELID);
		for(new i; i < sizeof g_vehicle_house; i++)
		{
			if(g_vehicle_house[i] != model_id) continue;
			new Float: POS[5];
			GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BOOT, POS[0], POS[1], POS[2], POS[3], POS[4]);
			if(IsPlayerInRangeOfPoint(playerid, 2.5, POS[0], POS[1], POS[2]))
			{
				if(vehicle_house_status[playerid] == 0)
				{
					BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Войти в дом\"]]");
					vehicle_house_status[playerid] = 1;
				}
				return vehicleid;
			}
			else 
			{
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				vehicle_house_status[playerid] = 0;
				return 1;
			}
		}
	}
	return 0;
}

new RouletteTable[MAX_PLAYERS]; // стол
new PositionChip[MAX_PLAYERS] = -1; // туда куда поставили
new RouletteChip[MAX_PLAYERS]; // объект
new ruletka_time1[MAX_PLAYERS];
new RouletteStatus[MAX_PLAYERS];
new ChipRandom[7];
new StatusChip[MAX_PLAYERS];
new Float:ChipPosition[6][49][3] = // координаты фишек
{
    {
        {223.168, -303.192, 1010.98}, //0
        {223.393, -303.032, 1010.98}, //1
        {223.165, -303.037, 1010.98}, //2
        {222.935, -303.037, 1010.98}, //3
        {223.396, -302.885, 1010.98}, //4
        {223.168, -302.890, 1010.98}, //5
        {222.935, -302.895, 1010.98}, //6
        {223.406, -302.744, 1010.98}, //7
        {223.162, -302.752, 1010.98}, //8
        {222.938, -302.749, 1010.98}, //9
        {223.409, -302.599, 1010.98}, //10
        {223.168, -302.599, 1010.98}, //11
        {222.935, -302.600, 1010.98}, //12
        {223.406, -302.459, 1010.98}, //13
        {223.166, -302.461, 1010.98}, //14
        {222.929, -302.458, 1010.98}, //15
        {223.408, -302.313, 1010.98}, //16
        {223.168, -302.312, 1010.98}, //17
        {222.928, -302.308, 1010.98}, //18
        {223.408, -302.167, 1010.98}, //19
        {223.165, -302.172, 1010.98}, //20
        {222.930, -302.164, 1010.98}, //21
        {223.401, -302.023, 1010.98}, //22
        {223.165, -302.022, 1010.98}, //23
        {222.935, -302.023, 1010.98}, //24
        {223.399, -301.874, 1010.98}, //25
        {223.165, -301.877, 1010.98}, //26
        {222.935, -301.867, 1010.98}, //27
        {223.397, -301.731, 1010.98}, //28
        {223.166, -301.734, 1010.98}, //29
        {222.932, -301.730, 1010.98}, //30
        {223.396, -301.580, 1010.98}, //31
        {223.166, -301.580, 1010.98}, //32
        {222.927, -301.584, 1010.98}, //33
        {223.399, -301.441, 1010.98}, //34
        {223.166, -301.438, 1010.98}, //35
        {222.928, -301.441, 1010.98}, //36
		{223.397, -301.293, 1010.98}, //2 TO 1 возле 34
		{223.157, -301.297, 1010.98}, //2 TO 1 возле 35
        {222.928, -301.302, 1010.98}, //2 TO 1 возле 36
		{223.596, -302.822, 1010.98}, //1ST 12
        {223.596, -302.251, 1010.98}, //2ND 12
        {223.600, -301.662, 1010.98}, //3RD 12
        {223.747, -302.377, 1010.98}, //RED
        {223.748, -302.102, 1010.98}, //BLACK
        {223.749, -302.977, 1010.98}, //1 TO 18
        {223.746, -301.513, 1010.98}, //19 TO 36
        {223.746, -302.677, 1010.98}, //EVEN
        {223.748, -301.806, 1010.98}  //ODD
    },
    {
        {223.084, -297.194, 1010.98}, //0
		{223.306, -297.046, 1010.98}, //1
		{223.076, -297.049, 1010.98}, //2
		{222.844, -297.044, 1010.98}, //3
		{223.314, -296.899, 1010.98}, //4
		{223.074, -296.899, 1010.98}, //5
		{222.84, -296.8980, 1010.98}, //6
		{223.314, -296.765, 1010.98}, //7
		{223.074, -296.757, 1010.98}, //8
		{222.844, -296.757, 1010.98}, //9
		{223.315, -296.602, 1010.98}, //10
		{223.084, -296.606, 1010.98}, //11
		{222.839, -296.617, 1010.98}, //12
		{223.309, -296.463, 1010.98}, //13
		{223.075, -296.461, 1010.98}, //14
		{222.847, -296.474, 1010.98}, //15
		{223.314, -296.315, 1010.98}, //16
		{223.075, -296.315, 1010.98}, //17
		{222.839, -296.313, 1010.98}, //18
		{223.304, -296.176, 1010.98}, //19
		{223.074, -296.169, 1010.98}, //20
		{222.834, -296.170, 1010.98}, //21
		{223.308, -296.025, 1010.98}, //22
		{223.074, -296.024, 1010.98}, //23
		{222.834, -296.028, 1010.98}, //24
		{223.304, -295.884, 1010.98}, //25
		{223.074, -295.874, 1010.98}, //26
		{222.834, -295.892, 1010.98}, //27
		{223.307, -295.739, 1010.98}, //28
		{223.075, -295.738, 1010.98}, //29
		{222.834, -295.743, 1010.98}, //30
		{223.299, -295.598, 1010.98}, //31
		{223.084, -295.598, 1010.98}, //32
		{222.846, -295.598, 1010.98}, //33
		{223.302, -295.454, 1010.98}, //34
		{223.078, -295.448, 1010.98}, //35
		{222.853, -295.442, 1010.98}, //36
		{223.287, -295.308, 1010.98}, //2 TO 1 возле 34
		{223.071, -295.306, 1010.98}, //2 TO 1 возле 35
		{222.83, -295.3070, 1010.98}, //2 TO 1 возле 36
		{223.504, -296.854, 1010.98}, //1ST 12
		{223.509, -296.258, 1010.98}, //2ND 12
		{223.509, -295.683, 1010.98}, //3RD 12
		{223.654, -296.391, 1010.98}, //RED
		{223.654, -296.106, 1010.98}, //BLACK
		{223.654, -296.986, 1010.98}, //1 TO 18
		{223.654, -295.520, 1010.98}, //19 TO 36
		{223.654, -296.681, 1010.98}, //EVEN
		{223.654, -295.811, 1010.98}  //ODD
    },
	{
		{208.168, -296.109, 1010.98}, //0
		{207.928, -296.271, 1010.98}, //1
		{208.168, -296.272, 1010.98}, //2
		{208.408, -296.268, 1010.98}, //3
		{207.938, -296.409, 1010.98}, //4
		{208.168, -296.408, 1010.98}, //5
		{208.408, -296.408, 1010.98}, //6
		{207.938, -296.549, 1010.98}, //7
		{208.168, -296.549, 1010.98}, //8
		{208.398, -296.548, 1010.98}, //9
		{207.938, -296.698, 1010.98}, //10
		{208.178, -296.703, 1010.98}, //11
		{208.398, -296.703, 1010.98}, //12
		{207.938, -296.843, 1010.98}, //13
		{208.168, -296.843, 1010.98}, //14
		{208.408, -296.843, 1010.98}, //15
		{207.948, -296.984, 1010.98}, //16
		{208.168, -296.986, 1010.98}, //17
		{208.408, -296.986, 1010.98}, //18
		{207.948, -297.124, 1010.98}, //19
		{208.178, -297.128, 1010.98}, //20
		{208.398, -297.131, 1010.98}, //21
		{207.948, -297.281, 1010.98}, //22
		{208.168, -297.273, 1010.98}, //23
		{208.408, -297.278, 1010.98}, //24
		{207.947, -297.426, 1010.98}, //25
		{208.177, -297.427, 1010.98}, //26
		{208.417, -297.427, 1010.98}, //27
		{207.937, -297.567, 1010.98}, //28
		{208.177, -297.567, 1010.98}, //29
		{208.417, -297.577, 1010.98}, //30
		{207.937, -297.707, 1010.98}, //31
		{208.167, -297.717, 1010.98}, //32
		{208.407, -297.717, 1010.98}, //33
		{207.937, -297.857, 1010.98}, //34
		{208.177, -297.857, 1010.98}, //35
		{208.407, -297.857, 1010.98}, //36
		{207.935, -298.006, 1010.98}, //2 TO 1 возле 34
		{208.178, -298.007, 1010.98}, //2 TO 1 возле 35
		{208.408, -297.997, 1010.98}, //2 TO 1 возле 36
		{207.728, -296.459, 1010.98}, //1ST 12
		{207.728, -297.048, 1010.98}, //2ND 12
		{207.738, -297.622, 1010.98}, //3RD 12
		{207.588, -296.916, 1010.98}, //RED
		{207.588, -297.206, 1010.98}, //BLACK
		{207.588, -296.325, 1010.98}, //1 TO 18
		{207.588, -297.785, 1010.98}, //19 TO 36
		{207.588, -296.626, 1010.98}, //EVEN
		{207.588, -297.499, 1010.98}  //ODD
	},
	{
		{208.136, -302.540, 1010.98}, //0
		{207.911, -302.699, 1010.98}, //1
		{208.135, -302.696, 1010.98}, //2
		{208.375, -302.696, 1010.98}, //3
		{207.915, -302.847, 1010.98}, //4
		{208.145, -302.837, 1010.98}, //5
		{208.375, -302.847, 1010.98}, //6
		{207.912, -302.979, 1010.98}, //7
		{208.142, -302.979, 1010.98}, //8
		{208.372, -302.989, 1010.98}, //9
		{207.913, -303.130, 1010.98}, //10
		{208.143, -303.130, 1010.98}, //11
		{208.373, -303.130, 1010.98}, //12
		{207.913, -303.280, 1010.98}, //13
		{208.142, -303.277, 1010.98}, //14
		{208.372, -303.277, 1010.98}, //15
		{207.912, -303.418, 1010.98}, //16
		{208.144, -303.422, 1010.98}, //17
		{208.370, -303.418, 1010.98}, //18
		{207.911, -303.561, 1010.98}, //19
		{208.141, -303.560, 1010.98}, //20
		{208.371, -303.564, 1010.98}, //21
		{207.911, -303.715, 1010.98}, //22
		{208.141, -303.711, 1010.98}, //23
		{208.371, -303.718, 1010.98}, //24
		{207.910, -303.858, 1010.98}, //25
		{208.140, -303.861, 1010.98}, //26
		{208.370, -303.859, 1010.98}, //27
		{207.910, -303.997, 1010.98}, //28
		{208.140, -303.997, 1010.98}, //29
		{208.370, -304.007, 1010.98}, //30
		{207.910, -304.149, 1010.98}, //31
		{208.140, -304.149, 1010.98}, //32
		{208.370, -304.149, 1010.98}, //33
		{207.910, -304.299, 1010.98}, //34
		{208.149, -304.302, 1010.98}, //35
		{208.374, -304.292, 1010.98}, //36
		{207.908, -304.432, 1010.98}, //2 TO 1 возле 34
		{208.148, -304.432, 1010.98}, //2 TO 1 возле 35
		{208.379, -304.432, 1010.98}, //2 TO 1 возле 36
		{207.709, -302.894, 1010.98}, //1ST 12
		{207.699, -303.478, 1010.98}, //2ND 12
		{207.699, -304.065, 1010.98}, //3RD 12
		{207.559, -303.350, 1010.98}, //RED
		{207.559, -303.630, 1010.98}, //BLACK
		{207.559, -302.755, 1010.98}, //1 TO 18
		{207.559, -304.215, 1010.98}, //19 TO 36
		{207.559, -303.062, 1010.98}, //EVEN
		{207.559, -303.929, 1010.98}  //ODD
	},
	{
		{190.756, -293.002, 1011.8}, //0
		{190.904, -293.238, 1011.8}, //1
		{190.907, -293.008, 1011.8}, //2
		{190.910, -292.770, 1011.8}, //3
		{191.049, -293.239, 1011.8}, //4
		{191.049, -293.009, 1011.8}, //5
		{191.044, -292.769, 1011.8}, //6
		{191.194, -293.239, 1011.8}, //7
		{191.194, -293.009, 1011.8}, //8
		{191.194, -292.769, 1011.8}, //9
		{191.344, -293.239, 1011.8}, //10
		{191.344, -293.009, 1011.8}, //11
		{191.341, -292.769, 1011.8}, //12
		{191.482, -293.243, 1011.8}, //13
		{191.482, -293.004, 1011.8}, //14
		{191.482, -292.774, 1011.8}, //15
		{191.629, -293.240, 1011.8}, //16
		{191.629, -293.000, 1011.8}, //17
		{191.629, -292.770, 1011.8}, //18
		{191.779, -293.240, 1011.8}, //19
		{191.779, -293.000, 1011.8}, //20
		{191.779, -292.770, 1011.8}, //21
		{191.926, -293.234, 1011.8}, //22
		{191.922, -293.001, 1011.8}, //23
		{191.924, -292.769, 1011.8}, //24
		{192.074, -293.232, 1011.8}, //25
		{192.071, -293.002, 1011.8}, //26
		{192.071, -292.772, 1011.8}, //27
		{192.217, -293.230, 1011.8}, //28
		{192.217, -293.000, 1011.8}, //29
		{192.218, -292.774, 1011.8}, //30
		{192.358, -293.234, 1011.8}, //31
		{192.358, -293.004, 1011.8}, //32
		{192.360, -292.771, 1011.8}, //33
		{192.500, -293.233, 1011.8}, //34
		{192.499, -293.003, 1011.8}, //35
		{192.499, -292.773, 1011.8}, //36
		{192.649, -293.231, 1011.8}, //2 TO 1 возле 34
		{192.648, -292.991, 1011.8}, //2 TO 1 возле 35
		{192.644, -292.762, 1011.8}, //2 TO 1 возле 36
		{191.104, -293.439, 1011.8}, //1ST 12
		{191.693, -293.440, 1011.8}, //2ND 12
		{192.273, -293.442, 1011.8}, //3RD 12
		{191.561, -293.579, 1011.8}, //RED
		{191.847, -293.581, 1011.8}, //BLACK
		{190.963, -293.578, 1011.8}, //1 TO 18
		{192.435, -293.588, 1011.8}, //19 TO 36
		{191.266, -293.579, 1011.8}, //EVEN
		{192.139, -293.589, 1011.8}  //ODD
	},
	{
		{201.075, -332.381, 1010.96}, //0
		{201.323, -332.229, 1010.96}, //1
		{201.070, -332.226, 1010.96}, //2
		{200.835, -332.229, 1010.96}, //3
		{201.324, -332.089, 1010.96}, //4
		{201.075, -332.084, 1010.96}, //5
		{200.835, -332.084, 1010.96}, //6
		{201.324, -331.939, 1010.96}, //7
		{201.075, -331.944, 1010.96}, //8
		{200.845, -331.944, 1010.96}, //9
		{201.323, -331.796, 1010.96}, //10
		{201.075, -331.796, 1010.96}, //11
		{200.846, -331.796, 1010.96}, //12
		{201.314, -331.649, 1010.96}, //13
		{201.075, -331.654, 1010.96}, //14
		{200.845, -331.654, 1010.96}, //15
		{201.323, -331.501, 1010.96}, //16
		{201.077, -331.501, 1010.96}, //17
		{200.845, -331.501, 1010.96}, //18
		{201.323, -331.366, 1010.96}, //19
		{201.085, -331.366, 1010.96}, //20
		{200.847, -331.366, 1010.96}, //21
		{201.323, -331.221, 1010.96}, //22
		{201.083, -331.221, 1010.96}, //23
		{200.847, -331.221, 1010.96}, //24
		{201.327, -331.068, 1010.96}, //25
		{201.084, -331.068, 1010.96}, //26
		{200.849, -331.068, 1010.96}, //27
		{201.322, -330.922, 1010.96}, //28
		{201.084, -330.922, 1010.96}, //29
		{200.844, -330.922, 1010.96}, //30
		{201.324, -330.782, 1010.96}, //31
		{201.087, -330.782, 1010.96}, //32
		{200.857, -330.782, 1010.96}, //33
		{201.330, -330.632, 1010.96}, //34
		{201.091, -330.632, 1010.96}, //35
		{200.862, -330.632, 1010.96}, //36
		{201.319, -330.479, 1010.96}, //2 TO 1 возле 34
		{201.089, -330.479, 1010.96}, //2 TO 1 возле 35
		{200.859, -330.479, 1010.96}, //2 TO 1 возле 36
		{201.513, -332.036, 1010.96}, //1ST 12
		{201.513, -331.446, 1010.96}, //2ND 12
		{201.523, -330.865, 1010.96}, //3RD 12
		{201.654, -331.584, 1010.96}, //RED
		{201.664, -331.294, 1010.96}, //BLACK
		{201.648, -332.180, 1010.96}, //1 TO 18
		{201.674, -330.714, 1010.96}, //19 TO 36
		{201.654, -331.884, 1010.96}, //EVEN
		{201.674, -330.994, 1010.96}  //ODD
	}
};

stock RulletShow(playerid)
{
	PositionChip[playerid] = -1;
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d, 10000000]", GetIteam(playerid, 293));
	BitStream_2(playerid, s_CefInterface, t_CefShow, "CasinoRullet", STRING_GLOBAL);
	return 1;
}

stock LoadRoulette(playerid)
{
	if(StatusChip[playerid] == 0)
	{
		if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
		RouletteChip[playerid] = INVALID_OBJECT_ID;
		PositionChip[playerid] = 17;
		RouletteChip[playerid] = CreateDynamicObject(10887, ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0] + 0.1, ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1] + 0.3, ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2] + 0.3, 0.0, 0.0, 0.0, -1, -1, playerid);
		MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50, 0.00000, 0.00000, 0.0);
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x + 0.05, y + 0.05, z);
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.4474,-302.4741,1012.0385))
		{
			InterpolateCameraPos(playerid, 225.375091, -302.632354, 1013.522888, 223.1900, -302.7880, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 221.801132, -302.647369, 1010.026245, 223.0900, -302.7880, 1012.8310, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.1531,-296.3004,1012.0284))
		{
			InterpolateCameraPos(playerid, 225.492965, -296.621063, 1013.492187, 223.1100, -296.8030, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 221.715301, -296.595642, 1010.216735, 223.0100, -296.8030, 1012.8310, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.7382,-296.5287,1012.0684))
		{
			InterpolateCameraPos(playerid, 205.750213, -296.680328, 1013.723571, 208.1200, -296.5370, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 209.323822, -296.732971, 1010.226928, 208.2200, -296.5370, 1012.8310, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.9463,-303.3881,1012.0385))
		{
			InterpolateCameraPos(playerid, 205.576446, -303.171691, 1013.490661, 208.1000, -302.9880, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 209.493804, -303.188140, 1010.383544, 208.2000, -302.9880, 1012.8310, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 191.6914,-293.2050,1012.8684))
		{
			InterpolateCameraPos(playerid, 191.293655, -295.537445, 1014.428344, 191.2720, -293.0270, 1014.7610, 2000);
			InterpolateCameraLookAt(playerid, 191.314788, -291.671630, 1011.257385, 191.2720, -292.9270, 1013.6610, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 201.4565,-331.6115,1012.0385))
		{
			InterpolateCameraPos(playerid, 203.738037, -331.871582, 1013.848327, 201.1100, -331.8660, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 200.052810, -331.764617, 1010.470825, 201.0100, -331.8660, 1012.8310, 2000);
		}
		SendClientMessage(playerid, 0xFAAC58FF, "Чтобы сделать ставку используйте клавиши {FFFFFF}W-A-S-D {FAAC58}и {FFFFFF}ENTER.");
		StatusChip[playerid] = 1;
	}
	return 1;
}

public:OnPlayerRoulClose(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "CasinoRullet");
	SetCameraBehindPlayer(playerid);
	RouletteStatus[playerid] = 0;
	DeletePVar(playerid, "Rull_Bet");
	PositionChip[playerid] = -1;
	RouletteTable[playerid] = 0;
	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;
	StatusChip[playerid] = 0;
	return 1;
}

public:OnPlayerRoulSetBet(playerid,ty,ti)
{
	if(RouletteStatus[playerid] == 1) return SCM(playerid, -1, "Вы уже поставили ставку, ожидайте окончания игры.");
	if(PositionChip[playerid] == -1) return GameText(playerid, "Необходимо выбрать позицию", 3000, 0);
	if(ty < 1000 || ty > 10000000) return SCM(playerid, -1, "Допустимая ставка от 1000 фишек до 10.000.000 фишек");
	if(GetIteam(playerid, 293) < ty) return SCM(playerid, -1, "У Вас недостаточно фишек для ставки");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.4474,-302.4741,1012.0385))
    {
        InterpolateCameraPos(playerid, 223.1900, -302.7880, 1013.9310, 225.375091, -302.632354, 1013.522888, 2000);
        InterpolateCameraLookAt(playerid, 223.0900, -302.7880, 1012.8310, 221.801132, -302.647369, 1010.026245, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.1531,-296.3004,1012.0284))
    {
        InterpolateCameraPos(playerid, 223.1100, -296.8030, 1013.9310, 225.492965, -296.621063, 1013.492187, 2000);
        InterpolateCameraLookAt(playerid, 223.0100, -296.8030, 1012.8310, 221.715301, -296.595642, 1010.216735, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.7382,-296.5287,1012.0684))
    {
        InterpolateCameraPos(playerid, 208.1200, -296.5370, 1013.9310, 205.750213, -296.680328, 1013.723571, 2000);
        InterpolateCameraLookAt(playerid, 208.2200, -296.5370, 1012.8310, 209.323822, -296.732971, 1010.226928, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.9463,-303.3881,1012.0385))
    {
        InterpolateCameraPos(playerid, 208.1000, -302.9880, 1013.9310, 205.576446, -303.171691, 1013.490661, 2000);
        InterpolateCameraLookAt(playerid, 208.2000, -302.9880, 1012.8310, 209.493804, -303.188140, 1010.383544, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 191.6914,-293.2050,1012.8684))
    {
        InterpolateCameraPos(playerid, 191.2720, -293.0270, 1014.7610, 191.293655, -295.537445, 1014.428344, 2000);
        InterpolateCameraLookAt(playerid, 191.2720, -292.9270, 1013.6610, 191.314788, -291.671630, 1011.257385, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 201.4565,-331.6115,1012.0385))
    {
        InterpolateCameraPos(playerid, 201.1100, -331.8660, 1013.9310, 203.738037, -331.871582, 1013.848327, 2000);
        InterpolateCameraLookAt(playerid, 201.0100, -331.8660, 1012.8310, 200.052810, -331.764617, 1010.470825, 2000);
    }
	SetPVarInt(playerid, "Rull_Bet", ty);
	new bet = PositionChip[playerid];
	STRING_GLOBAL[0] = EOS;
	if(bet == 43) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"RED\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 44) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"BLACK\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.",ty);
	else if(bet == 40) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"1ST12\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 41) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"2ND12\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.",ty);
	else if(bet == 42) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"3RD12\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 45) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"1 TO 18\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 46) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"19 TO 36\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 48) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"ODD\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 47) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"EVEN\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 37 || bet == 38 || bet == 39) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"2 TO 1\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {FFFFFF}\"%d\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", PositionChip[playerid], ty);
	SendClientMessage(playerid, COLOR_LightSeaGreen, "Ваша ставка принята, игра начата.");
	ruletka_time1[playerid] = SetTimerEx("OnPlayCasinoRoulette", 10000, false, "i", playerid);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoRullet').setBetState(false)");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoRullet').startTimer()");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/moved.wav', 0, 1)");
	RouletteStatus[playerid] = 1;
	ChipRandom[RouletteTable[playerid]] = random(36);
	if(ChipRandom[RouletteTable[playerid]] == PositionChip[playerid]) ChipRandom[RouletteTable[playerid]] = random(36);
	StatusChip[playerid] = 0;
	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;
	RouletteChip[playerid] = CreateDynamicObject(10887, ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2], 0.0, 0.0, 0.0);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x - 0.05, y - 0.05, z);
	GiveIteam(playerid, 293, 0, ty, 0, "Поставил ставку в рулетке [Казино]");
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%s фишек", formatInt(ty));
	GameText(playerid, STRING_GLOBAL, 3000, 2);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoRullet').setBalance(%d)", GetIteam(playerid, 293));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	return 1;
}

public:OnPlayCasinoRoulette(playerid)
{
	new fishka = PositionChip[playerid];
	new chislo = ChipRandom[RouletteTable[playerid]];
	STRING_GLOBAL[0] = EOS;
	KillTimer(ruletka_time1[playerid]);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoRullet').stopTimer(%d)", chislo);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	if(fishka == 37)
	{
		if(chislo == 1 || chislo == 4 || chislo == 7 || chislo == 10 || chislo == 13 || chislo == 16 || chislo == 19 || chislo == 22 || chislo == 25 || chislo == 28 || chislo == 31 || chislo == 34)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 38)
	{
		if(chislo == 2 || chislo == 5 || chislo == 8 || chislo == 11 || chislo == 14 || chislo == 17 || chislo == 20 || chislo == 23 || chislo == 26 || chislo == 29 || chislo == 32 || chislo == 35)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 39)
	{
		if(chislo == 3 || chislo == 6 || chislo == 9 || chislo == 12 || chislo == 15 || chislo == 18 || chislo == 21 || chislo == 24 || chislo == 27 || chislo == 30 || chislo == 33 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 40)
	{
		if(chislo == 1 || chislo == 2 || chislo == 3 || chislo == 4 || chislo == 5 || chislo == 6 || chislo == 7 || chislo == 8 || chislo == 9 || chislo == 10 || chislo == 11 || chislo == 12)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet")*3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo, GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 41)
	{
		if(chislo == 13 || chislo == 14 || chislo == 15 || chislo == 16 || chislo == 17 || chislo == 18 || chislo == 19 || chislo == 20 || chislo == 21 || chislo == 22 || chislo == 23 || chislo == 24)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet")*3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		   	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 42)
	{
		if(chislo == 25 || chislo == 26 || chislo == 27 || chislo == 28 || chislo == 29 || chislo == 30 || chislo == 31 || chislo == 32 || chislo == 33 || chislo == 34 || chislo == 35 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo, GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 43)
	{
		if(chislo == 1 || chislo == 3|| chislo == 5 || chislo == 7 || chislo == 9 || chislo == 12 || chislo == 14 || chislo == 16 || chislo == 18 || chislo == 19 || chislo == 21 || chislo == 23 || chislo == 25 || chislo == 27 || chislo == 30 || chislo == 32 || chislo == 34 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 44)
	{
		if(chislo == 2 || chislo == 4|| chislo == 6 || chislo == 8 || chislo == 10 || chislo == 11 || chislo == 13 || chislo == 15 || chislo == 17 || chislo == 20 || chislo == 22 || chislo == 24 || chislo == 26 || chislo == 28 || chislo == 29 || chislo == 31 || chislo == 33 || chislo == 35)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet")*2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 45)
	{
		if(chislo == 1 || chislo == 2 || chislo == 3 || chislo == 4 || chislo == 5 || chislo == 6 || chislo == 7 || chislo == 8 || chislo == 9 || chislo == 10 || chislo == 11 || chislo == 12 || chislo == 13 || chislo == 14 || chislo == 15 || chislo == 16 || chislo == 17 || chislo == 18)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
	}
	else if(fishka == 46)
	{
		if(chislo == 19 || chislo == 20 || chislo == 21 || chislo == 22 || chislo == 23 || chislo == 24 || chislo == 25 || chislo == 26 || chislo == 27 || chislo == 28 || chislo == 29 || chislo == 30 || chislo == 31 || chislo == 32 || chislo == 33 || chislo == 34 || chislo == 35 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
            SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
	}
	else if(fishka == 47)
	{
		if(chislo == 2 || chislo == 4 || chislo == 6 || chislo == 8 || chislo == 10 || chislo == 12 || chislo == 14 || chislo == 16 || chislo == 18 || chislo == 20 || chislo == 22 || chislo == 24 || chislo == 26 || chislo == 28 || chislo == 30 || chislo == 32 || chislo == 34 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == 48)
	{
		if(chislo == 1 || chislo == 3 || chislo == 5 || chislo == 7 || chislo == 9 || chislo == 11 || chislo == 13 || chislo == 15 || chislo == 17 || chislo == 19 || chislo == 21 || chislo == 23 || chislo == 25 || chislo == 27 || chislo == 29 || chislo == 31 || chislo == 33 || chislo == 35)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
		}
	}
	else if(fishka == chislo)
	{
		SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
		SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 36));
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/win.wav', 0, 1)");
		GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 36, 0, "Выйграл в рулетке [Казино]");
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 36));
		GameText(playerid, STRING_GLOBAL, 3000, 2);
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 36, GetIteam(playerid, 293));
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
	else
	{
	    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/rulette/loose.wav', 0, 1)");
	 	SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
		AddBusinessProfit(playerid, GetPlayerInBiz(playerid), GetPVarInt(playerid, "Rull_Bet") * 25, 1);
	}	
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').setBalance(%d)", GetIteam(playerid, 293));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	RouletteStatus[playerid] = 0;
	DeletePVar(playerid, "Rull_Bet");
	PositionChip[playerid] = -1;
	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;
	return 1;
}

public: Casino_OnPlayerExchange(playerid, type, event)
{
    STRING_GLOBAL[0] = EOS;
    if(1 > event || event > 1000000) return GameText(playerid,"~r~Можно купить или продать~n~~w~до 1.000.000 фишек", 4000, 2);
    if(type == 0)
    {
        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), event * 1000)) return GameText(playerid,"~r~Недостаточно средств", 4000, 2);
		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
        GivePlayerMoneyEx(playerid, -event * 1000, "Покупка фишек в казино", true, true);
        GiveIteam(playerid, 293, 1, event, 0, "Обмен фишек [Казино]");
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffb833}Вы обменяли {FFFFFF}%s {ffb833}рублей на %d фишек. Всего {ffffff}%d {ffb833}фишек.", formatInt(event * 1000), event, GetIteam(playerid, 293));
        SCM(playerid, -1, STRING_GLOBAL);
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d фишек~n~~r~-%s рублей", event, formatInt(event * 1000));
    }
    if(type == 1)
    {
        if(GetIteam(playerid, 293) < event) return GameText(playerid,"~r~Недостаточно фишек", 4000, 2);
		GivePlayerMoneyEx(playerid, event * 900, "Продажа фишек в казино", true, true);
		GiveIteam(playerid, 293, 0, event, 0, "Обмен фишек [Казино]");
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffb833}Вы обменяли {FFFFFF}%d {ffb833}фишек на %s рублей. Всего {ffffff}%d {ffb833}фишек.", event, formatInt(event * 900), GetIteam(playerid, 293));
		SCM(playerid, -1, STRING_GLOBAL);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%d фишек~n~~g~+%s рублей", event, formatInt(event * 900));
	}
    GameText(playerid, STRING_GLOBAL, 4000, 2);
    BitStream_1(playerid, s_CefInterface, t_CefHide, "CasinoExchange");
    return 1;
}

#define MAX_ENTRANCES			(100) // максимальное кол-во подъездов
#define MAX_ENTRANCE_FLOORS		(5)	 // максимальное кол-во этажей в подъезде
#define GetEntranceData(%0,%1) 			g_entrance[%0][%1]
#define SetEntranceData(%0,%1,%2) 		g_entrance[%0][%1] = %2
#define AddEntranceData(%0,%1,%2,%3) 	g_entrance[%0][%1] %2= %3
#define GetPlayerInEntrance(%0)			GetPlayerData(%0, P_IN_ENTRANCE)		// в каком подъезде	
#define GetPlayerInEntranceFloor(%0)	GetPlayerData(%0, P_IN_ENTRANCE_FLOOR)	// на каком этаже в подъезде
#define SetPlayerInEntrance(%0,%1)			SetPlayerData(%0, P_IN_ENTRANCE, %1)		// установить подъезд в котором находится
#define SetPlayerInEntranceFloor(%0,%1)		SetPlayerData(%0, P_IN_ENTRANCE_FLOOR, %1)  // установить этаж в подъезд котором находится
enum E_ENTRANCE_STRUCT
{
	E_SQL_ID,		// ид в базе
	E_CITY, 		// город
	E_ZONE, 		// район / улица
	E_FLOORS,		// кол-во этажей
	Float: E_POS_X, // вход (пикап)
	Float: E_POS_Y, // вход (пикап)
	Float: E_POS_Z, // вход (пикап)
	Float: E_EXIT_POS_X,// выход
	Float: E_EXIT_POS_Y,// выход
	Float: E_EXIT_POS_Z,// выход
	Float: E_EXIT_ANGLE,// выход (угол)
	E_PICKUP_ID,		// ид пикапа
	E_MAP_ICON,			// иконка на карте
	Text3D: E_LABEL,	// 3д текст
	E_STATUS			// статус (куплены ли все квартиры)
};
new g_entrance[MAX_ENTRANCES][E_ENTRANCE_STRUCT];
new g_entrance_loaded;
new g_entrance_flat[MAX_ENTRANCES][MAX_ENTRANCE_FLOORS][4];
new g_entrance_flats_loaded[MAX_ENTRANCES];
new const
    Float: g_entrance_flat_pos[4][6] =
{
    { // 1 квартира
        2329.9670,-2454.8594,1009.4453, // x | y | z
        2330.0742,-2455.7627, 176.6982 // x | y | angle
    },
    { // 2 квартира
        2329.9424,-2459.1968,1009.4453,
        2330.0935,-2458.4827, 0.3133
    },
    { // 3 квартира
        2321.0552,-2454.8425,1009.4453,
        2320.7439,-2455.5518, 174.2149
    },
    { // 4 квартира
        2320.9214,-2459.1812,1009.4453,
        2321.1052,-2458.4109, 4.0967
    }
};

public: LoadEntrances()
{
	new idx, j, k;
	new query[85], buffer[2];
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT * FROM entrances", true);
	rows = cache_num_rows();
	if(rows > MAX_ENTRANCES)
	{
		rows = MAX_ENTRANCES;
		print("[Entrances]: DB rows > MAX_ENTRANCES");
	}
	for(idx = 0; idx < rows; idx ++)
	{
		SetEntranceData(idx, E_SQL_ID, 	cache_get_field_content_int(idx, "id"));	
		SetEntranceData(idx, E_CITY, 	cache_get_field_content_int(idx, "city"));
		SetEntranceData(idx, E_ZONE, 	cache_get_field_content_int(idx, "zone"));	
		SetEntranceData(idx, E_FLOORS,	cache_get_field_content_int(idx, "floors"));
		SetEntranceData(idx, E_POS_X, 	cache_get_field_content_float(idx, "pos_x"));
		SetEntranceData(idx, E_POS_Y, 	cache_get_field_content_float(idx, "pos_y"));
		SetEntranceData(idx, E_POS_Z, 	cache_get_field_content_float(idx, "pos_z"));
		SetEntranceData(idx, E_EXIT_POS_X, 	cache_get_field_content_float(idx, "exit_x"));
		SetEntranceData(idx, E_EXIT_POS_Y, 	cache_get_field_content_float(idx, "exit_y"));
		SetEntranceData(idx, E_EXIT_POS_Z, 	cache_get_field_content_float(idx, "exit_z"));
		SetEntranceData(idx, E_EXIT_ANGLE, 	cache_get_field_content_float(idx, "exit_angle"));
		mysql_format(mysql, query, sizeof query, "UPDATE entrances SET id=%d WHERE id='%d'", idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);
		SetEntranceData(idx, E_STATUS, -1);
		if(GetEntranceData(idx, E_CITY) == -1 || GetEntranceData(idx, E_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y));
			buffer[1] = Get2DZone(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y));
			SetEntranceData(idx, E_CITY, buffer[0]);
			SetEntranceData(idx, E_ZONE, buffer[1]);
			mysql_format(mysql, query, sizeof query, "UPDATE entrances SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetEntranceData(idx, E_SQL_ID));
			mysql_query(mysql, query, false);
		}
		format(query, sizeof query, "- Подъезд -\n{FFFFFF}Номер подъезда: %d", idx + 1);
		SetEntranceData(idx, E_LABEL, CreateDynamic3DTextLabel(query, 0x3399FFFF, GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z) + 1.0, 15.0));
		for(j = 0; j < MAX_ENTRANCE_FLOORS; j ++)
		{
			for(k = 0; k < 4; k ++)
			{
				g_entrance_flat[idx][j][k] = -1;
			}
		}
	}
	g_entrance_loaded = rows;
	cache_delete(result);
	CreatePickup(1318, 23, 2325.9207,-2463.1504,997.9453, -1, PICKUP_ACTION_TYPE_ENTRANCE_EXI); // выход из подъезда
	CreatePickup(1318, 23, 2325.9446,-2453.3491,998.6328, -1, -1); // лифт на 0 этаже
	CreatePickup(1318, 23, 2326.7781,-2454.0798,1009.4453, -1, -1); // лифт на 1 этаже
	CreateDynamic3DTextLabel("- Лифт -", 0x3399FFFF, 2325.9446,-2453.3491,998.6328 + 1.0, 8.0); // лифт
	CreateDynamic3DTextLabel("- Лифт -", 0x3399FFFF, 2326.7781,-2454.0798,1009.4453 + 1.0, 8.0); // лифт
	for(idx = 0, k = 0; idx < MAX_ENTRANCE_FLOORS; idx ++)
	{
		format(query, sizeof query, "Этаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xFFCD00FFF, 2324.9788,-2454.7788,998.6328 + 0.7, 8.0, _, _, _, _, idx + 2);
		for(j = 0; j < 4; j ++)
		{
			format(query, sizeof query, "Квартира\n{FFFFFF}Номер: %d", k + 1);
			CreateDynamic3DTextLabel(query, 0x3399FFFF, g_entrance_flat_pos[j][0], g_entrance_flat_pos[j][1], g_entrance_flat_pos[j][2] + 1.6, 6.0, _, _, _, _, idx + 2);
			k ++;
		}
	}
	for(idx = 0; idx < 4; idx ++)
	{
		CreatePickup(19198, 23, g_entrance_flat_pos[idx][0], g_entrance_flat_pos[idx][1], g_entrance_flat_pos[idx][2], -1, PICKUP_ACTION_TYPE_ENTRANCE_FLA, idx);
	}
	printf("[Entrances]: Подъездов загружено: %d", g_entrance_loaded);
}

public: EntranceStatusInit(entranceid)
{
	new e_houses = 0;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(GetHouseData(idx, H_ENTRACE) != entranceid) continue;
		if(!IsHouseOwned(idx)) continue;
		e_houses ++;
	}
	UpdateEntrance(entranceid, e_houses);
}

stock EntranceStatusInitAll()
{
	for(new idx; idx < g_entrance_loaded; idx ++)
	{
		CallLocalFunction("EntranceStatusInit", "i", idx);
	}
}

stock UpdateEntrance(entranceid, houses)
{
	new status = (houses >= GetEntranceData(entranceid, E_FLOORS) * 4);
	if(GetEntranceData(entranceid, E_STATUS) != status)
	{
		if(GetEntranceData(entranceid, E_PICKUP_ID))
			DestroyPickup(GetEntranceData(entranceid, E_PICKUP_ID));
		if(IsValidDynamicMapIcon(GetEntranceData(entranceid, E_MAP_ICON)))
			DestroyDynamicMapIcon(GetEntranceData(entranceid, E_MAP_ICON));
		SetEntranceData(entranceid, E_PICKUP_ID, CreatePickup((status ? 1272 : 1273), 23, GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), GetEntranceData(entranceid, E_POS_Z), 0, PICKUP_ACTION_TYPE_ENTRANCE_ENT, entranceid));
		SetEntranceData(entranceid, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), GetEntranceData(entranceid, E_POS_Z), (status ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
		SetEntranceData(entranceid, E_STATUS, status);
	}
}

stock ShowPlayerEntranceFloorsLift(playerid, entranceid, floor)
{
	new fmt_str[10];
	new string[(sizeof fmt_str) * MAX_ENTRANCE_FLOORS];
	new max_floors = GetEntranceData(entranceid, E_FLOORS) + 1;
	for(new idx, count; idx < max_floors; idx ++)
	{
		if(idx == floor) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "Подъезд\n");
		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_ENTRANCE_LIFT, DIALOG_STYLE_LIST, "{FFCD00}Выберите этаж", string, "Выбрать", "Отмена");
}

stock EnterPlayerToEntrance(playerid, entranceid)
{
	if(GetPlayerInEntrance(playerid) == -1)
	{
		SetPlayerPosEx(playerid, 2325.9553,-2461.5012,997.9539,359.7099, 1, entranceid + 2500);
		SetPlayerInEntranceFloor(playerid, 0);
		SetPlayerInEntrance(playerid, entranceid);
	}
}

public: Tablet_OnPlayerOpenApp(playerid, event) // event 0 - бизнес,event 1 - Равито,event 2 - Семья
{
    return true;
}

public: Tablet_OnPlayerCloseApp(playerid, event) // event 0 - выйти из приложения бизнес,event 1 - выйти из приложения Равито,event 2 - выйти из приложения Семья,event -1 - выйти из планшета
{
    return true;
}

public: MarktPlc_OnPlayerSelectCategory(playerid, event) // event 0 - 7 // подгрузка определенной вкладки
{
    if(event != 0)
    {
        new fmt_text[364],
            owner_name[32],
            r_name[32],
            p_name[48],
            description[124],
            Cache: result;
        format(fmt_text, sizeof fmt_text, "SELECT * FROM marktplc WHERE category=%d", event);
        result = mysql_query(mysql, fmt_text, true);
        new rows = cache_num_rows();
        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
        {
            new id = cache_get_field_content_int(i, "id");
            new items = cache_get_field_content_int(i, "items");
            new type = cache_get_field_content_int(i, "type");
            new money = cache_get_field_content_int(i, "money");
            new likes = cache_get_field_content_int(i, "likes");
            new views = cache_get_field_content_int(i, "views");
            new owner_phone = cache_get_field_content_int(i, "owner_phone");
            new updates = cache_get_field_content_int(i, "updates");
            cache_get_field_content(i, "p_name", p_name);
            cache_get_field_content(i, "description", description);
            cache_get_field_content(i, "owner_name", owner_name);
            cache_get_field_content(i, "r_name", r_name);
            if(type == 3) format(fmt_text, sizeof fmt_text, "[%d,343,3,\"Аксессуар\",\"%s\",[\"%d\"],%d,0,%d,%d,[\"%s\",0,%d],\"\",%d,17,\"\",0,\"%s\"],", id, description, items, money, likes, views, owner_name, owner_phone, updates, r_name);
            else format(fmt_text, sizeof fmt_text, "[%d,%d,%d,\"%s\",\"%s\",[\"b1043361c\"],%d,%d,%d,%d,[\"%s\",1,%d],\"\",%d,56,\"\",0,\"%s\"],", id, items, type, p_name, description, money, money, likes, views, owner_name, owner_phone, updates, r_name);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setCards('[[1,6],[%s]]')", STRING_GLOBAL);
	    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        cache_delete(result);
    }
    else
    {
        new fmt_text[364],
            owner_name[32],
            r_name[32],
            p_name[48],
            description[124],
            Cache: result;
        result = mysql_query(mysql, "SELECT * FROM marktplc ORDER BY views DESC", true);
        new rows = cache_num_rows();
        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
        {
            new id = cache_get_field_content_int(i, "id");
            new items = cache_get_field_content_int(i, "items");
            new type = cache_get_field_content_int(i, "type");
            new money = cache_get_field_content_int(i, "money");
            new likes = cache_get_field_content_int(i, "likes");
            new views = cache_get_field_content_int(i, "views");
            new owner_phone = cache_get_field_content_int(i, "owner_phone");
            new updates = cache_get_field_content_int(i, "updates");
            cache_get_field_content(i, "p_name", p_name);
            cache_get_field_content(i, "description", description);
            cache_get_field_content(i, "owner_name", owner_name);
            cache_get_field_content(i, "r_name", r_name);
            if(type == 3) format(fmt_text, sizeof fmt_text, "[%d,343,3,\"Аксессуар\",\"%s\",[\"%d\"],%d,0,%d,%d,[\"%s\",0,%d],\"\",%d,17,\"\",0,\"%s\"],", id, description, items, money, likes, views, owner_name, owner_phone, updates, r_name);
            else format(fmt_text, sizeof fmt_text, "[%d,%d,%d,\"%s\",\"%s\",[\"b1043361c\"],%d,%d,%d,%d,[\"%s\",1,%d],\"\",%d,56,\"\",0,\"%s\"],", id, items, type, p_name, description, money, money, likes, views, owner_name, owner_phone, updates, r_name);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setCards('[[1,6],[%s]]')", STRING_GLOBAL);
	    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        cache_delete(result);
    }
    return true;
}

public: MarktPlc_OnPlayerOpenMyAds(playerid)
{
    new fmt_text[364],
        owner_name[32],
        r_name[32],
        p_name[48],
        description[124],
        Cache: result;
    format(fmt_text, sizeof fmt_text, "SELECT * FROM marktplc WHERE owner_id=%d", GetPlayerAccountID(playerid));
    result = mysql_query(mysql, fmt_text, true);
    new rows = cache_num_rows();
    STRING_GLOBAL[0] = EOS;
    for(new i; i < rows; i ++)
    {
        new id = cache_get_field_content_int(i, "id");
        new items = cache_get_field_content_int(i, "items");
        new type = cache_get_field_content_int(i, "type");
        new money = cache_get_field_content_int(i, "money");
        new likes = cache_get_field_content_int(i, "likes");
        new views = cache_get_field_content_int(i, "views");
        new owner_phone = cache_get_field_content_int(i, "owner_phone");
        new updates = cache_get_field_content_int(i, "updates");
        cache_get_field_content(i, "p_name", p_name);
        cache_get_field_content(i, "description", description);
        cache_get_field_content(i, "owner_name", owner_name);
        cache_get_field_content(i, "r_name", r_name);
        // 0 тип - Транспорт // 1 тип - Недвижимость // 2 тип - Бизнес // 3 тип -  // 4 тип - Гараж // 5 тип - Прочее // 6 тип -  //
        if(type == 3) format(fmt_text, sizeof fmt_text, "[%d,343,3,\"Аксессуар\",\"%s\",[\"%d\"],%d,0,%d,%d,[\"%s\",0,%d],\"\",%d,17,\"\",0,\"%s\"],", id, description, items, money, likes, views, owner_name, owner_phone, updates, r_name);
        else format(fmt_text, sizeof fmt_text, "[%d,%d,%d,\"%s\",\"%s\",[\"b1043361c\"],%d,%d,%d,%d,[\"%s\",1,%d],\"\",%d,56,\"\",0,\"%s\"],", id, items, type, p_name, description, money, money, likes, views, owner_name, owner_phone, updates, r_name);
        strcat(STRING_GLOBAL, fmt_text);
    }
    strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setCards('[[1,6],[%s]]')", STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    cache_delete(result);
    return true;
}

public: MarktPlc_OnUploadPhoto(playerid, event, type)
{
    printf("MarktPlc_OnUploadPhoto(playerid, event %d, type %d)", event, type);
    return true;
}

public: MarktPlc_OnCreateAd(playerid, hours, price, description[], items_id, items_type, name[])
{
    if(strfind(description,"|") != -1 || strfind(description,"&") != -1 || strfind(description,"#") != -1 || strfind(description,"@") != -1 || strfind(description,"%") != -1) return GameText(playerid, "Присутствуют запрещенные символы", 3000, 0);
    if(strfind(name,"|") != -1 || strfind(name,"&") != -1 || strfind(name,"#") != -1 || strfind(name,"@") != -1 || strfind(name,"%") != -1) return GameText(playerid, "Присутствуют запрещенные символы", 3000, 0);
    if(strlen(description) < 5 || strlen(description) > 120) return GameText(playerid, "~w~описание должно быть от 5 до 120 символов", 3000, 0);
    if(strlen(description) < 2 || strlen(description) > 30) return GameText(playerid, "~w~название должно быть от 2 до 30 символов", 3000, 0);
    new query[364];
    if(items_type == 0)
    {
        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            GetVehicleInfo(items_id, VI_NAME),
            items_id
        );
    }
    else if(items_type == 1)
    {
        format(query, sizeof query, "Дом (№ %d)", items_id);
        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            query,
            items_id
        );
    }
    else if(items_type == 2)
    {
        new name_biz[32],
            Cache: result;
        format(query, sizeof query, "SELECT * FROM business WHERE id=%d", items_id);
	    result = mysql_query(mysql, query, true);
        cache_get_field_content(0, "name", name_biz);
        cache_delete(result);
        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            name_biz,
            items_id
        );
    }
    else if(items_type == 4)
    {
        format(query, sizeof query, "Гараж (№ %d)", items_id);
        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            query,
            items_id
        );
    }
    else
    {
        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            name, 
            items_id
        );
    }
    mysql_query(mysql, query, false);
    BitStream_1(playerid, s_CefInterface, t_CefHide, "Tablet");
    BitStream_2(playerid, s_CefInterface, t_CefShow, "Tablet", "[0]");
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Tablet').addNotification('[2, \"Успех!\", \"Ваше объявление было успешно создано\", 5000]')");
    return true;
}

public: MarktPlc_OnPlayerShowItems(playerid, event) //выбор одну из катигорий
{
    if(event == 0) // Транспорт
    {
        BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Tablet').addNotification('[2, \"Напоминание\", \"Если вы не можете найти свой транспорт в списке, то убедитесь, что он загружен на сервер\", 5000]')");
        new fmt_text[248],
            Cache: result;
        format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);
        new rows = cache_num_rows();
        if(!rows) return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет не одного транспорта\", 5000]')");
        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
	    {
            new model_id = cache_get_field_content_int(i, "model_id");
            format(fmt_text, sizeof fmt_text, "[%d,\"%s\",%d,0,\"%s\"],", model_id, GetVehicleInfo(model_id, VI_NAME), GetVehicleInfo(model_id, VI_PRICE), GetVehicleInfo(model_id, VI_NAME_MARK));
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        cache_delete(result);
    }
    if(event == 1) // Недвижимость
    {
        new fmt_text[248],
            Cache: result;
        format(fmt_text, sizeof fmt_text, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);
        new rows = cache_num_rows();
        if(!rows) return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет недвижимости\", 5000]')");
        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
	    {
            new id = cache_get_field_content_int(i, "id");
            new price = cache_get_field_content_int(i, "price");
            new entrance = cache_get_field_content_int(i, "entrance");
            if(entrance == -1) format(fmt_text, sizeof fmt_text, "[%d,\"Дом (№ %d)\",%d,1,\"None\"],", id, id, price);
            else format(fmt_text, sizeof fmt_text, "[%d,\"Квартира (№ %d)\",%d,1,\"None\"],", id, id, price);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        cache_delete(result);
    }
    if(event == 2) // Бизнес
    {
        new fmt_text[248],
            name[32],
            Cache: result;
        format(fmt_text, sizeof fmt_text, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);
        new rows = cache_num_rows();
        if(!rows) return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет не одного бизнеса\", 5000]')");
        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
	    {
            new id = cache_get_field_content_int(i, "id");
            new price = cache_get_field_content_int(i, "price");
            cache_get_field_content(i, "name", name);
            format(fmt_text, sizeof fmt_text, "[%d,\"%s (№ %d)\",%d,2,\"None\"],", id, name, id, price);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        cache_delete(result);
    }
    if(event == 3) // Аксессуары
    {
        new fmt_text[248],
            Cache: result;
        format(fmt_text, sizeof fmt_text, "SELECT * FROM items WHERE owner_id=%d AND type_item=2", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);
        new rows = cache_num_rows();
        if(!rows) return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет не одного аксессуара\", 5000]')");
        STRING_GLOBAL[0] = EOS; 
        for(new i; i < rows; i ++)
	    {
            new typeacs = cache_get_field_content_int(i, "typeacs");
            new aks_id = cache_get_field_content_int(i, "aks_id");
            format(fmt_text, sizeof fmt_text, "[%d,\"%s\",0,3,\"%d\"],", aks_id, ItemsInfo[typeacs], aks_id);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        cache_delete(result);
    }
    if(event == 4) // Гаражи
    {
        new fmt_text[248],
            Cache: result;
        format(fmt_text, sizeof fmt_text, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);
        new rows = cache_num_rows();
        if(!rows) return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет не одного гаража\", 5000]')");
        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
	    {
            new id = cache_get_field_content_int(i, "id");
            new price = cache_get_field_content_int(i, "price");
            format(fmt_text, sizeof fmt_text, "[%d,\"Гараж (№ %d)\",%d,4,\"None\"],", id, id, price);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
        cache_delete(result);
    }
    if(event == 5) // Прочее
    {
        STRING_GLOBAL[0] = EOS;
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid));
        BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    }
    return true;
}

public: MarktPlc_OnPlayerViewedEntity(playerid, event, type) // просмотры
{
    SCMF(playerid, -1, "MarktPlc_OnPlayerViewedEntity(playerid, event %d, type %d)", event, type);
    return true;
}

public: MarktPlc_OnPlayerAddFavorite(playerid, event, type) // добавить в лайк
{
    SCMF(playerid, -1, "MarktPlc_OnPlayerAddFavorite(playerid, event %d, type %d)", event, type);
    return true;
}

public: MarktPlc_OnPlayerRemoveFavorite(playerid, event, type) // убрать с лайка
{
    SCMF(playerid, -1, "MarktPlc_OnPlayerRemoveFavorite(playerid, event %d, type %d)", event, type);
    return true;
}

public: MarktPlc_OnPlayerContact(playerid, event, type) // связаться с продавцом
{
    SCMF(playerid, -1, "MarktPlc_OnPlayerContact(playerid, event %d, type %d)", event, type);
    return true;
}

#define MAX_AUCTION 500
#define GetAuctionData(%0,%1)			g_auction[%0][%1]
#define SetAuctionData(%0,%1,%2)		g_auction[%0][%1] = %2
#define AddAuctionData(%0,%1,%2,%3)	    g_auction[%0][%1] %2= %3
enum E_AUCTION_STRUCT
{
    A_SQL_ID,
    A_OWNER_ID,
    A_OWNER_NAME[21],
	A_ID_IM,
    A_TYPE,
    A_PHONE,
    A_NUMBER[10],
    A_REGION[10],
    A_TYPE_NUMBER,
	A_PLAYER_ID,
    A_BET,
    A_CAR_ID
};
new g_auction[MAX_AUCTION][E_AUCTION_STRUCT];
new g_auction_loaded;
#define MAX_AUCTION_BET 500
#define GetAuctionBetData(%0,%1)			g_auction_bet[%0][%1]
#define SetAuctionBetData(%0,%1,%2)		    g_auction_bet[%0][%1] = %2
#define AddAuctionBetData(%0,%1,%2,%3)	    g_auction_bet[%0][%1] %2= %3
enum E_AUCTION_BET_STRUCT
{
    AB_SQL_ID,
    AB_OWNER_ID,
	AB_AUCTION_ID,
    AB_BET
};
new g_auction_bet[MAX_AUCTION_BET][E_AUCTION_BET_STRUCT];
new pred_auction[MAX_PLAYERS][2];
new page_auction[MAX_PLAYERS];
new event_auction[MAX_PLAYERS];
new open_auction[MAX_PLAYERS];
public: LoadAuction()
{
	new Cache: result;
	result = mysql_query(mysql, "SELECT * FROM auction", true);
	new rows = cache_num_rows();
	if(rows > MAX_AUCTION)
	{
		rows = MAX_AUCTION;
		print("[Auction]: DB rows > MAX_AUCTION");
	}
	for(new i; i < rows; i ++)
	{
        SetAuctionData(i, A_SQL_ID, 		cache_get_field_content_int(i, "id"));
        SetAuctionData(i, A_OWNER_ID, 		cache_get_field_content_int(i, "owner_id"));
		SetAuctionData(i, A_ID_IM, 		    cache_get_field_content_int(i, "id_im"));
		SetAuctionData(i, A_TYPE,			cache_get_field_content_int(i, "type"));
        SetAuctionData(i, A_PHONE,			cache_get_field_content_int(i, "phone"));
        cache_get_field_content(i, "owner_name", g_auction[i][A_OWNER_NAME], mysql, 21);
        cache_get_field_content(i, "number", g_auction[i][A_NUMBER], mysql, 10);
        cache_get_field_content(i, "region", g_auction[i][A_REGION], mysql, 10);
        SetAuctionData(i, A_TYPE_NUMBER,	cache_get_field_content_int(i, "type_number"));
        SetAuctionData(i, A_PLAYER_ID,		cache_get_field_content_int(i, "player_id"));
        SetAuctionData(i, A_BET,			cache_get_field_content_int(i, "stavka"));
        SetAuctionData(i, A_CAR_ID,			cache_get_field_content_int(i, "car_id"));
	}
	g_auction_loaded = rows;
	cache_delete(result);
	printf("[Auction]: Аукцион загружен: %d", g_auction_loaded);
}

stock GetFreeAuctionID()
{
	for(new i; i < MAX_AUCTION; i ++)
	{
		if(GetAuctionData(i, A_SQL_ID) != 0) continue;
        if(GetAuctionData(i, A_ID_IM) != 0) continue;
		return i;
	}
	return -1;
}

stock DeleteAuctionLot(auction_id)
{
    SetAuctionData(auction_id, A_SQL_ID, 		0);
    SetAuctionData(auction_id, A_ID_IM, 		0);
    SetAuctionData(auction_id, A_TYPE,			0);
    SetAuctionData(auction_id, A_PHONE,			0);
    format(g_auction[auction_id][A_NUMBER], 10, "");
    format(g_auction[auction_id][A_REGION], 10, "");
    SetAuctionData(auction_id, A_TYPE_NUMBER,	0);
    SetAuctionData(auction_id, A_PLAYER_ID,		0);
    SetAuctionData(auction_id, A_BET,		0);
    SetAuctionData(auction_id, A_CAR_ID,			0);
    return 1;
}

stock AddAuctionLot(id_im, stavka, type, owner_id = 0, phone = 0, number[] = "", region[] = "", type_number = 0, car_id = 0, owner_name[] = "ГОСУДАРСТВО")
{
    new auction_id = GetFreeAuctionID();
    SetAuctionData(auction_id, A_ID_IM, 		id_im);
    SetAuctionData(auction_id, A_TYPE,			type);
    SetAuctionData(auction_id, A_PHONE,			phone);
    format(g_auction[auction_id][A_NUMBER], 10, "%s",       number);
    format(g_auction[auction_id][A_REGION], 10, "%s",       region);
    format(g_auction[auction_id][A_OWNER_NAME], 10, "%s",   owner_name);
    SetAuctionData(auction_id, A_TYPE_NUMBER,	type_number);
    SetAuctionData(auction_id, A_PLAYER_ID,		0);
    SetAuctionData(auction_id, A_BET,		    stavka);
    SetAuctionData(auction_id, A_CAR_ID,		car_id);
    new query[248],
        Cache: result;
    mysql_format(mysql, query, sizeof query, "INSERT INTO auction (owner_id, owner_name, id_im, stavka, type, phone, number, region, type_number, car_id) VALUES ('%d', '%s', '%d', '%d', '%d', '%d', '%s', '%s', '%d', '%d')", 
    owner_id, owner_name, id_im, stavka, type, phone, number, region, type_number, car_id);
	result = mysql_query(mysql, query);
    SetAuctionData(auction_id, A_SQL_ID, 		cache_insert_id());
    cache_delete(result);
    return true;
}

stock LoadAuctionPage(playerid, event, pred, page)
{
    new query[348],
        rowss,
        count_item = GetIteam(playerid, 293);
    STRING_GLOBAL[0] = EOS;
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_TYPE) != event) continue;
        rowss++;
        if(pred <= rowss <= page)
		{
            new id = GetAuctionData(i, A_SQL_ID);
            new id_im = GetAuctionData(i, A_ID_IM);
            new stavka = GetAuctionData(i, A_BET);
            new bet = GetPlayerAuctionBet(playerid, id);
            if(event == 0) format(query, sizeof query, "[%d,0,\"Жильё\",\"Дом (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 1) format(query, sizeof query, "[%d,1,\"Бизнес\",\"%s\",\"%s\",%d,%d,%d,[\"-\"],0,%d],", i, GetBusinessData(id_im, B_NAME), GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 2) format(query, sizeof query, "[%d,2,\"Гараж\",\"Гараж (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 4) format(query, sizeof query, "[%d,4,\"SIM карта\",\"%d\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, GetAuctionData(i, A_PHONE), GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 7) format(query, sizeof query, "[%d,7,\"Ценная бумага\",\"На постройку нефтенасоса\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
			strcat(STRING_GLOBAL, query);
        }
    }
    new str_len;
	str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setLots('[[%s],%d]')", STRING_GLOBAL, page_auction[playerid]);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setPage('%d')", page_auction[playerid]);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    if(event == 7) GameText(playerid, "При выигрыше Ценной бумаги она будет находится в~n~~g~Мои Награды", 3000, 1);
    return true;
}

stock LoadCreatePlayerAuctionPage(playerid, pred, page)
{
    new query[348],
        rowss,
        count_item = GetIteam(playerid, 293);
    STRING_GLOBAL[0] = EOS;
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        rowss++;
        if(pred <= rowss <= page)
		{
            new id = GetAuctionData(i, A_SQL_ID);
            new id_im = GetAuctionData(i, A_ID_IM);
            new stavka = GetAuctionData(i, A_BET);
            new event = GetAuctionData(i, A_TYPE);
            new bet = GetPlayerAuctionBet(playerid, id);
            if(event == 0) format(query, sizeof query, "[%d,0,\"Жильё\",\"Дом (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 1) format(query, sizeof query, "[%d,1,\"Бизнес\",\"%s\",\"%s\",%d,%d,%d,[\"-\"],0,%d],", i, GetBusinessData(id_im, B_NAME), GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 2) format(query, sizeof query, "[%d,2,\"Гараж\",\"Гараж (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 4) format(query, sizeof query, "[%d,4,\"SIM карта\",\"%d\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, GetAuctionData(i, A_PHONE), GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 7) format(query, sizeof query, "[%d,7,\"Ценная бумага\",\"На постройку нефтенасоса\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
			strcat(STRING_GLOBAL, query);
        }
    }
    new str_len;
	str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setLots('[[%s],%d]')", STRING_GLOBAL, page_auction[playerid]);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setPage('%d')", page_auction[playerid]);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    return true;
}

stock GetAuctionID(auction_id)
{
    new count = -1;
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) != auction_id) continue;
        count = i;
        break;
    }
    return count;
}

public: OnAuctionPlayerAction(playerid, type, event)
{
    if(type == 4) // Все лоты
    {
        event_auction[playerid] = event;
        page_auction[playerid] = 1;
        pred_auction[playerid][0] = 1;
		pred_auction[playerid][1] = 4;
        LoadAuctionPage(playerid, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 2 && event == 0)
    {
        event_auction[playerid] = event;
        page_auction[playerid] = 1;
        pred_auction[playerid][0] = 1;
		pred_auction[playerid][1] = 4;
        LoadAuctionPage(playerid, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 2 && event == 1) // Ваши ставки
    {
        event_auction[playerid] = -1;
        page_auction[playerid] = 1;
        pred_auction[playerid][0] = 1;
		pred_auction[playerid][1] = 4;
        LoadPlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 2 && event == 2) // Горящие лоты
    {
        SCM(playerid, -1, "В разработке!");
    }
    if(type == 2 && event == 3) // Мои лоты
    {
        event_auction[playerid] = -2;
        page_auction[playerid] = 1;
        pred_auction[playerid][0] = 1;
		pred_auction[playerid][1] = 4;
        LoadCreatePlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 1 && event == 1) // стрелка справа
    {
        page_auction[playerid] = page_auction[playerid] + 1;
        pred_auction[playerid][0] = pred_auction[playerid][0] + 4;
        pred_auction[playerid][1] = pred_auction[playerid][1] + 4;
        if(event_auction[playerid] == -2) LoadCreatePlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
        else if(event_auction[playerid] == -1) LoadPlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
        else LoadAuctionPage(playerid, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 1 && event == 0) // стрелка слева
    {
        if(page_auction[playerid] == 1) return true;
        page_auction[playerid] = page_auction[playerid] - 1;
        pred_auction[playerid][0] = pred_auction[playerid][0] - 4;
        pred_auction[playerid][1] = pred_auction[playerid][1] - 4;
        if(event_auction[playerid] == -2) LoadCreatePlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
        else if(event_auction[playerid] == -1) LoadPlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
        else LoadAuctionPage(playerid, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    return true;
}

public: OnAuctionPlayerClose(playerid)
{
    BitStream_1(playerid, s_CefInterface, t_CefHide, "Auction");
    open_auction[playerid] = 0;
    return true;
}

public: OnAuctionPlayerSetBet(playerid, id, count)
{
    new query[348];
    new stavka = GetAuctionData(id, A_BET);
    new type = GetAuctionData(id, A_TYPE);
    new bet = GetPlayerAuctionBet(playerid, GetAuctionData(id, A_SQL_ID));
    if(type == 0) if((GetPlayerOwnableHouse(playerid) + 1) > GetPlayerHouseSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество домов.");
    if(type == 1) if((GetPlayerOwnableBiz(playerid) + 1) > GetPlayerBizSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество бизнесов.");
    if(type == 2) if(GetPlayerOwnableGarage(playerid) + 1 > GetPlayerGarageSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество гаражей.");
    if(bet == 0) if(GetPlayerData(playerid, P_AUCTION_SLOTS) < GetOwnableAuctionBet(playerid) + 1) return SCM(playerid, COLOR_GREY, "Недостаточно слотов на лоты для того чтобы поставить на этот лот");
    if(stavka > count + bet) return SCMF(playerid, 0xFFE58BFF, "* Ставка не должна быть меньше %d фишек.", stavka + (stavka / 100 * 10));
    if((stavka + (stavka / 100 * 10)) - bet > count) return SCMF(playerid, 0xFFE58BFF, "* Ставка не должна быть меньше %d фишек.", stavka + (stavka / 100 * 10)) - bet;
    if(stavka == bet) return SCM(playerid, 0xFFE58BFF, "* Вы уже поставили максимальную ставку.");
    if(GetIteam(playerid, 293) < count) return GameText(playerid, "~r~Недостаточно~n~фишек", 3000, 2);
    GiveIteam(playerid, 293, 0, count, 0, "Поставил ставку [Аукцион]");
    format(query, sizeof query, "~r~-%d фишек", count);
    GameText(playerid, query, 3000, 2);
    AddAuctionBet(playerid, GetAuctionData(id, A_SQL_ID), count);
    bet = GetPlayerAuctionBet(playerid, GetAuctionData(id, A_SQL_ID));
    format(query, sizeof query, "UPDATE auction SET player_id=%d, stavka=%d WHERE id=%d", GetPlayerAccountID(playerid), bet, GetAuctionData(id, A_SQL_ID));
	mysql_query(mysql, query, false);
    if(GetAuctionData(id, A_PLAYER_ID) > 0) CreatePlayerNotification(GetAuctionData(id, A_PLAYER_ID), "Аукцион", "Вашу ставку на лот в аукционе перебили.");
    SetAuctionData(id, A_PLAYER_ID, GetPlayerAccountID(playerid));
    SetAuctionData(id, A_BET, bet);
    foreach(new i: Player)
    {
        if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
        if(open_auction[i] == 0) continue;
        if(event_auction[playerid] != -1) LoadAuctionPage(i, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
        else LoadPlayerAuctionPage(i, pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    return true;
}

stock OnAuctionResult()
{
    new query[348];
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        new id =  GetAuctionData(i, A_SQL_ID),
            id_im = GetAuctionData(i, A_ID_IM),
            type = GetAuctionData(i, A_TYPE),
            player_id = GetAuctionData(i, A_PLAYER_ID);
        if(player_id == 0) continue;
        if(type == 0)
        {
            new houseid = id_im;
            SetHouseData(houseid, H_OWNER_ID, 		player_id);
            SetHouseData(houseid, H_IMPROVEMENTS, 	0);
            SetHouseData(houseid, H_STORE_X, 0.0);
            SetHouseData(houseid, H_STORE_Y, 0.0);
            SetHouseData(houseid, H_STORE_Z, 0.0);
            new time = gettime();
            new rent_time = (time - (time % 86400)) + 86400;
            SetHouseData(houseid,	H_RENT_DATE,	rent_time);
            SetHouseData(houseid,	H_LOCK_STATUS,	false);
            new entranceid = GetHouseData(houseid, H_ENTRACE);
            if(entranceid != -1)
            {
                CallLocalFunction("EntranceStatusInit", "i", entranceid);
            }
            format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0,owner_id=%d WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), player_id, GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);
            UpdateHouse(houseid);
            HouseHealthInit(houseid);
            HouseStoreInit(houseid);
        }
        if(type == 1)
        {
            new businessid = id_im;
            SetBusinessData(businessid, B_OWNER_ID, 		player_id);
            SetBusinessData(businessid, B_IMPROVEMENTS, 	0);
            new time = gettime();
            new rent_time = (time - (time % 86400)) + 86400;
            SetBusinessData(businessid,	B_PRODS, 		100);
            SetBusinessData(businessid,	B_PROD_PRICE, 	0);
            SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
            SetBusinessData(businessid,	B_ENTER_PRICE, 	0);
            SetBusinessData(businessid,	B_BALANCE, 		0);
            SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
            SetBusinessData(businessid,	B_LOCK_STATUS,	false);
            CallLocalFunction("UpdateBusinessLabel", "i", businessid);
            format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%d,rent_time=%d,`lock`=%d,owner_id=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), player_id, GetBusinessData(businessid, B_SQL_ID));
            mysql_query(mysql, query, false);
            format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
            mysql_query(mysql, query, false);
        }
        if(type == 2)
        {
            new garage_id = id_im;
            SetGarageData(garage_id, G_OWNER_ID, 		player_id);
            SetGarageData(garage_id, G_IMPROVEMENTS, 	0);
            new time = gettime();
            new rent_time = (time - (time % 86400)) + 86400;
            SetGarageData(garage_id,	G_RENT_DATE,	rent_time);
            SetGarageData(garage_id,	G_LOCK_STATUS,	false);
            CallLocalFunction("UpdateGarageLabel", "i", garage_id);
            format(query, sizeof query, "UPDATE garage SET improvements=0,rent_time=%d,`lock`=%d, owner_id=%d WHERE id=%d LIMIT 1", GetGarageData(garage_id, G_RENT_DATE), GetGarageData(garage_id, G_LOCK_STATUS), player_id, GetGarageData(garage_id, G_SQL_ID));
            mysql_query(mysql, query, false);	
        }
        if(type == 7)
        {
            format(query, sizeof query, "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, 'Ценная бумага', 8, 288, 0, 1, 0)", player_id);
            mysql_tquery(mysql, query, "", "");
        }
        if(GetAuctionData(i, A_OWNER_ID) != 0)
        {
            format(query, sizeof query, "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, 'Фишки', 8, 293, 0, %d, 0)", GetAuctionData(i, A_OWNER_ID), GetAuctionData(i, A_BET));
            mysql_tquery(mysql, query, "", "");
		    CreatePlayerNotification(GetAuctionData(i, A_OWNER_ID), "Аукцион", "Один из ваших лотов был продан на аукционе.\nЗабрать фишки можно в Мои Награды");
        }
        format(query, sizeof query, "DELETE FROM auction WHERE id=%d", id);
		mysql_query(mysql, query, false);
        DeleteAuctionLot(i);
        DeleteAuctionBet(id, player_id);
    }
    SendClientMessageToAll(0xFFA500FF, "{F3FF02}[Информация] {FFFFFF}Произошел слет аукциона!");
    return true;
}

stock GetPlayerCreateAuction(playerid)
{
    new count;
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        count = 1;
        break;
    }
    return count;
}

public: OnAuctionPlayerCreateLot(playerid, type, bet, time)
{
    if(bet < 1 || bet > 2000000000) return SCM(playerid, COLOR_GREY, "Выставить цену можно от 1 до 2.000.000.000 фишек");
    if(GetPlayerCreateAuction(playerid)) return SCM(playerid, COLOR_GREY, "Вы уже создавали лот в аукционе, дождитесь его окончания прежде чем создавать новый");
    SCM(playerid, COLOR_GREY, "В данном аукционе нельзя создавать свои лоты");
    LoadCreatePlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
    return true;
}

stock GetOwnableAuction(type, id_im)
{
    new count;
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_TYPE) != type) continue;
        if(GetAuctionData(i, A_ID_IM) != id_im) continue;
        count = 1;
    }
    return count;
}

stock GetOwnableAuctionBet(playerid)
{
    new count;
    for(new i; i < MAX_AUCTION_BET; i++)
    {
        if(GetAuctionBetData(i, AB_SQL_ID) == 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        count++;
    }
    return count;
}

public: LoadAuctionBet(playerid)
{
	new query[94],
        Cache: result;
    mysql_format(mysql, query, sizeof query, "SELECT * FROM auction_bet WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
    if(rows)
    {
        if(rows > MAX_AUCTION_BET)
        {
            rows = MAX_AUCTION_BET;
            print("[Auction Bet]: DB rows > MAX_AUCTION_BET");
        }
        for(new i; i < rows; i ++)
        {
            new auction_id = GetFreeAuctionBetID();
            SetAuctionBetData(auction_id, AB_SQL_ID, 		cache_get_field_content_int(i, "id"));
            SetAuctionBetData(auction_id, AB_OWNER_ID, 		GetPlayerAccountID(playerid));
            SetAuctionBetData(auction_id, AB_AUCTION_ID,    cache_get_field_content_int(i, "auction_id"));
            SetAuctionBetData(auction_id, AB_BET,		    cache_get_field_content_int(i, "bet"));
        }
    }
    cache_delete(result);
}

stock GetFreeAuctionBetID()
{
	for(new i; i < MAX_AUCTION_BET; i ++)
	{
		if(GetAuctionBetData(i, AB_SQL_ID) != 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != 0) continue;
		return i;
	}
	return -1;
}

stock DeleteAuctionBet(auction_id, player_id)
{
    new query[94];
    format(query, sizeof query, "DELETE FROM auction_bet WHERE auction_id='%d'", auction_id);
    mysql_query(mysql, query, false);
    for(new i; i < MAX_AUCTION_BET; i ++)
    {
        if(GetAuctionBetData(i, AB_AUCTION_ID) != auction_id) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) == player_id)
        {
            SetAuctionBetData(i, AB_SQL_ID, 		0);
            SetAuctionBetData(i, AB_OWNER_ID, 	    0);
            SetAuctionBetData(i, AB_AUCTION_ID,     0);
            SetAuctionBetData(i, AB_BET,			0);
            continue;
        }
        else
        {
            if(IsPlayerConnected(GetPlayerIDBySqlID(GetAuctionBetData(i, AB_OWNER_ID))) && IsPlayerLogged(GetPlayerIDBySqlID(GetAuctionBetData(i, AB_OWNER_ID))))
            {
                SCM(GetPlayerIDBySqlID(GetAuctionBetData(i, AB_OWNER_ID)), 0xFFE58BFF, "Вы проиграли в аукционе, вам вернули вашу ставку в 'Мои Награды'");
            }
            format(query, sizeof query, "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, 'Фишки', 8, 293, 0, %d, 0)", GetAuctionBetData(i, AB_OWNER_ID), GetAuctionBetData(i, AB_BET));
            mysql_tquery(mysql, query, "", "");
            CreatePlayerNotification(GetAuctionBetData(i, AB_OWNER_ID), "Аукцион", "Вы проиграли в аукционе за лот.\nЗабрать фишки можно в Мои Награды");
            SetAuctionBetData(i, AB_SQL_ID, 		0);
            SetAuctionBetData(i, AB_OWNER_ID, 	    0);
            SetAuctionBetData(i, AB_AUCTION_ID,     0);
            SetAuctionBetData(i, AB_BET,			0);
        }
    }
    return 1;
}

stock AddAuctionBet(playerid, id, bet)
{
    for(new i; i < MAX_AUCTION_BET; i ++)
    {
        if(GetAuctionBetData(i, AB_SQL_ID) == 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetAuctionBetData(i, AB_AUCTION_ID) != id) continue;
        AddAuctionBetData(i, AB_BET, +, bet);
        new query[64];
        format(query, sizeof query, "UPDATE auction_bet SET bet='%d' WHERE id='%d'", GetAuctionBetData(i, AB_BET), GetAuctionBetData(i, AB_SQL_ID));
        mysql_query(mysql, query, false);
        return 1;
    }
    new auction_id = GetFreeAuctionBetID();
    SetAuctionBetData(auction_id, AB_OWNER_ID, 	    GetPlayerAccountID(playerid));
    SetAuctionBetData(auction_id, AB_AUCTION_ID,    id);
    SetAuctionBetData(auction_id, AB_BET,			bet);
    new query[148],
        Cache: result;
    mysql_format(mysql, query, sizeof query, "INSERT INTO auction_bet (owner_id, auction_id, bet) VALUES ('%d', '%d', '%d')", GetPlayerAccountID(playerid), id, bet);
	result = mysql_query(mysql, query);
    SetAuctionBetData(auction_id, AB_SQL_ID, 		cache_insert_id());
    cache_delete(result);
    return true;
}

stock GetPlayerAuctionBet(playerid, auction_id)
{
    new count;
    for(new i; i < MAX_AUCTION_BET; i ++)
    {
        if(GetAuctionBetData(i, AB_SQL_ID) == 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetAuctionBetData(i, AB_AUCTION_ID) != auction_id) continue;
        count = GetAuctionBetData(i, AB_BET);
        return count;
    }
    return count;
}

stock LoadPlayerAuctionPage(playerid, pred, page)
{
    new query[348],
        rowss,
        count_item = GetIteam(playerid, 293);
    STRING_GLOBAL[0] = EOS;
    for(new i; i < MAX_AUCTION_BET; i ++)
    {
        if(GetAuctionBetData(i, AB_SQL_ID) == 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        new auction_id = GetAuctionID(GetAuctionBetData(i, AB_AUCTION_ID));
        new type = GetAuctionData(auction_id, A_TYPE);
        new id_im = GetAuctionData(auction_id, A_ID_IM);
        new stavka = GetAuctionData(auction_id, A_BET);
        new bet = GetAuctionBetData(i, AB_BET);
        rowss++;
        if(pred <= rowss <= page)
		{
            if(type == 0) format(query, sizeof query, "[%d,0,\"Жильё\",\"Дом (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", auction_id, id_im, GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(type == 1) format(query, sizeof query, "[%d,1,\"Бизнес\",\"%s\",\"%s\",%d,%d,%d,[\"-\"],0,%d],", auction_id, GetBusinessData(id_im, B_NAME), GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(type == 2) format(query, sizeof query, "[%d,2,\"Гараж\",\"Гараж (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", auction_id, id_im, GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(type == 4) format(query, sizeof query, "[%d,4,\"SIM карта\",\"%d\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", auction_id, GetAuctionData(auction_id, A_PHONE), GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(type == 7) format(query, sizeof query, "[%d,7,\"Ценная бумага\",\"На постройку нефтенасоса\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", auction_id, GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
			strcat(STRING_GLOBAL, query);
        }
    }
    new str_len;
    str_len = strlen(STRING_GLOBAL);
    strdel(STRING_GLOBAL, str_len - 1, str_len);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setLots('[[%s],%d]')", STRING_GLOBAL, page_auction[playerid]);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setPage('%d')", page_auction[playerid]);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    return true;
}

enum S_CRAFT_PRIZE_STRUCT
{
	CRAFT_PRIZE_ID,
	CRAFT_PRIZE_EVENT,
	CRAFT_PRIZE_ITEM_ID,
	CRAFT_PRIZE_NAME[34],
	CRAFT_PRIZE_TYPE,
	CRAFT_PRIZE_IF,
	CRAFT_PRIZE_CHANCE,
	CRAFT_PRIZE_PRICE
}

new g_craft_prize[][S_CRAFT_PRIZE_STRUCT] = 
{
	{0, 0, 31, "Кастет", 3, 1, 0, 0},
	{1, 0, 29, "Отмычка", 4, 0, 0, 0},
	{2, 0, 2, "Аптечка", 4, 0, 0, 0},
	{3, 0, 151, "Денежная печат.машинка", 5, 0, 0, 0},
	{4, 0, 15, "Обрез", 3, 1, 0, 0},
	{5, 0, 22, "Снайперская винтовка", 3, 1, 0, 0},
	{6, 0, 123, "Ноутбук Apple", 5, 0, 0, 0},
	{7, 0, 9991, "Самодельная Багги", 7, 1, 0, 0},
	{8, 0, 218, "Запчасти к двигателю", 5, 1, 0, 0},
	{9, 0, 179, "Материалы для оружия", 1, 1, 0, 0},
	{10, 0, 119, "Руль AMG", 5, 0, 0, 0},
	{11, 0, 44, "Рем.комплект", 4, 0, 0, 0},
	{12, 0, 9992, "Shelby Cobra", 7, 1, 0, 0},
	{13, 0, 9993, "Napier Railton", 7, 1, 0, 0},
	{14, 0, 180, "Сабвуфер", 5, 1, 0, 0},
	{15, 0, 127, "Металлоискатель BHJ", 1, 1, 0, 0},
	{16, 0, 125, "Лопата", 1, 1, 0, 0},
	{17, 0, 254, "Аппарат для диагностики", 1, 1, 0, 0},
	{18, 0, 164, "Наручные часы", 0, 1, 0, 0},
	{19, 0, 100, "Одежда", 2, 1, 0, 0},
	{20, 0, 9955, "Ремонт бронежилета", 6, 1, 0, 0},
	{21, 0, 323, "Бронепластина", 1, 1, 0, 0},
	{22, 0, 15639, "ZAZ 4", 7, 1, 10, 0},
	{23, 0, 110, "Телефон iPhone", 5, 0, 0, 0},
	{24, 0, 15649, "Chevrolet Camper", 7, 1, 45, 1500000},
	{25, 1, 15563, "Хасбик Шейх", 2, 1, 35, 10000000},
	{26, 0, 331, "Канистра для воды", 1, 1, 0, 0},
	{27, 1, 15559, "МакГрегор Поло", 2, 1, 35, 9000000},
	{28, 1, 15588, "Богданчик в футболке", 2, 1, 15, 4500000},
	{29, 1, 17029, "Санрайз в майке", 2, 1, 50, 2500000},
	{30, 1, 17041, "Мэлстрой Гучи", 2, 1, 13, 5000000},
	{31, 1, 17032, "Аарон Плей", 2, 1, 35, 2500000},
	{32, 0, 15680, "ЗИЛ-131", 7, 1, 30, 8000000},
	{33, 0, 15686, "Rolls royce Spectre", 7, 1, 15, 0},
	{34, 0, 15685, "Mercedes SL 63 MANSORY", 7, 1, 0, 0},
	{35, 1, 17058, "Наглаженный Тёмчик", 2, 1, 25, 0},
	{36, 0, 15689, "Lamborghini Revuelto", 7, 1, 40, 0},
	{37, 1, 17067, "Малфой", 2, 1, 5, 0}
};

enum S_CRAFT_DETAILS_STRUCT
{
	CRAFT_DETAILS_ID,
	CRAFT_DETAILS_TYPE,
	CRAFT_DETAILS_ITEM_ID,
	CRAFT_DETAILS_COUNT,
	CRAFT_DETAILS_NAME[34]
};

new g_craft_details[157][S_CRAFT_DETAILS_STRUCT] = 
{
	{0, 0, 27, 35, ""},
	{0, 0, 157, 1, ""},
	{1, 0, 27, 25, ""},
	{1, 0, 137, 1, ""},
	{2, 0, 142, 1, ""},
	{2, 0, 299, 3, ""},
	{2, 0, 141, 1, ""},
	{3, 0, 152, 3, ""},
	{3, 0, 153, 1, ""},
	{3, 0, 160, 1, ""},
	{4, 0, 14, 1, ""},
	{4, 0, 158, 1, ""},
	{5, 0, 42, 1, ""},
	{5, 0, 146, 1, ""},
	{6, 0, 75, 1, ""},
	{6, 0, 150, 1, ""},
	{7, 0, 156, 2, ""},
	{7, 0, 155, 4, ""},
	{7, 0, 154, 4, ""},
	{7, 0, 27, 100, ""},
	{7, 0, 153, 5, ""},
	{8, 0, 27, 200, ""},
	{8, 0, 153, 1, ""},
	{8, 0, 138, 3, ""},
	{9, 0, 27, 100, ""},
	{9, 0, 153, 1, ""},
	{9, 0, 144, 1, ""},
	{10, 0, 189, 1, ""},
	{10, 0, 190, 20, ""},
	{11, 0, 27, 30, ""},
	{11, 0, 153, 1, ""},
	{12, 0, 156, 2, ""},
	{12, 0, 155, 4, ""},
	{12, 0, 154, 5, ""},
	{12, 0, 27, 500, ""},
	{12, 0, 153, 3, ""},
	{12, 0, 188, 1, ""},
	{12, 0, 189, 1, ""},
	{12, 0, 190, 30, ""},
	{12, 0, 191, 4, ""},
	{13, 0, 156, 4, ""},
	{13, 0, 155, 4, ""},
	{13, 0, 154, 10, ""},
	{13, 0, 27, 500, ""},
	{13, 0, 153, 9, ""},
	{13, 0, 188, 3, ""},
	{13, 0, 189, 1, ""},
	{13, 0, 190, 50, ""},
	{13, 0, 191, 4, ""},
	{14, 0, 304, 1, ""},
	{14, 0, 305, 1, ""},
	{15, 0, 306, 1, ""},
	{15, 0, 307, 1, ""},
	{16, 0, 308, 1, ""},
	{16, 0, 309, 1, ""},
	{17, 0, 310, 1, ""},
	{17, 0, 311, 1, ""},
	{18, 0, 312, 1, ""},
	{18, 0, 313, 1, ""},
	{18, 0, 314, 1, ""},
	{18, 0, 315, 1, ""},
	{19, 0, 317, 1, ""},
	{19, 0, 318, 1, ""},
	{19, 0, 319, 1, ""},
	{20, 0, 154, 2, ""},
	{20, 0, 138, 1, ""},
	{20, 0, 323, 2, ""},
	{21, 0, 27, 100, ""},
	{22, 0, 156, 6, ""},
	{22, 0, 155, 4, ""},
	{22, 0, 301, 2, ""},
	{22, 0, 122, 4, ""},
	{22, 0, 191, 4, ""},
	{22, 0, 27, 250, ""},
	{22, 0, 180, 2, ""},
	{22, 0, 105, 2, ""},
	{22, 2, 543, 1, ""},
	{22, 2, 555, 1, ""},
	{23, 0, 148, 1, ""},
	{23, 0, 149, 2, ""},
	{24, 0, 156, 2, ""},
	{24, 0, 188, 1, ""},
	{24, 0, 122, 4, ""},
	{24, 0, 190, 10, ""},
	{24, 0, 301, 1, ""},
	{24, 0, 155, 4, ""},
	{24, 0, 191, 1, ""},
	{24, 0, 27, 500, ""},
	{24, 0, 180, 2, ""},
	{24, 0, 192, 1, ""},
	{24, 0, 10, 4, ""},
	{24, 0, 77, 1, ""},
	{25, 3, 15850, 2, "Ножик на ногу"},
	{25, 3, 15849, 1, "Куфия"},
	{25, 1, 15498, 1, ""},
	{25, 0, 332, 1, ""},
	{25, 0, 138, 5, ""},
	{26, 0, 27, 50, ""},
	{26, 0, 153, 1, ""},
	{27, 3, 14628, 1, "Ювелирка цепь"},
	{27, 3, 15848, 1, "Корона"},
	{27, 1, 175, 1, ""},
	{27, 0, 332, 1, ""},
	{27, 0, 138, 5, ""},
	{28, 3, 15751, 1, "Шапка с очками"},
	{28, 3, 16224, 1, "Кепка с ушками"},
	{28, 1, 15426, 1, ""},
	{28, 0, 332, 1, ""},
	{28, 0, 200, 1, ""},
	{29, 1, 17014, 1, ""},
	{29, 1, 22, 1, ""},
	{29, 0, 318, 1, ""},
	{29, 0, 332, 1, ""},
	{30, 1, 15518, 1, ""},
	{30, 3, 13962, 1, "Chanel Gold"},
	{30, 3, 14614, 1, "Часы"},
	{30, 3, 14628, 1, "Ювелирка цепь"},
	{31, 1, 15434, 1, ""},
	{31, 2, 466, 1, ""},
	{31, 0, 259, 2, ""},
	{31, 0, 332, 1, ""},
	{32, 0, 68, 1, ""},
	{32, 0, 106, 2, ""},
	{32, 0, 27, 350, ""},
	{32, 0, 156, 2, ""},
	{32, 0, 188, 1, ""},
	{32, 0, 155, 4, ""},
	{32, 0, 122, 4, ""},
	{32, 0, 191, 1, ""},
	{32, 0, 154, 10, ""},
	{33, 0, 409, 1, "Rolls-Royce Phantom VII"},
	{33, 0, 502, 2, "Rolls-Royce Wraith"},
	{33, 0, 15146, 1, "Rolls-Royce Cullinan"},
	{33, 0, 156, 1, ""},
	{33, 0, 188, 1, ""},
	{33, 0, 155, 4, ""},
	{33, 0, 122, 4, ""},
	{34, 0, 15684, 1, "Mercedes-Benz L65"},
	{34, 0, 354, 1, ""},
	{35, 1, 17051, 1, ""},
	{35, 1, 186, 1, ""},
	{35, 1, 15485, 1, ""},
	{35, 3, 14614, 1, "Часы"},
	{35, 0, 332, 1, ""},
	{35, 0, 47, 1, ""},
	{36, 0, 415, 1, "Lamborghini Aventador"},
	{36, 0, 605, 1, "Lamborghini Huracan"},
	{36, 0, 156, 1, ""},
	{36, 0, 106, 2, ""},
	{36, 0, 188, 1, ""},
	{36, 0, 122, 4, ""},
	{37, 0, 317, 1, ""},
	{37, 0, 318, 1, ""},
	{37, 0, 319, 1, ""},
	{37, 0, 110, 1, ""},
	{37, 0, 111, 1, ""},
	{37, 0, 332, 1, ""}
};

new craftfinish[MAX_PLAYERS] = -1;
new Float: g_garage_pos_workbench[4][4] =
{
	{-1613.2582,1581.6844,2005.7100},
	{2904.54640,2915.6694,1001.0000},
	{-1633.6216,-454.4589,1001.0000},
	{1601.4122,1764.9572,1096.9688}
};

public: OnPlayerCraftingStart(playerid, type, event) 
{
	craftfinish[playerid] = event;
	return true;
}

stock OnPlayerCraftingFinish(playerid)
{
	new event = craftfinish[playerid];
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
	if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), g_craft_prize[event][CRAFT_PRIZE_PRICE])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
	if(g_craft_prize[event][CRAFT_PRIZE_IF] == 1)
	{
		new garage_id = GetPlayerInGarage(playerid);
		if(garage_id == -1) 
			return GameText(playerid, "Создание доступно только на верстаке", 3000, 3);
		if(GetGarageData(garage_id, G_IMPROVEMENTS) < 2) 
			return GameText(playerid, "Создание доступно только на верстаке", 3000, 3);
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][0],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][1],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][2])) 
			return GameText(playerid, "Создание доступно только на верстаке", 3000, 3);		
	}
	new typewin;
	for(new idx; idx < sizeof g_craft_details; idx++)
	{
		if(event != g_craft_details[idx][CRAFT_DETAILS_ID]) continue;
		if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 0) 
		{
			if(g_craft_details[idx][CRAFT_DETAILS_ITEM_ID] <= sizeof ItemsInfo)
			{
				GiveIteam(playerid, g_craft_details[idx][CRAFT_DETAILS_ITEM_ID], 0, g_craft_details[idx][CRAFT_DETAILS_COUNT], 0);
			}
			else
			{
				for(new idxx; idxx < g_craft_details[idx][CRAFT_DETAILS_TYPE]; idxx++)
				{
					new vehicleid = INVALID_VEHICLE_ID;
					for(new i = 0; i < MAX_VEHICLES; i++)
					{
						if(GetVehicleData(i, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) 
							continue;
						new action_id = GetVehicleData(i, V_ACTION_ID);
						if(GetOwnableCarData(action_id, OC_MODEL_ID) != g_craft_details[idx][CRAFT_DETAILS_ITEM_ID]) 
							continue;
						vehicleid = i;
						break;
					}
					DestroyOwnableCar(vehicleid);
				}
			}
		}
		if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 3) DestroyAcs(playerid, g_craft_details[idx][CRAFT_DETAILS_ITEM_ID], g_craft_details[idx][CRAFT_DETAILS_COUNT]);
		if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 1) DestroySkin(playerid, g_craft_details[idx][CRAFT_DETAILS_ITEM_ID], g_craft_details[idx][CRAFT_DETAILS_COUNT]);
	}
	if(g_craft_prize[event][CRAFT_PRIZE_PRICE] != 0) GivePlayerMoneyEx(playerid, -g_craft_prize[event][CRAFT_PRIZE_PRICE], "Крафт");
	if(g_craft_prize[event][CRAFT_PRIZE_CHANCE] != 0)
	{
		new win = RandomEx(1,100);
		if(win <= g_craft_prize[event][CRAFT_PRIZE_CHANCE]) typewin = 1;
		else typewin = 0;
	}
	else typewin = 1;
	if(typewin == 1)
	{
		if(g_craft_prize[event][CRAFT_PRIZE_TYPE] == 7)
		{
			if(event == 7) GivePlayerMyPrizes(playerid, g_craft_prize[event][CRAFT_PRIZE_NAME], 3, 568, 0, 1, -1);
			else if(event == 12) GivePlayerMyPrizes(playerid, g_craft_prize[event][CRAFT_PRIZE_NAME], 3, 15174, 0, 1, -1);
			else if(event == 13) GivePlayerMyPrizes(playerid, g_craft_prize[event][CRAFT_PRIZE_NAME], 3, 15233, 0, 1, -1);
			else GivePlayerMyPrizes(playerid, g_craft_prize[event][CRAFT_PRIZE_NAME], 3, g_craft_prize[event][CRAFT_PRIZE_ITEM_ID], 0, 1, -1);
			SCM(playerid, 0x80bb20FF, "Автомобиль был добавлен в ваши награды. Используйте меню, чтобы забрать.");
		}
		else if(g_craft_prize[event][CRAFT_PRIZE_TYPE] == 2)
		{
			if(event == 19)
			{
				new id_skin = random(171);
				GiveSkin(playerid, g_business_clothing_skins[0][id_skin][g_model]);
			}
			else
			{
				GiveSkin(playerid, g_craft_prize[event][CRAFT_PRIZE_ITEM_ID]);
			}
		}
		else if(g_craft_prize[event][CRAFT_PRIZE_TYPE] == 0)
		{
			GiveAcs(playerid, 14009, 7);
		}
		else
		{
			GiveIteam(playerid, g_craft_prize[event][CRAFT_PRIZE_ITEM_ID], 1, 1, 0);
		}
		GameText(playerid, "~g~Успешно", 3000, 3);
	}
	else
	{
		GameText(playerid, "~r~Неудача~w~~n~У вас не получилось создать рецепт", 3000, 3);
	}
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Craft");
	return true;
}

stock OnPlayerCraftingClose(playerid) 
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Craft");
}

new g_tuning_diski_id[][3] =
{
    {0,0,50000},
    {1084,13,100000},
    {2846,36,100000},
    {5891,49,200000},
    {1082,11,300000},
    {6389,84,350000},
    {6387,82,350000},
    {6388,83,400000},
    {2849,38,400000},
    {3895,77,400000},
    {2853,42,400000},
    {2747,20,450000},
    {2748,81,450000},
    {1025,1,500000},
    {6386,21,500000},
    {6384,79,600000},
    {6385,80,600000},
    {6280,76,700000},
    {3896,78,700000},
    {6390,85,700000},
    {2749,22,700000},
    {1074,3,800000},
    {1085,14,800000},
    {2843,33,800000},
    {2856,45,900000},
    {1075,4,1000000},
    {5187,74,1000000},
    {6144,75,1000000},
    {2754,27,1000000},
    {2842,32,1000000},
    {2751,24,1000000},
    {5991,57,1000000},
    {1096,15,1200000},
    {2852,41,1500000},
    {2851,40,2000000},
    {2848,37,2000000},
    {2745,18,2000000},
    {2847,47,2000000},
    {2753,26,2500000},
    {6088,60,2500000},
    {2855,44,2500000},
    {1080,9,2750000},
    {1083,12,2800000},
    {6089,61,3000000},
    {1078,7,3000000},
    {2758,31,3000000},
    {2844,34,3000000},
    {2850,39,3000000},
    {6090,62,4000000},
    {6091,63,5000000},
    {2746,19,5000000},
    {2750,23,5000000},
    {6097,69,5000000},
    {6096,68,5000000},
    {2845,35,5000000},
    {2755,28,6000000},
    {5990,56,6000000},
    {1098,17,6000000},
    {5992,58,6000000},
    {5987,53,7000000},
    {5986,52,7000000},
    {6094,66,7000000},
    {6092,64,7000000},
    {1073,25,8000000},
    {5988,54,8000000},
    {2752,2,8000000},
    {1076,5,8000000},
    {6099,71,8000000},
    {5989,55,9000000},
    {1079,8,10000000},
    {2756,29,10000000},
    {5985,51,10000000},
    {6093,65,10000000},
    {6098,70,10000000},
    {2854,43,11000000},
    {5993,59,11000000},
    {1077,6,12000000},
    {2857,46,12000000},
    {2757,30,12000000},
    {1081,10,12000000},
    {1097,16,13000000},
    {5186,48,13000000},
    {6101,73,13000000},
    {6095,67,15000000},
    {5984,50,18000000},
    {6100,72,20000000}
};

new Float: g_tuning_diski_pos_car[3][2][4] =
{
	{{-310.9035,335.5357,12.8960,349.9683},{-305.2791,334.9071,12.8965,349.8886}}, // Арзамас
	{{-2540.8088,1087.0012,8.5008,158.2651},{-2535.1826,1083.4340,8.5025,159.2565}}, // Лыткарино
	{{2169.7400,-1845.4592,18.5822,359.4731},{2174.8660,-1845.0353,18.5814,0.6277}} // Южный
};

new Float: g_tuning_diski_camera[3][2][2][3] =
{
	{ // Арзамас
		{{-312.9489,342.1493,13.1133},{-308.3690,336.1938,13.1133}},
		{{-307.1182,338.2701,13.1133},{-302.2599,332.0975,13.1133}}
	},
	{ // Лыткарино
		{{-2532.5022,1077.5111,8.7192},{-2536.3508,1085.4044,8.7192}},
		{{-2536.9292,1082.9865,8.7192},{-2541.1794,1093.4431,8.7192}}
	},
	{ // Южный
		{{2173.4558, -1848.8738, 18.7993},{2167.5166, -1843.7424, 18.7993}},
		{{2177.1409, -1850.0643, 18.7993},{2172.0898, -1843.5535, 18.7993}}
	}
};

new g_player_vinil[MAX_PLAYERS];
new g_player_diski[MAX_PLAYERS];
new g_diski_status[3][2];
new g_player_diski_id[MAX_PLAYERS];
new g_player_diski_type[MAX_PLAYERS];
stock GetPlayerStatusDiski(playerid)
{
	g_player_diski_id[playerid] = -1;
	for(new i; i < sizeof g_tuning_diski_pos_car; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 10, g_tuning_diski_pos_car[i][0][0], g_tuning_diski_pos_car[i][0][1], g_tuning_diski_pos_car[i][0][2])) continue;
		if(g_diski_status[i][0] == 1) g_player_diski_id[playerid] = -1;
		else 
		{
			g_player_diski_id[playerid] = i;
			g_player_diski_type[playerid] = 0;
			g_diski_status[i][0] = 1;
			return g_player_diski_id[playerid];
		}
		if(g_diski_status[i][1] == 1) g_player_diski_id[playerid] = -1;
		else 
		{
			g_player_diski_id[playerid] = i;
			g_player_diski_type[playerid] = 1;
			g_diski_status[i][1] = 1;
			return g_player_diski_id[playerid];
		}
	}
	return g_player_diski_id[playerid];
}

stock SetPlayerStatusDiski(playerid)
{
	if(g_player_diski_id[playerid] == -1) return 1;
	g_diski_status[g_player_diski_id[playerid]][g_player_diski_type[playerid]] = 0;
	g_player_diski_id[playerid] = -1;
	g_player_diski_type[playerid] = 0;
	return 1;
}

public: Tuning_OnRimClose(playerid)
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return 1;
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	if(GetOwnableCarData(index, OC_DISKI) == 0) Sendpacket_tun(playerid, vehicleid, GetOwnableCarData(index, OC_DISKI), 1);
	else Sendpacket_tun(playerid, vehicleid, GetOwnableCarData(index, OC_DISKI));
	SetCameraBehindPlayer(playerid);
	SetPlayerStatusDiski(playerid);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "TuningStyling");
	return 1;
}

public: Tuning_OnRimItemChange(playerid, type) //выбор дисков
{
	g_player_diski[playerid] = 0;
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return 1;
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	if(type == 0) Sendpacket_tun(playerid, vehicleid, GetOwnableCarData(index, OC_DISKI), 1);
	else Sendpacket_tun(playerid, vehicleid, g_tuning_diski_id[type][0]);
	return 1;
}

public: Tuning_OnRimInstall(playerid, type) //покупка диска
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return 1;
	string_dialog[0] = EOS;
	format(string_dialog, 148, "{FFFFFF}Модель: {E08703}'RIM %d'\n{FFFFFF}Стоимость: {E08703}%s руб.", g_tuning_diski_id[type][1], formatInt(g_tuning_diski_id[type][2]));
	Dialog(playerid, DIALOG_SHINOMONTAJ_INSTAL, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подтверждение заказа", string_dialog, "Да", "Нет");
	g_player_diski[playerid] = type;
	return 1;
}

public: Tuning_OnRimCamera(playerid, type)
{
	return 1;
}

new g_tuning_vinil_price[41] = {3000,100000,50000,50000,1000000,1300000,3000000,200000,350000,150000,100000,500000,500000,200000,2000000,600000,1500000,3000000,200000,1000000,550000,550000,600000,600000,500000,300000,350000,500000,250000,200000,200000,600000,600000,600000,600000,600000,600000,600000,600000,600000,600000};
stock OpenTuningVinil(playerid, biz_id)
{		
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerOwnableCarLast(playerid) != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(i == playerid) continue;
		if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
		break;
	}
	SetVehiclePos(vehicleid, -6.6451,503.9987,1001.0556);
	SetVehicleZAngle(vehicleid, 178.8139);
	TogglePlayerControllable(playerid, 0);
	SetPlayerInterior(playerid, 3);
	SetPlayerVirtualWorld(playerid, playerid + 1);
	LinkVehicleToInterior(vehicleid, 3);
	SetVehicleVirtualWorld(vehicleid, playerid + 1);
	SetPlayerCameraPos(playerid,-3.6452, 498.7973, 1001.8854);
	SetPlayerCameraLookAt(playerid,-6.6452, 501.9935, 1001.2854);
	SetPlayerInBiz(playerid, biz_id);
	new query[124];
	STRING_GLOBAL[0] = EOS;
	new count;
	for(new i; i < sizeof g_tuning_vinil_price; i++)
	{
		count++;
		format(query, sizeof query, "[\"PaintJob №%d\",1,%d],", count, g_tuning_vinil_price[i]);
		strcat(STRING_GLOBAL, query);
	}
	for(new i; i < sizeof e_vinils; i++)
	{
		if(e_vinils[i][eVinilModel] == GetVehicleModel(vehicleid))
		{
			count++;
			format(query, sizeof query, "[\"PaintJob №%d\",1,10000000],", count);
			strcat(STRING_GLOBAL, query);
		}
	}
	new str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[1,[%s]]", STRING_GLOBAL);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "TuningStyling", STRING_GLOBAL);
    return 1;
}

public: OnDetailingVinylsChange(playerid, type)
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(type == 0) ChangeVehicleViniljob(vehicleid, -1);
	else if(type < 41) ChangeVehicleViniljob(vehicleid, type);
	else ChangeVehicleDefaultViniljob(vehicleid, type - 41);
	return 1;
}

public: OnDetailingVinylsClose(playerid)
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	new biz_id = GetPlayerInBiz(playerid);
	if(GetOwnableCarData(index, OC_VINILTYPE) == 1) ChangeVehicleViniljob(vehicleid, GetOwnableCarData(index, OC_VINIL));
	if(GetOwnableCarData(index, OC_VINILTYPE) == 0) ChangeVehicleDefaultViniljob(vehicleid, GetOwnableCarData(index, OC_VINIL));
	SetVehiclePos(vehicleid, GetBusinessData(biz_id, B_EXIT_POS_X), GetBusinessData(biz_id, B_EXIT_POS_Y), GetBusinessData(biz_id, B_EXIT_POS_Z));
	SetVehicleZAngle(vehicleid, GetBusinessData(biz_id, B_EXIT_ANGLE));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	LinkVehicleToInterior(vehicleid, 0);
	SetVehicleVirtualWorld(vehicleid, 0);
	SetPlayerInBiz(playerid, -1);
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 0)");
	return 1;
}

public: OnDetailingVinylsInstall(playerid, type)
{
	g_player_vinil[playerid] = type;
	string_dialog[0] = EOS;
	if(type < 41) format(string_dialog, 148, "{FFFFFF}Модель: {E08703}'PaintJob №%d'\n{FFFFFF}Стоимость: {E08703}%s руб.", type + 1, formatInt(g_tuning_vinil_price[type]));
	else format(string_dialog, 148, "{FFFFFF}Модель: {E08703}'PaintJob №%d'\n{FFFFFF}Стоимость: {E08703}10.000.000 руб.", type + 1);
	Dialog(playerid, DIALOG_VINIL_INSTAL, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подтверждение заказа", string_dialog, "Да", "Нет");
	return 1;
}

public: SetTrailerHandling(playerid, vehicleid)
{
    new modelid = GetVehicleData(vehicleid, V_MODELID);
    if(GetVehicleHandlingID(modelid) == -1) return 0;
    new Float:value = 5000.0;
    if(GetPlayerJobLoadItems(playerid) > 1000) value = 10000.0;
    if(GetPlayerJobLoadItems(playerid) > 2000) value = 20000.0;
    if(GetPlayerJobLoadItems(playerid) > 3000) value = 30000.0;
    if(GetPlayerJobLoadItems(playerid) > 4000) value = 40000.0;
    if(GetPlayerJobLoadItems(playerid) > 5000) value = 50000.0;
    SetVehicleHandling(playerid, vehicleid, GetVehicleHandlingID(modelid), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, value);
    return true;
}

#include <vehicle.inc> //кролик
stock ShowPlayerCasinoRollMenu(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "openInterface('CasinoRoll')");
	new query[128];
	format(query, sizeof(query), "interface('CasinoRoll').score = %d", GetPlayerCurrentDonate(playerid));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
	SetPlayerCameraPos(playerid, 214.4004, -282.7726, 1012.3878);
	SetPlayerCameraLookAt(playerid, 214.4717, -281.7766, 1012.4283);
}
stock StartFortuneWheel(playerid)
{
	new Float:pos[3];
    GetDynamicObjectRot(fortune_wheel_object, pos[0], pos[1], pos[2]);
    new Float:rX = pos[0] += 18.0;
    fortune_wheel_position += rX;
    MoveDynamicObject(fortune_wheel_object, 214.907, -276.686, 1012.76, 1.0, 0.000000, 0.000000 + fortune_wheel_position, 0.000000);
    fortune_timer = SetTimer_("UpdateFortuneWheel", 10, 1, -1);
	fortune_wheel_player = playerid;
    rand_stop = RandomEx(700, 1000);
	SendClientMessage(playerid, 0xFFA500FF, "Колесо запущено. Списание с донат-счета: 50.00 руб.");
}

public: UpdateFortuneWheel()
{
    new Float:pos[3];
    GetDynamicObjectRot(fortune_wheel_object, pos[0], pos[1], pos[2]);
    if(fortune_wheel_position >= 360.0)
    {
        SetDynamicObjectRot(fortune_wheel_object, 0.0, 0.0, 0.0);
        fortune_wheel_position = 0.0;
    }
    new Float:rX = pos[0] += 1.0;
    fortune_wheel_position += rX;
    MoveDynamicObject(fortune_wheel_object, 214.907, -276.686, 1012.76, 1.0, 0.000000, 0.000000 + fortune_wheel_position, 0.000000);
    fortune_wheel_status++;
    if(fortune_prize >= 20.0) fortune_prize = 1.0;
    else fortune_prize += 0.5;
    if(fortune_wheel_status >= rand_stop)
    {
        KillTimer(fortune_timer);
        fortune_wheel_status = 0;
        new Float:prize = floatdiv(fortune_wheel_position, 18.0);
        new result = floatround(prize, floatround_round);
		fortune_prize_id = result;
		ShowPlayerPrizeRoll(fortune_wheel_player, fortune_prize_id);
    }
    if(fortune_wheel_status == RandomEx(100, 150) )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 11, 1, -1);
    }
    if(fortune_wheel_status == RandomEx(200, 260) )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 12, 1, -1);
    }
    if(fortune_wheel_status == RandomEx(300, 380) )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 13, 1, -1);
    }
    if(fortune_wheel_status == RandomEx(400, 420) )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 14, 1, -1);
    }
    if(fortune_wheel_status == 420 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 15, 1, -1);
    }
    if(fortune_wheel_status == 430 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 16, 1, -1);
    }
    if(fortune_wheel_status == 440 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 18, 1, -1);
    }
    if(fortune_wheel_status == 470 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 20, 1, -1);
    }
    if(fortune_wheel_status == 550 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 25, 1, -1);
    }
    if(fortune_wheel_status == 600 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 28, 1, -1);
    }
    if(fortune_wheel_status == 650 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 30, 1, -1);
    }
    if(fortune_wheel_status == 670 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 32, 1, -1);
    }
    if(fortune_wheel_status == 680 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 35, 1, -1);
    }
    if(fortune_wheel_status == 690 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 40, 1, -1);
    }
    if(fortune_wheel_status == 695 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 42, 1, -1);
    }
    return 1;
}

enum E_PRIZE_STRUCT
{
	E_PRIZE_ID,
	E_PRIZE_NAME[13]
}
new const g_prize_id[21][E_PRIZE_STRUCT] =
{
	{0, "Iridium VIP"},
	{5, "Деньги"},
	{2, "Игровой опыт"},
	{3, "Автомобиль"},
	{0, "Iridium VIP"},
	{5, "Деньги"},
	{1, "Desert Eagle"},
	{4, "Одежда"},
	{5, "Деньги"},
	{3, "Автомобиль"},
	{2, "EXP"},
	{4, "Одежда"},
	{1, "Desert Eagle"},
	{5, "Деньги"},
	{2, "Игровой опыт"},
	{4, "Одежда"},
	{0, "Iridium VIP"},
	{4, "Одежда"},
	{3, "Автомобиль"},
	{1, "Desert Eagle"},
	{0, "Iridium VIP"}
};

stock ShowPlayerPrizeRoll(playerid, prize_id)
{
	new query[150];
	new item_id;
	new prize_name[32];
	new const car_id[12] = {549, 542, 15079, 439, 496, 15078, 566,  550, 15089, 579, 15107, 15107};
	new const skin_id[11] = {217, 202, 91, 117, 193, 295, 185, 263, 110, 120, 12};
	new const money_prize[21] = {50_000_000, 55_000_000, 60_000_000, 65_000_000, 70_000_000, 75_000_000, 80_000_000, 85_000_000, 90_000_000, 95_000_000, 100_000_000, 105_000_000, 110_000_000, 115_000_000, 120_000_000, 125_000_000, 130_000_000, 135_000_000, 140_000_000, 145_000_000, 150_000_000};
	if(g_prize_id[prize_id][E_PRIZE_ID] == 3) item_id = random(12);
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 4) item_id = random(11);
	else item_id = 0;
	if(g_prize_id[prize_id][E_PRIZE_ID] == 5)
	{
		fortune_wheel_amount = money_prize[RandomEx(0, 20)];
		format(prize_name, 32, "%s $%d", g_prize_id[prize_id][E_PRIZE_NAME], fortune_wheel_amount);
	}
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 2)
	{
		fortune_wheel_amount = RandomEx(1, 7);
		format(prize_name, 32, "%s %d exp", g_prize_id[prize_id][E_PRIZE_NAME], fortune_wheel_amount);
	}
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 1)
	{
		fortune_wheel_amount = RandomEx(12, 150);
		format(prize_name, 32, "%s %d пт.", g_prize_id[prize_id][E_PRIZE_NAME], fortune_wheel_amount);
	}
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 3)
	{
		fortune_wheel_amount = car_id[item_id];
		format(prize_name, 32, "%s", GetVehicleInfo(car_id[item_id], VI_NAME));
	}
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 4)
	{
		fortune_wheel_amount = skin_id[item_id];
		format(prize_name, 32, "Одежда");
	}
	else
	{
		format(prize_name, 32, "%s", g_prize_id[prize_id][E_PRIZE_NAME]);
	}
	format(query, sizeof query, "interface('CasinoRoll').showResult(%d, \"%s\", 25, %d)", g_prize_id[prize_id][E_PRIZE_ID], prize_name, item_id);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
}

public: OnPlayerFortuneWheelMenu(playerid, fortun)
{
	switch(fortun)
	{
		case 1:
		{
			if(GetPlayerData(playerid, P_CASINO_ROLL) == 1) return 1;
			if(fortune_wheel_active == true) return SCM(playerid, 0xCECECEFF, "Колесо сейчас занято, подождите.");
			if(GetPlayerData(playerid, P_FORTUNE_WHEEL) == 0)
			{
				if(GetPlayerCurrentDonate(playerid) < FORTUNE_WHEEL_PRICE) return SendClientMessage(playerid, 0x66CC00FF, "У Вас недостаточно средств");
				GivePlayerDonate(playerid, -FORTUNE_WHEEL_PRICE, "Рулетка", true, true);
				SetPVarInt(playerid, "sell_roll_bet", 25);
			}
			else
			{
				SetPlayerData(playerid, P_FORTUNE_WHEEL, 0);
				UpdatePlayerDatabaseInt(playerid, "ruletka", 0);
				SetPVarInt(playerid, "sell_roll_bet", 0);
			}
			SetPlayerData(playerid, P_CASINO_ROLL, 1);
			fortune_wheel_active = true;
			StartFortuneWheel(playerid);
			new query[128];
			format(query, sizeof(query), "interface('CasinoRoll').score = %d", GetPlayerCurrentDonate(playerid));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/casino/fortune_wheel/moved.4b060fd7.wav', 0, 1)");
		}
		case 2:
		{
			if(g_player[playerid][P_FORTUNE_KD] > gettime()) return 1;
			if(GetPlayerData(playerid, P_CASINO_ROLL) == 0) return 1;
			if(fortune_prize_id == 0 || fortune_prize_id == 4 || fortune_prize_id == 16)
			{
				SCM(playerid, -1, "В разработке");
				GivePlayerDonate(playerid, 25, "Приз подарка", true, true);
			}
			if(fortune_prize_id == 1 || fortune_prize_id == 5 || fortune_prize_id == 8 || fortune_prize_id == 13)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на 'Мои награды'.");
				GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, fortune_wheel_amount, 0);
			}
			if(fortune_prize_id == 2 || fortune_prize_id == 10 || fortune_prize_id == 14)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на Ваш аккаунт.");
				AddPlayerData(playerid, P_EXP, +, fortune_wheel_amount);
			}
			if(fortune_prize_id == 3 || fortune_prize_id == 9 || fortune_prize_id == 18)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на 'Мои награды'.");
				new query[64];
				format(query, sizeof query, "Транспорт[№%d]", fortune_wheel_amount),
				GivePlayerMyPrizes(playerid, query, 3, fortune_wheel_amount, 0, 1, -1);
			}
			if(fortune_prize_id == 6 || fortune_prize_id == 12 || fortune_prize_id == 19)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на Ваш аккаунт.");
				GivePlayerWeapon(playerid, 24, fortune_wheel_amount);
			}
			if(fortune_prize_id == 7 || fortune_prize_id == 11 || fortune_prize_id == 15 || fortune_prize_id == 17)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на 'Мои награды'.");
				new query[64];
				format(query, sizeof query, "Одежда[№%d]", fortune_wheel_amount),
				GivePlayerMyPrizes(playerid, query, 4, fortune_wheel_amount, 0, 1, 0);
			}
			fortune_wheel_active = false;
			SetPlayerData(playerid, P_CASINO_ROLL, 0);
			g_player[playerid][P_FORTUNE_KD] = gettime() + 20;
		}
		case 3:
		{
			if(g_player[playerid][P_FORTUNE_KD] > gettime()) return 1;
			if(GetPlayerData(playerid, P_CASINO_ROLL) == 0) return 1;
			GivePlayerDonate(playerid, GetPVarInt(playerid, "sell_roll_bet"), "Возврат с рулетки");
			fortune_wheel_active = false;
			if(GetPVarInt(playerid, "sell_roll_bet") == 25) SCM(playerid, 0x66CC00FF, "Вы отказались от награды и вернули часть средств: 25.00 руб.");
			SetPVarInt(playerid, "sell_roll_bet", 0);
			SetPlayerData(playerid, P_CASINO_ROLL, 0);
			new query[128];
			format(query, sizeof(query), "interface('CasinoRoll').score = %d", GetPlayerCurrentDonate(playerid));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
			g_player[playerid][P_FORTUNE_KD] = gettime() + 20;
		}
		case 4:
		{
			if(GetPlayerData(playerid, P_CASINO_ROLL) == 1) return SendClientMessage(playerid, 0x66CC00FF, "Вы уже крутите рулетку");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('CasinoRoll')");
			SetCameraBehindPlayer(playerid);
		}
	}
	return 1;
}

#define MAX_PROMOCODE_ACTIVATION 500
#define GetPlayerPromo(%0,%1) 		    g_player_promocode[%0][%1]
#define SetPlayerPromo(%0,%1,%2)		g_player_promocode[%0][%1] = %2
#define AddPlayerPromo(%0,%1,%2,%3)	    g_player_promocode[%0][%1] %2= %3
new g_player_load_promo[MAX_PLAYERS];
enum E_PROMOCODE_ACTIVATION
{
    PA_ID,
    PA_OWNER_ID,
    PA_NAME[32],
    PA_TIME,
    PA_STATUS,
};

new g_player_promocode[MAX_PROMOCODE_ACTIVATION][E_PROMOCODE_ACTIVATION];
stock DestroyPlayerPromo(playerid)
{
	for(new i; i < MAX_PROMOCODE_ACTIVATION; i++)
	{
		if(GetPlayerPromo(i, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		DestroyPromo(i);
	}
}

stock DestroyPromo(id)
{
    SetPlayerPromo(id, PA_ID, 		0);
    SetPlayerPromo(id, PA_OWNER_ID, 	0);
    SetPlayerPromo(id, PA_TIME, 	    0);
    SetPlayerPromo(id, PA_STATUS, 	0);
}

stock GetFreePromoID()
{
	for(new i; i < MAX_PROMOCODE_ACTIVATION; i ++)
	{
		if(GetPlayerPromo(i, PA_ID) != 0) continue;
		if(GetPlayerPromo(i, PA_OWNER_ID) != 0) continue;
		return i;
	}
	return -1;
}

stock CreatePlayerPromo(playerid, name[], time)
{
    new query[124];
    new Cache: result;
    mysql_format(mysql, query, sizeof query, "INSERT INTO promocode_activations (owner_id, name, time, type, status) VALUES (%d, '%s', %d, 1, 1)", GetPlayerAccountID(playerid), name, time);
    result = mysql_query(mysql, query);
    new i = GetFreePromoID();
    SetPlayerPromo(i, PA_ID, 		cache_insert_id());
    cache_delete(result);
    SetPlayerPromo(i, PA_OWNER_ID, 	GetPlayerAccountID(playerid));
    SetPlayerPromo(i, PA_TIME, 	    time);
    SetPlayerPromo(i, PA_STATUS, 	1);
    format(g_player_promocode[i][PA_NAME], 32, "%s", name);
    return true;
}

public: LoadPlayerPromocode(playerid)
{
	new	Cache: result;
	new query[96];
	format(query, sizeof query, "SELECT * FROM promocode_activations WHERE owner_id=%d AND type=1 AND (status=1 OR status=0)", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
	if(rows > MAX_PROMOCODE_ACTIVATION)
	{
		rows = MAX_PROMOCODE_ACTIVATION;
		print("[PlayerPromo] Привышен лимит предметов (MAX_PROMOCODE_ACTIVATION)");
	}
	if(rows)
	{
		for(new idx; idx < rows; idx++)
		{	
			new i = GetFreePromoID();
			SetPlayerPromo(i, PA_ID, 		cache_get_field_content_int(idx, "id"));
			SetPlayerPromo(i, PA_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
			SetPlayerPromo(i, PA_TIME, 	    cache_get_field_content_int(idx, "time"));
            SetPlayerPromo(i, PA_STATUS, 	cache_get_field_content_int(idx, "status"));
			cache_get_field_content(idx, "name", g_player_promocode[i][PA_NAME], mysql, 32);
            g_player_load_promo[playerid]++;
		}
	}
	cache_delete(result);
	return 1;
}

stock GetPlayerTimePromo(playerid)
{
    for(new i; i < MAX_PROMOCODE_ACTIVATION; i ++)
	{
		if(GetPlayerPromo(i, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetPlayerPromo(i, PA_TIME) <= 0) continue;
        if(GetPlayerPromo(i, PA_STATUS) != 1) continue;
        SetPlayerPromo(i, PA_TIME, GetPlayerPromo(i, PA_TIME) - 1);
        if(GetPlayerPromo(i, PA_TIME) > 0)
        {
            new query[120];
            format(query, sizeof query, "UPDATE promocode_activations SET time='%d' WHERE id='%d'", GetPlayerPromo(i, PA_TIME), GetPlayerPromo(i, PA_ID));
            mysql_query(mysql, query, false);
        }
        else
        {
            SetPlayerPromo(i, PA_TIME, 0);
            SetPlayerPromo(i, PA_STATUS, 0);
            new query[120];
            format(query, sizeof query, "UPDATE promocode_activations SET time=0, status=0 WHERE id='%d'", GetPlayerPromo(i, PA_ID));
		    mysql_query(mysql, query, false);
        }
	}
    return true;
}

stock GetPromoPrize(playerid)
{
    for(new idx; idx < MAX_PROMOCODE_ACTIVATION; idx ++)
	{
		if(GetPlayerPromo(idx, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetPlayerPromo(idx, PA_STATUS) != 0) continue;
        new query[94],
        type_prize[6],
		id_prize[6],
		count_prize[6],
        Cache: result;
        format(query, sizeof query, "SELECT * FROM prizes_code WHERE name='%s' LIMIT 1", GetPlayerPromo(idx, PA_NAME));
		result = mysql_query(mysql, query, true);
		if(cache_num_rows())
		{
			type_prize[0] = cache_get_field_content_int(0, "type_prize_1");
			id_prize[0] = cache_get_field_content_int(0, "id_prize_1");
			count_prize[0] = cache_get_field_content_int(0, "count_prize_1");
			type_prize[1] = cache_get_field_content_int(0, "type_prize_2");
			id_prize[1] = cache_get_field_content_int(0, "id_prize_2");
			count_prize[1] = cache_get_field_content_int(0, "count_prize_2");
			type_prize[2] = cache_get_field_content_int(0, "type_prize_3");
			id_prize[2] = cache_get_field_content_int(0, "id_prize_3");
			count_prize[2] = cache_get_field_content_int(0, "count_prize_3");
			type_prize[3] = cache_get_field_content_int(0, "type_prize_4");
			id_prize[3] = cache_get_field_content_int(0, "id_prize_4");
			count_prize[3] = cache_get_field_content_int(0, "count_prize_4");
			type_prize[4] = cache_get_field_content_int(0, "type_prize_5");
			id_prize[4] = cache_get_field_content_int(0, "id_prize_5");
			count_prize[4] = cache_get_field_content_int(0, "count_prize_5");
			type_prize[5] = cache_get_field_content_int(0, "type_prize_6");
			id_prize[5] = cache_get_field_content_int(0, "id_prize_6");
			count_prize[5] = cache_get_field_content_int(0, "count_prize_6");
		}
		cache_delete(result);
        for(new i; i < MAX_PRIZES_CODE; i++)
		{	
			if(type_prize[i] == 1) 
            {
                GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, count_prize[i], 0);
            }
			if(type_prize[i] == 2) 
            {
                GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, count_prize[i], 0);
            }
			if(type_prize[i] == 3) 
            {
                AddPlayerData(playerid, P_EXP, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
            }
			if(type_prize[i] == 4) 
            {
                format(query, sizeof query, "%s", ItemsInfo[id_prize[i]][i_item_name]),
				GivePlayerMyPrizes(playerid, query, 8, id_prize[i], 0, count_prize[i], 0);
            }
			if(type_prize[i] == 5) 
            {
                format(query, sizeof query, "Транспорт[№%d]", id_prize[i]),
				GivePlayerMyPrizes(playerid, query, 3, id_prize[i], 0, 1, -1);
            }
			if(type_prize[i] == 6) 
            {
                AddPlayerData(playerid, P_BIZ_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS));
            }
			if(type_prize[i] == 7) 
            {
                AddPlayerData(playerid, P_HOUSE_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS));
            }
			if(type_prize[i] == 8) 
            {
                AddPlayerData(playerid, P_GARAGE_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS));
            }
			if(type_prize[i] == 9) 
            {
                AddPlayerData(playerid, P_CAR_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
            }
			if(type_prize[i] == 10) 
            {
                AddPlayerData(playerid, P_KIOSK_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS));
            }
			if(type_prize[i] == 11) 
            {
                format(query, sizeof query, "Одежда[№%d]", id_prize[i]),
				GivePlayerMyPrizes(playerid, query, 4, id_prize[i], 0, 1, 0);
            }
            if(type_prize[i] == 12) 
            {
                format(query, sizeof query, "Аксессуар[№%d]", id_prize[i]),
				GivePlayerMyPrizes(playerid, query, 6, id_prize[i], 0, 1, count_prize[i]);
            }
            if(type_prize[i] == 13 && id_prize[i] == 1) 
            {
                format(query, sizeof query, "Купон для выхода из тюрьмы Тюрьма (%d мин)", count_prize[i]);
                GivePlayerMyPrizes(playerid, query, 16, count_prize[i], 0, 0, 0);
            }
		}
        SCMF(playerid, 0x64be2fFF, "Вы получаете бонус за использование промокода \"%s\"", GetPlayerPromo(idx, PA_NAME));
        SCM(playerid, 0xFFFFFFFF, "Зайдите в {4a92eb}Игровое меню -> мои награды {FFFFFF}чтобы забрать вещи");
        format(query, sizeof query, "UPDATE promocode_activations SET status=-1 WHERE id=%d", GetPlayerPromo(idx, PA_ID));
		mysql_query(mysql, query, false);
        DestroyPromo(idx);
    }
    return true;
}

#define MAX_MONEY_SYMBOLS	23
new player_int_count_1[MAX_PLAYERS][MAX_MONEY_SYMBOLS];
new player_int_count_2[MAX_PLAYERS][MAX_MONEY_SYMBOLS];
new player_length_count_1[MAX_PLAYERS];
new player_length_count_2[MAX_PLAYERS];
stock EditCountSInteger(playerid, count_1[], count_2[])
{
	new fmt_text[MAX_MONEY_SYMBOLS];
	if(strlen(count_1) > 0 && strlen(count_1) < 18 && strlen(count_2) < 18)
	{
		new status = 1;
		if(strfind(count_2,"-") != -1) 
		{
			status = 0;
			strdel(count_2, 0, 1);
		}
		SettingsCountSInteger(playerid, count_1, count_2);
		if(status == 1)
		{
			if(player_length_count_1[playerid] >= player_length_count_2[playerid])
			{
				for(new i; i < player_length_count_1[playerid]; i++)
				{
					if(player_int_count_1[playerid][i] + player_int_count_2[playerid][i] <= 9)
					{
						player_int_count_1[playerid][i] = player_int_count_1[playerid][i] + player_int_count_2[playerid][i];
					}
					else if(player_int_count_1[playerid][i] + player_int_count_2[playerid][i] > 9)
					{
						player_int_count_1[playerid][i] = (player_int_count_1[playerid][i] + player_int_count_2[playerid][i]) - 10;
						if(player_length_count_1[playerid] == i + 1) player_length_count_1[playerid]++;
						player_int_count_1[playerid][i + 1]++;
					}
				}
			}
			else
			{
				for(new i; i < player_length_count_2[playerid]; i++)
				{
					if(player_int_count_2[playerid][i] + player_int_count_1[playerid][i] <= 9) 
					{
						player_int_count_1[playerid][i] = player_int_count_2[playerid][i] + player_int_count_1[playerid][i];
					}
					else if(player_int_count_2[playerid][i] + player_int_count_1[playerid][i] > 9)
					{
						player_int_count_1[playerid][i] = (player_int_count_2[playerid][i] + player_int_count_1[playerid][i]) - 10;
						if(player_length_count_2[playerid] == i + 1) player_length_count_2[playerid]++;
						player_int_count_1[playerid][i + 1]++;
					}
				}
				player_length_count_1[playerid] = player_length_count_2[playerid];
			}
		}
		else if(status == 0)
		{
			new get_count_int = GetCountSInteger(playerid);
			if(get_count_int != 0)
			{
				if(get_count_int == 1)
				{
					for(new i; i < player_length_count_1[playerid]; i++)
					{
						if(player_int_count_1[playerid][i] >= player_int_count_2[playerid][i])
						{
							player_int_count_1[playerid][i] = player_int_count_1[playerid][i] - player_int_count_2[playerid][i];
							if(player_int_count_1[playerid][i] == 0 && player_length_count_1[playerid] == i) player_length_count_1[playerid]--;
						}
						else if(player_int_count_1[playerid][i] < player_int_count_2[playerid][i])
						{
							player_int_count_1[playerid][i] = (player_int_count_1[playerid][i] + 10) - player_int_count_2[playerid][i];
							player_int_count_1[playerid][i + 1]--;
							if(player_int_count_1[playerid][i + 1] == 0 && player_length_count_1[playerid] == i + 1) player_length_count_1[playerid]--;
						}
					}
					new i = player_length_count_1[playerid];
					while(0 < i)
					{
						i--;
						if(player_int_count_1[playerid][i] == 0) player_length_count_1[playerid]--;
						else break;
					}
				}
				else if(get_count_int == 2)
				{
					player_int_count_1[playerid][0] = 0;
					player_length_count_1[playerid] = 1;
				}
			}
		}
		format(fmt_text, MAX_MONEY_SYMBOLS, "%s", SettingsCountSString(playerid));
		return fmt_text;
	}
	return fmt_text;
}

stock SettingsCountSString(playerid)
{
	new integer_count[MAX_MONEY_SYMBOLS];
	for(new i; i < player_length_count_1[playerid]; i ++)
	{
		new count_id = player_length_count_1[playerid] - 1;
		new query[MAX_MONEY_SYMBOLS];
		format(query, sizeof query, "%d", player_int_count_1[playerid][count_id - i]);
		strcat(integer_count, query);
	}
	return integer_count;
}

stock SettingsCountSInteger(playerid, count_1[], count_2[])
{
	for(new i; i < MAX_MONEY_SYMBOLS; i++)
	{
		player_int_count_1[playerid][i] = 0;
		player_int_count_2[playerid][i] = 0;
	}
	new format_count[MAX_MONEY_SYMBOLS];
	player_length_count_1[playerid] = strlen(count_1);
	for(new i; i < player_length_count_1[playerid]; i ++)
	{
		format(format_count, sizeof format_count, "%s", count_1);
		strdel(format_count, 0, strlen(format_count) - (i + 1));
		strdel(format_count, strlen(format_count) - i, strlen(format_count));
		player_int_count_1[playerid][i] = strval(format_count);
	}
	player_length_count_2[playerid] = strlen(count_2);
	for(new i; i < player_length_count_2[playerid]; i ++)
	{
		format(format_count, sizeof format_count, "%s", count_2);
		strdel(format_count, 0, strlen(format_count) - (i + 1));
		strdel(format_count, strlen(format_count) - i, strlen(format_count));
		player_int_count_2[playerid][i] = strval(format_count);
	}
}


stock GetCountSInteger(playerid)
{
    if(player_length_count_1[playerid] < player_length_count_2[playerid]) return 0;
    new id = player_length_count_1[playerid];
    while(0 < id)
    {
        id--;
        if(player_int_count_1[playerid][id] > player_int_count_2[playerid][id]) return 1; 
        else if(player_int_count_1[playerid][id] < player_int_count_2[playerid][id]) return 0;
    }
    if(id == 0) return 2;
    return 1;
}

stock SetILPlayerInt(playerid, count_1[], count_2)
{
	new query[MAX_MONEY_SYMBOLS];
	format(query, sizeof query, "%d", count_2);
	format(query, sizeof query, "%s", EditCountSInteger(playerid, count_1, query));
	return query;
}

stock SetILPlayerStr(playerid, count_1[], count_2[])
{
	new query[MAX_MONEY_SYMBOLS];
	format(query, sizeof query, "%s", EditCountSInteger(playerid, count_1, count_2));
	return query;
}

stock GetILPlayerInt(count_1[], count_2)
{
	new query[MAX_MONEY_SYMBOLS];
	format(query, sizeof query, "%d", count_2);
	if(IsILStringStatus(count_1, query)) return 1;
	else return 0;
}

stock GetILPlayerStr(count_1[], count_2[])
{
	if(IsILStringStatus(count_1, count_2)) return 1;
	else return 0;
}

stock IsILStringStatus(count_1[], count_2[])
{
	new format_count[MAX_MONEY_SYMBOLS];
	new int_count_1[MAX_MONEY_SYMBOLS];
	new int_count_2[MAX_MONEY_SYMBOLS];
	new length_count_1;
	new length_count_2;
	length_count_1 = strlen(count_1);
	length_count_2 = strlen(count_2);
	if(length_count_1 < length_count_2) return 0;
	for(new i; i < length_count_1; i ++)
	{
		format(format_count, sizeof format_count, "%s", count_1);
		strdel(format_count, 0, strlen(format_count) - (i + 1));
		strdel(format_count, strlen(format_count) - i, strlen(format_count));
		int_count_1[i] = strval(format_count);
	}
	for(new i; i < length_count_2; i ++)
	{
		format(format_count, sizeof format_count, "%s", count_2);
		strdel(format_count, 0, strlen(format_count) - (i + 1));
		strdel(format_count, strlen(format_count) - i, strlen(format_count));
		int_count_2[i] = strval(format_count);
	}
    new id = length_count_1;
    while(0 < id)
    {
        id--;
        if(int_count_1[id] > int_count_2[id]) return 1; 
        else if(int_count_1[id] < int_count_2[id]) return 0;
    }
    if(id == 0) return 1;
	return -1;
}

stock IsILNumeric(const str[])
{
    new
        inc,
		status,
        num = strlen(str);
	if(num > 17) return 0;
    if(num == 0 || num == 1 && (str[0] == '-' || str[0] == '+'))
        return 0;
    for(; inc < num; inc++)
		if((str[inc] == '-' && inc != 0))
			return 0;
		else if(str[inc] == '+')
			return 0; 
       	else if(('0' <= str[inc] <= '9' && str[inc] != '-' && str[inc] != '+'))
            status = 1; 
		else 
			return 0; 
    return status;
}

stock formatStr(amount[], delimiter[2] = ".")
{
	new money[32];
	if(strlen(amount) < 18)
	{
		new int_string[MAX_MONEY_SYMBOLS];
		format(int_string, sizeof(int_string), "%s", amount);
		new status;
		if(strfind(int_string,"-") != -1) strdel(int_string, 0, 1), status = 1;
		new value = strlen(int_string);
		switch(value)
		{
			case 4..6:
				strins(int_string, delimiter, value - 3, 1);
			case 7..9:
				strins(int_string, delimiter, value - 3, 1),
				strins(int_string, delimiter, value - 6, 1);
			case 10..12:
				strins(int_string, delimiter, value - 3, 1),
				strins(int_string, delimiter, value - 6, 1),
				strins(int_string, delimiter, value - 9, 1);
			case 13..15:
				strins(int_string, delimiter, value - 3, 1),
				strins(int_string, delimiter, value - 6, 1),
				strins(int_string, delimiter, value - 9, 1),
				strins(int_string, delimiter, value - 12, 1);
			case 16..18:
				strins(int_string, delimiter, value - 3, 1),
				strins(int_string, delimiter, value - 6, 1),
				strins(int_string, delimiter, value - 9, 1),
				strins(int_string, delimiter, value - 12, 1),
				strins(int_string, delimiter, value - 15, 1);
		}
		if(status == 1) strins(int_string, "-", 0);
		format(money, sizeof(money), "%s", int_string);
		return money;
	}
	return money;
}

stock SetIntegerMultiply(playerid, count_1[], count_2)
{
	SettingsCountSInteger(playerid, count_1, count_1);
	if(player_length_count_1[playerid] >= player_length_count_2[playerid])
	{
		for(new i; i < player_length_count_1[playerid]; i++)
		{
			for(new idx; idx < count_2 - 1; idx++)
			{
				if(player_int_count_1[playerid][i] + player_int_count_2[playerid][i] <= 9)
				{
					player_int_count_1[playerid][i] = player_int_count_1[playerid][i] + player_int_count_2[playerid][i];
				}
				else if(player_int_count_1[playerid][i] + player_int_count_2[playerid][i] > 9)
				{
					player_int_count_1[playerid][i] = (player_int_count_1[playerid][i] + player_int_count_2[playerid][i]) - 10;
					if(player_length_count_1[playerid] == i + 1) player_length_count_1[playerid]++;
					player_int_count_1[playerid][i + 1]++;
				}
			}
		}
	}
	else
	{
		for(new i; i < player_length_count_2[playerid]; i++)
		{
			for(new idx; idx < count_2 - 1; idx++)
			{
				if(player_int_count_2[playerid][i] + player_int_count_1[playerid][i] <= 9) 
				{
					player_int_count_1[playerid][i] = player_int_count_2[playerid][i] + player_int_count_1[playerid][i];
				}
				else if(player_int_count_2[playerid][i] + player_int_count_1[playerid][i] > 9)
				{
					player_int_count_1[playerid][i] = (player_int_count_2[playerid][i] + player_int_count_1[playerid][i]) - 10;
					if(player_length_count_2[playerid] == i + 1) player_length_count_2[playerid]++;
					player_int_count_1[playerid][i + 1]++;
				}
			}
		}
		player_length_count_1[playerid] = player_length_count_2[playerid];
	}
	new fmt_text[MAX_MONEY_SYMBOLS];
	format(fmt_text, MAX_MONEY_SYMBOLS, "%s", SettingsCountSString(playerid));
	return fmt_text;
}

stock GivePlayerCoins(playerid, donate)
{
	AddPlayerData(playerid, P_COINS, +, donate);
	UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));
	new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "~o~%s%d "SERVER_RUB"", donate < 0 ? ("") : ("+"), donate);
	GameText(playerid, fmt_str, 3000, 2);
}

stock ShowPlayerDonateMenu1(playerid)
{
	string_dialog[0] = EOS;
	format(string_dialog, sizeof string_dialog,"{FFFFFF}Игравой магазин (баланс: %s "SERVER_RUB")", formatInt(GetPlayerData(playerid, P_COINS)));
	Dialog
	(
		playerid, DIALOG_DONATE_MENU1, DIALOG_STYLE_LIST, string_dialog, 
		"{FFFFFF}[1]. Каталог\n"\
		"{FFFFFF}[2]. Валюта\n"\
		"{FFFFFF}[3]. VIP-Статус\n"\
		"{FFFFFF}[4]. Донат-Наборы\n"\
		"{FFFFFF}[5]. Снятия наказаний",
		"Выбрать", "Закрыть"
	);
	return true;
}

stock ShowPlayerDonateMenu(playerid)
{
	string_dialog[0] = EOS;
	format(string_dialog, sizeof string_dialog,"{FFFFFF}Каталог (баланс: %s "SERVER_RUB")", formatInt(GetPlayerData(playerid, P_COINS)));
	Dialog
	(
		playerid, DIALOG_DONATE_MENU, DIALOG_STYLE_LIST, string_dialog, 
		"{FFFFFF}[1]. Покупка дополнительных слотов\n"\
		"{FFFFFF}[2]. Покупка транспорта\t{FFAF00} (От 100 "SERVER_RUB")\n"\
		"{FFFFFF}[3]. Покупка скина\t{FFAF00} (От 50 "SERVER_RUB")\n"\
		"{FFFFFF}[4]. Покупка Ключей и Кейсов\t {FFAF00} (От 50 "SERVER_RUB")\n"\
		"{FFFFFF}[5]. Покупка аксессуаров\t{FFAF00} (От 50 "SERVER_RUB")\n"\
		"{FFFFFF}[6]. Покупка аксессуаров на транспорт\t{FFAF00} (От 50 "SERVER_RUB")\n"\
		"{FFFFFF}[7]. Покупка игрового уровня",
		"Выбрать", "Назад"
	);
	return true;
}

stock ShowDialogDonatePerfect(playerid, type, page)
{
	if(type == 1) type_page_cars[playerid] = 10;
	if(type == 2) type_page_cars[playerid] = 11;
	if(type == 3) type_page_cars[playerid] = 12;
	if(type == 4) type_page_cars[playerid] = 13;
	if(type == 5) type_page_cars[playerid] = 14;
	new	query[148],
		Cache: result,
		index,
		page_1,
		page_2, 
		next;
	format(query, sizeof query, "SELECT * FROM donate_items WHERE type=%d", type);
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
	ClearPlayerListitemValues(playerid);
	string_dialog[0] = EOS;
	format(string_dialog, sizeof string_dialog, "Название\tКоличество\tЦена\n");
	if(rows)
	{
		for(new i; i < rows; i ++)
		{
			if(i >= (page * 20) && i < (page * 20) + 20)
            next++;
			if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
        	{
				new name[48];
				cache_get_field_content(i, "name", name);
				new item_id = cache_get_field_content_int(i, "item_id");
				new price = cache_get_field_content_int(i, "price");
				new count = cache_get_field_content_int(i, "count");
				if(type != 4) 
				{
					format(query, sizeof query, "{FFFFFF}%s [№%d]\t%d шт.\t{"SERVER_COLOR"}%d "SERVER_RUB"\n", name, item_id, count, price);
				}
				else 
				{
					format(query, sizeof query, "{FFFFFF}%s\t%d шт.\t{"SERVER_COLOR"}%d "SERVER_RUB"\n", name, count, price);
				}
				strcat(string_dialog, query);
				g_player_listitem[playerid][index] = cache_get_field_content_int(i, "id");
				index++;
			}
		}
	}
	else format(string_dialog, sizeof string_dialog, "На данный момент этот список пуст");
	cache_delete(result);
	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}
	if(type == 1) Dialog(playerid, DIALOG_DONATE_BUY, DIALOG_STYLE_TABLIST_HEADERS,"{FFFF00}Покупка эксклюзивного транспорта",string_dialog,"Купить", "Назад", page_1, page_2);
	if(type == 4) Dialog(playerid, DIALOG_DONATE_BUY, DIALOG_STYLE_TABLIST_HEADERS,"{FFFF00}Покупка дополнительных слотов",string_dialog,"Купить", "Назад", page_1, page_2);
	if(type == 5) Dialog(playerid, DIALOG_DONATE_BUY, DIALOG_STYLE_TABLIST_HEADERS,"{FFFF00}Покупка предметов",string_dialog,"Купить", "Назад", page_1, page_2);
	return true;
}

stock CreateDonateItems(playerid)
{
	string_dialog[0] = EOS;
	if(g_donate_create[playerid][DC_TYPE] == 1) format(string_dialog, sizeof string_dialog, "Транспорт");
	if(g_donate_create[playerid][DC_TYPE] == 2) format(string_dialog, sizeof string_dialog, "Одежда");
	if(g_donate_create[playerid][DC_TYPE] == 3) format(string_dialog, sizeof string_dialog, "Аксессуар");
	if(g_donate_create[playerid][DC_TYPE] == 5) format(string_dialog, sizeof string_dialog, "Предмет");
	format
	(
		string_dialog, sizeof string_dialog, 
		"{FFFFFF}Информация о предмете:\n\n\
		{FFFFFF}Тип: {"SERVER_COLOR"}%s\n\
		{FFFFFF}Название: {"SERVER_COLOR"}%s\n\
		{FFFFFF}Индификатор: {"SERVER_COLOR"}%d\n\
		{FFFFFF}Цена: {"SERVER_COLOR"}%d "SERVER_RUB"\n\
		{FFFFFF}Количество: {"SERVER_COLOR"}%d шт.\n\
		{FFFFFF}Индекс: {"SERVER_COLOR"}%d\n\n\
		{FFFFFF}Вы действительно хотите создать данный предмет в "SERVER_RUB" меню?",
		string_dialog,
		g_donate_create[playerid][DC_NAME], 
		g_donate_create[playerid][DC_ITEM_ID],
		g_donate_create[playerid][DC_PRICE],
		g_donate_create[playerid][DC_COUNT],
		g_donate_create[playerid][DC_INDX]
	);
	Dialog(playerid, DIALOG_CREATE_DONATE_FINISH, DIALOG_STYLE_MSGBOX, "{FFCD00}Создание предмета в меню "SERVER_RUB"", string_dialog, "Создать", "Назад");
	return true;
}

enum E_BLACKJACK_TABLET_STRUCT
{
	Float: BJT_ACTOR_POS[4],
	Float: BJT_TABLET_POS[3]
}

new g_blackjack_tablet[6][E_BLACKJACK_TABLET_STRUCT] = 
{
	{{202.2909, -311.5019, 1011.0156, 261.1411}, {203.0826, -311.5590, 1011.7958}},
	{{202.4330, -316.4642, 1011.0156, 244.9081}, {203.1743, -316.7673, 1011.7958}},
	{{200.4600, -306.5779, 1011.0156, 71.19670}, {199.7251, -306.3018, 1011.7958}},
	{{200.1114, -311.7568, 1011.0156, 87.28130}, {199.3137, -311.7275, 1011.7958}},
	{{202.7577, -306.4828, 1011.0156, 281.9049}, {203.5401, -306.3388, 1011.7958}},
	{{200.2847, -316.8316, 1011.0156, 101.7575}, {199.5047, -316.9757, 1011.7958}}
};

stock CreateCasinoBlackJack()
{
	for(new i; i < sizeof g_blackjack_tablet; i++)
	{
		new casino_actor_1 = CreateActor(171, g_blackjack_tablet[i][BJT_ACTOR_POS][0],g_blackjack_tablet[i][BJT_ACTOR_POS][1],g_blackjack_tablet[i][BJT_ACTOR_POS][2],g_blackjack_tablet[i][BJT_ACTOR_POS][3]);
		SetActorVirtualWorld(casino_actor_1, 273);
		new casino_actor_2 = CreateActor(171, g_blackjack_tablet[i][BJT_ACTOR_POS][0],g_blackjack_tablet[i][BJT_ACTOR_POS][1],g_blackjack_tablet[i][BJT_ACTOR_POS][2],g_blackjack_tablet[i][BJT_ACTOR_POS][3]);
		SetActorVirtualWorld(casino_actor_2, 274);
		CreateDynamic3DTextLabel("{F6D900}BlackJack \n{FFFFFF}Начните играть", 0xFFFFFFFF, g_blackjack_tablet[i][BJT_TABLET_POS][0],g_blackjack_tablet[i][BJT_TABLET_POS][1],g_blackjack_tablet[i][BJT_TABLET_POS][2], 5.0);
	}
}

#define MAX_CARDS 3
enum E_BLACKJACK_STRUCT
{
	BJ_BET,
	BJ_STATUS,
	BJ_TIMER,
	BJ_T_CARD_1[MAX_CARDS],
	BJ_E_CARD_1[MAX_CARDS],
	BJ_T_CARD_2[MAX_CARDS],
	BJ_E_CARD_2[MAX_CARDS]
}

new g_blackjack[MAX_PLAYERS][E_BLACKJACK_STRUCT];
new g_blackjack_type_card[5][7] = {"bubna", "cherva", "chrest", "pika", "stub"};
new g_blackjack_event_card[15][6] = {"10", "2", "3", "4", "5", "6", "7", "8", "9", "ace", "jack", "joker", "king", "queen", "stub"};
stock OpenCasinoBlackJack(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.0826, -311.5590, 1011.7958))
		SetPlayerCameraPos(playerid, 204.3899, -311.6614, 1012.5156),
		SetPlayerCameraLookAt(playerid, 203.0826, -311.5590, 1011.1958);
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.1743, -316.7673, 1011.7958))
		SetPlayerCameraPos(playerid, 204.3045, -317.4069, 1012.5156),
		SetPlayerCameraLookAt(playerid, 203.1743, -316.7673, 1011.1958);
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 199.7251, -306.3018, 1011.7958))
		SetPlayerCameraPos(playerid, 198.4963, -305.8195, 1012.5156),
		SetPlayerCameraLookAt(playerid, 199.7251, -306.3018, 1011.1958);
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 199.3137, -311.7275, 1011.7958))
		SetPlayerCameraPos(playerid, 198.0064, -311.7337, 1012.5156),
		SetPlayerCameraLookAt(playerid, 199.3137, -311.7275, 1011.1958);
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.5401, -306.3388, 1011.7958))
		SetPlayerCameraPos(playerid, 204.8314, -306.1266, 1012.5156),
		SetPlayerCameraLookAt(playerid, 203.5401, -306.3388, 1011.1958);
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 199.5047, -316.9757, 1011.7958))
		SetPlayerCameraPos(playerid, 198.2032, -317.0863, 1012.5156),
		SetPlayerCameraLookAt(playerid, 199.5047, -316.9757, 1011.1958);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[10000,50000,100000,300000,\"600000\"], 20, %d]", GetIteam(playerid, 293));
	BitStream_2(playerid, s_CefInterface, t_CefShow, "CasinoBlackjack", STRING_GLOBAL);
	return true;
}

public: OnBlackJackBetConfirm(playerid, bet)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;
	if(bet < 10000 && bet > 600000)
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('Ставка от 10 до 600000 фишек')");
	if(GetIteam(playerid, 293) < bet)
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('Недостаточно фишек')");
	GiveIteam(playerid, 293, 0, bet, 0);
	g_blackjack[playerid][BJ_STATUS] = 1;
	g_blackjack[playerid][BJ_BET] = bet;
	g_blackjack[playerid][BJ_T_CARD_1][0] = random(3);
	g_blackjack[playerid][BJ_E_CARD_1][0] = random(13);
	g_blackjack[playerid][BJ_T_CARD_1][1] = random(3);
	g_blackjack[playerid][BJ_E_CARD_1][1] = random(13);
	g_blackjack[playerid][BJ_T_CARD_2][0] = random(3);
	g_blackjack[playerid][BJ_E_CARD_2][0] = random(13);
	g_blackjack[playerid][BJ_T_CARD_2][1] = random(3);
	g_blackjack[playerid][BJ_E_CARD_2][1] = random(13);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').start('[[0,\"%s\",\"%s\",0],[0,\"%s\",\"%s\",0]]', '[%d]', 0, %d)", 
	g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_1][0]],
	g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_1][0]],
	g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_1][1]],
	g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_1][1]],
	BlackJack_CountingCards(playerid, 0),
	g_blackjack[playerid][BJ_BET]
	);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').parseOpponent(0, 0, '[[\"%s\",\"%s\",0],[\"stub\",\"stub\",0]]')", 
	g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_2][0]],
	g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_2][0]]
	);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	return true;
}

public: OnBlackJackStop(playerid)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;
	g_blackjack[playerid][BJ_STATUS] = 4;
	if(BlackJack_CountingCards(playerid, 1) < 17)
		BlackJack_AddCards(playerid, 1);
	else
	{
		STRING_GLOBAL[0] = EOS;
		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_2][i] == -1) continue;
			new query[48];
			format(query, sizeof query, "[\"%s\",\"%s\",0],", g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_2][i]], g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_2][i]]);
			strcat(STRING_GLOBAL, query);
		}
		strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').parseOpponent(%d, %d, '[%s]')", BlackJack_CountingCards(playerid, 1), g_blackjack[playerid][BJ_BET], STRING_GLOBAL);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
	if(BlackJack_CountingCards(playerid, 1) > 21)
	{
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setGameOverStatus(1, 2)");
		new bet = g_blackjack[playerid][BJ_BET] * 2;
		GiveIteam(playerid, 293, 1, (bet * 90) / 100, 0);
		g_blackjack[playerid][BJ_TIMER] = 4;
		return true;
	}
	if(BlackJack_CountingCards(playerid, 1) > BlackJack_CountingCards(playerid, 0)) 
	{
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setGameOverStatus(2, 3)");
		g_blackjack[playerid][BJ_TIMER] = 4;
		AddBusinessProfit(playerid, GetPlayerInBiz(playerid), g_blackjack[playerid][BJ_BET] * 25, 1);
		return true;
	}
	if(BlackJack_CountingCards(playerid, 1) < BlackJack_CountingCards(playerid, 0))
	{
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setGameOverStatus(1, 2)");
		new bet = g_blackjack[playerid][BJ_BET] * 2;
		GiveIteam(playerid, 293, 1, (bet * 90) / 100, 0);
		g_blackjack[playerid][BJ_TIMER] = 4;
		return true;
	}
	if(BlackJack_CountingCards(playerid, 1) == BlackJack_CountingCards(playerid, 0))
	{
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setGameOverStatus(3, 0)");
		g_blackjack[playerid][BJ_TIMER] = 4;
		GiveIteam(playerid, 293, 1, g_blackjack[playerid][BJ_BET], 0);
	}
	return true;
}

public: OnBlackJackSplit(playerid)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;
	if(g_blackjack[playerid][BJ_STATUS] == 2)
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('После удвоения нельзя разделить карты')");
	if(g_blackjack[playerid][BJ_STATUS] == 3)
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('После добавления нельзя разделить карты')");
	return true;
}

public: OnBlackJackDouble(playerid)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;
	if(g_blackjack[playerid][BJ_STATUS] == 2)
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('Вы уже удвоили ставку')");
	if(g_blackjack[playerid][BJ_STATUS] == 3)
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('Была добавлена карта')");
	if(GetIteam(playerid, 293) < g_blackjack[playerid][BJ_BET])
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('Недостаточно фишек')");
	GiveIteam(playerid, 293, 0, g_blackjack[playerid][BJ_BET], 0);
	g_blackjack[playerid][BJ_BET] = g_blackjack[playerid][BJ_BET] * 2;
	g_blackjack[playerid][BJ_STATUS] = 2;
	BlackJack_AddCards(playerid, 0);
	return true;
}

public: OnBlackJackPlusCard(playerid)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;
	if(g_blackjack[playerid][BJ_STATUS] == 2)
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('Ставка была удвоена')");
	if(g_blackjack[playerid][BJ_STATUS] == 3)
		return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setNotification('Вы уже добавили карту')");
	g_blackjack[playerid][BJ_STATUS] = 3;
	BlackJack_AddCards(playerid, 0);
	return true;
}

public: OnBlackJackClose(playerid)
{
	BlackJack_ClearInfo(playerid);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "CasinoBlackjack");
	SetCameraBehindPlayer(playerid);
	return true;
}

stock BlackJack_ClearInfo(playerid)
{
	g_blackjack[playerid][BJ_BET] = 0;
	g_blackjack[playerid][BJ_STATUS] = 0;
	g_blackjack[playerid][BJ_TIMER] = 0;
	for(new i; i < MAX_CARDS; i++)
	{
		g_blackjack[playerid][BJ_T_CARD_1][i] = -1;
		g_blackjack[playerid][BJ_T_CARD_2][i] = -1;
		g_blackjack[playerid][BJ_E_CARD_1][i] = -1;
		g_blackjack[playerid][BJ_E_CARD_2][i] = -1;
	}
	return true;
}

stock BlackJack_AddCards(playerid, type)
{
	if(type == 0)
	{
		g_blackjack[playerid][BJ_E_CARD_1][2] = random(13);
		g_blackjack[playerid][BJ_T_CARD_1][2] = random(3);
		STRING_GLOBAL[0] = EOS;
		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_1][i] == -1) continue;
			new query[48];
			format(query, sizeof query, "[0,\"%s\",\"%s\",0],", g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_1][i]], g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_1][i]]);
			strcat(STRING_GLOBAL, query);
		}
		strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').parseMyCards('[%s]', '[%d]', 0, %d)", STRING_GLOBAL, BlackJack_CountingCards(playerid, 0), g_blackjack[playerid][BJ_BET]);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		if(BlackJack_CountingCards(playerid, 0) > 21) 
		{
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoBlackjack').setGameOverStatus(2, 1)");
			g_blackjack[playerid][BJ_TIMER] = 4;
			g_blackjack[playerid][BJ_STATUS] = 4;
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), g_blackjack[playerid][BJ_BET] * 25, 1);
		}
	}
	else
	{
		g_blackjack[playerid][BJ_E_CARD_2][2] = random(13);
		g_blackjack[playerid][BJ_T_CARD_2][2] = random(3);
		STRING_GLOBAL[0] = EOS;
		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_2][i] == -1) continue;
			new query[48];
			format(query, sizeof query, "[\"%s\",\"%s\",0],", g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_2][i]], g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_2][i]]);
			strcat(STRING_GLOBAL, query);
		}
		strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').parseOpponent(%d, %d, '[%s]')", BlackJack_CountingCards(playerid, 1), g_blackjack[playerid][BJ_BET], STRING_GLOBAL);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
	return 1;
}

stock BlackJack_CountingCards(playerid, type)
{
	new count;
	if(type == 0)
	{
		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_1][i] == -1) continue;
			if(g_blackjack[playerid][BJ_E_CARD_1][i] == 0) count = count + 10;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 1) count = count + 2;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 2) count = count + 3;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 3) count = count + 4;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 4) count = count + 5;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 5) count = count + 6;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 6) count = count + 7;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 7) count = count + 8;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 8) count = count + 9;
			else count = count + 10;
		}
	}
	else 
	{
		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_2][i] == -1) continue;
			if(g_blackjack[playerid][BJ_E_CARD_2][i] == 0) count = count + 10;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 1) count = count + 2;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 2) count = count + 3;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 3) count = count + 4;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 4) count = count + 5;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 5) count = count + 6;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 6) count = count + 7;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 7) count = count + 8;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 8) count = count + 9;
			else count = count + 10;
		}
	}
	return count;
}

stock BlackJack_Timer(playerid)
{
	if(g_blackjack[playerid][BJ_TIMER] > 0)
	{
		g_blackjack[playerid][BJ_TIMER]--;
		if(g_blackjack[playerid][BJ_TIMER] == 0)
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').stopGame(20, %d)", GetIteam(playerid, 293));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
			BlackJack_ClearInfo(playerid);
		}
	}
}

public OnGameModeExit()
{
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		SaveFamilyCar(i);
		SaveRentCar(i);
	}
	KillTimer(fortune_timer);
	KillTimer(dtimer);
	KillTimer(atimer);
	SaveRepository();
	mysql_close(mysql);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);
    if(!IsPlayerLogged(playerid)) return false;
	if(IsPlayerLogged(playerid))
	{
		SetPlayerSpawnInit(playerid);
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);
    if(!IsPlayerLogged(playerid)) return false;
	if(!IsPlayerLogged(playerid))
	{
		new a_state = GetPlayerData(playerid, P_ACCOUNT_STATE);
		if(a_state != ACCOUNT_STATE_REG_SKIN)
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Для игры на сервере Вы должны %s", a_state == ACCOUNT_STATE_REGISTER ? ("пройти регистрацию") : ("авторизироваться"));
			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF6600}Ошибка",
				fmt_str,
				"Закрыть", ""
			);
			Kick:(playerid);
			SendClientMessage(playerid, 0xFF6600FF, fmt_str[8]);
		}
	}
	else if(IsPlayerLogged(playerid))
	{
		SetPlayerSpawnInit(playerid);
		SpawnPlayer(playerid);
	}
	return 1;
}

forward CheckProxy(playerid, response_code, data[]);
public CheckProxy(playerid, response_code, data[])
{
    new ip[16];
    GetPlayerIp(playerid, ip, sizeof(ip));
    if(strcmp(ip, "127.0.0.1", true) == 0) return 1;
    if(response_code == 200) {
        if(data[0] == 'Y') {
            printf("Игрок с ID %d подключился через прокси: %s", playerid, ip);
            SendClientMessage(playerid, 0xFF0000FF, "Отключи VPN.");
            Kick(playerid);
            return 1;
        }
    }
    return 1;
}
/*
public: OwnerConnectInformer(playerid)
{
	new playerName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playerName, sizeof(playerName));
    if(strcmp(playerName, OWNER_NAME1, true) == 0 || strcmp(playerName, OWNER_NAME2, true) == 0)
    {
        new message[128];
        format(message, sizeof(message), "{F81414}Владелец проекта {FFFFFF}%s {FFAF00}присоединилс(я/ась) к игре", playerName);
        SendClientMessageToAll(COLOR_BLUE, message);
    }
}
*/
public OnPlayerConnect(playerid)
{
	SetPlayerLogged(playerid, false);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.playSound('"MUSIC_SOUND"', 0, 10311, 0.35)");
   	new str[144];
	new p[MAX_PLAYER_NAME];
	GetPlayerName(playerid,p,23);
	SCM(playerid,-1,str);		
	//OwnerConnectInformer(playerid);
	playerCigarettes[playerid] = 0;
	Iter_Clear(VoicePlayers[playerid]);
	SetPVarInt(playerid, "Phone_access", 0);
	g_player_status_fish[playerid] = 0;
	g_player_fishing_zone[playerid] = 0;
	g_player_type_fish_rod[playerid] = 0;
	g_player_type_fish[playerid] = 0;
	g_player_fish_timer[playerid] = 0;
	BlackJack_ClearInfo(playerid);
	vehicle_house_status[playerid] = 0;
	vehicle_house_id[playerid] = 0;
	containers_id[playerid] = -1;
	containers_bet[playerid] = 0;
	count_cef_rpc[playerid] = 0;
	active_acs_id[playerid] = -1;
	active_acs[playerid] = INVALID_VEHICLE_ID;
	SetPlayerData(playerid, P_TARGET_ID, INVALID_PLAYER_ID);
	g_player_mine_cp[playerid] = 0;
	g_player_mine_status[playerid] = 0;
	g_player_mine_object[playerid] = INVALID_OBJECT_ID;
	g_player_mine_sphere[playerid] = 0;
	g_player_mine_rack[playerid] = 0;
	g_player_mine_ore[playerid] = -1;
	SetPVarInt(playerid, "lli", INVALID_VEHICLE_ID);
	gPlayerTuningMenu[playerid] = 0;
	inventory_load_status[playerid] = 0;
	if(g_player[playerid][P_FAM_LABEL] != Text3D: -1)
	{
		DestroyDynamic3DTextLabel(g_player[playerid][P_FAM_LABEL]);
		g_player[playerid][P_FAM_LABEL] = Text3D: -1;
    }
	wosh_status[playerid] = 0;
	g_svalka_playerid_svalka_id_car[playerid] = -1;
	g_svalka_playerid_svalka_item[playerid] = -1;
	g_player_diski_id[playerid] = -1;
	g_player_diski_type[playerid] = 0;
    scores[playerid] = 0;
    chets[playerid] = 1;
    scplay[playerid] = 1;
    new hour, minute;
    PlayerIsInkasator[playerid] = 0;
	g_player_auth_inputs[playerid] = 0;
	gettime(hour, minute);
	new ip[16], stringcheck[128];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(stringcheck, sizeof(stringcheck), "proxy.mind-media.com/block/proxycheck.php?ip=%s", ip);
	HTTP(playerid, HTTP_GET, stringcheck, "", "CheckProxy");	
	RouletteStarted[playerid] = 0;//fix ruletki
	SetPVarInt(playerid, "mechanic", 0);
	SetPVarInt(playerid, "Login", 0);
	SetPVarInt(playerid, "Login_1", 0);
	//==============================================================================
	RemoveBuildingForPlayer(playerid, 2215, 2453.8201, -1405.9500, 75.0750, 0.25);
    RemoveBuildingForPlayer(playerid, 2217, 2526.5701, -1455.0500, 61.2412, 0.25);
    RemoveBuildingForPlayer(playerid, 2219, 2477.0400, -1459.2000, 59.6698, 0.25);
    RemoveBuildingForPlayer(playerid, 2226, 2453.8201, -1405.9500, 75.0750, 0.25);
    RemoveBuildingForPlayer(playerid, 2228, 2526.5701, -1455.0500, 61.2412, 0.25);
    RemoveBuildingForPlayer(playerid, 2230, 2477.0400, -1459.2000, 59.6698, 0.25);
    RemoveBuildingForPlayer(playerid, 1245, 2474.6699, -1430.9900, 80.7800, 0.25);
    RemoveBuildingForPlayer(playerid, 5447, 753.9680, -2649.0300, 36.0030, 0.25);
    RemoveBuildingForPlayer(playerid, 5448, 753.9680, -2649.0300, 36.0030, 0.25);
    RemoveBuildingForPlayer(playerid, 5449, 753.9680, -2649.0300, 36.0030, 0.25);
    RemoveBuildingForPlayer(playerid, 5452, 753.9680, -2649.0300, 36.0030, 0.25);
	RemoveBuildingForPlayer(playerid, 4031, -86.0283, 960.4030, 25.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 4031, -141.4970, 987.1750, 25.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2300.4299, -1684.8000, 20.9500, 0.25);
	RemoveBuildingForPlayer(playerid, 1484, 0.000000, 0.000000, 0.000000, 10.000000);
    RemoveBuildingForPlayer(playerid, 1485, 0.000000, 0.000000, 0.000000, 10.000000); 
    RemoveBuildingForPlayer(playerid, 1486, 0.000000, 0.000000, 0.000000, 10.000000);
	RemoveBuildingForPlayer(playerid, 4342, 413.1420, 752.0520, 17.8500, 0.25);
	RemoveBuildingForPlayer(playerid, 4356, 413.1420, 752.0520, 17.8500, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 134.3870, 607.9220, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 142.3250, 628.6840, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 150.1590, 648.9010, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 156.4950, 665.2200, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 162.6760, 680.4710, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 168.8510, 696.3920, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 176.5950, 716.2870, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4447, 362.0260, 812.1090, 12.5400, 0.25);
	RemoveBuildingForPlayer(playerid, 4443, 133.8530, 641.3940, 12.9200, 0.25);
	RemoveBuildingForPlayer(playerid, 4431, -102.6940, 954.9450, 12.9900, 0.25);
	RemoveBuildingForPlayer(playerid, 4432, 135.4660, 652.2210, 12.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 4432, -116.5360, 955.0590, 12.9900, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2137.3494, 1387.6998, 22.6629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2120.6721, 1362.4197, 25.5629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2118.6516, 1371.9425, 25.5629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2130.1104, 1369.4949, 25.3629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2137.8013, 1373.5449, 22.2629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2124.0774, 1378.1780, 25.6629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2128.9607, 1389.7159, 25.4629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2117.1870, 1384.8115, 25.4629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2131.7351, 1380.8224, 24.6629, 0.25);
	//==============================================================================
	gettime(hour, minute);
	SetPlayerTime(playerid, hour, minute);
	SetPlayerColor(playerid, 0x999999FF);
	SetPlayerVirtualWorld(playerid, playerid + 0xFF);
	ClearPlayerInfo(playerid);
	RPPoint[playerid] = 0;
	GetPlayerName(playerid, g_player[playerid][P_NAME], 20 + 1);
	GetPlayerIp(playerid, g_player[playerid][P_IP], 16);
	new fmt_text[148];
	GetPlayerVersion(playerid, fmt_text, sizeof fmt_text);
	new connect_ip[32+1];
	GetPlayerIp(playerid,connect_ip,32);
	new num_ip = GetNumberOfPlayersOnThisIP(connect_ip);
	if(num_ip > MAX_IP)
	{
		SCM(playerid, 0xCECECEFF, "На наш сервер нельзя заходить больше чем на 3 аккаунта одновременно с одного ip");
		Kick(playerid);
		return 1;
	}
	if(strcmp(connect_ip, "127.0.0.1", false))
	{
		format(fmt_text, sizeof fmt_text, "Игрок %s[%d] подключился к серверу.", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF, 1);
	}
	GameText(playerid, "~y~Подключение к серверу...", 3500, 1);
	ShowGangZonesForPlayer(playerid);
    #if defined _GANG_ZONES_INC
	ShowForPlayerGangZonesCR(playerid);
	#endif
	InitFly(playerid);
    if(Test_server == 1)
	{
		new query[144],
		Cache: result,
		rows;
		mysql_format(mysql, query, sizeof query, "SELECT * FROM test_user WHERE name='%s'", g_player[playerid][P_NAME]);
		result = mysql_query(mysql, query, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(!rows)
		{
			SendClientMessage(playerid, -1, "На данный момент севрер закрыт подробнее вы можите узнать тут: t.me/xrine_crmp");
			Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "ВНИМАНИЕ СЕРВЕР ЗАКРЫТ!", "На данный момент севрер закрыт\nПодробнее вы можите узнать в нашем telegran Канале:\n Telegram канал: t.me/xrine_crmp", "Печаль", "");
			SetTimerEx("KickPlayerAfterDialog", 500, false, "i", playerid);
			return 1;
		}
	}
	SetPVarInt(playerid, "ferma_id", 0);
	callcmd::unrentmoto(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(GetPlayerData(playerid, P_RENT_MOPED) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_RENT_MOPED));
		SetPlayerData(playerid, P_RENT_MOPED, INVALID_VEHICLE_ID);
	}
    if(g_elite_race[E_STATUS] == 2)
    {
		for(new i; i < 2; i++)
		{
			if(g_elite_race[E_PLAYERS_ID][i] == playerid)
			{
				for(new a; a < 2; a++)
				{
					g_elite_race[E_PLAYERS_CP][a] = -1;
					DestroyVehicle(g_elite_race[E_PLAYERS_VEHICLES][a]);
					g_elite_race[E_PLAYERS_VEHICLES][a] = -1;
					DisablePlayerRaceCheckpoint(g_elite_race[E_PLAYERS_ID][a]);
					g_elite_race[E_STATUS] = 1;
					SetPlayerVirtualWorld(g_elite_race[E_PLAYERS_ID][a],0);
					g_elite_race[E_PLAYERS_ID][a] = -1;
				}   
				SCMALL(COLOR_ORANGE, "Один из игроков вышел с игры, игра была прекращена"); 
				g_elite_race[E_START_RACE] = 0;
				break;
			}    
		}	
    }    
	Notary_HidePlayerPanel(playerid);
	OnTradeItemsCancel(playerid);
	UpdateWeapons(playerid);
	playerCigarettes[playerid] = 0;
	SetPVarInt(playerid, "Phone_access", 0);
	g_player_trailer_status[playerid] = 0;
	g_player_trailer_type[playerid] = 0;
	DestroyVehicle(g_player_trailer[playerid]);
	g_player_trailer[playerid] = INVALID_VEHICLE_ID;
	if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 1) SetVehicleToRespawn(GetPlayerData(playerid, P_JOB_CAR));
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
    if (g_Repairing[playerid]) 
	{
        g_Repairing[playerid] = false;
        KillTimer(timerID[playerid]);
    }	
	if(GetPlayerData(playerid, P_ORDER) != -1) 
	{
		SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);
		SetPlayerData(playerid, P_ORDER, -1);
	}
	DestroyPlayerPromo(playerid);
	DestroyPlayerItems(playerid);
	SetPlayerStatusDiski(playerid);
	containers_id[playerid] = -1;
	containers_bet[playerid] = 0;
	g_player_auth_inputs[playerid] = 0;
	g_svalka_playerid_bet[playerid][0] = 0;
	g_svalka_playerid_bet[playerid][1] = 0;
    g_svalka_playerid_svalka_id_car[playerid] = -1;
	g_svalka_playerid_svalka_item[playerid] = -1;
	if(fortune_wheel_player == playerid)
	{
		fortune_wheel_active = false;
	}
	if(GetPVarInt(playerid, "sto_id_exit_1") != 0 && GetPVarInt(playerid, "sto_id_exit_2") != 0)
	{
		UpdateStoGarage(GetPVarInt(playerid, "sto_id_exit_1"), GetPVarInt(playerid, "sto_id_exit_2"), 0);
		SetPVarInt(playerid, "sto_id_exit_1", 0);
		SetPVarInt(playerid, "sto_id_exit_2", 0);
	}
	open_auction[playerid] = 0;
	UpdatePlayerDatabaseInt(playerid, "last_exit", gettime());
	OwnerJoinDiceGame[playerid] = 0;
	DiceTrowPlayer[playerid][0] = 0;
	DiceTrowPlayer[playerid][1] = 0;
	DiceTable[playerid] = 0;
	admin_logged[playerid] = false;
	status_authorization[playerid] = 0;
	PositionChip[playerid] = -1;
	RouletteTable[playerid] = 0;
	RouletteStatus[playerid] = 0;
	StatusChip[playerid] = 0;
	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;
	SetPVarInt(playerid,"black_market_open",0);
	DeletePVar(playerid, "black_market_open");
    if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
	}
	if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
	{
	    new index = GetVehicleData(GetPlayerData(playerid, P_CARSH_CAR), V_ACTION_ID);
	    new typeauto[24];
	    KillTimer(timecarsharingprice[playerid]);
		GivePlayerMoneyEx(playerid, -GetCarshCarData(index, OC_PRICE) * pricecarsharing[playerid], "аренда авто", true, true);
	    if(GetCarshCarData(index, OC_VINIL) == 0)
	    {
	        format(typeauto, 7, "Бип Drive");
	    }
	    if(GetCarshCarData(index, OC_VINIL) == 1)
	    {
	        format(typeauto, 7, "Кар Шеринг");
	    }
	    if(GetCarshCarData(index, OC_VINIL) == 2)
	    {
	        format(typeauto, 7, "Crown Car");
	    }
	    if(GetCarshCarData(index, OC_VINIL) == 3)
	    {
	        format(typeauto, 7, "WOW Drive");
	    }
	    SetCarshCarData(index, OC_RENT_OWNER, -1);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{20B2AA}Аренда авто '%s' \n\n Транспорт {ffffff}%s (№%d) \n {20B2AA}Статус: {ffffff}свободен\n{20B2AA}Цена за минуту: {ffffff}%d рублей\n\n{20B2AA}Для {ffffff}начала аредны {20B2AA}воспользуйтесь\n приложением в {ffffff}телефоне", typeauto,GetVehicleInfo(GetCarshCarData(index, OC_MODEL_ID), VI_NAME), GetCarshCarData(index, OC_MODEL_ID), GetCarshCarData(index, OC_PRICE));
	   	CreateVehicleLabel(GetPlayerData(playerid, P_CARSH_CAR), STRING_GLOBAL, 0xFFFFFFFF, 0.0, 0.0, 0.5, 5.0);
	    SetPlayerData(playerid, P_CARSH_CAR, INVALID_VEHICLE_ID);
	}
    if(GetPVarInt(playerid,"Metro_start") == 1)
	{
		metro_status = 0;
		metro_user -= 1;
		DeletePVar(playerid, "Metro_work");
		DeletePVar(playerid, "Metro_start");
		DestroyVehicle(metro_train[playerid]);
		DisablePlayerCheckpoint(playerid);
		metro_train[playerid] = INVALID_VEHICLE_ID;
		GivePlayerMoneyEx(playerid, metro_zarplata[playerid], "Работа метро", true, true);
		metro_zarplata[playerid] = -0;
	}
	if(spike_objects[playerid] != 0)
    {
        DestroyObject(spike_objects[playerid]);
        DestroyDynamicArea(spike_areas[playerid]);
    }
    if(radar_objects[playerid] != 0)
    {
        DestroyObject(radar_objects[playerid]);
        DestroyDynamicArea(radar_areas[playerid]);
    }
	if(GetPVarInt(playerid,"Metro_work") == 1)
	{
		metro_user -= 1;
		DisablePlayerRaceCheckpoint(playerid);
		DestroyVehicle(metro_train[playerid]);
		GivePlayerMoneyEx(playerid, metro_zarplata[playerid], "Работа метро", true, true);
		metro_train[playerid] = INVALID_VEHICLE_ID;
		metro_zarplata[playerid] = -0;
		KillTimer(metro_taimer[playerid][0]);
		DeletePVar(playerid, "Metro_work");
	}
	if(GetPVarInt(playerid, "LoginPlayer") != 1)
	{
		new buffer = GetPlayerLastVehicle(playerid);
		new Float:X, Float:Y, Float:Z;
	  	GetPlayerPos(playerid, X, Y, Z);
	  	SetPVarInt(playerid, "ferma_id", 0);
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
		    if(!IsValidVehicle(i)) continue;
		    if(GetVehicleData(i, V_OWRENT) == 0) continue;
		    if(GetVehicleData(i, V_OWRENT) != GetPlayerNameEx(playerid)) continue;
	     	SetVehicleData(i, V_OWRENT, 0);
		    SetVehicleToRespawn(i);
		}
		for(new is = 1; is < MAX_VEHICLES; is++)
		{
		    if(!IsValidVehicle(is)) continue;
	 		else if(vodila[is] != playerid || vodila[is] == -1) continue;
	 		else if(GetVehicleData(is, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_FERMA_CAR) continue;
	 		else if(IsVehicleOccupied(is)) continue;
			vodila[is] = -1;
			SetVehicleToRespawn(is);
		}	
		if(IsPlayerInJob(playerid))
		{
			buffer = GetPlayerJobCar(playerid);
			if(buffer != INVALID_VEHICLE_ID)
			{
				SetVehicleToRespawn(buffer);
			}
			if(GetPlayerData(playerid, P_ORDER) != -1)
				SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);
		}
		KillEndJobTimer(playerid);
		KillCarJobTimer(playerid);
		buffer = GetPlayerData(playerid, P_FACTORY_USE_DESK);
		SetPlayerFactoryDeskUse(playerid, buffer, false);
		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		}
		if(g_player[playerid][P_FAM_LABEL] != Text3D: -1)
		{
			DestroyDynamic3DTextLabel(g_player[playerid][P_FAM_LABEL]);
			g_player[playerid][P_FAM_LABEL] = Text3D: -1;
	    }
		if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL));
			SetPlayerData(playerid, P_ADVISOR_LABEL, Text3D: -1);
		}
		if(GetPlayerAdminEx(playerid) == 6 && IsValidDynamic3DTextLabel(GetPlayerData(playerid, ADMIN_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, ADMIN_LABEL));
			SetPlayerData(playerid, ADMIN_LABEL, Text3D: -1);
		}
		if(GetPlayerAdminEx(playerid) == 5 && IsValidDynamic3DTextLabel(GetPlayerData(playerid, GAADMIN_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, GAADMIN_LABEL));
			SetPlayerData(playerid, GAADMIN_LABEL, Text3D: -1);
		}
		for(new i = 0; i < MAX_VEHICLES; i++)
		{
		    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		    {
			    new iddx = GetVehicleData(i, V_ACTION_ID);
		        if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
		        {
		            UnloadPlayerOwnableCar(true, i);
		        }
	        }
		}
		if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(GetPlayerRentCar(playerid));
		}
		if(GetPlayerRentMop(playerid) != INVALID_VEHICLE_ID)
		{
			DestroyVehicle(GetPlayerRentMop(playerid));
		}
		new fmt_text[95];
		if(GetPlayerData(playerid, P_CUFFED) && reason != 2)
		{
			new jail_time = (GetPlayerSuspect(playerid) * 5 + 10) * 10;
			SetPlayerData(playerid, P_JAIL, jail_time);
			UpdatePlayerDatabaseInt(playerid, "jail", jail_time);
			SetPlayerData(playerid, P_SUSPECT, 0);
			UpdatePlayerDatabaseInt(playerid, "suspect", 0);
			format(fmt_text, sizeof fmt_text, "%s выходит при аресте (+10 минут заключения)", GetPlayerNameEx(playerid));
			SendClientMessageToAll(0xFF99AADD, fmt_text);
		}
		for(new idx; idx < g_advert_created; idx ++)
		{
			if(GetAdvertData(idx, A_CREATOR) != playerid) continue;
			DeleteAdvert(idx);
		}
		if(strcmp(GetPlayerIpEx(playerid), "127.0.0.1", false))
		{
			format(fmt_text, sizeof fmt_text, "Игрок %s[%d] был отключен от сервера причина: %s", GetPlayerNameEx(playerid), playerid, reason == 0 ?  "Вылет/Краш" : (reason == 1 ? "Выход" : "Кик/Бан"));
			SendMessageToAdmins(fmt_text, 0x999999FF, 1);
		}
		SavePlayerAccount(playerid);
		ClearPlayerInfo(playerid);
		UpdateSpectate(playerid, true);
	}
	else
	{
	    ClearPlayerInfo(playerid);
	}
	return 1;
}

public: SavePlayerAccount(playerid)
{
	new query[480];

	mysql_format
	(
		mysql, query, sizeof query,
		"UPDATE accounts SET last_login=%d,game_for_hour=%d,game_for_day=%d,game_for_day_prev=%d,\
		exp=%d,health=%f,hospital=%d,mute=%d,jail=%d,money='%s' WHERE id=%d LIMIT 1",
		gettime(),
		GetPlayerData(playerid, P_GAME_FOR_HOUR),
		GetPlayerData(playerid, P_GAME_FOR_DAY),
		GetPlayerData(playerid, P_GAME_FOR_DAY_PREV),
		GetPlayerData(playerid, P_EXP),
		GetPlayerData(playerid, P_HEALTH),
		GetPlayerData(playerid, P_HOSPITAL),
		GetPlayerData(playerid, P_MUTE),
		GetPlayerData(playerid, P_JAIL),
		GetPlayerMoneyEx(playerid),
		GetPlayerAccountID(playerid)
	);

	mysql_tquery(mysql, query);

	mysql_format(mysql, query,sizeof query,"\
			UPDATE accounts SET voicemute=%d,mute=%d,jail=%d,arrest=%d,rmute=%d,vmute=%d WHERE id=%d LIMIT 1",GetPlayerData(playerid,P_VOICEMUTE),GetPlayerData(playerid,P_MUTE),GetPlayerData(playerid,P_JAIL),GetPlayerData(playerid, P_ARREST),GetPlayerData(playerid, P_RMUTE),GetPlayerData(playerid, P_VMUTE),GetPlayerAccountID(playerid));
	mysql_tquery(mysql, query);
	return 1;
}

public OnIncomingRPC(playerid, rpcid, BitStream:bs)
{
	printf("[RPC LOG] Игрок %s отправил RPC с ID: %d", GetPlayerNameEx(playerid), rpcid);
	if(rpcid == 53 || rpcid == 115 || rpcid == 131 || rpcid == 97) {
        if(!IsPlayerLogged(playerid))
        {
            printf("["DETECT_ACH"] Игрок %s попытался умереть/атаковать не авторизовавшись", GetPlayerNameEx(playerid)); 
           	Kick(playerid);
        }    
    }		
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{	
	if(killerid != INVALID_PLAYER_ID) 
	{
		new hour, minute;
		gettime(hour, minute);
		new day, month, year;
		getdate(year, month, day);
		new string[144+1];
		GetPlayerName(killerid, string, MAX_PLAYER_NAME);
		format(string, sizeof(string), 
			"Вас убил ~r~%s[%d]~n~Время: ~r~%d:%d~n~Дата: ~r~%d:%d:%d.", 
				string, 
				killerid, 
				hour, minute, 
				day, month, year);
		GameText(playerid, string, 10000, 3);
	}	
	if(PlayerIsPlain[playerid] == 1)
	{
		DestroyVehicle(PlainVeh[playerid]);
		PlayerIsPlain[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
	}	
	if(GetPlayerData(playerid, P_RENT_MOPED) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_RENT_MOPED));
		SetPlayerData(playerid, P_RENT_MOPED, INVALID_VEHICLE_ID);
	}
	if(g_player_status_fish[playerid] != 0)
	{	
		g_player_status_fish[playerid] = 0;
		g_player_fishing_zone[playerid] = 0;
		g_player_type_fish_rod[playerid] = 0;
		g_player_type_fish[playerid] = 0;
		g_player_fish_timer[playerid] = 0;
		TogglePlayerControllable(playerid,true);
		SetCameraBehindPlayer(playerid);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Fishing");
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	}
	Notary_HidePlayerPanel(playerid);
	OnTradeItemsCancel(playerid);
	if(g_blackjack[playerid][BJ_STATUS] > 0)
		OnBlackJackClose(playerid);
	g_player_mine_cp[playerid] = 0;
	g_player_mine_status[playerid] = 0;
	g_player_mine_object[playerid] = INVALID_OBJECT_ID;
	g_player_mine_sphere[playerid] = 0;
	g_player_mine_rack[playerid] = 0;
	g_player_mine_ore[playerid] = -1;
	SetPVarInt(playerid, "OnPlayerDeath", 1);
	if(!IsPlayerLogged(playerid)) return Kick:(playerid, " ");
	if(killerid != INVALID_PLAYER_ID && (reason >= 0 && reason <= 38))
	{
		foreach(new i: Player)
		{
			if(!IsPlayerConnected(i)) continue;
			if(!IsPlayerLogged(i)) continue;
			if(GetPlayerAdminEx(i) < 1) continue;
			SendDeathMessageToPlayer(i, killerid, playerid, reason);
		}
	}
	g_player_trailer_status[playerid] = 0;
	g_player_trailer_type[playerid] = 0;
	DestroyVehicle(g_player_trailer[playerid]);
	g_player_trailer[playerid] = INVALID_VEHICLE_ID;
	if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 1) SetVehicleToRespawn(GetPlayerData(playerid, P_JOB_CAR));
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
	if(GetPlayerData(playerid, P_ORDER) != -1) 
	{
		SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);
		SetPlayerData(playerid, P_ORDER, -1);
	}
	SetPlayerStatusDiski(playerid);
	containers_id[playerid] = -1;
	containers_bet[playerid] = 0;
	if(GetPVarInt(playerid, "sto_id_exit_1") != 0 && GetPVarInt(playerid, "sto_id_exit_2") != 0)
	{
		UpdateStoGarage(GetPVarInt(playerid, "sto_id_exit_1"), GetPVarInt(playerid, "sto_id_exit_2"), 0);
		SetPVarInt(playerid, "sto_id_exit_1", 0);
		SetPVarInt(playerid, "sto_id_exit_2", 0);
	}
	open_auction[playerid] = 0;
	OwnerJoinDiceGame[playerid] = 0;
	DiceTrowPlayer[playerid][0] = 0;
	DiceTrowPlayer[playerid][1] = 0;
	DiceTable[playerid] = 0;
	StatusChip[playerid] = 0;
	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;
	if(killerid != INVALID_PLAYER_ID)
	{
		if(g_war[W_STATUS])
		{
			new gang_id[2];
			gang_id[0] = GetPlayerFamily(killerid);
			gang_id[1] = GetPlayerFamily(playerid);
			if(GetPlayerData(playerid,P_KILL_CAPT) == 0)
			{
				SetPlayerData(playerid,P_KILL_CAPT,1);
				if(GetPlayerFamily(killerid) == g_war[W_ATTACK_TEAM])
				{
					if(GetPlayerFamily(playerid) == g_war[W_PROTECT_TEAM])
					{
						g_war[W_ATTACKER_KILLS] += 1;
						SCM(playerid, -1, "ATTACK TEAM +1");
					}
				}
				else if(GetPlayerFamily(killerid) == g_war[W_PROTECT_TEAM])
				{
					if(GetPlayerFamily(playerid) == g_war[W_ATTACK_TEAM])
					{
						g_war[W_PROTECTOR_KILLS] += 1;
						SCM(playerid, -1, "PROTECT TEAM +1");
					}
				}
				UpdateCaptureTextDraw();
			}
		}
		if(GetPlayerData(killerid, P_SUSPECT) != 6)
		{
			AddPlayerData(killerid, P_SUSPECT, +, 1);
			SetPlayerSuspectInit(killerid);
			UpdatePlayerDatabaseInt(killerid, "suspect", GetPlayerData(killerid, P_SUSPECT));
		}
	}
    if(GetPVarInt(playerid,"Metro_start") == 1)
	{
		metro_status = 0;
		metro_user -= 1;
		DeletePVar(playerid, "Metro_work");
		DeletePVar(playerid, "Metro_start");
		DestroyVehicle(metro_train[playerid]);
		DisablePlayerCheckpoint(playerid);
		new fmt_str[130];
		format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы заработали %d руб.", metro_zarplata[playerid]);
		SendClientMessage(playerid, 0x3399FFFF, fmt_str);
		GivePlayerMoneyEx(playerid, metro_zarplata[playerid], "Работа метро", true, true);
		metro_train[playerid] = INVALID_VEHICLE_ID;
		metro_zarplata[playerid] = 0;
	}
	if(GetPVarInt(playerid,"Metro_work") == 1)
	{
		metro_user -= 1;
		DeletePVar(playerid, "Metro_work");
		DisablePlayerRaceCheckpoint(playerid);
		DestroyVehicle(metro_train[playerid]);
		new fmt_str[130];
		format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы заработали %d руб.", metro_zarplata[playerid]);
		SendClientMessage(playerid, 0x3399FFFF, fmt_str);
		GivePlayerMoneyEx(playerid, metro_zarplata[playerid], "Работа метро", true, true);
		metro_train[playerid] = INVALID_VEHICLE_ID;
		metro_zarplata[playerid] = 0;
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('Machinist')");
		KillTimer(metro_taimer[playerid][0]);
	}
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	RouletteStatus[playerid] = 0;
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	if(IsPlayerInJob(playerid)) EndPlayerJob(playerid);
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
	SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE,		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE_FLOOR,-1);
	SpeedometrHideForPlayer(playerid);
	if(noclipdata[playerid][camera_mode] == CAMERA_MODE_FLY) CancelFlyMode(playerid);
	if(killerid != INVALID_PLAYER_ID)
	{
		if(GetPlayerSuspect(playerid) && IsPlayerInPoliceTeam(killerid))
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[Всем постам] %s %s нейтрализовал преступника %s", GetPlayerJobAndRankName(killerid), GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
			SendMessageToPoliceTeam(STRING_GLOBAL, 0x3399FFFF);
			JailPlayer(playerid, GetPlayerSuspect(playerid) * 5);
			SetPlayerData(playerid, P_SUSPECT, 0);
			UpdatePlayerDatabaseInt(playerid, "suspect", 0);
			SetPlayerSuspectInit(playerid);
			SendClientMessage(playerid, 0x66CC33FF, "Вы были нейтрализованы сотрудником правоохранительных органов");
			SendClientMessage(playerid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");
		}
	}
	if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
	}
	SetPlayerJobLoadItems(playerid, 0);
	SetPlayerTempJob(playerid, TEMP_JOB_NONE);
	SetPlayerData(playerid, P_HOSPITAL, true);
	SpawnPlayer(playerid);
	SetPlayerSpawnPos(playerid);
	return 1;
}

public:UronOnPlayerFixes(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	static
	Float:damage,
	Float:health;
    GetPlayerHealth(playerid, health);
    if (issuerid != INVALID_PLAYER_ID)
    {
        switch (weaponid)
        {
            case 22: damage = 12;
            case 23: damage = 13;
            case 24: damage = 15;
            case 25: damage = 19;
            case 26: damage = 21;
            case 27: damage = 30;
            case 28: damage = 17;
            case 29: damage = 22;
            case 30: damage = 33;
            case 31: damage = 35;
            case 32: damage = 25;
            case 33: damage = 40;
            case 34: damage = 57;
            default: damage = 5;
        }
        switch (bodypart)
        {
            case 3: SetPlayerHealth(playerid, health-damage-12);
            case 4: SetPlayerHealth(playerid, health-damage-8);
            case 5: SetPlayerHealth(playerid, health-damage-5);
            case 6: SetPlayerHealth(playerid, health-damage-5);
            case 7: SetPlayerHealth(playerid, health-damage-5);
            case 8: SetPlayerHealth(playerid, health-damage-5);
            case 9: SetPlayerHealth(playerid, health-damage-26);
        }
    }
    if(issuerid != INVALID_PLAYER_ID && GetPlayerLevel(issuerid) == 3)
    {
        new Float:health_old, Float:armour_old;
        GetPlayerHealth(playerid, health_old);
        GetPlayerArmour(playerid, armour_old);
        SetPlayerHealth(playerid, health_old);
        SetPlayerArmour(playerid, armour_old);
		SCM(playerid,-1,"Игрок 3 лвл пытался вам нанести урон");
    }	
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	UronOnPlayerFixes(playerid, issuerid, Float:amount, weaponid, bodypart);
    static
        Float:damage,
        Float:health;
    GetPlayerHealth(playerid, health);
    if (issuerid != INVALID_PLAYER_ID)
    {
        switch (weaponid)
        {
            case 22: damage = 12;
            case 23: damage = 13;
            case 24: damage = 15;
            case 25: damage = 19;
            case 26: damage = 21;
            case 27: damage = 30;
            case 28: damage = 17;
            case 29: damage = 22;
            case 30: damage = 33;
            case 31: damage = 35;
            case 32: damage = 25;
            case 33: damage = 40;
            case 34: damage = 57;
            default: damage = 5;
        }
        switch (bodypart)
        {
            case 3: SetPlayerHealth(playerid, health-damage-12);
            case 4: SetPlayerHealth(playerid, health-damage-8);
            case 5: SetPlayerHealth(playerid, health-damage-5);
            case 6: SetPlayerHealth(playerid, health-damage-5);
            case 7: SetPlayerHealth(playerid, health-damage-5);
            case 8: SetPlayerHealth(playerid, health-damage-5);
            case 9: SetPlayerHealth(playerid, health-damage-26);
        }
    }
	if(GetPVarInt(playerid, "OnPlayerDeath") == 1)
	{
		SetPVarInt(playerid, "OnPlayerDeath", 0);
		SetPlayerSpawnPos(playerid);
		return 1;
	}
	if(issuerid == INVALID_PLAYER_ID) return 1;
	if(GetPVarInt(playerid, "player_in_green_zone"))
	{
		new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;
		if(!(TEAM_PPS <= GetPlayerTeamEx(issuerid)))
		{
			ClearPlayerAnim(issuerid);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("UnfreezePlayer", 2000, false, "i", playerid);
			SetPlayerHealthEx(playerid, health + amount);
			string_dialog[0] = EOS;
			format
			(
				string_dialog, sizeof string_dialog,
				"{FFFFFF}"\
				"Предупреждение:\n\n"\
				"Игрок находится в зеленой зоне '{66CC33}%s{FFFFFF}'\n"\
				"Нанесение урона запрещено. При повторных попытках Вы будете кикнуты.",
				g_green_zones[green_zone_id][GZ_NAME]
			);
			Dialog(issuerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF5533}Зеленая зона", string_dialog, "Закрыть", "");
			return 0;
		}
	}
	new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "{d6b00c}-%.2f HP по %s", amount, GetPlayerNameEx(playerid));
	SetPlayerChatBubble(issuerid, fmt_str, 0xFF5533FF, 10.5, 1500);
	format(fmt_str, sizeof fmt_str, "{e48d3c}-%.2f HP от %s", amount, GetPlayerNameEx(issuerid));
	SetPlayerChatBubble(playerid, fmt_str, 0xFF5533FF, 10.5, 1500);
	if(TEAM_PPS <= GetPlayerTeamEx(issuerid) || TEAM_FSB <= GetPlayerTeamEx(issuerid) || TEAM_FSIN <= GetPlayerTeamEx(issuerid))
	{
		if(weaponid == WEAPON_NITESTICK)
		{
			SetPlayerAnimation(playerid, 21);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("UnfreezePlayer", 15000, false, "i", playerid);
			new fmt_text[90];
			format(fmt_text, sizeof fmt_text, "Вы оглушили %s на 15 секунд", GetPlayerNameEx(playerid));
			SendClientMessage(issuerid, 0x3399FFFF, fmt_text);
			format(fmt_text, sizeof fmt_text, "%s оглушил Вас на 15 секунд", GetPlayerNameEx(issuerid));
			SendClientMessage(playerid, 0x3399FFFF, fmt_text);
			CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
		}
	}
	if(TEAM_PPS <= GetPlayerTeamEx(issuerid) || TEAM_FSB <= GetPlayerTeamEx(issuerid) || TEAM_FSIN <= GetPlayerTeamEx(issuerid))
	{
		if(weaponid == 23)
		{
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, false, 1, 1, 1, 1);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("UnfreezePlayerStun", 15000, false, "i", playerid);		
			new fmt_text[90];
			format(fmt_text, sizeof fmt_text, "Вы нейтрализовали %s на 15 секунд", GetPlayerNameEx(playerid));
			SendClientMessage(issuerid, 0x3399FFFF, fmt_text);
			format(fmt_text, sizeof fmt_text, "%s нейтрализовал Вас на 15 секунд", GetPlayerNameEx(issuerid));
			SendClientMessage(playerid, 0x3399FFFF, fmt_text);
			BitStream_1(playerid, s_CefInterface, t_CefShow, "Stun");
			CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK); 
		}
	}
	if(GetPlayerData(issuerid, P_POWER))
	{
		if(!weaponid)
		{
			new Float: armour,
				Float: taken_health;
			GetPlayerArmour(playerid, armour);
			taken_health = GetPlayerData(issuerid, P_POWER) * 0.05;
			if(armour) SetPlayerArmour(playerid, armour - taken_health);
			else SetPlayerHealthEx(playerid, health - taken_health);
		}
	}
	return 1;
}

stock SetBlockColor(blockid, color) {
	if(g_arena_created) {
		b_has_color[blockid] = color;
		SetDynamicObjectMaterial(b_objectid[blockid], 0, 8398, "luxorland", "des_dirt1", color);
	}
}

stock GetBlockColor(blockid) {
	if(g_arena_created) return b_has_color[blockid];
	return -1;
}

stock GetBlockPos(blockid, &Float:pos_x, &Float:pos_y, &Float:pos_z) {
	if(g_arena_created) GetDynamicObjectPos(b_objectid[blockid], pos_x, pos_y, pos_z);
}

stock GetRandomBlock() {
	if(g_arena_created) return random(64);
	return -1;
}

stock SetBlockUniqueID(blockid, uniqueid) {
	if(g_arena_created) b_unique_id[blockid] = uniqueid;
}

public: UnfreezePlayer(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);
	return 1;
}

public: UnfreezePlayerStun(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Stun");
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR)
	    return DestroyVehicle(vehicleid);
    foreach(new playerid: Player)
    {
		if(IsARentCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SetVehicleVirtualWorld(vehicleid, GetRentCarData(index, R_RENT_BIZ));
			if(GetRentCarData(index, R_RENT_OWNER) != -1)
			{
				SetPlayerData(GetRentCarData(index, R_RENT_OWNER), P_RENT_CAR, INVALID_VEHICLE_ID);
			}
			SetRentCarData(index, R_RENT_OWNER, -1);
		}
		if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SetVehiclePos
			(
				vehicleid,
				GetOwnableCarData(index, OC_POS_X),
				GetOwnableCarData(index, OC_POS_Y),
				GetOwnableCarData(index, OC_POS_Z)
			);
			SetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
			if(GetOwnableCarData(index, OC_GIDRA) != 0)
			{
			AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_GIDRA));
			}
			if(GetOwnableCarData(index, OC_NITRO) != 0)
			{
			AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_NITRO));
			}
			if(GetOwnableCarData(index, OC_FAM_CAR) == 0)
			{
				ChangeVehicleColor(vehicleid, GetOwnableCarData(index, OC_COLOR_1), GetOwnableCarData(index, OC_COLOR_2));
			}
			else
			{
				new color = family_color_car[GetFamilyData(GetOwnableCarData(index, OC_FAM_CAR), F_COLOR)][0];
				ChangeVehicleColor(vehicleid, color, color);
			}
		}
		SetVehicleData(vehicleid, V_LIMIT, true);
		SetVehicleParamsEx(vehicleid, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF);
		if(IsAOwnableCar(vehicleid)) SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));
		if(IsACarshCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SetVehiclePos
			(
				vehicleid,
				GetCarshCarData(index, OC_POS_X),
				GetCarshCarData(index, OC_POS_Y),
				GetCarshCarData(index, OC_POS_Z)
			);
			SetVehicleZAngle(vehicleid, GetCarshCarData(index, OC_ANGLE));
			ChangeVehicleViniljob(vehicleid, GetCarshCarData(index, OC_VINIL));
		}
		if(IsAFamilyCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SetVehiclePos
			(
				vehicleid,
				GetOwnableCarData(index, OC_POS_X),
				GetOwnableCarData(index, OC_POS_Y),
				GetOwnableCarData(index, OC_POS_Z)
			);
			if(GetOwnableCarData(index, OC_VINILTYPE) == 1) ChangeVehicleViniljob(vehicleid, GetOwnableCarData(index, OC_VINIL));
			if(GetOwnableCarData(index, OC_VINILTYPE) == 0) ChangeVehicleDefaultViniljob(vehicleid, GetOwnableCarData(index, OC_VINIL));
			if(GetOwnableCarData(index, OC_DISKI) != 0)
			{
				AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_DISKI));
			}
			if(GetOwnableCarData(index, OC_GIDRA) != 0)
			{
				AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_GIDRA));
			}
			if(GetOwnableCarData(index, OC_NITRO) != 0)
			{
				AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_NITRO));
			}
			new color = family_color_car[GetFamilyData(GetOwnableCarData(index, OC_OWNER_ID), F_COLOR)][0];
			ChangeVehicleColor(vehicleid, color, color);
			SetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
		}
		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case
				VEHICLE_ACTION_TYPE_BUS_DRIVER,
				VEHICLE_ACTION_TYPE_TAXI_DRIVER,
				VEHICLE_ACTION_TYPE_RERFECT,
				VEHICLE_ACTION_TYPE_TRUCKER_1,
				VEHICLE_ACTION_TYPE_TRUCKER_2,
				VEHICLE_ACTION_TYPE_TRUCKER_3,
				VEHICLE_ACTION_TYPE_FERMA_CAR:
			{
				SetVehicleData(vehicleid, V_ACTION_ID, VEHICLE_ACTION_ID_NONE);
				foreach(new i : Player)
				{
					if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
					if(GetPlayerJobCar(i) != vehicleid) continue;
					SetPlayerData(i, P_JOB_CAR, INVALID_VEHICLE_ID);
				}
			}
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(GetVehicleCarMarketID(vehicleid) != -1)
	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 300.0);
	return 1;
}

public OnPlayerText(playerid, text[])
{
    if(strfind(text, "http", true) != -1) return false;
    if(strfind(text, ".ru", true) != -1) return false;
    if(strfind(text, ".com", true) != -1) return false;
    if(strfind(text, ".ua", true) != -1) return false;
    if(strfind(text, "\\", true) != -1) return false;
    if(strfind(text, ":", true) != -1) return false;
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);
	if(!IsPlayerLogged(playerid)) return 0;
	if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать чат во время мута");
		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);
		return 0;
	}
	if(strlen(text) > 90) return 0;
	new caps;
	if(text[++caps])
	{
		if('A'<=text[caps]<='Z' || 'А'<=text[caps]<='Я')
		{
		    new str_query[144];
			format(str_query, sizeof(str_query), "[{ff0000}CAPS LOCK{AFAFAF}] Игрок %s[%d] написал капсом (%s) . ", GetPlayerNameEx(playerid), playerid, text);
			SendMessageToAdmins(str_query, 0x999999FF);
		}
	}
	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);
		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[Тел] %s: %s", GetPlayerNameEx(playerid), text);
		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0x999999FF, 25.0);
		return 0;
	}
	if(strcmp(text, "маму ебал", true) == 0 || strcmp(text, "Без мамы", true) == 0)
	{
		SetPlayerData(playerid, P_MUTE,  60 * 60);
		UpdatePlayerDatabaseInt(playerid, "mute", 60 * 60);
		SendClientMessage(playerid, COLOR_RED, "Ваш чат был заблокирован на 60 минут за отправку запретного слова!");
		SendClientMessage(playerid, 0xCECECEFF, "Время до окончания бана чата: {CCCC00}/time");
		return false;
	}
	if(strfind(text,"|") != -1 || strfind(text,"&") != -1 || strfind(text,"#") != -1 || strfind(text,"@") != -1 || strfind(text,"%") != -1)
	{
		SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}
	if(strcmp(text, "#", true) == 0 || strcmp(text, "|", true) == 0 || strcmp(text, "%", true) == 0 || strcmp(text, "@", true) == 0 || strcmp(text, "&", true) == 0)
	{
	    SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}
	if(!IsPlayerLogged(playerid)) return 0;
	if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать чат во время мута");
		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);
		return 0;
	}
	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);
		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[Тел] %s: %s", GetPlayerNameEx(playerid), text);
		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0x999999FF, 25.0);
		return 0;
	}
		else if(!strcmp(text, "(", true))
	{
		Action(playerid, "расстроился", _, false);
	}
		else if(!strcmp(text, "((", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.1, false, 0, 0, 0, 0, 0);
		Action(playerid, "сильно расстроился", _, false);
	}
		else if(!strcmp(text, ")", true))
	{
		Action(playerid, "улыбается", _, false);
	}
		else if(!strcmp(text, "))", true))
	{
		Action(playerid, "смеётся", _, false);
	}
		else if(!strcmp(text, "=0", true))
	{
		Action(playerid, "удивился", _, false);
	}
		else if(!strcmp(text, "xD", true))
	{
		Action(playerid, "валяется от смеха", _, false);
	}
		else SendMessageInChat(playerid, text);
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FBI_CAR || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_PPS_CAR || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FSIN_CAR)
	{
		SetFBICarStage(playerid, vehicleid);
		SetFBICarToner(playerid, vehicleid);
	}
    if(IsAOwnableCar(vehicleid))
	{
		new idxd = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetOwnableCarData(idxd,OC_OWNER_ID) == GetPlayerAccountID(playerid)) SetPVarInt(playerid, "lli", vehicleid);
	}
	if(IsACarshCar(vehicleid))
	{
	    new idx = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetPlayerAccountID(playerid) != GetCarshCarData(idx, OC_RENT_OWNER))
		{
		    if(GetCarshCarData(idx, OC_RENT_OWNER) == -1)
		    {
				ClearAnimations(playerid);
				SendClientMessage(playerid, 0xBE2D2DFF, "Для аренды данного транспорта воспользуйтесь приложением в телефоне");
		    }
		    else
		    {
		        ClearAnimations(playerid);
		        SendClientMessage(playerid, 0xBE2D2DFF, "Данный транспорт уже арендован");
		    }
		    return 1;
		}
	}
	new Float:health; GetVehicleHealth(vehicleid,health);
    if(health<=250) RepairVehicle(vehicleid);
	if(CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK))
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "При продолжении Вы будете отключены от сервера");
		ClearAnimations(playerid);
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");
		return 0;
	}
	if(!ispassenger)
	{
		new vehicle_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
		switch(vehicle_type)
		{
			case VEHICLE_ACTION_TYPE_RAFFLE_SHOP:
			{
				ClearAnimations(playerid);
			}
			case VEHICLE_ACTION_TYPE_BLACKMARKET:
			{
				ClearAnimations(playerid);
			}
		}
		if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(GetOwnableCarData(index, OC_BY_ID) != 0)
			{
				if(GetPlayerOwnableCarLast(playerid) == vehicleid)
				{
					if(GetOwnableCarData(index, OC_BY_ID) == 1)
					{
						ClearAnimations(playerid);
						SetPVarInt(playerid, "veh_id", vehicleid);
						DLGF(playerid, DIALOG_BY_EXIT, DIALOG_STYLE_MSGBOX, "{FFCD00}Авторынок", "{FFFFFF}Хотите снять с продажи и отменить аренду места {FFCD00}\'%s\'?", "Да", "Нет", GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME));
					}
					if(GetOwnableCarData(index, OC_BY_ID) == 3)
					{
						ClearAnimations(playerid);
						SetPVarInt(playerid, "veh_id", vehicleid);
						DLGF(playerid, DIALOG_BY_EXIT_NIZ, DIALOG_STYLE_MSGBOX, "{FFCD00}Авторынок", "{FFFFFF}Хотите снять с продажи и отменить аренду места {FFCD00}\'%s\'?", "Да", "Нет", GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME));
					}
					if(GetOwnableCarData(index, OC_BY_ID) == 2)
					{
						ClearAnimations(playerid);
						SetPVarInt(playerid, "veh_id", vehicleid);
						DLGF(playerid, DIALOG_BY_EXIT_SR, DIALOG_STYLE_MSGBOX, "{FFCD00}Авторынок", "{FFFFFF}Хотите снять с продажи и отменить аренду места {FFCD00}\'%s\'?", "Да", "Нет", GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME));
					}
				}
				else
				{
					ClearAnimations(playerid);
				}
			}
		}
		if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
		{
			if(!IsABike(vehicleid))
			{
				ClearAnimations(playerid);
				return SendClientMessage(playerid, 0xCECECEFF, "У вас нет водительских прав.");
			}
		}
		if(GetPlayerData(playerid, P_JOB) == 4)
		{
			if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 2)
			{
				if(GetPlayerOwnableCarLast(playerid) == vehicleid)
				{
					new modelid = GetVehicleData(vehicleid, V_MODELID);
					if(modelid == 15102 || modelid == 15103 || modelid == 15095 || modelid == 15101 || modelid == 15100 || modelid == 15099 || modelid == 15098 || modelid == 15096 || modelid == 514 || modelid == 15618 || modelid == 15665)
					{
						if(GetPlayerData(playerid, P_IN_JOB) == false) SCM(playerid, 0xd4a599FF, "Начать работу внештатного дальнобойщика можно с помощью команды /trucker");
					}
				}
			}
		}
		if(GetPlayerData(playerid, P_CUFFED))
		{
			ClearAnimations(playerid);
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			return SendClientMessage(playerid, 0x999999FF, "Вы закованы в наручники");
		}
		if(IsPlayerInVehicle(GetVehicleData(vehicleid, V_DRIVER_ID), vehicleid) && GetPlayerState(GetVehicleData(vehicleid, V_DRIVER_ID)) == PLAYER_STATE_DRIVER)
		{
			ClearAnimations(playerid);
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			return GameText(playerid, "~r~Транспорт используется", 1000, 2);
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{	
    if (vehicleid == TestDriveVehicleID[playerid]) 
	{
        DestroyVehicle(vehicleid);
        SetPlayerPos(playerid, TestDriveSpawnPos[0], TestDriveSpawnPos[1], TestDriveSpawnPos[2]);
        SetPlayerVirtualWorld(playerid, 0);
        ResetSkin(playerid);
        TestDriveVehicleID[playerid] = INVALID_VEHICLE_ID;
    } 	
    if (g_player_trash[playerid][TRASH_ID_CAR] != 0)
    {
        new vehicleID = g_player_trash[playerid][TRASH_ID_CAR];
        SetVehicleToRespawn(vehicleID);
        g_player_trash[playerid][TRASH_ID_CAR] = 0;
        g_player_trash[playerid][TRASH_ID] = 0;
        SendClientMessage(playerid, -1, "Вы завершили работу мусоровоза.");
        if (g_player_trash[playerid][TRASH_ID] != -1) 
        {
            g_trash_work[g_player_trash[playerid][TRASH_ID]][T_STATUS] = -1;
            total_trash++;
        }
    }	
  	if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER) 
	{
        if(IsPlayerInJob(playerid)) 
        {
            if(GetPlayerJobCar(playerid) == vehicleid) 
            {
				DestroyVehicleLabel(vehicleid);
				DestroyVehicle(vehicleid);
                SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID); 
                KillEndJobTimer(playerid); 
                new fmt_str[128];
                new wage = GetPlayerJobWage(playerid);
                SetPlayerData(playerid, P_JOB_WAGE, 0); 
                SendClientMessage(playerid, 0xFFFF00FF, "Рабочий день завершен!"); 
                SetPlayerData(playerid, P_IN_JOB, false); 
                format(fmt_str, sizeof fmt_str, "Заработано: {00FF00}%d руб", wage);
                SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
            }
        }
    }	
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid)
			OnPlayerEnterVehicleEx(playerid, vehicleid, !(newstate % 2));
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerLastVehicle(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
			OnPlayerExitVehicleEx(playerid, vehicleid, !(oldstate % 2));
	}
	if( newstate == PLAYER_STATE_DRIVER )
	{
		new temp;
		temp = GetVehicleModel( GetPlayerVehicleID( playerid ) );
		BE_Play_Check[ playerid ] = true;
		for(new i; i != sizeof( BE_Bad_Vehs ); i++ )
		{
			if( temp == BE_Bad_Vehs[ i ] )
			{
				BE_Play_Check[ playerid ] = false;
				break;
			}
		}
	}
	if( oldstate == PLAYER_STATE_DRIVER )
	{
		BE_Play_Check[ playerid ] = false;
	}
	UpdateSpectate(playerid, false);
	return 1;
}

public: OnPlayerEnterVehicleEx(playerid, vehicleid, is_driver)
{
	if(vehicle_house_status[playerid] == 1)
	{
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		vehicle_house_status[playerid] = 0;
	}
	SetPlayerData(playerid, P_LAST_VEHICLE, vehicleid);
	new vehicle_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
	new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
	if(is_driver)
	{
		SetVehicleData(vehicleid, V_DRIVER_ID, playerid);
		if(!GetVehicleParam(vehicleid, V_LOCK))
		{
			if(GetPlayerData(playerid, P_DRIVING_LIC) > 0)
			{
				if(!IsABike(vehicleid)) SpeedometrShowForPlayer(playerid);
				if(GetVehicleData(vehicleid, V_RENT) != -1)
				{
				    string_dialog[0] = EOS;
				    if(GetVehicleData(vehicleid, V_OWRENT) == 0 && GetVehicleData(vehicleid, V_RENT) != -1)
					{
			            format(string_dialog, sizeof(string_dialog), "{ffffff}Тип транспорта:\tПремиум класс\nНазвание:\t\t%s\nНомер модели:\t%d\nСтоимость аренды:\t{33AA33}%s руб{ffffff}\n\nЧтобы взять транспорт в аренду нажмите 'Аренда'", GetVehicleName(vehicleid), vehicleid, formatInt(GetVehicleData(vehicleid, V_RENTP)));
						Dialog(playerid, R_F, DIALOG_STYLE_MSGBOX,"{FF8800}Аренда транспорта",string_dialog,"Аренда","Отмена");
					}
				}
                switch(vehicle_type)
				{
					case VEHICLE_ACTION_TYPE_RENT_MOPED:
					{
						if(GetPlayerData(playerid, P_RENT_MOPED) != vehicleid) return RemovePlayerFromVehicle(playerid);
						SCMF(playerid, 0xe3bb42FF, "Срок аренды скутера истекает через {FFFFFF}%d мин{e3bb42}.", (GetPVarInt(playerid, "rent_moped_time") - gettime()) / 60);
					}
					case VEHICLE_ACTION_TYPE_DONATE:
					{
					    SCM(playerid, 0x42B02CFF, "{ffffff}Данный транспорт вам не доступен.");
					    RemovePlayerFromVehicle(playerid);
					}
					case VEHICLE_ACTION_TYPE_BUS_DRIVER:
					{
						if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_BUS_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{"#cGold"}Автобусный парк",
									"{"#cW"}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите взять автобус в аренду?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "Вы не водитель автобуса");
						}
					}
					case VEHICLE_ACTION_TYPE_FIRE_CAR:
					{
					    if(GetPlayerJob(playerid) != JOB_FIREMAN) return RemovePlayerFromVehicle(playerid),SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете пожарником");
					}
					case VEHICLE_ACTION_TYPE_UGONKA:
					{
						if(hacking_ugonka[playerid] != 1) return RemovePlayerFromVehicle(playerid), SCM(playerid, COLOR_RED, "Вы не взолмаи транспорт!");
					}
					case VEHICLE_ACTION_TYPE_TAXI_DRIVER: 
					{
						if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TAXI_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{"#cGold"}Таксопарк",
									"{"#cW"}Чтобы взять машину, необходимо заплатить городскому таксопарку 200 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "Вы не таксист");
						}
					}
					case VEHICLE_ACTION_TYPE_RERFECT: 
					{
					 	if(GetPVarInt(playerid,"mechanic") == 1) return SendClientMessage(playerid, 0xFF6600FF, "Вам нужно переодется");
						{
						if(GetPlayerJob(playerid) == JOB_RERFECT_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_RERFECT_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFD83D}Автопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "Вы не механик");
						}
					}
					}
					case VEHICLE_ACTION_TYPE_INKAS_CAR: 
					{
						if(GetPlayerTempJob(playerid) == TEMP_JOB_INKAS)
						{
				        	new job_car = GetPlayerJobCar(playerid);
							if(job_car != vehicleid && job_car != INVALID_VEHICLE_ID)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
								return 1;
							}
					        if(job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
					        {
									if(IsPlayerConnected(playerid))
									{
									    if(PlayerIsInkasator[playerid] == 1)
									    {
									        SendClientMessage(playerid, COLOR_RED, "Вы уже работаете");
									        return 1;
									    }
									    TogglePlayerControllable(playerid, 1);
									    new randomize;
									    randomize = random(sizeof(gInkasatorPoints));
									    SetPlayerCheckpoint(playerid, gInkasatorPoints[randomize][0], gInkasatorPoints[randomize][1], gInkasatorPoints[randomize][2], 10.0);
									    SendClientMessage(playerid, COLOR_WHITE, "Банк: Время пошло, заберите деньги и привезите нам.");
									    PlayerIsInkasator[playerid] = 2;
									}
							}
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете инкассатором");
						}
					}
					case VEHICLE_ACTION_TYPE_TRUCKER_1: 
					{
						if(GetPlayerData(playerid, P_TK_JOB) == 129 && GetPlayerJob(playerid) == 4)
						{
							if(GetPlayerData(playerid, P_TK_JOB_TYPE) != 1) return SCM(playerid, COLOR_GREY, "Доступно только штатным дальнобойщикам (сотрудники могут взять транспорт на парковке)");
							new job_car = GetPlayerJobCar(playerid);
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX, 
									"{FFFFFF}Работа в транспортной компании", 
									"{FFFFFF}Вы действительно хотите начать свой рабочий день?\n\n\
									В качестве залога с Вас снимут {E6CE7B}2.000.000 руб. {FFFFFF}Если Вы не получите штрафов, то деньги будут возвращены.",
									"Начать", "Отмена"
								);
							}
							else if(vehicleid != job_car) RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Данный транспорт занят другим игроком");
							else KillEndJobTimer(playerid);
						}
						else RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете в данной транспортной компании");
					}
					case VEHICLE_ACTION_TYPE_TRUCKER_2: 
					{
						if(GetPlayerData(playerid, P_TK_JOB) == 130 && GetPlayerJob(playerid) == 4)
						{
							if(GetPlayerData(playerid, P_TK_JOB_TYPE) != 1) return SCM(playerid, COLOR_GREY, "Доступно только штатным дальнобойщикам (сотрудники могут взять транспорт на парковке)");
							new job_car = GetPlayerJobCar(playerid);
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX, 
									"{FFFFFF}Работа в транспортной компании", 
									"{FFFFFF}Вы действительно хотите начать свой рабочий день?\n\n\
									В качестве залога с Вас снимут {E6CE7B}2.000.000 руб. {FFFFFF}Если Вы не получите штрафов, то деньги будут возвращены.",
									"Начать", "Отмена"
								);
							}
							else if(vehicleid != job_car) RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Данный транспорт занят другим игроком");
							else KillEndJobTimer(playerid);
						}
						else RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете в данной транспортной компании");
					}
					case VEHICLE_ACTION_TYPE_TRUCKER_3: 
					{
						if(GetPlayerData(playerid, P_TK_JOB) == 131 && GetPlayerJob(playerid) == 4)
						{
							if(GetPlayerData(playerid, P_TK_JOB_TYPE) != 1) return SCM(playerid, COLOR_GREY, "Доступно только штатным дальнобойщикам (сотрудники могут взять транспорт на парковке)");
							new job_car = GetPlayerJobCar(playerid);
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX, 
									"{FFFFFF}Работа в транспортной компании", 
									"{FFFFFF}Вы действительно хотите начать свой рабочий день?\n\n\
									В качестве залога с Вас снимут {E6CE7B}2.000.000 руб. {FFFFFF}Если Вы не получите штрафов, то деньги будут возвращены.",
									"Начать", "Отмена"
								);
							}
							else if(vehicleid != job_car) RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Данный транспорт занят другим игроком");
							else KillEndJobTimer(playerid);
						}
						else RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете в данной транспортной компании");
					}
					case VEHICLE_ACTION_TYPE_CARSH_CAR:
					{
					    new idx = GetVehicleData(vehicleid, V_ACTION_ID);
						if(GetPlayerAccountID(playerid) != GetCarshCarData(idx, OC_RENT_OWNER))
						{
						    if(GetCarshCarData(idx, OC_RENT_OWNER) == -1)
						    {
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xBE2D2DFF, "Для аренды данного транспорта воспользуйтесь приложением в телефоне");
						    }
						    else
						    {
						        RemovePlayerFromVehicle(playerid);
						        SendClientMessage(playerid, 0xBE2D2DFF, "Данный транспорт уже арендован");
						    }
						    return 1;
						}
					}
					case VEHICLE_ACTION_TYPE_PPS_CAR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_PPS && GetPlayerTeamEx(playerid) != TEAM_FSB)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_MED_CAR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL && GetPlayerTeamEx(playerid) != TEAM_FSB)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_FBI_CAR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_FSB)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}		
					case VEHICLE_ACTION_TYPE_GOV_CAR: 
					{
						if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}		
					case VEHICLE_ACTION_TYPE_FSIN_CAR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_FSIN && GetPlayerTeamEx(playerid) != TEAM_FSB)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}							
					case VEHICLE_ACTION_TYPE_WORKTRASH:
					{
						if (GetPlayerLevel(playerid) < 8) {
							RemovePlayerFromVehicle(playerid);
							SCM(playerid, -1, "Вы были выброшены из автомобиля, так как для работы требуется 8 уровень.");
							return 1; 
						}
						if (g_player_trash[playerid][TRASH_ID_CAR] == 0)
						{
							Dialog(playerid, RENT_WORK_VEHICLE, DIALOG_STYLE_MSGBOX,
								"Работа развозчика мусора",
								"Вы уверены что хотите взять данный транспорт для работы\n\
								за 5 000 000 Рублей?",
								"Да", "Нет"
							);	
						}
						else {
							SendClientMessage(playerid, -1, "Чтобы продолжить работу используйте /trash");				
						}
					}	
					case VEHICLE_ACTION_TYPE_PACK:
					{
						new status = GetVehicleParam(vehicleid, V_LOCK);
						if (status) {
							return 1; 
						} else {
							RemovePlayerFromVehicle(playerid); 
						}
					}		
					case VEHICLE_ACTION_TYPE_ARMY_CAR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_ARMY && GetPlayerTeamEx(playerid) != TEAM_FSB)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_PRIZE:
					{
						Dialog
						(
							playerid, DIALOG_TAKE_CAR_PRIZE, DIALOG_STYLE_MSGBOX,
							"Подтверждение",
							"Данный транспорт созданный администратором активен в розыгрыше.\n\n\
							Вы действительно хотите забрать этот транспорт себе?",
							"Да", "Отмена"
						);
					}
					case VEHICLE_ACTION_TYPE_SVALKA_CAR:
					{
						RemovePlayerFromVehicle(playerid);
					}
					case VEHICLE_ACTION_TYPE_BLACKMARKET:
					{
						RemovePlayerFromVehicle(playerid);
					} 
					case VEHICLE_ACTION_TYPE_AUTOSALON:
					{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
					}
					case VEHICLE_ACTION_TYPE_RADIO_CAR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_RADIO)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					} 
					case VEHICLE_ACTION_TYPE_ELECTRIK:
					{
						if(GetPVarInt(playerid, "Electrickrabota") != 1)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_SET_ELECT2, DIALOG_STYLE_MSGBOX,
								"{FFFFFF}Работа электрика",
								"{FFFFFF}Чтобы взять машину, необходимо заплатить за нее {ffb833}1500 руб\n"\
								"{FFFFFF}Вы действительно хотите взять транспорт в аренду?",
								"Да", "Нет"
							);
						}
					}
					case VEHICLE_ACTION_TYPE_BAT_CAR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_MAFIA_JAPAN)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_LYT_CAR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_MAFIA_ITALIAN)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_ADMIN_CAR:
					{
						if(action_id != 1)
						{
							if(!GetPlayerAdminEx(playerid) && GetPlayerYAdminEx(playerid))
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
							}
						}
					}
					case VEHICLE_ACTION_TYPE_OWNABLE_CAR:
                    {
                    }
					case VEHICLE_ACTION_TYPE_FAMILY_CAR:
                    {
                        action_id = GetVehicleData(vehicleid, V_ACTION_ID);
						if(GetOwnableCarData(action_id, OC_OWNER_ID) == GetPlayerData(playerid, P_FAMILY))
						{
                            if(GetOwnableCarData(action_id, OC_RANG) > GetPlayerData(playerid, P_FAMILY_RANK))
                            {
                                RemovePlayerFromVehicle(playerid);
                                SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
                            }
						}
						else
						{
						    SendClientMessage(playerid, 0xCECECEFF, "* Данный транспорт принадлежит банде!");
						    RemovePlayerFromVehicle(playerid);
						}
                    }
				}
			}
			else
			{
				if(!IsABike(vehicleid))
				{
					switch(vehicle_type)
					{
						case VEHICLE_ACTION_TYPE_DRIVING_SCH:
						{
							if(!IsABike(vehicleid)) SpeedometrShowForPlayer(playerid);
							if(GetPVarInt(playerid, "autoschool_point") >= 9)
							{
								SetPVarFloat(playerid, "car_damage", 1000.0);
								SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_ON);
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}приветствую на практической части экзамена по вождению, выслушайте мои инструкции, так вот, кхм...");
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}вам необходимо ехать следуя моим указаниям, я буду говорить, где и когда нужно повернуть.");
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}и аккуратней! Если попадете в аварию или выйдите из машины, экзамен будет завершен.");
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}а также не забывайте о сигналах светофора и знаках STOP.");
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}как будете готовы, выдвигайтесь, но не забудьте пристегнуть ремень {42B02C}(( /rem )).");
							}
							return 1;
						}
					}
					if(GetVehicleModel(vehicleid) == 462) return SpeedometrShowForPlayer(playerid);
					RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid, 0xCECECEFF, "У вас нет водительских прав.");
				}
			}
		}
		else RemovePlayerFromVehicle(playerid);
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, false);
		switch(vehicle_type)
		{
			case VEHICLE_ACTION_TYPE_BUS_DRIVER, VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				new driver = GetVehicleData(vehicleid, V_DRIVER_ID);
				if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
				{
					if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
					{
						new tariff = GetPlayerData(driver, P_JOB_TARIFF);
						if(vehicle_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), tariff))
							{
								new fmt_str[90];
								g_taxi_mileage[playerid] = 0.0;
								format(fmt_str, sizeof fmt_str, "%s сел в ваше такси. Счетчик включен", GetPlayerNameEx(playerid));
								SendClientMessage(driver, 0x3399FFFF, fmt_str);
								format(fmt_str, sizeof fmt_str, "Вы сели в такси %s. Тариф: %d рублей (оплата за каждые 100 м поездки)", GetPlayerNameEx(driver), tariff);
								SendClientMessage(playerid, 0x3399FFFF, fmt_str);
								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для оплаты тарифа");
							}
						}
						else
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), tariff))
							{
								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
								GivePlayerMoneyEx(driver, tariff, "+ Оплата проезда в автобусе", true, true);
								GivePlayerMoneyEx(playerid, -tariff, "- Оплата проезда в автобусе", true, true);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для оплаты проезда");
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response)
	{
		if(GetPVarInt(playerid, "EditObjectAcsInv"))
		{
			new query[256];
			format(query, sizeof query, "UPDATE items SET status=1, foffset_x=%f, foffset_y=%f, foffset_z=%f, frot_x=%f, frot_y=%f, frot_z=%f, fscale_x=%f, fscale_y=%f, fscale_z=%f WHERE type=%d AND slots=%d AND owner_id=%d", 
			fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, GetPVarInt(playerid, "EditObjectAcsType"), GetPVarInt(playerid, "EditObjectAcsSlots"), GetPlayerAccountID(playerid));
			mysql_query(mysql, query, false);
			for(new i; i < MAX_PLAYER_ITEMS; i++)
			{
				if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
				if(GetPlayerItem(i, PI_SLOTS) != GetPVarInt(playerid, "EditObjectAcsSlots")) continue;
				if(GetPlayerItem(i, PI_TYPE) != GetPVarInt(playerid, "EditObjectAcsType")) continue;
				SetPlayerItem(i, PI_STATUS, 1);
				SetPlayerItem(i, PI_FOFFSET_X, 	fOffsetX);
				SetPlayerItem(i, PI_FOFFSET_Y, 	fOffsetY);
				SetPlayerItem(i, PI_FOFFSET_Z, 	fOffsetZ);
				SetPlayerItem(i, PI_FROT_X, 		fRotX);
				SetPlayerItem(i, PI_FROT_Y, 		fRotY);
				SetPlayerItem(i, PI_FROT_Z, 		fRotZ);
				SetPlayerItem(i, PI_FSCALE_X, 	fScaleX);
				SetPlayerItem(i, PI_FSCALE_Y, 	fScaleY);
				SetPlayerItem(i, PI_FSCALE_Z, 	fScaleZ);
				break;
			}
			callcmd::return_acsses(playerid);
		}
		if(GetPVarInt(playerid, "EditObjectAcs"))
		{
			if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
			new businessid = GetPlayerInBiz(playerid);
			if(businessid != -1)
			{
               BitStream_2(playerid, s_CefInterface, t_CefShow, "Accessories", "[[[\"Очки\",0],[\"Банданы\",1],[\"Маски\",2],[\"Береты\",3],[\"Шляпы\",4],[\"Сумка\",5],[\"Аксессуар на пояс\",6],[\"Часы\",7],[\"Рюкзак\",8],[\"Чокер\",10]],[[19006,\"Красные\",300000,0,0],[19007,\"Желтые\",350000,0,1],[19008,\"Зеленые\",350000,0,2],[19009,\"Синие\",350000,0,3],[19010,\"Розовые\",350000,0,4],[19011,\"Гипноз\",350000,0,5],[19012,\"Черные\",350000,0,6],[19013,\"Глаза\",350000,0,7],[19014,\"Шахматы\",350000,0,8],[19015,\"Обычные\",350000,0,9],[19016,\"X-ray\",350000,0,10],[13953,\"Для сноуборда\",8750000,0,11],[13995,\"Gucci\",1050000,0,12],[13996,\"American\",1050000,0,13],[13997,\"С обводкой\",1050000,0,14],[13998,\"Синий тигр\",1050000,0,15],[13999,\"Желтые\",1050000,0,16],[14462,\"Модные очки\",1665000,0,187]]]");
			}
			SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			SetPlayerAnimation(playerid, 57);
			SetPlayerAnimation(playerid, 57);
			SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
			SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
			SetPlayerAnimation(playerid, 57);
			ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
			GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "price_acs"), "Покупка аксессуара");
			SendClientMessage(playerid, 0xabababFF, "Поздравляем вас с приобретением нового аксессуара");
			callcmd::return_acsses(playerid);
			new price = (GetPVarInt(playerid, "price_acs") / 100) * 20;
			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), price);
			new type;
			new td = GetPVarInt(playerid, "akstype");
			if(td == 0) type = 181;
			if(td == 1) type = 182;
			if(td == 2) type = 183;
			if(td == 3) type = 184;
			if(td == 4) type = 185;
			if(td == 5) type = 219;
			if(td == 6) type = 220;
			if(td == 7) type = 221;
			if(td == 8) type = 222;
			if(td == 9) type = 246;
			CreateItemsAcs(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), modelid, type, 1, index, -1, -1, 0, 2);
			SetPVarInt(playerid, "akstype", 0);
		}
	}
	else
	{
		if(GetPVarInt(playerid, "EditObjectAcsInv"))
		{
			RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "EditObjectAcsIndex"));
			DeletePVar(playerid, "EditObjectAcsIndex"); DeletePVar(playerid, "EditObjectAcsInv");
			DeletePVar(playerid, "aks_id");
			callcmd::return_acsses(playerid);
		}
	}
	return 1;
}
public: OnPlayerExitVehicleEx(playerid, vehicleid, is_driver)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "MusicPlayer");
    if (g_Repairing[playerid]) 
	{
        g_Repairing[playerid] = false;
        KillTimer(timerID[playerid]);
		SendClientMessage(playerid, 0xFF0000FF, "{F3FF02}[Информация] {F3FF02}Вы вышли из машины. Починка остановлена.");
    }	
	if(remen[playerid] == 1)
	{
		Action(playerid, "отстегнул ремень безопасности");
		GameText(playerid, "~r~Ремень безопасности расстегнут", 4000, 1);
     	remen[playerid] = 0;
	}
	if(PlayerIsPlain[playerid] == 1)
	{
		DestroyVehicle(PlainVeh[playerid]);
		PlayerIsPlain[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerPos(playerid, 2813.6899,-2036.2950,21.3944);
		GameText(playerid, "Рейс окончен!",3,5000);
	}	
	if(soundveh[vehicleid] == 1)
	{
		new Float: x, Float: y, Float: z;
		GetVehiclePos(vehicleid, x,y,z);
		soundveh[vehicleid] = 0;
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
	        format(STRING_GLOBAL, sizeof STRING_GLOBAL,"window.destroySound(%d, 30)",vehicleid);
			if(beepplayer[vehicleid][i] == 1)BitStream_1(i, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
			if(kryak[vehicleid][i] == 1)BitStream_1(i, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
	    }
    }
    if(vehicleid == snoybord[playerid])
	{
		DestroyVehicle(snoybord[playerid]);
		snoybord[playerid] = -1;
	}
	SetPlayerData(playerid, P_LAST_VEHICLE, INVALID_VEHICLE_ID);
	if(is_driver)
	{
	    if(GetPVarInt(playerid, "in_test_drive") == 1)
	    {
	        SetPVarInt(playerid, "in_test_drive", 0);
		 	new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SendClientMessage(playerid, 0x66CC00FF, "Тест-драйв закончен!");
			KillTimer(timertest[playerid]);
			if(GetOwnableCarData(index, OC_BY_ID) == 2)
			{
			    SetVehicleParam(vehicleid, V_ENGINE, false);
                SetPlayerPosAcc(playerid, 1587.1755,1834.1040,996.5703,179.1926);
				new indx = GetOwnableCarData(index, OC_MESTOID);
				if(indx >= 1 || indx <= 21)
				{
					SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_1],g_load_car_market[indx][POS_MESTO_Y_1],g_load_car_market[indx][POS_MESTO_Z_1],g_load_car_market[indx][POS_MESTO_ANGEL_1]);
					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, 4);
					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, 4);
				}
			}
			if(GetOwnableCarData(index, OC_BY_ID) == 1)
			{
			    SetVehicleParam(vehicleid, V_ENGINE, false);
                SetPlayerPosAcc(playerid, -1587.7893,998.9899,1001.1563, 0.0);
				new indx = GetOwnableCarData(index, OC_MESTOID);
				if(indx >= 1 || indx <= 20)
				{
					SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_2],g_load_car_market[indx][POS_MESTO_Y_2],g_load_car_market[indx][POS_MESTO_Z_2],g_load_car_market[indx][POS_MESTO_ANGEL_2]);
					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, 4);
					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, 4);
				}
			}
			if(GetOwnableCarData(index, OC_BY_ID) == 3)
			{
			    SetVehicleParam(vehicleid, V_ENGINE, false);
			    SetPlayerPosAcc(playerid, 2290.1001,1803.0746,1000.9609, 270.0);
				new indx = GetOwnableCarData(index, OC_MESTOID);
				if(indx >= 1 || indx <= 13)
				{
					SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_3],g_load_car_market[indx][POS_MESTO_Y_3],g_load_car_market[indx][POS_MESTO_Z_3],g_load_car_market[indx][POS_MESTO_ANGEL_3]);
					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, 4);
					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, 4);
				} 
			}
	    }
		SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);
		if(vodila[vehicleid] == playerid && GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FERMA_CAR)
		{
			StartCarJobTimer(playerid, 15000, vehicleid);
			SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
		}
		if(!IsABike(vehicleid))
			SpeedometrHideForPlayer(playerid);
		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case VEHICLE_ACTION_TYPE_TRUCKER_1:
			{
				if(GetPlayerJobCar(playerid) == vehicleid)
				{
					StartEndJobTimer(playerid);
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Вернуться в транспорт\",%d]", gettime() + 120);
					BitStream_2(playerid, s_CefInterface, t_CefShow, "InformationTimer", STRING_GLOBAL);
					SCM(playerid, COLOR_RED, "У вас есть 2 минуты чтобы вернуться в транспорт, иначе он пропадет");
				}
			}
			case VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в автобус");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_ACTIVE_ACS:
			{
				if(active_acs[playerid] != INVALID_VEHICLE_ID)
				{
					DestroyVehicle(active_acs[playerid]);
					active_acs[playerid] = INVALID_VEHICLE_ID;
					active_acs_id[playerid] = -1;
					new index = GetVehicleData(GetPVarInt(playerid, "AcsVehicleCar"), V_ACTION_ID);
					new car_id = GetOwnableCarData(index, OC_SQL_ID);
					LoadCarAccessories(car_id, GetPVarInt(playerid, "AcsVehicleCar"));
				}
			}		
			case VEHICLE_ACTION_TYPE_SKATEBOARD:
			{
				for(new i; i < MAX_PLAYER_ITEMS; i++)
				{
					if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
					if(GetPlayerItem(i, PI_TYPE) != 0) continue;
					if(GetPlayerItem(i, PI_TYPEACS) != 324) continue;
					if(GetPlayerItem(i, PI_STATUS) != 2) continue;
					SetPlayerItem(i, PI_STATUS, 1);
					if(skateboard[playerid] != INVALID_VEHICLE_ID)
					{
						DestroyVehicle(skateboard[playerid]);
						skateboard[playerid] = INVALID_VEHICLE_ID;
					}
					callcmd::return_acsses(playerid);
					break;
				}
			}
			case VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_RERFECT:
			{
				if(GetPlayerJob(playerid) == JOB_RERFECT_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, true);
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new Float: hp_vehicle;
    new veh_id = GetPlayerVehicleID(playerid);
    GetVehicleHealth(veh_id, hp_vehicle);
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	new action_type = GetPlayerCPInfo(playerid, CP_ACTION_TYPE);
	if(g_player_mine_cp[playerid] != 0)
	{
		if(g_player_mine_cp[playerid] == 1)
		{
			SCM(playerid, -1, "Если лифт еще не приехал, ожидайте, он прибудет в течении минуты.");
			g_player_mine_cp[playerid] = 2;
			DisablePlayerCheckpoint(playerid);
		}
		else if(g_player_mine_cp[playerid] == 2)
		{
			DisablePlayerCheckpoint(playerid);
			g_player_mine_cp[playerid] = 3;
		}
		else if(g_player_mine_cp[playerid] == 3)
		{
			DisablePlayerCheckpoint(playerid);
		}
		else if(g_player_mine_cp[playerid] == 4)
		{
			DisablePlayerCheckpoint(playerid);
			RemovePlayerAttachedObjectEx(playerid, 0, 6);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 17109, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, -0.2, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
			ApplyAnimationEx(playerid, "PED", "BOMBER", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
			GameText(playerid, "Вы взяли инструмент~n~Возвращайтесь к месту добычи", 3000, 2);
			g_player_mine_status[playerid] = 3;
			new id = g_player_mine_ore[playerid];
			g_player_mine_cp[playerid] = 5;
			SetPlayerCheckpoint(playerid, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2] + 0.5, 1.0);
			return 1;
		}
		else if(g_player_mine_cp[playerid] == 5)
		{
			DisablePlayerCheckpoint(playerid);
			g_player_progress_bar_type[playerid] = 3;
			g_player_progress_bar[playerid] = 0;
			BitStream_2(playerid, s_CefInterface, t_CefShow, "ProgressBar", "[[\"Нажимайте Y<br>с небольшим интервалом\", 0, 1000]]");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.playSound('sounds/new_year/ice_breaker/ice_axe_2.mp3', 1, 6, 0.50)");
			ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
			return 1;
		}
		else if(g_player_mine_cp[playerid] == 6)
		{
			DisablePlayerCheckpoint(playerid);
			GameText(playerid, "Вы взяли инструмент~n~Возвращайтесь к месту добычи", 3000, 2);
			g_player_mine_status[playerid] = 5;
			new id = g_player_mine_ore[playerid];
			g_player_mine_cp[playerid] = 7;
			SetPlayerCheckpoint(playerid, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2] + 0.5, 1.0);
			RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 1458, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0, 0);
			ApplyAnimationEx(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 0);
			return 1;
		}
		else if(g_player_mine_cp[playerid] == 7)
		{
			DisablePlayerCheckpoint(playerid);
			GameText(playerid, "~y~Готово!~n~Возьмите лопату со стойки", 3000, 2);
			new id = g_player_mine_ore[playerid];
			g_player_mine_status[playerid] = 6;
			RemovePlayerAttachedObjects(playerid);
			g_player_mine_object[playerid] = CreateDynamicObject(1458, g_mine_ore_pos[id][MOP_CART][0], g_mine_ore_pos[id][MOP_CART][1], g_mine_ore_pos[id][MOP_CART][2], g_mine_ore_pos[id][MOP_CART][3], 0.0, 0.0);
			g_player_mine_cp[playerid] = 8;
			SetPlayerCheckpoint(playerid, g_mine_rack[g_player_mine_rack[playerid]][0],g_mine_rack[g_player_mine_rack[playerid]][1],g_mine_rack[g_player_mine_rack[playerid]][2], 1.0);
			ApplyAnimationEx(playerid, "MISC", "CASE_PICKUP", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
			SCM(playerid, -1, "Вы разместили тележку, возьмите лопату со стойки с инструментами и загрузите её.");
			return 1;
		}
		else if(g_player_mine_cp[playerid] == 8)
		{
			DisablePlayerCheckpoint(playerid);
			GameText(playerid, "Вы взяли инструмент~n~Возвращайтесь к месту добычи", 3000, 2);
			g_player_mine_status[playerid] = 7;
			SetPlayerAttachedObject(playerid, 0, 337, 6, 0.02, 0.08, -0.08, 180.0, 0.0, 23.3000, 1.0, 1.0, -1, -1);
			new id = g_player_mine_ore[playerid];
			g_player_mine_cp[playerid] = 9;
			SetPlayerCheckpoint(playerid, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2] + 0.5, 1.0);
			ApplyAnimationEx(playerid, "PED", "BOMBER", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
			return 1;
		}
		else if(g_player_mine_cp[playerid] == 9)
		{
			DisablePlayerCheckpoint(playerid);
			g_player_progress_bar_type[playerid] = 3;
			g_player_progress_bar[playerid] = 0;
			BitStream_2(playerid, s_CefInterface, t_CefShow, "ProgressBar", "[[\"Нажимайте Y<br>с небольшим интервалом\", 0, 1000]]");
			ApplyAnimationEx(playerid, "ped", "a_dig", 4.0, true, 0, 0, 1, 0, 0, USE_ANIM_TYPE_NONE);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.playSound('sounds/mine/sfx_shovel_coal_1_1.mp3', 1, 6, 0.50)");
			return 1;
		}
		else if(g_player_mine_cp[playerid] == 10)
		{
			DisablePlayerCheckpoint(playerid);
			new rand = random(45) + 16;
			new items = GetPlayerJobLoadItems(playerid) + rand;
			SCMF(playerid, 0xf49810FF, "Вы доставили {FFFFFF}\"Каменный уголь\" (%d.0 кг).", rand);
			SCM(playerid, 0xf49810FF, "Теперь вы можете взять перфоратор и найти новое месторождение либо закончить работу.");
			new randomcase = random(10);
			if(randomcase == 7) Dialog(playerid, DIALOG_CASE_TWO, DIALOG_STYLE_MSGBOX, "Предложение", "Вы нашли кейс, хотите забрать его себе?", "Да", "Нет");
			if(randomcase == 2) Dialog(playerid, DIALOG_KEY_ONE, DIALOG_STYLE_MSGBOX, "Предложение", "Вы нашли `Ключ от кейса`, хотите забрать его себе?", "Да", "Нет");
			RemovePlayerAttachedObjects(playerid);
			ApplyAnimationEx(playerid, "MISC", "CASE_PICKUP", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
			SetPlayerJobLoadItems(playerid, items);
			new fmt_text[128];
			format(fmt_text, sizeof fmt_text, "~y~+%d руб.~n~~w~Заработано: ~y~%d руб.", rand * GetTempJobInfo(TEMP_JOB_MINER, TJ_PAY_FOR_LOAD), items * GetTempJobInfo(TEMP_JOB_MINER, TJ_PAY_FOR_LOAD));
			GameText(playerid, fmt_text, 3000, 2);
			SetPlayerCheckpoint(playerid, g_mine_rack[g_player_mine_rack[playerid]][0],g_mine_rack[g_player_mine_rack[playerid]][1],g_mine_rack[g_player_mine_rack[playerid]][2], 2.0);
			g_mine_ore[g_player_mine_ore[playerid]][MO_STATUS] = 0;
			g_player_mine_status[playerid] = 0;
			g_player_mine_object[playerid] = INVALID_OBJECT_ID;
			g_player_mine_sphere[playerid] = 0;
			g_player_mine_ore[playerid] = -1;
			g_player_mine_cp[playerid] = 3;
			return 1;
		}
	}
	if(neft_cp[playerid] == 1) Dialog(playerid, DIALOG_CREATE_NEFTENASOS, DIALOG_STYLE_MSGBOX,"{FFFFFF}Подтверждение строительства","{FFFFFF}Стоимость постройки {ffa500}10.000.000 {FFFFFF}руб.\n{FFFFFF}Хотите начать строительство нефтяного насоса?\n\n{ffa500}Внимние! {FFFFFF}Если рядом есть транспорт советуем его припарковать подальше.","Да", "Нет");
	if(PlayerIsInkasator[playerid]==2)
    {
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,-1,"{008000}Вам отдали кассиры деньги, отправляйтесь обратно в банк.");
	    SetPlayerCheckpoint(playerid, 414.2122,572.8784,12.0202, 3.0);
	    PlayerIsInkasator[playerid]=3;
    }
    if(PlayerIsInkasator[playerid]==3)
    {
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,-1,"{008000}Вы отвезли деньги в банк.");
	    SendClientMessage(playerid,-1,"{008000}Ваша зарплата составляет: 15000000р");
	    GivePlayerMoneyEx(playerid,15000000);
	    PlayerIsInkasator[playerid]=0;
	    new vehicleid = GetPlayerVehicleID(playerid);
    	RemovePlayerFromVehicle(playerid);
		SetVehicleToRespawn(vehicleid);
		SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
	    return 1;
	}
	if(IsPlayerInCheckpoint(playerid))
	{
		switch(action_type)
		{
		    case CP_ACTION_TYPE_PUT_TRAIN:
			{
				if(GetPVarInt(playerid,"metro_work") == 1)
				{
					if(metro_status != 1) return SendClientMessage(playerid, 0x66CC00FF, "Произошла ошибка.Обратитесь к разработчику проекта");
					if(!IsValidVehicle(metro_train[playerid])) return SendClientMessage(playerid, 0xFF6600FF, "Произошла ошибка.Обратитесь к разработчику проекта");
					PutPlayerInVehicle(playerid, metro_train[playerid], 0);
					DisablePlayerCheckpoint(playerid);
					metro_status = 0;
					DeletePVar(playerid, "Metro_start");
					SetPlayerRaceCheckpoint
					(
						playerid,
						0,
						-382.2303,
						555.6013,
						8.0086,
						0,
						0,
						0,
						4.0,
						RCP_ACTION_TYPE_METRO_TRAIN_1
					);
					new fmt_td_text[250];
				    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "openInterface('Machinist')");
					format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Центральная'");
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
					format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '2-120'");
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
					format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.type = 1");
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
					format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').money = %d",metro_zarplata[playerid]);
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case CP_PUT_TRASH_WORK:
			{
				if(g_player_trash[playerid][TRASH_ID_CAR] != GetPlayerVehicleID(playerid)) return RemovePlayerFromVehicle(playerid);
				DisablePlayerCheckpoint(playerid);	
				g_trash_work[g_player_trash[playerid][TRASH_ID]][T_STATUS] = -1;
				GivePlayerDonate(playerid, RandomEx(1, 40));
				GivePlayerMoneyEx(playerid, RandomEx(10000000, 25000000));
				total_trash --;
			}			
			case CP_ACTION_RACE_WBANK:
			{
			    if(PlayerIsInkasator[playerid]==3)
			    {
				    DisablePlayerCheckpoint(playerid);
				    SendClientMessage(playerid,-1,"{008000}Вы отвезли деньги в банк.");
				    SendClientMessage(playerid,-1,"{008000}Ваша зарплата составляет: 1000000р");
				    GivePlayerMoneyEx(playerid,1000000);
				    GameTextForPlayer(playerid, "~b~~h~+1000000 rub", 4000, 1);
				    PlayerIsInkasator[playerid]=0;
				    return 1;
				}
			}
			case CP_WBANK:
			{
	   			if(PlayerIsInkasator[playerid]==2)
			    {
				    DisablePlayerCheckpoint(playerid);
				    SendClientMessage(playerid,-1,"{008000}Вам отдали кассиры деньги, отправляйтесь обратно в банк.");
				    SetPlayerCheckpoint(playerid, 414.2122,572.8784,12.0202, 3.0, CP_ACTION_RACE_WBANK);
				    PlayerIsInkasator[playerid]=3;
			    }
			}
			case CP_ACTION_TYPE_LUMBERJACK_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);
							ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerLumberJackTakeWood", (random(5) + 10) * 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_FERMER_TAKE:
			{
			    if(GetPlayerTempJob(playerid) == TEMP_JOB_INKAS)
			    {
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FERMER_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);
							ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerFermerTake", (random(5) + 10) * 1000, false, "i", playerid);
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	new action_type = GetPlayerRaceCPInfo(playerid, RCP_ACTION_TYPE);
	new vehicleid = GetPlayerVehicleID(playerid);
	EliteRace_EnterRaceCheckpoint(playerid,action_type);
	if(IsPlayerInRaceCheckpoint(playerid))
	{
		switch(action_type)
		{		
			case RCP_ACTION_TYPE_PILOT_1: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[5][0], gPlainPoints[5][1], gPlainPoints[5][2],gPlainPoints[5][3], gPlainPoints[5][4], gPlainPoints[5][5],20.0,10004),PrizePlain(playerid);
            case 10004: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[6][0], gPlainPoints[6][1], gPlainPoints[6][2],gPlainPoints[6][3], gPlainPoints[6][4], gPlainPoints[6][5],20.0,10005),PrizePlain(playerid);
			case 10005: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[7][0], gPlainPoints[7][1], gPlainPoints[7][2],gPlainPoints[7][3], gPlainPoints[7][4], gPlainPoints[7][5],20.0,10006),PrizePlain(playerid);
			case 10006: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[8][0], gPlainPoints[8][1], gPlainPoints[8][2],gPlainPoints[8][3], gPlainPoints[8][4], gPlainPoints[8][5],20.0,10007),PrizePlain(playerid);
			case 10007: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[9][0], gPlainPoints[9][1], gPlainPoints[9][2],gPlainPoints[9][3], gPlainPoints[9][4], gPlainPoints[9][5],20.0,10008),PrizePlain(playerid);
			case 10008: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[10][0], gPlainPoints[10][1], gPlainPoints[10][2],gPlainPoints[10][3], gPlainPoints[10][4], gPlainPoints[10][5],20.0,10009),PrizePlain(playerid);
			case 10009: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[11][0], gPlainPoints[11][1], gPlainPoints[11][2],gPlainPoints[11][3], gPlainPoints[11][4], gPlainPoints[11][5],20.0,10010),PrizePlain(playerid);
			case 10010: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[12][0], gPlainPoints[12][1], gPlainPoints[12][2],gPlainPoints[12][3], gPlainPoints[12][4], gPlainPoints[12][5],20.0,10011),PrizePlain(playerid);
			case 10011: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[13][0], gPlainPoints[13][1], gPlainPoints[13][2],gPlainPoints[13][3], gPlainPoints[13][4], gPlainPoints[13][5],20.0,10012),PrizePlain(playerid);
			case 10012: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[14][0], gPlainPoints[14][1], gPlainPoints[14][2],gPlainPoints[14][3], gPlainPoints[14][4], gPlainPoints[14][5],20.0,10013),PrizePlain(playerid);
            case 10013: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[15][0], gPlainPoints[15][1], gPlainPoints[15][2],gPlainPoints[15][3], gPlainPoints[15][4], gPlainPoints[15][5],20.0,10014),PrizePlain(playerid);
            case 10014: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[16][0], gPlainPoints[16][1], gPlainPoints[16][2],gPlainPoints[16][3], gPlainPoints[16][4], gPlainPoints[16][5],20.0,10015),PrizePlain(playerid);
            case 10015: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[17][0], gPlainPoints[17][1], gPlainPoints[17][2],gPlainPoints[17][3], gPlainPoints[17][4], gPlainPoints[17][5],20.0,10016),PrizePlain(playerid);
            case 10016: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[18][0], gPlainPoints[18][1], gPlainPoints[18][2],gPlainPoints[18][3], gPlainPoints[18][4], gPlainPoints[18][5],20.0,10017),PrizePlain(playerid);
			case 10017: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[19][0], gPlainPoints[19][1], gPlainPoints[19][2],gPlainPoints[19][3], gPlainPoints[19][4], gPlainPoints[19][5],20.0,10018),PrizePlain(playerid);
			case 10018: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[20][0], gPlainPoints[20][1], gPlainPoints[20][2],gPlainPoints[20][3], gPlainPoints[20][4], gPlainPoints[20][5],20.0,10019),PrizePlain(playerid);
			case 10019: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[21][0], gPlainPoints[21][1], gPlainPoints[21][2],gPlainPoints[21][3], gPlainPoints[21][4], gPlainPoints[21][5],20.0,10020),PrizePlain(playerid);
			case 10020: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[22][0], gPlainPoints[22][1], gPlainPoints[22][2],gPlainPoints[22][3], gPlainPoints[22][4], gPlainPoints[22][5],20.0,10021),PrizePlain(playerid);
			case 10021:
			{
				DisablePlayerRaceCheckpoint(playerid);
				PrizePlain(playerid);
				TogglePlayerControllable(playerid,false);
	        	SetTimerEx("PlainStoped", 20000, false, "d", playerid);
				GameText(playerid, "Идёт высадка пассажиров...",20000,3);
			}
			case 2001:SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[24][0], gPlainPoints[24][1], gPlainPoints[24][2],gPlainPoints[24][3], gPlainPoints[24][4], gPlainPoints[24][5],20.0,2002),PrizePlain(playerid);
			case 2002: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[25][0], gPlainPoints[25][1], gPlainPoints[25][2],gPlainPoints[25][3], gPlainPoints[25][4], gPlainPoints[25][5],20.0,2003),PrizePlain(playerid);
			case 2003: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[26][0], gPlainPoints[26][1], gPlainPoints[26][2],gPlainPoints[26][3], gPlainPoints[26][4], gPlainPoints[24][5],20.0,2004),PrizePlain(playerid);
			case 2004: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[27][0], gPlainPoints[27][1], gPlainPoints[27][2],gPlainPoints[27][3], gPlainPoints[27][4], gPlainPoints[27][5],20.0,2005),PrizePlain(playerid);
			case 2005: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[28][0], gPlainPoints[28][1], gPlainPoints[28][2],gPlainPoints[28][3], gPlainPoints[28][4], gPlainPoints[28][5],20.0,2006),PrizePlain(playerid);
			case 2006: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[29][0], gPlainPoints[29][1], gPlainPoints[29][2],gPlainPoints[29][3], gPlainPoints[29][4], gPlainPoints[29][5],20.0,2007),PrizePlain(playerid);
			case 2007: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[30][0], gPlainPoints[30][1], gPlainPoints[30][2],gPlainPoints[30][3], gPlainPoints[30][4], gPlainPoints[30][5],20.0,2008),PrizePlain(playerid);
			case 2008: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[31][0], gPlainPoints[31][1], gPlainPoints[31][2],gPlainPoints[31][3], gPlainPoints[31][4], gPlainPoints[31][5],20.0,2009),PrizePlain(playerid);
			case 2009: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[32][0], gPlainPoints[32][1], gPlainPoints[32][2],gPlainPoints[32][3], gPlainPoints[32][4], gPlainPoints[32][5],20.0,2010),PrizePlain(playerid);
			case 2010: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[33][0], gPlainPoints[33][1], gPlainPoints[33][2],gPlainPoints[33][3], gPlainPoints[33][4], gPlainPoints[33][5],20.0,2011),PrizePlain(playerid);
			case 2011: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[34][0], gPlainPoints[34][1], gPlainPoints[34][2],gPlainPoints[34][3], gPlainPoints[34][4], gPlainPoints[34][5],20.0,2012),PrizePlain(playerid);
			case 2012: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[35][0], gPlainPoints[35][1], gPlainPoints[35][2],gPlainPoints[35][3], gPlainPoints[35][4], gPlainPoints[35][5],20.0,2013),PrizePlain(playerid);
			case 2013: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[36][0], gPlainPoints[36][1], gPlainPoints[36][2],gPlainPoints[36][3], gPlainPoints[36][4], gPlainPoints[36][5],20.0,2014),PrizePlain(playerid);
			case 2014: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[37][0], gPlainPoints[37][1], gPlainPoints[37][2],gPlainPoints[37][3], gPlainPoints[37][4], gPlainPoints[37][5],20.0,2015),PrizePlain(playerid);
			case 2015: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[38][0], gPlainPoints[38][1], gPlainPoints[38][2],gPlainPoints[38][3], gPlainPoints[38][4], gPlainPoints[38][5],20.0,2016),PrizePlain(playerid);
			case 2016: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[39][0], gPlainPoints[39][1], gPlainPoints[39][2],gPlainPoints[39][3], gPlainPoints[39][4], gPlainPoints[39][5],20.0,2017),PrizePlain(playerid);
			case 2017: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[40][0], gPlainPoints[40][1], gPlainPoints[40][2],gPlainPoints[40][3], gPlainPoints[40][4], gPlainPoints[40][5],20.0,2018),PrizePlain(playerid);
			case 2018: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[41][0], gPlainPoints[41][1], gPlainPoints[41][2],gPlainPoints[41][3], gPlainPoints[41][4], gPlainPoints[41][5],20.0,2019),PrizePlain(playerid);
			case 2019: SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[42][0], gPlainPoints[42][1], gPlainPoints[42][2],gPlainPoints[42][3], gPlainPoints[42][4], gPlainPoints[42][5],20.0,2021),PrizePlain(playerid);
			case 2021:
			{
				DisablePlayerRaceCheckpoint(playerid);
				TogglePlayerControllable(playerid,false);
				PrizePlain(playerid);
	        	SetTimerEx("PlainMaimiGo", 20000, 0, "d", playerid);
				GameText(playerid, "Идёт Посадка пассажиров...",20000,3);
			}			
		    case RCP_ACTION_TYPE_METRO_TRAIN_1:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-77.5733,
					824,
					-31.5574,
					-77.5733,
					824,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_2
				);
				OnFirstPersonMetro(playerid);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_2:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					107.3856,
					803.6250,
					-31.5574,
					107,
					803,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_3
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_3:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-260.1489,
					375.7960,
					-31.9455,
					-260,
					375,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_4
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ",10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Арзамас-Сити'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_4:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					4.2539,
					320.6250,
					-31.5574,
					4,
					320,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_5
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_5:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					655.7362,
					443.1285,
					-31.5574,
					655,
					443,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_6
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Вокзальная'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_6:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					769.3750,
					777.3989,
					-31.5574,
					769,
					777,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_7
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_7:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
                if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					312.8916,
					1238,
					-31.5574,
					312,
					1238,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_8
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ",  10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Союзная'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_8:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-9.1982,
					1453,
					-31.5574,
					-9,
					1453,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_9
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_9:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					157.1733,
					1625.6865,
					-31.5574,
					157.1733,
					1625,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_10
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Больничная'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_10:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					312.7500,
					1870.4987,
					-31.5574,
					312,
					1870.4987,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_11
				);
				new fmt_td_text[300];
    			format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_11:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					329.0008,
					2153.1912,
					-31.5574,
					329,
					2153,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_12
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
    			format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Больничная'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_12:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					295.0000,
					1804.9170,
					-31.5574,
					295,
					1804.9170,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_13
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_13:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
                if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-160.7650,
					1613.0304,
					-31.5574,
					68.8101,
					-160.7650,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_14
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Союзная'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_14:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					68.8101,
					1430.3750,
					-31.5574,
					68.8101,
					1430.3750,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_15
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_15:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					694.0261,
					1001.7910,
					-31.5574,
					694.0261,
					1001.7910,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_16
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ",10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Вокзальная'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_16:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					749.8750,
					707.6361,
					-31.5574,
					749.8750,
					707.6361,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_17
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_17:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					271.0938,
					365.3865,
					-31.5574,
					271.0938,
					365.3865,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_18
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Арзамас-Сити'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_18:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-69.5696,
					338.5000,
					-31.5574,
					-69.5696,
					338.5000,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_19
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_19:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					358.4632,
					722.5936,
					-31.5574,
					358.4632,
					722.5936,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_20
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Центральная'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_20:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					35.0479,
					820.5000,
					-31.5574,
					35.0479,
					820.5000,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_21
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_21:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-383.7589,
					571.2349,
					6.8831,
					-383.7589,
					571.2349,
					6.8831,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_22
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);
				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Депо'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				}
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_22:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-480.8936,
					283.3649,
					12.3176,
					-480.8936,
					283.3649,
					12.3176,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_23
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				OffFirstPerson(playerid);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_23:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-382.2303,
					555.6013,
					8.0086,
					0,
					0,
					0,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_1
				);
				new fmt_str[130];
				format(fmt_str, sizeof fmt_str, "Вы заработали %d руб.", metro_zarplata[playerid]);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
				GivePlayerMoneyEx(playerid, metro_zarplata[playerid], "Работа метро", true, true);
				metro_zarplata[playerid] = 0;
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Центральная'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '2-120'");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').money = %d",metro_zarplata[playerid]);
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
			}
			case RCP_ACTION_TYPE_UGONKA:
			{
				callcmd::test_taskugonggg(playerid);
			}
			case RCP_ACTION_TYPE_UGONKA1:
			{
				callcmd::test_hackugonggg(playerid);
			}
			case RCP_ACTION_TYPE_BUS_ROUTE:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
						new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);
						if(g_bus_route[route_id][route_step][BRS_POS_X] == 0.0)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
						}
						if(g_bus_route[route_id][route_step - 1][BRS_STOP])
						{
							new fmt_str[90];
							DisablePlayerRaceCheckpoint(playerid);
							GameTextForPlayer(playerid, "~r~Stop", 4000, 1);
							SendClientMessage(playerid, COLOR_GOLD, "Остановка. Ждите пассажиров");
							format(fmt_str, sizeof fmt_str, "Автобус по маршруту %s отправляется через 10 секунд", g_bus_routes[route_id][BR_NAME]);
							SendMessageInLocal(playerid, fmt_str, 0x669999FF, 45.0);
							SetTimerEx("NextBusRouteCP", 10_000, false, "i", playerid);
						}
						else
						{
							AddPlayerData(playerid, P_JOB_WAGE, +, random(30) + 20);
							NextBusRouteCP(playerid);
						}
					}
				}
			}
			case RCP_ACTION_TYPE_ORDER_INVITE:
			{
				if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "У вас нет прицепа для загрузки.");
				string_dialog[0] = EOS;
				format
				(
					string_dialog, sizeof string_dialog, 
					"{FFFFFF}Ваш грузовой отсек заполнен на {f0d474}%d {FFFFFF}ед. (максимум: {f0d474}5300 {FFFFFF}ед.)\n\
					Производитель рекомендует придерживаться {b8d469}4080 {FFFFFF}ед.\n\n\
					Выберите необходимое действие с товаром:",
					GetPlayerJobLoadItems(playerid)
				);
				Dialog(playerid, DIALOG_JOB_ITEM, DIALOG_STYLE_MSGBOX, "{FFFFFF}Действие на заводе", string_dialog, "Погрузка", "Разгрузка");
			}
			case RCP_ACTION_TYPE_ORDER:
			{
				if(GetPlayerData(playerid, P_JOB) != 4) return true;
				if(GetPlayerData(playerid, P_IN_JOB) == false) return true;
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_1 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_2 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_3 || vehicleid == GetPlayerData(playerid, P_JOB_CAR))
				{
					new order_id = GetPlayerData(playerid, P_ORDER);
					if(IsPlayerInJob(playerid) && order_id != -1)
					{
						new biz_id = GetOrderData(order_id, O_COMPANY_ID);
						if(!IsPlayerInRangeOfPoint(playerid, 4.5, GetBusinessData(biz_id, B_EXIT_POS_X), GetBusinessData(biz_id, B_EXIT_POS_Y), GetBusinessData(biz_id, B_EXIT_POS_Z))) return 1;
						if(!GetPlayerJobLoadItems(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "В Вашем транспорте нет товара");
						if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "Невозможно начать разгрузку, так как у вас отсутствует прицеп с товаром");
						g_player_order_time[playerid][2] = GetPlayerJobLoadItems(playerid) / 180;
						SCMF(playerid, 0xFFFFFFFF, "Разгрузка товара началась, примерное время: {abc77a}%d сек{FFFFFF}, не покидайте свой транспорт", g_player_order_time[playerid][2]);
						TogglePlayerControllable(playerid,false);
					}
				}
			}
			default:
			{
			}
		}
	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}
stock ClearMedBed(playerid, bedid)
{
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		SetPlayerData(playerid, P_OCCUPIED_BED, -1);
	}
	g_med_bed_used[bedid] = false;
	UpdateMedBed(bedid);
	return 1;
}

stock UpdateMedBed(bedid)
{
	new fmt_text[85];
	format(fmt_text, sizeof fmt_text, "Койка №%d\n{00CC00}Свободна", bedid + 1);
	UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_text);
	return 1;
}

public: HospitalTreatment()
{
	foreach(new playerid: Player)
	{
		if(!IsPlayerConnected(playerid)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000) && !IsPlayerInRangeOfPoint(playerid, 70.0, 431.1976,1732.5670,1301.0000))
		{
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		}
		else
		{
			if(GetPlayerPremium(playerid) < 1)
			{
				GameText(playerid, "~g~+ 1 Здоровье", 1000, 2);
				SetPlayerChatBubble(playerid, "+1 hp", 0x33CC33FF, 5.0, 1000);
				SetPlayerHealthEx(playerid, 1.0, true);
			}
			else
			{
				GameText(playerid, "~g~+ 10 Здоровье", 1000, 2);
				SetPlayerChatBubble(playerid, "+10 hp", 0x33CC33FF, 5.0, 1000);
				SetPlayerHealthEx(playerid, 10.0, true);
			}
		}
	}
	SetTimer("HospitalTreatment", 5000, false);
	return 1;
}

public: OnPlayerChangeWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_NECK);
	new player_tint = GetPlayerData(playerid, P_WEAPON_TINT)[ GetTintIDByWeapon(weaponid) ];
	if(player_tint)
		SetPlayerWeaponTint(playerid, weaponid, player_tint);
}

stock SetPlayerWeaponTint(playerid, weaponid, player_tint)
{
	new tintid = GetTintIDByWeapon(weaponid);
	SetPlayerAttachedObject
	(
		playerid,
		A_OBJECT_SLOT_NECK,
		GetWeaponTintData(tintid, WT_OBJECT),
		A_OBJECT_BONE_RIGHT_HAND,
		GetWeaponTintData(tintid, WT_X),
		GetWeaponTintData(tintid, WT_Y),
		GetWeaponTintData(tintid, WT_Z),
		GetWeaponTintData(tintid, WT_RX),
		GetWeaponTintData(tintid, WT_RY),
		GetWeaponTintData(tintid, WT_RZ),
		GetWeaponTintData(tintid, WT_SCALE_X),
		GetWeaponTintData(tintid, WT_SCALE_Y),
		GetWeaponTintData(tintid, WT_SCALE_Z),
		GetWeaponTint(player_tint)
	);
	return 1;
}

stock GetTintIDByWeapon(weaponid)
{
	new tint;
	switch(weaponid)
	{
		case 22: tint = 0;
		case 23: tint = 1;
		case 24: tint = 2;
		case 25: tint = 3;
		case 27: tint = 4;
		case 28: tint = 5;
		case 29: tint = 6;
		case 30: tint = 7;
		case 31: tint = 8;
		case 32: tint = 9;
		case 33: tint = 10;
		case 35: tint = 11;
		case 36: tint = 12;
		case 38: tint = 13;
	}
	return tint;
}

stock GetWeaponIDByTint(tintid)
{
	new weapon;
	switch(tintid)
	{
		case 0: weapon = 22;
		case 1: weapon = 23;
		case 2: weapon = 24;
		case 3: weapon = 25;
		case 4: weapon = 27;
		case 5: weapon = 28;
		case 6: weapon = 29;
		case 7: weapon = 30;
		case 8: weapon = 31;
		case 9: weapon = 32;
		case 10: weapon = 33;
		case 11: weapon = 35;
		case 12: weapon = 36;
		case 13: weapon = 38;
	}
	return weapon;
}

public: ChangeColorPTDUpdate(playerid)
{
	return 1;
}

public OnPlayerPickUpPickupEx(playerid, pickupid, action_type, action_id)
{
	if(action_type != PICKUP_ACTION_TYPE_TELEPORT && GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		return 0;
	}
	if(action_type != PICKUP_ACTION_TYPE_TELEPORT && GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		return 0;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
	{
		SetPlayerData(playerid, P_LAST_PICKUP, pickupid);
		switch(action_type)
		{
			case PICKUP_ACTION_TYPE_SVALKA:
			{
				Dialog
				(
					playerid, -1, DIALOG_STYLE_MSGBOX, 
					"Информация", 
					"{E9E9E9}Регулярно, на свалку сбывают большие партии мусора и различного <n>ценного груза которым можно овладеть за маленькую цену а продать \n\
					за большую, или оставить себе. Речь идёт не только о каких-либо вещах \n\
					но и о транспортных средствах.\n\n\
					Чтобы заполучить тот или иной предмет, транспорт, сначала найдите его \n\
					или присоединитесь к уже существующему аукциону. Ознакомьтесь с информаци\n\
					ей по аукциону и назначайте свою цену, опережая старую.\n\n\
					Некоторые вещи содержат в себе определенную награду: деньги, патроны, а\n\
					некоторые придется продать в магазине антиквара, по цене которая регуля\n\
					рно меняется, в данном магазине.\n\n\
					График поставок мусора: {E7B378}7:00, 11:00, 14:00, 19:00 {E9E9E9}и 1 поставка в случайное\n\
					время, в течение дня.\n",
					"", "Закрыть"
				);
			}
			case PICKUP_ACTION_TYPE_TK_MENU:
			{
				if(GetPlayerJob(playerid) != 4)
				{
					Dialog
					(
						playerid, DIALOG_TK_MENU_INVITE_1, DIALOG_STYLE_MSGBOX, 
						"{FFFFFF}Трудоустройство в компанию", 
						"{FFFFFF}Критерии для вступления в транспортную компанию:\n\n\
						- {BEC58C}4 {FFFFFF}игровой уровень\n\
						- Водительское удостоверение\n\
						- Опыт работы и репутация не имеют значения\n\n\
						Желаете посмотреть список вакантных мест?",
						"Далее", "Закрыть"
					);
				}
			}
			case PICKUP_ACTION_TYPE_ELECT:
			{
			    Dialog
				(
					playerid, DIALOG_SET_ELECT, DIALOG_STYLE_MSGBOX,
					"{FFD83D}Раздевалка",
					"Вы действительно хотите переодется в рабочую одежду?",
					"Да", "Нет"
				);
			}
			case PICKUP_ACTION_TYPE_PRITON:
			{
    			if((GetPlayerTeamEx(playerid) == TEAM_MAFIA_RUSSIAN || GetPlayerTeamEx(playerid) == TEAM_MAFIA_JAPAN || GetPlayerTeamEx(playerid) == TEAM_MAFIA_ITALIAN) || GetPlayerData(playerid, P_FAMILY) != 0)
				{
					SetPlayerPosEx(playerid, 1093.9169,2231.8499,2.0000,358.1637, 7, 7);
				}
				else
				{
					GameText(playerid, "~r~Недоступно", 5000, 3);
				}
			}		
			case PICKUP_ACTION_TYPE_FSIN_VHOD:
			{
    			if((GetPlayerTeamEx(playerid) == TEAM_FSIN || GetPlayerTeamEx(playerid) == TEAM_FSB || GetPlayerTeamEx(playerid) == TEAM_PPS) || GetPlayerData(playerid, P_ADVOKAT) != 0)
				{
					SetPlayerPosEx(playerid, -1687.4838,-2837.7773,1001.4022,272.5217, 4, 5);
				}
				else
				{
					GameText(playerid, "~r~Недоступно", 5000, 3);
				}
			}	
			case PICKUP_ACTION_TYPE_FSIN_VIHOD:
			{
    			if((GetPlayerTeamEx(playerid) == TEAM_FSIN || GetPlayerTeamEx(playerid) == TEAM_FSB || GetPlayerTeamEx(playerid) == TEAM_PPS) || GetPlayerData(playerid, P_ADVOKAT) != 0)
				{
					SetPlayerPosEx(playerid, -1789.3409,-2761.1392,11.1006,19.0628, 0, 0);
				}
				else
				{
					GameText(playerid, "~r~Недоступно", 5000, 3);
				}
			}					
			case PICKUP_ACTION_TYPE_PENT:
			{
				if (!g_bPickupAvailable) 
				{
					GameText(playerid, "~r~Ошибка", 4000, 2);
					return 1; 
				}
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 52);
				SetPlayerPos(playerid, -1930.7145,1778.9061,60.4236); 
			}			
			case PICKUP_ACTION_TYPE_NEFT:
			{
				new neft = GetNearestNeft(playerid, 12.0);
				SetPVarInt(playerid, "ownableneft", neft);
				if(GetNeftData(neft, N_OWNER_ID) == GetPlayerAccountID(playerid)) ShowMenuNeft(playerid);
				else SendClientMessage(playerid, -1, "*Вы не владелец данного нефтенасоса.");
			}
			case PICKUP_ACTION_INFO_B:
			{
				Dialog
				(
					playerid, DIALOG_INFOMVD, DIALOG_STYLE_MSGBOX,
					"{"#cW"}Городская больница",
					"{"#cW"}Государство бесплатно предоставляет медицинские услуги в\n"\
					"{"#cW"}городских больницах. Однако бесплатный курс может занять\n"\
					"{"#cW"}время, поэтому за определенную сумму медперсонал готов\n"\
					"{"#cW"}провести для Вас экспресс-лечение.",
					"Закрыть", ""
				);
			}
            case PICKUP_ACTION_TYPE_MUSOR:
			{
                if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка Deagle стоит 100.000р");
				Dialog(playerid, DIALOG_SORTIROVKA_MUSOR, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт Deagle","{"#cW"}Вы хотите скрафтить Deagle?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_AK2:
			{
                if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка Deagle стоит 100.000р");
				Dialog(playerid, DIALOG_CREATE_GUN1, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт Deagle","{"#cW"}Вы хотите скрафтить Deagle?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_AK3:
			{
                if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка AK-47 стоит 100.000р");
				Dialog(playerid, DIALOG_CREATE_GUN, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт АК-47","{"#cW"}Вы хотите скрафтить АК-47?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_AK:
			{
                if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка Shotgun стоит 100.000р");
				Dialog(playerid, DIALOG_CREATE_GUN3, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт Shotgun","{"#cW"}Вы хотите скрафтить Shotgun?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_AK1:
			{
                if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка M4 стоит 100.000р");
				Dialog(playerid, DIALOG_CREATE_GUN2, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт M4","{"#cW"}Вы хотите скрафтить M4?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_MVD: Dialog(playerid, DIALOG_MVDPICKUP, DIALOG_STYLE_LIST,"{"#cW"}Полицейский отдел","{"#cW"}Явка с повинной\n{"#cW"}Заявление на угон транспорта\n{"#cW"}Восстановление прав","Далее", "Отмена");
			case PICKUP_ACTION_TYPE_TELEPORT:
			{
				if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
				{
					switch(GetTeleportData(action_id, T_ACTION_TYPE))
					{
						case T_ACTION_TYPE_BLOCK_LEAVE_AREA:
						{
							SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, true);
						}
						case T_ACTION_TYPE_END_JOB:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
						}
						case T_ACTION_TYPE_LEAVE_HOSPITAL:
						{
							if(GetPlayerData(playerid, P_HOSPITAL))
							{
								if(GetPlayerHealthEx(playerid) < 65.0) return SendClientMessage(playerid, -1, "Медперсонал не может отпустить Вас в таком состоянии. Отправляйтесь на лечение");
								else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									SendClientMessage(playerid, 0x66CC00FF, "Вы выписались из больницы");
									ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
								}
								SetPlayerData(playerid, P_HOSPITAL, false);
							}
						}
						case T_ACTION_TYPE_LEAVE_PPS:
						{
							if(GetPlayerData(playerid, P_ARREST))
							{
								SendClientMessage(playerid, 0x999999FF, "Время заключения не истекло");
								SetPlayerSpawnPos(playerid);
								return 1;
							}
						}
					}
					SetPlayerPosEx
					(
						playerid,
						GetTeleportData(action_id, T_POS_X),
						GetTeleportData(action_id, T_POS_Y),
						GetTeleportData(action_id, T_POS_Z),
						GetTeleportData(action_id, T_ANGLE),
						GetTeleportData(action_id, T_INTERIOR),
						GetTeleportData(action_id, T_VIRTUAL_WORLD)
					);
				}
			}
			case PICKUP_ACTION_TYPE_TEAM_RAZDEV:
			{
                BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"Для взаимодействия нажмите ~g~ ALT\",3000,0,18,0]')");
			}
			case PICKUP_ACTION_TYPE_FREE_HEAL:
            {
				if(GetPlayerHealthEx(playerid) == 100) return SendClientMessage(playerid, 0xFF6600FF, "Вы не нуждаетесь в лечении");
                Dialog
                (
                    playerid, DIALOG_FREE_HEAL, DIALOG_STYLE_MSGBOX,
                    "Экспресс лечение",
                    "Курс экспресс-лечения стоит 2.000.000 руб. и восполняет здоровье до 70%\n\n"\
                    "Хотите пройти его?",
                    "Да", "Нет"
                );
            }
			case PICKUP_ACTION_TYPE_FREE_EAT:
			{
				if(GetPlayerLevel(playerid) > 3) return SendClientMessage(playerid, 0xFF6600FF, "* Бесплатная еда доступна только до 3-го уровня");
				if(GetPlayerData(playerid, P_EAT) == 100) return SCM(playerid, 0xCECECEFF, "* Вы не голодны");
                Action(playerid, "взял(а) бесплатную еду для бедных");
				SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
			    SetPVarInt(playerid,"respeat",1);
				SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
			    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
			}
			case PICKUP_ACTION_TYPE_GOVS_EAT:
			{
				if(!(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_FSB)) return
				   SendClientMessage(playerid, 0xFF6600FF, "* Вы не состоите в гос. структурах");
				if(GetPlayerData(playerid, P_EAT) == 100) return SCM(playerid, 0xCECECEFF, "* Вы не голодны");
                Action(playerid, "взял(а) картошку фри со спранком");
				SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
			    SetPVarInt(playerid,"respeat",1);
				SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
			    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
			}
			case PICKUP_ACTION_TYPE_FIX_CAR:
			{
				ShowPlayerFixCar(playerid);
			}
			case PICKUP_ACTION_TYPE_SKLAD:
			{
				new fam_id = GetPlayerFamily(playerid);
				if(!GetPlayerData(playerid, P_FAMILY)) return GameText(playerid, "~r~Доступ~n~Запрещен", 3000, 2);
				if(g_family[fam_id][F_HOUSE_ID] != GetPlayerInHouse(playerid)) return GameText(playerid, "~r~Доступ~n~Запрещен", 3000, 2);
				if(g_family[fam_id][F_GANG] == 1)
				{
					if(GetFamilyData(fam_id, F_SKLAD_ST) == 1) return GameText(playerid, "~r~Закрыто", 3000, 2);
					if(status_authorization[playerid] != 1) return true;
					inventory_sklad_id[playerid] = fam_id;
					UpdateWeapons(playerid), LoadInventory(playerid), StateCheck(playerid);
					STRING_GLOBAL[0] = EOS;
					if(inventory_bag_id[playerid] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[[2,\"Рюкзак\",%d.00,50.00,30],[3,\"Склад\",0.10,50.00,30]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoneyEx(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), GetWorkLoadItems(playerid, 1), load_inventory[playerid]);
					else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[[3,\"Склад\",0.10,50.00,30]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoneyEx(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), load_inventory[playerid]);
					BitStream_2(playerid, s_CefInterface, t_CefShow, "InventoryNew", STRING_GLOBAL);
				}
			}
			case PICKUP_ACTION_TYPE_ATM:
			{
				ShowPlayerATMDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_WEARSPORT:
			{
				new random1 = random(sizeof(gRandom));
				SetPlayerSkin(playerid, gRandom[random1]);
			}
			case PICKUP_ACTION_TYPE_SHIPM:
			{
   				BitStream_2(playerid, s_CefInterface, t_CefShow, "MiamiTicket", "{\"playerPrice\": 100000, \"vehiclePrice\": 150000}");
			}
			case PICKUP_ACTION_TYPE_BANK:
			{
                BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"Для взаимодействия нажмите ~g~ ALT\",3000,0,18,0]')");
			}
			case PICKUP_ACTION_TYPE_TEMP_JOB:
			{
				new job = GetPlayerTempJob(playerid);
				if(job != action_id && IsPlayerInJob(playerid) || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE)
				{
					job = TEMP_JOB_NONE - 1;
				}
				switch(action_id)
				{
					case TEMP_JOB_MINER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_MINER_START, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Работа шахтера",
								"{FFFFFF}Вы хотите устроиться на работу шахтера?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_MINER_END, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Работа шахтера",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_FACTORY_TRUCKER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Завод",
								"{FFFFFF}Вы хотите начать работу в отделе доставки исходных материалов?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Завод",
								"{FFFFFF}Закончить работу в отделе доставки исходных материалов?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_FACTORY:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Завод",
								"{FFFFFF}Вы хотите начать работу в производственном цеху?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Завод",
								"{FFFFFF}Закончить работу в производственном цеху?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_INKAS:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_INKAS_START, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Работа инкассатора",
								"{FFFFFF}Вы хотите устроиться на работу инкассатора?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_INKAS_END, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Работа инкассатора",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться сюда закончите текущую работу");
					}
                    case TEMP_JOB_LUMBERJACK:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LUMBERJACK_ST, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Работа лесоруба",
								"{FFFFFF}Вы хотите устроиться на работу лесоруба?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LUMBERJACK_END, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Работа лесоруба",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
				}
            }
			case PICKUP_ACTION_TYPE_MINER_SELL_M:
			{
				ShowPlayerBuyMetalDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_FACTORY_MET:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
				{
					new j_state = GetPlayerTempJobState(playerid);
					switch(j_state)
					{
						case TEMP_JOB_STATE_FACTORY_TAKE_MET:
						{
							new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);
							new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);
							new take_metall = random(2) + 1;
							if(factory_metal > take_metall && factory_fuel > (take_metall * 6))
							{
								SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal - take_metall);
								UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);
								new fmt_str[16];
								SetPVarInt(playerid, "factory_take_metall", take_metall);
								format(fmt_str, sizeof fmt_str, "~b~~h~+%d kg", take_metall);
								GameText(playerid, fmt_str, 4000, 2);
								SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATE_P);
							}
							else GameText(playerid, "~r~нет топлива или металла", 4000, 3);
						}
						case TEMP_JOB_STATE_FACTORY_CREATE_P:
						{
							SendClientMessage(playerid, 0x999999FF, "Вы уже взяли металл");
						}
					}
				}
			}
			case PICKUP_ACTION_TYPE_LUMBERJACK_P:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_PUT)
					{
						new randomcase = random(10);
						if(randomcase == 7) Dialog(playerid, DIALOG_CASE_TWO, DIALOG_STYLE_MSGBOX, "Предложение", "Вы нашли кейс, хотите забрать его себе?", "Да", "Нет");
						if(randomcase == 2) Dialog(playerid, DIALOG_KEY_ONE, DIALOG_STYLE_MSGBOX, "Предложение", "Вы нашли `Ключ от кейса`, хотите забрать его себе?", "Да", "Нет");
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 1, 0, 1, 0, 800, 0);
						RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);
						new fmt_text[65];
						format(fmt_text, sizeof fmt_text, "Дрова доставлены на склад! Всего перенесено дров: {FFFFFF}%d шт", GetPlayerJobLoadItems(playerid));
						SendClientMessage(playerid, 0xB0C4DEFF, fmt_text);
						SetPlayerLumberJackChopCP(playerid);
					}
				}
             }
			case PICKUP_ACTION_TYPE_SHIN:
			{
                Dialog(playerid, DIALOG_SHINOMONTAJ, DIALOG_STYLE_LIST, "Шиномонтаж","1. Заказать смену дисков","Далее", "Закрыть");
			}
			case PICKUP_ACTION_TYPE_BIZ_ENTER:
			{
				SetPVarInt(playerid, "pickup_biz", action_id);
				ShowBussinesInfo(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_BIZ_EXIT:
			{
				new in_biz = GetPlayerInBiz(playerid);
				if(in_biz != -1)
				{
					new type = GetBusinessData(in_biz, B_INTERIOR);
					if(action_id == type)
					{
						SetPlayerPosEx
						(
							playerid,
							GetBusinessData(in_biz, B_EXIT_POS_X),
							GetBusinessData(in_biz, B_EXIT_POS_Y),
							GetBusinessData(in_biz, B_EXIT_POS_Z),
							GetBusinessData(in_biz, B_EXIT_ANGLE),
							0,
							0
						);
						SetPlayerInBiz(playerid, -1);
                        if(GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_BY || GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_BY_NIZ || GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_BY_SRED)
						{
						    SetPVarInt(playerid, "in_by", 0);
						}
                        if(GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_WOSH)
						{
						}
						if(GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_CAR_TUNING)
						{
							new vehicleid = GetPlayerOwnableCarLast(playerid);
							if(vehicleid != INVALID_VEHICLE_ID)
							{
								SetVehiclePos(vehicleid, vehicle_temp_position[playerid][0], vehicle_temp_position[playerid][1], vehicle_temp_position[playerid][2]);
								SetVehicleZAngle(vehicleid, vehicle_temp_position[playerid][3]);
								LinkVehicleToInterior(vehicleid, 0);
								SetVehicleVirtualWorld(vehicleid, 1);
							}
						}
						BitStream_1(playerid, s_CefInterface, t_CefHide, "Darkness");
					}
				}
			}
			case PICKUP_ACTION_TYPE_INKAS_ARM:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_INKAS)
				{
				  SetPlayerArmour(playerid, 100);
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете инкассатором");
			}
			case PICKUP_ACTION_TYPE_BIZ_HEALTH:
			{
			    Dialog
				(
					playerid, DIALOG_HEALTH_BUSINESS, DIALOG_STYLE_MSGBOX,
					"Услуги медпункта",
	                "{FFFFFF}Услуги медпункта стоят {9ACD32}3500 рублей\n"\
					"{FFFFFF}Вы хотите ими воспользоваться?",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_KONDITER:
			{
                BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"Для взаимодействия нажмите ~g~ ALT\",3000,0,18,0]')");
			}
			case PICKUP_ACTION_TYPE_BIZ_APTEKA:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_APTEKA)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_AVTOZAP:
			{
                BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"Для взаимодействия нажмите ~g~ ALT\",3000,0,18,0]')");
			}
			case PICKUP_ACTION_TYPE_BIZ_GARDEN:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_SHOP_GARDEN)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_CELL_SALON:
			{
                BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"Для взаимодействия нажмите ~g~ ALT\",3000,0,18,0]')");
			}
			case PICKUP_ACTION_TYPE_HOUSE:
			{
			    SetPVarInt(playerid, "pickup_house", action_id);
			}
            case PICKUP_ACTION_TYPE_GARAGE:
			{
			    SetPVarInt(playerid, "pickup_garage", action_id);
			}
			case PICKUP_ACTION_TYPE_GARAGE_SKLAD:
			{
			}
			case PICKUP_ACTION_TYPE_GARAGE_EXIT:
			{
			    callcmd::exit(playerid, "");
			}
			case PICKUP_ACTION_TYPE_BARBER:
			{
                BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"Для взаимодействия нажмите ~g~ ALT\",3000,0,18,0]')");
			}
			case PICKUP_ACTION_TYPE_HOUSE_HEALTH:
			{
				new houseid = GetPlayerInHouse(playerid);
				if(houseid != -1)
				{
					new type = GetHouseData(houseid, H_TYPE);
					if(IsPlayerInRangeOfPoint(playerid, 4.0, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z)))
					{
						SetPlayerHealthEx(playerid, 100.0);
						GameText(playerid, "~b~~h~Вы успешно вылечились", 3000, 2);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CLOTHING:
			{
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_ENT:
			{
				EnterPlayerToEntrance(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_EXI:
			{
				new entranceid = GetPlayerInEntrance(playerid);
				if(entranceid != -1)
				{
					if(GetPlayerInEntranceFloor(playerid) == 0)
					{
						SetPlayerPosEx
						( 
							playerid,
							GetEntranceData(entranceid, E_EXIT_POS_X),
							GetEntranceData(entranceid, E_EXIT_POS_Y),
							GetEntranceData(entranceid, E_EXIT_POS_Z),
							GetEntranceData(entranceid, E_EXIT_ANGLE),
							0,
							0
						);
						SetPlayerInEntrance(playerid, -1);
						SetPlayerInEntranceFloor(playerid, -1);
					}
				}
			}
			case PICKUP_ACTION_TYPE_SELLSIM:
			{
			    Dialog
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					"{FF6666}Продажа SIM-карты игроку",
					"}Продать SIM-карту можно в любом магазине 24/7\n\n\
					Для того чтобы продать SIM-карту {FFAF00}Используйте:{FFFFFF} /sellsim\n\
					{Вы и покупатель должны находиться в магазине.",
					"Закрыть", ""
				);
			}
			case PICKUP_ACTION_TYPE_INFO_BOLKA:
			{
			    ShowPlayerInfoHospital(playerid);
			}
			case PICKUP_ACTION_BLACK_MARKET:
            {
                Dialog
                (
                    playerid, -1, DIALOG_STYLE_MSGBOX,
                    "Чёрный рынок",
                    "Чёрный рынок представляет собой подпольный аукцион, на который периодически\n"\
                    "привозятся лоты в виде транспорта, одежды или аксессуаров. Порой аукцион\n"\
                    "за более эксклюзивные лоты может проходить не за игровую валюту, а за\n"\
                    "донат рубли.\n\n"\
                    "Вам не обязательно иметь свободное место в инвентаре либо свободные слоты\n"\
                    "личного транспорта для участия в аукционе: после выигрыша лот отправляется\n"\
                    "на склад (жёлтая стрелка), где вы и сможете забрать его в любое время.\n"\
                    "Если до конца аукциона осталось мало времени и произошёл рестарт\n"\
                    "аукцион будет продлен на 15 минут автоматически.\n\n"\
                    "При наличии лотов аукцион начинается в 12:00.\n"\
                    "Длительность аукциона: 12 часов.",
                    "Закрыть", ""
                );
            }
			case PICKUP_JOB_MUSOR:
            {
                Dialog
                (
                    playerid, -1, DIALOG_STYLE_MSGBOX,
                    "Работа мусоровоза!",
                    "Работа мусоровоза — это не просто грузить отходы, это целая система, обеспечивающая чистоту и порядок. Чтобы начать эту захватывающую работу, вам нужно подойти на парковку мусоровозов. После этого следите за\n"\
                    "доступными автомобилями и арендуйте мусоровоз. Имейте в виду, что аренда обойдется вам в 5 000 000 рублей, но не отпугивайтесь от этой суммы, поскольку ваша перспектива заработка значительно превышает затраты.\n\n"\
                    "После того как вы арендовали мусоровоз, вам необходимо ввести команду /trash, чтобы активировать рабочий процесс. Этот шаг важен для того, чтобы система распознала вас как работника заниматься вывозом отходов. Затем на\n"\
                    "своем GPS-устройстве вам нужно отметить местоположение мусорной контейнерной площадки, чтобы вы знали, куда ехать и что забирать. Следует отметить, что работа требует внимательности — нужно четко следить за\n"\
                    "отметками, чтобы не пропустить ни одной мусорки.\n\n"\
                    "Когда вы доедете до указанного места, начинайте забирать мусор. Ваша зарплата будет зависеть от количества меток, которые вы успешно обработаете. За одну метку или бак мусора вы получите от 10 000 000 до 25 000 000\n"\
                    "рублей, что делает эту деятельность одной из самых доходных на сервере. Кроме того, за свою работу вы также можете заработать от 1 до 40 донат-монет, которые будут существенно поднимать вашу игровую экономику и\n"\
                    "улучшать ваш статус на сервере.\n\n"\
                    "Работа мусоровоза — это не только способ быстро заработать, но и возможность активно участвовать в жизни общего виртуального сообщества, помимо всего этого, обеспечивая чистоту и порядок в игровом мире. Не упустите\n"\
                    "шанс попробовать эту прибыльную работу и станьте частью важной услуги, которую так ценят игроки и жители вашего сервера!",
                    "Закрыть", ""
                );
            }
			case DIALOG_FSB_O:
            {
				{
					Dialog(playerid, DIALOG_FSB_O, DIALOG_STYLE_TABLIST_HEADERS,
					"Внедренее в организацию!",
					"{f2e8c9}Организация\t{FFFFFF}Скин\t{ccffcc}Пол\n"\
					"{f2e8c9}МВД \t{FFFFFF}ДПС\t {ccffcc}(Жен.)\n"\
					"{f2e8c9}МВД \t{FFFFFF}ДПС\t {ccffcc}(Муж.)\n"\
					"{f2e8c9}МВД \t{FFFFFF}ППС\t {ccffcc}(Жен.)\n"\
					"{f2e8c9}МВД \t{FFFFFF}ППС\t {ccffcc}(Муж.)\n"\
					"{f2e8c9}МВД \t{FFFFFF}ППС Гром\t {ccffcc}(Муж.)\n"\
					"{f2e8c9}МВД \t{FFFFFF}МВД Генерал\t {ccffcc}(Муж.)\n"\
					"{f2e8c9}Армия\t{FFFFFF}Военослужещий \t {ccffcc}(Муж.)\n"\
					"{f2e8c9}Армия \t{FFFFFF}Военная полиция \t {ccffcc}(Муж.)\n"\
					"{f2e8c9}Армия \t{FFFFFF}Генерал армии\t {ccffcc}(Муж.)\n"\
					"{f2e8c9}ФСИН \t{FFFFFF}Лейтинант \t {ccffcc}(Муж.)\n"\
					"{f2e8c9}Городская больница \t{FFFFFF}Скорая помощь(Синия одежда) \t {ccffcc}(Муж.)\n"\
					"{f2e8c9}Городская больница \t{FFFFFF}Скорая помощь(Красная одежда) \t {ccffcc}(Муж.)\n"\
					"{f2e8c9}Городская больница \t{FFFFFF}Глав.Врачь \t {ccffcc}(Муж.)\n",
					"Переодеться", "Выйти");
				}
            }
			case PICKUP_ACTION_TYPE_SELL_CAR:
			{
				page_cars[playerid] = 1;
				type_page_cars[playerid] = 2;
				ShowOwnableCars(playerid, DIALOG_SELL_CAR, page_cars[playerid]);
			}
			case PICKUP_ACTION_TYPE_TRAILER:
			{
				BitStream_1(playerid, s_CefInterface, t_CefShow, "TrailerShop");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TrailerShop').trailers = [{ name:\"SWIFT QUATTRO\", image:\"1.png\",price:1400000}, { name:\"HOBBY 440\", image:\"2.png\",price:1600000},{ name:\"BUERSTNER\", image:\"3.png\",price:1200000}]");
			}
			case PICKUP_ACTION_TYPE_FREE_VELIK:
			{
				 Dialog
				(
					playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
					"{"#cW"}Аренда скутера",
					"{"#cW"}Вы хотите арендовать скутер?\n\n"\
					"{"#cW"}Стоймость: {d2a906}500.000 руб\n"\
					"{"#cW"}Длительность аренды: {e3e001}60 мин\n\n"\
					"{"#cW"}Данное транспортное средство предназначено для выгодного\n"\
					"{"#cW"}использования на начальных уровнях.",
					"Аренда", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_SRED:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_MARKET_SRED, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}Нажмите кнопку 'Далее'\n\
					Чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_GRUZ:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_MARKET_GRUZ, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}Нажмите кнопку 'Далее'\n\
					Чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_HOME:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_MARKET_HOME, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}Нажмите кнопку 'Далее'\n\
					Чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_NIZ:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_MARKET_NIZ, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}На территории авторынка могут находиться не все модели транспорта, которые\n\
					можно приобрести (некоторые отсутствуют из-за того, что их взяли на прокат)\n\
					Нажмите кнопку 'Далее' чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_PAINT_BALL:
			{
   				BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"Для взаимодействия нажмите ~g~ ALT\",3000,0,18,0]')");
			}
			case PICKUP_ACTION_TYPE_INFOMVD:
			{
				Dialog
			 	(
					playerid, DIALOG_INFOMVD, DIALOG_STYLE_MSGBOX,
				    "{"#cGold"}Информация о организации",
					"{"#cW"}Министерство внутренних дел\n"\
					"{"#cW"}Данная организация занимается обеспечением безопасности и охраной жизни граждан области, поимкой\n"\
					"{"#cW"}преступников, раскрытием преступлений, пресечение беспорядков на улицах и в общественных местах.\n\n"\
					"{"#cW"}Дополнительная информация:\n"\
					"{"#cW"}Номер телефона для связи с МВД: 02\n\n"\
					"{"#cW"}Бюджет организации: {66CC00}446.113.533 руб\n\n"\
					"{"#cW"}Должность \t Зарплата\n"\
					"{"#cW"}Рядовой \t {66CC00}33.300 руб\n"\
					"{"#cW"}Сержант \t {66CC00}40.360 руб\n"\
					"{"#cW"}Старшина \t {66CC00}45.420 руб\n"\
					"{"#cW"}Прапорщик \t {66CC00}50.485 руб\n"\
					"{"#cW"}Лейтенант \t {66CC00}55.540 руб\n"\
					"{"#cW"}Капитан \t {66CC00}60.600 руб\n"\
					"{"#cW"}Майор \t {66CC00}70.725 руб\n"\
					"{"#cW"}Подполковник \t {66CC00}80.840 руб\n"\
					"{"#cW"}Полковник \t {66CC00}101.565 руб\n"\
					"{"#cW"}Генерал \t {66CC00}121.130 руб",
					"Хорошо",""
				);
   			}
			case PICKUP_ACTION_TYPE_POPOLNENIE:
			{
                BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"Для взаимодействия нажмите ~g~ ALT\",3000,0,18,0]')");
				Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF9900}Автосалон", "{FFFFFF}Вы находитесь в автосалоне, где {FF0000}пополняются машины{FFFFFF} каждый день в {FF9900}19:00 МСК{FFFFFF}\n{FFFFFF}Пожалуйста, подождите{FFFFFF} пока завезут вашу любимую машину\n{FF9900}Ваш выбор: {FF0000}Подождать{FFFFFF} или {FF0000}Выйти{FFFFFF}", "Подождать", "Выйти");
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_ENT:
			{
				SetPlayerPosEx(playerid, 5.4881, -27.7033, 1085.9291, 180.0, _, _, false);
				SetCameraBehindPlayer(playerid);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_EXI:
			{
				SetPlayerPosEx(playerid, 5.4975, -26.3967, 1080.9968, 180.0, _, _, false);
				SetCameraBehindPlayer(playerid);
			}
			case PICKUP_ACTION_TYPE_GIFT:
			{
   				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, 0, 0, 0, 0);
			    new rand = random(30);
				switch(rand)
				{
				    case 1..2:
				    {
				        SendClientMessage(playerid, 0xCECECEFF, "Вы нашли подарок. Ваш приз: Оружейные навыки.");
	  	        		SetPlayerData(playerid, P_SKILL_SDPISTOL, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", 100);
				        SetPlayerData(playerid, P_SKILL_DEAGLE, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_deagle", 100);
				        SetPlayerData(playerid, P_SKILL_SHOTGUN, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_shotgun", 100);
				        SetPlayerData(playerid, P_SKILL_MP5, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_mp5", 100);
				        SetPlayerData(playerid, P_SKILL_AK47, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_ak47", 100);
				        SetPlayerData(playerid, P_SKILL_M4, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_m4", 100);
				        SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", 100);
						RouletteStarted[playerid] = 0;
				    }
				    case 7..8:
				    {
						new money_count = RandomEx ( 5, 45 ) ;
						new query_string[148];
						GivePlayerDonate(playerid, money_count, "Приз подарка", true, true);
						format(query_string, sizeof (query_string), "Вы нашли подарок. Ваш приз: %d руб", money_count);
						SendClientMessage(playerid, 0xCECECEFF, query_string);
						RouletteStarted[playerid] = 0;
					}
					case 9..10:
					{
						new drugs_count = RandomEx(1, 5);
						GivePlayerExp(playerid, drugs_count);
						new query_string[168];
					    RouletteStarted[playerid] = 0;
						format(query_string, sizeof query_string, "Вы нашли подарок. Ваш приз: %d очков опыта.", drugs_count);
						SendClientMessage(playerid, 0xCECECEFF, query_string);
					}
					case 11..12:
					{
						new money_count = RandomEx ( 2500, 5000 ) ;
				        GivePlayerMoneyEx(playerid, money_count, "Приз подарка", true, true);
						new dialog_string[168];
						RouletteStarted[playerid] = 0;
						format(dialog_string, sizeof dialog_string, "Вы нашли подарок. Ваш приз: %d рублей.", money_count);
						SendClientMessage(playerid, 0xCECECEFF, dialog_string);
					}
				}
			}
			case PICKUP_ACTION_TYPE_MINER_CARRI:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER
				&& GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					if(!miner_carriage[0][MC_STATUS])
					{
						new fmt_str[64];
						new rand = random(45) + 16;
						new items = GetPlayerJobLoadItems(playerid) + rand;
						new randomcase = random(10);
						if(randomcase == 7) Dialog(playerid, DIALOG_CASE_TWO, DIALOG_STYLE_MSGBOX, "Предложение", "Вы нашли кейс, хотите забрать его себе?", "Да", "Нет");
						if(randomcase == 2) Dialog(playerid, DIALOG_KEY_ONE, DIALOG_STYLE_MSGBOX, "Предложение", "Вы нашли `Ключ от кейса`, хотите забрать его себе?", "Да", "Нет");
						RemovePlayerAttachedObjects(playerid);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);
						ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
						SetPlayerJobLoadItems(playerid, items);
                        SetPVarInt(playerid, "miner_1",0);
						format(fmt_str, sizeof fmt_str, "Вы доставили в вагонетку {FF9900}%d кг {66CC00}руды", rand);
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);
						format(fmt_str, sizeof fmt_str, "Общее количество добытого сырья: {FF9900}%d кг", items);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);
						format(fmt_str, sizeof fmt_str, "+ %d кг", rand);
						SetPlayerChatBubble(playerid, fmt_str, 0x66CC00FF, 10.0, 2000);
						miner_carriage[0][MC_ORE_COUNT] += rand;
						if(miner_carriage[0][MC_ORE_COUNT] >= 10000)
						{
							DestroyPickup(miner_carriage[0][MC_PICKUP_ID]);
							miner_carriage[0][MC_PICKUP_ID] = -1;
							SetTimerEx("MinerCarriageMove", 7_000, false, "i", 0);
							UpdateDynamic3DTextLabelText(miner_carriage[0][MC_LABEL], 0xFFFF00FF, "Ожидание...");
						}
						else
						{
							format(fmt_str, sizeof fmt_str, "Загрузка\n\n{FFCC00}Количество руды\n%d / 10000 кг", miner_carriage[0][MC_ORE_COUNT]);
							UpdateDynamic3DTextLabelText(miner_carriage[0][MC_LABEL], 0x66CC00FF, fmt_str);
						}
						SetPlayerMinerJobLoadCP(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_ARMORY:
			{
				switch(action_id)
				{
					case ARMORY_TYPE_ARMOR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_ARMY)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");
						Dialog
						(
							playerid, DIALOG_ARMORY1, DIALOG_STYLE_LIST,
							"{FFD83D}Вооруженные силы",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Дигл\n"\
							"4. Тайзер\n"\
							"5. АК-47",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_SECURITY:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");
						if(!(1 <= GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам службы охраны");
						Dialog
						(
							playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
							"{FFD83D}Правительство области",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Дигл\n"\
							"4. Пистолет с глушителем\n"\
							"6. АК-47\n"\
							"7. Фотоаппарат",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_DPS:
					{
						if(!(2 <= GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам высшего ранга");
						Dialog
						(
							playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
							"{FFD83D}Дорожно-патрульная служба",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Дигл\n"\
							"4. Пистолет с глушителем\n"\
							"6. АК-47\n"\
							"7. Фотоаппарат",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_POLICE:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_FSIN && GetPlayerTeamEx(playerid) != TEAM_FSB && GetPlayerTeamEx(playerid) != TEAM_PPS)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");
						if(!(2 <= GetPlayerJob(playerid) && GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам высшего ранга");
						Dialog
						(
							playerid, DIALOG_ARMORY1, DIALOG_STYLE_LIST,
							"{FFD83D}Полицейская служба",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Дигл\n"\
							"4. Тайзер\n"\
							"5. АК-47\n"\
							"6. Жезл\n"\
							"7. Фотоапарат\n"\
							"8. Тауметр\n"\
							"9. Аппарат для диагностики",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_MCHS:
					{
						if(!(2 <= GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам высшего ранга");
						Dialog
						(
							playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
							"{FFD83D}МЧС",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Дигл\n"\
							"4. Пистолет с глушителем\n"\
							"6. АК-47\n"\
							"7. Фотоаппарат",
							"Взять", "Отмена"
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_TUN:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_TUNING, DIALOG_STYLE_LIST,
					"{FFD83D}Станция тех.обслуживания",
					"1. Перекраска транспорта\t{00CC00}100000 руб\n"\
					"2. Смена дисков\t\t\t{00CC00}250000 руб",
					"Выбрать", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_TIR:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_TIR, DIALOG_STYLE_LIST,
					"{FFD83D}Тир 'Point'",
					"1. Desert-Eagle\t\t{FFD700}2000 руб\n"\
					"2. ShotGun\t\t\t{FFD700}2000 руб\n"\
					"3. Снайперская винтовка\t{FFD700}2000 руб\n"\
					"4. MP-5\t\t\t\t{FFD700}2000 руб\n"\
					"5. SD-Pistol\t\t\t{FFD700}2000 руб",
					"Купить", "Отмена"
				);
   			}
			case PICKUP_ACTION_TYPE_BIZ_GUN:
			{
				{
					Dialog
					(
						playerid, DIALOG_BIZ_GUN, DIALOG_STYLE_TABLIST_HEADERS,
						"Покупка оружие",
						"Товар \t кол-во \tСтоимость\n"\
						"СВД \t 100 \t 30.000.000 руб\n"\
						"Бита \t 1 \t 5.000.000 руб\n"\
						"Обрез \t 100 \t10.000.000 руб\n"\
						"Desert Eagle \t 100 \t 13.000.000 руб\n"\
						"MP-5\t 100 \t 25.000.000 руб\n"\
						"АК-74М \t 100 \t 25.000.000 руб\n"\
						"М4 \t 100 \t 30.000.000 руб",
						"Выбор", "Закрыть"
					);
					return true;
				}
			}
   		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{	
	new hour;
	gettime(hour);
	SetWorldTime(hour);
	if(GetPVarInt(playerid, "Login_1") != 1) 
	{
		printf("["DETECT_ACH"] Игрок %s попытался заспавниться не авторизовавшись", GetPlayerNameEx(playerid)); 
		Kick(playerid);
	}
	callcmd::return_acsses(playerid);
	ResetWeapons(playerid);
	StopAudioStreamForPlayer(playerid);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.destroySound(10311, 30)");
	SetPlayerData(playerid, P_IN_ENTRANCE,		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE_FLOOR,-1);
	InfoJailTime(playerid);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(!newinteriorid)
    {
        new hour;
        gettime(hour, _, _);
        SetPlayerTime(playerid, hour, 0);
        return 1;
    }
    SetPlayerTime(playerid, 12, 0);
	return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_HANDBRAKE || PRESSED(KEY_HANDBRAKE))
	{
		if(GetPlayerData(playerid, P_TARGET_ID) == INVALID_PLAYER_ID)
		{
			new targetid = GetPlayerTargetPlayer(playerid);
			if(targetid != INVALID_PLAYER_ID)
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('ScreenNotification').add('[1,\"Взаимодействие с человеком\",\"Для взаимодействия используйте клавишу {FF5B1D}R\",\"F9B82E\",5000]')");
				SCM(playerid, 0xf9b82eFF, "[Взаимодействие с человеком] {FFFFFF}Для взаимодействия используйте клавишу {ff5b1d}R");
			}
		}
	}
    if (IsPlayerInAnyVehicle(playerid)) {
        if (newkeys & KEY_FIRE) { 
            Megafon(playerid);
			Megafonmo(playerid);
        }
    }	
    if(newkeys & 1024)
	{
        openRaffleShop(playerid);
    }	
    if(newkeys & 1024)
	{
        ToiletJail(playerid);
    }	
	if(newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -1668.2858,-2826.2517,1004.8162))
		{
			if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");
			Loudspeaker(playerid);
		}
	}	
    if(newkeys & 1024) {
    	if(IsPlayerInRangeOfPoint(playerid, 2.0, -3626.3821,3229.2583,317.6395)) {
            OpenTLavka(playerid);
		}
    }	
	if(newkeys & 1024) 
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1711.7368, -2811.9382, 1004.8141))
		{
			if(GetPlayerData(playerid, P_JAIL))
			{
				NotFoudTurm(playerid);
			}
		}
	}
	if (newkeys & 1024)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, 962.6889,-1965.2474,37.0288))
		{
			{
				Dialog(playerid, DIALOG_START_UGONKA, DIALOG_STYLE_MSGBOX, "Бырыга Виталий", "ВЫ уверены что хотите взять заказ на автоугон машины?", "Да", "Нет");
			}
		}
	}	
	if (newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -1377.1644,5845.6147,75.2045) || IsPlayerInRangeOfPoint(playerid, 2.0, -1375.3518,5771.7632,75.2513) || IsPlayerInRangeOfPoint(playerid, 2.0, -1267.2452,5870.1938,102.2072) || IsPlayerInRangeOfPoint(playerid, 2.0, -1346.3937,5868.8481,102.2663) || IsPlayerInRangeOfPoint(playerid, 2.0, -1182.4801,5841.1323,71.2532) || IsPlayerInRangeOfPoint(playerid, 2.0, -685.4864,5914.4971,69.7530) || IsPlayerInRangeOfPoint(playerid, 2.0, -665.1837,5964.2378,69.6936) || IsPlayerInRangeOfPoint(playerid, 2.0, -605.8196,5958.6484,69.7365) || IsPlayerInRangeOfPoint(playerid, 2.0, -431.7410,5993.0347,106.7471) || IsPlayerInRangeOfPoint(playerid, 2.0, -710.7991,3372.5032,78.3308) || IsPlayerInRangeOfPoint(playerid, 2.0, -770.1851,3372.3606,78.0562) || IsPlayerInRangeOfPoint(playerid, 2.0, -850.4742,3373.2637,78.0014)  || IsPlayerInRangeOfPoint(playerid, 2.0, -756.3052,3292.8477,105.6840) || IsPlayerInRangeOfPoint(playerid, 2.0, -820.3765,3334.0579,105.7040))
		{
			{
				SetPlayerData(playerid, P_HEALTH, 100.0);
				SetPlayerHealthEx(playerid, 100.0);
				GameText(playerid, "~b~+100 здоровья", 4000, 2);
				return 1;
			}
		}
	}	
	if (newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -1389.9951,6079.3555,80.5718) || IsPlayerInRangeOfPoint(playerid, 2.0, -1420.8037,6068.3887,81.0096) || IsPlayerInRangeOfPoint(playerid, 2.0, -1487.3479,6080.0352,82.3720) || IsPlayerInRangeOfPoint(playerid, 2.0, -1525.0974,6067.6143,80.6385) || IsPlayerInRangeOfPoint(playerid, 2.0, -1547.4147,6056.1895,80.5976) || IsPlayerInRangeOfPoint(playerid, 2.0, -1495.8475,6125.1919,80.7214) || IsPlayerInRangeOfPoint(playerid, 2.0, -1372.8329,6029.9834,81.1267) || IsPlayerInRangeOfPoint(playerid, 2.0, -1481.1653,6091.2490,80.6597))
		{
			{
				if(gettime() < GetPVarInt(playerid, "mpi_kd")) return SCMF(playerid, COLOR_GREY, "Вы недавно открывали ящик открыть новый вы сможите через %d сек.", GetPVarInt(playerid, "mpi_kd") - gettime());
		        SetPVarInt(playerid, "mpi_kd", gettime() + 150);
				SetPlayerData(playerid, P_HEALTH, 100.0);
				SetPlayerHealthEx(playerid, 100.0);
				GameText(playerid, "~b~+100 здоровья и брони", 4000, 2);
				SetPlayerArmour(playerid, 100.0);
				switch(random(7))
				{
					case 0:
					{
						GiveWeapon(playerid, 24, 30);
						GiveWeapon(playerid, 28, 110);
						GiveWeapon(playerid, 30, 44);
						GivePlayerDonate(playerid, 5);
					}
					case 1:
					{
						GiveWeapon(playerid, 24, 120);
						GiveWeapon(playerid, 26, 20);
						GivePlayerDonate(playerid, 100);
					}
					case 2:
					{
						GiveWeapon(playerid, 30, 100);
						GiveWeapon(playerid, 26, 50);
						GiveWeapon(playerid, 31, 230);
						GivePlayerDonate(playerid, 30);
					}
					case 3:
					{
						GiveWeapon(playerid, 34, 40);
						GiveWeapon(playerid, 30, 130);
						GivePlayerDonate(playerid, 40);
					}
					case 4:
					{
						GiveWeapon(playerid, 24, 50);
						GiveWeapon(playerid, 34, 40);
						GivePlayerDonate(playerid, 10);
					}
					case 5:
					{
						GiveWeapon(playerid, 34, 40);
						GiveWeapon(playerid, 30, 44);
						GiveWeapon(playerid, 31, 100);
						GivePlayerDonate(playerid, 45);
					}
					case 6:
					{
						GiveWeapon(playerid, 30, 230);
						GiveWeapon(playerid, 31, 30);
						GivePlayerDonate(playerid, 30);
					}
				}
				SendClientMessage(playerid, COLOR_ORANGE, "Вы открыли ящик вам выполо оружие донат-монеты, +100 здоровья и брони!");
				return 1;
			}
		}
	}
	if (newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -1367.5974,5777.2588,70.3331))
		{
			{
   				SetPlayerPos(playerid, -1367.9100,5774.0146,75.2513);
				SendClientMessage(playerid, COLOR_ORANGE, "Вы были телепортированы на чекпоинт!");
				return 1;
			}
		}
	}
	if (newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -1341.2112,5855.7026,97.3363))
		{
			{
   				SetPlayerPos(playerid, -1344.2958,5862.5610,102.2663);
				SendClientMessage(playerid, COLOR_ORANGE, "Вы были телепортированы на чекпоинт!");
				return 1;
			}
		}
	}
	if (newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -658.6159,5950.4038,64.7837))
		{
			{
   				SetPlayerPos(playerid, -665.5892,5960.1953,69.6936);
				SendClientMessage(playerid, COLOR_ORANGE, "Вы были телепортированы на чекпоинт!");
				return 1;
			}
		}
	}
	if (newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -597.9608,5963.3374,69.7365))
		{
			{
   				SetPlayerPos(playerid, -586.8583,5959.6929,69.3314);
				SendClientMessage(playerid, COLOR_ORANGE, "Вы были телепортированы в лаберинт найдите центр и выберитесь с него!");
				return 1;
			}
		}
	}
	if (newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -534.9489,5964.0771,69.3314))
		{
			{
   				SetPlayerPos(playerid, -441.9297,5991.9785,106.7471);
				SendClientMessage(playerid, COLOR_ORANGE, "Вы прошли все испытания, C победой!");
				GameText(playerid, "Вы прошли все испытания~n~C победой!", 3000, 2);
				new fmt_text[93];
				format(fmt_text, sizeof fmt_text, "{FFAF00}[Мероприятие] Игрок %s прошол всю полосу Скилл Тест", GetPlayerNameEx(playerid));
				SendClientMessageToAll(0xFFFFFFFF, fmt_text);
				return 1;
			}
		}
	}
    if(newkeys & 1024) {
        if(IsPlayerInRangeOfPoint(playerid, 7.0, -3994.8853,4092.6680,38.8887))
        {
            STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL,sizeof STRING_GLOBAL,"[%d,[",gettime()+GetPlayerData(playerid, P_NG_CALENDAR)[0]);
            for(new i; i<sizeof kalendbred;i++)
            {
                format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s%d,",STRING_GLOBAL,GetPlayerData(playerid, P_NG_CALENDAR)[kalendbred[i]]);
            }
            strdel(STRING_GLOBAL,strlen(STRING_GLOBAL)-1,strlen(STRING_GLOBAL));
            format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s]]",STRING_GLOBAL);
            BitStream_2(playerid, s_CefInterface, t_CefShow, "NewYearCalendar",STRING_GLOBAL);
        }
    }	
	if(newkeys & 1024) 
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1725.9878, -2806.0325, 1001.4000))
		{
			if(GetPlayerData(playerid, P_JAIL))
			{
				ShowDialogJTrade(playerid);
			}
		}
	}
	if(newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -1671.1748,-2827.0574,1004.8162))
		{
			if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");
			ShowCamera(playerid);
		}
	}		
	if(newkeys & 1024)
	{
		new type = random(2);
		JailUseDoor(playerid, type);
	}	
    if(newkeys & 1024)
    {
        for(new while_you; while_you < sizeof g_metro_station; while_you ++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 1.0, g_metro_station[while_you][PICKUP_POS_X],g_metro_station[while_you][PICKUP_POS_Y],g_metro_station[while_you][PICKUP_POS_Z]))
            {
                STRING_GLOBAL[0] = EOS;
                format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[[1,\"Студенческий билет\",1,%d,%d]]", random(1500), TICKET_PRICE);
                BitStream_2(playerid, s_CefInterface, t_CefShow, "BuyTicket", STRING_GLOBAL);
            }
        }
	}		
    if(newkeys & 1024)
    {
        for (new i = 0; i < MAX_NPCALTPLAYERS; i++)
        {
            new Float:playerPos[3], Float:npcPos[3];
            GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);
            npcPos[0] = npcaltplayer[i][0];
            npcPos[1] = npcaltplayer[i][1];
            npcPos[2] = npcaltplayer[i][2];
            if (GetDistanceBetweenPoints(playerPos[0], playerPos[1], playerPos[2], npcPos[0], npcPos[1], npcPos[2]) <= INTERACTION_DISTANCE)
            {
                page_cars[playerid] = 1;
                type_page_cars[playerid] = 4;
                SetPVarInt(playerid, "to_player", playerid);
                ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SELECT, page_cars[playerid]);
                return 1; 
            }
        }
	}	
	if(newkeys & 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 2813.6899,-2036.2950,21.3944))
		{
			Dialog(playerid, dJobPilot, DSL, "Пилот" , "Устройство на работу пилота" , "Выбрать", "Отмена");
		}
	}	
    if(newkeys & 1024)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4.0, 1087.5951,2243.4675,2.0000))
		{
			TradeDrugs(playerid);
		}
    }
	if(g_player_progress_bar_type[playerid] != 0)
	{
		if(newkeys & 65536)
		{
			OnPlayerProgressBar(playerid);
		}
	}
	if(newkeys & 1024)
	{
		if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
		{
			for(new i; i < sizeof g_mine_rack; i++)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 2.5, g_mine_rack[i][0], g_mine_rack[i][1], g_mine_rack[i][2])) continue;
				if(g_player_mine_status[playerid] == 0)
				{
					g_player_mine_status[playerid] = 1;
					SCM(playerid, 0xb1cbe5FF, "Теперь вам необходимо найти рудное месторождение: осматривайте стены.");
					GameText(playerid, "Вы взяли инструмент~n~Отыщите рудное месторождение", 3000, 2);
					RemovePlayerAttachedObjects(playerid);
					SetPlayerAttachedObject(playerid, 0, 17114, 6, 0.0290, 0.1280, 0.1020, -24.0000, -14.8000, 0.0000, 1.0000, 1.0000, 1.0000, 0, 0);
					ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				}
			}
			for(new i; i < MAX_MINE_ORE; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.5, g_mine_ore_pos[i][MOP_DOWN][0], g_mine_ore_pos[i][MOP_DOWN][1], g_mine_ore_pos[i][MOP_DOWN][2]))
				{
					if(g_player_mine_status[playerid] == 1)
					{
						if(g_mine_ore[i][MO_OWNER_ID] != -1 && g_mine_ore[i][MO_OWNER_ID] != playerid) return 1;
						if(g_mine_ore[i][MO_OWNER_ID] == -1)
							g_player_mine_ore[playerid] = i,
							g_mine_ore[i][MO_OWNER_ID] = playerid;
						g_player_progress_bar_type[playerid] = 3;
						g_player_progress_bar[playerid] = 0;
						BitStream_2(playerid, s_CefInterface, t_CefShow, "ProgressBar", "[[\"Нажимайте Y<br>с небольшим интервалом\", 0, 1000]]");
						BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.playSound('sounds/mine/sfx_drilling_mine_long_loop2.wav', 1, 6, 0.50)");
						ApplyAnimationEx(playerid, "SHOP", "SHP_GUN_AIM", 4.0, true, 0, 0, 1, 0, 0, USE_ANIM_TYPE_NONE);
						SetPlayerAttachedObject(playerid, 0, 17114, 6, 0.010, -0.02, 0.02, 64.0, -100.8, 0.0, 1.0, 1.0, 1.0, 0, 0);
						BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
					}
					break;
				}
			}
			if(IsPlayerInDynamicArea(playerid, g_player_mine_sphere[playerid]))
			{
				if(g_player_mine_status[playerid] == 8)
				{
					g_player_mine_status[playerid] = 9;
					new id = g_player_mine_ore[playerid];
					if(IsValidDynamicObject(g_player_mine_object[playerid])) 
					DestroyDynamicObject(g_player_mine_object[playerid]);
					g_player_mine_object[playerid] = INVALID_OBJECT_ID;
					if(IsValidDynamic3DTextLabel(g_mine_ore[id][MO_LABEL])) 
					DestroyDynamic3DTextLabel(g_mine_ore[id][MO_LABEL]);
					g_mine_ore[id][MO_LABEL] = Text3D: INVALID_3DTEXT_ID;
					RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 17108, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0, 0);
					GameText(playerid, "Отвезите тележку к вагонетке", 3000, 2);
					ApplyAnimationEx(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 0);
					new random_vagon = random(4);
					g_player_mine_cp[playerid] = 10;
					SetPlayerCheckpoint(playerid, g_mine_vagon[random_vagon][0], g_mine_vagon[random_vagon][1], g_mine_vagon[random_vagon][2], 2.0);
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				}
			}
		}
	}
	if(newkeys & 1024)
	{
		OpenPlayersContainers(playerid);
		OpenItemContainers(playerid);
		for(new i; i < MAX_SVALKA_CARS; i++)
		{
			if(g_svalka_cars[i][S_CAR_TIME] == 0) continue;
			if(IsPlayerInRangeOfPoint(playerid, 4.0, g_svalka_pos_cars[i][0], g_svalka_pos_cars[i][1], g_svalka_pos_cars[i][2])) return OnPlayerOpenDump(playerid, i, 1);
		}
		for(new i; i < MAX_SVALKA_ITEMS; i++)
		{
			if(g_svalka_items[i][S_ITEM_TIME] == 0) continue;
			if(IsPlayerInRangeOfPoint(playerid, 2.0, g_svalka_pos_items[i][0], g_svalka_pos_items[i][1], g_svalka_pos_items[i][2])) return OnPlayerOpenDump(playerid, i, 2);
		}
		for(new i; i < sizeof g_load_cases_prize; i++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.5, g_load_cases_prize[i][0], g_load_cases_prize[i][1], g_load_cases_prize[i][2])) continue;
			if(g_cases_prize_status[i] == 0) return 1;
			if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
			switch(g_cases_prize_type[i])
			{
				case 0: GiveIteam(playerid, 258, 1, 1, 0);
				case 1:	GiveIteam(playerid, 261, 1, 1, 0);
				case 2:	GiveIteam(playerid, 272, 1, 1, 0);
				case 3:	GiveIteam(playerid, 278, 1, 1, 0);
				case 4:	GiveIteam(playerid, 284, 1, 1, 0);
				case 5:	GiveIteam(playerid, 290, 1, 1, 0);
				case 6:	GiveIteam(playerid, 300, 1, 1, 0);
				case 7:	GiveIteam(playerid, 328, 1, 1, 0);
				case 8:	GiveIteam(playerid, 344, 1, 1, 0);
				case 9:	GiveIteam(playerid, 348, 1, 1, 0);	
			}
			GameText(playerid, "~o~Успешно", 3000, 2);
			SCM(playerid, -1, "{3399FF}Вы успешно получили кейс, взаимодействовать с ним можно через инвентарь");
			ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
			g_cases_prize_status[i] = 0;
			if(IsValidDynamicObject(g_cases_prize_object[i])) DestroyDynamicObject(g_cases_prize_object[i]);
			DestroyDynamic3DTextLabel(g_cases_prize_label[i]);
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 2325.9446,-2453.3491,998.6328) || IsPlayerInRangeOfPoint(playerid, 2.0, 2326.7781,-2454.0798,1009.4453))
		{
			new entranceid = GetPlayerInEntrance(playerid);
			if(entranceid != -1)
			{
				new floor = GetPlayerInEntranceFloor(playerid);
				if(floor != -1)
				{
					ShowPlayerEntranceFloorsLift(playerid, entranceid, floor);
				}
			}
		}
        if(IsPlayerInRangeOfPoint(playerid, 6.0, -1759.6050,2894.0237,5.9712)) OnPlayerOpenBlackMarket(playerid);
        if(IsPlayerInRangeOfPoint(playerid, 4.0, 222.2848,-324.3180,1011.3044))
		{
			if(GetPlayerLevel(playerid) < 3) return SendClientMessage(playerid, 0xFF6600FF, "Обмен фишек доступен с 3-го уровня");
			STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[1000,900],[%s,%d]]", GetPlayerMoneyEx(playerid), GetIteam(playerid, 293));
            BitStream_2(playerid, s_CefInterface, t_CefShow, "CasinoExchange", STRING_GLOBAL);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.0826, -311.5590, 1011.7958) || IsPlayerInRangeOfPoint(playerid, 2.5, 203.1743, -316.7673, 1011.7958) || IsPlayerInRangeOfPoint(playerid, 2.5, 199.7251, -306.3018, 1011.7958) || IsPlayerInRangeOfPoint(playerid, 2.5, 199.3137, -311.7275, 1011.7958) || IsPlayerInRangeOfPoint(playerid, 2.5, 203.5401, -306.3388, 1011.7958) || IsPlayerInRangeOfPoint(playerid, 2.5, 199.5047, -316.9757, 1011.7958))
		OpenCasinoBlackJack(playerid);
		callcmd::dice(playerid);
		for(new i; i < sizeof g_business_interiors; i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, GetBusinessInteriorInfo(i, BT_BUY_POS_X), GetBusinessInteriorInfo(i, BT_BUY_POS_Y), GetBusinessInteriorInfo(i, BT_BUY_POS_Z))) callcmd::buy(playerid, "");
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.5, -2508.9167,1478.8176,1080.4944))
		{
			Dialog
			(
				playerid, DIALOG_BUY_LIC, DIALOG_STYLE_MSGBOX, //поэт
				"{FFFFFF}Список лицензий для покупки", 
				"Название\tЦена\tТребования\n\
				Водительские права, Разрешение на оружие, Проф. права\t9.500.000 руб\tОфициально\n",
				"Купить", "Закрыть"
			);
		}
	}
	if(newkeys == 1024 || PRESSED(KEY_SECONDARY_ATTACK))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 441.1497,1703.6257,1001.0000))
        {
            SetPlayerInterior(playerid, 3);
            SetPlayerVirtualWorld(playerid, 5);
            SetPlayerPos(playerid, 439.4017,1732.8656,1301.0000);
            SetPlayerFacingAngle(playerid, 90.000);
        }
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 441.1340,1731.1715,1301.0000))
        {
            SetPlayerInterior(playerid, 3);
            SetPlayerVirtualWorld(playerid, 5);
            SetPlayerPos(playerid, 440.5286,1704.8746,1001.0000);
            SetPlayerFacingAngle(playerid, 90.000);
        }
		if(GetPlayerTeamEx(playerid) == TEAM_HOSPITAL)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 421.7701,1707.1627,1001.0000))
			{
				if(vorota_status == 0) return MoveDynamicObject(door_mz[0], 422.904815,1707.659667,1000.000244, 2.0 ,0.0000, 0.0000, -106.0), vorota_status = 1;
				else return MoveDynamicObject(door_mz[0], 422.904815,1707.659667,1000.000244, 2.0, 0.0000, 0.0000, 0.00), vorota_status = 0;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 421.6207,1734.7429,1301.0000))
			{
				if(vorota_status == 0) return MoveDynamicObject(door_mz[1], 422.900177,1735.241333,1299.986328, 2.0 ,0.0000, 0.0000, -114.0), vorota_status = 1;
				else return MoveDynamicObject(door_mz[1], 422.900177,1735.241333,1299.986328, 2.0, 0.0000, 0.0000, 0.00), vorota_status = 0;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 416.2188,1734.7461,1301.0000))
			{
				if(vorota_status == 0) return MoveDynamicObject(door_mz[2], 417.507476,1735.245117,1299.988647, 2.0 ,0.0000, 0.0000, -114.0), vorota_status = 1;
				else return MoveDynamicObject(door_mz[2], 417.507476,1735.245117,1299.988647, 2.0, 0.0000, 0.0000, 0.00), vorota_status = 0;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 422.9263,1730.4324,1301.0000))
			{
				if(vorota_status == 0) return MoveDynamicObject(door_mz[3], 424.124816,1729.922485,1299.998291, 2.0 ,0.0000, 0.0000, 118.0), vorota_status = 1;
				else return MoveDynamicObject(door_mz[3], 424.124816,1729.922485,1299.998291, 2.0, 0.0000, 0.0000, 0.00), vorota_status = 0;
			}
		}
	}
	if(newkeys == 1024) OpenVorota(playerid);
	if(newkeys == 1024) OpenVorotaDef(playerid);
	if(newkeys == 1024) 
	{
		for(new i; i < MAX_ITEMS; i++)
		{
			if(items_objs[i] != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2])) OnPlayerTakeIteam(playerid);
		}
	}
	if(PRESSED(KEY_WALK))
	{
		if(GetPVarInt(playerid, "kiosk_inter") != 0)
		{
			DestroyPlayerObject(playerid, GetPVarInt(playerid, "kiosk_object"));
			SetCameraBehindPlayer(playerid);
			SetPVarInt(playerid, "kiosk_inter", 0);
			BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		}
		new kiosk_id = GetNearestKiosk(playerid, 4.0);
		if(kiosk_id != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GetKioskData(kiosk_id, K_POS_X), GetKioskData(kiosk_id, K_POS_Y), GetKioskData(kiosk_id, K_POS_Z)))
			{
				if(!IsKioskOwned(kiosk_id))
				{
					SetPVarInt(playerid, "buy_kiosk_id", kiosk_id);
					Dialog(playerid, DIALOG_KIOSK_BUY, DIALOG_STYLE_MSGBOX, "{FFFFFF}Выберите действие", "{FFFFFF}Киоск на продаже<n>{FFDD00}Хотите приобрести его?", "Да", "Нет");
				}
				else
				{
					BitStream_1(playerid, s_CefInterface, t_CefHide, "StallCard");
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
					BitStream_1(playerid, s_CefInterface, t_CefShow, "StallCard");
				}
			}
		}
	}
	if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid)) OpenVorota(playerid);
	if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid)) OpenVorotaDef(playerid);
	if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid))
	{
		for(new i; i < sizeof g_carwash_object_pos; i++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 4.5, g_carwash_object_pos[i][0][G_CARWASH_X],g_carwash_object_pos[i][0][G_CARWASH_Y],g_carwash_object_pos[i][0][G_CARWASH_Z])) continue;
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");
			if(g_carwash_status[i] == 1) return SendClientMessage(playerid, 0xCECECEFF, "Данная автомойка уже моет");
			new business = GetNearestBusiness(playerid, 18.0);
			if(business == -1) return 1;
			DLGF(playerid, DIALOG_CARWASH_START, DIALOG_STYLE_MSGBOX,"{ffffff}Автомойка","{ffffff}Вы хотите помыть свой транспорт?\n{eaaf55}Стоимость услуги на данной автомойке составляет: %d руб", "Далее", "Отмена", GetBusinessData(business, B_PROD_PRICE));
			g_carwash_player_id[playerid] = i;
			return 1;
		}
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, -420.4103,583.2513,11.7573)) Dialog(playerid, DIALOG_REMONT, DIALOG_STYLE_LIST, "Станция тех. обслуживания","Заменить моторное масло\nЗаменить маслянный фильтр\nЗаменить воздушный фильтр","Далее", "Закрыть");
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 174.3045,1575.0177,-48.3422))
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehicleid, 210.4814,1367.2345,12.1203);
			SetVehicleZAngle(vehicleid, 169.9973);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 0);
			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, playerid + 0);
		}
	}
	if(newkeys & 1024)
	{
		new garage_id = GetPlayerInGarage(playerid);
		if(garage_id != -1)
		{
			if(GetGarageData(garage_id, G_IMPROVEMENTS) > 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.5, g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][0],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][1],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][2]))
				{
					callcmd::craft(playerid);
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 2492.6079, 1394.9854, 1000.0214))
		{
			if(GetPlayerOwnableCarLast(playerid) == 0)
				SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
			else 
			{
				page_cars[playerid] = 1;
				type_page_cars[playerid] = 9;
				status_donate_number[playerid] = false;
				ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_NUMBER, page_cars[playerid]);
			}
		}
	    if(GetPVarInt(playerid,"spikespawn") == 1) callcmd::block(playerid);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, -2503.8015,1479.2994,1080.4944)) PlayerFamilyCreate(playerid);
		if(IsPlayerInRangeOfPoint(playerid,2.0, 4008.3857,3860.5872,8.0616) || IsPlayerInRangeOfPoint(playerid,2.0, -3180.8489,825.0446,6.4200) || IsPlayerInRangeOfPoint(playerid,2.0, 1944.6792,-46.1749,6.4177)) PlayerGangCreate(playerid);
		if(IsPlayerInRangeOfPoint(playerid,2.0, -1633.3900,947.4431,147.8163)) 
		{
			if(GetPlayerInBiz(playerid) != -1) 
			{
				if(IsPlayerInBuyPosBiz(playerid, GetPlayerInBiz(playerid), 36)) 
				{
					string_dialog[0] = EOS;
					format
					(
						string_dialog, sizeof string_dialog, "Компонент\t Последняя диагностика\n\
						{FFFFFF}Масляный фильтр: \t {ffba42}0 час 0 минуты назад\n\
						{FFFFFF}Воздушный фильтр: \t {ffba42}0 час 0 минуты назад"
					);
					Dialog(playerid, DIALOG_BIZ_VETRIKI, DIALOG_STYLE_TABLIST_HEADERS, "Обслуживание", string_dialog, "Далее", "Отмена");
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,2.0, 3771.1826,3877.6079,7.9300)) 
		{
			SCM(playerid, COLOR_ORANGE, "Если хотите продать урожай государству - откройте инвентарь, выберите продукт и нажмите \"Продать\".");
			SCM(playerid, COLOR_ORANGE, "Если хотите продать урожай игроку - сделайте тоже самое,но в любом другом месте, кроме этой палатки.");
		}
		if(IsPlayerInRangeOfPoint(playerid,2.0, 2188.9487,1371.6503,11.4361))
		{
			SendClientMessage(playerid, 0xFF8800FF, "Торговец: {FFFFFF}эй... да, ты-ты... не интересует немного счастья?");
			SendClientMessage(playerid, 0xFF8800FF, "Торговец: {FFFFFF}счастье у каждого своё, хех, поэтому я пытаюсь угодить всем...");
			Dialog(playerid, DIALOG_BUY_MARIH, DIALOG_STYLE_MSGBOX, "{FFD83D}Выбор действия", "{FFD83D}Вы действительно хотите приобрести {"#cW"}'Семена марихуаны'{FFD83D} в количестве {"#cW"}5 шт {FFD83D}за {"#cW"}500.000 {FFD83D}руб", "Далее", "Отмена");
		}
		if(IsPlayerInRangeOfPoint(playerid,2.0, -137.6529,2426.3170,1001.2500)) 
		{
			callcmd::auction(playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -2345.2776, 190.5451, 21.4445)) 
		{
			Dialog(playerid, DIALOG_KIOCK, DIALOG_STYLE_TABLIST_HEADERS,
			"Покупка предметов для крафта",
			"{f2e8c9}Предмет\t {ccffcc}Кол-во \t {FFFFFF}Цена\n"\
			"{f2e8c9}Тряпка \t {ccffcc}5 шт. \t {FFFFFF}35.000.000\n"\
			"{f2e8c9}Футболка \t{ccffcc}1 шт. \t {FFFFFF}20.000.000\n"\
			"{f2e8c9}Кроссовки \t{ccffcc}1 шт. \t {FFFFFF}6.500.000\n"\
			"{f2e8c9}Аккумулятор \t{ccffcc}3 шт. \t {FFFFFF}45.000.000\n"\
			"{f2e8c9}Инструменты \t {ccffcc}5 шт. \t {FFFFFF}55.000.000\n"\
			"{f2e8c9}Колесо \t {ccffcc}4 шт. \t {FFFFFF}75.000.000\n"\
			"{f2e8c9}Двигатель \t {ccffcc}1 шт. \t {FFFFFF}22.500.000\n"\
			"{f2e8c9}Запчасти к рулю AMG \t{ccffcc}10 шт. \t {FFFFFF}30.000.000\n"\
			"{f2e8c9}Диски \t {ccffcc}4 шт. \t {FFFFFF}60.000.000\n"\
			"{f2e8c9}Лобовое стекло \t {ccffcc}1 шт. \t {FFFFFF}25.000.000\n",
			"Далее", "Назад");
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 169.9595, 756.4844, 12.1644)) 
		{
			Dialog(playerid, DIALOG_OBNOVA, DIALOG_STYLE_TABLIST_HEADERS,
			"Покупка предметов из обновления 7.6",
			"{f2e8c9}Предмет\t {ccffcc}Названия \t {FFFFFF}Цена\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Пляжные очки \t {FFFFFF}100.000.000 Рублей\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Колючий нимб\t {FFFFFF}80.000.000 Рублей\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Шлем три полоски \t {FFFFFF}300.000.000 Рублей\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Железная рука \t {FFFFFF}400.000.000 Рублей\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Подвуска АК-47 \t {FFFFFF}10.000 Донат-Монет\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Рюкзак Уточка \t {FFFFFF}30.000 Донат-Монет\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Нагрудная сумка VL \t {FFFFFF}30.000 Донат-Монет\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Бронежелет зазгрузка \t {FFFFFF}30.000 Донат-Монет\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Шляпа с зонтиком \t {FFFFFF}35.000 Донат-Монет\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}Рюкзак акваланг \t {FFFFFF}50.000 Донат-Монет и 600.000.000 Рублей\n"\
			"{f2e8c9}Аксессуар \t{ccffcc}На плечо Шпиониро \t {FFFFFF}50.000 Донат-Монет и 600.000.000 Рублей\n"\
			"{f2e8c9}Скин \t{ccffcc}Гобник \t {FFFFFF}15.000 Донат-Монет и 200.000.000 Рублей\n"\
			"{f2e8c9}Скин \t{ccffcc}Опасная девушка \t {FFFFFF}30.000 Донат-Монет и 500.000.000 Рублей\n"\
			"{f2e8c9}Скин \t{ccffcc}Серфера \t {FFFFFF}60.000 Донат-Монет и 700.000.000 Рублей\n"\
			"{f2e8c9}Скин \t{ccffcc}Бората в трусах \t {FFFFFF}100.000 Донат-Монет и 1.500.000.000 Рублей\n"\
			"{f2e8c9}Машина \t{ccffcc}Урус \t {FFFFFF}10.000 Донат-Монет и 400.000.000 Рублей\n"\
			"{f2e8c9}Машина \t{ccffcc}ЗИЛ МЧС \t {FFFFFF}60.000 Донат-Монет и 500.000.000 Рублей\n"\
			"{f2e8c9}Машина \t{ccffcc}Дривт камаз+Жига \t {FFFFFF}200.000 Донат-Монет\n",

			"Далее", "Выйти");
		}
		if(IsPlayerInRangeOfPoint(playerid,2.0, -1940.9128,2895.8516,5.9990)) 
		{
			{
				Dialog
				(
					playerid, DIALOG_OPEN_CONTEINER, DIALOG_STYLE_MSGBOX,
					"Таинственый контейнер",
					"Необходимо для открытия:\n"\
					"{66CC33}Ключ от кейса {ffffff}- 1500 шт.\n"\
					"{66CC33}Донат-Монет {ffffff}- 1500 шт.\n"\
					"{66CC33}Фишек {ffffff}- 15000 шт.\n"\
					"{ffffff}Это загадочный контейнер который прибыл из острова {ac54ff}Дисней {FFFFFF}Ленд.\n"\
					"{ffffff}С данного контейнера вам может выпасть от 4 до 6 секретных призов!\n"\
					"{ffffff}Желаете открыть контейнер?",
					"Открыть", ""
				);
			}	
		}
	}
	if(PRESSED(KEY_WALK))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 223.4474,-302.4741,1012.0385)) Dialog(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 223.1531,-296.3004,1012.0284)) Dialog(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 207.7382,-296.5287,1012.0684)) Dialog(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 207.9463,-303.3881,1012.0385)) Dialog(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 191.6914,-293.2050,1012.8684)) Dialog(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 201.4565,-331.6115,1012.0385)) Dialog(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		new garage_id = GetNearestGarage(playerid, 10.0);
		if(garage_id != -1)
		{
			if(GetGarageData(garage_id, G_OWNER_ID) != GetPlayerAccountID(playerid)) return 1;
			if(IsPlayerInRangeOfPoint(playerid, 5.0, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z)))
			{
				ShowPlayerGarageZaezd(playerid, garage_id);
			}
		}
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		new garage_id = GetPlayerInGarage(playerid);
		if(garage_id != -1)
		{
			if(GetGarageData(garage_id, G_TYPE) == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, -1616.2706,1579.1246,2005.5372))
				{
					SetPlayerInGarage(playerid, -1);
					new vehicleid = GetPlayerVehicleID(playerid);
					SetVehiclePos
					(
						vehicleid,
						GetGarageData(garage_id, G_CAR_POS_X),
						GetGarageData(garage_id, G_CAR_POS_Y),
						GetGarageData(garage_id, G_CAR_POS_Z)
					);
					SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));
					SetVehicleVirtualWorld(vehicleid, 0);
					LinkVehicleToInterior(vehicleid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
				}
			}
			if(GetGarageData(garage_id, G_TYPE) == 2)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, 2897.3401,2888.8042,1001.0000))
				{
					SetPlayerInGarage(playerid, -1);
					new vehicleid = GetPlayerVehicleID(playerid);
					SetVehiclePos
					(
						vehicleid,
						GetGarageData(garage_id, G_CAR_POS_X),
						GetGarageData(garage_id, G_CAR_POS_Y),
						GetGarageData(garage_id, G_CAR_POS_Z)
					);
					SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));
					SetVehicleVirtualWorld(vehicleid, 0);
					LinkVehicleToInterior(vehicleid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
				}
			}
			if(GetGarageData(garage_id, G_TYPE) == 3)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, -1657.9447,-467.8287,1001.0000))
				{
					SetPlayerInGarage(playerid, -1);
					new vehicleid = GetPlayerVehicleID(playerid);
					SetVehiclePos
					(
						vehicleid,
						GetGarageData(garage_id, G_CAR_POS_X),
						GetGarageData(garage_id, G_CAR_POS_Y),
						GetGarageData(garage_id, G_CAR_POS_Z)
					);
					SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));
					SetVehicleVirtualWorld(vehicleid, 0);
					LinkVehicleToInterior(vehicleid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
				}
			}
			if(GetGarageData(garage_id, G_TYPE) == 4)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, 1603.3677, 1764.6927, 1097.1688))
				{
					SetPlayerInGarage(playerid, -1);
					new vehicleid = GetPlayerVehicleID(playerid);
					SetVehiclePos
					(
						vehicleid,
						GetGarageData(garage_id, G_CAR_POS_X),
						GetGarageData(garage_id, G_CAR_POS_Y),
						GetGarageData(garage_id, G_CAR_POS_Z)
					);
					SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));
					SetVehicleVirtualWorld(vehicleid, 0);
					LinkVehicleToInterior(vehicleid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
				}
			}
		}
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
    {
	    {
			if(GetPlayerData(playerid, P_JOB) != 4) return true;
			if(GetPlayerData(playerid, P_IN_JOB) == false) return true;

			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_1 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_2 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_3 || vehicleid == GetPlayerData(playerid, P_JOB_CAR))
			{
				Dialog
				(
					playerid, DIALOG_TK_MENU_H, DIALOG_STYLE_LIST, 
					"{FFFFFF}Гараж транспортной компании", 
					"{FFFFFF}1. Поместить транспорт на парковку\n\
					{FFFFFF}2. Поместить прицеп в гараж\n\
					{FFFFFF}3. Вывезти из гаража прицеп для груза\n\
					{FFFFFF}4. Вывезти из гаража цистерну для топлива\n\
					{FFFFFF}5. Информация о транспорте",
					"Далее", "Закрыть"
				);
			}
		}
	}
    if(IsPlayerInRangeOfPoint(playerid, 3.0, -397.3741,1009.9180,12.1382))
    {
	    {
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");
			new vehicleid = GetPlayerVehicleID(playerid);
			new vehicleid1 = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(vehicleid1 != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			SetVehiclePos(vehicleid, -313.3054,355.2758,12.9868);
			SetVehicleZAngle(vehicleid, 169.9994);
			SetPlayerCameraPos(playerid,-311.7177,348.9213,14.1133);
			SetPlayerCameraLookAt(playerid,-313.3054,355.2758,12.9868);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			SetVehicleVirtualWorld(vehicleid, playerid + 1);
			if(GetOwnableCarData(index, OC_PNEWMA) == 0) BitStream_2(playerid, s_CefInterface, t_CefShow, "TuningPneuma", "[0, [100000000]]");
			else BitStream_2(playerid, s_CefInterface, t_CefShow, "TuningPneuma", "[1]");

			SpeedometrHideForPlayer(playerid);
		}
	}
	if(PRESSED(KEY_WALK))
	{
		new garden = GetNearestGarden(playerid, 10.0);
		if(garden != -1)
		{
			if(GetGardenData(garden, G_OWNER_ID) == GetPlayerAccountID(playerid)) 
			{
				new idgarden;
				if(GetGardenData(garden, G_IMPROVEMENTS) < 3) idgarden = 10;
				if(GetGardenData(garden, G_IMPROVEMENTS) == 3) idgarden = 14;
				if(GetGardenData(garden, G_IMPROVEMENTS) == 4) idgarden = 20;
				for(new i; i < idgarden; i ++)
				{
					if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1)) continue;
					if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_2[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[i][2] + 1)) continue;
					if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_3[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[i][2] + 1)) continue; 
					if(G_STATUS_YAM[garden][i] == 0)
					{
						SetPVarInt(playerid, "garden_id",garden);
						SetPVarInt(playerid, "yamka_id",i);
						Dialog
						(
							playerid, DIALOG_GARDEN, DIALOG_STYLE_LIST,
							"Какое растение вы хотите посадить?",
							"Название\tВремя роста\tИнтервал полива\n\
							{FFFFFF}Помидоры\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Огурцы\t{"#cGold"}20 мин.\t4 мин.\n\
							{FFFFFF}Марихуана\t{"#cGold"}30 мин.\t4 мин.\n\
							{FFFFFF}Картофель\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Свёкла\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Перец\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Баклажан\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Капуста\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Морковь\t{"#cGold"}10 мин.\t4 мин.",
							"Готово", "Закрыть"
						);
					}
					if(G_STATUS_YAM[garden][i] == 1)
					{
						new fmt_text[148];
						if(G_STATUS_WOTER[garden][i] == 2) return 1;
						if(GetIteam(playerid, 247) < 5) return SCM(playerid, 0x66CC33FF, "У вас мало воды чтобы полить грядку, требуется 5 наполненных леек!");
						if(G_WT_ST[garden][i] == 0)
						{
							G_WT_ST[garden][i] = 1;
							if(G_TYPE_YAM[garden][i] == 1) rost[garden][i] = SetTimerEx("gardengryadka", 6000, true, "ii", garden,i);
							if(G_TYPE_YAM[garden][i] == 2) rost[garden][i] = SetTimerEx("gardengryadka", 12000, true, "ii", garden,i);
							if(G_TYPE_YAM[garden][i] == 3) rost[garden][i] = SetTimerEx("gardengryadka", 18000, true, "ii", garden,i);
							if(G_TYPE_YAM[garden][i] > 3) rost[garden][i] = SetTimerEx("gardengryadka", 6000, true, "ii", garden,i);
						}
						if(G_STATUS_WOTER[garden][i] == 1)
						{
							G_STATUS_WOTER[garden][i] = 2;
							format(fmt_text, sizeof fmt_text,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.0%\n{FFFFFF}Почва: {FF8800}очень мокрая",garden_name[G_TYPE_YAM[garden][i]-1],G_STATUSS[garden][i]);
						}
						if(G_STATUS_WOTER[garden][i] == 0)
						{
							format(fmt_text, sizeof fmt_text,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.0%\n{FFFFFF}Почва: {FF8800}влажная",garden_name[G_TYPE_YAM[garden][i]-1],G_STATUSS[garden][i]);
							G_STATUS_WOTER[garden][i] = 1;
						}
						ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
						UpdateDynamic3DTextLabelText(gardendyamkalab[garden][i], 0xFFFF00FF, fmt_text);
						GiveIteam(playerid,247, 0, 5, 0);
						if(GetIteam(playerid, 247) == 0) GiveIteam(playerid,168, 1, 1, 0);
					}
					if(G_STATUS_YAM[garden][i] == 2)
					{
						SetPVarInt(playerid, "g_garden_loaded", garden + 1);
						SetPVarInt(playerid, "idgarden", i + 1);
						BitStream_1(playerid, s_CefInterface, t_CefShow, "Harvesting");
						ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 1, 0, 0, 0, 0, 0);
					}
					break;
				}
				if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + 1)) return 1;
				if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z) + 1)) return 1;
				if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z) + 1)) return 1;
				if(GetGardenData(garden, G_LOCK_STATUS) != 0) return SCM(playerid, 0xABCDEFFF,"Дверь заперта.");
				if(Garden_Status[garden] == 1)
				{
					if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
					if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
					if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
					Garden_Status[garden] = 0;
				}
				else
				{
					if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
					if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
					if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
					Garden_Status[garden] = 1;
				}
			}
			else SCM(playerid, COLOR_GREY, "*Вы не владелец данного огорода.");
		}
	}
    if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid))
    {
		for(new idx; idx < g_business_loaded; idx ++)
		{
			if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_BY || GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_BY_SRED || GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_BY_NIZ)
			{
				if(IsPlayerInRangeOfPoint(playerid, 13, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z)))
				{
				    SendClientMessage(playerid, 0xFFDAB9FF, "Вы встали слишком близко ко входу авторынка, отъедьте немного назад, чтобы не мешать остальным.");
				    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.closeLastDialog()");
					return 1;
			 	}
			}
		}
		for(new i; i < sizeof g_load_sto_garage; i++)
		{
			for(new idx; idx < 4; idx++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, g_load_sto_garage[i][idx][0], g_load_sto_garage[i][idx][1], g_load_sto_garage[i][idx][2]))
				{
					if(sto_garage_status[i][idx] == 1) return SCM(playerid, COLOR_GREY, "Данный гараж используется игроком.");
					new vehicleid = GetPlayerVehicleID(playerid);
					new vehicleid1 = GetPlayerOwnableCarLast(playerid);
					if(vehicleid1 != GetPlayerVehicleID(playerid))
						return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
					foreach(new idxx: Player)
					{
						if(!IsPlayerConnected(idxx)) continue;
						if(!IsPlayerLogged(idxx)) continue;
						if(idxx == playerid) continue;
						if(IsPlayerInVehicle(idxx, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
						break;
					}
					SetVehiclePos(vehicleid, -2498.8906, -597.7437, 1001.0588);
					SetVehicleZAngle(vehicleid, 89.6331);
					TogglePlayerControllable(playerid, 0);
					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, playerid + 1);
					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, playerid + 1);
					SetPlayerCameraPos(playerid, -2502.4258, -601.2964, 1004.5900);
					SetPlayerCameraLookAt(playerid, -2498.8938, -597.7574, 1001.0900);
					UpdateStoGarage(i, idx, 1);
					SetPVarInt(playerid, "sto_id", GetNearestBusiness(playerid, 50.0));
					SetPVarInt(playerid, "sto_id_exit_1", i);
					SetPVarInt(playerid, "sto_id_exit_2", idx);
					SetPVarInt(playerid, "cl1", 1);
					SetPVarInt(playerid, "diski", -1);
					SetPVarInt(playerid, "vinil", -2);
					SetPVarInt(playerid, "color_id", -1);
					SetPVarInt(playerid, "color_id1", -1);
					gPlayerTuningMenu[playerid] = 1;
					BitStream_2(playerid, s_CefInterface, t_CefShow, "TuningMenu", "[11298, []]");
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TuningMenu').setItems('[3500, -1, -1]')");
					break;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 10, 258.8138,703.6974,11.9849) || IsPlayerInRangeOfPoint(playerid, 10, 2345.3701,-2610.1836,21.7953))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
   			new md = GetVehicleData(vehicleid, V_MODELID);
			if(md == 424 || md == 461 || md == 462 || md == 463 || md == 468 || md == 471 || md == 481 || md == 510 || md == 521 || md == 522
			|| md == 581 || md == 586 || md == 15127 || md == 15129 || md == 15130 || md == 15132 || md == 15133 || md == 15134 || md == 15135 || md == 15136 || md == 15139 || md == 15245)
			return SCM(playerid, COLOR_GREY, "Данный транспорт недоступен для установки stage.");
			if(GetVehicleHandlingID(md) == -1) return GameText(playerid, "~r~На данный транспорт невозможно установить stage", 3000, 1);
			new vehicleid1 = GetPlayerOwnableCarLast(playerid);
			if(vehicleid1 != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			foreach(new i: Player){
				if(i == playerid) continue;
				if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
				break;
			}
			BitStream_2(playerid, s_CefInterface, t_CefShow, "TuningStage", "[[70,1.350000],[[\"Уровень 1\",7000000,10,10.000000],[\"Уровень 2\",20000000,20,20.000000],[\"Уровень 3\",40000000,30,30.000000]]]");
			SpeedometrHideForPlayer(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 10, 258.8138,703.6974,11.9849)) stagest[playerid] = 2;
			if(IsPlayerInRangeOfPoint(playerid, 10, 2345.3701,-2610.1836,21.7953)) stagest[playerid] = 1;
			SetVehiclePos(vehicleid, 2339.8787,-2612.8870,1002.2754);
			SetVehicleZAngle(vehicleid, 0);
			TogglePlayerControllable(playerid, 0);
			stagestats[playerid] = 1;
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, playerid + 1);
			SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
			SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
		}
		if(IsPlayerInRangeOfPoint(playerid, 50, -1888.1816,1888.4098,175.9297))
		{
			new vehicleid = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(vehicleid != GetPlayerVehicleID(playerid)) return SCM(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			if(GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_TYPE) != 2) return SCM(playerid, 0xFF6600FF, "Данный класс авто не подходит под этот авторынок!");
			new business = GetNearestBusiness(playerid, 60.0);
			SetPVarInt(playerid, "by_id", business);
			new price = GetBusinessData(business, B_ARENDA_PRICE);
			DLGF(playerid, DIALOG_SELL_CAR_ELITE, DIALOG_STYLE_INPUT, "{FFCD00}Авторынок", "{FFFFFF}Хотите выставить свой транспорт на продажу?<n>Рынок взимает {FFCD00}%s {FFFFFF}руб за каждые {FFCD00}60 {FFFFFF}минут аренды места.<n><n>За сколько вы хотите продать своё транспортное средство?", "Готово", "Закрыть", formatInt(price));
		}
		if(IsPlayerInRangeOfPoint(playerid, 50, 2206.7478,2335.3818,13.5938))
		{
			new vehicleid = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(vehicleid != GetPlayerVehicleID(playerid)) return SCM(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			if(GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_TYPE) != 0) return SCM(playerid, 0xFF6600FF, "Данный класс авто не подходит под этот авторынок!");
			new business = GetNearestBusiness(playerid, 60.0);
			SetPVarInt(playerid, "by_id", business);
			new price = GetBusinessData(business, B_ARENDA_PRICE);
			DLGF(playerid, DIALOG_SELL_CAR_NIZ, DIALOG_STYLE_INPUT, "{FFCD00}Авторынок", "{FFFFFF}Хотите выставить свой транспорт на продажу?<n>Рынок взимает {FFCD00}%s {FFFFFF}руб за каждые {FFCD00}60 {FFFFFF}минут аренды места.<n><n>За сколько вы хотите продать своё транспортное средство?", "Готово", "Закрыть", formatInt(price));
		}
		if(IsPlayerInRangeOfPoint(playerid, 50, 2728.6340,-2443.7852,21.8427))
		{
			new vehicleid = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(vehicleid != GetPlayerVehicleID(playerid)) return SCM(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			if(GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_TYPE) != 1) return SCM(playerid, 0xFF6600FF, "Данный класс авто не подходит под этот авторынок!");
			new business = GetNearestBusiness(playerid, 60.0);
			SetPVarInt(playerid, "by_id", business);
			new price = GetBusinessData(business, B_ARENDA_PRICE);
			DLGF(playerid, DIALOG_SELL_CAR_SR, DIALOG_STYLE_INPUT, "{FFCD00}Авторынок", "{FFFFFF}Хотите выставить свой транспорт на продажу?<n>Рынок взимает {FFCD00}%s {FFFFFF}руб за каждые {FFCD00}60 {FFFFFF}минут аренды места.<n><n>За сколько вы хотите продать своё транспортное средство?", "Готово", "Закрыть", formatInt(price));
		}
		if(IsPlayerInRangeOfPoint(playerid, 5, 1657.3654,692.2846,16.4430))
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FERMA_CAR)
            {
                if(ceno[vehicleid] > 0) return SendClientMessage(playerid, -1, "Вы должны сначало полностью выгрузиться.");
                new cenof = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);
                if(cenof <= 0)
                {
                    SendClientMessage(playerid, -1, "На складе нет сена");
                    return 1;
                }
				if(cenof < 10 && cenof >= 0)
				{
					ceno[vehicleid] = cenof;
				    SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, 0);
				    SendClientMessage(playerid, -1, "Вы забрали всё сено со склада");
				    FermerRepositoryUpdate();
				    FermaCarUpdate(vehicleid);
					SetPVarInt(playerid,"zagruz",gettime() + 300);
				    SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						-1057.2186,
						2165.3706,
						38.0416,
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_FERMA
					);
				    return 1;
				}
				SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, cenof - 10);
				ceno[vehicleid] = 10;
				FermerRepositoryUpdate();
    			FermaCarUpdate(vehicleid);
    			SendClientMessage(playerid, -1, "Сено загружено в вашу машину. Отправляйтесь на отмеченое место.");
				SetPVarInt(playerid,"zagruz",gettime() + 300);
    			SetPlayerRaceCheckpoint
				(
					playerid,
					2,
					-1057.2186,
					2165.3706,
					38.0416,
					0.0,
					0.0,
					0.0,
					4.0,
					RCP_ACTION_TYPE_FERMA
				);
            }
        }
	}
	if(PRESSED(KEY_NO)) callcmd::no(playerid, "");
	if(PRESSED(KEY_YES)) callcmd::yes(playerid, "");
	if(PRESSED(KEY_CTRL_BACK)) if(!IsPlayerInAnyVehicle(playerid)) callcmd::trunk(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(GetPlayerSettingData(playerid, S_VEH_CONTROL) == SETTING_TYPE_ON)
			{
				if(PRESSED(KEY_HANDBRAKE | KEY_FIRE)) // правый ctrl
				{
					if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID) callcmd::lock(playerid, "1");
				}
				if(PRESSED(KEY_ACTION)) callcmd::e(playerid, "");
				if(PRESSED(KEY_FIRE)) callcmd::l(playerid, "");	
				if(PRESSED(KEY_ANALOG_DOWN)) callcmd::i(playerid, "");
				if(PRESSED(KEY_ANALOG_LEFT)) callcmd::sl(playerid, "");
				if(PRESSED(KEY_ANALOG_RIGHT)) callcmd::alarm(playerid, "");
				if(PRESSED(KEY_FIRE))
				{
					if(IsPlayerInRangeOfPoint(playerid, 15.0, 512.768, 431.684, 12) || IsPlayerInRangeOfPoint(playerid, 15.0, 550.892, 1209.29, 4.9099) || IsPlayerInRangeOfPoint(playerid, 15.0, 726.887, 2559.55, 12.1875) || IsPlayerInRangeOfPoint(playerid, 15.0, 1890.06, -2909.72, 3.8898) || IsPlayerInRangeOfPoint(playerid, 15.0, -479.5030, -1836.0088, 41.3189) || IsPlayerInRangeOfPoint(playerid, 15.0, -2037.01, -2007.55, 8.5077) || IsPlayerInRangeOfPoint(playerid, 15.0, -2620.5, -37.8617, 12.1909) || IsPlayerInRangeOfPoint(playerid, 15.0, -2583.21, 1964.54, 52.9992) || IsPlayerInRangeOfPoint(playerid, 15.0, 1894.89, -865.783, 14.7136) || IsPlayerInRangeOfPoint(playerid, 15.0, 1913.65, 1706.91, 15.94) || IsPlayerInRangeOfPoint(playerid, 15.0, 2247.17, -1715.46, 22.0362) || IsPlayerInRangeOfPoint(playerid, 15.0, 2554.8345, -2425.6321, 21.8579) || IsPlayerInRangeOfPoint(playerid, 15.0, -428.4470,-1363.6104,40.3740) || IsPlayerInRangeOfPoint(playerid, 15.0, -2672.3538,-1354.2834,8.8302))
					{
						callcmd::i(playerid, "");
					}
					if(IsPlayerInRangeOfPoint(playerid, 15.0, 740.6722,2593.2686,12.1875) || IsPlayerInRangeOfPoint(playerid, 15.0, 524.7357,1216.0225,4.9021) || IsPlayerInRangeOfPoint(playerid, 15.0, 524.3786,407.8583,12.0000) || IsPlayerInRangeOfPoint(playerid, 15.0, -2603.8452,-11.4564,12.1909) || IsPlayerInRangeOfPoint(playerid, 15.0, 2222.0361,-1700.8455,22.0557) || IsPlayerInRangeOfPoint(playerid, 15.0, 1884.8348,-2943.7678,3.8352) || IsPlayerInRangeOfPoint(playerid, 15.0, 1902.7150,-884.1428,14.7064) || IsPlayerInRangeOfPoint(playerid, 15.0, -2557.9216,1946.0831,52.9992) || IsPlayerInRangeOfPoint(playerid, 15.0, 3970.4331,4347.5366,7.9306) || IsPlayerInRangeOfPoint(playerid, 15.0, -2050.9451,-2013.4017,8.6395))
					{
						callcmd::ic(playerid);
					}
				}
			}
			if(PRESSED(KEY_SUBMISSION))
			{
				if(!IsPlayerInVehicle(playerid, GetPlayerOwnableCarLast(playerid)))
				{
					new job_car = GetPlayerJobCar(playerid);
					if(IsPlayerInVehicle(playerid, job_car))
					{
						new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
						new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;
						new job_id = GetPlayerJob(playerid);
						if(job_id == car_type)
						{
							switch(job_id)
							{
								case JOB_BUS_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{"#cGold"}Диспетчер автопарка",
											"{"#cW"}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
											"{"#cGold"}Стоимость проезда",
											"{"#cW"}Сколько будет стоить проезд?\n"\
											"Укажите цену от 0 до 10000000 рублей",
											"Далее", "Отмена"
										);
									}
								}
								case JOB_TAXI_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{"#cGold"}Диспетчер таксопарка",
											"{"#cW"}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
											"{"#cGold"}Название такси",
											"{"#cW"}Придумайте название для вашего такси\n"\
											"Максимальная длина 15 символов\n\n"\
											"Если вы не хотите как-то называться\n"\
											"нажмите кнопку \"Пропустить\"",
											"Далее", "Пропустить"
										);
									}
								}
								case JOB_RERFECT_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFD83D}Автомеханик",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_RERFECT_START_JOB, DIALOG_STYLE_MSGBOX,
											"{FFD83D}Диспетчер",
											"{FFFFFF}Вы хотите начать работу автомеханика?",
											"Да", "Нет"
										);
									}
								}
       							case JOB_TRUCKER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFD83D}Диспетчер автопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_TRUCKER_START_JOB, DIALOG_STYLE_MSGBOX,
											"{FFD83D}Дальнобойщик",
											"{FFFFFF}Вы хотите начать работу дальнобойщика?",
											"Да", "Нет"
										);
									}
								}
							}
						}
					}
				}
				else callcmd::car(playerid, "");
			}
		}
	}
	else
	{
		if(PRESSED(KEY_FIRE))
		{
			if(GetPlayerData(playerid, P_SNACK))
			{
				SetPlayerData(playerid, P_SNACK, false);
				SetPlayerHealthEx(playerid, 25.0, true);
				if(GetPlayerHealthEx(playerid) == 100) return SendClientMessage(playerid, 0xFF6600FF, "Вы не нуждаетесь в лечении");
				ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.0, 0, 0, 0, 0, 0, 0);
				SetTimerEx("T_RemovePlayerAttachedObject", 3000, false, "ii", playerid, A_OBJECT_SLOT_HAND);
			}
			if(GetPlayerData(playerid, P_DRINK_STEP) >= 1)
			{
				AddPlayerData(playerid, P_DRINK_STEP, -, 1);
				SetPlayerHealthEx(playerid, 25.0, true);
				if(GetPlayerHealthEx(playerid) > 100) return SetPlayerHealthEx(playerid, 100);
				if(!GetPlayerData(playerid, P_DRINK_STEP))
				{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
		}
		if(PRESSED(KEY_WALK)) if(IsPlayerUseAnim(playerid)) ClearPlayerUseAnim(playerid), BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		if(PRESSED(KEY_SPRINT))
		{
			if(GetPlayerData(playerid, P_REALTOR_TYPE) != REALTOR_TYPE_NONE)
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_INTERIOR);
					new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);
					TogglePlayerSpectating(playerid, false);
					if(GetPlayerData(playerid, P_REALTOR_TYPE) == REALTOR_TYPE_BIZ)
					{
						PlayerTeleportInit(playerid, 100.8657, 712.1253, 1.6028, 39.7830);
						SetPlayerPosEx(playerid, 100.8657, 712.1253, 1.6028, 39.7830, interior, businessid + 255, false);
					}
					else
					{
						PlayerTeleportInit(playerid, 100.8657, 712.1253, 1.6028, 39.7830);
						SetPlayerPosEx(playerid, 160.7020, 745.5962, 25.8272, 159.1750, interior, businessid + 255, false);
					}
				}
				SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_NONE);
			}
		}
		if(PRESSED(KEY_WALK))
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, 214.88200, -276.60931, 1012.79022))
   			{
				ShowPlayerCasinoRollMenu(playerid);
   			}
			if(IsPlayerInRangeOfPoint(playerid, 100.0, 428.8445,1704.5200,1001.0000) || IsPlayerInRangeOfPoint(playerid, 100.0, 431.1976,1732.5670,1301.0000))
			{
				new bedid = -1;
				for(new i; i < sizeof g_med_bed_pos; i++)
				{
					if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
					bedid = i;
					break;
				}
				if(bedid == -1) return 1;
				else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже заняли койку");
				else if(GetPlayerHealthEx(playerid) >= 95.0)
				{
					return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
				}
				else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Эта койка занята");
				else
				{
					SetPlayerData(playerid, P_OCCUPIED_BED, bedid);
					g_med_bed_used[bedid] = true;
					new fmt_msg[85];
					format(fmt_msg, sizeof fmt_msg, "Койка №%d\n\n{FFCC00}Пациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
					UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_msg);
					format(fmt_msg, sizeof fmt_msg, "Вы заняли койку №%d. В зависимости от состояния здоровья лечение может занять время", bedid + 1);
					SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
					SendClientMessage(playerid, -1, "Чтобы выписаться подойдите к врачу или выйдите за пределы больницы");
				}
			}
			if(GetPlayerNearestATM(playerid) != -1) ShowPlayerATMDialog(playerid);
			if(GetPlayerInHouse(playerid) != -1) ExitPlayerFromHouse(playerid, 1.1);
			if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
			{
				new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
				new action_id = GetPickupInfo(pickupid, P_ACTION_ID);
				if(IsPlayerInRangeOfPoint(playerid, 1.7, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
				{
					switch(GetPickupInfo(pickupid, P_ACTION_TYPE))
					{
						case PICKUP_ACTION_TYPE_ENTRANCE_FLA:
						{
							new entranceid = GetPlayerInEntrance(playerid);
							new floor = GetPlayerInEntranceFloor(playerid);
							if(entranceid != -1 && floor >= 1)
							{
								HouseInfoBuy(playerid, g_entrance_flat[entranceid][floor - 1][action_id]);
							}
							SetPlayerData(playerid, P_LAST_PICKUP, -1);					
						}
						case PICKUP_ACTION_TYPE_HOTEL_ROOM:
						{
							new hotel_id = GetPlayerInHotelID(playerid);
							new floor = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
							if(hotel_id != -1 && floor >= 1)
							{
								new room_id = ((floor-1)*12) + action_id;
								EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
							}
						}
					}
				}
			}
			if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1) ExitPlayerFromHotelRoom(playerid);	
		}
		if(PRESSED(KEY_WALK))
		{
		    new enter_id = GetPVarInt(playerid, "pickup_house");
			if(GetHouseData(enter_id, H_ENTRACE) == -1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, GetHouseData(enter_id, H_POS_X), GetHouseData(enter_id, H_POS_Y), GetHouseData(enter_id, H_POS_Z)))
				{
					HouseInfoBuy(playerid, enter_id);
				}
			}
			else
			{
				if(IsPlayerInRangeOfHouse(playerid, enter_id, 2.0))
				{
					new entranceid = GetPlayerInEntrance(playerid);
					new floor = GetPlayerInEntranceFloor(playerid);
					HouseInfoBuy(playerid, g_entrance_flat[entranceid][floor - 1][enter_id]);
				}
			}
		}
		if(PRESSED(KEY_CTRL_BACK))
		{
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -502.3037, 1504.5017, 1001.0025))
	        {
				if(GetPlayerInBiz(playerid) != -1)
				{
					if(GetBusinessData(GetPlayerInBiz(playerid), B_TYPE) == BUSINESS_TYPE_SHOP_24_7) callcmd::buy(playerid, "");
				}
			}
		}
		if(PRESSED(KEY_WALK))
	 	{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1088.8300,2236.7720,2.0000)) callcmd::varkanarkoti(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1090.5043,2236.7720,2.0000)) callcmd::varkanarkoti(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1088.8397,2231.1621,2.0000)) callcmd::varkanarkoti(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1091.9602,2231.1621,2.0000)) callcmd::varkanarkoti(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 1.0, -1602.0881,-628.2050,1016.4700)) callcmd::antisklad(playerid);
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -1852.6345,1277.0465,1115.8447))
		    {
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_ZAKUS)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 300.7572,1801.3663,1031.0000))
		    {
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_KONDITER)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -2708.6167, -0.1650, 1060.9922))
		    {
			    new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CELL_SALON)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 2003.4229,1901.8441,1001.0000))
		    {
			    new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CLOTHING_SHOP)
					{
						ShowPlayerClothingShopPanel(playerid);
					}
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1238.5682,-2774.2454,1001.0000))
		    {
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					SetPVarInt(playerid, "akstype", 0);
					SetPVarInt(playerid, "category_bs", 0);
					BitStream_2(playerid, s_CefInterface, t_CefShow, "Accessories", "[[[\"Очки\",0],[\"Банданы\",1],[\"Маски\",2],[\"Береты\",3],[\"Шляпы\",4],[\"Сумка\",5],[\"Аксессуар на пояс\",6],[\"Часы\",7],[\"Рюкзак\",8],[\"Чокер\",10]],[[19006,\"Красные\",300000,0,0],[19007,\"Желтые\",350000,0,1],[19008,\"Зеленые\",350000,0,2],[19009,\"Синие\",350000,0,3],[19010,\"Розовые\",350000,0,4],[19011,\"Гипноз\",350000,0,5],[19012,\"Черные\",350000,0,6],[19013,\"Глаза\",350000,0,7],[19014,\"Шахматы\",350000,0,8],[19015,\"Обычные\",350000,0,9],[19016,\"X-ray\",350000,0,10],[13953,\"Для сноуборда\",8750000,0,11],[13995,\"Gucci\",1050000,0,12],[13996,\"American\",1050000,0,13],[13997,\"С обводкой\",1050000,0,14],[13998,\"Синий тигр\",1050000,0,15],[13999,\"Желтые\",1050000,0,16],[14462,\"Модные очки\",1665000,0,187]]]");
					SetPlayerVirtualWorld(playerid, playerid + 10);
					SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
					SetPlayerFacingAngle(playerid, 89.0);
					SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
					SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
					ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1088.8263,2231.4502,2.0000))
		    {
			    callcmd::varkanarkoti(playerid);
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 300.5571,304.2417,1001.0000) || IsPlayerInRangeOfPoint(playerid, 2.0, 294.5605,304.2592,1001.0000) || IsPlayerInRangeOfPoint(playerid, 2.0, 418.3971,572.8312,-36.6100) || IsPlayerInRangeOfPoint(playerid, 2.0, 412.5228,574.4662,-36.6100))
		    {
	            new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
	            new action_id = GetPickupInfo(pickupid, P_ACTION_ID);
			    if(action_id) 
				{
					callcmd::bank(playerid, "");
				}
				else ShowPlayerPayForRentDialog(playerid);
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -2372.6082,206.8016,22.2022))
		    {
	            BitStream_1(playerid, s_CefInterface, t_CefShow, "TrailerShop");
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TrailerShop').trailers = [{ name:\"SWIFT QUATTRO\", image:\"1.png\",price:1400000}, { name:\"HOBBY 440\", image:\"2.png\",price:1600000},{ name:\"BUERSTNER\", image:\"3.png\",price:1200000}]");
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1555.7836,-2400.7815,1001.0000))
		    {
			    new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_AVTOZAP)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -359.7038,450.0506,12.6005))
			{
				if(GetPlayerData(playerid, P_LEVEL) > 5) Dialog(playerid, DIALOG_INVITE_METRO, DIALOG_STYLE_MSGBOX, "Работа машиниста", "Вы хотите устроиться на работу машиниста?", "Да", "Нет"); 
				else SCM(playerid, COLOR_GREY, "Вы не достигли 5 уровня");
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1754.4694,-973.4464,6.3359) || IsPlayerInRangeOfPoint(playerid, 2.0, 2498.5388,1408.0125,1000.0214) || IsPlayerInRangeOfPoint(playerid, 2.0, -2516.8591,1465.3381,1080.5034) || IsPlayerInRangeOfPoint(playerid, 2.0, 331.6048,2941.3892,999.4766) || IsPlayerInRangeOfPoint(playerid, 2.0, 421.3798,1694.9285,1001.0000) || IsPlayerInRangeOfPoint(playerid, 2.0, 2392.2234,-1822.1984,32.5537) || IsPlayerInRangeOfPoint(playerid, 2.0, -2750.3047,2730.8650,958.8621)
			 || IsPlayerInRangeOfPoint(playerid, 2.0, -1627.3636,-1781.8862,1000.7010) || IsPlayerInRangeOfPoint(playerid, 2.0, -1672.6141,-2830.1606,1004.8162) || IsPlayerInRangeOfPoint(playerid, 2.0, 206.2050,-450.7389,1006.4200))
		    {
				if(GetPlayerTeamEx(playerid) == TEAM_NONE) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
				Dialog(playerid, DIALOG_RAZDEVALKA, DIALOG_STYLE_MSGBOX, "Раздевалка", "Вы действительно хотите переодеться?\nУчтите что за то что вы будете не в форме в рабочее время, вас могут наказать.", "Далее", "Отмена");
			}
	 	    new garage_id = GetPVarInt(playerid, "pickup_garage");
			if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z)))
			{
	            ShowPlayerGarageInfo(playerid, garage_id);
			}
			new biz_id = GetPVarInt(playerid, "pickup_biz");
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z)))
			{
				if(GetPlayerInBiz(playerid) == -1)
				{
					new i_paid_biz = GetPlayerUseListitem(playerid);
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_TUNING)
					{
						new oc_id = GetPlayerOwnableCarLast(playerid);
						if(oc_id == INVALID_VEHICLE_ID)
						{
							if(GetPlayerOwnableCars(playerid) == 0)
								SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
							return 1;
						}
						else
						{
							new Float: veh_x,
								Float: veh_y,
								Float: veh_z;
							GetVehiclePos(oc_id, veh_x, veh_y, veh_z);
							if(!IsPlayerInRangeOfPoint(playerid, 15.0, veh_x, veh_y, veh_z))
							{
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт слишком далеко от Вас");
								return 1;
							}
						}
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_TRUCK_TK || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_STO || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_DET || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_SHIN || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_WASH)
	 				{
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_SHOP_FISH)
					{
						Dialog
						(
							playerid, DIALOG_BIZ_SHOP_FISH, DIALOG_STYLE_TABLIST_HEADERS,
							"Список товаров",
							"Товар \t Стоимость\n"\
							"Поплавочная удочка \t 122500 руб\n"\
							"Улучшенная удочка \t 245000 руб\n"\
							"Спиннинг \t 700000 руб\n"\
							"Леска 0.15мм \t 87500 руб\n"\
							"Леска 0.3мм \t 140000 руб\n"\
							"Леска 0.85мм \t 280000 руб\n"\
							"Кусочки хлеба \t 3500 руб\n"\
							"Лягушка \t 7000 руб\n"\
							"Кузнечик \t 10500 руб\n"\
							"Червь \t 3500 руб\n"\
							"Мотыль \t 14000 руб\n"\
							"Опарыш \t 14000 руб\n"\
							"Акваланг \t 350000 руб",
							"Выбор", "Закрыть"
						);
						return true;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_ARENDA)
					{
					    new rent;
						for(new i = 0; i < MAX_VEHICLES; i++)
						{
							if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
							{
							    new index = GetVehicleData(i, V_ACTION_ID);
							    if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
							    {
								    if(GetRentCarData(index, R_RENT_OWNER) == -1)
								    {
										rent = rent + 1;
								    }
								}
							 }
						}
					    new msg[400];
					    format(msg, sizeof msg, "{FFFFFF}Вы желаете перейти к просмотру доступного транспорта для аренды?<n><n>{E7D63E}Общее количество транспорта для аренды: {FFFFFF}%d шт.<n>{E7D63E}В данный момент {FFFFFF}%d транспорт(а) {E7D63E}доступно для аренды", GetBusinessCars(biz_id), rent);
						Dialog
						(
							playerid, DIALOG_BIZ_ARENDA, DIALOG_STYLE_MSGBOX,
							"{FF9900}Аренда транспорта",
							msg,
							"Да", "Нет"
						);
						SetPVarInt(playerid, "arenda_id", biz_id);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_XZ)
					{
						SendClientMessage(playerid, -1, "Это предприятие находится на стадии строительства. Туда нельзя.");
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET_NIZ)
					{
						Dialog
						(
							playerid, DIALOG_BIZ_CAR_MARKET_NIZ, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET)
					{
						Dialog
						(
							playerid, DIALOG_BIZ_CAR_MARKET, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET_AVIA)
					{
						Dialog
						(
							playerid, DIALOG_BIZ_CAR_MARKET_AVIA, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET_VODA)
					{
						Dialog
						(
							playerid, DIALOG_BIZ_CAR_MARKET_KATER, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET_MOTO)
					{
						Dialog
						(
							playerid, DIALOG_BIZ_CAR_MARKET_MOTO, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == 37) return Dialog(playerid, DIALOG_FUEL_STATION_BUY_JERRICA, DIALOG_STYLE_MSGBOX,"Покупка канистры","Канистра на этой заправке стоит 500 000 руб\nВы хотите купить её?","Да", "Нет");
					if(GetBusinessData(biz_id, B_TYPE) == 36)
					{
						if(GetPlayerAccountID(playerid) != GetBusinessData(biz_id, B_OWNER_ID)) return GameText(playerid, "~r~Вход только~n~для сотрудников", 4000, 2);
					}
					if(IsBusinessOwned(biz_id))
					{
						if(GetBusinessData(biz_id, B_OWNER_ID) != GetPlayerAccountID(playerid))
						{
							if(GetBusinessData(biz_id, B_LOCK_STATUS))
								return GameText(playerid, "~w~бизнес~n~~r~закрыт", 4000, 2);
							if(GetBusinessData(biz_id, B_ENTER_PRICE) > 0 && i_paid_biz != biz_id)
							{
								string_dialog[0] = EOS;
								SetPVarInt(playerid, "biz_enter", biz_id + 1);
								format
								(
									string_dialog, sizeof string_dialog,
									"{FFFFFF}Вход платный и составляет {FF9900}%d руб\n"\
									"{99FF00}Вы уверены что хотите войти сюда?",
									GetBusinessData(biz_id, B_ENTER_PRICE)
								);
								return Dialog(playerid, DIALOG_BIZ_ENTER, DIALOG_STYLE_MSGBOX, GetBusinessData(biz_id, B_NAME), string_dialog, "Да", "Нет");
							}
						}
					}
					BitStream_2(playerid, s_CefInterface, t_CefShow, "Overlay", "[500,500,1.00,1]");
					EnterPlayerToBiz(playerid, biz_id);
				}
			}
		}
		if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
		{
			new garage_id = GetNearestGarage(playerid, 10.0);
			if(garage_id != -1)
			{
				if(GetGarageData(garage_id, G_OWNER_ID) != GetPlayerAccountID(playerid)) return 1;
				if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z))) ShowPlayerGarageZaezd(playerid, garage_id);
			}
		}
		if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
		{
			new garage_id = GetPlayerInGarage(playerid);
			if(garage_id != -1)
			{
				if(GetGarageData(garage_id, G_TYPE) == 1)
				{
					if(IsPlayerInRangeOfPoint(playerid, 20.0, -1616.2706,1579.1246,2005.5372))
					{
						SetPlayerInGarage(playerid, -1);
						new vehicleid = GetPlayerVehicleID(playerid);
						SetVehiclePos
						(
							vehicleid,
							GetGarageData(garage_id, G_CAR_POS_X),
							GetGarageData(garage_id, G_CAR_POS_Y),
							GetGarageData(garage_id, G_CAR_POS_Z)
						);
						SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));
						SetVehicleVirtualWorld(vehicleid, 0);
						LinkVehicleToInterior(vehicleid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
				if(GetGarageData(garage_id, G_TYPE) == 2)
				{
					if(IsPlayerInRangeOfPoint(playerid, 20.0, 2897.3401,2888.8042,1001.0000))
					{
						SetPlayerInGarage(playerid, -1);
						new vehicleid = GetPlayerVehicleID(playerid);
						SetVehiclePos
						(
							vehicleid,
							GetGarageData(garage_id, G_CAR_POS_X),
							GetGarageData(garage_id, G_CAR_POS_Y),
							GetGarageData(garage_id, G_CAR_POS_Z)
						);
						SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));
						SetVehicleVirtualWorld(vehicleid, 0);
						LinkVehicleToInterior(vehicleid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
				if(GetGarageData(garage_id, G_TYPE) == 3)
				{
					if(IsPlayerInRangeOfPoint(playerid, 20.0, -1657.9447,-467.8287,1001.0000))
					{
						SetPlayerInGarage(playerid, -1);
						new vehicleid = GetPlayerVehicleID(playerid);
						SetVehiclePos
						(
							vehicleid,
							GetGarageData(garage_id, G_CAR_POS_X),
							GetGarageData(garage_id, G_CAR_POS_Y),
							GetGarageData(garage_id, G_CAR_POS_Z)
						);
						SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));
						SetVehicleVirtualWorld(vehicleid, 0);
						LinkVehicleToInterior(vehicleid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
				if(GetGarageData(garage_id, G_TYPE) == 4)
				{
					if(IsPlayerInRangeOfPoint(playerid, 20.0, 1603.3677, 1764.6927, 1097.1688))
					{
						SetPlayerInGarage(playerid, -1);
						new vehicleid = GetPlayerVehicleID(playerid);
						SetVehiclePos
						(
							vehicleid,
							GetGarageData(garage_id, G_CAR_POS_X),
							GetGarageData(garage_id, G_CAR_POS_Y),
							GetGarageData(garage_id, G_CAR_POS_Z)
						);
						SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));
						SetVehicleVirtualWorld(vehicleid, 0);
						LinkVehicleToInterior(vehicleid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
			}
		}

		if(PRESSED(KEY_HANDBRAKE | KEY_WALK))
		{
			new targetid = GetPlayerTargetPlayer(playerid);
			if(targetid != INVALID_PLAYER_ID && !GetPlayerWeapon(playerid))
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);
				new fmt_str[64];
				format(fmt_str, sizeof fmt_str, "{FFCD00}Действия (%s)", GetPlayerNameEx(targetid));
				Dialog
				(
					playerid, DIALOG_ACTION, DIALOG_STYLE_LIST,
					fmt_str,
					"1. Приветствие\n\
					2. Показать паспорт\n\
					3. Показать лицензии\n\
					4. Показать навыки",
					"Выбрать", "Закрыть"
				);
			}
		}
		if(PRESSED(KEY_HANDBRAKE))
		{
			if(GetPVarInt(playerid, "have_jerrican") == 1 && GetPlayerSpeed(playerid) == 0.0)
			{
				new vehicleid = GetNearestVehicleID(playerid, 2.3);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					SetPVarInt(playerid, "jerrican_fill_car", vehicleid);
					Dialog
					(
						playerid, DIALOG_JERRICAN_FILL_CAR, DIALOG_STYLE_MSGBOX,
						"{6699FF}Канистра",
						"{FFFFFF}Вы хотите заправить этот транспорт с канистры?",
						"Да", "Нет"
					);
				}
			}
		}
		if(PRESSED(KEY_CTRL_BACK | KEY_HANDBRAKE))
		{
			if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID)
			{
				callcmd::car(playerid, "");
			}
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(( newkeys & KEY_FIRE || (oldkeys & 128 && newkeys & 16)))
			{
				if(GetPlayerWeapon(playerid)!=43 && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_SPRUNK &&  GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_WINE && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_SMOKE_CIGGY && GetPlayerSpecialAction(playerid)!=SPECIAL_ACTION_DRINK_BEER)
				{
					if(!IsPlayerInPoliceTeam(playerid) && !GetPlayerData(playerid, P_LAST_DIALOG))
					{
						for(new i; i < 16; i++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 100.0, AntiDm[i][zX], AntiDm[i][zY], AntiDm[i][zZ]))
							{
							    if(AntiDm[i][zStatus] == 1)
							    {
									if(GetPlayerVirtualWorld(playerid)!=11 && GetPlayerVirtualWorld(playerid)!=12 && GetPlayerVirtualWorld(playerid)!=13)
									{
										if(DMStatus[playerid] == 1) return true;
	         							SetTimerEx("DialogDMZZ", 2000, false, "i", playerid);
										DMStatus[playerid] = 1;
										return true;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
    if(GetPlayerData(playerid, P_JAIL))
    {
        new weapon = GetPlayerWeapon(playerid);
        if(weapon != 4 && weapon != 6)
        {
            ResetPlayerWeapons(playerid);
        }
    }
    new currentTime = GetTickCount();
    if (lastRepairTime[playerid] + 15000 < currentTime)
    {
        RepairVehicles();
        lastRepairTime[playerid] = currentTime;
    }	
    if(IsPlayerInPoliceTeam(playerid)) {
        UnStarJail(playerid);
    }	
	if(DiceTable[playerid] != 0 && s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 2) LoadThrow(playerid);
	SetPlayerData(playerid, P_AFK_TIME, 0);
	if(IsPlayerDriver(playerid))
	{
		new keys, gas_brake, left_right;
		GetPlayerKeys(playerid, keys, gas_brake, left_right);
		new pedal_type = PEDAL_TYPE_NONE;
		if((keys & KEY_SPRINT) && !(keys & KEY_JUMP || keys & KEY_HANDBRAKE))
			pedal_type = PEDAL_TYPE_GAS;
		else if(keys & KEY_JUMP && !(keys & KEY_SPRINT || keys & KEY_HANDBRAKE))
			pedal_type = PEDAL_TYPE_BRAKE;
		player_press_pedal[playerid] = pedal_type;
	}
	if(noclipdata[playerid][camera_mode] == CAMERA_MODE_FLY)
	{
		new keys,ud,lr;
		GetPlayerKeys(playerid,keys,ud,lr);
		if(noclipdata[playerid][mode_mode] && (GetTickCount() - noclipdata[playerid][last_move] > 100))
		{
		    MoveCamera(playerid);
		}
		if(noclipdata[playerid][u_dold] != ud || noclipdata[playerid][l_rold] != lr)
		{
			if((noclipdata[playerid][u_dold] != 0 || noclipdata[playerid][l_rold] != 0) && ud == 0 && lr == 0)
			{
				StopPlayerObject(playerid, noclipdata[playerid][fly_object]);
				noclipdata[playerid][mode_mode]      = 0;
				noclipdata[playerid][acce_lmul]  = 0.0;
			}
			else
			{
				noclipdata[playerid][mode_mode] = GetMoveDirectionFromKeys(ud, lr);
				MoveCamera(playerid);
			}
		}
		noclipdata[playerid][u_dold] = ud; noclipdata[playerid][l_rold] = lr;
		return 0;
	}
	if(GetPlayerTempJobCheckAnim(playerid))
	{
		new anim_index = GetPlayerAnimationIndex(playerid);
 		NoRoof(playerid);
		switch(GetPlayerTempJob(playerid))
		{
			case TEMP_JOB_MINER:
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					if(!(anim_index == 616 || anim_index == 1189 || anim_index == 1224))
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_DROP_LOAD);
				}
			}
			case TEMP_JOB_FACTORY:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 949 || anim_index == 1189 || anim_index == 1224 || anim_index == 1257 || anim_index == 1269))
					{
						anim_index = -1;
					}
				}
				else
				{
					if(!(anim_index == 259 || anim_index == 1196 || anim_index == 1275 || anim_index == 1276 || anim_index == 1269 || anim_index == 1283))
					{
						anim_index = -1;
					}
				}
				if(anim_index == -1)
				{
					SetPlayerTempJobCheckAnim(playerid, false);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_DROP_P);
				}
			}
			case TEMP_JOB_LUMBERJACK:
			{
				if(!(anim_index == 1189 || anim_index == 1224 || anim_index == 260 || anim_index == 1275 || anim_index == 1276))
				{
					anim_index = -1;
				}
				if(anim_index == -1)
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_DROP);
			}
			default:
			{
				SetPlayerTempJobCheckAnim(playerid, false);
			}
		}
	}
	if(GetPlayerWeaponState(playerid) == 2) SetPlayerData(playerid, P_WEAPON_RELOADING, false);
	if(GetPlayerWeaponState(playerid) == 3 && !GetPlayerData(playerid, P_WEAPON_RELOADING))
	{
		SetPlayerData(playerid, P_WEAPON_RELOADING, true);
		switch(GetPlayerWeapon(playerid))
		{
			case 22:
			{
				if(GetPlayerData(playerid, P_SKILL_COLT) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][0]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[0] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][0] = 0;
						AddPlayerData(playerid, P_SKILL_COLT, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_colt", GetPlayerData(playerid, P_SKILL_COLT));
						SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
					}
				}
			}
			case 23:
			{
				if(GetPlayerData(playerid, P_SKILL_SDPISTOL) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][1]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[1] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][1] = 0;
						AddPlayerData(playerid, P_SKILL_SDPISTOL, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", GetPlayerData(playerid, P_SKILL_SDPISTOL));
						SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
					}
				}
			}
			case 24:
			{
				if(GetPlayerData(playerid, P_SKILL_DEAGLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][2]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[2] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][2] = 0;
						AddPlayerData(playerid, P_SKILL_DEAGLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_deagle", GetPlayerData(playerid, P_SKILL_DEAGLE));
						SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
					}
				}
			}
			case 25:
			{
				if(GetPlayerData(playerid, P_SKILL_SHOTGUN) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][3]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[3] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][3] = 0;
						AddPlayerData(playerid, P_SKILL_SHOTGUN, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_shotgun", GetPlayerData(playerid, P_SKILL_SHOTGUN));
						SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
					}
				}
			}
			case 29:
			{
				if(GetPlayerData(playerid, P_SKILL_MP5) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][4]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[4] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][4] = 0;
						AddPlayerData(playerid, P_SKILL_MP5, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_mp5", GetPlayerData(playerid, P_SKILL_MP5));
						SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
					}
				}
			}
			case 30:
			{
				if(GetPlayerData(playerid, P_SKILL_AK47) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][5]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[5] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][5] = 0;
						AddPlayerData(playerid, P_SKILL_AK47, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_ak47", GetPlayerData(playerid, P_SKILL_AK47));
						SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
					}
				}
			}
			case 31:
			{
				if(GetPlayerData(playerid, P_SKILL_M4) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][6]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[6] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][6] = 0;
						AddPlayerData(playerid, P_SKILL_M4, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_m4", GetPlayerData(playerid, P_SKILL_M4));
						SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
					}
				}
			}
			case 34:
			{
				if(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][7]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[7] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][7] = 0;
						AddPlayerData(playerid, P_SKILL_SNIPER_RIFLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE));
						SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);
					}
				}
			}
			case 26:
			{
				if(GetPlayerData(playerid, P_SKILL_SAWNOFF) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][8]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[8] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][8] = 0;
						AddPlayerData(playerid, P_SKILL_SAWNOFF, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sawnoff", GetPlayerData(playerid, P_SKILL_SAWNOFF));
						SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
					}
				}
			}
			case 27:
			{
				if(GetPlayerData(playerid, P_SKILL_COMBAT_SG) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][9]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[9] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][9] = 0;
						AddPlayerData(playerid, P_SKILL_COMBAT_SG, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_combat_sg", GetPlayerData(playerid, P_SKILL_COMBAT_SG));
						SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
					}
				}
			}
			case 28:
			{
				if(GetPlayerData(playerid, P_SKILL_MICRO_UZI) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][10]++;
					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[10] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][10] = 0;
						AddPlayerData(playerid, P_SKILL_MICRO_UZI, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_micro_uzi", GetPlayerData(playerid, P_SKILL_MICRO_UZI));
						SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
					}
				}
			}
		}
	}
	return 1;
}

stock RepairVehicles()
{
    for (new i = 1; i < MAX_VEHICLES; i++)
    {
        if (GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FSIN_CAR)
        {
            RepairVehicle(i);
        }
        else if (GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FBI_CAR)
        {
            RepairVehicle(i);
        }
        else if (GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_PPS_CAR)
        {
            RepairVehicle(i);
        }
    }
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(Iter_Contains(VoicePlayers[playerid], forplayerid)) 
	{
		Iter_Remove(VoicePlayers[playerid], forplayerid);
	}
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FBI_CAR || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_PPS_CAR || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FSIN_CAR) {
        SetFBICarToner(forplayerid, vehicleid);
    } 	
    if(IsAOwnableCar(vehicleid))
    {
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetOwnableCarData(index, OC_DISKI) != 0)
        {
			Sendpacket_tun(forplayerid,vehicleid, GetOwnableCarData(index, OC_DISKI));
		}
		UpdateVehicleHandling(forplayerid, vehicleid);
		if(GetOwnableCarData(index, OC_VINIL) != 0)
		{
			if(GetVehicleData(vehicleid, V_VINILTYPE) == 0)
			{
				static const query[] = "setVehiclePaintJob(%d, \"individual/%d\", \"%s\")";
				new fmt[sizeof query + 20];
				for(new i; i < sizeof e_vinils; i++)
				{
					if(e_vinils[i][eVinilModel] == GetVehicleModel(vehicleid))
					{
						if(GetVehicleData(vehicleid, V_VINIL) == e_vinils[i][eVinilID])
						{
							format(fmt, sizeof fmt,query,vehicleid,GetVehicleModel(vehicleid),e_vinils[i][eVinilName]);
							break;
						}
					}
				}
				BitStream_1(forplayerid,s_CefInterface,t_CefUpdate,fmt);
			}
			else
			{
				static const query[] = "setVehiclePaintJob(%d, \"common/livery%d\", \"livery%d\")";
				new fmt[sizeof query + 20];
				format(fmt, sizeof fmt,query,vehicleid,GetVehicleData(vehicleid, V_VINIL),GetVehicleData(vehicleid, V_VINIL));
				BitStream_1(forplayerid,s_CefInterface,t_CefUpdate,fmt);
			}
		}
		if(GetOwnableCarData(index, OC_TONERINSTALL) != 0)
		{
			UpdateTinting(forplayerid, vehicleid);
		}
		if(GetOwnableCarData(index, OC_OBVES) != -1)
		{
			new obves[17];
			sscanf(GetOwnableCarData(index, OC_OBVES), "P<|||||||||>a<i>[17]", obves);
			for(new i; i < 17; i++)
			{
				if(obves[i] > 0)
				{
					GetTuningVehicle(forplayerid, vehicleid, obves[i]);
				}
			}
		}
	}
	if(IsAFamilyCar(vehicleid))
    {
        new index = GetVehicleData(vehicleid, V_ACTION_ID);
        if(GetOwnableCarData(index, OC_DISKI) != 0)
        {
			Sendpacket_tun(forplayerid, vehicleid, GetOwnableCarData(index, OC_DISKI));
		}
        if(GetOwnableCarData(index, OC_GIDRA) != 0)
        {
			Sendpacket_tun(forplayerid, vehicleid, GetOwnableCarData(index, OC_GIDRA));
		}
        if(GetOwnableCarData(index, OC_NITRO) != 0)
        {
			Sendpacket_tun(forplayerid, vehicleid, GetOwnableCarData(index, OC_NITRO));
		}
		if(GetOwnableCarData(index, OC_TONERINSTALL) != 0)
		{
			UpdateTinting(forplayerid, vehicleid);
		}
		if(GetOwnableCarData(index, OC_OBVES) != -1)
		{
			new obves[17];
			sscanf(GetOwnableCarData(index, OC_OBVES), "P<|||||||||>a<i>[17]",obves);
			for(new i; i < 17; i++)
			{
				if(obves[i] > 0)
				{
					GetTuningVehicle(forplayerid, vehicleid, obves[i]);
				}
			}
		}
		UpdateVehicleHandling(forplayerid, vehicleid);
    }
	if(GetVehicleData(vehicleid, V_TYPENUM) == 1 || GetVehicleData(vehicleid, V_TYPENUM) == 2 || GetVehicleData(vehicleid, V_TYPENUM) == 3 || GetVehicleData(vehicleid, V_TYPENUM) == 4)
	{
		if(!strcmp(g_vehicle_data[vehicleid][V_NUMBER], "------") || !strcmp(g_vehicle_data[vehicleid][V_REGION], "------")) SendPacket_Plate(forplayerid, vehicleid, 0, "", "");
		else SendPacket_Plate(forplayerid, vehicleid, GetVehicleData(vehicleid, V_TYPENUM), g_vehicle_data[vehicleid][V_NUMBER], g_vehicle_data[vehicleid][V_REGION]);
	}
	else SendPacket_Plate(forplayerid, vehicleid, GetVehicleData(vehicleid, V_TYPENUM), g_vehicle_data[vehicleid][V_NUMBER], g_vehicle_data[vehicleid][V_REGION]);
	beepplayer[vehicleid][forplayerid] = 1;
    kryak[vehicleid][forplayerid] = 1;
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    beepplayer[vehicleid][forplayerid] = 0;
    kryak[vehicleid][forplayerid] = 0;
	if(IsAOwnableCar(vehicleid))
    {
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		UpdateVehicleHandling(forplayerid, vehicleid);
		if(GetOwnableCarData(index, OC_DISKI) != 0)
		{
			Sendpacket_tun(forplayerid,vehicleid, GetOwnableCarData(index, OC_DISKI), 1);
		}
		if(GetOwnableCarData(index, OC_GIDRA) != 0)
		{
			Sendpacket_tun(forplayerid, vehicleid, GetOwnableCarData(index, OC_GIDRA), 1);
		}
		if(GetOwnableCarData(index, OC_NITRO) != 0)
		{
			Sendpacket_tun(forplayerid, vehicleid, GetOwnableCarData(index, OC_NITRO), 1);
		}
		if(GetOwnableCarData(index, OC_OBVES) != -1)
		{
			new obves[17];
			sscanf(GetOwnableCarData(index, OC_OBVES), "P<|||||||||>a<i>[17]",obves);
			for(new i; i < 17; i++)
			{
				if(obves[i] > 0)
				{
					GetTuningVehicle(forplayerid, vehicleid, obves[i], 1);
				}
			}
		}
		if(GetOwnableCarData(index, OC_TONERINSTALL) != 0)
		{
			UpdateTinting(forplayerid, vehicleid);
		}
	}
	return 1;
}

stock DestroyOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		mysql_format(mysql, query, sizeof query, "DELETE FROM ownable_cars WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);
		if(!mysql_errno())
		{
			SetOwnableCarData(index, OC_SQL_ID, 	0);
			SetOwnableCarData(index, OC_OWNER_ID, 	0);
			DestroyVehicleLabel(vehicleid);
			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [OwnableCars]: Ошибка удаления личного ТС: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock DestroyRentCar(vehicleid)
{
	if(IsARentCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		mysql_format(mysql, query, sizeof query, "DELETE FROM arenda_cars WHERE id=%d", GetRentCarData(index, R_SQL_ID));
		mysql_query(mysql, query, false);
		if(!mysql_errno())
		{
			SetRentCarData(index, R_SQL_ID, 	0);
			SetRentCarData(index, R_RENT_BIZ, 	0);
			DestroyVehicleLabel(vehicleid);
			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [RentCars]: Ошибка удаления ТС аренды: %d", GetRentCarData(index, R_SQL_ID));
	}
	return 0;
}

stock UpdateOwnableCarNumber(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		return 1;
	}
	return 0;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerLogged(playerid))
	{
		if(GetPlayerPhone(playerid))
		{
			new fmt_str[5];
			valstr(fmt_str, clickedplayerid);
			callcmd::add(playerid, fmt_str);
		}
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(GetPlayerAdminEx(playerid) > 2)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ);
			PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
		}
		else
		{
			SetPlayerPos(playerid, fX, fY, fZ);
		}
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(GetPVarInt(playerid, "Login_1") != 1)
	{
		printf("["DETECT_ACH"] Игрок %s попытался ввести команду не авторизовавшись (cmd: %s | params: %s)", GetPlayerNameEx(playerid), cmd, params);
	}
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);
    if(!IsPlayerLogged(playerid)) return 0;
	if(!IsPlayerLogged(playerid)) return 0;
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");
		return 0;
	}
	new pos, command[64];
	format(command, sizeof(command), "%s", cmd);
	while(command[pos] > ' ')pos++;
	while(command[pos] == ' ')strdel(command, pos, strlen(command));
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags, success)
{
	if(result == -1)
	{
		SCM(playerid, 0xCECECEFF, "* Неизвестная команда");
		return 0;
	}
	if(success == -1)
	{
		CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
		{
			SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");
			if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
				SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");
			return 0;
		}
	}
	printf("%s[%d] использует команду: %s [%s]", GetPlayerNameEx(playerid), playerid, cmd, params);
    return 1; 
}

public: MetroStart(playerid)
{
    SendClientMessage(playerid, -1, "Вы успешно прибыли на вашу станцию.");
	new metro = GetPVarInt(playerid, "metrolist");
	SetPlayerPosEx(playerid, GetBusinessData(metro, B_EXIT_POS_X), GetBusinessData(metro, B_EXIT_POS_Y), GetBusinessData(metro, B_EXIT_POS_Z), GetBusinessData(metro, B_EXIT_ANGLE));
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	for(new i = 0; i < 13;i++)
    {
        if(miner_job_load_cp[i] == checkpointid)
        {
            if(GetPVarInt(playerid, "miner_1") == 0)
            {
                SetPlayerMinerJobLoadCP(playerid, false);
                if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER && GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
                {
                    SetPVarInt(playerid, "miner_1",1);
                    ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
                    SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
                }
            }
        }
    }
	for(new i = 0; i < MAX_HOUSES;i++)
	{
	    if(checkpointid == House_CP[i])
		{
			SetPVarInt(playerid, "pickup_house", i);
			ShowHomeInfoPick(playerid, i);
		}
	}
 	for(new i = 0; i < MAX_GARAGE;i++)
    {
		if(checkpointid == Garage_CP[i])
 		{
 	        SetPVarInt(playerid, "pickup_garage", i);
			ShowPlayerGarageInfo(playerid, i);
		}
 	}
 	if(checkpointid == apteka_cp)
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_APTEKA)
			{
				callcmd::buy(playerid, "");
			}
		}
	}
    if(checkpointid == snoybord_cp)
	{
	    if(snoybord[playerid] == -1)
	    {
		snoybord[playerid] = CreateVehicle(509, -972.1597,321.0002,197.6490,21.2373, 1, 1, -1, 0);
		PutPlayerInVehicle(playerid, snoybord[playerid], 0);
		}
	}
	else if(factory_desk[0][FD_CHEK_ID] <= checkpointid <= factory_desk[sizeof(factory_desk)-1][FD_CHEK_ID])
	{
		new index = checkpointid - factory_desk[0][FD_CHEK_ID];
		SetPlayerFactoryDeskUse(playerid, index, true);
	}
	else if(checkpointid == garage_elit_CP)
	{
		Dialog
		(
					playerid, DIALOG_GARAGE_BAR, DIALOG_STYLE_LIST,
					"{FFD83D}Гаражный бар",
					"1. Лимонад\n"\
					"2. Пиво\n"\
					"3. Вино\n"\
					"4. Шампанское\n"\
					"5. Водка\n"\
					"6. Коньяк\n"\
					"7. Виски\n"\
					"8. Абсент\n"\
					"{FFD83D}9. Закуска\n"\
					"{FFD83D}10. Сигара",
					"Купить", "Отмена"
		);
	}
    else if(checkpointid == join_to_job_CP)
	{
        if(GetPVarInt(playerid,"pick_timer") > gettime()) return 1;
		if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
			return SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете устроиться на работу");
		Dialog
		(
			playerid, DIALOG_VIEV_JOBS_LIST, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Прием на работу",
			"{FFFFFF}Вы хотите просмотреть список доступных работ?",
			"Да", "Нет"
		);
		SetPVarInt(playerid,"pick_timer",gettime()+5); // 5 задержка в секундах
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CLUB, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CLUB)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");
				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{00CC00}1500 руб\n"\
					"2. Пиво\t\t\t{00CC00}3000 руб\n"\
					"3. Вино\t\t\t{00CC00}3000 руб\n"\
					"4. Шампанское\t\t{00CC00}2700 руб\n"\
					"5. Водка\t\t{00CC00}6000 руб\n"\
					"6. Коньяк\t\t{00CC00}9000 руб\n"\
					"7. Виски\t\t{00CC00}12000 руб\n"\
					"8. Абсент\t\t{00CC00}7500 руб\n"\
					"{CC9900}9. Закуска\t\t{00CC00}5000 руб\n"\
					"{CC9900}10. Сигара\t\t{00CC00}1500 руб",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CASINO, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CASINO)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");
				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{00CC00}1500 руб\n"\
					"2. Пиво\t\t\t{00CC00}3000 руб\n"\
					"3. Вино\t\t\t{00CC00}3000 руб\n"\
					"4. Шампанское\t\t{00CC00}2700 руб\n"\
					"5. Водка\t\t{00CC00}6000 руб\n"\
					"6. Коньяк\t\t{00CC00}9000 руб\n"\
					"7. Виски\t\t{00CC00}12000 руб\n"\
					"8. Абсент\t\t{00CC00}7500 руб\n"\
					"{CC9900}9. Закуска\t\t{00CC00}5000 руб\n"\
					"{CC9900}10. Сигара\t\t{00CC00}1500 руб",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_BIZ, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_BIZ)
			{
				Dialog
				(
					playerid, DIALOG_BIZ_REALTOR_BIZ_LIST, DIALOG_STYLE_LIST,
					"{66FF99}Номера свободных бизнесов",
					g_business_realtor_list,
					"Инфо 70р", "Закрыть"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_HOME, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_HOME)
			{
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_HOTEL, BT_BUY_CHECK_ID))
	{
		ShowPlayerHotelDialog(playerid);
	}
	else if(g_hotel_lift_CP[0] <= checkpointid <= g_hotel_lift_CP[1])
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			new floor_id = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
			ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id);
		}
	}
	else if(checkpointid == army_ammo_CP)
	{
		SetPVarInt(playerid, "player_in_ammo_cp", 1);
	}
	else if(checkpointid == army_ammo_CP)
	{
		SetPVarInt(playerid, "player_in_ammo_cp", 1);
	}
	else if(checkpointid == stiliok)
	{
		callcmd::stili(playerid);
	}
	else if(checkpointid == samolet_CP)
	{
		if(GetPVarInt(playerid, "polet") != 1)
		{
		    if(GetPVarInt(playerid, "pos_polet") == 1)
		    {
		    	SendClientMessage(playerid, -1, "Приветствуем Вас в городе Южный");
		    	SetPlayerPosEx(playerid, 2768.6711,-2011.3108,26.8397,176.1862, 0, 0);
		    	DeletePVar(playerid, "pos_polet");
			}
			if(GetPVarInt(playerid, "pos_polet") == 2)
		    {
		    	SendClientMessage(playerid, -1, "Приветствуем Вас в Майами");
		    	SetPlayerPosEx(playerid, -3759.4082,-5715.5967,13.8423,53.9216, 0, 0);
				DeletePVar(playerid, "pos_polet");
			}
		}
		else
		{
		    SendClientMessage(playerid, -1, "Стюардеса: Ау, куда ты? Мы ещё летим. Совсем чтоли больной в воздухе дверь открывать?");
		}
	}
	else if(checkpointid == mia_bil_CP)
	{
	new send_packet[150];
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "openInterface('Ticket')");
	format(send_packet, sizeof(send_packet), "interface('Ticket').ticketPrice = 10000");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('Ticket').this.ticketFromCountry = 'Russia'");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('Ticket').this.ticketToCountry =  'Miami'");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('Ticket').ticketHour = 12");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('Ticket').ticketMin = 21");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
 	}
	else if(checkpointid == yz_bil_CP)
	{
    new send_packet[150];
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "openInterface('Ticket')");
	format(send_packet, sizeof(send_packet), "interface('Ticket').ticketPrice = 10000");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('Ticket').this.ticketFromCountry = 'Russia'");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('Ticket').this.ticketToCountry =  'Miami'");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('Ticket').ticketHour = 12");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('Ticket').ticketMin = 21");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	}
	else if(miner_job_load_cp[0] <= checkpointid <= sizeof miner_job_load_cp - 1)
	{
		SetPlayerMinerJobLoadCP(playerid, false);
		if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER && GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
		{
			ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
			SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
		}
	}
	return 1;
}

public: CreateFactoryProd(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATED)
		{
			RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);
			new skill = GetPVarInt(playerid, "factory_skill");
			if(!(random(5) + skill == 1))
			{
				if(random(6) == 1)
				{
					new fmt_str[80];
					SetPVarInt(playerid, "factory_skill", skill + 1);
					format(fmt_str, sizeof fmt_str, "Рабочий навык увеличен. Теперь шанс создать бракованый продукт 1 из %d", skill + 5);
					SendClientMessage(playerid, 0x66CC00FF, fmt_str);
				}
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SetPlayerChatBubble(playerid, "+ 1 продукт", 0x66CC00FF, 10.0, 1500);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, 1279, A_OBJECT_BONE_LEFT_FOREARM, 0.4, -0.09, -0.2, 85.0, 0.0, 90.0, 1.0, 1.0, 1.0, 0);
				GameText(playerid, "~g~~h~УСПЕШНО", 4000, 1);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_PUT_PROD);
				SetPlayerTempJobCheckAnim(playerid, true);
			}
			else FactoryPlayerDrop(playerid);
			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
		}
	}
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if(checkpointid == army_ammo_CP)
		DeletePVar(playerid, "player_in_ammo_cp");
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	EliteRace_OnEnterDynamicArea(playerid,areaid);
	if(g_war[W_STATUS])
    {
	    for(new idx; idx < g_business_loaded; idx ++)
		{
		    if(zone_war_a[idx] == areaid)
		    {
		        if(GetPlayerFamily(playerid) == g_war[W_PROTECT_TEAM])
		        {
		            foreach(new i: Player)
					{
						if(GetPlayerFamily(i) == g_war[W_ATTACK_TEAM])
						{
				            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s зашел на территорию капта",GetPlayerNameEx(playerid));
				            SendClientMessage(i, -1, STRING_GLOBAL);
				    	}
				    }
		        }
		        if(GetPlayerFamily(playerid) == g_war[W_ATTACK_TEAM])
		        {
		            foreach(new i: Player)
					{
						if(GetPlayerFamily(i) == g_war[W_PROTECT_TEAM])
						{
				            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s зашел на территорию капта",GetPlayerNameEx(playerid));
				            SendClientMessage(i, -1, STRING_GLOBAL);
				    	}
				    }
		        }
		    }
		}
	}	
    if(areaid == g_pentball)
    {
        GivePlayerWeapon(playerid, 30, 300);
        GivePlayerWeapon(playerid, 31, 300); 
        SetPlayerSkin(playerid, 17006);
    }	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(GetPlayerTeamEx(playerid) != TEAM_PPS && GetPlayerTeamEx(playerid) != TEAM_FSB && GetPlayerTeamEx(playerid) != TEAM_HOSPITAL)
		{
			if(areaid == stationary_radars[0] || areaid == stationary_radars[1] || areaid == stationary_radars[2] || areaid == stationary_radars[3] || 
			areaid == stationary_radars[4] || areaid == stationary_radars[5] || areaid == stationary_radars[6] || areaid == stationary_radars[7])
			{
				new Float: speed = GetPlayerSpeed(playerid);
				if(speed > 120)
				{
					new count = (GetPlayerSpeed(playerid) - 120) * 50000;
					SCMF(playerid, COLOR_ORANGE, "Вы получили штраф за превышение скорости в размере {ffffff}%d руб.", count);
					SendClientMessage(playerid, 0xCECECEFF, "{ffa500}Если вы не оплатите его в течение {ffffff}3 суток {ffa500}- вод.удостоверение будет аннулировано");
					SCMF(playerid, 0x1E90FFFF, "{a6caf0}Допустимая скорость: {ffffff}120 км/ч, {a6caf0}ваша скорость: {ffffff}%d км/ч.", GetPlayerSpeed(playerid));
					CreateTicket(playerid, count, "МВД", "Привышение скорости");
					GameText(playerid, "~r~Штраф", 5000, 1);
				}
			}
		}
		else
		{
		}
	}		
	foreach(new i:Player)
	{
		if(areaid == spike_areas[i])
		{
			new panels, doors, lights, tires;
			GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
			UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, 15);
			break;
		}
	}
    for(new i; i < sizeof g_raffleShop; i++)
	{
		if(areaid == g_raffleShop[i][RS_AREA])
		{
			BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Принять участие в розыгрыше\"]]");
		}
	}	
    if(areaid == radar_areas[playerid])
    {
		new Float: speed = GetPlayerSpeed(playerid);
		new fmt_msg[500];
		new shtraf = GetPlayerSpeed(playerid) * 1000;
		if(speed > 100)
		{
			format(fmt_msg, sizeof fmt_msg, "{ffa500}Вы получили штраф за превышение скорости в размере {ffffff}%d руб.", shtraf);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
			SendClientMessage(playerid, 0xCECECEFF, "{ffa500}Если вы не оплатите его в течение {ffffff}3 суток {ffa500}- вод.удостоверение будет аннулировано");
			format(fmt_msg, sizeof fmt_msg, "{a6caf0}Допустимая скорость: {ffffff}100 км/ч{a6caf0}, ваша скорость: {ffffff}%d км/ч.", GetPlayerSpeed(playerid));
			SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
			GameText(playerid, "~r~Штраф", 5000, 1);
			CreateTicket(playerid, shtraf, "МВД", "Привышение скорости");
		}
    }
	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		new green_zone_id = areaid - g_green_zones[0][GZ_AREA];
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').showGreenZoneTab()");
		SetPVarInt(playerid, "player_in_green_zone", green_zone_id + 1);
		if(IsPlayerDriver(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
			{
				SCM(playerid, 0xf3b557FF, "Вы заехали в непарковочную зону.");
				SCM(playerid, 0xf3b557FF, "Время стоянки ограничено до 5 мин."); 
			}
		}
	}
	for(new i = 0; i <= g_business_loaded; i++)
	{
		if(areaid == biz_area[i])
		{
           CefBiz(playerid, i);
		}
	}
	for(new i; i <= g_kiosk_loaded; i ++)
	{
		if(areaid == array_kiosk_data[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Открыть меню киоска\"]]");
	}
	for(new i; i < g_garden_loaded; i ++)
	{
		if(areaid == array_gardens_data[i][10]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Взаимодействие с дверью\"]]");
	}
	for(new i; i < sizeof g_med_bed_pos; i++)
    {
		if(areaid == array_med_bed_data[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Занять койку\"]]");
	}
	for(new i; i < sizeof g_deteling_alt; i++)
    {
		if(areaid == g_deteling_alt[i]) g_player_deteling_id[playerid] = 1, BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Тонировка\"], [2, \"Винилы\"]]");
	}
	for(new i; i < sizeof g_drag_racing; i++)
    {
		if(areaid == g_drag_racing[i][E_SPHERE])
		{
			if(GetPlayerOwnableCarLast(playerid) != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			if(g_drag_racing[i][E_STATUS] == 0)
			{
				g_drag_racing[i][E_STATUS] = 1;
				g_drag_racing[i][E_PLAYER] = playerid;
				g_drag_racing[i][E_STATUS_PLAYER] = 0;
				g_drag_racing[i][E_BET_PLAYER] = 0;
				g_drag_racing[i][E_TYPE] = 0;
				g_drag_racing[i][E_WIN_PLAYER] = 0;
				g_drag_racing[i][E_BET] = 0;
				g_drag_racing_id[playerid] = i;
				SCM(playerid, 0x709CC9FF, "Вы въехали в зону ожидания заезда.");
				if(g_drag_racing[0][E_STATUS] == 1 && g_drag_racing[1][E_STATUS] == 1)
				{
					OpenDragRacingStart(g_drag_racing[0][E_PLAYER]);
					OpenDragRacingStart(g_drag_racing[1][E_PLAYER]);
				}
			}
		}
	}
	if(areaid == g_drag_racing_finish)
	{
		if(g_drag_racing[g_drag_racing_id[playerid]][E_STATUS] == 2)
		{
			if(g_drag_racing[0][E_WIN_PLAYER] == 0 && g_drag_racing[1][E_WIN_PLAYER] == 0)
			{
				g_drag_racing[g_drag_racing_id[playerid]][E_WIN_PLAYER] = 1;
				SCMF(g_drag_racing[0][E_PLAYER], 0x709CC9FF, "Игрок {FFFFFF}%s {709CC9}достиг финиша первым.", GetPlayerNameEx(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER]));
				SCMF(g_drag_racing[1][E_PLAYER], 0x709CC9FF, "Игрок {FFFFFF}%s {709CC9}достиг финиша первым.", GetPlayerNameEx(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER]));
				SCM(playerid, 0xEAC146FF, "Вы одержали победу в заезде.");
				if(g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] != 0)
				{
					if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 0)
					{
						GivePlayerMoneyEx(playerid, g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2, "Победа в заезде драг рейсинга");
					}
					if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 1)
					{
						GiveIteam(playerid, 293, 1, g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2, 0, "Победа в заезде [Драг рейсинг]");
						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2));
						GameText(playerid, STRING_GLOBAL, 3000, 2);
					}
					if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 2)
					{
						GivePlayerDonate(playerid, g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2);
						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s донат-монет", formatInt(g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2));
						GameText(playerid, STRING_GLOBAL, 3000, 2);
					}
				}
				SCM(playerid, 0xEAC146FF, "Вы покинули заезд.");
				AddPlayerData(playerid, P_DRAG_SCORE, +, 1);
				UpdatePlayerDatabaseInt(playerid, "drag_score", GetPlayerData(playerid, P_DRAG_SCORE));
			}
			else
			{
				g_drag_racing[g_drag_racing_id[playerid]][E_WIN_PLAYER] = 1;
				SCMF(g_drag_racing[0][E_PLAYER], 0x709CC9FF, "Игрок {FFFFFF}%s {709CC9}достиг финиша вторым.", GetPlayerNameEx(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER]));
				SCMF(g_drag_racing[1][E_PLAYER], 0x709CC9FF, "Игрок {FFFFFF}%s {709CC9}достиг финиша вторым.", GetPlayerNameEx(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER]));
				SCM(playerid, 0xEAC146FF, "Вы покинули заезд.");
				FinishDragRacing();
			}
		}
	}
	for(new i; i < sizeof g_business_interiors; i ++)
	{
		if(areaid == array_business_interiors_data[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Взаимодействовать\"]]");
	}
	for(new i; i < MAX_ITEMS; i ++)
    {
		if(areaid == ItemDropSphere[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Подобрать предмет\"]]");
    }
	for(new i; i < MAX_SVALKA_ITEMS; i ++)
    {
		if(g_svalka_items[i][S_ITEM_TIME] == 0) continue;
		if(areaid == alt_svalka_items[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Осмотреть мусор\"]]");
    }
	for(new i; i < MAX_CONTAINERS; i ++)
    {
		if(areaid == alt_containers_bet[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Сделать ставку\"]]");
		if(s_containers[i][S_CT_WIN_ID] != playerid) continue;
		if(areaid == alt_containers_open[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Снять замок\"]]");
		if(areaid == alt_containers_items[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Разобрать содержимое\"]]");
    }
	for(new i; i < sizeof g_mine_rack; i++)
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_MINER) continue;
		if(areaid == g_mine_rack_sphere[i])
		{
			if(g_player_mine_status[playerid] == 0) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Взять инструмент\"]]");
		}
	}
	for(new i; i < sizeof g_mine_ore; i++)
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_MINER) continue;
		if(areaid == g_mine_ore[i][MO_SPHERE])
		{
			if(g_player_mine_status[playerid] == 1 || g_player_mine_status[playerid] == 8) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Взаимодействовать\"]]");
		}
	}
	if(areaid == g_player_mine_sphere[playerid])
	{
		BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Взаимодействовать\"]]");
	}
	for(new i; i < MAX_SVALKA_CARS; i ++)
    {
		if(g_svalka_cars[i][S_CAR_TIME] == 0) continue;
		if(areaid == alt_svalka_cars[i]) BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Осмотреть мусор\"]]");
    }
	for(new i; i < g_vorota_loaded; i ++)
    {
		if(areaid == array_vorota_data[i])
		{
			if(GetVorotaData(i, V_TYPE_OPEN) == 0 || GetVorotaData(i, V_TYPE_OPEN) == 1) 
            {
                new houseid = GetNearestHouse(playerid, 46.0);
                if(houseid != -1)
                {
                    if(GetHouseData(houseid, H_OWNER_ID) != GetPlayerAccountID(playerid) && GetPlayerFamilyHouse(playerid) != houseid) return 1;
                }
            }
			BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Открыть/Закрыть\"]]");
		}
    }
	for(new i; i < sizeof(g_alt_hint); i++)
    {
		if(areaid == array_hint_data[i])
		{
			if(g_alt_hint[i][eHintType] == 1) if(!IsPlayerInAnyVehicle(playerid) || !IsPlayerDriver(playerid)) return 1;
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[1, \"%s\"]]", g_alt_hint[i][eHintName]); 
			BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", STRING_GLOBAL);
			return 1;
		}
    }
	for(new i; i < MAX_FISHING_ZONE; i++)
	{
		if(areaid == g_fishing_sphere[i])
		{
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').showFishingZone()");
			g_player_fishing_zone[playerid] = 1;
		}	
	}
	for(new i = 0; i <= g_house_loaded; i++)
	{
		if(areaid == home_area[i]) 
		{
			SetPVarInt(playerid, "pickup_house", i);
			ShowHomeInfoPick(playerid, i);
		}
	}
	if(areaid == factory_put_zone)
	{
		if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
		{
			if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
			{
				new objectid;
				new items = GetPlayerJobLoadItems(playerid);
				new Float: x, Float: y, Float: z, Float: angle;
				new randomcase = random(10);
				if(randomcase == 7) Dialog(playerid, DIALOG_CASE_TWO, DIALOG_STYLE_MSGBOX, "Предложение", "Вы нашли кейс, хотите забрать его себе?", "Да", "Нет");
				if(randomcase == 2) Dialog(playerid, DIALOG_KEY_ONE, DIALOG_STYLE_MSGBOX, "Предложение", "Вы нашли `Ключ от кейса`, хотите забрать его себе?", "Да", "Нет");
				SetPlayerTempJobCheckAnim(playerid, false);
				ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				TogglePlayerFactoryCP(playerid, true);
				SetPlayerJobLoadItems(playerid, items + 1);
				AddPlayerData(playerid, P_JOB_WAGE, +, random(500000) + 500000);
				SendClientMessage(playerid, 0xFFFF00FF, "Продукт доставлен на склад");
				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, angle);
				objectid = CreateDynamicObject(1279, x, 406.7452, 995.7358, 0.9, 0.0, angle);
				MoveDynamicObject(objectid, 419.9673, -406.7452, 995.7358, 2.0, 0.9, 0.0, angle);
				Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(IsPlayerDriver(playerid))
    {
        for(new i; i < sizeof TrafficLight; i++)
        {
			if(GetPlayerTeamEx(playerid) != TEAM_PPS && GetPlayerTeamEx(playerid) != TEAM_FSB && GetPlayerTeamEx(playerid) != TEAM_HOSPITAL)
            if(TrafficLight[i][TR_AreaID] == areaid)
            {
                if(TrafficLight[i][TR_ColorStatus] == 0)
                {

                }
            }
        }
    }	
	EliteRace_OnLeaveDynamicArea(playerid,areaid);
	if(g_war[W_STATUS])
    {
	    for(new idx; idx < g_business_loaded; idx ++)
		{
		    if(zone_war_a[idx] == areaid)
		    {
		        if(GetPlayerFamily(playerid) == g_war[W_PROTECT_TEAM])
		        {
		            foreach(new i: Player)
					{
						if(GetPlayerFamily(i) == g_war[W_ATTACK_TEAM])
						{
				            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s вышел из территории капта",GetPlayerNameEx(playerid));
				            SendClientMessage(i, -1, STRING_GLOBAL);
				    	}
				    }
		        }
		        if(GetPlayerFamily(playerid) == g_war[W_ATTACK_TEAM])
		        {
		            foreach(new i: Player)
					{
						if(GetPlayerFamily(i) == g_war[W_PROTECT_TEAM])
						{
				            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s вышел из территории капта",GetPlayerNameEx(playerid));
				            SendClientMessage(i, -1, STRING_GLOBAL);
				    	}
				    }
		        }
		    }
		}
	}	
    if(areaid == g_jailSphere)
    {
        if(GetPlayerData(playerid, P_JAIL))
        {
            SetPlayerSpawnPos(playerid);
            static logMessage[200];
            format(logMessage, sizeof(logMessage), "{F81414}[AC] Игрок %s[%d]подозреваеться в использовании читов [Выход и тюрьмы]", GetPlayerNameEx(playerid), playerid); 
            SendMessageToAdmins(logMessage, 0xFF0000FF, 0); 
            SendClientMessage(playerid, 0xFF0000FF, "Вы вышли за пределы тюрьмы и были возвращены обратно.");
        }
    }
    if(areaid == g_pentball)
    {
        RemovePlayerWeapon(playerid, 30);
        RemovePlayerWeapon(playerid, 31);
        SetPlayerPos(playerid, -157.9922,396.2137,1001.0000); 
        SetPlayerFacingAngle(playerid, 267.2424);
		SetPlayerVirtualWorld(playerid, 0);
    }			
	new player_last_pickup = GetPlayerData(playerid, P_LAST_PICKUP);
	if(player_last_pickup != -1 && GetPickupInfo(player_last_pickup, P_DYNAMIC_ZONE) == areaid) SetPlayerData(playerid, P_LAST_PICKUP, -1);
	if(areaid == platkadorogi[0] || areaid == platkadorogi[1])
	{
		if(IsPlayerDriver(playerid))
		{
			if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 4000000))
			{
				GivePlayerMoneyEx(playerid, -4000000);
			}
		}
	}
	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').hideGreenZoneTab()");
		SetPVarInt(playerid, "player_in_green_zone", 0);
		if(IsPlayerDriver(playerid))
		{ 
			SCM(playerid, 0xf3b557FF, !"Вы покинули непарковочную зону.");
		}
	}
	for(new i; i < g_kiosk_loaded; i ++)
		if(areaid == array_kiosk_data[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < g_garden_loaded; i ++)
	{
		if(areaid == array_gardens_data[i][10]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	}
    for(new i; i < sizeof g_raffleShop; i++)
	{
		if(areaid == g_raffleShop[i][RS_AREA])
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		}
	}	
	for(new i; i < sizeof g_med_bed_pos; i++)
		if(areaid == array_med_bed_data[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < sizeof g_deteling_alt; i++)
		if(areaid == g_deteling_alt[i]) g_player_deteling_id[playerid] = 0, BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < sizeof g_drag_racing; i++)
    {
		if(areaid == g_drag_racing[i][E_SPHERE])
		{
			for(new td; td < 1; td++)
			{
				if(g_drag_racing[i][E_STATUS] == 1)
				{
					g_drag_racing[i][E_STATUS] = 0;
					g_drag_racing[i][E_STATUS_PLAYER] = 0;
					g_drag_racing[i][E_BET_PLAYER] = 0;
					g_drag_racing[i][E_TYPE] = 0;
					g_drag_racing[i][E_WIN_PLAYER] = 0;
					g_drag_racing[i][E_BET] = 0;
					SCM(playerid, 0xEAC146FF, "Вы покинули зону ожидания заезда.");
					BitStream_1(g_drag_racing[0][E_PLAYER], s_CefInterface, t_CefHide, "DragRacingStart");
					BitStream_1(g_drag_racing[1][E_PLAYER], s_CefInterface, t_CefHide, "DragRacingStart");
					g_drag_racing[i][E_PLAYER] = 0;
				}
			}
		}
	}
	for(new i; i < sizeof g_business_interiors; i ++)
		if(areaid == array_business_interiors_data[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < sizeof g_alt_hint; i++) 
		if(areaid == array_hint_data[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < MAX_FISHING_ZONE; i++)
		if(areaid == g_fishing_sphere[i]) 
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').hideFishingZone()"),
			g_player_fishing_zone[playerid] = 0;
	for(new i; i < g_vorota_loaded; i ++) 
		if(areaid == array_vorota_data[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < MAX_ITEMS; i ++) 
		if(areaid == ItemDropSphere[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < MAX_ITEMS; i ++) 
		if(areaid == ItemDropSphere[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < MAX_SVALKA_ITEMS; i ++)
		if(areaid == alt_svalka_items[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i; i < MAX_CONTAINERS; i ++)
	{
		if(areaid == alt_containers_items[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		if(areaid == alt_containers_open[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		if(areaid == alt_containers_bet[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	}
	for(new i; i < sizeof g_mine_rack; i++)
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_MINER) continue;
		if(areaid == g_mine_rack_sphere[i])
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		}
	}
	for(new i; i < sizeof g_mine_ore; i++)
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_MINER) continue;
		if(areaid == g_mine_ore[i][MO_SPHERE])
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		}
	}
	if(areaid == g_player_mine_sphere[playerid])
	{
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	}
	for(new i; i < MAX_SVALKA_CARS; i ++)
   		if(areaid == alt_svalka_cars[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		if(areaid == biz_area[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions"), BitStream_1(playerid, s_CefInterface, t_CefHide, "InfoCard");
	}
	for(new i = 0; i < g_house_loaded; i++)
	{
		if(areaid == home_area[i]) BitStream_1(playerid, s_CefInterface, t_CefHide, "Appartament"), BitStream_1(playerid, s_CefInterface, t_CefHide, "InfoCard");
	}
	if(!GetPlayerData(playerid, P_BLOCK_LEAVE_AREA))
	{
		if(areaid == miner_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_MINER, true);
		}
		else if(areaid == factory_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
		}
	}
	else SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, false);
	return 1;
}

const TICKET_PRICE = 5000000;
public: TrainMetro_OnPlayerBuyTicket(playerid)
{
	if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), TICKET_PRICE)) return SCM(playerid, 0xf9a118FF, "У вас не хватает денег для покупки билета");
    g_player_metro[playerid][E_PLAYER_METRO_STATUS] = 1;
    GivePlayerMoneyEx(playerid,-TICKET_PRICE);
    SendClientMessage(playerid,COLOR_GOLD,"[Информация] {FFAF00}Выберите станцию на которую хотите приехать.");
    BitStream_1(playerid, s_CefInterface, t_CefHide, "BuyTicket");
    string_dialog[0] = EOS;
    STRING_GLOBAL[0] = EOS;
    for(new idx, count; idx < sizeof g_metro_station; idx ++)
    {
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d]  Станция Метро: \"%s\" Дистанция: [%.1f м.]\n",g_metro_station[idx][PICKUP_ID],g_metro_station[idx][M_NAME], GetPlayerDistanceFromPoint(playerid,  g_metro_station[idx][PICKUP_POS_X], g_metro_station[idx][PICKUP_POS_Y], g_metro_station[idx][PICKUP_POS_Z]));
        strcat(string_dialog, STRING_GLOBAL);
        SetPlayerListitemValue(playerid, count ++, idx);
    }
    Dialog(playerid, BUY_TICKET_METRO, DIALOG_STYLE_LIST, "Метрополитен", string_dialog, "Выбрать", "Выйти");
    return 1;
}

stock OnCreateMetroStation()
{
    for(new while_you; while_you < sizeof g_metro_station; while_you ++)
	{
        CreatePickup(1239, 23, g_metro_station[while_you][PICKUP_POS_X],g_metro_station[while_you][PICKUP_POS_Y],g_metro_station[while_you][PICKUP_POS_Z], -1, BUY_TICKET);
        CreateDynamic3DTextLabel("Покупка билета на метро\n{F3FF02}L.ALT", 0xFAAC58FF, g_metro_station[while_you][PICKUP_POS_X],g_metro_station[while_you][PICKUP_POS_Y],g_metro_station[while_you][PICKUP_POS_Z] + 0.8, 5.0);
	}
}

public OnDynamicObjectMoved(objectid)
{
	new type = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID);
	switch(type)
	{
		case OBJECT_TYPE_FACTORY:
		{
			if(IsValidDynamicObject(objectid)) DestroyDynamicObject(objectid);
			type = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT);
			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, type + 1);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);
		}
		case OBJECT_TYPE_CARRIAGE:
		{
			miner_carriage[0][MC_IN_MOVE] = false;
			MinerCarriageSetState(0);
		}
		case OBJECT_TYPE_WOOD:
		{
			new Float: object_x,
				Float: object_y,
				Float: object_z,
				index;
			GetDynamicObjectPos(objectid, object_x, object_y, object_z);
			if(IsValidDynamicObject(objectid)) DestroyDynamicObject(objectid);
			index = object_x == 2399.2898 ? 0 : 1;
			if(index)
			{
				new object = CreateDynamicObject(1448, object_x, object_y, object_z, 0.0, 0.0, 0.0);
				MoveDynamicObject(object, 2399.2898, object_y, object_z, 2.0, 0.0, 0.0, 0.0);
			}
			else
			{
				type = GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT);
				SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT, type + 1);
				UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
			}
		}
	}
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if(response == EDIT_RESPONSE_FINAL)
    {
        if(GetPVarInt(playerid, "create_bill") == 1)
        {
			DestroyObject(EditObjectPlayer[playerid]);
			static const mysql_str[] = "INSERT INTO `billboard` (`type`, `color`, `pos_x`, `pos_y`, `pos_z`, `rot_x`, `rot_y`, `rot_z`) VALUES ('%d', %d, '%f', '%f', '%f', '%f', '%f', '%f')";
			new str[sizeof(mysql_str) + 30 + 10 + (6 * 6)];
			format(str, sizeof(str), mysql_str,
			    GetPVarInt(playerid, "bill_type"),
				GetPVarInt(playerid, "bill_color"),
				x,
				y,
				z,
				rx,
				ry,
				rz);
			mysql_query(mysql, str, false);
			DeletePVar(playerid, "create_bill");
        }
    	if(GetPVarInt(playerid, "obj_edit"))
    	{
    		SetString(ObjInfo[TOTALOBJECTS][objName], ObjectNamePlayer[playerid]);
			ObjInfo[TOTALOBJECTS][objModel] = GetPVarInt(playerid, "obj_model");
			ObjInfo[TOTALOBJECTS][objPosX] = x;
			ObjInfo[TOTALOBJECTS][objPosY] = y;
			ObjInfo[TOTALOBJECTS][objPosZ] = z;
			ObjInfo[TOTALOBJECTS][objRotX] = rx;
			ObjInfo[TOTALOBJECTS][objRotY] = ry;
			ObjInfo[TOTALOBJECTS][objRotZ] = rz;
			DestroyObject(EditObjectPlayer[playerid]);
			ObjInfo[TOTALOBJECTS][objID] = CreateDynamicObject(ObjInfo[TOTALOBJECTS][objModel], ObjInfo[TOTALOBJECTS][objPosX], ObjInfo[TOTALOBJECTS][objPosY], ObjInfo[TOTALOBJECTS][objPosZ], ObjInfo[TOTALOBJECTS][objRotX], ObjInfo[TOTALOBJECTS][objRotY], ObjInfo[TOTALOBJECTS][objRotZ]);
			static const mysql_str[] = "INSERT INTO `create_objects` (`Name`, `Model`, `PosX`, `PosY`, `PosZ`, `RotX`, `RotY`, `RotZ`) VALUES ('%s', %d, '%f', '%f', '%f', '%f', '%f', '%f')";
			new str[sizeof(mysql_str) + 30 + 10 + (6 * 6)];
			format(str, sizeof(str), mysql_str,
				ObjInfo[TOTALOBJECTS][objName],
				ObjInfo[TOTALOBJECTS][objModel],
				ObjInfo[TOTALOBJECTS][objPosX],
				ObjInfo[TOTALOBJECTS][objPosY],
				ObjInfo[TOTALOBJECTS][objPosZ],
				ObjInfo[TOTALOBJECTS][objRotX],
				ObjInfo[TOTALOBJECTS][objRotY],
				ObjInfo[TOTALOBJECTS][objRotZ]);
			mysql_query(mysql, str, false);
			TOTALOBJECTS ++;
    	}
        return 1;
    }
    if(response == EDIT_RESPONSE_CANCEL)
    {
        if(GetPVarInt(playerid, "create_bill"))
    	{
	        DestroyObject(EditObjectPlayer[playerid]);
	        CancelEdit(playerid);
	        DeletePVar(playerid, "create_bill");
    	}
    	if(GetPVarInt(playerid, "obj_edit"))
    	{
	        DestroyObject(EditObjectPlayer[playerid]);
	        CancelEdit(playerid);
    	}
        return 1;
    }
	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	return 0;
}

public: LoadGangZones()
{
	new idx;
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT * FROM gang_zones", true);
	rows = cache_num_rows();
	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangZones]: DB rows > MAX_GZ");
	}
	for(idx = 0; idx < rows; idx ++)
	{
		SetGangZoneData(idx, GZ_MIN_X,	cache_get_field_content_float(idx, "min_x"));
		SetGangZoneData(idx, GZ_MIN_Y,	cache_get_field_content_float(idx, "min_y"));
		SetGangZoneData(idx, GZ_MAX_X,	cache_get_field_content_float(idx, "max_x"));
		SetGangZoneData(idx, GZ_MAX_Y,	cache_get_field_content_float(idx, "max_y"));
		SetGangZoneData(idx, GZ_GANG,	cache_get_field_content_int(idx, "fraction"));
		g_gang_zone[idx][GZ_ZONE] = GangZoneCreate
		(
			GetGangZoneData(idx, GZ_MIN_X),
			GetGangZoneData(idx, GZ_MIN_Y),
			GetGangZoneData(idx, GZ_MAX_X),
			GetGangZoneData(idx, GZ_MAX_Y)
		);
		g_gang_zone[idx][GZ_AREA] = CreateDynamicRectangle
		(
			GetGangZoneData(idx, GZ_MIN_X),
			GetGangZoneData(idx, GZ_MIN_Y),
			GetGangZoneData(idx, GZ_MAX_X),
			GetGangZoneData(idx, GZ_MAX_Y)
		);
	}
	g_gang_zones_loaded = rows;
	cache_delete(result);
	printf("[GangZones]: Гангзон загружено: %d", g_gang_zones_loaded);
}

stock ShowGangZonesForPlayer(playerid)
{
	for(new idx; idx < sizeof g_gang_zone; idx ++)
	{
		GangZoneShowForPlayer(playerid, GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[ GetGangZoneData(idx, GZ_GANG) ]);
	}
	if(g_capture[C_STATUS])
		GangZoneFlashForPlayer(playerid, GetGangZoneData(g_capture[C_GANG_ZONE], GZ_ZONE), gang_zone_colors[ g_capture[C_ATTACK_TEAM] ]);
}

stock UpdateGangZone(idx)
{
	if(!GetGangZoneData(idx, GZ_GANG))
	{
		new area_players[3];
		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(!IsPlayerInDynamicArea(i, GetGangZoneData(idx, GZ_AREA))) continue;
			else if(!(TEAM_MAFIA_RUSSIAN <= GetPlayerTeamEx(i) <= TEAM_MAFIA_ITALIAN)) continue;
			area_players[ GetPlayerTeamEx(i) - TEAM_MAFIA_RUSSIAN ] ++;
		}
		for(new i; i < 3; i++)
		{
			if(area_players[i] < MIN_PLAYERS_FOR_CAPTURE) continue;
			SetGangZoneData(idx, GZ_GANG, i + 1);
			SaveGangZone(idx + 1);
			GangZoneShowForAll(GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[i + 1]);
			UpdateGangRepository(i);
			break;
		}
	}
}

stock SaveGangZone(idx)
{
	new query[50];
	mysql_format(mysql, query, sizeof query, "UPDATE gang_zones SET fraction=%d WHERE id=%d", GetGangZoneData(idx, GZ_GANG), idx);
	mysql_query(mysql, query, false);
}
stock GetGangZonesCount(team)
{
	new count;
	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(GetGangZoneData(idx, GZ_GANG) != team) continue;
		count ++;
	}
	return count;
}

public: LoadGangRepositories()
{
	new idx;
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT * FROM gang_repositories", true);
	rows = cache_num_rows();
	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangRepositories]: DB rows > MAX_GANG_REPOSITORIES");
	}
	for(idx = 0; idx < rows; idx ++)
	{
		SetGangRepositoryData(idx, GR_GANG, 		cache_get_field_content_int(idx, "id"));
		SetGangRepositoryData(idx, GR_METALL, 		cache_get_field_content_int(idx, "metall"));
		SetGangRepositoryData(idx, GR_AMMO, 		cache_get_field_content_int(idx, "ammo"));
		SetGangRepositoryData(idx, GR_DRUGS, 		cache_get_field_content_int(idx, "drugs"));
		SetGangRepositoryData(idx, GR_MONEY, 		cache_get_field_content_int(idx, "money"));
		SetGangRepositoryData(idx, GR_LOCK, 		bool: cache_get_field_content_int(idx, "lock"));
		new fmt_text[330],
			gang_id = GetGangRepositoryData(idx, GR_GANG);
		format
		(
		    fmt_text, sizeof fmt_text,
		    "Склад\n\
		    {33AA33}%s\n\n\
		    {"#cW"}Наркотики: {"#cGold"}%d из 20000 г\n\
		    {"#cW"}Патроны: {"#cGold"}%d из 5000 шт\n\
		    {"#cW"}Металл: {"#cGold"}%d из 6000 кг\n\
		    {"#cW"}Деньги: {"#cGold"}%d руб\n\n\
		    {"#cW"}Территории: {"#cGold"}%d\n\n\
		    {"#cW"}Состояние: %s\
		    ",
   			GetTeamName(idx + TEAM_MAFIA_RUSSIAN),
			GetGangRepositoryData(idx, GR_DRUGS),
			GetGangRepositoryData(idx, GR_AMMO),
			GetGangRepositoryData(idx, GR_METALL),
			GetGangRepositoryData(idx, GR_MONEY),
			GetGangZonesCount(gang_id + 1),
			GetGangRepositoryData(idx, GR_LOCK) ? "{33AA33}Открыт" : "{FF6600}Закрыт"
		);
		g_gang_repository[idx][GR_LABEL] = CreateDynamic3DTextLabel
		(
			fmt_text,
			COLOR_WHITE,
			GetTeamData(idx + TEAM_MAFIA_RUSSIAN, O_REPOSITORY_POS)[0],
			GetTeamData(idx + TEAM_MAFIA_RUSSIAN, O_REPOSITORY_POS)[1],
			GetTeamData(idx + TEAM_MAFIA_RUSSIAN, O_REPOSITORY_POS)[2] + 0.8, //+ 1.5,
			10.0
		);
		g_gang_repository[idx][GR_PICKUP] = CreatePickup
		(
			2969,
			23,
			GetTeamData(idx + TEAM_MAFIA_RUSSIAN, O_REPOSITORY_POS)[0],
			GetTeamData(idx + TEAM_MAFIA_RUSSIAN, O_REPOSITORY_POS)[1],
			GetTeamData(idx + TEAM_MAFIA_RUSSIAN, O_REPOSITORY_POS)[2],
			-1,
			PICKUP_ACTION_TYPE_GANG_REPOSIT,
			gang_id
		);
	}
	cache_delete(result);
	printf("[GangRepositories]: Склады банд загружены");
}

stock UpdateGangRepository(idx)
{
	new fmt_text[330],
		gang_id = GetGangRepositoryData(idx, GR_GANG);
	format
	(
  		fmt_text, sizeof fmt_text,
  		"Склад\n\
  		{33AA33}%s\n\n\
		{"#cW"}Наркотики: {"#cGold"}%d из 20000 г\n\
		{"#cW"}Патроны: {"#cGold"}%d из 5000 шт\n\
		{"#cW"}Металл: {"#cGold"}%d из 6000 кг\n\
		{"#cW"}Деньги: {"#cGold"}%d руб\n\n\
		{"#cW"}Территории: {"#cGold"}%d\n\n\
		{"#cW"}Состояние: %s\
  		",
		GetTeamName(idx + TEAM_MAFIA_RUSSIAN),
		GetGangRepositoryData(idx, GR_DRUGS),
		GetGangRepositoryData(idx, GR_AMMO),
		GetGangRepositoryData(idx, GR_METALL),
		GetGangRepositoryData(idx, GR_MONEY),
		GetGangZonesCount(gang_id + 1),
		GetGangRepositoryData(idx, GR_LOCK) ? "{33AA33}Открыт" : "{FF6600}Закрыт"
	);
	UpdateDynamic3DTextLabelText(GetGangRepositoryData(idx, GR_LABEL), COLOR_WHITE, fmt_text);
}

stock LoadServerConfig()
{
	new Cache: result;
	result = mysql_query(mysql, "SELECT * FROM server_config", true);
	g_doubling[0] = cache_get_field_content_int(0, "x_donate");
	g_doubling[1] = cache_get_field_content_int(0, "x_exp");
	g_doubling[2] = cache_get_field_content_int(0, "x_sallary");
	Test_server = cache_get_field_content_int(0, "test_status");
	cache_delete(result);
	print("[Config] Серверные настройки загружены успешно");
}

stock SaveServerConfig()
{
	new query[200];
	mysql_format(mysql, query, sizeof query, "UPDATE server_config SET x_donate='%d', x_exp='%d', x_sallary='%d', test_status='%d' LIMIT 1", g_doubling[0], g_doubling[1], g_doubling[2], Test_server);
	mysql_query(mysql, query, false);
}

public: LoadOwnableCar(playerid, oc_id)
{
	if(g_ownable_car_loaded + 1 > MAX_OWNABLE_CARS)
	{
		print("[OwnableCars]: Ioeaea a caa?ocea. I?aauoai eeieo ee?iiai o?ainii?oa (MAX_OWNABLE_CARS)");
		return -1;
	}
	new query[250],
		Cache: result,
		vehicleid;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE id='%d' LIMIT 1", oc_id);
	result = mysql_query(mysql, query, true);
	new idx = GetFreeOwnableCarID();
	SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(0, "id"));
	SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(0, "owner_id"));
	SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(0, "model_id"));
	SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(0, "color_1"));
	SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(0, "color_2"));
	SetOwnableCarData(idx, OC_VINIL, 		cache_get_field_content_int(0, "vinil"));
	SetOwnableCarData(idx, OC_VINILTYPE, 		cache_get_field_content_int(0, "viniltype"));
	SetOwnableCarData(idx, OC_DISKI, 		cache_get_field_content_int(0, "diski"));
	SetOwnableCarData(idx, OC_GIDRA, 		cache_get_field_content_int(0, "gidra"));
	SetOwnableCarData(idx, OC_WASH,			cache_get_field_content_int(0, "wash"));
	SetOwnableCarData(idx, OC_MASLO, 		cache_get_field_content_int(0, "maslo"));
	SetOwnableCarData(idx, OC_MASLO_FILTER, 		cache_get_field_content_int(0, "maslo_filter"));
	SetOwnableCarData(idx, OC_FILTER, 		cache_get_field_content_int(0, "filter"));
	SetVehicleData(idx, V_RENT, 		cache_get_field_content_int(0, "rent"));
	SetVehicleData(idx, V_RENTP, 		cache_get_field_content_int(0, "rentp"));
	SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(0, "pos_x"));
	SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(0, "pos_y"));
	SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(0, "pos_z"));
	SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(0, "angle"));
	SetOwnableCarData(idx, OC_INTER, 		cache_get_field_content_int(0, "inter"));
	SetOwnableCarData(idx, OC_WORLD, 		cache_get_field_content_int(0, "world"));
	cache_get_field_content(0, "number", g_ownable_car[idx][OC_NUMBER], mysql, 10);
	cache_get_field_content(0, "region", g_ownable_car[idx][OC_REGION], mysql, 10);
 	SetOwnableCarData(idx, OC_TONERINSTALL, 		cache_get_field_content_int(0, "tonerinstall"));
	SetOwnableCarData(idx, OC_NUMBERTYPE, 		cache_get_field_content_int(0, "typenumber"));
	SetOwnableCarData(idx, OC_FUEL, 		cache_get_field_content_float(0, "fuel"));
	SetOwnableCarData(idx, OC_ALARM, 		bool: cache_get_field_content_int(0, "alarm"));
	SetOwnableCarData(idx, OC_KEY_IN, 		bool: cache_get_field_content_int(0, "key_in"));
	SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));
	SetOwnableCarData(idx, OC_PNEWMA, 		cache_get_field_content_int(0, "pnewma"));
 	SetOwnableCarData(idx, OC_SAB, 		cache_get_field_content_int(0, "sab"));
	SetOwnableCarData(idx, OC_SAB_X, 		cache_get_field_content_float(0, "sab_x"));
	SetOwnableCarData(idx, OC_SAB_Y, 		cache_get_field_content_float(0, "sab_y"));
	SetOwnableCarData(idx, OC_SAB_Z, 		cache_get_field_content_float(0, "sab_z"));
	SetOwnableCarData(idx, OC_STAGE, 		cache_get_field_content_int(0, "stage"));
	SetOwnableCarData(idx, OC_STAGE1, 		cache_get_field_content_int(0, "stage1"));
	SetOwnableCarData(idx, OC_STAGE1_1, 		cache_get_field_content_int(0, "stage1_1"));
	SetOwnableCarData(idx, OC_STAGE2, 		cache_get_field_content_int(0, "stage2"));
	SetOwnableCarData(idx, OC_STAGE3, 		cache_get_field_content_int(0, "stage3"));
	SetOwnableCarData(idx, OC_ST1X, 		cache_get_field_content_float(0, "st1x"));
	SetOwnableCarData(idx, OC_ST1Y, 		cache_get_field_content_float(0, "st1y"));
	SetOwnableCarData(idx, OC_ST1Z, 		cache_get_field_content_float(0, "st1z"));
	SetOwnableCarData(idx, OC_ST1RX, 		cache_get_field_content_float(0, "st1rx"));
	SetOwnableCarData(idx, OC_ST1RY, 		cache_get_field_content_float(0, "st1ry"));
	SetOwnableCarData(idx, OC_ST1RZ, 		cache_get_field_content_float(0, "st1rz"));
	SetOwnableCarData(idx, OC_ST2X, 		cache_get_field_content_float(0, "st2x"));
	SetOwnableCarData(idx, OC_ST2Y, 		cache_get_field_content_float(0, "st2y"));
	SetOwnableCarData(idx, OC_ST2Z, 		cache_get_field_content_float(0, "st2z"));
	SetOwnableCarData(idx, OC_ST2RX, 		cache_get_field_content_float(0, "st2rx"));
	SetOwnableCarData(idx, OC_ST2RY, 		cache_get_field_content_float(0, "st2ry"));
	SetOwnableCarData(idx, OC_ST2RZ, 		cache_get_field_content_float(0, "st2rz"));
	SetOwnableCarData(idx, OC_ST3X, 		cache_get_field_content_float(0, "st3x"));
	SetOwnableCarData(idx, OC_ST3Y, 		cache_get_field_content_float(0, "st3y"));
	SetOwnableCarData(idx, OC_ST3Z, 		cache_get_field_content_float(0, "st3z"));
	SetOwnableCarData(idx, OC_ST3RX, 		cache_get_field_content_float(0, "st3rx"));
	SetOwnableCarData(idx, OC_ST3RY, 		cache_get_field_content_float(0, "st3ry"));
	SetOwnableCarData(idx, OC_ST3RZ, 		cache_get_field_content_float(0, "st3rz"));
	SetOwnableCarData(idx, OC_ST11X, 		cache_get_field_content_float(0, "st11x"));
	SetOwnableCarData(idx, OC_ST11Y, 		cache_get_field_content_float(0, "st11y"));
	SetOwnableCarData(idx, OC_ST11Z, 		cache_get_field_content_float(0, "st11z"));
	SetOwnableCarData(idx, OC_ST11RX, 		cache_get_field_content_float(0, "st11rx"));
	SetOwnableCarData(idx, OC_ST11RY, 		cache_get_field_content_float(0, "st11ry"));
	SetOwnableCarData(idx, OC_ST11RZ, 		cache_get_field_content_float(0, "st11rz"));
	SetOwnableCarData(idx, OC_GLASS, 		cache_get_field_content_int(0, "glass"));
	SetOwnableCarData(idx, OC_PROCENT, 		cache_get_field_content_int(0, "procent"));
	SetOwnableCarData(idx, OC_STEKLO_0, 		cache_get_field_content_int(0, "steklo_0"));
	SetOwnableCarData(idx, OC_STEKLO_1, 		cache_get_field_content_int(0, "steklo_1"));
	SetOwnableCarData(idx, OC_STEKLO_2, 		cache_get_field_content_int(0, "steklo_2"));
 	SetOwnableCarData(idx, OC_NO_KEY_DOSTUP, 		cache_get_field_content_int(0, "no_key_dostup"));
	SetOwnableCarData(idx, OC_NUMBER_STATUS, 		cache_get_field_content_int(0, "number_status"));
	cache_get_field_content(0, "obves", g_ownable_car[idx][OC_OBVES], mysql, 333);
	cache_get_field_content(0, "pselect", g_ownable_car[idx][OC_TSELECT], mysql, 155);
 	cache_get_field_content(0, "tcolor", g_ownable_car[idx][OC_TCOLOR], mysql, 155);
 	cache_get_field_content(0, "tprocent", g_ownable_car[idx][OC_TPROCENT], mysql, 155);
	SetOwnableCarData(idx, OC_PNEWMA_1, 		cache_get_field_content_float(0, "pnewma_1"));
	SetOwnableCarData(idx, OC_PNEWMA_2, 		cache_get_field_content_float(0, "pnewma_2"));
	SetOwnableCarData(idx, OC_ENGINE_ACCELERATION, 		cache_get_field_content_float(0, "engineacceleration"));
	SetOwnableCarData(idx, OC_MAX_VELOCITY, 		cache_get_field_content_float(0, "maxgearvelocity"));
	SetOwnableCarData(idx, OC_MUSIC_STATUS, 0);
	vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	DestroyVehicleLabel(vehicleid);
	if(GetOwnableCarData(idx, OC_SAB) == 1)
	{
		    new sscanf_delimit[333];
			new Float:e_X, Float:e_Y, Float:e_Z, Float:e_RX, Float:e_RY, Float:e_RZ;
			cache_get_field_content(0, "sab_pos", sscanf_delimit, mysql, 333) ;
			sscanf(sscanf_delimit, "p<,>ffffff", e_X, e_Y, e_Z, e_RX, e_RY, e_RZ) ;
			SetOwnableCarData(idx, OC_SAB_X, 		e_X);
			SetOwnableCarData(idx, OC_SAB_Y, 		e_Y);
			SetOwnableCarData(idx, OC_SAB_Z, 		e_Z);
			SetOwnableCarData(idx, OC_SAB_RX, 		e_RX);
			SetOwnableCarData(idx, OC_SAB_RY, 		e_RY);
			SetOwnableCarData(idx, OC_SAB_RZ, 		e_RZ);
			sab[vehicleid] = CreateDynamicObject(13946, 0, 0, 0, 0, 0, 0);
			AttachDynamicObjectToVehicle(sab[vehicleid], vehicleid, e_X, e_Y, e_Z, e_RX, e_RY, e_RZ);
	}
	if(GetOwnableCarData(idx, OC_STAGE1) != 0)
	{
		Stage1[vehicleid] = CreateDynamicObject(10443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(Stage1[vehicleid], vehicleid, GetOwnableCarData(idx, OC_ST1X), GetOwnableCarData(idx, OC_ST1Y),
		GetOwnableCarData(idx, OC_ST1Z), GetOwnableCarData(idx, OC_ST1RX), GetOwnableCarData(idx, OC_ST1RY), GetOwnableCarData(idx, OC_ST1RZ));
	}
	if(GetOwnableCarData(idx, OC_STAGE1_1) != 0)
	{
		Stage1_1[vehicleid] = CreateDynamicObject(10442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(Stage1_1[vehicleid], vehicleid, GetOwnableCarData(idx, OC_ST11X), GetOwnableCarData(idx, OC_ST11Y),
		GetOwnableCarData(idx, OC_ST11Z), GetOwnableCarData(idx, OC_ST11RX), GetOwnableCarData(idx, OC_ST11RY), GetOwnableCarData(idx, OC_ST11RZ));
	}
	if(GetOwnableCarData(idx, OC_STAGE2) != 0)
	{
		Stage2[vehicleid] = CreateDynamicObject(10445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(Stage2[vehicleid], vehicleid, GetOwnableCarData(idx, OC_ST2X), GetOwnableCarData(idx, OC_ST2Y),
		GetOwnableCarData(idx, OC_ST2Z), GetOwnableCarData(idx, OC_ST2RX), GetOwnableCarData(idx, OC_ST2RY), GetOwnableCarData(idx, OC_ST2RZ));
	}
	if(GetOwnableCarData(idx, OC_STAGE3) != 0)
	{
		Stage3[vehicleid] = CreateDynamicObject(10444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(Stage3[vehicleid], vehicleid, GetOwnableCarData(idx, OC_ST3X), GetOwnableCarData(idx, OC_ST3Y),
		GetOwnableCarData(idx, OC_ST3Z), GetOwnableCarData(idx, OC_ST3RX), GetOwnableCarData(idx, OC_ST3RY), GetOwnableCarData(idx, OC_ST3RZ));
	}
	SetOwnableCarData(idx, OC_STATUSTS, 1);
	SetOwnableCarData(idx, OC_VEHID, vehicleid);
	mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET statusts=%d, vehicleid=%d WHERE id=%d", GetOwnableCarData(idx, OC_STATUSTS),GetOwnableCarData(idx, OC_VEHID), GetOwnableCarData(idx, OC_SQL_ID));
	mysql_query(mysql, query, false);
    AddVehicleComponent(vehicleid, GetOwnableCarData(idx, OC_GIDRA));
    AddVehicleComponent(vehicleid, GetOwnableCarData(idx, OC_DISKI));
	if(GetOwnableCarData(idx, OC_VINILTYPE) == 1) ChangeVehicleViniljob(vehicleid, -1), ChangeVehicleViniljob(vehicleid, GetOwnableCarData(idx, OC_VINIL));
	if(GetOwnableCarData(idx, OC_VINILTYPE) == 0) ChangeVehicleDefaultViniljob(vehicleid, -1), ChangeVehicleDefaultViniljob(vehicleid, GetOwnableCarData(idx, OC_VINIL));
	SetVehicleVirtualWorld(vehicleid, GetOwnableCarData(idx, OC_WORLD));
	LinkVehicleToInterior(vehicleid, GetOwnableCarData(idx, OC_INTER));
	if(GetOwnableCarData(idx, OC_POS_Z) > 999 && GetOwnableCarData(idx, OC_POS_Z) < 1005 && GetOwnableCarData(idx, OC_POS_X) < -1600 && GetOwnableCarData(idx, OC_POS_X) > -1700) LinkVehicleToInterior(vehicleid, 4);
	if(GetOwnableCarData(idx, OC_POS_Z) > 999 && GetOwnableCarData(idx, OC_POS_Z) < 1005 && GetOwnableCarData(idx, OC_POS_X) > 2800 && GetOwnableCarData(idx, OC_POS_X) < 2900) LinkVehicleToInterior(vehicleid, 5);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		SetVehicleData(vehicleid, V_IZNOS, cache_get_field_content_int(0, "iznos"));
		SetVehicleData(vehicleid, V_GRYAZ, cache_get_field_content_float(0, "gryaz"));
		if(GetOwnableCarData(idx, OC_TONERINSTALL) != 0)
		{
			new toner_select[4],toner_color[4],toner_procent[4];
			sscanf(g_ownable_car[idx][OC_TSELECT], "P<,,>a<i>[3]",toner_select);
			sscanf(g_ownable_car[idx][OC_TCOLOR], "P<,,>a<i>[3]",toner_color);
			sscanf(g_ownable_car[idx][OC_TPROCENT], "P<,,>a<i>[3]",toner_procent);
			for(new i=0;i<=2;i++)
			{
				g_vehicle_data[vehicleid][V_TINTINGS][i] = toner_select[i];
				g_vehicle_data[vehicleid][V_TINTINGC][i] = toner_color[i];
				g_vehicle_data[vehicleid][V_TINTINGP][i] = toner_procent[i];
			}
			UpdateTinting(playerid, vehicleid);
 		}
		if(GetOwnableCarData(idx, OC_OBVES) != -1)
		{
			new obves[17];
			sscanf(GetOwnableCarData(idx, OC_OBVES), "P<|||||||||>a<i>[17]", obves);
			for(new i; i < 17; i++)
			{
				if(obves[i] > 0)
				{
					GetTuningVehicle(playerid, vehicleid, obves[i]);
				}
			}
		}
		UpdateVehicleHandling(playerid, vehicleid);
		SetVehicleData(vehicleid, V_TYPENUM, GetOwnableCarData(idx, OC_NUMBERTYPE));
		SetVehicleNumber(vehicleid, GetOwnableCarData(idx, OC_NUMBERTYPE), g_ownable_car[idx][OC_NUMBER], g_ownable_car[idx][OC_REGION]);
		SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);
		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(0, "mileage") );
		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
		SetVehicleData(vehicleid, V_HEALTH, cache_get_field_content_float(0, "health"));
		SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));
		SetVehicleData(vehicleid, V_FUEL, cache_get_field_content_float(0, "fuel"));
		LoadVehicleItems(vehicleid);
	}
	cache_delete(result);
	LoadCarAccessories(GetOwnableCarData(idx, OC_SQL_ID), vehicleid);
	return 1;
}

stock SetVehicleNumber(vehicleid, typenumber, number[], region[])
{
	SetVehicleData(vehicleid, V_TYPENUM, typenumber);
	format(g_vehicle_data[vehicleid][V_NUMBER], 10, "%s", number);
	format(g_vehicle_data[vehicleid][V_REGION], 10, "%s", region);
}

stock GetFreeOwnableCarID()
{
	for(new idx; idx < sizeof g_ownable_car; idx ++)
	{
		if(GetOwnableCarData(idx, OC_CREATE)) continue;
		return idx;
	}
	return -1;
}

stock UnloadPlayerOwnableCar(bool: ignore_time = false, vehicleid)
{
    if(vehicleid == INVALID_VEHICLE_ID)
	{
		return -1;
	}
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	new Float: X,Float: Y,Float: Z;
	GetVehiclePos(vehicleid, X,Y,Z);
	DestroyVehicleItems(vehicleid);
	if(IsValidDynamicObject(EditStage3Player[vehicleid])) DestroyDynamicObject(EditStage3Player[vehicleid]);
	if(IsValidDynamicObject(EditStage1Player[vehicleid])) DestroyDynamicObject(EditStage1Player[vehicleid]);
	if(IsValidDynamicObject(EditStage2Player[vehicleid])) DestroyDynamicObject(EditStage2Player[vehicleid]);
	if(IsValidDynamicObject(EditStage1_1Player[vehicleid])) DestroyDynamicObject(EditStage1_1Player[vehicleid]);
	if(IsValidDynamicObject(Stage1[vehicleid])) DestroyDynamicObject(Stage1[vehicleid]);
	if(IsValidDynamicObject(Stage1_1[vehicleid])) DestroyDynamicObject(Stage1_1[vehicleid]);
	if(IsValidDynamicObject(Stage2[vehicleid])) DestroyDynamicObject(Stage2[vehicleid]);
	if(IsValidDynamicObject(Stage3[vehicleid])) DestroyDynamicObject(Stage3[vehicleid]);
	if(IsValidDynamicObject(sab[vehicleid])) DestroyDynamicObject(sab[vehicleid]);
	for(new i; i < 5; i++)
	{
		if(IsValidDynamicObject(car_accessories[vehicleid][i])) DestroyDynamicObject(car_accessories[vehicleid][i]);
	}
	if(GetOwnableCarData(index, OC_BY_ID) != 0)
	{
		GetOwnableCarData(index, OC_POS_X) = GetOwnableCarData(index, OC_BY_POS_X);
		GetOwnableCarData(index, OC_POS_Y) = GetOwnableCarData(index, OC_BY_POS_Y);
		GetOwnableCarData(index, OC_POS_Z) = GetOwnableCarData(index, OC_BY_POS_Z);
		GetOwnableCarData(index, OC_ANGLE) = GetOwnableCarData(index, OC_BY_ANGLE);
	    if(GetOwnableCarData(index, OC_BY_ID) == 1)
	    {
	        SetOwnableCarData(index, OC_BY_ID, 0);
			bymestavis[GetOwnableCarData(index, OC_MESTOID)] = 0;
			SetOwnableCarData(index, OC_MESTOID, 0);
	    }
	    if(GetOwnableCarData(index, OC_BY_ID) == 3)
	    {
	        SetOwnableCarData(index, OC_BY_ID, 0);
			bymestaniz[GetOwnableCarData(index, OC_MESTOID)] = 0;
			SetOwnableCarData(index, OC_MESTOID, 0);
	    }
	    if(GetOwnableCarData(index, OC_BY_ID) == 2)
	    {
	        SetOwnableCarData(index, OC_BY_ID, 0);
			bymestasr[GetOwnableCarData(index, OC_MESTOID)] = 0;
			SetOwnableCarData(index, OC_MESTOID, 0);
	    }
	}
	SaveOwnableCar(vehicleid);
	SetOwnableCarData(index, OC_CREATE, 0);
    if(IsValidDynamicObject(sab[vehicleid])) DestroyDynamicObject(sab[vehicleid]);
	DestroyVehicleLabel(vehicleid);
	DestroyVehicle(vehicleid);
	SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);
	foreach(new idx : Player)
	{
		if(!IsPlayerConnected(idx)) continue;
		else if(!IsPlayerLogged(idx)) continue;
		else if(GetPlayerAllowedCar(idx) != vehicleid) continue;
		if(ignore_time)
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта отключился. Транспорт выгружен с сервера");
		else
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта выгрузил транспорт с сервера");
		SetPlayerData(idx, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}
	return 1;
}

public: LoadHotels()
{
	new query[64], idx;
	new Cache: result, rows;
	new hotel_id, room_id;
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'Государство') AS owner_name FROM hotels h LEFT JOIN accounts a ON a.id = h.owner_id ORDER BY h.hotel_id ASC, h.id ASC", true);
	rows = cache_num_rows();
	if(rows > MAX_HOTELS * MAX_HOTEL_ROOMS)
	{
		rows = MAX_HOTELS * MAX_HOTEL_ROOMS;
		print("[Hotels]: DB rows > MAX_HOTELS * MAX_HOTEL_ROOMS");
	}
	for(idx = 0; idx < rows; idx ++)
	{
		hotel_id = cache_get_field_content_int(idx, "hotel_id");
		if(0 <= hotel_id <= MAX_HOTELS-1)
		{
			room_id = g_hotel_rooms_loaded[hotel_id];
			if(0 <= room_id <= MAX_HOTEL_ROOMS-1)
			{
				SetHotelData(hotel_id, room_id, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
				SetHotelData(hotel_id, room_id, H_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
				SetHotelData(hotel_id, room_id, H_RENT_DATE, 	cache_get_field_content_int(idx, "rent_time"));
				SetHotelData(hotel_id, room_id, H_STATUS, 		bool: cache_get_field_content_int(idx, "status"));
				cache_get_field_content(idx, "owner_name", g_hotel[hotel_id][room_id][H_OWNER_NAME], mysql, 21);
				if(IsHotelRoomOwned(hotel_id, room_id) && !strcmp(GetHotelData(hotel_id, room_id, H_OWNER_NAME), "Государство", true))
				{
					SetHotelData(hotel_id, room_id, H_OWNER_ID, 0);
					mysql_format(mysql, query, sizeof query, "UPDATE hotels SET owner_id=0 WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_SQL_ID));
					mysql_query(mysql, query, false);
				}
				if(!IsHotelRoomOwned(hotel_id, room_id))
				{
					SetHotelData(hotel_id, room_id, H_STATUS, false);
				}
				g_hotel_rooms_loaded[hotel_id] ++;
			}
		}
	}
	cache_delete(result);
	CreatePickup(1318, 23, 733.0804, 599.6274, 1002.9598, -1);
	CreatePickup(1318, 23, 1276.0054, -776.3987, 1202.7220, -1);
	g_hotel_lift_CP[0] = CreateDynamicCP(733.0804, 599.6274, 1002.9598, 1.0, _, _, _, 5.0);
	g_hotel_lift_CP[1] = CreateDynamicCP(1276.0054, -776.3987, 1202.722, 1.0, _, _, _, 5.0);
	new
		Float: p_pos_x = 1273.2,
		Float: p_pos_y = -778.3146,
		Float: p_pos_z = 1202.7220;
	for(idx = 0; idx < 12; idx ++)
	{
		if(!(idx & 1))
		{
			p_pos_y += 4.0,
			p_pos_x += 5.7;
		}
		else p_pos_x -= 5.7;
		CreatePickup(19197, 23, p_pos_x, p_pos_y, p_pos_z, -1, PICKUP_ACTION_TYPE_HOTEL_ROOM, idx);
		format(query, sizeof query, "Комната\n{FFFFFF}Номер: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0x3399FFFF, p_pos_x, p_pos_y, p_pos_z + 1.4, 6.0);
	}
	for(idx = 0; idx < MAX_HOTEL_FLOORS; idx ++)
	{
		format(query, sizeof query, "Этаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xFFCD00FF, 1276.0054, -776.3987, 1202.722 + 1.7, 8.0, _, _, _, _, idx + 1);
	}
	for(idx = 0; idx < MAX_HOTELS; idx ++)
	{
		if(g_hotel_rooms_loaded[idx])
		{
			g_hotel_loaded ++;
		}
	}
	printf("[Hotels]: Отелей загружено: %d / Номеров: %d", g_hotel_loaded, rows);
}

public: LoadHouses()
{
	new query[85], buffer[2];
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();
	if(rows > MAX_HOUSES)
	{
		rows = MAX_HOUSES;
		print("[Houses]: DB rows > MAX_HOUSES");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetHouseData(idx, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetHouseData(idx, H_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));
		cache_get_field_content(idx, "name", g_house[idx][H_NAME], mysql, 20);
		SetHouseData(idx, H_CITY,			cache_get_field_content_int(idx, "city"));
		SetHouseData(idx, H_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetHouseData(idx, H_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetHouseData(idx, H_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetHouseData(idx, H_PRICE,			cache_get_field_content_int(idx, "price"));
		SetHouseData(idx, H_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		SetHouseData(idx, H_TYPE,			cache_get_field_content_int(idx, "type"));
		SetHouseData(idx, H_ENTRACE,		cache_get_field_content_int(idx, "entrance"));
		SetHouseData(idx, H_LOCK_STATUS,	bool: cache_get_field_content_int(idx, "lock"));
		SetHouseData(idx, H_POS_X,			cache_get_field_content_float(idx, "x"));
		SetHouseData(idx, H_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetHouseData(idx, H_POS_Z,			cache_get_field_content_float(idx, "z"));
		SetHouseData(idx, H_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetHouseData(idx, H_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetHouseData(idx, H_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetHouseData(idx, H_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));
		SetHouseData(idx, H_CAR_POS_X,		cache_get_field_content_float(idx, "car_x"));
		SetHouseData(idx, H_CAR_POS_Y,		cache_get_field_content_float(idx, "car_y"));
		SetHouseData(idx, H_CAR_POS_Z,		cache_get_field_content_float(idx, "car_z"));
		SetHouseData(idx, H_CAR_ANGLE,		cache_get_field_content_float(idx, "car_angle"));
		SetHouseData(idx, H_STORE_X,		cache_get_field_content_float(idx, "store_x"));
		SetHouseData(idx, H_STORE_Y,		cache_get_field_content_float(idx, "store_y"));
		SetHouseData(idx, H_STORE_Z,		cache_get_field_content_float(idx, "store_z"));
		SetHouseData(idx, H_EVICTION,		cache_get_field_content_int(idx, "eviction"));
		SetHouseData(idx, H_MIAMI,		cache_get_field_content_int(idx, "miami"));
        if(GetHouseData(idx, H_MIAMI) != 0) House_CP[idx] = CreateDynamicCP(GetHouseData(idx, H_POS_X),GetHouseData(idx, H_POS_Y),GetHouseData(idx, H_POS_Z),1.5, _, _, _, 15.0);
		cache_get_field_content(idx, "owner_name", g_house[idx][H_OWNER_NAME], mysql, 21);
		mysql_format(mysql, query, sizeof query, "UPDATE houses SET id=%d WHERE id='%d'", idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);
		SetHouseData(idx, H_STORE_LABEL, Text3D:-1);
		buffer[0] = GetHouseData(idx, H_TYPE);
		if(!strlen(GetHouseData(idx, H_NAME)))
			format(g_house[idx][H_NAME], 20, GetHouseTypeInfo(buffer[0], HT_NAME), 0);
		if(GetHouseData(idx, H_CITY) == -1 || GetHouseData(idx, H_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
			buffer[1] = Get2DZone(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
			SetHouseData(idx, H_CITY, buffer[0]);
			SetHouseData(idx, H_ZONE, buffer[1]);
			mysql_format(mysql, query, sizeof query, "UPDATE houses SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(IsHouseOwned(idx) && !strcmp(GetHouseData(idx, H_OWNER_NAME), "Государство", true))
		{
			SetHouseData(idx, H_OWNER_ID, 0);
			mysql_format(mysql, query, sizeof query, "UPDATE houses SET owner_id=0,improvements=0 WHERE id=%d", GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(!IsHouseOwned(idx))
		{
			SetHouseData(idx, H_IMPROVEMENTS, 	0);
			SetHouseData(idx, H_LOCK_STATUS, 	false);
		}
		UpdateHouse(idx);
		HouseHealthInit(idx);
		HouseStoreInit(idx);
		buffer[0] = GetHouseData(idx, H_ENTRACE);
		if(buffer[0] != -1)
		{	
			buffer[1] = g_entrance_flats_loaded[buffer[0]];
			g_entrance_flats_loaded[buffer[0]] ++;
			g_entrance_flat[buffer[0]][buffer[1] / 4][buffer[1] % 4] = idx;
			SetHouseData(idx, H_FLAT_ID, buffer[1]);
		}
		if(GetHouseData(idx, H_ENTRACE) == -1) home_area[idx] = CreateDynamicSphere(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), GetHouseData(idx, H_POS_Z), 3.0, 0, 0, -1);
	}
	g_house_loaded = rows;
	cache_delete(result);
	printf("[Houses]: Домов загружено: %d", g_house_loaded);
}

stock LoadObjects()
{
	new Cache: result;
	result = mysql_query(mysql, "SELECT * FROM `create_objects` WHERE 1");
	TOTALOBJECTS = cache_num_rows();
    if(TOTALOBJECTS)
    {
    	for(new i; i < TOTALOBJECTS; i++)
    	{
    		cache_get_field_content(i, "Name", ObjInfo[i][objName]);
    		ObjInfo[i][objModel] = cache_get_field_content_int(i, "Model");
    		ObjInfo[i][objPosX] = cache_get_field_content_float(i, "PosX");
    		ObjInfo[i][objPosY] = cache_get_field_content_float(i, "PosY");
    		ObjInfo[i][objPosZ] = cache_get_field_content_float(i, "PosZ");
    		ObjInfo[i][objRotX] = cache_get_field_content_float(i, "RotX");
    		ObjInfo[i][objRotY] = cache_get_field_content_float(i, "RotY");
    		ObjInfo[i][objRotZ] = cache_get_field_content_float(i, "RotZ");
    		ObjInfo[i][objID] = CreateDynamicObject(ObjInfo[i][objModel], ObjInfo[i][objPosX], ObjInfo[i][objPosY], ObjInfo[i][objPosZ], ObjInfo[i][objRotX], ObjInfo[i][objRotY], ObjInfo[i][objRotZ]);
    	}
    	printf("[Objects]: Объектов загружено: %d", TOTALOBJECTS);
    }
	cache_delete(result);
}

public: LoadHousesRenters()
{
	new sql_id;
	new owner_id;
	new house_id;
	new room_id;
	new rent_time;
	new time;
	new owner_name[21];
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'Государство') owner_name FROM houses_renters h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();
	for(new idx; idx < rows; idx ++)
	{
		sql_id = 	cache_get_field_content_int(idx, "id");
		owner_id = 	cache_get_field_content_int(idx, "owner_id");
		house_id = 	cache_get_field_content_int(idx, "house_id");
		room_id =	cache_get_field_content_int(idx, "room_id");
		rent_time =	cache_get_field_content_int(idx, "rent_time");
		time = 		cache_get_field_content_int(idx, "time");
		cache_get_field_content(idx, "owner_name", owner_name, mysql, 21);
		if(!strlen(owner_name))
			owner_name[0] = '\1';
		CallLocalFunction("HouseRenterInit", "iiiiiis", sql_id, owner_id, house_id, room_id, rent_time, time, owner_name);
	}
	cache_delete(result);
	printf("[Houses]: Арендаторов загружено: %d", rows);
}

public: HouseRenterInit(id, owner_id, house_id, room_id, rent_time, time, owner_name[])
{
	new houseid = GetHouseIndexBySQLID(house_id);
	if(houseid != -1)
	{
		if(0 <= room_id <= MAX_HOUSE_ROOMS-1)
		{
			SetHouseRenterInfo(houseid, room_id, HR_SQL_ID, id);
			SetHouseRenterInfo(houseid, room_id, HR_OWNER_ID, owner_id);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_DATE, rent_time);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_TIME, time);
			format(g_house_renters[houseid][room_id][HR_OWNER_NAME], 21, owner_name, 0);
			AddHouseRentersCount(houseid, +, 1);
		}
	}
}

public: ShowPlayerHouseDialog(playerid, operationid)
{
	new houseid = GetPVarInt(playerid, "ownablehouse_id");
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_ENTRACE) != -1)
		{
			if(operationid >= HOUSE_OPERATION_CAR_DELIVERY)
			{
				operationid ++;
			}
		}
		switch(operationid)
		{
			case HOUSE_OPERATION_PARAMS:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров дома",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. Улучшить дом\n"\
						"3. Отметить транспорт на GPS\n"\
						"4. Список арендаторов",
						"Выбрать", "Назад"
					);
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров дома",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. Улучшить дом\n"\
						"3. Доставить транспорт к дому {FF6600}(550 руб)\n"\
						"4. Отметить транспорт на GPS\n"\
						"5. Список арендаторов",
						"Выбрать", "Назад"
					);
				}
			}
			case HOUSE_OPERATION_LOCK:
			{
				if(GetHouseData(houseid, H_LOCK_STATUS))
				{
					SetHouseData(houseid, H_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Дом открыт");
				}
				else
				{
					SetHouseData(houseid, H_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Дом закрыт");
				}
				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `houses` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);
				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				string_dialog[0] = EOS;
				new str_numeric[14 + 1];
				new i_level = GetHouseData(houseid, H_IMPROVEMENTS);
				for(new idx; idx < sizeof(g_house_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t\t", idx + 1, g_house_improvements[idx][I_NAME]);
					switch(idx)
					{
						case 1,4,5:
							strcat(fmt_str, "\t");
						case 6:
							strcat(fmt_str, "\t\t");
					}
					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string_dialog, fmt_str);
						valfmt(str_numeric, g_house_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", str_numeric);
						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string_dialog, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_IMPROVEMENTS, DIALOG_STYLE_LIST, "{FFD83D}Улучшения для дома", string_dialog, "Купить", "Назад");
			}
			case HOUSE_OPERATION_CAR_DELIVERY:
			{
				if(GetHouseData(houseid, H_ENTRACE) == -1)
				{
					new vehicleid = GetPlayerOwnableCarLast(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
					    for(new i;i<MAX_PLAYERS;i++)
						{
						    if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете доставить авто пока в нём кто-то сидит");
						    break;
						}
						new price = 550;
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
						{
							GivePlayerMoneyEx(playerid, -price, "Доставка ТС к дому (/home)", true, true);
							SetVehiclePos
							(
								vehicleid,
								GetHouseData(houseid, H_CAR_POS_X),
								GetHouseData(houseid, H_CAR_POS_Y),
								GetHouseData(houseid, H_CAR_POS_Z)
							);
							SetVehicleZAngle(vehicleid, GetHouseData(houseid, H_CAR_ANGLE));
							SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);
							return SendClientMessage(playerid, 0x3399FFFF, "Транспорт был доставлен к Вашему дому");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
					}
					else
					{
						if(GetPlayerOwnableCars(playerid) == 0)
							SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
						else
							SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
					}
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Функция доступна владельцам домов");
				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_CAR_GPS:
			{
				if(!callcmd::getmycar(playerid, ""))
				{
					CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case HOUSE_OPERATION_RENTERS:
			{
				if(GetHouseRentersCount(houseid) > 0)
				{
					new type = GetHouseData(houseid, H_TYPE);
					new rooms = GetHouseTypeInfo(type, HT_ROOMS);
					new fmt_str[21 + 1];
					new string[MAX_HOUSE_ROOMS * (sizeof fmt_str) + 1];
					for(new idx, count; idx < rooms; idx ++)
					{
						if(!IsHouseRoomOwned(houseid, idx)) continue;
						format(fmt_str, sizeof fmt_str, "%s\n", GetHouseRenterInfo(houseid, idx, HR_OWNER_NAME));
						strcat(string, fmt_str);
						SetPlayerListitemValue(playerid, count ++, idx);
					}
					Dialog(playerid, DIALOG_HOUSE_RENTERS, DIALOG_STYLE_LIST, "{33AACC}Список арендаторов", string, "Выбрать", "Назад");
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX,
						"{33AACC}Список арендаторов",
						"{FFFFFF}В Вашем доме, кроме Вас, сейчас никто не проживает",
						"Назад", ""
					);
				}
			}
		}
	}
	return 1;
}
public: UpdateHouseStore(houseid)
{
	if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1) UpdateDynamic3DTextLabelText(GetHouseData(houseid, H_STORE_LABEL), 0xFFFF00FF, "{fbec5d}Домашний шкаф\n{FFFFFF}Используйте {fbec5d}/use {FFFFFF}для использования");
}

public: LoadBusinesses()
{
	new query[85], buffer[2];
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT b.*, IFNULL(a.name, 'None') AS owner_name FROM business b LEFT JOIN accounts a ON a.id=b.owner_id", true);
	rows = cache_num_rows();
	if(rows > MAX_BUSINESS)
	{
		rows = MAX_BUSINESS;
		print("[Business]: DB rows > MAX_BUSINESS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessData(idx, B_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetBusinessData(idx, B_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
		cache_get_field_content(idx, "name", g_business[idx][B_NAME], mysql, 30);
		SetBusinessData(idx, B_CITY,			cache_get_field_content_int(idx, "city"));
		SetBusinessData(idx, B_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetBusinessData(idx, B_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetBusinessData(idx, B_PRODS,			cache_get_field_content_int(idx, "products"));
		SetBusinessData(idx, B_PROD_PRICE,		cache_get_field_content_int(idx, "prod_price"));
		cache_get_field_content(idx, "balance", g_business[idx][B_BALANCE], mysql, 21);
		SetBusinessData(idx, B_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetBusinessData(idx, B_PRICE,			cache_get_field_content_int(idx, "price"));
		SetBusinessData(idx, B_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		SetBusinessData(idx, B_TYPE,			cache_get_field_content_int(idx, "type"));
		SetBusinessData(idx, B_INTERIOR,		cache_get_field_content_int(idx, "interior"));
		SetBusinessData(idx, B_ENTER_PRICE,		cache_get_field_content_int(idx, "enter_price"));
		SetBusinessData(idx, B_ENTER_MUSIC,		cache_get_field_content_int(idx, "enter_music"));
		SetBusinessData(idx, B_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));
		SetBusinessData(idx, B_POS_X,			cache_get_field_content_float(idx, "x"));
		SetBusinessData(idx, B_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetBusinessData(idx, B_POS_Z,			cache_get_field_content_float(idx, "z"));
		SetBusinessData(idx, B_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetBusinessData(idx, B_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetBusinessData(idx, B_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetBusinessData(idx, B_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));
		SetBusinessData(idx, B_EVICTION,		cache_get_field_content_int(idx, "eviction"));
		SetBusinessData(idx, B_ELECTRICITY,		cache_get_field_content_int(idx, "electricity"));
		SetBusinessData(idx, B_IZNOS,		cache_get_field_content_int(idx, "iznos"));
		SetBusinessData(idx, B_TIME_REPAIR_1,		cache_get_field_content_int(idx, "time_repair_1"));
		SetBusinessData(idx, B_TIME_REPAIR_2,		cache_get_field_content_int(idx, "time_repair_2"));
		SetBusinessData(idx, B_TYPEWETRIKI,		cache_get_field_content_int(idx, "typewetriki"));
		SetBusinessData(idx, B_GANG,		cache_get_field_content_int(idx, "gang"));
		zone_war_z[idx] = GangZoneCreate
		(
			GetBusinessData(idx, B_POS_X)-6,
			GetBusinessData(idx, B_POS_Y)-6,
			GetBusinessData(idx, B_POS_X)+6,
			GetBusinessData(idx, B_POS_Y)+6
		);
		// ----------------------------------------------------------------------------------
		zone_war_a[idx] = CreateDynamicRectangle
		(
			GetBusinessData(idx, B_POS_X)-6,
			GetBusinessData(idx, B_POS_Y)-6,
			GetBusinessData(idx, B_POS_X)+6,
			GetBusinessData(idx, B_POS_Y)+6
		);
		cache_get_field_content(idx, "owner_name", g_business[idx][B_OWNER_NAME], mysql, 21);
		// -------------------------
		SetBusinessData(idx, B_ORDER_ID, -1);
		SetBusinessData(idx, B_LABEL, CreateDynamic3DTextLabel(GetBusinessData(idx, B_NAME), 0xFFFF00FF, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z) + 1.0, 6.50));
		if(GetBusinessData(idx, B_CITY) == -1 || GetBusinessData(idx, B_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
			buffer[1] = Get2DZone(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
			SetBusinessData(idx, B_CITY, buffer[0]);
			SetBusinessData(idx, B_ZONE, buffer[1]);
			mysql_format(mysql, query, sizeof query, "UPDATE business SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(IsBusinessOwned(idx) && !strcmp(GetBusinessData(idx, B_OWNER_NAME), "None", true))
		{
			SetBusinessData(idx, B_OWNER_ID, 0);
			mysql_format(mysql, query, sizeof query, "UPDATE business SET owner_id=0,improvements=0 WHERE id=%d", GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(!IsBusinessOwned(idx))
		{
			SetBusinessData(idx, B_PRODS,		0);
			SetBusinessData(idx, B_PROD_PRICE, 	0);
			SetBusinessData(idx, B_LOCK_STATUS, false);
			SetBusinessData(idx, B_ENTER_MUSIC, 0);
			SetBusinessData(idx, B_ENTER_PRICE, 0);
			if(GetBusinessData(idx, B_IMPROVEMENTS) >= 6)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", idx);
				mysql_query(mysql, query, false);
			}
		}
		CallLocalFunction("UpdateBusinessLabel", "i", idx);
		BusinessHealthPickupInit(idx); //Иконки для бизов
		if(GetBusinessData(idx, B_TYPE) == 1) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 40, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 2) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 49, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 3 || GetBusinessData(idx, B_TYPE) == 4) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 28, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 5) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 45, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 8) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 25, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 9) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 26, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 17 || GetBusinessData(idx, B_TYPE) == 26 || GetBusinessData(idx, B_TYPE) == 23) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 55, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 23) CreatePickup(1275, 25, GetBusinessData(idx, B_EXIT_POS_X), GetBusinessData(idx, B_EXIT_POS_Y), GetBusinessData(idx, B_EXIT_POS_Z), 0, PICKUP_ACTION_TYPE_SHIN, idx);
		if(GetBusinessData(idx, B_TYPE) == 24) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 38, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 25) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 39, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 27) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 18, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 30) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 46, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 31) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 10, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 11) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 6, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 12) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 52, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 32) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 21, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 29) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 34, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 39) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 5, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 23) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 62, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 16) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 55, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 17 || GetBusinessData(idx, B_TYPE) == 18 || GetBusinessData(idx, B_TYPE) == 19 || GetBusinessData(idx, B_TYPE) == 20 || GetBusinessData(idx, B_TYPE) == 21 || GetBusinessData(idx, B_TYPE) == 23 || GetBusinessData(idx, B_TYPE) == 43)
		{
			if(GetBusinessData(idx, B_TYPE) == 20)
			{
				CreatePickup(1083, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
				CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 55, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
			}
			else if(GetBusinessData(idx, B_TYPE) == 21 || GetBusinessData(idx, B_TYPE) == 31) CreatePickup(18631, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			else CreatePickup(1274, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		}
		else if(GetBusinessData(idx, B_TYPE) == 37)
		{
			CreatePickup(1650, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 59, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
		else if(GetBusinessData(idx, B_TYPE) == 44)
		{
			CreatePickup(1275, 25, GetBusinessData(idx, B_EXIT_POS_X), GetBusinessData(idx, B_EXIT_POS_Y), GetBusinessData(idx, B_EXIT_POS_Z), -1, PICKUP_ACTION_TYPE_TK_MENU, idx);
			CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 51, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
			CreatePickup(1274, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			CreateDynamic3DTextLabel("Информация о\nтрудоустройствие",0xFFFFFFFF, GetBusinessData(idx, B_EXIT_POS_X), GetBusinessData(idx, B_EXIT_POS_Y), GetBusinessData(idx, B_EXIT_POS_Z) + 0.5,16.0);
		}
		else if(GetBusinessData(idx, B_TYPE) == 45)
		{
			CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 9, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
			CreatePickup(1274, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		}
		else
		{
			CreatePickup(19132, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		}
		biz_area[idx] = CreateDynamicSphere(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 3.0, 0, 0, -1);
	}
	g_business_loaded = rows;
	cache_delete(result);
	for(new idx; idx < sizeof g_business_interiors; idx ++)
	{
		CreatePickup(19132, 23, GetBusinessInteriorInfo(idx, BT_EXIT_POS_X), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Y), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_EXIT, idx);
		buffer[0] = -1;
		switch(idx)
		{
			case BUSINESS_INTERIOR_SHOP_24_7:
			{
				CreateDynamic3DTextLabel
				(
					"Список товаров",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(10270, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_SHOP_247, idx);
			}
			case BUSINESS_INTERIOR_ZAKUS:
			{
				CreatePickup(10270, 23, -1852.6345,1277.0465,1115.8447, -1, -1, idx);
			}
			case BUSINESS_INTERIOR_APTEKA:
			{
			    apteka_cp = CreateDynamicCP(-2279.0518,-1485.6300,1001.0000, 1.0);
			}
			case BUSINESS_INTERIOR_SHOP_GARDEN:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_GARDEN, idx);
				CreateDynamicCP(-1038.3335,687.4626,1001.0000, 1.5);
			}
			case BUSINESS_INTERIOR_AVTOZAP:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_AVTOZAP, idx);
				CreateDynamicCP(1555.7836,-2400.7815,1001.0000, 1.0);
			}
			case BUSINESS_INTERIOR_PARIK:
			{
				CreateDynamic3DTextLabel
				(
					"Покупка аксессуаров",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1276, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BARBER, idx);
			}
			case BUSINESS_INTERIOR_CLUB, BUSINESS_INTERIOR_CASINO:
			{
				CreateDynamic3DTextLabel
				(
					"Меню бара:\n\n"\
					"{6699FF}1. Лимонад\n"\
					"2. Пиво\n"\
					"3. Вино\n"\
					"4. Шампанское\n"\
					"5. Водка\n"\
					"6. Коньяк\n"\
					"7. Виски\n"\
					"8. Абсент\n"\
					"{00CC66}9. Закуска\n"\
					"10. Сигара",
					0xFFFFFFCC,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					9.0
				);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.0, _, _, _, 8.0);
			}
			case BUSINESS_INTERIOR_CLOTHING_SHOP:
			{
				CreatePickup(1275, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CLOTHING, idx);
			}
			case BUSINESS_INTERIOR_HOTEL:
			{
				CreatePickup(1277, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				CreateDynamic3DTextLabel("Услуги\n{FFFFFF}гост. комплекса", 0x3399FFFF, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.2, _, _, _, 20.0);
			}
			case BUSINESS_INTERIOR_CELL_SALON:
			{
				CreateDynamic3DTextLabel
				(
					"Сотовый\n"\
					"салон\n"\
					"{FFD83D}Введите /buy",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_CELL_SALON, idx);
			}
			case BUSINESS_INTERIOR_CAR_TUNING:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_TUN, idx);
				CreateDynamic3DTextLabel("Обслуживание\nтранспорта", 0xCC6600EE, GetBusinessInteriorInfo(idx, BT_LABEL_POS_X), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z), 5.0);
			}
			case BUSINESS_INTERIOR_COMP_CLUB:
			{
			    CreatePickup(1314, 23, 652.1079,-15.6575,1001.4328, -1, PICKUP_ACTION_TYPE_BIZ_PC_GAME, idx);
				CreatePickup(1581, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_PC_CLUB, idx);
			}
			case BUSINESS_INTERIOR_TIR:
			{
				CreateDynamic3DTextLabel
				(
					"Покупка\n"\
					"Оружия",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_TIR, idx);
			}
			case BUSINESS_INTERIOR_BUY_GUN:
			{
				CreateDynamic3DTextLabel
				(
					"Покупка\n"\
					"Оружия",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(353, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_GUN, idx);
			}
		}
		SetBusinessInteriorInfo(idx, BT_BUY_CHECK_ID, buffer[0]);
	}
	BusinesGPSListInit();
	printf("[Business]: Бизнесов загружено: %d", g_business_loaded);
}

public: UpdateBusinessLabel(businessid)
{
	if(GetBusinessData(businessid, B_GANG) != 0)
	{
	    format(g_business[businessid][B_GANG_NAME], 64, GetFamilyData(GetBusinessData(businessid, B_GANG), F_NAME), 0);
	}
	else
	{
	    format(g_business[businessid][B_GANG_NAME], 36, "Отсутствует", 0);
	}
	STRING_GLOBAL[0] = EOS;
	if(!IsBusinessOwned(businessid))
	{
		format
		(
			STRING_GLOBAL, sizeof STRING_GLOBAL,
			"%s\n"\
			"{66CC00}Бизнес продается\n"\
			"Используйте /buybiz\n"\
			"Цена: %s руб\n"\
			"{FFFFFF}Крыша:{3399FF} %s",
			GetBusinessData(businessid, B_NAME),
			formatInt(GetBusinessData(businessid, B_PRICE)),
			g_business[businessid][B_GANG_NAME]
		);
	}
	else
	{
		if(GetBusinessData(businessid, B_TYPE) != 37)
		{
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"%s\n"\
				"{FFFFFF}Владелец: {3399FF}%s\n"\
				"{FFFFFF}Крыша:{3399FF} %s\n",
				GetBusinessData(businessid, B_NAME),
				GetBusinessData(businessid, B_OWNER_NAME),
				g_business[businessid][B_GANG_NAME]
			);
			if(!GetBusinessData(businessid, B_LOCK_STATUS))
			{
				if(GetBusinessData(businessid, B_ENTER_PRICE) > 0)
				{
					if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_STO || GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_DETEYLING || GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_CAR_WASH)
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s{66CC00}Цена услуг: {FF9900}%s руб\n", STRING_GLOBAL, formatInt(GetBusinessData(businessid, B_PROD_PRICE)));
					}
					else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s{66CC00}Вход: {FF9900}%s руб\n", STRING_GLOBAL, formatInt(GetBusinessData(businessid, B_ENTER_PRICE)));
				}
				else strcat(STRING_GLOBAL, "{66CC00}Вход свободный\n");
			}
			else strcat(STRING_GLOBAL, "{FF6600}Закрыто\n");
		}
		else
		{
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"%s\n"\
				"{FFFFFF}Владелец: {3399FF}%s\n"\
				"{FFFFFF}Крыша:{3399FF} %s\n"\
				"{FFFFFF}Цена за литр:\n"\
				"{FFFFFF}A-92 {FF8C00}%s руб\n"\
				"{FFFFFF}A-95 {FF8C00}%s руб\n"\
				"{FFFFFF}A-98 {FF8C00}%s руб\n"\
				"{FFFFFF}DT {FF8C00}%s руб\n",
				GetBusinessData(businessid, B_NAME),
				GetBusinessData(businessid, B_OWNER_NAME),
				g_business[businessid][B_GANG_NAME],
				formatInt(GetBusinessData(businessid, B_PROD_PRICE)),
				formatInt(GetBusinessData(businessid, B_PROD_PRICE)),
				formatInt(GetBusinessData(businessid, B_PROD_PRICE)),
				formatInt(GetBusinessData(businessid, B_PROD_PRICE))
			);
			if(!GetBusinessData(businessid, B_LOCK_STATUS))
			{
				if(GetBusinessData(businessid, B_LOCK_STATUS) > 0) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{66CC00}Бизнес открыт\n", STRING_GLOBAL);
				else strcat(STRING_GLOBAL, "{66CC00}Бизнес открыт\n");
			}
			else strcat(STRING_GLOBAL, "{FF6600}Закрыто\n");
		}
	}
	UpdateDynamic3DTextLabelText(GetBusinessData(businessid, B_LABEL), 0xFFFF00FF, STRING_GLOBAL);
}

public: UpdateRealtorBizInfo()
{
	new count = 0;
	new fmt_str[128];
	g_business_realtor_list = "";
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;
		g_business_realtor_list_idx[count ++] = idx;
		format(fmt_str, sizeof fmt_str, "%d\n", idx);
		strcat(g_business_realtor_list, fmt_str);
	}
	count = GetFreeBusinessCount();
	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние бизнеса\n"\
		"(обновляется каждый час)\n\n"\
		"{FF6633}Куплено бизнесов: %d\n"\
		"{99FF33}Свободно бизнесов: %d",
		g_business_loaded - count,
		count
	);
	UpdateDynamic3DTextLabelText(g_business_realtor_label, 0xCCFF66FF, fmt_str);
}

public: SetRealtorMakePhoto(playerid, type, index)
{
	if(GetPlayerData(playerid, P_REALTOR_TYPE) == type)
	{
		new Float: angle;
		new Float: pos_x, Float: pos_y, Float: pos_z;
		new Float: exit_x, Float: exit_y, Float:cam_x, Float:cam_y;
		switch(type)
		{
			case REALTOR_TYPE_HOUSE:
			{
				new entranceid = GetHouseData(index, H_ENTRACE);
				if(entranceid != -1)
				{
					pos_x = GetEntranceData(entranceid, E_POS_X);
					pos_y = GetEntranceData(entranceid, E_POS_Y);
					pos_z = GetEntranceData(entranceid, E_POS_Z);
					exit_x = GetEntranceData(entranceid, E_EXIT_POS_X);
					exit_y = GetEntranceData(entranceid, E_EXIT_POS_Y);
					new fmt_str[32];
					format(fmt_str, sizeof fmt_str, "Номер подъезда: %d", entranceid + 1);
					SendClientMessage(playerid, 0x999999FF, fmt_str);
				}
				else
				{
					pos_x = GetHouseData(index, H_POS_X);
					pos_y = GetHouseData(index, H_POS_Y);
					pos_z = GetHouseData(index, H_POS_Z);
					exit_x = GetHouseData(index, H_EXIT_POS_X);
					exit_y = GetHouseData(index, H_EXIT_POS_Y);
				}
			}
			case REALTOR_TYPE_BIZ:
			{
				pos_x = GetBusinessData(index, B_POS_X);
				pos_y = GetBusinessData(index, B_POS_Y);
				pos_z = GetBusinessData(index, B_POS_Z);
				exit_x = GetBusinessData(index, B_EXIT_POS_X);
				exit_y = GetBusinessData(index, B_EXIT_POS_Y);
			}
		}
		angle = GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
		SetPlayerPos(playerid, pos_x, pos_y, pos_z);
		cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
		cam_y = pos_y + 15.0 * floatcos(angle, degrees);
		SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
		SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);
		SetPlayerData(playerid, P_REALTOR_TYPE, type);
	}
}

public: OnSpeedTimerUp()
{
	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerSpeedTimer", "i", playerid);
	}
}

public: OnSecondTimer()
{
	Jail_OnSecondTimer();
	EliteRace_OnSecondTimer();
	AutoRWC();
	new minute;
	gettime(_, minute);
	new time = gettime();
	gettime(tmphour, tmpminute, tmpsecond);
	new year,month,day,minuite,second,hour;
   	getdate(year,month,day);
   	gettime(hour,minuite,second);
	timeRaffleShopping();
	if(!minuite && !second)
   	{
   	    SetWorldTime(hour);
        OnPayDay();
	}
	if(!minute)
	{
		if(GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_MINUTES) >= 1)
		{
			OnMinuteTimer(bool: GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_DAYS));
		}
	}
	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerTimer", "i", playerid);
	}
	for(new carriageid; carriageid < sizeof miner_carriage; carriageid ++)
		MinerCarriageUpdate(carriageid);	
	if(g_mine_elevator[MS_TIME_STATUS] <= 0)
	{
		OnMineTimer();
	}
	else
	{
		g_mine_elevator[MS_TIME_STATUS]--;
	}
	//==========================================ZIMA
    if(Timer_Kall[0] > 0) Timer_Kall[0]--;
    if(Timer_Kall[1] > 0) Timer_Kall[1]--;
    if(Timer_Kall[0] <= 0) {
        for(new i;i<24;i++) {
            Kall[i][1]++;
            if(Kall[i][1] >= 24) Kall[i][1] = 0;
            new lol = Kall[i][1];
            MoveDynamicObject(Kall[i][0],KALL_POS[lol][KALL_X],KALL_POS[lol][KALL_Y],KALL_POS[lol][KALL_Z],1.17);
        }
        Timer_Kall[0] = 10;
    }
    if(Timer_Kall[1] <= 0) {
        Kall_Lesso[1]--;
        if(Kall_Lesso[1] < 0) Kall_Lesso[1] = 11;
        Kall_Lesso[2] = !Kall_Lesso[2];
        MoveDynamicObject(Kall_Lesso[0],-4186.431640625, 4317.2016601563, Kall_Lesso[2] ? 136.51489257813 : 136.71490478516,0.01, 30 * Kall_Lesso[1], 0, -36);
        Timer_Kall[1] = 20;
    }	
	//==========================================ZIMA
	BadEngine();
	FermerRepositoryUpdate();
	BlackMarket();
	Dump();
	UpdateDiceTrow();
	Containers();
	if(minuite == 05 && !second || minuite == 20 && !second || minuite == 40 && !second) InformationServers();
	if(minuite == 05 && !second || minuite == 20 && !second || minuite == 40 && !second) InformationServers1();
	if(minuite == 10 && !second || minuite == 30 && !second || minuite == 50 && !second) Infodonate();
	if(minuite == 15 && !second || minuite == 35 && !second || minuite == 45 && !second) kiockkraft();
	if(minuite == 31 && !second) CreateProdsOrders();
	if(g_drag_racing_time > 0)
	{
		g_drag_racing_time--;
		if(g_drag_racing_time > 0)
		{
			if(g_drag_racing_time == 10) GameText(g_drag_racing[0][E_PLAYER], "~r~5", 2000, 0);
			if(g_drag_racing_time == 8) GameText(g_drag_racing[0][E_PLAYER], "~r~4", 2000, 0);
			if(g_drag_racing_time == 6) GameText(g_drag_racing[0][E_PLAYER], "~r~3", 2000, 0);
			if(g_drag_racing_time == 4) GameText(g_drag_racing[0][E_PLAYER], "~r~2", 2000, 0);
			if(g_drag_racing_time == 2) GameText(g_drag_racing[0][E_PLAYER], "~r~1", 2000, 0);
			if(g_drag_racing_time == 10) GameText(g_drag_racing[1][E_PLAYER], "~r~5", 2000, 0);
			if(g_drag_racing_time == 8) GameText(g_drag_racing[1][E_PLAYER], "~r~4", 2000, 0);
			if(g_drag_racing_time == 6) GameText(g_drag_racing[1][E_PLAYER], "~r~3", 2000, 0);
			if(g_drag_racing_time == 4) GameText(g_drag_racing[1][E_PLAYER], "~r~2", 2000, 0);
			if(g_drag_racing_time == 2) GameText(g_drag_racing[1][E_PLAYER], "~r~1", 2000, 0);
			SetVehicleParam(GetPlayerVehicleID(g_drag_racing[0][E_PLAYER]), V_ENGINE, false);
			SetVehicleParam(GetPlayerVehicleID(g_drag_racing[1][E_PLAYER]), V_ENGINE, false);
		}
		if(g_drag_racing_time == 0)
		{
			GameText(g_drag_racing[0][E_PLAYER], "~g~Поехали", 2000, 1);
			GameText(g_drag_racing[1][E_PLAYER], "~g~Поехали", 2000, 1);
			SetVehicleParam(GetPlayerVehicleID(g_drag_racing[0][E_PLAYER]), V_ENGINE, true);
			SetVehicleParam(GetPlayerVehicleID(g_drag_racing[1][E_PLAYER]), V_ENGINE, true);
			g_drag_racing_status[g_drag_racing[0][E_PLAYER]] = 0;
			g_drag_racing_status[g_drag_racing[1][E_PLAYER]] = 0;
		}
	}
	if(timervetr > 0) timervetr--;
	if(timervetr <= 0) VetrMove();
	if(timerneft > 0) timerneft--;
	if(timerneft <= 0)
	{
		if(status_neft == 0) status_nefte = 0;
		if(status_neft == 1) status_nefte = 1;
		if(status_neft == 2) status_nefte = 2;
		if(status_neft == 3) status_nefte = 3;
		NeftMove();
	}	
	for(new i; i < g_neft_loaded; i ++)
	{
		if(GetNeftData(i, N_OWNER_ID) != 0)
		{
			if(GetNeftData(i, N_WORK_STATUS) == 0)
			{
				if(neftcreatetime[i] <= 0)
				{
					SetNeftData(i, N_WORK_STATUS, 1);
					CallLocalFunction("UpdateNeftLabel", "i", i);
					if(IsValidDynamicObject(neftobj[i])) DestroyDynamicObject(neftobj[i]);
					neftobj1[i] = CreateDynamicObject(15831, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) + 2, GetNeftData(i, N_POS_Z) -0.955624,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					neftobj2[i] = CreateDynamicObject(15832, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) + 6.52, GetNeftData(i, N_POS_Z) + 5.10438,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					neftobj3[i] = CreateDynamicObject(15834, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) - 0.74, GetNeftData(i, N_POS_Z) + 12.6144,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					neftobj4[i] = CreateDynamicObject(15833, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) + 7.2, GetNeftData(i, N_POS_Z) + 12.2344,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					neftobj5[i] = CreateDynamicObject(15835, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) - 9.14, GetNeftData(i, N_POS_Z) + 13.8844,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					new query[300];
					format(query, sizeof query, "UPDATE neftenasos SET work=%d WHERE id=%d", GetNeftData(i, N_WORK_STATUS), GetNeftData(i, N_SQL_ID));
					mysql_query(mysql, query, false);
				}
				else neftcreatetime[i]--, CallLocalFunction("UpdateNeftLabel", "i", i);
			}
		}
	}
	if(g_war[W_STATUS] && g_war[W_TIME] > 0)
	{
		-- g_war[W_TIME];
		UpdateCaptureTextDraw();
		if(g_war[W_TIME] == 0)
		{
			foreach(new i: Player)
			{
				if(GetPlayerFamily(i) != 0) BitStream_1(i, s_CefInterface, t_CefHide, "Capture");
			}
			EndWar();
		}
	}
}

public: OnMinuteTimer(bool: new_day)
{
	new time;
	new hour, minute, second;
	time = gettime();
	gettime(hour, minute, second);
	if(new_day)
	{
		SetTimer("ClearBanList", 15_000, false);
	}
	SetWorldTime(hour);
	OnPlayersWorldTimeInit(hour, minute);
	g_last_m_timer_time = time;
}

public: OnPlayersWorldTimeInit(hour, minute)
{
	foreach(new playerid : Player)
	{
		SetPlayerTime(playerid, hour, minute);
	}
}

public: OnPayDay()
{
	new fmt_str[512];
	new level, cur_time;
	new hour, minute, second;
	cur_time = gettime();
	gettime(hour, minute, second);
	SetWorldTime(hour);
	format(fmt_str, sizeof fmt_str, "Текущее время: {3399FF}%02d:00", hour);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);
	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid) && IsPlayerConnected(playerid))
		{
			SendClientMessage(playerid, 0xFFFFFFFF, "   БАНКОВСКИЙ ЧЕК");
			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			SendClientMessage(playerid, 0xFFFFFFFF, " ");
			level = GetPlayerLevel(playerid);
			if(!IsPlayerAFK(playerid) || GetPlayerAFKTime(playerid) < 60)
			{
				if(ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES) >= 5)
				{
					if(GetPlayerTeamEx(playerid))
					{
						new team_wage;
						if(GetPlayerTeamEx(playerid) < TEAM_MAFIA_RUSSIAN)
						{
							new team_id = GetPlayerTeamEx(playerid),
								rank = GetPlayerJob(playerid);
							team_wage = rank_wages[ team_id - 1 ][ rank - 1 ];
						}
						AddPlayerData(playerid, P_WAGE, +, team_wage);
					}
					format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), GetPlayerData(playerid, P_WAGE)));
					BankLog(playerid, GetPlayerData(playerid, P_WAGE), "Зарплата");
					format(fmt_str, sizeof fmt_str, "Зарплата: {66CC00}%s руб", formatInt(GetPlayerData(playerid, P_WAGE)));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
					if(GetPlayerAdminEx(playerid) > 0 && 12 > GetPlayerAdminEx(playerid))
					{
						format(fmt_str, sizeof fmt_str, "Зарплата администратора: {66CC00}%s руб", formatInt(2500000 * GetPlayerAdminEx(playerid)));
						SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
						format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), 2500000 * GetPlayerAdminEx(playerid)));
					}
					if(PlayerLauncher[playerid] == 1)
					{
						SendClientMessage(playerid, 0xFFBB00FF, "Спасибо что играите с нашего лаунчера ловите бонус!");
						SendClientMessage(playerid, 0xFFBB00FF, "Вы получили Кейсы, Ключи, Донат, rub и верты");
						GiveIteam(playerid, 355, 1, 5, 0);
						GiveIteam(playerid, 259, 1, 20, 0);
						GiveIteam(playerid, 258, 1, 10, 0);
						GiveIteam(playerid, 360, 1, 5, 0);
						GivePlayerDonate(playerid, RandomEx(100, 1000));
						GivePlayerMoneyEx(playerid, RandomEx(50000000, 250000000));
						GivePlayerCoins(playerid, RandomEx(1, 10));
					}
					format(fmt_str, sizeof fmt_str, "Текущий баланс счета: {00CC00}%s руб", formatStr(GetPlayerBankMoney(playerid)));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
					SetPlayerData(playerid, P_WAGE, 0);
					if(GetPlayerData(playerid, P_SUSPECT) != 0)
					{
						AddPlayerData(playerid, P_SUSPECT, -, 1);
						SetPlayerSuspectInit(playerid);
						UpdatePlayerDatabaseInt(playerid, "suspect", GetPlayerData(playerid, P_SUSPECT));
					}
					GivePlayerExp(playerid, 1 * g_doubling[DOUBLING_EXP]);
				}
				else SendClientMessage(playerid, 0xFFBB00FF, "Для получения зарплаты необходимо находиться в игре минимум 5 минут");
			}
			else SendClientMessage(playerid, 0xFFBB00FF, "Вы не должны находиться на паузе для получения зарплаты");
			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			if(GetPlayerLevel(playerid) > level)
			{
				SendClientMessage(playerid, 0x3399FFFF, "Поздравляем! Ваш уровень повышен");
				switch(GetPlayerLevel(playerid))
				{
					case 2:
					{
						SendClientMessage(playerid, 0x66CC00FF, "Вы начали второй год своей жизни в нашей стране");
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа водителя автобуса");
					}
				}
			}
			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET level=%i,exp=%i,wage=0,last_login=%i,game_for_hour=0 WHERE id=%i LIMIT 1", GetPlayerLevel(playerid), GetPlayerExp(playerid), cur_time, GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_str, false);
			new fortune_wheel_time = ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS);
			if(fortune_wheel_time >= 4 && GetPlayerData(playerid, P_FORTUNE_WHEEL) == 0)
			{
				SetPlayerData(playerid, P_FORTUNE_WHEEL, 1);
				UpdatePlayerDatabaseInt(playerid, "ruletka", 1);
				SendClientMessage(playerid, 0xFFCD00FF, "Вы отыграли 4 часа и получили бесплатный прокрут колеса фортуны в казино");
			}
		}
		SetPlayerData(playerid, P_GAME_FOR_HOUR, 0);
	}
	AddTrash();
	if(hour == 10 || hour == 12 || hour == 13 || hour == 15 || hour == 16 || hour == 17 || hour == 18 || hour == 21 || hour == 22) OnCreateSvalka();
	else 
	{
		new random_svalka = random(23);
		if(hour == random_svalka) OnCreateSvalka();
	}
	if(hour == 10 || hour == 12 || hour == 13 || hour == 15 || hour == 18 || hour == 19 || hour == 20 || hour == 21 || hour == 22 || hour == 23) AddContainers(8);
	if(hour == 19) SellDebtorsProperty();
	if(hour == 18) OnAuctionResult();
/*
	if(hour == 6)
	{
		SendClientMessageToAll(COLOR_RED, "{FF0000}Внимание!");
		SendClientMessageToAll(0xFAAC58FF, "Через 2 минут(ы) будет произведена перезагрузка сервера!");
		SendClientMessageToAll(0xFAAC58FF, "После рестарта перезайдите в игру для избежания багов меток!");
		SendClientMessageToAll(0xFAAC58FF, "С уважениям команда проекта :)!");
		foreach(new i: Player)
		{
			if(!IsPlayerLogged(i)) continue;
			new fmt_text[148];
			format(fmt_text, sizeof fmt_text, "[\"До перезапуска сервера\",%d]", gettime() + 120);
			BitStream_2(i, s_CefInterface, t_CefShow, "InformationTimer", fmt_text);
			GameText(i, "~w~Сервер будет~r~перезагружен~n~в течении 2 минут", 4000, 0);
		}
		SetTimer("ServerRestart", 2000*60, false);
	}
*/
	if(hour == 0)
	{
		new query[144];
	 	for(new i; i < g_kiosk_loaded; i ++)
		{
		    if(GetKioskData(i, K_OWNER_ID) != 0)
		    {
		        SetKioskData(i, K_RENT_DATE, GetKioskData(i, K_RENT_DATE) - 1);
		        format(query, sizeof query, "UPDATE kiosk SET rent=%d WHERE id='%d'",GetKioskData(i, K_RENT_DATE), GetKioskData(i, K_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		for(new i=0; i < g_garden_loaded; i ++)
		{
		    if(GetGardenData(i, G_OWNER_ID) != 0)
		    {
		        SetGardenData(i, G_RENT_DATE, GetGardenData(i, G_RENT_DATE) - 1);
		        format(query, sizeof query, "UPDATE gardens SET rent=%d WHERE id='%d'",GetGardenData(i, G_RENT_DATE), GetGardenData(i, G_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		for(new i=0; i < g_neft_loaded; i ++)
		{
		    if(GetNeftData(i, N_OWNER_ID) != 0)
		    {
		        SetNeftData(i, N_RENT_DATE, GetNeftData(i, N_RENT_DATE) - 1);
		        format(query, sizeof query, "UPDATE neftenasos SET rent=%d WHERE id='%d'",GetNeftData(i, N_RENT_DATE), GetNeftData(i, N_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
	}
	#if defined RAND_WEATHER
	SetTimer("SetRandomWeather", (random(60) + 60) * 1000, false);
	#endif
	CallLocalFunction("UpdateRealtorHomeInfo", "");
	CallLocalFunction("UpdateRealtorBizInfo", "");
	g_last_pay_day_time = cur_time;
	return 1;
}

stock SpeedVehicle(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
        GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 180.3;
    return floatround(ST[3]);
}

public: OnPlayerSpeedTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		if(IsPlayerDriver(playerid))
		{
			new speed = SpeedVehicle(playerid);
			new vehicleid = GetPlayerVehicleID(playerid);
			new index;
			if(g_player_trailer_status[playerid] == 1)
			{
				if(IsTrailerAttachedToVehicle(vehicleid))
				{
					if(g_player_trailer_type[playerid] == 1) SCM(playerid, 0xFFFFFFFF, "Вы прикрепили за собой {dc9d3b}прицеп для груза{FFFFFF}. Для работы используйте команду: {dc9d3b}/bizlist");
					if(g_player_trailer_type[playerid] == 2) SCM(playerid, 0xFFFFFFFF, "Вы прикрепили за собой {dc9d3b}цистерну для топлива{FFFFFF}. Для работы используйте команду: {dc9d3b}/fuellist");
					g_player_trailer_status[playerid] = 2;
					SetTrailerHandling(playerid, g_player_trailer[playerid]);
				}
			}
			if(!IsABike(vehicleid))
			{
				new	Float: fuels = GetVehicleData(vehicleid, V_FUEL), Float: health;
				GetVehicleHealth(vehicleid, health);
				SetVehicleParamsInit(vehicleid);
				SetVehicleData(vehicleid, V_MILEAGE, GetVehicleData(vehicleid, V_MILEAGE) + (float(speed) / 43200.0));
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
					if(fuels <= 0.0)
					{
						SetVehicleParam(vehicleid, V_ENGINE, false);
						GameText(playerid, "~r~Недостаточно топлива", 4000, 1);
					}
					else SetVehicleData(vehicleid, V_FUEL, fuels - 0.003);
				}
				SetVehicleData(vehicleid, V_GRYAZ, GetVehicleData(vehicleid, V_GRYAZ) + (float(speed) / 21600.0));
				if(floatround(GetVehicleData(vehicleid, V_GRYAZ)) == 100)
				{
				    SetVehicleData(vehicleid, V_GRYAZ, 0.0);
				    SetVehicleData(vehicleid, V_IZNOS, GetVehicleData(vehicleid, V_IZNOS) + 1);
					if(GetVehicleData(vehicleid, V_IZNOS) == 101)
					{
					    SetVehicleData(vehicleid, V_IZNOS, 100);
					}
				}
                if(IsACarshCar(vehicleid))
				{
				    SetCarshCarData(index, OC_IZNOS, GetCarshCarData(index, OC_IZNOS) + (float(speed) / 7200.0));
					SaveCarsharingCar(vehicleid);
				}
				new query[148];
				format(query, sizeof query, "interface('Hud').speedometer.fuel = %d", floatround(GetVehicleData(vehicleid, V_FUEL)));
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
   				format(query, sizeof query, "interface('Hud').setMileage(%f)", GetVehicleData(vehicleid, V_MILEAGE));
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
				if(floatround(GetVehicleData(vehicleid, V_GRYAZ)) < 10) format(query, sizeof query, "interface('Hud').speedometer.params.wash = 0.0%d", floatround(GetVehicleData(vehicleid, V_GRYAZ)));
				else if(floatround(GetVehicleData(vehicleid, V_GRYAZ)) >= 10 && floatround(GetVehicleData(vehicleid, V_GRYAZ)) < 100) format(query, sizeof query, "interface('Hud').speedometer.params.wash = 0.%d", floatround(GetVehicleData(vehicleid, V_GRYAZ)));
				else if(floatround(GetVehicleData(vehicleid, V_GRYAZ)) >= 100) format(query, sizeof query, "interface('Hud').speedometer.params.wash = %d", floatround(GetVehicleData(vehicleid, V_GRYAZ)));
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.params.key = 1");
				if(GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_OFF) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.params.lights = 0");
				if(GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_ON) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.params.lights = 1");
				if(GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_ON) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.params.doors = 1");
				if(GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_OFF) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.params.doors = 0");
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.params.temperature = 1");
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_OFF) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.params.temperature = 0");
			}
		}
	}
	return 1;
}

public: OnPlayerTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{		
		if(!IsPlayerAFK(playerid))
		{			
			if(GetPlayerData(playerid, P_VOICEMUTE) > 0)
			{
				AddPlayerData(playerid, P_VOICEMUTE, -, 1);
				if(GetPlayerData(playerid, P_VOICEMUTE) <= 0) 
				{
					SendClientMessage(playerid, 0xCECECEFF, "Срок действия блокировки голосового чата закончился");
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').setVoiceChatMuted(0)");
				}
			}
			if(IsPlayerInAnyVehicle(playerid)) { 
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) { 
                    new Float:x, Float:y, Float:z;
                    new vehicleid = GetPlayerVehicleID(playerid);
                    GetVehicleRotation(vehicleid, x, y, z);
                    if (y > 90.0 || y < -90.0)
                    {
                        new Float:xy, Float:yy, Float:zy;
                        new Float:angle;
                        GetVehiclePos(vehicleid, xy, yy, zy);
                        GetVehicleZAngle(vehicleid, angle);
                        SetVehiclePos(vehicleid, xy, yy, zy + 1.5);
                        SetVehicleZAngle(vehicleid, angle);
                        SetVehicleData(vehicleid, V_HEALTH, 1000.0);
                        SendClientMessage(playerid, 0x999999FF, "");
                    }
                }
            }	
			foreach(new i : Player)
			{
			if(i == playerid || !IsPlayerLogged(i)) continue;

			new Float: distance = GetDistanceBetweenPlayers(playerid, i);

			if(Iter_Contains(VoicePlayers[playerid], i) && distance > 25.0)
			{
			Iter_Remove(VoicePlayers[playerid], i);
			VoiceCloseStream(playerid, i);
			}
			else if(distance < 25.0)
			{
			Iter_Add(VoicePlayers[playerid], i);
			VoiceOpenStream(playerid, i, 100.0, true,i);
	
			}
			}	
			new Float:health;
			GetPlayerHealth(playerid, health);
			if(GetPVarInt(playerid, "Vignette") == 0)
			{
				if(health < 21)
				{
					SetPVarInt(playerid, "Vignette", 1);
					BitStream_2(playerid, s_CefInterface, t_CefShow, "Vignette", "[0]");
				}
			}
			else
			{
				if(health > 20)
				{
					SetPVarInt(playerid, "Vignette", 0);
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Vignette");
				}
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				OnFishPlayerTimer(playerid);
				BlackJack_Timer(playerid);
				IsVehicleIdHouse(playerid);
				new vehicleid = GetNearestVehicleID(playerid, 12.0);
				if(vehicleid != -1)
				{
					if(IsAOwnableCar(vehicleid))
					{
					}		
				}
			}
			if(GetPlayerData(playerid, P_NG_CALENDAR)[0] > 0)
			{
				GetPlayerData(playerid, P_NG_CALENDAR)[0]--;
				if((GetPlayerData(playerid, P_NG_CALENDAR)[0] <= 0) && UpdateNGCalen(playerid)) {
					SendClientMessage(playerid, 0x66CC00FF, "Вы можете забрать новогодний подарок");
					GetPlayerData(playerid, P_NG_CALENDAR)[0] = 7200;
				}
			}			
			if(GetPlayerData(playerid, P_RENT_MOPED) != INVALID_VEHICLE_ID)
			{
				if((GetPVarInt(playerid, "rent_moped_time") - gettime()) / 60 < 1)
				{
					DestroyVehicle(GetPlayerData(playerid, P_RENT_MOPED));
					SetPlayerData(playerid, P_RENT_MOPED, INVALID_VEHICLE_ID);
					SCM(playerid, 0xe3bb42FF, "Срок действия Вашего транспорта истёк или он был уничтожен.");
				}
			}
			if(count_cef_rpc[playerid] != 0)
				count_cef_rpc[playerid] = 0;
			if(g_player_load_promo[playerid] > 0) GetPlayerTimePromo(playerid);
			if(g_player_progress_bar_time[playerid] != 0) g_player_progress_bar_time[playerid]--;
			if(g_player_order_time[playerid][0] != 0)
			{
				g_player_order_time[playerid][0]--;
				if(g_player_order_time[playerid][0] == 0)
				{
					TogglePlayerControllable(playerid,true);
					SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + g_player_order_count[playerid]);
					SCMF(playerid, 0xFFFFFFFF, "Загрузка окончена, Вы поместили в грузовой отсек {e8e32e}%d {FFFFFF}ед. товара", g_player_order_count[playerid]);
					SCM(playerid, 0xFFFFFFFF, "Отправляйтесь к {ecc695}предприятию{FFFFFF}, которое отмечено {cf7776}красной меткой {FFFFFF}на карте");
					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));
					g_player_order_count[playerid] = 0;
					new order_id = GetPlayerData(playerid, P_ORDER);
					new biz_id = GetOrderData(order_id, O_COMPANY_ID);
					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						GetBusinessData(biz_id, B_EXIT_POS_X),
						GetBusinessData(biz_id, B_EXIT_POS_Y),
						GetBusinessData(biz_id, B_EXIT_POS_Z),
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_ORDER
					);
					SetTrailerHandling(playerid, g_player_trailer[playerid]);
				}
			}
			if(g_player_order_time[playerid][1] != 0)
			{
				g_player_order_time[playerid][1]--;
				if(g_player_order_time[playerid][1] == 0)
				{
					TogglePlayerControllable(playerid,true);
					SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - g_player_order_count[playerid]);
					SCMF(playerid, 0xFFFFFFFF, "Разгрузка окончена, Вы разгрузили с грузового отсека {e8e32e}%d {FFFFFF}ед. товара", g_player_order_count[playerid]);
					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));
					g_player_order_count[playerid] = 0;
					SetTrailerHandling(playerid, g_player_trailer[playerid]);
				}
			}
			if(g_player_order_time[playerid][2] != 0)
			{
				g_player_order_time[playerid][2]--;
				if(g_player_order_time[playerid][2] == 0)
				{
					TogglePlayerControllable(playerid,true);
					new order_id = GetPlayerData(playerid, P_ORDER);
					new biz_id = GetOrderData(order_id, O_COMPANY_ID);
					if(GetPlayerJobLoadItems(playerid) < GetOrderData(order_id, O_AMOUNT))
					{
						SetOrderData(order_id, O_AMOUNT, GetOrderData(order_id, O_AMOUNT) - GetPlayerJobLoadItems(playerid));
						SCMF(playerid, 0xFFFFFFFF, "Вы доставили {abc77a}%d {FFFFFF}ед. товара предприятию, осталось {abc77a}%d ед.", GetPlayerJobLoadItems(playerid), GetOrderData(order_id, O_AMOUNT));
						SendClientMessage(playerid, 0xFFFFFFFF, " Загрузите необходимое количество {ddbe86}товара {FFFFFF}на заводе ({d6964e}(Отмечено красной точкой){FFFFFF})");
						DisablePlayerRaceCheckpoint(playerid);
						SetPlayerRaceCheckpoint
						(
							playerid,
							2,
							-1044.0236,
							2203.1716,
							38.1194,
							0.0,
							0.0,
							0.0,
							4.0,
							RCP_ACTION_TYPE_ORDER_INVITE
						);
						AddBusinessData(biz_id, B_PRODS, +, GetPlayerJobLoadItems(playerid));
						SetPlayerJobLoadItems(playerid, 0);
					}
					else
					{
						DisablePlayerRaceCheckpoint(playerid);
						SetPlayerData(playerid, P_ORDER, -1);
						new price = (GetOrderData(order_id, O_PRICE) / 100) * 25;
						AddBusinessProfit(playerid, GetPlayerData(playerid, P_TK_JOB), price, 0);
						SCMF(playerid, 0xFFFFFFFF, "Вы доставили {abc77a}%d {FFFFFF}ед. товара предприятию, и получили за работу {abc77a}%s {FFFFFF}руб.", GetOrderData(order_id, O_AMOUNT), formatInt(GetOrderData(order_id, O_PRICE) - price));
						GivePlayerMoneyEx(playerid, GetOrderData(order_id, O_PRICE) - price, "Зарплата дальнобойщика");
						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - GetOrderData(order_id, O_AMOUNT));
						AddBusinessData(biz_id, B_PRODS, +, GetOrderData(order_id, O_AMOUNT));
						DeleteOrder(order_id);
					}
					SetTrailerHandling(playerid, g_player_trailer[playerid]);
					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));
					new query[64];
					mysql_format(mysql, query, sizeof query, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
					mysql_query(mysql, query, false);
				}
			}
			if(inventory_kd_move[playerid] != 0) inventory_kd_move[playerid]--;
			if(containers_block_time[playerid] != 0) containers_block_time[playerid]--;
			if(DailyreWards_Time[playerid] > 0) DailyreWards_Time[playerid]--;
			else if(DailyreWards_Time[playerid] == 0)
			{
				DailyreWards_Time[playerid]--;
				new wards_type = GetPlayerData(playerid, P_WARDS_TYPE_PRIZES);
				new wards_prize = GetPlayerData(playerid, P_WARDS_PRIZE);
				if(g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_TYPE] == 8)
				{
					GivePlayerMyPrizes(playerid, g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_NAME], 8, g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_ID], 0, g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_COUNT], 0);
				}
				else if(g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_TYPE] == 5)
				{
					GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_COUNT], 0);
				}
				else if(g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_TYPE] == 2)
				{
					GivePlayerExp(playerid, g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_COUNT]);
				}
				else if(g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_TYPE] == 6)
				{
					GivePlayerMyPrizes(playerid, g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_NAME], 6, g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_ID], 0, 1, g_dailyrewards[wards_type][wards_prize][DAILY_REWARDS_COUNT]);
				}
				SCM(playerid, 0xF2F6DFFF, "* Вы получили ежедневную награду! Проверьте раздел наград в главном меню");
				SetPlayerData(playerid, P_WARDS_PRIZE, GetPlayerData(playerid, P_WARDS_PRIZE) + 1);
				if(GetPlayerData(playerid, P_WARDS_PRIZE) == 7)
				{
					SetPlayerData(playerid, P_WARDS_PRIZE, -1);
					DailyreWards_Time[playerid] = 7200;
					SetPlayerData(playerid, P_WARDS_TYPE_PRIZES, GetPlayerData(playerid, P_WARDS_TYPE_PRIZES) + 1);
					if(GetPlayerData(playerid, P_WARDS_TYPE_PRIZES) == 10)
					{
						SetPlayerData(playerid, P_WARDS_TYPE_PRIZES, 0);
					}
					UpdatePlayerDatabaseInt(playerid, "wards_type_prizes", GetPlayerData(playerid, P_WARDS_TYPE_PRIZES));
				}
				UpdatePlayerDatabaseInt(playerid, "wards_prize", GetPlayerData(playerid, P_WARDS_PRIZE));
			}
		}
		FullnessTick[playerid] ++;
		if(GetPlayerData(playerid, P_EAT) > 0)
		{
			if(FullnessTick[playerid] >= 250)
			{
				new Float:Health;
				GetPlayerHealth(playerid,Health);
				GetPlayerData(playerid, P_EAT)-=2;
				FullnessTick[playerid] = 0;
				SetFullness(playerid,GetPlayerData(playerid, P_EAT));
				switch(GetPlayerData(playerid, P_EAT))
				{
					case 1..15: SetPlayerHealthEx(playerid, Health-1);
					case 0: SetPlayerHealthEx(playerid, Health-1), SetFullness(playerid,5);
				}
			}
		}
		else
		{
			if(FullnessTick[playerid] > 30)
			{
				new Float:Health;
				GetPlayerHealth(playerid,Health);
				FullnessTick[playerid] = 0;
				SetPlayerHealthEx(playerid, Health-1);
			}
		}
		AddPlayerData(playerid, P_AFK_TIME, +, 1);
		if(IsPlayerAFK(playerid))
		{
			new afk_minutes = ConvertUnixTime(GetPlayerAFKTime(playerid), CONVERT_TIME_TO_MINUTES);
			new afk_seconds = ConvertUnixTime(GetPlayerAFKTime(playerid));
			new fmt_str[128];
			if(afk_minutes > 0) format(fmt_str, sizeof fmt_str, "На паузе %d:%02d", afk_minutes, afk_seconds);
			else format(fmt_str, sizeof fmt_str, "На паузе %d сек.", afk_seconds);
			SetPlayerChatBubble(playerid, fmt_str, 0xFF0000FF, 7.0, 1500);
			if(afk_minutes >= MAX_AFK_TIME && GetPlayerAdminEx(playerid) < 5)
				Kick:(playerid, "Превышено максимально допустимое время паузы");
		}
		else
		{
			AddPlayerData(playerid, P_GAME_FOR_HOUR, +, 1);
			AddPlayerData(playerid, P_GAME_FOR_DAY, +, 1);
  		}
        if(GetPlayerData(playerid, P_VMUTE) > 0)
		{
			AddPlayerData(playerid, P_VMUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "vmute", GetPlayerData(playerid, P_VMUTE));
			if(GetPlayerData(playerid, P_VMUTE) <= 0)
				SendClientMessage(playerid, 0x66CC00FF, "Срок действия бана VIP чата закончился");
		}
   	    if(GetPlayerData(playerid, P_RMUTE) > 0)
		{
			AddPlayerData(playerid, P_RMUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "rmute", GetPlayerData(playerid, P_MUTE));
			if(GetPlayerData(playerid, P_RMUTE) <= 0)
				SendClientMessage(playerid, 0xCECECEFF, "Срок действия блокировки репорта закончился");
		}
		if(GetPlayerData(playerid, P_MUTE) > 0)
		{
			AddPlayerData(playerid, P_MUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "mute", GetPlayerData(playerid, P_MUTE));
			if(GetPlayerData(playerid, P_MUTE) <= 0)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Срок действия бана чата закончился");
			}
		}
 	    if(GetPlayerData(playerid, P_JAIL) > 0)
		{
			AddPlayerData(playerid, P_JAIL, -, 1);
			UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));
			if(GetPlayerData(playerid, P_JAIL) <= 0)
				SendClientMessage(playerid, 0x66CC00FF, "Срок заключения закончился"),
				UnjailPlayer(playerid),
				CloseInfoJailTime(playerid),
				SetPlayerData(playerid, P_NAKOLKA, GetPlayerData(playerid, P_NAKOLKA) + 1),
				UpdatePlayerDatabaseInt(playerid, "nakolka", GetPlayerData(playerid, P_NAKOLKA));
		}
		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			AddPlayerData(playerid, P_MASK, -, 1);
			if(GetPlayerData(playerid, P_MASK) <= 2)
			{
				GameText(playerid, "~y~маска кончилась", 2500, 2);
				SetPlayerColorInit(playerid);
				SetPlayerData(playerid, P_MASK, 0);
			}
		}
		if(GetPlayerAdminEx(playerid) > 1)
		{
			new msg[80];
			format(msg, sizeof msg, "interface('UnansweredRequests').updateTime(%d)", gettime());
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, msg);
		}
	    if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPlayerGPSInfo(playerid, G_POS_X), GetPlayerGPSInfo(playerid, G_POS_Y), GetPlayerGPSInfo(playerid, G_POS_Z)))
			{
				DisablePlayerGPS(playerid);
			}
		}
		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
  			if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);
				SendClientMessage(playerid, 0x66CC00FF, "Курс лечения пройден");
				SendClientMessage(playerid, -1, "Вы были выписаны из больницы");
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
				SetPlayerChatBubble(playerid, "Выписан", 0x66CC00FF, 10.0, 2000);
			}
		}
		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
		    if(!g_player[playerid][P_DISEASE][0] && !g_player[playerid][P_DISEASE][1]) return 0;
			if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);
				SendClientMessage(playerid, 0x66CC00FF, "Курс лечения пройден");
				SendClientMessage(playerid, -1, "Вы были выписаны из больницы");
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
				SetPlayerChatBubble(playerid, "Выписан", 0x66CC00FF, 10.0, 2000);
			}
		}
		if(IsPlayerPassenger(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new driver = GetVehicleData(vehicleid, V_DRIVER_ID);
			if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
			{
				if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
				{
					if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
					{
						new speed = GetPlayerSpeed(playerid);
						g_taxi_mileage[playerid] += (float(speed) / 3600.0);
						if(g_taxi_mileage[playerid] > 0.1)
						{
							g_taxi_mileage[playerid] = 0.0;
							new tariff = GetPlayerData(driver, P_JOB_TARIFF);
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), tariff))
							{
								GivePlayerMoneyEx(driver, tariff, "- Оплата тарифа такси", false, true);
								GivePlayerMoneyEx(playerid, -tariff, "+ Оплата тарифа такси", false, true);
								AddPlayerData(playerid, P_JOB_WAGE, +, tariff);
                                GameText(playerid, "~y~+100м", 3500, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для дальнейшей оплаты тарифа");
							}
						}
					}
				}
			}
		}
		if(GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
		{
			CheckPlayerTempJobState(playerid);
		}
		if(GetPVarInt(playerid, "player_in_ammo_cp"))
		{
			new army_ammo = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT),
				rand_ammo = random(6)+1,
				soldiers_count;
			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				else if(GetPlayerTeamEx(i) != TEAM_ARMY) continue;
				soldiers_count++;
			}
			if(soldiers_count < 1 && GetPlayerTeamEx(playerid) != TEAM_ARMY)
				SendClientMessage(playerid, 0x999999FF, "Чтобы воровать патроны со склада, должно быть 2 военнослужащих Воинской Части");
			else
			{
				if(army_ammo == 0)
					GameText(playerid, "~g~загрузка...", 1100, 6);
				else
				{
					if(!IsPlayerAFK(playerid))
					{
						if((army_ammo - rand_ammo) < 0)
							rand_ammo = 200000 - army_ammo;
						if((GetIteam(playerid, 26) + rand_ammo) > 450)
							SendClientMessage(playerid, 0x66CC33FF, "Взять больше патронов не получается");
						else
						{
						    GiveIteam(playerid, 26,1,rand_ammo,0);
							SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT, army_ammo - rand_ammo);
							new fmt_text[128];
							format(fmt_text, sizeof fmt_text, "~g~+%d patr.~n~~b~total %d patr.", rand_ammo, GetIteam(playerid, 26));
							GameText(playerid, fmt_text, 1100, 6);
							format(fmt_text, sizeof fmt_text, "+%d шт.", rand_ammo);
							SetPlayerChatBubble(playerid, fmt_text, 0xFFCD00FF, 10.0, 1100);
							UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_AUTH_TIME) >= 0)
		{
			if(GetPlayerData(playerid, P_AUTH_TIME) >= MAX_AUTHORIZATION_TIME)
			{
				HidePlayerDialog(playerid);
				SendClientMessage(playerid, 0xFF6600FF, "Время на авторизацию ограничено");
				Kick:(playerid);
			}
			else AddPlayerData(playerid, P_AUTH_TIME, +, 1);
		}
	}
	return 1;
}

public: CheckPlayerAccount(playerid)
{
	new query[75],
		Cache: result, 
		is_account_exist;
	SendClientMessage(playerid, 0x3399FFFF, "{FFAF00}Добро пожаловать на {F3FF02}"SERVER_NAME_RP"!");
	TogglePlayerSpectating(playerid, true);
	InterpolateCameraPos(playerid, -2112.2563,-198.8006,26.0915, -2109.4790,-197.5331,25.8884, 90000, 2);
	InterpolateCameraLookAt(playerid, -2058.3848,-190.0060,39.6005, -2058.3848,-190.0060,39.6005, 90000, 2);
	SetPlayerVirtualWorld(playerid, 0);
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", GetPlayerNameEx(playerid));
	result = mysql_query(mysql, query);
	if(!mysql_errno())
	{
		is_account_exist = bool: cache_num_rows();
		SetPlayerData(playerid, P_ACCOUNT_STATE, is_account_exist + 1);
		if(is_account_exist)
		{
			cache_get_field_content(0, "reg_ip", g_player[playerid][P_REG_IP], mysql, 16);
			SetPlayerData(playerid, P_ACCOUNT_ID, cache_get_field_content_int(0, "id"));
			SetPlayerData(playerid, P_ADMIN, cache_get_field_content_int(0, "admin"));
			SetPlayerData(playerid, P_BUYADMIN, cache_get_field_content_int(0, "buyadmin"));
			cache_get_field_content(0, "adminspasslogin", g_player[playerid][P_ADMIN_PASSWORD], mysql, 16);
			cache_get_field_content(0, "password", g_player[playerid][P_PASSWORD], mysql, 85);
			cache_get_field_content(0, "last_ip", g_player[playerid][P_LAST_IP], mysql, 16);
			cache_get_field_content(0, "setting_phone", g_player[playerid][P_SETTING_PHONE], mysql, 13);
			cache_get_field_content(0, "setting_pin_code", g_player[playerid][P_SETTING_PIN], mysql, 5); //изменял тут
			SetPlayerData(playerid, P_WARDS_PRIZE,		cache_get_field_content_int(0, "wards_prize"));
			SetPlayerData(playerid, P_WARDS_TYPE_PRIZES,		cache_get_field_content_int(0, "wards_type_prizes"));
			SetPlayerData(playerid, P_AUTH_TIME, 0);
			ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN_IP, false);
			g_player_account_state[playerid] = 1;
			SetPVarInt(playerid, "LoginPlayer", 1);
		}
		else ShowPlayerReg(playerid);
	}
	else
	{
		Dialog
		(
			playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"{FF9900}Критическая ошибка",
			"{FFFFFF}Невозможно подключиться к серверу из-за сбоя системных настроек\n"\
			"Если у вас до сих пор эта ошибка, то обратитесь в поддержку проекта \n",
			"Выход", ""
		);
		Kick:(playerid, "Ошибка соединения. Введите /q (/quit) чтобы выйти", 3000);
	}
	cache_delete(result);
}

public: LoadPlayerData(playerid)
{
	new query[128];
	new Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);
	if(cache_num_rows())
	{
		new
			buffer = 0,
			time = gettime();
		SetPlayerData(playerid, P_VOICEMUTE, 					cache_get_field_content_int(0, "voicmute"));
		if(GetPlayerData(playerid, P_VOICEMUTE) > 0) 	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').setVoiceChatMuted(1)");
		cache_get_field_content(0, "email", g_player[playerid][P_EMAIL], mysql, 61); //P_WIFE_NAME
		cache_get_field_content(0, "serialid", g_player[playerid][P_HARDWARE_ID], mysql, 250); //P_WIFE_NAME
		SetPlayerData(playerid, P_CONFIRM_EMAIL, bool: cache_get_field_content_int(0, "confirm_email"));
		SetPlayerData(playerid, P_LEVEL, 	cache_get_field_content_int(0, "level"));
		SetPlayerData(playerid, P_EXP, 		cache_get_field_content_int(0, "exp"));
		cache_get_field_content(0, "refer", g_player[playerid][P_REFER], mysql, 21);
		SetPlayerData(playerid, P_SEX, 		bool: cache_get_field_content_int(0, "sex"));
		SetPlayerData(playerid, P_SKIN, 	cache_get_field_content_int(0, "skin"));
		cache_get_field_content(0, "money", g_player[playerid][P_MONEY], mysql, 21);
		SetPlayerData(playerid, P_VOEN,	cache_get_field_content_int(0, "voennik"));
		cache_get_field_content(0, "bank", g_player[playerid][P_BANK], mysql, 21);
		SetPlayerData(playerid, P_ADMIN, 	cache_get_field_content_int(0, "admin"));
		SetPlayerData(playerid, P_MIND,     cache_get_field_content_int(0, "mind"));
		SetPlayerData(playerid, P_DRIVING_LIC, 	cache_get_field_content_int(0, "driving_lic"));
		SetPlayerData(playerid, P_WEAPON_LIC, 	cache_get_field_content_int(0, "weapon_lic"));
		SetPlayerData(playerid, P_SUSPECT, 		cache_get_field_content_int(0, "suspect"));
		SetPlayerData(playerid, P_PHONE, 		cache_get_field_content_int(0, "phone"));
		SetPlayerData(playerid, P_PHONE_BALANCE,cache_get_field_content_int(0, "phone_balance"));
		SetPlayerData(playerid, P_PHONE_COLOR,	cache_get_field_content_int(0, "phone_color"));
		SetPlayerData(playerid, P_WATCH, 		cache_get_field_content_int(0, "watch"));
		g_player[playerid][P_DISEASE][0] = cache_get_field_content_int(0, "disease_0");
		g_player[playerid][P_DISEASE][1] = cache_get_field_content_int(0, "disease_1");
		SetPlayerData(playerid, P_LAW_ABIDING,	cache_get_field_content_int(0, "law_abiding"));
		SetPlayerData(playerid, P_IMPROVEMENTS, cache_get_field_content_int(0, "improvements"));
		SetPlayerData(playerid, P_POWER, 		cache_get_field_content_int(0, "power"));
		SetPlayerData(playerid, P_WIFE, 		cache_get_field_content_int(0, "brak"));
		SetPlayerData(playerid, P_TEAM, 		cache_get_field_content_int(0, "team"));
		SetPlayerData(playerid, P_SUBDIVISON,	cache_get_field_content_int(0, "subdivison"));
		cache_get_field_content(0, "brak", g_player[playerid][P_WIFE_NAME], mysql, 61);
		SetPlayerData(playerid, P_WAGE,			cache_get_field_content_int(0, "wage"));
		SetPlayerData(playerid, P_JOB, 			cache_get_field_content_int(0, "job"));
		SetPlayerData(playerid, P_GARAGE_SLOTS, 		cache_get_field_content_int(0, "garage_slots"));
		SetPlayerData(playerid, P_HOUSE_TYPE,	cache_get_field_content_int(0, "house_type"));
		SetPlayerData(playerid, P_HOUSE_ROOM,	cache_get_field_content_int(0, "house_room"));
		SetPlayerData(playerid, P_ID_SPAWN,	cache_get_field_content_int(0, "id_spawn"));
		SetPlayerData(playerid, P_HOUSE_SLOTS, 	cache_get_field_content_int(0, "house_slots"));
		SetPlayerData(playerid, P_AFTER_X,		cache_get_field_content_float(0, "after_x"));
		SetPlayerData(playerid, P_AFTER_Y,		cache_get_field_content_float(0, "after_y"));
		SetPlayerData(playerid, P_AFTER_Z,		cache_get_field_content_float(0, "after_z"));
		SetPlayerData(playerid, P_SCORE,					cache_get_field_content_int(0, "score"));
		cache_get_field_content(0, "vipprefix", g_player[playerid][P_VIPPREFIX], mysql, 64);
		cache_get_field_content(0, "myprefix", g_player[playerid][P_MYPREFIX], mysql, 64);
		cache_get_field_content(0, "myprefixcolor", g_player[playerid][P_MYPREFIX_COLOR], mysql, 64);
        SetPlayerData(playerid, P_EAT,						cache_get_field_content_int(0, "hunger"));
		SetPlayerData(playerid, P_MUDER,					cache_get_field_content_int(0, "muder"));
		SetPlayerData(playerid, pPlainLic, 					cache_get_field_content_int(0, "PlainLic"));
		SetPlayerData(playerid, P_SPONSOR,					cache_get_field_content_int(0, "sponsor"));
        SetPlayerData(playerid, P_DANCE_0,					cache_get_field_content_int(0, "dance_0"));
		SetPlayerData(playerid, P_DANCE_1,					cache_get_field_content_int(0, "dance_1"));
		SetPlayerData(playerid, P_DANCE_2,					cache_get_field_content_int(0, "dance_2"));
		SetPlayerData(playerid, P_DANCE_3,					cache_get_field_content_int(0, "dance_3"));
		SetPlayerData(playerid, P_DANCE_4,					cache_get_field_content_int(0, "dance_4"));
		SetPlayerData(playerid, P_DANCE_5,					cache_get_field_content_int(0, "dance_5"));
		SetPlayerData(playerid, P_DANCE_6,					cache_get_field_content_int(0, "dance_6"));
		SetPlayerData(playerid, P_DANCE_7,					cache_get_field_content_int(0, "dance_7"));
		SetPlayerData(playerid, P_DANCE_8,					cache_get_field_content_int(0, "dance_8"));
		SetPlayerData(playerid, P_DANCE_9,					cache_get_field_content_int(0, "dance_9"));
		SetPlayerData(playerid, P_DANCE_10,					cache_get_field_content_int(0, "dance_10"));
		SetPlayerData(playerid, P_DANCE_11,					cache_get_field_content_int(0, "dance_11"));
		SetPlayerData(playerid, P_DANCE_12,					cache_get_field_content_int(0, "dance_12"));
		SetPlayerData(playerid, P_DANCE_13,					cache_get_field_content_int(0, "dance_13"));
		SetPlayerData(playerid, P_DANCE_14,					cache_get_field_content_int(0, "dance_14"));
		SetPlayerData(playerid, P_DANCE_15,					cache_get_field_content_int(0, "dance_15"));
		SetPlayerData(playerid, P_DANCE_16,					cache_get_field_content_int(0, "dance_16"));
		SetPlayerData(playerid, P_DANCE_17,					cache_get_field_content_int(0, "dance_17"));
		SetPlayerData(playerid, P_DANCE_18,					cache_get_field_content_int(0, "dance_18"));
		SetPlayerData(playerid, P_DANCE_19,					cache_get_field_content_int(0, "dance_19"));
		SetPlayerData(playerid, P_DANCE_20,					cache_get_field_content_int(0, "dance_20"));
		SetPlayerData(playerid, P_DANCE_21,					cache_get_field_content_int(0, "dance_21"));
		SetPlayerData(playerid, P_DANCE_22,					cache_get_field_content_int(0, "dance_22"));
		SetPlayerData(playerid, P_DANCE_23,					cache_get_field_content_int(0, "dance_23"));
		SetPlayerData(playerid, P_DANCE_24,					cache_get_field_content_int(0, "dance_24"));
		SetPlayerData(playerid, P_DANCE_25,					cache_get_field_content_int(0, "dance_25"));
		SetPlayerData(playerid, P_DANCE_26,					cache_get_field_content_int(0, "dance_26"));
		SetPlayerData(playerid, P_DANCE_27,					cache_get_field_content_int(0, "dance_27"));
		SetPlayerData(playerid, P_DANCE_28,					cache_get_field_content_int(0, "dance_28"));
		SetPlayerData(playerid, P_DANCE_29,					cache_get_field_content_int(0, "dance_29"));
		SetPlayerData(playerid, P_DANCE_30,					cache_get_field_content_int(0, "dance_30"));
		SetPlayerData(playerid, P_DANCE_31,					cache_get_field_content_int(0, "dance_31"));
		SetPlayerData(playerid, P_DANCE_32,					cache_get_field_content_int(0, "dance_32"));
		SetPlayerData(playerid, P_DANCE_33,					cache_get_field_content_int(0, "dance_33"));
		SetPlayerData(playerid, P_FAMILY,               	cache_get_field_content_int(0, "family"));
        SetPlayerData(playerid, P_FAMILY_RANK,         	 	cache_get_field_content_int(0, "family_rank"));
        SetPlayerData(playerid, P_FMUTE, 					cache_get_field_content_int(0, "fmute"));
        SetPlayerData(playerid, P_FWARN, 					cache_get_field_content_int(0, "fwarn"));
		SetPlayerData(playerid, P_DOSTIJ1,					cache_get_field_content_int(0, "dostij1"));
		SetPlayerData(playerid, P_DOSTIJ2,		cache_get_field_content_int(0, "dostij2"));
		SetPlayerData(playerid, P_DOSTIJ3,		cache_get_field_content_int(0, "dostij3"));
		SetPlayerData(playerid, P_DOSTIJ4,		cache_get_field_content_int(0, "dostij4"));
		SetPlayerData(playerid, P_DOSTIJ5,		cache_get_field_content_int(0, "dostij5"));
		SetPlayerData(playerid, P_DOSTIJ6,		cache_get_field_content_int(0, "dostij6"));
		SetPlayerData(playerid, P_DOSTIJ7,		cache_get_field_content_int(0, "dostij7"));
		SetPlayerData(playerid, P_DOSTIJ8,		cache_get_field_content_int(0, "dostij8"));
		SetPlayerData(playerid, P_DOSTIJ9,		cache_get_field_content_int(0, "dostij9"));
		SetPlayerData(playerid, P_DOSTIJ10,		cache_get_field_content_int(0, "dostij10"));
		SetPlayerData(playerid, P_DOSTIJ11,		cache_get_field_content_int(0, "dostij11"));
		SetPlayerData(playerid, P_DOSTIJ12,		cache_get_field_content_int(0, "dostij12"));
		SetPlayerData(playerid, P_DOSTIJ13,		cache_get_field_content_int(0, "dostij13"));
		SetPlayerData(playerid, P_DOSTIJ14,		cache_get_field_content_int(0, "dostij14"));
		SetPlayerData(playerid, P_DOSTIJ15,		cache_get_field_content_int(0, "dostij15"));
		SetPlayerData(playerid, P_DOSTIJ16,		cache_get_field_content_int(0, "dostij16"));
		SetPlayerData(playerid, P_DOSTIJ17,		cache_get_field_content_int(0, "dostij17"));
		SetPlayerData(playerid, P_DOSTIJ18,		cache_get_field_content_int(0, "dostij18"));
		SetPlayerData(playerid, P_DOSTIJ19,		cache_get_field_content_int(0, "dostij19"));
		SetPlayerData(playerid, P_DOSTIJ20,		cache_get_field_content_int(0, "dostij20"));
		SetPlayerData(playerid, P_DOSTIJ21,		cache_get_field_content_int(0, "dostij21"));
		SetPlayerData(playerid, P_DOSTIJ22,		cache_get_field_content_int(0, "dostij22"));
		SetPlayerData(playerid, P_DOSTIJ23,		cache_get_field_content_int(0, "dostij23"));
		SetPlayerData(playerid, P_DOSTIJ24,		cache_get_field_content_int(0, "dostij24"));
		SetPlayerData(playerid, P_DOSTIJ25,		cache_get_field_content_int(0, "dostij25"));
		SetPlayerData(playerid, P_NAKOLKA,		cache_get_field_content_int(0, "nakolka"));
		SetPlayerData(playerid, P_BIZ_SLOTS,	cache_get_field_content_int(0, "biz_slots"));
		SetPlayerData(playerid, P_AUCTION_SLOTS,	cache_get_field_content_int(0, "auction_slots"));
		SetPlayerData(playerid, P_KIOSK_SLOTS,	cache_get_field_content_int(0, "kiosk_slots"));
		SetPlayerData(playerid, P_GARDEN_SLOTS,	cache_get_field_content_int(0, "garden_slots"));
		SetPlayerData(playerid, P_DRAG_SCORE,	cache_get_field_content_int(0, "drag_score"));
		SetPlayerData(playerid, P_TK_JOB,	cache_get_field_content_int(0, "tk_job"));
		SetPlayerData(playerid, P_TK_JOB_TYPE,	cache_get_field_content_int(0, "tk_job_type"));
		SetPlayerData(playerid, P_BP_PREMIUM,		cache_get_field_content_int(0, "bp_premium"));
		SetPlayerData(playerid, P_BP_EXP,		cache_get_field_content_int(0, "bp_exp"));
		SetPlayerData(playerid, P_ORDER, -1);
		SetFullness(playerid, GetPlayerData(playerid, P_EAT));
		g_player_metro[playerid][E_PLAYER_METRO_STATUS] = 0;
		g_player_trash[playerid][TRASH_ID_CAR] = 0;
        g_player_trash[playerid][TRASH_ID] = 0;		
		TogglePlayerSpectating(playerid, false);
		if(GetPlayerFamily(playerid) != 0)
		{
			if(g_war[W_STATUS]) BitStream_1(playerid, s_CefInterface, t_CefShow, "Capture");
			else BitStream_1(playerid, s_CefInterface, t_CefHide, "Capture");
			if(g_family[GetPlayerFamily(playerid)][F_GANG] == 1)
			{
			    if(GetPlayerTeamEx(playerid) != 0)
			    {
			        SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
			        SetPlayerData(playerid, P_FAMILY,0);
			        SetPlayerData(playerid, P_FAMILY_RANK,0);
			        UpdatePlayerDatabaseInt(playerid, "family", 0);
			        UpdatePlayerDatabaseInt(playerid, "family_rank", 0);
			    }
			    else
			    {
					SetPlayerColorEx(playerid, family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)]);
					new text_str[144];
					format(text_str, 144, "{%06x}%s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerFamily(playerid)][F_NAME]);
					g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
				}
			}
			else
			{
				new text_str[144];
				format(text_str, 144, "{FFB500}%s", g_family[GetPlayerFamily(playerid)][F_NAME]);
				g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
			}
		}
		if(GetPlayerData(playerid, P_BLACK_MARKET_WIN) == 0)
		{
			if(GetPlayerData(playerid, P_BLACK_MARKET_BET) != 0)
			{
				SetPlayerData(playerid, P_BLACK_MARKET_BET, 0);
				UpdatePlayerDatabaseInt(playerid, "black_market_bet", 0);
				GivePlayerMoneyEx(playerid, GetPlayerData(playerid, P_BLACK_MARKET_BET), "Возврат средств за ставку на черном рынке", true, true);
				SendClientMessage(playerid, 0xCECECEFF, "Вы проиграли в аукционе на черном рынке! Вам были возвращены деньги за ставку");
			}
		}
		else 
		{
			SetPlayerData(playerid, P_BLACK_MARKET_WIN, 0);
			UpdatePlayerDatabaseInt(playerid, "black_market_win", 0);
			SendClientMessage(playerid, 0xCECECEFF, "Приз можно забрать на складе аукциона черного рынка");
			SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Вы выиграли в аукционе на черном рынке");
		}
		SetPlayerData(playerid, P_REG_TIME, 	cache_get_field_content_int(0, "reg_time"));
		buffer = SetPlayerData(playerid, P_LAST_LOGIN_TIME,	cache_get_field_content_int(0, "last_login"));
		if(GetElapsedTime(time, buffer) < 1)
		{
			if(GetElapsedTime(time, g_last_pay_day_time) < 1)
				SetPlayerData(playerid, P_GAME_FOR_HOUR,	cache_get_field_content_int(0, "game_for_hour"));
		}
		SetPlayerData(playerid, P_GAME_FOR_DAY,			cache_get_field_content_int(0, "game_for_day"));
		SetPlayerData(playerid, P_GAME_FOR_DAY_PREV,	cache_get_field_content_int(0, "game_for_day_prev"));
		buffer = GetElapsedTime(time, buffer, CONVERT_TIME_TO_DAYS);
		if(buffer == 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, GetPlayerData(playerid, P_GAME_FOR_DAY));
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
		}
		else if(buffer > 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, 0);
		}
		SetPlayerSettingData(playerid, S_CHAT_TYPE, 	cache_get_field_content_int(0, "setting1"));
		SetPlayerSettingData(playerid, S_TEAM_CHAT, 	cache_get_field_content_int(0, "setting2"));
		SetPlayerSettingData(playerid, S_NICK_IN_CHAT, 	cache_get_field_content_int(0, "setting4"));
		SetPlayerSettingData(playerid, S_ID_IN_CHAT, 	cache_get_field_content_int(0, "setting5"));
		SetPlayerSettingData(playerid, S_VEH_CONTROL, 	cache_get_field_content_int(0, "setting6"));
		SetPlayerData(playerid, P_WARN, 				cache_get_field_content_int(0, "warn"));
		SetPlayerData(playerid, P_WARN_TIME,			cache_get_field_content_int(0, "warn_time"));
		SetPlayerData(playerid, P_MUTE, 				cache_get_field_content_int(0, "mute"));
		SetPlayerData(playerid, P_RMUTE, 				cache_get_field_content_int(0, "rmute"));
		SetPlayerData(playerid, P_SKILL_COLT, 			cache_get_field_content_int(0, "skill_colt"));
		SetPlayerData(playerid, P_SKILL_SDPISTOL,		cache_get_field_content_int(0, "skill_sdpistol"));
		SetPlayerData(playerid, P_SKILL_DEAGLE, 		cache_get_field_content_int(0, "skill_deagle"));
		SetPlayerData(playerid, P_SKILL_SHOTGUN, 		cache_get_field_content_int(0, "skill_shotgun"));
		SetPlayerData(playerid, P_SKILL_MP5, 			cache_get_field_content_int(0, "skill_mp5"));
		SetPlayerData(playerid, P_SKILL_AK47, 			cache_get_field_content_int(0, "skill_ak47"));
		SetPlayerData(playerid, P_SKILL_M4, 			cache_get_field_content_int(0, "skill_m4"));
		SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 	cache_get_field_content_int(0, "skill_sniper_rifle"));
		SetPlayerData(playerid, P_SKILL_SAWNOFF, 		cache_get_field_content_int(0, "skill_sawnoff"));
		SetPlayerData(playerid, P_SKILL_COMBAT_SG, 		cache_get_field_content_int(0, "skill_combat_sg"));
		SetPlayerData(playerid, P_SKILL_MICRO_UZI, 		cache_get_field_content_int(0, "skill_micro_uzi"));
		SetPlayerData(playerid, P_DONATE_CURRENT, 		cache_get_field_content_int(0, "donate_current"));
		SetPlayerData(playerid, P_DONATE_TOTAL, 		cache_get_field_content_int(0, "donate_total"));
		SetPlayerData(playerid, P_COINS, 				cache_get_field_content_int(0, "coins"));
		SetPlayerData(playerid, P_OSKIN,		 		cache_get_field_content_int(0, "org_skin"));
		SetPlayerData(playerid, P_SPAWN,		 		cache_get_field_content_int(0, "setting_spawn"));
		SetPlayerData(playerid, P_HOSPITAL,				bool: cache_get_field_content_int(0, "hospital"));
		SetPlayerData(playerid, P_HEALTH,				cache_get_field_content_float(0, "health"));
		SetPlayerData(playerid, P_CAR_SLOTS,			cache_get_field_content_int(0, "car_slots"));
		SetPlayerData(playerid, P_JAIL,					cache_get_field_content_int(0, "jail"));
		SetPlayerData(playerid, P_PREMIUM,				cache_get_field_content_int(0, "premium"));
		SetPlayerData(playerid, P_PREMIUM_TIME,			cache_get_field_content_int(0, "premium_time"));
		RPPoint[playerid] = cache_get_field_content_int(0, "rppoint");
		SetPlayerData(playerid, P_ARMUTE,					cache_get_field_content_int(0, "a_rmute"));
		SetPlayerData(playerid, P_AUNRMUTE,					cache_get_field_content_int(0, "a_unrmute"));
		SetPlayerData(playerid, P_YADMIN, 				cache_get_field_content_int(0, "yadmin"));
		SetPlayerData(playerid, P_FORTUNE_WHEEL, 		cache_get_field_content_int(0, "ruletka"));
        cache_get_field_content(0, "adminspasslogin", g_player[playerid][P_ADMIN_PASSWORD], mysql, 16);
        SetPlayerData(playerid, P_VMUTE, 				cache_get_field_content_int(0, "vmute"));
		SetPlayerData(playerid, P_STYLE_1, cache_get_field_content_int(0, "style1"));
		SetPlayerData(playerid, P_STYLE_2, cache_get_field_content_int(0, "style2"));
		SetPlayerData(playerid, P_STYLE_3, cache_get_field_content_int(0, "style3"));
		SetPlayerData(playerid, P_STYLE_4, cache_get_field_content_int(0, "style4"));
		SetPlayerData(playerid, P_STYLE_5, cache_get_field_content_int(0, "style5"));
        SetPlayerData(playerid, P_HOSPITAL, false);
		SetPlayerSpawnInit(playerid);
		StopAudioStreamForPlayer(playerid);
	    SetPlayerVirtualWorld(playerid, 0);
		SpawnPlayer(playerid);
		SetPlayerSpawnPos(playerid);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.destroySound(10311, 30)");
		if(GetPlayerData(playerid, P_SKIN))
		{
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET last_ip='%e',last_login=%d WHERE id=%d LIMIT 1", GetPlayerIpEx(playerid), time, GetPlayerAccountID(playerid));
			mysql_pquery(mysql, query);
			format(query, sizeof query, "~y~Добро пожаловать ~n~~b~%s", GetPlayerNameEx(playerid));
			GameText(playerid, query, 5000, 2);
			if(IsPlayerHasDonations(playerid))
				SendClientMessage(playerid, 0x3399FFFF, "У Вас есть новые пополнения счёта. Введите {ff9900}/donate{3399ff}, чтобы зачислить их");
			new player_admin_rank = GetPlayerAdminEx(playerid);
			if(!g_player[playerid][P_MYPREFIX] && !g_player[playerid][P_MYPREFIX_COLOR])
			{
				if(player_admin_rank)
				{
					if(GetPlayerAdminEx(playerid) > 0) 
					{
						if(GetPlayerData(playerid, P_BUYADMIN) == 0) SCMF(playerid, COLOR_RED, "{FFAF00}У вас имеються Админ-Права: %d уровня", GetPlayerAdminEx(playerid));
						else SCMF(playerid, COLOR_RED, "{FFAF00}У вас имеються Админ-Права ПА: %d уровня", GetPlayerAdminEx(playerid));
						SCM(playerid, COLOR_RED, "{FFAF00}Для информации используйте команду:{FFFFFF} /ahelp");
					}
					new Hour, Minute, Second;
					gettime(Hour, Minute, Second);		
				}
			}
            new player_yadmin_rank = GetPlayerYAdminEx(playerid);
			if(player_yadmin_rank)
            {
                if(GetPlayerYAdminEx(playerid) == 1) YAdminTag = "Ютубер 1 уровня";
                if(GetPlayerYAdminEx(playerid) == 2) YAdminTag = "Ютубер 2 уровня";
                if(GetPlayerYAdminEx(playerid) == 3) YAdminTag = "Ютубер 3 уровня";
				SCMF(playerid,0xFFFF00FF, "{FFAF00В} вошли как: {F81414}%s", YAdminTag);
			}
			if(g_player[playerid][P_MYPREFIX] && g_player[playerid][P_MYPREFIX_COLOR])
			{
				SCMF(playerid,0xFFFF00FF, "{FFAF00}Вы успешно авторизовались как {%s}%s", g_player[playerid][P_MYPREFIX_COLOR], g_player[playerid][P_MYPREFIX]);
			}
			new player_premium_rank = GetPlayerPremium(playerid),
				player_premium_time = GetPlayerPremiumTime(playerid);
			if(player_premium_rank)
			{
				new premium_rank[3][17] =
				{
					"{C0C0C0}Silver",
					"{FFD700}Gold",
					"{E5E4E2}Platinum"
				};
				if((player_premium_time - time) > 0)
				{
					format(query, sizeof query, "{FFAF00}Вы владелец %s {FFAF00}премиум-аккаунта. Спасибо за помощь проекту!", premium_rank[ player_premium_rank - 1 ]);
					SendClientMessage(playerid, 0x3399FFFF, query);
				}
			}
			if(strcmp(GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP), false))
			{
				new lastip[64];
				new regip[64];
				strmid(lastip,GetPlayerIpEx(playerid),0,3);
				strmid(regip,GetPlayerData(playerid, P_REG_IP),0,3);
				if(strval(lastip) != strval(regip)) 
				{
					new fmt_text[148];
					format(fmt_text, sizeof fmt_text,"[A] Игрок %s[%d] подозревается во взломе (Смена основного IP-адреса)",GetPlayerNameEx(playerid), playerid, GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP));
					SendMessageToAdmins(fmt_text, 0xFF6600FF);
					printf("["DETECT_ACH"] Игрок %s подозревается во взломе (Смена IP-адреса) [%s (last) | %s (reg)]", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP));
				}
			}
			if(GetPlayerData(playerid, P_WARN) > 0)
			{
				if(time > GetPlayerData(playerid, P_WARN_TIME))
				{
					SetPlayerData(playerid, P_WARN, 0);
					SetPlayerData(playerid, P_WARN_TIME, 0);
				}
				else {
					SCMF(playerid, 0xFF6600FF, "Количество предупреждений: %d из 3", GetPlayerData(playerid, P_WARN));
					SendClientMessage(playerid, 0xFF6600FF, "После 3 предупреждения аккаунт будет заблокирован");
				}
			}
			SetPlayerInit(playerid);
		}
		else
		{
			SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);
			SendClientMessage(playerid, 0x66CC00FF, "Выберите внешность Вашего персонажа");
		}
	}
	cache_delete(result);
	if(GetPlayerData(playerid, P_ADMIN))
	{
		BitStream_1(playerid, s_CefInterface, t_CefShow, "UnansweredRequests");
		LoadAdminsReport(playerid);
	}
	if(GetPlayerData(playerid, P_PREMIUM_TIME) < gettime() && GetPlayerData(playerid, P_PREMIUM) > 0)
	{
		SetPlayerData(playerid, P_PREMIUM, 0);
		UpdatePlayerDatabaseInt(playerid, "premium", 0);
	}
	LoadPlayerItems(playerid);
	LoadPlayerPromocode(playerid);
	LoadAuctionBet(playerid);
	SetPVarInt(playerid, "Login", 1);
	if(DailyreWards_Time[playerid] == 0) DailyreWards_Time[playerid] = 7200;
	if(GetPlayerData(playerid, P_ADMIN) > 0) if(admin_logged[playerid] == false) return Kick(playerid);
	ResetWeapons(playerid);
	str_q[0] = EOS;
	format(str_q, sizeof str_q, "window.interface('Hud').info.money = %s", GetPlayerMoneyEx(playerid));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, str_q);
	STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.setPlayerNickName('%s') || window.setPlayerLevel('%d') || window.setPlayerPassedHours('%d') || window.setPlayerMoney('%s') || window.setPlayerBankMoney('%s') || window.setPlayerDonate('%d') || window.setGameVersion('XRINE CRMP 7.4') || window.setPlayerSkinId('%d') || window.setCurrentServer('1')",GetPlayerNameEx(playerid),GetPlayerLevel(playerid),ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS),GetPlayerMoneyEx(playerid),GetPlayerBankMoney(playerid),GetPlayerCurrentDonate(playerid),GetPlayerData(playerid, P_SKIN));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);		
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setPlayerConnectedStatus(1)");
	return 1;
}

stock BuyPlayerGarage(playerid, garage_id, bool: buy_from_owner = false, price = -1)
{
	if(!IsGarageOwned(garage_id))
	{
		if(price <= 0)
			price = GetGarageData(garage_id, G_PRICE);
		if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
		{
			new query[256];
			format(query, sizeof query, "UPDATE accounts a, garage g SET a.money=%s,g.owner_id=%d WHERE a.id=%d AND g.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), -price), GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetGarageData(garage_id, G_SQL_ID));
			mysql_query(mysql, query, false);
			if(!mysql_errno())
			{
				SetGarageData(garage_id, G_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetGarageData(garage_id, G_IMPROVEMENTS, 	0);
				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;
				if(!buy_from_owner)
				{
					SetGarageData(garage_id,	G_RENT_DATE,	rent_time);
					SetGarageData(garage_id,	G_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetGarageData(garage_id, G_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetGarageData(garage_id, G_RENT_DATE, rent_time);
					}
				}
				format(g_garage[garage_id][G_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateGarageLabel", "i", garage_id);
				GivePlayerMoneyEx(playerid, -price, "Покупка гаража", false, true);
				SendClientMessage(playerid, 0x33AA33FF, "Напишите {6495ED}/garage{33AA33} чтобы узнать о возможностях");
				format(query, sizeof query, "UPDATE garage SET improvements=0,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetGarageData(garage_id, G_RENT_DATE), GetGarageData(garage_id, G_LOCK_STATUS), GetGarageData(garage_id, G_SQL_ID));
				mysql_query(mysql, query, false);
				return 1;
			}
			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(ISLAND-ERR 21)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock GetNearestGarage(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new garage_id = -1;
	new Float: my_dist;
	for(new idx; idx < g_garage_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetGarageData(idx, G_POS_X), GetGarageData(idx, G_POS_Y), GetGarageData(idx, G_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			garage_id = idx;
		}
	}
	return garage_id;
}

public: ShowPlayerLoginDialog(playerid, step, wrong_pass)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_LOGIN) return 0;
	new fmt_str[512];
	switch(step)
	{
		case LOGIN_STATE_CHECK_BAN:
		{
			new Cache: result;
			format(fmt_str, sizeof fmt_str, "SELECT * FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_str, true);
			if(cache_num_rows())
			{
				new unban_time = cache_get_field_content_int(0, "ban_time");
				new ban_days = GetElapsedTime(unban_time, gettime(), CONVERT_TIME_TO_DAYS);
				//if(unban_time > gettime())
				if(ban_days > 0)
				{
					new reason[32];
					new admin_name[21];
					new day, month, year;
					new hour, minute, second;
					new ban_time = cache_get_field_content_int(0, "time");
					cache_get_field_content(0, "description", reason);
					cache_get_field_content(0, "admin", admin_name);
					timestamp_to_date(ban_time, day, month, year, hour, minute, second);
					string_dialog[0] = EOS;
					if(ban_days > 30)
					{
					    format
						(
							string_dialog, sizeof string_dialog,
							"{FFFFFF}Этот аккаунт заблокирован\n\n"\
							"{FFFFFF}Ник администратора: %s\n"\
							"Причина блокировки: %s\n"\
							"Дата и время: %d-%02d-%02d %02d:%02d:%02d\n\n"\
							"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
							admin_name,
							reason,
							day, month, year, hour, minute, second
						);
					}
					else
					{
						format
						(
							string_dialog, sizeof string_dialog,
							"{FFFFFF}Этот аккаунт заблокирован на {FF3333}%d дней\n\n"\
							"{FFFFFF}Ник администратора: %s\n"\
							"Причина блокировки: %s\n"\
							"Дата и время: %d-%02d-%02d %02d:%02d:%02d\n\n"\
							"Если Вы не согласны с наказанием, обратитесь\n"\
							"в тех. поддержку {FFCD00}"SERVER_VK"{FFFFFF} для более\n"\
							"подробного выяснения сложившейся ситуации.\n\n"\
							"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
							ban_days,
							admin_name,
							reason,
							day, month, year, hour, minute, second
						);
					}
					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}"SERVER_NAME_RP"", string_dialog, "Закрыть", "");
					Kick:(playerid, " ", 3000);
				}
				else
				{
					format(fmt_str, sizeof fmt_str, "DELETE FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
					mysql_tquery(mysql, fmt_str, "", "");
					ShowPlayerAvtoriz(playerid);
				}
			}
			else
			{
				ShowPlayerAvtoriz(playerid);
			}
			return cache_delete(result);
		}
		case LOGIN_STATE_CHECK_BAN_IP:
		{
			new Cache: result;
			format(fmt_str, sizeof fmt_str, "SELECT * FROM banip_list WHERE ip='%s' LIMIT 1", g_player[playerid][P_LAST_IP]);
			result = mysql_query(mysql, fmt_str, true);
			if(cache_num_rows())
			{
				new admin[21],
					reason[32],
					time[21];
				cache_get_field_content(0, "description", reason);
				cache_get_field_content(0, "admin", admin);
				cache_get_field_content(0, "time", time);
				string_dialog[0] = EOS;
				format
				(
					string_dialog, sizeof string_dialog,
					"{FFFFFF}Ваш IP-адрес заблокирован\n\n"\
					"{FFFFFF}Ник администратора: %s\n"\
					"Причина блокировки: %s\n"\
					"Дата и время: %s\n\n"\
					"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
					admin,
					reason,
					time
				);
				Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}"SERVER_NAME_RP"", string_dialog, "Закрыть", "");
				Kick:(playerid, " ", 3000);
				cache_delete(result);
			}
			else 
			{
				cache_delete(result);
				ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN, false);
			}
			return 1;
		}
		case LOGIN_STATE_LOAD_ACC:
		{
			SetPlayerData(playerid, P_AUTH_TIME, -1);
			SetPVarInt(playerid, "LoginPlayer", 0);
			DeletePVar(playerid, "passest");
			LoadPlayerData(playerid);
			new system[248];
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').setShowControls(1)");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "client.setChatStatus(true)");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "showInterface('Hud')");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "client.setHudStatus(true)");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').setServer(1)");	
			//BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').setNewYear(1)");  
            BitStream_1(playerid, s_CefInterface, t_CefShow, "GameText");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "stopSound()");
			format(system, sizeof system, "interface('Hud').setBonus(%d)", g_doubling[1]);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, system);
			callcmd::return_acsses(playerid);
			ResetWeapons(playerid);
			callcmd::animlist(playerid, "");
			SetPlayerWeather(playerid, 0);
			OnPlayerTicketTime(playerid);
		}
	}
	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);
	return 1;
}

public: ClearPlayerAnim(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 0);
}

public: ClearPlayerChatAnim(playerid)
{
	if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_CHAT)
	{
		ClearPlayerAnim(playerid);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
	}
}

public: SetPlayerMinerJobTakeOre(playerid, step)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		new time = 1000;
		switch(step)
		{
			case 1:
			{
				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 905, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.05, -0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 2936, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.05, 0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 1, 1, 1, 2250, 0);
				time = 2500;
			}
			case 3:
			{
				RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 1458, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 0.58, 0.6, 0.4, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE + 1, 816, A_OBJECT_BONE_SPINE, -0.63, 1.3, 0.0, 270.0, 75.0, 0.0, 0.5, 0.4, 0.8, 0);
				SetPlayerMinerJobUnLoadCP(playerid);
				return ;
			}
			default:
				return ;
		}
		SetTimerEx("SetPlayerMinerJobTakeOre", time, false, "ii", playerid, step + 1);
	}
}

public: SetPlayerLumberJackTakeWood(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
	{
		if(GetPlayerAnimationIndex(playerid) != 20)
			LumberJackPlayerDrop(playerid, false);
		else
		{
			SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_PUT);
			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 1, 0, 1, 0, 1500, 0);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 1, 1, 1);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1463, A_OBJECT_BONE_RIGHT_HAND, 0.006, 0.138, -0.192, -109.8, -2.2, -102.9, 0.505, 0.328, 0.57);
			if(!random(5))
				SetTimerEx("LumberJackPlayerDrop", 500, false, "dd", playerid, true);
		}
	}
}

public: LumberJackPlayerDrop(playerid, bool: message)
{
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
	if(message)
		SendClientMessage(playerid, 0xFF6600FF, "Вы уронили дрова");
	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
	ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 0);
	SetPlayerLumberJackChopCP(playerid);
	return 1;
}

public: FermerRepositoryUpdate()
{
	new fmt_str[155];
	format(fmt_str, sizeof fmt_str, "Склад фермы\n\n{"#cGold"}Количество сена\n%d / 10000\n{FFFFFF}Нажмите H чтобы загрузить авто сеном", GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT));
	UpdateDynamic3DTextLabelText(GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_LABEL), 0x66CCFFFF, fmt_str);
}

stock FermaCarUpdate(vehicleid)
{
    new str_t[155];
	format(str_t, sizeof str_t, "{FFFFFF}Загружено сена %d из 10", ceno[vehicleid]);
	UpdateVehicleLabel(vehicleid,0xFFFFFFFF, str_t);
}

public: MinerCarriageUpdate(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS] && !miner_carriage[carriageid][MC_IN_MOVE])
	{
		if(miner_carriage[carriageid][MC_ORE_COUNT] >= 500)
		{
			new fmt_str[55],
				items = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);
			miner_carriage[carriageid][MC_ORE_COUNT] -= 500;
			SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, items + 500);
			UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
			format(fmt_str, sizeof fmt_str, "Разгрузка\n\n{FFCC00}Количество руды\n%d / 10000 кг", miner_carriage[carriageid][MC_ORE_COUNT]);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0x66CCFFFF, fmt_str);
		}
		else if(miner_carriage[carriageid][MC_ORE_COUNT] <= 0)
		{
			miner_carriage[carriageid][MC_IN_MOVE] = true;
			SetTimerEx("MinerCarriageMove", 7_000, false, "i", carriageid);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0xFFFF00FF, "Ожидание...");
		}
	}
}

public: MinerCarriageMove(carriageid)
{
	new bool: status = miner_carriage[carriageid][MC_STATUS];
	if(status)
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_START_POS_X], miner_carriage[carriageid][MC_START_POS_Y], miner_carriage[carriageid][MC_START_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}
	else
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_END_POS_X], miner_carriage[carriageid][MC_END_POS_Y], miner_carriage[carriageid][MC_END_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}
	DestroyDynamic3DTextLabel(miner_carriage[carriageid][MC_LABEL]);
	miner_carriage[carriageid][MC_IN_MOVE] = true;
	miner_carriage[carriageid][MC_STATUS] = (status ^ true);
}

public: MinerCarriageSetState(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS]) // вагонетка
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Разгрузка\n\n{FFCC00}Количество руды\n10000 / 10000 кг", 0x66CCFFFF, -2548.1213, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_ORE_COUNT] = 10_000;
	}
	else
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -2375.1228, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_PICKUP_ID] = CreatePickup(19135, 23, -845.5291,1213.5364,3011.5315, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
		miner_carriage[carriageid][MC_ORE_COUNT] = 0;
	}
}

public: StartPlayerJob(playerid, jobid)
{
	if(GetPlayerJob(playerid) == jobid)
	{
		if(!IsPlayerInJob(playerid))
		{
			new job_car = GetPlayerJobCar(playerid);
			if(IsPlayerInVehicle(playerid, job_car))
			{
				new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
				new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;
				if(jobid == car_type)
				{
					SetPlayerJobLoadItems(playerid, 0);
					SetPlayerData(playerid, P_JOB_WAGE, 0);
					SetPlayerData(playerid, P_IN_JOB, true);
					SetVehicleData(job_car, V_ACTION_ID, true);
					new fmt_str[128];
					switch(jobid)
					{
						case JOB_BUS_DRIVER:
						{
							new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
							format(fmt_str, sizeof fmt_str, "%s\n{"#cW"}Стоимость проезда: {FF9900}%d руб", g_bus_routes[route_id][BR_NAME], GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, g_bus_routes[route_id][BR_COLOR], 0.0, 0.0, 2.6, 45.0);
							format(fmt_str, sizeof fmt_str, "начал работу водителя автобуса на маршруте %s", g_bus_routes[route_id][BR_NAME]);
							Action(playerid, fmt_str, _, false);
							NextBusRouteCP(playerid);
							SetPVarFloat(playerid, "car_damage", 1000.0);
						}
						case JOB_TAXI_DRIVER:
						{
							format(fmt_str, sizeof fmt_str, "%s{FFFF00}Тариф: %d руб", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, 0x3399FFFF, 0.0, 0.0, 1.4, 25.0);
							Action(playerid, "начал работу таксиста", _, false);
						}
						case JOB_RERFECT_DRIVER:
						{
						    SetPlayerData(playerid, P_MECHANIC_FILL_PAY, 0);
							SetPlayerData(playerid, P_MECHANIC_REPAIR_PAY, 0);
							format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{999999}Нет топлива", GetPlayerData(playerid, P_JOB_SERVICE_NAME));
							CreateVehicleLabel(job_car, fmt_str, 0xCC9900FF, 0.0, 0.0, 2.0, 25.0);
							Action(playerid, "начал работу автомеханика", _, false);
						}
						case JOB_TRUCKER:
						{
							if(!GetTruckIndex(job_car))
							{
								fmt_str = "Служба\n{"#cW"}Доставки продуктов";
								SendClientMessage(playerid, COLOR_GOLD, "Используйте {3399FF}/bizlist {"#cGold"}чтобы посмотреть заказы от владельцев бизнесов");
								Action(playerid, "начал работу развозчика продуктов", _, false);
							}
							else
							{
								fmt_str = "Служба\n{"#cW"}Доставки топлива";
								SendClientMessage(playerid, COLOR_GOLD, "Используйте {3399FF}/fuellist {"#cGold"}для просмотра заказов от владельцев АЗС");
								Action(playerid, "начал работу развозчика топлива", _, false);
							}
							CreateVehicleLabel(job_car, fmt_str, 0x3399FFFF, 0.0, 2.1, 2.1, 20.0);
						}
					}
				}
			}
		}
	}
	return 1;
}

public: EndPlayerJob(playerid)
{
	if(IsPlayerInJob(playerid))
	{
	    new job_car = GetPlayerJobCar(playerid);
		new vehicleid = GetPlayerJobCar(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(vehicleid);
			SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
			if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 1) DestroyVehicleLabel(job_car);
			g_player_trailer_status[playerid] = 0;
			g_player_trailer_type[playerid] = 0;
			if(g_player_trailer[playerid] != INVALID_VEHICLE_ID)
			{
				DestroyVehicle(g_player_trailer[playerid]);
				g_player_trailer[playerid] = INVALID_VEHICLE_ID;
			}
		}
	}
	KillEndJobTimer(playerid);
	new fmt_str[128];
	new wage = GetPlayerJobWage(playerid);
	new items = GetPlayerJobLoadItems(playerid);
	SetPlayerData(playerid, P_JOB_WAGE, 0);
	SendClientMessage(playerid, 0xFFFF00FF, "Рабочий день завершен!");
	SetPlayerData(playerid, P_IN_JOB, false);
	switch(GetPlayerData(playerid, P_JOB))
	{
		case JOB_BUS_DRIVER:
		{
			new Float: health = GetPVarFloat(playerid, "car_damage");
			new repair_sum;
			if(health < 1000.0)
				repair_sum = (floatround((1000.0 - health) + float(random(100)+10))) / 3;
			DisablePlayerRaceCheckpoint(playerid);
			format(fmt_str, sizeof fmt_str, ". Заработано: {00FF00}%d руб", wage + (items * GetPlayerData(playerid, P_JOB_TARIFF)));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
			format(fmt_str, sizeof fmt_str, "Количество пассажиров: {00FF00}%d{FFFFFF}. Куплено билетов на {00FF00}%d руб", items, items * GetPlayerData(playerid, P_JOB_TARIFF));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
			format(fmt_str, sizeof fmt_str, "За ремонт автобуса: {FF6600}-%d руб", repair_sum);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
			if(repair_sum < wage)
				wage -= repair_sum;
		}
		case JOB_RERFECT_DRIVER:
		{
			DisablePlayerRaceCheckpoint(playerid);
			wage = GetPlayerData(playerid, P_MECHANIC_FILL_PAY) + GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY);
			format(fmt_str, sizeof fmt_str, "Получено за ремонт: {00FF00}%d руб", GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
			format(fmt_str, sizeof fmt_str, "Получено за заправку: {00FF00}%d руб", GetPlayerData(playerid, P_MECHANIC_FILL_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
		default:
		{
			switch(GetPlayerTempJob(playerid))
			{
				case TEMP_JOB_FACTORY_TRUCKER:
				{
					RemovePlayerAttachedObjects(playerid);
					SetPlayerSkinInit(playerid);
					format(fmt_str, sizeof fmt_str, "Ваша общая чистая прибыль составляет {00CC00}%d руб", wage);
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
					SetPlayerJobLoadItems(playerid, 0);
					SetPlayerTempJob(playerid, TEMP_JOB_NONE);
				}
			}
			return 1;
		}
	}
	SendClientMessage(playerid, 0x66CC00FF, "Деньги будут перечислены на Ваш счет во время зарплаты");
	AddPlayerData(playerid, P_WAGE, +, wage);
	format(fmt_str, sizeof fmt_str, "UPDATE accounts SET wage=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_WAGE), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_str, false);
	return 1;
}

public: EndCarJob(playerid, veh_id)
{
	RemovePlayerFromVehicle(playerid);
	vodila[veh_id] = -1;
	if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 1) SetVehicleToRespawn(veh_id);
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
	SendClientMessage(playerid, -1, "Прошло 15 секунд а Вы так и не вернулись в авто. Авто было отправлено на место.");
	KillCarJobTimer(playerid);
	return 1;
}

public: ShowChangeNameHistory(playerid, name[])
{
	new fmt_str[64];
	new rows = cache_num_rows();
	if(!rows)
	{
		format(fmt_str, sizeof fmt_str, "{FFCD00}Прошлые имена %s", name);
		return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, "{FFFFFF}История изменения имен персонажа пуста", "Закрыть", "");
	}
	string_dialog = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");
		strcat(string_dialog, fmt_str);
	}
	format(fmt_str, sizeof fmt_str, "{FFCD00}Прошлые имена %s", name);
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, string_dialog, "Закрыть", "");
}

public: ShowTestPlayer(playerid)
{
	new fmt_str[64];
	new rows = cache_num_rows();
	if(!rows)
	{
		return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "ЗБТ Доступ", "{FFFFFF}Тут пусто :(", "Закрыть", "");
	}
	string_dialog = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");
		strcat(string_dialog, fmt_str);
	}
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "ЗБТ Доступ", string_dialog, "Закрыть", "");
}

public: ShowPlayerPhoneBook(playerid)
{
	if(IsPlayerPhoneBookInit(playerid))
	{
		if(GetPlayerPhoneBookContacts(playerid) > 0)
		{
			new fmt_str[37];
			new string[((sizeof fmt_str) * MAX_PHONE_BOOK_CONTACTS) + 1];
			for(new idx, count; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
			{
				if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;
				SetPlayerListitemValue(playerid, count ++, idx);
				format(fmt_str, sizeof fmt_str, "%s - tel.%s\n", GetPlayerPhoneBook(playerid, idx, PB_NAME), GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_PHONE_BOOK, DIALOG_STYLE_LIST, "{FFD83D}Телефонная книга", string, "Варианты", "Отмены");
		}
		else
		{
			SendClientMessage(playerid, 0xCECECEFF, "В телефонной книге нет номеров");
			SendClientMessage(playerid, 0xCECECEFF, "Чтобы добавить новый контакт введите {FFFF00}/add [id игрока]");
		}
	}
	else
	{
		InitPlayerPhoneBook(playerid);
		CallLocalFunction("ShowPlayerPhoneBook", "i", playerid);
	}
	return 1;
}

public: BusinesGPSListInit()
{
	new rows;
	new query[64 + 1];
	new Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM business_gps ORDER BY pos DESC, time ASC LIMIT %d", MAX_BUSINESS_GPS);
	result = mysql_query(mysql, query, true);
	rows = cache_num_rows();
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessGPSInfo(idx, BG_SQL_ID, 	cache_get_row_int(idx, 0));
		SetBusinessGPSInfo(idx, BG_BIZ_ID, 	cache_get_row_int(idx, 1));
		SetBusinessGPSInfo(idx, BG_POS, 	cache_get_row_int(idx, 2));
		SetBusinessGPSInfo(idx, BG_TIME, 	cache_get_row_int(idx, 3));
	}
	g_business_gps_count = rows;
	g_business_gps_init = true;
	cache_delete(result);
}

public: ShowPlayerGPSBusinessList(playerid)
{
	if(g_business_gps_init)
	{
		new businessid;
		new fmt_str[44];
		new string[(sizeof fmt_str) * MAX_BUSINESS_GPS];
		if(!g_business_gps_count)
			string = "В данный момент в списке нет бизнесов";
		for(new idx, count; idx < g_business_gps_count; idx ++)
		{
			businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);
			format(fmt_str, sizeof fmt_str, "%d. %s (%s)\n", idx + 1, GetBusinessData(businessid, B_NAME), GetCityName(GetBusinessData(businessid, B_CITY)));
			strcat(string, fmt_str);
			SetPlayerListitemValue(playerid, count ++, idx);
		}
		Dialog(playerid, DIALOG_GPS_BUSINESS, DIALOG_STYLE_LIST, "{FFD83D}Реклама бизнеса", string, "Отметить", "Назад");
	}
	else
	{
		BusinesGPSListInit();
		CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
	}
}

public: ShowPlayerBusinessDialog(playerid, operationid)
{
	new businessid = GetPVarInt(playerid, "ownablebiz_id");
	if(businessid != -1)
	{
		switch(operationid)
		{
			case BIZ_OPERATION_PARAMS: // управление заправкой
			{
				if(GetBusinessData(businessid, B_TYPE) == 16)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
						"2. Транспорт\n"\
						"3. Изменить стоимость продукта\n"\
						"4. Заказать продукты\n"\
						"5. Отменить заказ\n"\
						"6. Финансовая статистика\n"\
						"7. Улучшить бизнес\n"\
						"8. Сменить поставщика энергии",
						"Выбрать", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 37)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
						"2. Установить цену на вход\n"\
						"3. Изменить стоимость продукта\n"\
						"4. Заказать продукты\n"\
						"5. Отменить заказ\n"\
						"6. Финансовая статистика\n"\
						"7. Улучшить бизнес\n"\
						"8. Сменить поставщика энергии",
						"Выбрать", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 37)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. Персонал\n"\
						"2. Изменить тариф\n"\
						"3. Список клиентов\n"\
						"4. Улучшить бизнес\n"\
						"5. Финансовая статистика\n"\
						"6. Отметить бизнес на GPS",
						"Выбрать", "Назад"
					);
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
						"2. Установить цену на топливо\n"\
						"3. Установить закупочную цену\n"\
						"4. Заказать продукты\n"\
						"5. Отменить заказ\n"\
						"6. Финансовая статистика\n"\
						"7. Улучшить бизнес",
						"Выбрать", "Назад"
					);
				}
			}
			case BIZ_OPERATION_LOCK: // открыть / закрыть
			{
				if(GetBusinessData(businessid, B_TYPE) != 36)
				{
					if(GetBusinessData(businessid, B_LOCK_STATUS))
					{
						SetBusinessData(businessid, B_LOCK_STATUS, false);
						SendClientMessage(playerid, 0x66CC00FF, "Бизнес открыт");
					}
					else
					{
						SetBusinessData(businessid, B_LOCK_STATUS, true);
						SendClientMessage(playerid, 0xFF6600FF, "Бизнес закрыт");
					}
					UpdateBusinessLabel(businessid);
					new query[75];
					mysql_format(mysql, query, sizeof query, "UPDATE business SET `lock`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
					mysql_query(mysql, query, false);
					CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "В разработке!");
				}
			}
			case BIZ_OPERATION_ENTER_PRICE: // установить цену за вход
			{
				if(GetBusinessData(businessid, B_TYPE) == 16)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_ARENDA_CAR, DIALOG_STYLE_LIST,
						"{FFFFFF}Транспорт",
						"1. Посмотреть\n"\
						"2. Купить",
						"Выбрать", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 37)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_ENTER_PRICE, DIALOG_STYLE_INPUT,
						"{33AACC}Цена за вход",
						"{FFFFFF}Укажите сколько должны платить клиенты\n"\
						"чтобы войти в ваш бизнес\n\n"\
						"{669966}Предел цен: от 0 до 1000000 рублей\n"\
						"Установка цены за вход может увеличить ваши доходы,\n"\
						"однако сократит количество клиентов\n"\
						"{CC3333}Выбирайте цену разумно во избежание банкротства вашей фирмы",
						"Сменить", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 37)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT,
						"{FFFFFF}Изменение тарифа",
						"{FFFFFF}Укажите стоимость 1 кВТ энергии для ваших клиентов\n"\
						"в диапазоне от 25 до 200 руб",
						"Готово", "Назад"
					);
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_FUEL_STATION_PRICE_FUEL, DIALOG_STYLE_INPUT,
						"{33AACC}Цена топлива",
						"{FFFFFF}Укажите отпускную цену за 1 литр\n"\
						"топлива в пределах от 25.000 до 50.000 рублей",
						"Готово", "Назад"
					);
				}
			}
			case BIZ_OPERATION_PROD_PRICE: // установить стоимость продукта
			{
				if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 37 && GetBusinessData(businessid, B_TYPE) != 43)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT,
						"{33AACC}Стоимость продукта",
						"{FFFFFF}Тут вы можете изменить стоимость продукта для бизнеса\n"\
						"Укажите цену в пределах от 25 до 200 рублей\n\n"\
						"Стоимость продукта определяет привлекательность\n"\
						"вашего бизнеса для развозчиков продуктов\n"\
						"Чем выше цена, тем охотнее они продадут вам свой товар\n"\
						"Однако помните, что черезчур высокая цена\n"\
						"может привести вас к банкротству",
						"Сменить", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) == 43)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT,
						"{33AACC}Стоимость продукта",
						"{FFFFFF}Тут вы можете изменить стоимость продукта для бизнеса\n"\
						"Укажите цену в пределах от 5.000 до 50.000 рублей\n\n"\
						"Стоимость продукта определяет привлекательность\n"\
						"вашего бизнеса для развозчиков продуктов\n"\
						"Чем выше цена, тем охотнее они продадут вам свой товар\n"\
						"Однако помните, что черезчур высокая цена\n"\
						"может привести вас к банкротству",
						"Сменить", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 37)
				{
					new queryyy[148],
						Cache: result,
						biz_name[64];
					mysql_format(mysql, queryyy, sizeof queryyy, "SELECT * FROM business WHERE typewetriki='%d'", businessid);
					result = mysql_query(mysql, queryyy, true);
					new rows = cache_num_rows();
					if(!rows)
						return SendClientMessage(playerid, 0x999999FF, "У вас не одного клиента.");
					string_dialog = "Название \t Потребление\n";
					for(new i = 0; i < rows; i ++)
					{
						cache_get_field_content(i, "name", biz_name);
						format(queryyy, sizeof queryyy, "{FFFFFF}%s<t>17 кВт\n", biz_name);
						strcat(string_dialog, queryyy);
					}
					Dialog
					(
						playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_TABLIST_HEADERS,
						"{FFCD00}Список клиентов",
						string_dialog,
						"", "Назад"
					);
					cache_delete(result);
					return 1;
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_FUEL_STATION_BUY_FUEL_PR, DIALOG_STYLE_INPUT,
						"{33AACC}Закупочная цена",
						"{FFFFFF}Закупочная цена определяет привлекательность Вашей\n"\
						"заправки для развозчиков топлива. Чем выше эта цена,\n"\
						"тем охотнее развозчики будут выполнять Ваши заказы\n\n"\
						"{669966}Введите значение от 2 до 10 рублей",
						"Изменить", "Назад"
					);
				}
			}
			case BIZ_OPERATION_PROD_ORDER: // заказать продукты
			{
				if(GetBusinessData(businessid, B_TYPE) != 36)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_ORDER_PRODS, DIALOG_STYLE_INPUT,
						"{33AACC}Заказ продуктов",
						"{FFFFFF}Сколько продуктов Вы хотите заказать?",
						"Заказать", "Назад"
					);
				}
				else
				{
					new fmt_str[80];
					new buffer[14 + 1];
					new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
					string_dialog[0] = EOS;
					for(new idx; idx < sizeof(g_business_improvements); idx ++)
					{
						format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_business_improvements[idx][I_NAME]);
						switch(idx)
						{
							case 0,1,4:
								buffer = "\t";
							case 5:
								buffer = "\t\t";
							default:
								buffer[0] = 0;
						}
						if(buffer[0] != EOS)
							strcat(fmt_str, buffer);
						if(i_level > idx)
						{
							strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
							strcat(fmt_str, "Куплено");
						}
						else
						{
							if(i_level < idx)
							{
								strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
							}
							strcat(string_dialog, fmt_str);
							valfmt(buffer, g_business_improvements[idx][I_PRICE]);
							format(fmt_str, sizeof fmt_str, "%s руб", buffer);
							if(i_level == idx)
								strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
						}
						strcat(fmt_str, "\n");
						strcat(string_dialog, fmt_str);
					}
					Dialog(playerid, DIALOG_BIZ_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Доступные улучшения", string_dialog, "Купить", "Назад");
				}
			}
			case BIZ_OPERATION_PROD_ORDER_CANCEL: // отменить заказ
			{
				if(GetBusinessData(businessid, B_TYPE) != 36)
				{
					new order_id = GetBusinessData(businessid, B_ORDER_ID);
					if(order_id != -1)
					{
						string_dialog[0] = EOS;
						format
						(
							string_dialog, sizeof string_dialog,
							"{FFFFFF}Вы действительно хотите отменить заказ?\n"\
							"На счет бизнеса будет возвращено {FFCD00}%d руб",
							GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
						);
						Dialog(playerid, DIALOG_BIZ_ORDER_CANCEL, DIALOG_STYLE_MSGBOX, "{33AADD}Отмена заказа", string_dialog, "Да", "Нет");
					}
					else
					{
						SendClientMessage(playerid, 0xFF6600FF, "Вы не оформляли заказ продуктов для своего бизнеса");
						CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
					}
				}
				else
				{
					ShowBusinessProfit(playerid, businessid);
				}
			}
			case BIZ_OPERATION_PROFIT_STATS: // финансовая статистика
			{
				if(GetBusinessData(businessid, B_TYPE) != 36)
				{
					ShowBusinessProfit(playerid, businessid);
				}
				else EnablePlayerGPS(playerid, 55, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z), "Местоположение Вашего бизнеса отмечено на GPS");
			}
			case BIZ_OPERATION_IMPROVEMENTS: // Улучшения
			{
				if(GetBusinessData(businessid, B_TYPE) != 36)
				{
					new fmt_str[80];
					new buffer[14 + 1];
					new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
					string_dialog[0] = EOS;
					for(new idx; idx < sizeof(g_business_improvements); idx ++)
					{
						format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_business_improvements[idx][I_NAME]);
						switch(idx)
						{
							case 0,1,4:
								buffer = "\t";
							case 5:
								buffer = "\t\t";
							default:
								buffer[0] = 0;
						}
						if(buffer[0] != EOS)
							strcat(fmt_str, buffer);
						if(i_level > idx)
						{
							strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
							strcat(fmt_str, "Куплено");
						}
						else
						{
							if(i_level < idx)
							{
								strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
							}
							strcat(string_dialog, fmt_str);
							valfmt(buffer, g_business_improvements[idx][I_PRICE]);
							format(fmt_str, sizeof fmt_str, "%s руб", buffer);
							if(i_level == idx)
								strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
						}
						strcat(fmt_str, "\n");
						strcat(string_dialog, fmt_str);
					}
					Dialog(playerid, DIALOG_BIZ_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Доступные улучшения", string_dialog, "Купить", "Назад");
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "В разработке!");
				}
			}
			case BIZ_OPERATION_PRICE_ELECTR: 
			{
				new fmt_text[148],
					type,
					b = businessid;
				if(b == 3 || b == 4 || b == 5 || b == 9 || b == 20 || b == 22 || b == 23 || b == 24 || b == 25 || b == 26 || b == 28 || b == 29 || b == 35 || b == 41 || b == 42 || b == 53 || b == 56 || b == 59 ||  b == 60 ||  b == 61 ||  b == 62 ||  b == 63 ||  b == 64 ||  b == 65 ||  b == 68 || b == 69 || b == 70 || b == 71 || b == 72 || b == 73 || b == 74 || b == 75 || b == 78 || b == 79 || b == 84 || b == 85 || b == 87 || b == 88 || b == 90 || b == 91 || b == 92)
					type = 1;
				if(b == 1 || b == 2 || b == 6 || b == 7 || b == 11 || b == 12 || b == 14 || b == 18 || b == 30 || b == 31 || b == 36 || b == 37 || b == 39 || b == 40 || b == 43 || b == 44 || b == 54 || b == 55 || b == 57 ||  b == 58 ||  b == 67 ||  b == 86 ||  b == 89)
					type = 5;
				else
					type = 3;
				string_dialog = "Поставщик \t Нагрузка \t Цена";
				for(new i; i < g_business_loaded; i ++)
				{
					if(GetBusinessData(i, B_TYPE) != 36) continue;
					if(GetBusinessData(i, B_ELECTRICITY) != type && GetBusinessData(i, B_ELECTRICITY) != type + 1) continue;
					format
					(
						fmt_text, sizeof fmt_text, 
						"\n{FFFFFF}1. Ветряная электростанция №%d %s \t %d шт(Нагрузка %d) \t %d руб за кВт\n", 
						GetBusinessData(i, B_ELECTRICITY),
						GetBusinessData(i, B_IZNOS) > 0 ? "{66CC33}Исправен" : "{CC3333}Сломан",
						GetBusinessData(i, B_TYPEWETRIKI),
						GetBusinessData(i, B_TYPEWETRIKI),
						GetBusinessData(i, B_PROD_PRICE)
					);
					strcat(string_dialog, fmt_text);
				}
				Dialog(playerid, DIALOG_BIZ_ELECT, DIALOG_STYLE_TABLIST_HEADERS, "Смена поставщика энергии", string_dialog, "Выбрать", "Закрыть");
			}
		}
	}
	return 1;
}

stock ShowBusinessProfit(playerid, businessid)
{
	new query[284],
	Cache: result;
	new time = gettime();
	new cur_day = time - (time % 86400);
	new start_day = cur_day - (86400 * 20);
	mysql_format(mysql, query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, COUNT(*), SUM(money) as total FROM business_profit WHERE business_id=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetBusinessData(businessid, B_SQL_ID), start_day, cur_day);
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
	string_dialog[0] = EOS;
	new fmt_str[94];
	if(rows)
	{
		string_dialog = "{b9b9b1}Дата\t\t\tПрибыль\t\t\tУникальных клиентов\n\n{FFFFFF}";
		for(new i; i < rows; i ++)
		{
			cache_get_row(i, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string_dialog, fmt_str);
			format(fmt_str, sizeof fmt_str, "\t\t\t{6ad481}%s руб\t\t\t{dcd07a}%d человек.\n{FFFFFF}", formatInt(cache_get_row_int(i, 2)), cache_get_row_int(i, 1));
			strcat(string_dialog, fmt_str);
		}
	}
	else string_dialog = "{FFFFFF}Финансовая статистика Вашего бизнеса еще не сформирована";
	Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{FFFFFF}Доход бизнеса за 20 дней", string_dialog, "<< Назад", "");
	cache_delete(result);
}
public: PresentFlowersToPlayer(playerid, to_player)
{
	SetPlayerAmmo(playerid, WEAPON_FLOWER, 0);
	GiveWeapon(to_player, WEAPON_FLOWER, 1);
}

public: UpdateFactoryDesk(deskid)
{
	new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "Рабочее место №%d\n%s", deskid + 1, factory_desk[deskid][FD_USED] ? ("{FF6600}Занято") : ("{33CC00}Свободно"));
	UpdateDynamic3DTextLabelText(factory_desk[deskid][FD_LABEl], 0xFFFFFFEE, fmt_str);
}

public: T_RemovePlayerAttachedObject(playerid, slot)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
		RemovePlayerAttachedObject(playerid, slot);
	}
}
#if defined RAND_WEATHER
public: SetRandomWeather()
{
	new fmt_str[64];
	new rand = random(sizeof g_weather);
	SendClientMessageToAll(0x3399FFFF, "[Прогноз погоды]");
	format(fmt_str, sizeof fmt_str, "В области ожидается %s {99CC00}(+%d °С)", g_weather[rand][W_NAME], g_weather[rand][W_DEGREES]);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);
	SetWeather(g_weather[rand][W_ID]);
}

#endif
public: PlayerOwnableCarInit(playerid, idcar)
{
	new index;
	new vehicleid = -1;
	while(vehicleid < MAX_VEHICLES-1)
	{
		vehicleid ++;
		index = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) continue;
		if(GetOwnableCarData(index, OC_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		break;
	}
}

public: SaveOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		str_q[0] = EOS;
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new Float: health;
		GetVehicleHealth(vehicleid, health);
		format
		(
			str_q, sizeof str_q,
			"UPDATE ownable_cars SET "\
			"pos_x=%f,"\
			"pos_y=%f,"\
			"pos_z=%f,"\
			"angle=%f,"\
			"status=%d,"\
			"alarm=%d,"\
			"key_in=%d,"\
			"gidra=%d,"\
			"nitro=%d,"\
			"mileage=%f,"\
			"health=%f,"\
			"rent=%d,"\
			"rentp=%d,"\
			"pnewma_1=%f,"\
			"pnewma_2=%f,"\
			"pnewma=%d,"\
			"engineacceleration=%f,"\
			"maxgearvelocity=%f,"\
			"sab=%d,"\
			"sab_x=%f,"\
			"sab_y=%f,"\
			"sab_z=%f,"\
			"maslo=%d,"\
			"maslo_filter=%d,"\
			"filter=%d,"\
			"vinil=%d,"\
			"fuel=%f,"\
			"iznos=%d,"\
			"gryaz=%f,"\
			"number_status=%d,"\
			"number='%s' "\
			"WHERE id=%d LIMIT 1",
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z),
			GetOwnableCarData(index, OC_ANGLE),
			GetVehicleParam(vehicleid, V_LOCK),
			GetVehicleParam(vehicleid, V_ALARM),
			GetOwnableCarData(index, OC_KEY_IN),
			GetOwnableCarData(index, OC_GIDRA),
			GetOwnableCarData(index, OC_NITRO),
			GetVehicleData(vehicleid, V_MILEAGE),
			GetVehicleData(vehicleid, V_HEALTH),
			GetVehicleData(vehicleid, V_RENT),
			GetVehicleData(vehicleid, V_RENTP),
			GetOwnableCarData(index, OC_PNEWMA_1),
			GetOwnableCarData(index, OC_PNEWMA_2),
			GetOwnableCarData(index, OC_PNEWMA),
			GetOwnableCarData(index, OC_ENGINE_ACCELERATION),
			GetOwnableCarData(index, OC_MAX_VELOCITY),
			GetOwnableCarData(index, OC_SAB),
			GetOwnableCarData(index, OC_SAB_X),
			GetOwnableCarData(index, OC_SAB_Y),
			GetOwnableCarData(index, OC_SAB_Z),
			GetOwnableCarData(index, OC_MASLO),
			GetOwnableCarData(index, OC_MASLO_FILTER),
			GetOwnableCarData(index, OC_FILTER),
			GetOwnableCarData(index, OC_VINIL),
			GetVehicleData(vehicleid, V_FUEL),
			GetVehicleData(vehicleid, V_IZNOS),
			GetVehicleData(vehicleid, V_GRYAZ),
			GetOwnableCarData(index, OC_NUMBER_STATUS),
			GetOwnableCarData(index, OC_NUMBER),
			GetOwnableCarData(index, OC_SQL_ID)
		);
		mysql_query(mysql, str_q, false);
        return mysql_errno();
	}
	return -1;
}

public: SaveRentCar(vehicleid)
{
	if(IsARentCar(vehicleid))
	{
		new query[700];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new Float: health;
		GetVehicleHealth(vehicleid, health);
		mysql_format(mysql, query, sizeof query, "UPDATE arenda_cars SET milleage=%f, iznos=%f, maslo=%d WHERE id=%d", GetVehicleData(vehicleid, V_MILEAGE),GetRentCarData(index, R_IZNOS),GetRentCarData(index, R_MASLO),GetRentCarData(index, R_SQL_ID));
		mysql_query(mysql, query, false);
		return mysql_errno();
	}
	return -1;
}

public: SaveCarsharingCar(vehicleid)
{
	if(IsACarshCar(vehicleid))
	{
		new query[700];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new Float: health;
		GetVehicleHealth(vehicleid, health);
		mysql_format(mysql, query, sizeof query, "UPDATE carsharing_cars SET milleage=%f, iznos=%f, maslo=%d WHERE id=%d", GetVehicleData(vehicleid, V_MILEAGE),GetCarshCarData(index, OC_IZNOS),GetCarshCarData(index, OC_MASLO),GetCarshCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);
		return mysql_errno();
	}
	return -1;
}

stock GetCoordVehicle(vehicleid, type, &Float:x, &Float:y, &Float:z, &Float:angle, &Float:distance) // by Essle (багажник / капот)
{
    GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, x, distance, z); // узнаем длину машины
    distance = distance / 2 + 0.1; // полученную длину делим на два
    GetVehiclePos(vehicleid, x, y, z); // узнаем координаты авто
    GetVehicleZAngle(vehicleid, angle); // узнаем угол поворота авто
	switch(type)
	{
		case VEHICLE_COORD_TYPE_BOOT: // багажник
		{
			x += (distance * floatsin(-angle+180, degrees)); // вычитаем координату x бaгажника
			y += (distance * floatcos(-angle+180, degrees)); // вычитаем координату y бaгажника
		}
		case VEHICLE_COORD_TYPE_BONNET: // капот
		{
			x -= (distance * floatsin(-angle+180, degrees)); // вычитаем координату x капота
			y -= (distance * floatcos(-angle+180, degrees)); // вычитаем координату y капота
		}
		default:
		{
			return 0;
		}
	}
	return 1;
}

stock GetVehicleTurnSignalPos(vehicleid, type, &Float:x, &Float:y)
{
	new Float: size_x,
		Float: size_y,
		Float: size_z;
	GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, size_x, size_y, size_z);
	switch(type)
	{
		case 1:
		{
			x = -(size_x / 2) + 0.3;
			y = size_y / 2 - 0.5;
		}
		case 2:
		{
			x = -(size_x / 2) + 0.3;
			y = -(size_y / 2) + 0.4;
		}
		case 3:
		{
			x = size_x / 2 - 0.3;
			y = size_y / 2 - 0.5;
		}
		case 4:
		{
			x = size_x / 2 - 0.3;
			y = -(size_y / 2) + 0.4;
		}
	}
	return 1;
}

stock SetVehicleToHotelRespawn(hotelid, vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		new free_slot = GetHotelFreePark(hotelid);
		if(free_slot != -1)
		{
			g_hotel_car_park_pos[hotelid][free_slot][HC_VEHICLE_ID] = vehicleid;
			SetVehiclePos(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_POS_X], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Y], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Z]);
			SetVehicleZAngle(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_ANGLE]);
			return 1;
		}
	}
	return 0;
}

stock GetHotelFreePark(hotelid)
{
	new vehicleid, slot = -1;
	for(new idx; idx < sizeof(g_hotel_car_park_pos[]); idx ++)
	{
		vehicleid = g_hotel_car_park_pos[hotelid][idx][HC_VEHICLE_ID];
		if(GetVehicleDistanceFromPoint(vehicleid, g_hotel_car_park_pos[hotelid][idx][HC_POS_X], g_hotel_car_park_pos[hotelid][idx][HC_POS_Y], g_hotel_car_park_pos[hotelid][idx][HC_POS_Z]) >= 8.0) continue;
		slot = idx;
		break;
	}
	return slot;
}

stock ShowOwnableCarPass(playerid, vehicleid)
{
	new model_id = GetVehicleData(vehicleid, V_MODELID);
	if(model_id && IsAOwnableCar(vehicleid))
	{
		new fmt_str[500];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new numberss[25];
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 0) format(numberss, sizeof numberss,"[номера нет]");
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 1) format(numberss, sizeof numberss,"[RU %s %s]",GetOwnableCarData(index, OC_NUMBER),GetOwnableCarData(index, OC_REGION));
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 2) format(numberss, sizeof numberss,"[KZ %s %s]",GetOwnableCarData(index, OC_NUMBER),GetOwnableCarData(index, OC_REGION));
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 3) format(numberss, sizeof numberss,"[BY %s%s]",GetOwnableCarData(index, OC_NUMBER),GetOwnableCarData(index, OC_REGION));
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 4) format(numberss, sizeof numberss,"[UA %s%s]",GetOwnableCarData(index, OC_NUMBER),GetOwnableCarData(index, OC_REGION));
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 5) format(numberss, sizeof numberss,"[CUS %s]",GetOwnableCarData(index, OC_NUMBER));
		format
		(
			fmt_str, sizeof fmt_str,
			"[[5,[\"%s\",\"%s\",\"%s\",%d,\"95\",\"Черный\",%d]],[6,[\"%s\",[[\"%s\",%d,%d]]]]]",
			GetVehicleInfo(model_id, VI_NAME),
			GetPlayerNameEx(GetPVarInt(playerid, "owenrname")),
			numberss,
			GetVehicleInfo(model_id, VI_PRICE),
			GetVehicleData(vehicleid, V_IZNOS),
			GetVehicleInfo(model_id, VI_NAME),
			GetPlayerNameEx(playerid),
			GetOwnableCarData(index, OC_SQL_ID),
			(GetVehicleInfo(model_id, VI_TYPE) + 1)
		);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Docs");
		BitStream_2(playerid, s_CefInterface, t_CefShow, "Docs",fmt_str);
		return 1;
	}
	return 0;
}

stock ShowShin(playerid, vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new fmt_str[500];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Износ передней левой шины:\t{3399FF}%.3f%%\n"\
			"{FFFFFF}Износ задней левой шины:\t\t{3399FF}%.3f%%\n"\
			"{FFFFFF}Износ передней правой шины:\t{3399FF}%.3f%%\n"\
			"{FFFFFF}Износ задней правой шины:\t\t{3399FF}%.3f%",
			GetOwnableCarData(index, OC_KOLESO_1),
			GetOwnableCarData(index, OC_KOLESO_2),
			GetOwnableCarData(index, OC_KOLESO_3),
			GetOwnableCarData(index, OC_KOLESO_4)
		);
		Dialog(playerid, DIALOG_REPLACE_TIRE, DIALOG_STYLE_LIST, "{ffffff}Выберите шину", fmt_str, "Закрыть", "");
		return 1;
	}
	return 0;
}

stock ShowOwnableCarLoadDialog(playerid, id, bool: show_menu = false)
{
	SetPVarInt(playerid, "ownablecar_id", id);
	if(show_menu)
		SetPVarInt(playerid, "show_menu", 1);
	Dialog
	(
		playerid, DIALOG_OWNABLE_CAR_LOAD, DIALOG_STYLE_LIST,
		"{FFD83D}Система управления транспортом",
		"{FFFFFF}1. Отметить транспорт на GPS {FF6600}(300 руб)\n"\
		"{888888}2. Загрузить транспорт\n"\
		"{FFFFFF}3. Доставить транспорт на штрафстоянку {FF6600}(5000 руб)",
		"Выбрать", "Закрыть"
	);
}

stock IsAOwnableCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
			return 1;
		}
	}
	return 0;
}

stock IsVehicleSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!IsPlayerInVehicle(i, vehicleid)) continue;
		else if(GetPlayerVehicleSeat(i) != seatid) continue;
		return 1;
	}
	return 0;
}

stock IsTrailerAttachedToAnyVehicle(trailerid)
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
		if(!IsValidVehicle(i)) continue;
		if(GetVehicleTrailer(i) == trailerid)
			return 1;
	}
	return 0;
}

stock ShowPlayerHotelRoomPayForRent(playerid)
{
	new hotel_id = GetPlayerInHotelID(playerid);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		new rent_days = GetElapsedTime(GetHotelData(hotel_id, room_id, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
		if(rent_days < 0)
		{
			rent_days = 0;
		}
		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Оплаченных дней:\t\t%d из 7\n"\
			"Ежедневная плата:\t\t1000 руб\n\n"\
			"На сколько дней Вы хотите оплатить номер?",
			rent_days
		);
		Dialog(playerid, DIALOG_HOTEL_PAY_FOR_ROOM, DIALOG_STYLE_INPUT, "{66CC99}Оплата проживания в отеле", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerHotelClientMenu(playerid, hotel_id)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		Dialog
		(
			playerid, DIALOG_HOTEL_CLIENT_MENU, DIALOG_STYLE_LIST,
			"{66CC99}Меню клиента",
			"1. Оплатить проживание\n"\
			"2. Информация о транспорте\n"\
			"3. Отметить транспорт на GPS\n"\
			"4. Подогнать транспорт к отелю (1000 руб)\n"\
			"5. Продать транспорт\n"\
			"6. Выселиться из отеля",
			"Выбрать", "Назад"
		);
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете в этой гостинице");
		ShowPlayerHotelDialog(playerid);
	}
}

stock GetHotelFreeRoom(hotelid)
{
	new free_room = -1;
	if(0 <= hotelid <= MAX_HOTELS-1)
	{
		new max_rooms = g_hotel_rooms_loaded[hotelid] / 12;
		for(new idx; idx < max_rooms; idx ++)
		{
			if(IsHotelRoomOwned(hotelid, idx)) continue;
			free_room = idx;
			break;
		}
	}
	return free_room;
}

stock ExitPlayerFromHotelRoom(playerid)
{
	new room_id = GetPlayerData(playerid, P_IN_HOTEL_ROOM);
	if(room_id != -1)
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 490.0204, -992.8733, 1002.9255))
			{
				new floor = (room_id / 12) + 1;
				new index = (room_id % 12) / 5;
				SetPlayerPosEx
				(
					playerid,
					g_hotel_room_exit_pos[index][0],
					g_hotel_room_exit_pos[index][1],
					g_hotel_room_exit_pos[index][2],
					180.0,
					floor,
					((hotel_id + 1) * 200) + (floor + 1000)
				);
				SetPlayerData(playerid, P_IN_HOTEL_ROOM, -1);
			}
		}
	}
}

stock EnterPlayerToHotelRoom(playerid, hotel_id, room_id)
{
	if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) == -1)
	{
		if(!GetHotelData(hotel_id, room_id, H_STATUS) || GetPlayerAccountID(playerid) == GetHotelData(hotel_id, room_id, H_OWNER_ID))
		{
			SetPlayerPosEx(playerid, 491.5204, -992.8733, 1002.9255, 0.0, 6, ((hotel_id + 1) * 400) + (room_id + 2000));
			SetPlayerData(playerid, P_IN_HOTEL_ROOM, room_id);
			SetPlayerData(playerid, P_IN_HOTEL_FLOOR, (room_id / 12) + 1);
		}
		else GameText(playerid, "~r~Закрыто", 2500, 2);
	}
	return 1;
}

stock ShowPlayerHotelFloorsInfo(playerid, hotel_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];
	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx; idx < max_floors; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d этаж\n", idx + 1);
		strcat(string, fmt_str);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_SELECT, DIALOG_STYLE_LIST, "{FFD83D}Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];
	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx, count; idx <= max_floors; idx ++)
	{
		if(idx == floor_id) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "Выход\n");
		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_LIFT, DIALOG_STYLE_LIST, "{FFD83D}Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorInfo(playerid, hotel_id, floor_id)
{
	if(0 <= hotel_id <= MAX_HOTELS-1)
	{
		if(0 <= floor_id <= MAX_HOTEL_FLOORS-1)
		{
			new string[512];
			new fmt_str[45 + 1];
			new rent_time;
			new time = gettime();
			new s_idx = floor_id * 12;
			new e_idx = s_idx + 12;
			string = "Номер\t\tСтатус\t\tОплаченные дни\tПостоялец\n\n{FFFFFF}";
			while(s_idx < e_idx)
			{
				if(IsHotelRoomOwned(hotel_id, s_idx))
				{
					rent_time = GetElapsedTime(GetHotelData(hotel_id, s_idx, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS);
					if(rent_time < 0)
						rent_time = 0;
					format(fmt_str, sizeof fmt_str, "%d\t\t%s\t\t%d\t\t%s\n", (s_idx % 12) + 1, rent_time > 0 ? ("Занят\t") : ("Выселение"), rent_time, GetHotelData(hotel_id, s_idx, H_OWNER_NAME));
				}
				else format(fmt_str, sizeof fmt_str, "%d\t\tСвободен\n", (s_idx % 12) + 1);
				strcat(string, fmt_str);
				s_idx ++;
			}
			format(fmt_str, sizeof fmt_str, "{66CC99}Список номеров на %d этаже", floor_id + 1);
			Dialog(playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX, fmt_str, string, "Назад", "Закрыть");
		}
	}
}

stock ShowPlayerStats(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;
	new rank_value[3] = "—";
	str_q[0] = EOS;
    if(1 <= GetPlayerTeamEx(playerid) <= 10)
	{
		if(1 <= GetPlayerJob(playerid) <= 10)
			valstr(rank_value, GetPlayerJob(playerid));
		else
			rank_value = "1";
	}
	format
	(
		str_q, sizeof str_q,
		"{FFFFFF}Имя:<t><t><t><t>{0099FF}%s\n"\
		"{FFFFFF}Уровень:<t><t><t>%d\n"\
		"Очки опыта:<t><t><t>%d из %d\n"\
		"Уровень RolePlay:<t><t><t>%d\n"\
		"Номер телефона:<t><t>%d\n"\
		"На счету телефона:<t><t>%d руб\n"\
		"Законопослушность:<t><t>%d\n"\
		"Уровень розыска:<t><t>%d\n"\
		"Уровень улучшений:<t><t>%d\n"\
		"Сила:<t><t><t><t>%d\n"\
		"Пол:<t><t><t><t>%s\n"\
		"%s:<t><t><t>%s\n"\
		"Военный билет:<t><t><t>%s\n\n"\
		"%s"\
		"Работа / должность:<t><t>%s\n"\
		"Ранг:<t><t><t><t>%s\n\n"\
		"Проживание:<t><t><t>%s\n"\
		"Бизнесов:<t><t><t>%s\n"\
		"Игровой статус:<t><t>%s\n",
		GetPlayerNameEx(playerid),
		GetPlayerLevel(playerid),
		GetPlayerExp(playerid),
		GetExpToNextLevel(playerid),
		RPPoint[playerid],
		GetPlayerPhone(playerid),
		GetPlayerData(playerid, P_PHONE_BALANCE),
		GetPlayerData(playerid, P_LAW_ABIDING),
		GetPlayerSuspect(playerid),
		GetPlayerData(playerid, P_IMPROVEMENTS),
		GetPlayerData(playerid, P_POWER),
		GetPlayerSexName(playerid),
		GetPlayerSex(playerid) ? ("Замужем за") : ("Женат на"),
		GetPlayerData(playerid, P_WIFE_NAME),
		GetPlayerData(playerid, P_VOEN) ? ("Есть") : ("{A9A9A9}Нет{FFFFFF}"),
		GetPlayerTeamStats(playerid),
		GetPlayerJobAndRankName(playerid),
		rank_value,
		GetPlayerHouseName(playerid),
		GetPlayerBizName(playerid),
		GetPlayerGameStatus(playerid)
	);
	return Dialog(to_player, DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX, "{FFD83D}Статистика игрока", str_q, "Назад", "Закрыть");
}

stock AddCommasToInt(number, const delimiter[2] = ".")
{
    new int_string[10+3+1+1];
    format(int_string, sizeof(int_string), "%d", number >= 0 ? number : -number);//Если число положительное - запишем его в обычном виде. Иначе - добавим ещё один минус, дабы сделать его положительным
    new value = strlen(int_string);// Запишем в value размер строки с числом
    switch(value)
    {
        case 4..6: // Если переданное число содержит от 4-х до 6-и символов, добавим один разделитель
                    strins(int_string, delimiter, value-3,1);
        case 7..9: // Если от 7-и до 9-и - два разделителя
                    strins(int_string, delimiter, value-3,1),
                    strins(int_string, delimiter, value-6,1);
        case 10..12: // Если от 10-и до 12-и - три разделителя
                    strins(int_string, delimiter, value-3,1),
                    strins(int_string, delimiter, value-6,1),
                    strins(int_string, delimiter, value-9,1);
    }  
    if(number < 0) strins(int_string, "-", 0); // Если число отрицательное, вернём ему минус
    return int_string;
}

stock ShowPlayerHotelDialog(playerid)
{
	if(GetPlayerInHotelID(playerid) != -1)
	{
		new businessid = GetPlayerInBiz(playerid);
		Dialog
		(
			playerid, DIALOG_HOTEL, DIALOG_STYLE_LIST,
			GetBusinessData(businessid, B_NAME),
			"1. Список номеров\n"\
			"2. Регистрация\n"\
			"3. Меню клиента",
			"Выбрать", "Закрыть"
		);
	}
}

stock GetPlayerInHotelID(playerid)
{
	new hotel_id = -1;
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_HOTEL)
		{
			switch(businessid)
			{
				case 30:
					hotel_id = 0;
				case 31:
					hotel_id = 1;
				case 32:
					hotel_id = 2;
				default:
					hotel_id = -1;
			}
		}
	}
	return hotel_id;
}

stock SetPlayerFactoryDeskUse(playerid, deskid, bool: status)
{
	if(!(0 <= deskid <= sizeof factory_desk-1)) return ;
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(status)
		{
			if(!factory_desk[deskid][FD_USED] && GetPlayerData(playerid, P_FACTORY_USE_DESK) == -1)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATE_P)
				{
					factory_desk[deskid][FD_USED] = true;
					new Float: angle;
					new take_metall = GetPVarInt(playerid, "factory_take_metall");
					new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);
					SetPlayerData(playerid, P_FACTORY_USE_DESK, deskid);
					TogglePlayerFactoryCP(playerid, false);
					if(!((deskid / 9) % 2))
					{
						angle = 180.0;
					}
					else angle = 0.0;
					SetPlayerFacingAngle(playerid, angle);
					ApplyAnimationEx(playerid, "OTB", "betslp_loop", 4.1, 1, 0, 0, 1, 20_000, 0, USE_ANIM_TYPE_NONE - 1);
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18644, A_OBJECT_BONE_RIGHT_HAND, 0.06, 0.02, 0.0, 30.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 18635, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.06, -0.1, 180.0, 80.0, 0.0, 1.0, 1.0, 1.0, 0);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATED);
					SetTimerEx("CreateFactoryProd", 18_000, false, "i", playerid);
					SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuel - (take_metall * 6));
					UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);
				}
				else
				{
					if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_PUT_PROD)
						SendClientMessage(playerid, 0x999999FF, "Возьмите металл находящийся в коробке на полках");
				}
			}
		}
		else
		{
			if(factory_desk[deskid][FD_USED])
			{
				if(GetPlayerData(playerid, P_FACTORY_USE_DESK) == deskid)
				{
					TogglePlayerFactoryCP(playerid, true);
					SetPlayerData(playerid, P_FACTORY_USE_DESK, -1);
					factory_desk[deskid][FD_USED] = false;
				}
			}
		}
		UpdateFactoryDesk(deskid);
	}
}

stock AddBan(user_id, time, days, ip[], description[], admin_name[])
{
	new query[200];
	new c_time = time-(time % 86400);
	mysql_format(mysql, query, sizeof query, "INSERT INTO ban_list (user_id,time,ban_time,ip,description,admin) VALUES (%d,%d,%d,'%e','%e','%e')", user_id, c_time, c_time + (days * 86400), ip, description, admin_name);
	mysql_query(mysql, query, false);
	return !mysql_errno();
}

stock GivePlayerDrinkItem(playerid, itemid)
{
	new action_id = -1;
	switch(itemid+1)
	{
		case 1: // Лимонад
		{
			action_id = 23;
		}
		case 2, 6..7: // Пиво, Коньяк, Виски
		{
			action_id = 20;
		}
		case 3..5, 8: // Вино, Шампанское, Водка, Абсент
		{
			action_id = 22;
		}
		case 9: // Закуска
		{
			if(GetPlayerData(playerid, P_DRINK_STEP))
			{
				SetPlayerData(playerid, P_DRINK_STEP, 0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 10213, A_OBJECT_BONE_RIGHT_HAND, 0.08, 0.05, 0.06, 180.0, 270.0, -30.0, 1.0, 1.0, 1.0, 0, 0);
			SetPlayerData(playerid, P_SNACK, true);
		}
		case 10: // Сигара
		{
			action_id = 21;
		}
	}
	if(action_id != -1)
	{
		if(GetPlayerData(playerid, P_SNACK))
		{
			SetPlayerData(playerid, P_SNACK, false);
			T_RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		}
		SetPlayerData(playerid, P_DRINK_STEP, 7);
		SetPlayerSpecialAction(playerid, action_id);
	}
	return 1;
}

stock FactoryPlayerDrop(playerid, bool: reject = true)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(reject)
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_CREATED) return ;
			SetPlayerChatBubble(playerid, "Брак", 0xFF0000FF, 10.0, 1500);
			ApplyAnimationEx(playerid, "OTB", "WTCHRACE_LOSE", 4.1, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
		}
		else
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_DROP_P) return ;
			SetPlayerTempJobCheckAnim(playerid, false);
			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
			ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			SendClientMessage(playerid, 0xFF6600FF, "Вы уронили продукт");
		}
		new bad_prods = GetPVarInt(playerid, "factory_bad_prods") + 1;
		SetPVarInt(playerid, "factory_bad_prods", bad_prods);
		GameText(playerid, "~r~~h~Ошибка", 4000, 2);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
	}
}

stock ShowPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(GetPlayerTeamEx(playerid) <= 0)
		{
			new select_skin = GetPlayerSelectSkin(playerid);
			if(select_skin == -1)
			{
				new type = GetBusinessData(businessid, B_INTERIOR);
				new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);
				new
					Float: cam_x, Float: cam_y, Float: cam_z,
					Float: v_cam_x, Float: v_cam_y, Float: v_cam_z;
				GetPlayerCameraPos(playerid, cam_x, cam_y, cam_z);
				GetPlayerCameraFrontVector(playerid, v_cam_x, v_cam_y, v_cam_z);
				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, 1992.2747,1899.1699,1001.0000,316.4599, interior, playerid + 32, false);
				InterpolateCameraPos(playerid, cam_x, cam_y, cam_z, 1993.2646,1900.5430,1001.5000, 1000, CAMERA_MOVE);
				InterpolateCameraLookAt(playerid, cam_x + floatmul(v_cam_x, 5.0), cam_y + floatmul(v_cam_y, 5.0), cam_z + floatmul(v_cam_z, 5.0), 1992.6815,1898.9471,1001.3500, 2000, CAMERA_MOVE);
				ShowPlayerSelectPanelSkin(playerid);
			}
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы состоите в организации, купить новую внешность нельзя");
	}
}

public: HidePlayerSelectPanelPriceTimer(playerid)
{
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	return 1;
}

stock CreateTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] == -1)
		{
			g_teleport_object[playerid][idx] = CreatePlayerObject(playerid, 3034, 0.0, 0.0, -2000.0, 0.0, 0.0, 0.0);
		}
	}
}

stock DestroyTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] != -1)
		{
			DestroyPlayerObject(playerid, g_teleport_object[playerid][idx]);
			g_teleport_object[playerid][idx] = -1;
		}
	}
}

stock PlayerTeleportInit(playerid, Float: x, Float: y, Float: z, Float: angle)
{
	new Float: dist = -0.862;
	angle += 90.0; //прибавление угла; можно и отнимать
	for(new idx = 2; idx --; )
	{
		SetPlayerObjectPos(playerid, g_teleport_object[playerid][idx], x + dist * -floatsin(angle, degrees), y + dist * floatcos(angle, degrees), z - 1.02);
		SetPlayerObjectRot(playerid, g_teleport_object[playerid][idx], 90.0, 90.0, angle - 90.0);
		dist = floatabs(dist);
	}
}

stock GetOwnableCarBySqlID(sql_id, buffer[] = {0, 0, 0})
{
	buffer[2] = INVALID_VEHICLE_ID;
	for(buffer[0] = 1; buffer[0] < MAX_VEHICLES; buffer[0] ++)
	{
		if(!IsAOwnableCar(buffer[0])) continue;
		buffer[1] = GetVehicleData(buffer[0], V_ACTION_ID);
		if(GetOwnableCarData(buffer[1], OC_SQL_ID) != sql_id) continue;
		buffer[2] = buffer[0];
		break;
	}
	return buffer[2];
}

stock GetPlayerIDBySqlID(sql_id)
{
	new playerid = INVALID_PLAYER_ID;
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerAccountID(idx) != sql_id) continue;
		playerid = idx;
		break;
	}
	return playerid;
}

stock GetPlayerID(name[], playerid=INVALID_PLAYER_ID)
{
	sscanf(name, "u", playerid);
	return playerid;
}

stock GetPlayerSqlIDByName(name[])
{
	new sql_id = -1,
		query[80],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM `accounts` WHERE name = '%e' LIMIT 1", name);
	result = mysql_query(mysql, query, true);
	if(cache_num_rows()) 
		sql_id = cache_get_field_content_int(0, "id");
	cache_delete(result);
	return sql_id;
}

stock GetPlayerNameBySqlID(sql_id)
{
	new name[21],
		query[80],
		Cache: result;
	format(query, sizeof query, "SELECT * FROM `accounts` WHERE id=%d", sql_id);
	result = mysql_query(mysql, query, true);
	if(cache_num_rows())
  		cache_get_field_content(0, "name", name);
	cache_delete(result);
	return name;
}

stock UpdateHouse(houseid)
{
	if(GetHouseData(houseid, H_ENTRACE) == -1)
	{
		if(GetHouseData(houseid, H_ENTER_PICKUP))
			DestroyPickup(GetHouseData(houseid, H_ENTER_PICKUP));
		if(IsValidDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON)))
			DestroyDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON));
		SetHouseData(houseid, H_ENTER_PICKUP, CreatePickup((IsHouseOwned(houseid) ? 1272 : 1273), 23, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), 0, PICKUP_ACTION_TYPE_HOUSE, houseid));
		SetHouseData(houseid, H_MAP_ICON, CreateDynamicMapIcon(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), (IsHouseOwned(houseid) ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
	}
}

stock HouseHealthInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 1)
	{
		if(!GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			type = GetHouseData(houseid, H_TYPE);
			SetHouseData(houseid, H_HEALTH_PICKUP, CreatePickup(1240, 23, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_HOUSE_HEALTH, houseid));
		}
	}
	else
	{
		if(GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			DestroyPickup(GetHouseData(houseid, H_HEALTH_PICKUP));
			SetHouseData(houseid, H_HEALTH_PICKUP, 0);
		}
	}
}
stock HouseStoreInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
	{
		if(GetHouseData(houseid, H_STORE_LABEL) == Text3D:-1)
		{
			if(GetHouseData(houseid, H_STORE_X) == 0.0 && GetHouseData(houseid, H_STORE_Y) == 0.0 && GetHouseData(houseid, H_STORE_Z) == 0.0)
			{
				type = GetHouseData(houseid, H_TYPE);
				SetHouseData(houseid, H_STORE_X, GetHouseTypeInfo(type, HT_STORE_POS_X));
				SetHouseData(houseid, H_STORE_Y, GetHouseTypeInfo(type, HT_STORE_POS_Y));
				SetHouseData(houseid, H_STORE_Z, GetHouseTypeInfo(type, HT_STORE_POS_Z));
			}
			SetHouseData(houseid, H_STORE_LABEL, CreateDynamic3DTextLabel("Шкаф", 0xFFFF00FF, GetHouseData(houseid, H_STORE_X), GetHouseData(houseid, H_STORE_Y), GetHouseData(houseid, H_STORE_Z) + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));
			CallLocalFunction("UpdateHouseStore", "i", houseid);
		}
	}
	else
	{
		if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
		{
			if(IsValidDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL)))
			{
				DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
				SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);
			}
		}
	}
}
stock SellHouse(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new houseid = GetPVarInt(playerid, "ownablehouse_id");
	if(houseid != -1)
	{
		if(GetPlayerData(playerid, P_ID_SPAWN) == houseid && GetPlayerData(playerid, P_SPAWN) == 1) SetPlayerData(playerid, P_ID_SPAWN, -1), UpdatePlayerDatabaseInt(playerid, "id_spawn", -1), SetPlayerData(playerid, P_SPAWN, 0), UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);
		new house_price = GetHouseData(houseid, H_PRICE);
		new house_percent = house_price / 100 * 70;
		new house_improvemnts_price = HouseImprovementsPrice(houseid);
		if(house_improvemnts_price)
			house_improvemnts_price = house_improvemnts_price / 100 * 70;
		new query[200];
		new return_money = (house_price - house_percent) + house_improvemnts_price;
		CallLocalFunction("EvictHouseRentersAll", "i", houseid);
		SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);
		SetHouseData(houseid, H_OWNER_ID,		0);
		if(to_player == INVALID_PLAYER_ID)
		{
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), return_money));
			BankLog(playerid, return_money, "Продажа дома");
			SetHouseData(houseid, H_IMPROVEMENTS,	0);
			SetHouseData(houseid, H_RENT_DATE,		0);
			SetHouseData(houseid, H_LOCK_STATUS,	false);
			format(query, sizeof query, "UPDATE accounts a,houses h SET a.bank=%s,a.house_type=-1,h.owner_id=0,h.lock=0 WHERE a.id=%d AND h.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);
			UpdateHouse(houseid);
			HouseHealthInit(houseid);
			HouseStoreInit(houseid);
			GivePlayerMoneyEx(playerid, 0, "Продажа дома государству", false, false);
			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой дом!");
			format(query, sizeof query, "Налог за продажу дома составил 70 процентов от его стоимости {99CC00}(%d руб)", house_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);
			format(query, sizeof query, "Вам было возвращено 30 процентов от стоимости купленных улучшений: {CCFF00}%d руб", house_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);
			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
			new entranceid = GetHouseData(houseid, H_ENTRACE);
			if(entranceid != -1)
			{
				CallLocalFunction("EntranceStatusInit", "i", entranceid);
			}
		}
		else
		{
			if(BuyPlayerHouse(to_player, houseid, true, price) == 1)
			{
				GivePlayerMoneyEx(playerid, price, "Продажа дома игроку");
				house_price = price;
				house_percent = 0;
			}
			else return 1;
		}
		format(query, sizeof query, "~g~+%d рублей~n~+%d рублей", (house_price - house_percent), house_improvemnts_price);
		GameText(playerid, query, 4000, 2);
	}
	return 1;
}
stock BuyPlayerHouse(playerid, houseid, bool: buy_from_owner = false, price = -1)
{
	if(!IsHouseOwned(houseid))
	{
		if(price <= 0)
			price = GetHouseData(houseid, H_PRICE);
		if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
		{
			new query[256];
			format(query, sizeof query, "UPDATE accounts a, houses h SET a.money=%s,a.house_type=%d,h.owner_id=%d WHERE a.id=%d AND h.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), -price), HOUSE_TYPE_HOME, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);
			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_HOME);
				SetHouseData(houseid, H_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetHouseData(houseid, H_IMPROVEMENTS, 	0);
				SetHouseData(houseid, H_STORE_X, 0.0);
				SetHouseData(houseid, H_STORE_Y, 0.0);
				SetHouseData(houseid, H_STORE_Z, 0.0);
				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;
				if(!buy_from_owner)
				{
					SetHouseData(houseid,	H_RENT_DATE,	rent_time);
					SetHouseData(houseid,	H_LOCK_STATUS,	false);
					new entranceid = GetHouseData(houseid, H_ENTRACE);
					if(entranceid != -1)
					{
						CallLocalFunction("EntranceStatusInit", "i", entranceid);
					}
				}
				else
				{
					if(GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetHouseData(houseid, H_RENT_DATE, rent_time);
					}
				}
				format(g_house[houseid][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				UpdateHouse(houseid);
				HouseHealthInit(houseid);
				HouseStoreInit(houseid);
				GivePlayerMoneyEx(playerid, -price, "Покупка дома", false, true);
				SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы приобрели дом");
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {3399FF}/home {66CC00}чтобы узнать о возможностях");
				format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);
				return 1;
			}
			else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 34)");
			return 0;
		}
		return 0;
	}
	return -1;
}
stock EnterPlayerToHouse(playerid, houseid)
{
	if(GetPlayerInHouse(playerid) == -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		SetPlayerPosEx
		(
			playerid,
			GetHouseTypeInfo(type, HT_ENTER_POS_X),
			GetHouseTypeInfo(type, HT_ENTER_POS_Y),
			GetHouseTypeInfo(type, HT_ENTER_POS_Z),
			GetHouseTypeInfo(type, HT_ENTER_POS_ANGLE),
			GetHouseTypeInfo(type, HT_INTERIOR),
			houseid + 2000
		);
		SetPlayerInHouse(playerid, houseid);
	}
}
stock ExitPlayerFromHouse(playerid, Float: radius = 3.0)
{
	new houseid = GetPlayerInHouse(playerid);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
		{
			SetPlayerInHouse(playerid, -1);
			new entranceid = GetHouseData(houseid, H_ENTRACE);
			if(entranceid != -1)
			{
				new floor = GetHouseData(houseid, H_FLAT_ID) / 4 + 1;
				type = GetHouseData(houseid, H_FLAT_ID) % 4;
				SetPlayerInEntrance(playerid, entranceid);
				SetPlayerInEntranceFloor(playerid, floor);
				SetPlayerPosEx
				(
					playerid, 
					g_entrance_flat_pos[type][3],
					g_entrance_flat_pos[type][4],
					g_entrance_flat_pos[type][2],
					g_entrance_flat_pos[type][5],
					1,
					(entranceid * 100) + floor
				);
			}
			else
			{
				SetPlayerPosEx
				(
					playerid,
					GetHouseData(houseid, H_EXIT_POS_X),
					GetHouseData(houseid, H_EXIT_POS_Y),
					GetHouseData(houseid, H_EXIT_POS_Z),
					GetHouseData(houseid, H_EXIT_ANGLE),
					0,
					0
				);
			}
			return 1;
		}
	}
	return 0;
}
stock GetPlayerHouse(playerid, home = 1)
{
	new fmt_text[64],
		Cache: result;
	mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_text, true);
	if(!cache_num_rows()) home = -1;
	cache_delete(result);
	return home;
}
stock HouseImprovementsPrice(houseid)
{
	new price;
	new level = GetHouseData(houseid, H_IMPROVEMENTS);
	if(1 <= level <= sizeof g_house_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_house_improvements[idx][I_PRICE];
		}
	}
	return price;
}
stock IsPlayerInRangeOfHouse(playerid, houseid, Float: radius = 10.0)
{
	new result;
	if(GetHouseData(houseid, H_ENTRACE) != -1)
	{
		new flatid = GetHouseData(houseid, H_FLAT_ID) % 4;
		result = IsPlayerInRangeOfPoint(playerid, radius, g_entrance_flat_pos[flatid][0], g_entrance_flat_pos[flatid][1], g_entrance_flat_pos[flatid][2]);
	}
	else result = IsPlayerInRangeOfPoint(playerid, radius, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z));
	return result;
}
stock ClearPlayerInfo(playerid)
{
	g_player[playerid] = g_player_default_values;
	g_player_gps[playerid] = g_gps_default_values;
	g_player_setting[playerid] = g_settings_default_values;
	g_pickup_flood[playerid] = 0;
	g_teleport_object[playerid] = {-1, -1};
	SetPlayerPhoneBookInitStatus(playerid, false);
	SetPlayerPhoneBookContacts(playerid, 0);
	ClearPlayerOffer(playerid);
	ClearPlayerListitemValues(playerid);
	ClearPlayerPhoneCall(playerid);
	AntiFloodPlayerInit(playerid);
	DestroyTeleportObjects(playerid);
	SetPlayerSpectateData(playerid, S_PLAYER, -1);
	#if defined _SYSTEM_CP
	ClearPlayerCPInfo(playerid);
	#endif
	#if defined _SYSTEM_RACE_CP
	ClearPlayerRCPInfo(playerid);
	#endif
}
stock GetFreeHousesCount()
{
	new count;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;
		count ++;
	}
	return count;
}
stock ShowHouseRenterInfo(playerid, houseid, roomid)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
	{
		if(0 <= roomid <= MAX_HOUSE_ROOMS-1)
		{
			if(IsHouseRoomOwned(houseid, roomid))
			{
				SetPlayerUseListitem(playerid, roomid);
				new string[144];
				new time = gettime();
				new s_year, s_month, s_day; // поселение
				timestamp_to_date(GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), s_year, s_month, s_day);
				//new e_year, e_month, e_day;	// выселение
				//timestamp_to_date(GetHouseRoomInfo(houseid, roomid, HR_RENT_DATE), e_year, e_month, e_day);
				format
				(
					string, sizeof string,
					"1. Арендатор\t\t\t{CCCC00}%s\n"\
					"2. Поселился\t\t\t%02d-%02d-%d\n"\
					"3. Проживает\t\t\t{66BB33}%d дней\n"\
					"{888888}4. Выселить",
					GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME),
					s_day, s_month, s_year,
					GetElapsedTime(time, GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), CONVERT_TIME_TO_DAYS)
				);
				Dialog(playerid, DIALOG_HOUSE_RENTER_INFO, DIALOG_STYLE_LIST, "{33AACC}Информация о арендаторе", string, "Действие", "Назад");
			}
			else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
		}
	}
}
stock AddHouseRenter(houseid, roomid, playerid)
{
	if(!IsHouseRoomOwned(houseid, roomid))
	{
		new query[128];
		new Cache: result;
		new time = gettime();
		format(query, sizeof query, "UPDATE accounts SET house_type=%d,house_room=%d,house=%d WHERE id=%d LIMIT 1", HOUSE_TYPE_ROOM, roomid, houseid, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);
		format(query, sizeof query, "INSERT INTO houses_renters (owner_id,house_id,room_id,rent_time,time) VALUES (%d,%d,%d,%d,%d)", GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID), roomid, 0, time);
		result = mysql_query(mysql, query, true);
		SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 		cache_insert_id());
		SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	GetPlayerAccountID(playerid));
		SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
		SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	time);
		format(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME), 21, GetPlayerNameEx(playerid));
		SetPlayerData(playerid, P_HOUSE, 		houseid);
		SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_ROOM);
		SetPlayerData(playerid, P_HOUSE_ROOM, 	roomid);
		AddHouseRentersCount(houseid, +, 1);
		cache_delete(result);
	}
}
stock EvictHouseRenter(houseid, roomid, renter_id = INVALID_PLAYER_ID, ownerid = INVALID_PLAYER_ID)
{
	if(IsHouseRoomOwned(houseid, roomid))
	{
		new query[90];
		format(query, sizeof query, "DELETE FROM houses_renters WHERE owner_id=%d AND house_id=%d", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID), GetHouseData(houseid, H_SQL_ID));
		mysql_query(mysql, query, false);
		format(query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE id=%d LIMIT 1", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID));
		mysql_query(mysql, query, false);
		if(!mysql_errno())
		{
			if(renter_id == INVALID_PLAYER_ID)
				renter_id = GetPlayerID(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME));
			if(renter_id != INVALID_PLAYER_ID)
			{
				if(GetPlayerHouse(renter_id, HOUSE_TYPE_ROOM) == houseid)
				{
					if(ownerid != INVALID_PLAYER_ID)
					{
						format(query, sizeof query, "%s выселил Вас из своего дома", GetPlayerNameEx(ownerid));
						SendClientMessage(renter_id, 0x3399FFFF, query);
					}
					SetPlayerData(renter_id, P_HOUSE, -1);
					SetPlayerData(renter_id, P_HOUSE_TYPE, -1);
					SetPlayerData(renter_id, P_HOUSE_ROOM, -1);
				}
			}
			SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 	0);
			SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	0);
			AddHouseRentersCount(houseid, -, 1);
			return 1;
		}
		return -1;
	}
	return 0;
}
stock GetHouseIndexBySQLID(sql_id)
{
	new index = -1;
	for(new idx; idx < MAX_HOUSES; idx ++)
	{
		if(GetHouseData(idx, H_SQL_ID) != sql_id) continue;
		index = idx;
		break;
	}
	return index;
}
stock GetHouseFreeRoom(houseid)
{
	new roomid = -1;
	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(IsHouseRoomOwned(houseid, idx)) continue;
		roomid = idx;
		break;
	}
	return roomid;
}
stock HidePlayerSelectPanelSkin(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "ClothingStore");
}
stock IsPlayerHaveWeapon(playerid, weaponid)
{
	new weapon, ammo;
	new bool: is_have = false;
	for(new idx; idx <= 12; idx ++)
	{
		GetPlayerWeaponData(playerid, idx, weapon, ammo);
		if(weapon != weaponid) continue;
		is_have = true;
		break;
	}
	return is_have;
}
stock IsAJobCar(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
			VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,
			VEHICLE_ACTION_TYPE_RERFECT:
		{
			return 1;
		}
	}
	return 0;
}
stock GetNearestVehicleID(playerid, Float: radius = 0.0)
{
	if(radius == 0.0)
		radius = FLOAT_INFINITY;
	new vehicleid = INVALID_VEHICLE_ID;
	new Float: dist;
	new Float: pos_x, Float: pos_y, Float: pos_z;
	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	for(new idx; idx < MAX_VEHICLES; idx ++)
	{
		if(!IsValidVehicle(idx)) continue;
		if(!IsVehicleStreamedIn(idx, playerid)) continue;
		dist = GetVehicleDistanceFromPoint(idx, pos_x, pos_y, pos_z);
		if(dist < radius)
		{
			radius = dist,
			vehicleid = idx;
		}
	}
	return vehicleid;
}
stock LoadOrders()
{
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT * FROM orders");
	rows = cache_num_rows();
	if(rows > sizeof g_order)
		rows = sizeof g_order;
	new buffer;
	for(new idx; idx < rows; idx ++)
	{
		SetOrderData(idx, O_SQL_ID,	cache_get_row_int(idx, 0));
		SetOrderData(idx, O_TYPE, 	cache_get_row_int(idx, 1));
		SetOrderData(idx, O_COMPANY_ID, cache_get_row_int(idx, 2));
		SetOrderData(idx, O_AMOUNT, 	cache_get_row_int(idx, 3));
		SetOrderData(idx, O_PRICE, 		cache_get_row_int(idx, 4));
		SetOrderData(idx, O_TIME, 		cache_get_row_int(idx, 5));
		SetOrderData(idx, O_USED, 		false);
		buffer = GetOrderData(idx, O_COMPANY_ID);
		switch(GetOrderData(idx, O_TYPE))
		{
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(buffer, B_ORDER_ID, idx);
			}
		}
	}
	cache_delete(result);
	printf("[Orders]: Заказов загружено: %d", rows);
}
stock CreateOrder(type, company, amount, price)
{
	new order_id = GetOrderFreeSlot();
	new query[128];
	new Cache: result;
	new time = gettime();
	format(query, sizeof query, "INSERT INTO orders (type,company,amount,price,time) VALUES (%d,%d,%d,%d,%d)", type, company, amount, price, time);
	result = mysql_query(mysql, query, false);
	new day, month, year;
	getdate(day, month, year);
	SetOrderData(order_id, O_TYPE, type);
	SetOrderData(order_id, O_COMPANY_ID, company);
	SetOrderData(order_id, O_AMOUNT, amount);
	SetOrderData(order_id, O_PRICE, price);
	SetOrderData(order_id, O_TIME, time);
	SetOrderData(order_id, O_USED, false);
	SetOrderData(order_id, O_SQL_ID, cache_insert_id());
	SetBusinessData(company, B_ORDER_ID, order_id);
	cache_delete(result);
	return order_id;
}
stock DeleteOrder(orderid)
{
	if(GetOrderData(orderid, O_SQL_ID) > 0)
	{
		new query[64];
		new company = GetOrderData(orderid, O_COMPANY_ID);
		switch(GetOrderData(orderid, O_TYPE))
		{
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(company, B_ORDER_ID, -1);
			}
		}
		format(query, sizeof query, "DELETE FROM orders WHERE type=%d AND company=%d", GetOrderData(orderid, O_TYPE), GetOrderData(orderid, O_COMPANY_ID));
		mysql_query(mysql, query, false);
		SetOrderData(orderid, O_SQL_ID, 0);
		SetOrderData(orderid, O_PRICE,  0);
		SetOrderData(orderid, O_AMOUNT, 0);
	}
}
stock GetOrderFreeSlot()
{
	new slot = -1;
	for(new idx; idx < sizeof g_order; idx ++)
	{
		if(GetOrderData(idx, O_SQL_ID) > 0) continue;
		slot = idx;
		break;
	}
	return slot;
}
stock ShowPlayerBusinessPayForRent(playerid)
{
	new businessid = GetPVarInt(playerid, "ownablebiz_id");
	if(businessid != -1)
	{
		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Бизнес:\t\t\t\t№%d (%s)\n"\
			"Оплаченных дней аренды:\t\t%d из 14\n"\
			"Ежедневная арендная плата:\t%d руб\n"\
			"Тип аренды:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите арендовать бизнес?",
			businessid,
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2,
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Пониженная")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_BIZ, DIALOG_STYLE_INPUT, "{66CC00}Аренда бизнеса", fmt_str, "Оплатить", "Назад");
	}
}
stock ShowPlayerKioskPayForRent(playerid)
{
	new kiosk_id = GetPVarInt(playerid, "ownablekiosk_id");
	if(kiosk_id != -1)
	{
		new fmt_str[540];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Киоск:<t><t><t><t>№%d (%s)\n"\
			"Оплаченных дней аренды:<t><t>%d из 14\n"\
			"Ежедневная арендная плата:<t>%d руб\n"\
			"На сколько дней Вы хотите арендовать киоск?",
			kiosk_id,
			GetKioskData(kiosk_id, K_NAME),
			GetKioskData(kiosk_id, K_RENT_DATE),
			GetKioskData(kiosk_id, K_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_KIOSK, DIALOG_STYLE_INPUT, "{66CC00}Аренда киоска", fmt_str, "Оплатить", "Назад");
	}
}
stock ShowPlayerHousePayForRent(playerid)
{
	new query[256],
		Cache: result,
		biz_id;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");
	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		new entrance = cache_get_field_content_int(i, "entrance");
		if(entrance == -1)
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
		}
		else
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
		}
		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}
	Dialog
	(
		playerid, DIALOG_PAY_FOR_RENT_HOME, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите дом",
		string_dialog,
		"Выбрать", "Закрыть"
	);
	cache_delete(result);
	return 1;
}
stock SellBusiness(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new businessid = GetPVarInt(playerid, "ownablebiz_id");
	if(businessid != -1)
	{
		new biz_price = GetBusinessData(businessid, B_PRICE);
		new biz_percent = biz_price / 100 * 60;
		new biz_improvemnts_price = BusinessImprovementsPrice(businessid);
		if(biz_improvemnts_price)
			biz_improvemnts_price = biz_improvemnts_price / 100 * 35;
		new query[200];
		new return_money = (biz_price - biz_percent) + biz_improvemnts_price;
		//SetPlayerData(playerid, P_BUSINESS, 		-1);
		SetBusinessData(businessid, B_OWNER_ID, 	0);
		if(to_player == INVALID_PLAYER_ID)
		{
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), return_money));
			BankLog(playerid, return_money, "Продажа бизнеса");
			SetBusinessData(businessid, B_IMPROVEMENTS, 	0);
			SetBusinessData(businessid, B_PRODS, 			0);
			SetBusinessData(businessid, B_PROD_PRICE,		0);
			SetBusinessData(businessid, B_BALANCE,			0);
			format(g_business[businessid][B_BALANCE], 21, "0");
			SetBusinessData(businessid, B_RENT_DATE,		0);
			SetBusinessData(businessid, B_ENTER_MUSIC,		0);
			SetBusinessData(businessid, B_LOCK_STATUS,	false);
			BusinessHealthPickupInit(businessid);
			format(query, sizeof query, "UPDATE accounts a,business b SET a.bank=%s,a.business=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);
			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
			mysql_query(mysql, query, false);
			g_business_gps_init = false;
			GivePlayerMoneyEx(playerid, 0, "Продажа бизнеса государству", false, false);
			CallLocalFunction("UpdateBusinessLabel", "i", businessid);
			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой бизнес!");
			format(query, sizeof query, "Налог за продажу бизнеса составил 60 процентов от его стоимости {99CC00}(%d руб)", biz_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);
			format(query, sizeof query, "Вам было возвращено 35 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);
			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
		}
		else
		{
			if(BuyPlayerBusiness(to_player, businessid, true, price) == 1)
			{
				new total_price = price + biz_improvemnts_price;
				format(query, sizeof query, "Вам было возвращено 20 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);
				format(query, sizeof query, "UPDATE accounts SET money=%s WHERE id=%d LIMIT 1", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), total_price), GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
				mysql_query(mysql, query, false);
				g_business_gps_init = false;
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Продажа бизнеса игроку %s[%d]", GetPlayerNameEx(to_player), to_player);
				GivePlayerMoneyEx(playerid, total_price, STRING_GLOBAL, false, false);
				biz_price = price;
				biz_percent = 0;
			}
			else return ;
		}
		//format(query, sizeof query, "~g~+%d rub~n~+%d rub", (biz_price - biz_percent), biz_improvemnts_price);
		//CefGameTextForPlayer(playerid, query, 4000, 1);
	}
}
stock BuyPlayerBusiness(playerid, businessid, bool: buy_from_owner = false, price = -1)
{
    new fmt_str[64];
    if(IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
	{
		if(!IsBusinessOwned(businessid))
		{
			if(price <= 0)
				price = GetBusinessData(businessid, B_PRICE);
			if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
			{
				new query[256];
				format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%s,b.owner_id=%d WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), -price), GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);
				if(!mysql_errno())
				{
					//SetPlayerData(playerid, P_BUSINESS, businessid);
					SetBusinessData(businessid, B_OWNER_ID, 		GetPlayerAccountID(playerid));
					SetBusinessData(businessid, B_IMPROVEMENTS, 	0);
					new time = gettime();
					new rent_time = (time - (time % 86400)) + 86400;
					if(!buy_from_owner)
					{
						SetBusinessData(businessid,	B_PRODS, 		10000);
						SetBusinessData(businessid,	B_PROD_PRICE, 	0);
						SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
						SetBusinessData(businessid,	B_ENTER_PRICE, 	0);
						format(g_business[businessid][B_BALANCE], 21, "0");
						SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
						SetBusinessData(businessid,	B_LOCK_STATUS,	false);
					}
					else
					{
						if(GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
						{
							SetBusinessData(businessid, B_RENT_DATE, rent_time);
						}
					}
					format(g_business[businessid][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
					CallLocalFunction("UpdateBusinessLabel", "i", businessid);
                    //SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы купили бизнес");
					GivePlayerMoneyEx(playerid, -price, "Покупка бизнеса", false, true);
					SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/business {66CC00}чтобы узнать о возможностях");
					format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%s,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
					mysql_query(mysql, query, false);
					format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE business_id=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
					mysql_query(mysql, query, false);
					DeletePVar(playerid, "buy_biz_id");
					return 1;
				}
				SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
				DeletePVar(playerid, "buy_biz_id");
				return 0;
			}
			SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого бизнеса");
			DeletePVar(playerid, "buy_biz_id");
			return 0;
		}
		format(fmt_str, sizeof fmt_str, "Этот бизнес уже куплен. Владелец: %s", GetBusinessData(businessid, B_OWNER_NAME));
		SendClientMessage(playerid, 0xCECECEFF, fmt_str);
		DeletePVar(playerid, "buy_biz_id");
		return -1;
	}
	return 1;
}
stock BusinessHealthPickupInit(businessid)
{
	if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 5)
	{
		if(!GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			new interior = GetBusinessData(businessid, B_INTERIOR);
			SetBusinessData(businessid, B_HEALTH_PICKUP, CreatePickup(1240, 25, GetBusinessInteriorInfo(interior, BT_HEALTH_POS_X), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Y), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Z), businessid + 255, PICKUP_ACTION_TYPE_BIZ_HEALTH, businessid));
		}
	}
	else
	{
		if(GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			DestroyPickup(GetBusinessData(businessid, B_HEALTH_PICKUP));
			SetBusinessData(businessid, B_HEALTH_PICKUP, 0);
		}
	}
}
stock GetBusinessEnterProdCount(businessid)
{
	new take_prods = 0;
	new enter_price = GetBusinessData(businessid, B_ENTER_PRICE);
	if(enter_price > 0)
	{
		if(enter_price < 150)
		{
			take_prods = 1;
		}
		else if(enter_price < 500)
		{
			take_prods = 2;
		}
		else take_prods = 3;
	}
	return take_prods;
}
stock GetBusinessMaxProd(businessid)
{
	new max_prods = 3000;
	new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
	if(i_level >= 5)
	{
		max_prods = 20_000;
	}
	else if(i_level >= 1)
	{
		max_prods = 13_000;
	}
	else max_prods = 3000;
	return max_prods;
}
stock GetNearestBusiness(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new businessid = -1;
	new Float: my_dist;
	for(new idx; idx < g_business_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			businessid = idx;
		}
	}
	return businessid;
}
stock GetNearestHouse(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new houseid = -1;
	new Float: my_dist;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), GetHouseData(idx, H_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			houseid = idx;
		}
	}
	return houseid;
}
stock BusinessImprovementsPrice(businessid)
{
	new price;
	new level = GetBusinessData(businessid, B_IMPROVEMENTS);
	if(1 <= level <= sizeof g_business_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_business_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock EnterPlayerToBiz(playerid, businessid)
{
	new type = GetBusinessData(businessid, B_TYPE),
		buffer = GetBusinessData(businessid, B_INTERIOR);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Overlay", "[500,500,1.00,1]");
	if(GetPlayerLevel(playerid) < 3) {
		GameText(playerid, "~g~Бесплатный вход ~n~~w~для новичка", 4000, 2);
	} 
	if(type == BUSINESS_TYPE_CASINO)
	{
		if(GetPlayerData(playerid, P_FORTUNE_WHEEL) == 1)
		{
			SendClientMessage(playerid, 0xFFCD00FF, "Вам доступен прокрут 1 рулетки в казино");
		}
	}
	if(type == BUSINESS_TYPE_CAR_TUNING)
	{
		new vehicleid = GetPlayerOwnableCarLast(playerid);
		if(vehicleid == INVALID_VEHICLE_ID)
			return 1;
		GetVehiclePos(vehicleid, vehicle_temp_position[playerid][0], vehicle_temp_position[playerid][3], vehicle_temp_position[playerid][2]);
		GetVehicleZAngle(vehicleid, vehicle_temp_position[playerid][3]);
		SetVehiclePos(vehicleid, 870.7346, 1334.1289, 1008.4175);
		SetVehicleZAngle(vehicleid, 90.0);
		LinkVehicleToInterior(vehicleid, GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR));
		SetVehicleVirtualWorld(vehicleid, businessid + 255);
	}
	if(type == BUSINESS_TYPE_BY || type == BUSINESS_TYPE_BY_NIZ || type == BUSINESS_TYPE_BY_SRED)
	{
	    SetPVarInt(playerid, "in_by", 1);
	    KillTimer(timerbyexit[playerid]);
	}
	SetPlayerPosEx
	(
		playerid,
		GetBusinessInteriorInfo(buffer, BT_ENTER_POS_X),
		GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Y),
		GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Z),
		GetBusinessInteriorInfo(buffer, BT_ENTER_ANGLE),
		GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR),
		businessid + 255, false
	);
	SetPlayerInBiz(playerid, businessid);
	buffer = GetBusinessData(businessid, B_ENTER_MUSIC);
	if(1 <= buffer <= sizeof g_business_sound)
	{
		PlayerPlaySound(playerid, g_business_sound[buffer - 1], 0.0, 0.0, 0.0);
	}
	if(GetBusinessData(businessid, B_TYPE) != 36)
	{
		if(GetBusinessData(businessid, B_ELECTRICITY) == 0)
		{
			BitStream_1(playerid, s_CefInterface, t_CefShow, "Darkness");
			GameText(playerid, "~r~НЕТ~n~ЭЛЕКТРИЧЕСТВА", 4000, 2);
			SendClientMessage(playerid, 0xCECECEFF, "{afdafc}В данный момент у этого предприятия {FFFFFF}отключено электричество!");
		}
	}
	return 1;
}

stock GetFreeBusinessCount()
{
	new count;
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;
		count ++;
	}
	return count;
}
stock IsPlayerInBuyPosBiz(playerid, businessid, type, Float: radius = 50.0)
{
	if(GetBusinessData(businessid, B_TYPE) == type)
	{
		new interior = GetBusinessData(businessid, B_INTERIOR);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetBusinessInteriorInfo(interior, BT_BUY_POS_X), GetBusinessInteriorInfo(interior, BT_BUY_POS_Y), GetBusinessInteriorInfo(interior, BT_BUY_POS_Z)))
		{
			return 1;
		}
	}
	return 0;
}
stock ShowPlayerRealtorHomeDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BIZ_REALTOR_HOME_GET, DIALOG_STYLE_INPUT,
		"{99CC00}Информация о доме",
		"{FFFFFF}Введите номер дома, информацию\n"\
		"о котором Вы хотите получить\n\n"\
		"{FFCD00}Стоимость услуги 50 рублей",
		"Далее", "Отмена"
	);
}
stock IsABike(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_MODELID))
	{
		case 481, 509, 510, 15644, 15683:
		{
			return 1;
		}
	}
	return 0;
}
stock SetPlayerPhoneUseState(playerid, bool: use = true, bool: bubble = true)
{
	if(use)
	{
		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, GetPlayerData(playerid, P_PHONE_COLOR) + 18865, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.001, 0.0, 280.0, 0.0, 200.0, 1.0, 1.0, 1.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE - 1);
		if(bubble)
			Action(playerid, "достал телефон", _, false);
	}
	else
	{
		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
}
stock GetNearestAtm(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new atmid = -1;
	new Float: my_dist;
	for(new idx; idx < sizeof g_atm-1; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, g_atm[idx][A_POS_X], g_atm[idx][A_POS_Y], g_atm[idx][A_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}
stock GetElapsedTime(time, to_time, type = CONVERT_TIME_TO_HOURS)
{
	new result;
	switch(type)
	{
		case CONVERT_TIME_TO_MINUTES:
		{
			result = ((time - (time % 60)) - (to_time - (to_time % 60))) / 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			result = ((time - (time % 3600)) - (to_time - (to_time % 3600))) / 3600;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			result = ((time - (time % 86400)) - (to_time - (to_time % 86400))) / 86400;
		}
		default:
			result = -1;
	}
	return result;
}
stock ConvertUnixTime(unix_time, type = CONVERT_TIME_TO_SECONDS)
{
	switch(type)
	{
		case CONVERT_TIME_TO_SECONDS:
		{
			unix_time %= 60;
		}
		case CONVERT_TIME_TO_MINUTES:
		{
			unix_time = (unix_time / 60) % 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			unix_time = (unix_time / 3600) % 24;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			unix_time = (unix_time / 86400) % 30;
		}
		case CONVERT_TIME_TO_MONTHS:
		{
			unix_time = (unix_time / 2629743) % 12;
		}
		case CONVERT_TIME_TO_YEARS:
		{
			unix_time = (unix_time / 31556926) + 1970;
		}
		default:
			unix_time %= 60;
	}
	return unix_time;
}
stock CheckPlayerFlood(playerid, bool:inc = true, max_rate = MAX_FLOOD_RATE, rate_inc = FLOOD_RATE_INC, kick_rate = FLOOD_RATE_KICK)
{
	new tick = GetTickCount();
	AddPlayerAntiFloodData(playerid, AF_RATE, +, inc ? rate_inc : 0);
	AddPlayerAntiFloodData(playerid, AF_RATE, -, (GetTickCount() - GetPlayerAntiFloodData(playerid, AF_LAST_TICK)));
	SetPlayerAntiFloodData(playerid, AF_LAST_TICK, tick);
	if(GetPlayerAntiFloodData(playerid, AF_RATE) < 0)
		SetPlayerAntiFloodData(playerid, AF_RATE, 0);
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= max_rate)
	{
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= kick_rate)
		{
			Kick:(playerid, _, 10);
		}
		return 1;
	}
	return 0;
}
stock ShowPhoneBookOperation(playerid, operationid, contactid=0)
{
	switch(operationid)
	{
		case PHONE_BOOK_OPERATION_OPTIONS:
		{
			SetPlayerPhoneBookSelectContact(playerid, GetPlayerListitemValue(playerid, contactid));
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_OPTION, DIALOG_STYLE_LIST,
				"{FFD83D}Варианты",
				"1. Позвонить\n"\
				"2. Отправить SMS сообщение\n"\
				"3. Изменить имя контакта\n"\
				"4. Изменить номер контакта\n"\
				"5. Удалить контакт",
				"Выбрать", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CALL:
		{
			new number[11]; // TODO
			format(number, sizeof number, "%d", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER));
			callcmd::c(playerid, number);
		}
		case PHONE_BOOK_OPERATION_SEND_SMS:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_SEND_SMS, DIALOG_STYLE_INPUT,
				"{FFD83D}Отправка SMS сообщения",
				"{FFFFFF}-\t\t\tВведите текст SMS сообщения:\t\t-",
				"Отправить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NAM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NAME, DIALOG_STYLE_INPUT,
				"{FFD83D}Изменение имени контакта",
				"{FFFFFF}Введите новое имя для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NUM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NUMBER, DIALOG_STYLE_INPUT,
				"{FFD83D}Изменение номера контакта",
				"{FFFFFF}Введите новый номер для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_DELETE_CON:
		{
			if(GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID))
			{
				new query[80];
				format(query, sizeof query, "DELETE FROM phone_books WHERE id=%d LIMIT 1", GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
				mysql_query(mysql, query, false);
				SetPlayerPhoneBookInitStatus(playerid, false);
				SendClientMessage(playerid, 0xFF9030FF, "Контакт удален с памяти телефона");
			}
		}
	}
}
stock AddPhoneBookContact(playerid, name[], number[])
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		InitPlayerPhoneBook(playerid);
	}
	if(GetPlayerPhoneBookContacts(playerid) < MAX_PHONE_BOOK_CONTACTS)
	{
		if(!CheckPhoneBookUsedNumber(playerid, number))
		{
			new fmt_str[128];
			SetPlayerPhoneBookInitStatus(playerid, false);
			format(fmt_str, sizeof fmt_str, "Вы добавили %s (тел. %s) в свой список контактов", name, number);
			SendClientMessage(playerid, 0x33FF66FF, fmt_str);
			mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO phone_books (owner_id,name,number,time) VALUES (%d,'%e','%e',%d)", GetPlayerAccountID(playerid), name, number, gettime());
			mysql_query(mysql, fmt_str, false);
		}
	}
	return 1;
}
stock CheckPhoneBookUsedNumber(playerid, number[])
{
	for(new idx, len; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
	{
		if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;
		len = strlen(GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
		if(len && !strcmp(GetPlayerPhoneBook(playerid, idx, PB_NUMBER), number, true))
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Номер %s уже записан для контакта %s", number, GetPlayerPhoneBook(playerid, idx, PB_NAME));
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6633}Ошибка", fmt_str, "Закрыть", "");
			return 1;
		}
	}
	return 0;
}
stock InitPlayerPhoneBook(playerid)
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		new query[80];
		new Cache: result, rows;
		format(query, sizeof query, "SELECT * FROM phone_books WHERE owner_id=%d ORDER BY id DESC LIMIT %d", GetPlayerAccountID(playerid), MAX_PHONE_BOOK_CONTACTS);
		result = mysql_query(mysql, query);
		rows = cache_num_rows();
		for(new idx; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
		{
			if(idx < rows)
			{
				SetPlayerPhoneBook(playerid, idx, PB_SQL_ID, cache_get_row_int(idx, 0));
				cache_get_row(idx, 2, g_player_phone_book[playerid][idx][PB_NAME], mysql, 21);
				cache_get_row(idx, 3, g_player_phone_book[playerid][idx][PB_NUMBER], mysql, 9);
				SetPlayerPhoneBook(playerid, idx, PB_TIME, cache_get_row_int(idx, 4));
				continue;
			}
			ClearPlayerPhoneBookContact(playerid, idx);
		}
		cache_delete(result);
		SetPlayerPhoneBookContacts(playerid, rows);
		SetPlayerPhoneBookInitStatus(playerid, true);
	}
	return 1;
}
stock ClearPlayerPhoneBookContact(playerid, contactid)
{
	SetPlayerPhoneBook(playerid, contactid, PB_SQL_ID, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NAME, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NUMBER, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_TIME, 	0);
}
stock GetPlayerIDByPhone(number)
{
	new playerid = INVALID_PLAYER_ID;
	if(1000 <= number <= 9999999)
	{
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(number != GetPlayerPhone(i)) continue;
			playerid = i;
			break;
		}
	}
	return playerid;
}
stock CheckPlayerTempJobState(playerid)
{
	new job = GetPlayerTempJob(playerid);
	new j_state = GetPlayerTempJobState(playerid);
	//new s_action = GetPlayerSpecialAction(playerid);
	switch(job)
	{
		case TEMP_JOB_MINER:
		{
			if(j_state == TEMP_JOB_STATE_MINER_DROP_LOAD) // || s_action != SPECIAL_ACTION_NONE
			{
				SetPlayerTempJobCheckAnim(playerid, false);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
				RemovePlayerAttachedObjects(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);
				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
				SetPlayerMinerJobLoadCP(playerid);
				SendClientMessage(playerid, 0xFF6600FF, "Вы сломали тележку");
			}
		}
		case TEMP_JOB_FACTORY:
		{
			if(j_state == TEMP_JOB_STATE_FACTORY_DROP_P)
			{
				FactoryPlayerDrop(playerid, false);
			}
		}
		case TEMP_JOB_LUMBERJACK:
		{
			if(j_state == TEMP_JOB_STATE_LUMBERJACK_DROP)
			{
				LumberJackPlayerDrop(playerid, true);
			}
		}
		case TEMP_JOB_INKAS:
		{
			if(j_state == TEMP_JOB_STATE_FERMER_DROP)
			{
				FermerPlayerDrop(playerid, true);
			}
		}
	}
}
stock ChangePlayerName(playerid, name[], bool: non_rp_nick = false)
{
	new query[128];
	new Cache: result, rows;
	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);
	rows = cache_num_rows();
	cache_delete(result);
	if(3 <= strlen(name) <= 20 && !rows)
	{
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET name='%e' WHERE id=%d LIMIT 1", name, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);
		if(!mysql_errno())
		{
			mysql_format(mysql, query, sizeof query, "INSERT INTO change_names (owner_id,name,time,ip) VALUES (%d,'%e',%d,'%e')", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), gettime(), GetPlayerIpEx(playerid));
			mysql_query(mysql, query, false);
			format(query, sizeof query, "%s сменил %s на %s", GetPlayerNameEx(playerid), non_rp_nick ? "нон-рп имя" : "имя", name);
			format(g_player[playerid][P_NAME], 21, "%s", name);
			SetPlayerName(playerid, GetPlayerNameEx(playerid));
			SendClientMessageToAll(0xCCFF00FF, query);
			UpdateCharity();
			new buffer;
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				format(g_business[buffer][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", buffer);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				format(g_house[buffer][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_house_renters[buffer][room][HR_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_hotel[buffer][room][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			return 1;
		}
	}
	return 0;
}
stock EndPlayerTempJob(playerid, job, bool:annul = false)
{
	if(GetPlayerTempJob(playerid) == job)
	{
		SetPlayerTempJobCheckAnim(playerid, false);
		RemovePlayerAttachedObjects(playerid);
		SetPlayerSkinInit(playerid);
		new items = GetPlayerJobLoadItems(playerid);
		new pay_sum = items * GetTempJobInfo(job, TJ_PAY_FOR_LOAD);
		pay_sum = pay_sum * g_doubling[DOUBLING_WAGE];
		for(new is = 1; is < MAX_VEHICLES; is++)
		{
		    if(!IsValidVehicle(is)) continue;
	 		else if(vodila[is] != playerid || vodila[is] == -1) continue;
	 		else if(GetVehicleData(is, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_FERMA_CAR) continue;
	 		else if(IsVehicleOccupied(is)) continue;
			vodila[is] = -1;
			//DestroyVehicleLabel(is);
			SetVehicleToRespawn(is);
		}
		STRING_GLOBAL[0] = EOS;
		switch(job)
		{
			case TEMP_JOB_MINER:
			{
				DisablePlayerCheckpoint(playerid);
				if(!annul)
				{
					if(items > 0)
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Рабочий день завершен. Вы добыли %d кг руды", items);
						SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Всего заработано %d руб", pay_sum);
						SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе шахтера", true, false);
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d рублей~n~~w~Заработано: ~g~%d рублей", pay_sum, pay_sum);
						GameText(playerid, STRING_GLOBAL, 4000, 2);
					}
					else SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию шахты. Заработок был аннулирован");
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_FACTORY:
			{
				pay_sum = GetPlayerJobWage(playerid);
				new bad_items = GetPVarInt(playerid, "factory_bad_prods");
				new skill = GetPVarInt(playerid, "factory_skill");
				new waste_sum = bad_items * (random(160000) + 100000);
				if(!annul)
				{
					SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
					if(pay_sum > 0 && waste_sum < pay_sum)
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Всего создано {FFFF00}%d {66CC00}продуктов, забракованно {FFFF00}%d шт.", items, bad_items) ;
						SendClientMessage(playerid, 0x66CC00FF, STRING_GLOBAL);
						if(skill > 0)
						{
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Рабочий навык увеличился {66CCFF}на %d единиц(ы)", skill);
						}
						else STRING_GLOBAL = "Рабочий навык не изменился";
						SendClientMessage(playerid, 0x66CC00FF, STRING_GLOBAL);
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Заработано {00CC00}%d руб, {FFFFFF}из них {FF6600}%d руб {FFFFFF}- штраф за брак продуктов", pay_sum, waste_sum);
						SendClientMessage(playerid, 0xFFFFFFFF, STRING_GLOBAL);
						pay_sum -= waste_sum;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d рублей~n~~w~Заработано: ~g~%d рублей", pay_sum, pay_sum);
						GameText(playerid, STRING_GLOBAL, 4000, 2);
						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе в цеху (завод)", true, false);
					}
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию завода. Выручка была аннулирована");
				skill = GetPlayerData(playerid, P_FACTORY_USE_DESK);
				SetPlayerFactoryDeskUse(playerid, skill, false);
			}
			case TEMP_JOB_LUMBERJACK:
			{
				DisablePlayerCheckpoint(playerid);
				if(!annul)
				{
					if(items > 0)
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Рабочий день завершен. Вы принесли %d шт дров", items);
						SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Всего заработано %d руб", pay_sum);
						SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе лесоруба", true, false);
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d рублей~n~~w~Заработано: ~g~%d рублей", pay_sum, pay_sum);
						GameText(playerid, STRING_GLOBAL, 4000, 2);
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Вы завершили работу лесоруба");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию лесопилки. Заработок был аннулирован");
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
		}
		SetPlayerJobLoadItems(playerid, 0);
		SetPlayerData(playerid, P_JOB_WAGE, 0);
		SetPlayerTempJob(playerid, TEMP_JOB_NONE);
	}
}
stock TogglePlayerFactoryCP(playerid, toggle)
{
	for(new idx; idx < sizeof factory_desk; idx ++)
	{
		TogglePlayerDynamicCP(playerid, factory_desk[idx][FD_CHEK_ID], toggle);
	}
}
stock KillEndJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_JOB_TIMER));
	SetPlayerData(playerid, P_END_JOB_TIMER, -1);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "InformationTimer");
}
stock StartEndJobTimer(playerid, time = 120_000)
{
	if(GetPlayerData(playerid, P_END_JOB_TIMER) == -1)
		SetPlayerData(playerid, P_END_JOB_TIMER, SetTimerEx("EndPlayerJob", time, false, "i", playerid));
}
stock KillCarJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_CAR_TIMER));
	SetPlayerData(playerid, P_END_CAR_TIMER, -1);
}
stock StartCarJobTimer(playerid, time = 15_000, veh_id)
{
	if(GetPlayerData(playerid, P_END_CAR_TIMER) == -1)
		SetPlayerData(playerid, P_END_CAR_TIMER, SetTimerEx("EndCarJob", time, false, "ii", playerid, veh_id));
}
stock ShowPlayerBuyMetalDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_MINER_BUY_METALL, DIALOG_STYLE_INPUT,
		"{FFD83D}Покупка металла",
		"{FFFFFF}Сколько кг металла вы хотите купить?\n"\
		"{00CC00}Цена за кг: 500.000 рублей",
		"Купить", "Отмена"
	);
	return true;
}
stock SetPlayerMinerJobLoadCP(playerid, bool: status = false)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		for(new i; i < sizeof miner_job_load_cp; i ++)
			TogglePlayerDynamicCP(playerid, miner_job_load_cp[i], status ^ true);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
	}
}
stock SetPlayerMinerJobUnLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		//SetPlayerCheckpoint(playerid, 2712.590332, -1551.885620, 1401.908935, 2.0, CP_ACTION_TYPE_MINER_JOB_PUT);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_UNLOAD);
	}
}
stock GetString(param1[],param2[])
{
	return !strcmp(param1, param2, false);
}
stock SetString(param_1[], param_2[], size = 300)
{
	return strmid(param_1, param_2, 0, strlen(param_2), size);
}
stock SetPlayerLumberJackChopCP(playerid)
{
	new rand = random(sizeof lumberjack_job_chop_cp);
	SetPlayerCheckpoint(playerid, lumberjack_job_chop_cp[rand][0], lumberjack_job_chop_cp[rand][1], 34.6054, 1.5, CP_ACTION_TYPE_LUMBERJACK_TAKE);
}
stock ShowPlayerFixCar(playerid)
{
	Dialog
	(
		playerid, DIALOG_FIX_CAR, DIALOG_STYLE_MSGBOX,
		"Покупка рем. комплекта",
		"Ремонтный комплект стоит 5.000.000 рублей\n"\
		"Вы действительно хотите его приобрести?",
		"Да", "Нет"
	);
}
stock GetPlayerSpeed(playerid)
{
	new Float: x, Float: y, Float: z;
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	}
	else GetPlayerVelocity(playerid, x, y, z);
	return floatround(floatsqroot(x*x+y*y+z*z)*180);
}
stock SetVehicleSpeed(vehicleid, Float: speed)
{
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;
		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);
		speed /= 100.0;
        x = speed * floatsin(-angle, degrees);
        y = speed * floatcos(-angle, degrees);
        return SetVehicleVelocity(vehicleid, x, y, z - speed / 1000.0);
	}
	return 0;
}
stock IsPlayerDriver(playerid) // сидит ли игрок за рулем ТС
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER);
}
stock IsPlayerPassenger(playerid) // сидит ли игрок как пассажир
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER);
}
stock SpeedometrShowForPlayer(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').showSpeedometer(1)");
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Hud').speedometer.maxFuel = %d", GetVehicleInfo(GetVehicleData(GetPlayerVehicleID(playerid), V_MODELID) , VI_MAX_FUEL));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.maxSpeed = 450");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').speedometer.params.wash = 0.0");
	return 1;
}
stock SpeedometrHideForPlayer(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').hideSpeedometer()");
}
stock IntToString(integer)
{
	new string[sizeof integer + 5];
	format(string, sizeof string, "%d", integer);
	return string;
}
stock SendMessageInChat(playerid, text[], Float: radius = 30.0)
{
	new Float: dist, type;
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerChatBubble(playerid, text, 0x00CCFFFF, 30.0, 8000);
	ChatMessageInit(playerid, text);
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		dist = GetPlayerDistanceFromPoint(idx, x, y, z);
		if(dist > radius) continue;
		type = GetPlayerChatType(idx);
		switch(GetPlayerSettingData(idx, S_CHAT_TYPE))
		{
			case SETTING_CHAT_ADVANCE:
			{
				if(dist < (radius / 4))
				{
					SendClientMessage(idx, 0xCECECEFF, chat_message[type]);
				}
				else if(dist < (radius / 2))
				{
					SendClientMessage(idx, 0x999999FF, chat_message[type]);
				}
				else
				{
					SendClientMessage(idx, 0x6B6B6BFF, chat_message[type]);
				}
			}
			case SETTING_CHAT_STANDART:
			{
				if(GetPlayerSettingData(idx, S_NICK_IN_CHAT))
				{
					SendPlayerMessageToPlayer(idx, playerid, chat_message[type]);
				}
				else SendClientMessage(idx, 0xCECECEFF, text);
			}
			default: continue;
		}
	}
	if(!IsPlayerDriver(playerid))
	{
		if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_NONE)
		{
			ApplyAnimationEx(playerid, "PED", "IDLE_chat", 4.100, 0, 1, 1, 1, 1, 0, USE_ANIM_TYPE_CHAT);
			SetTimerEx("ClearPlayerChatAnim", strlen(text) * 400, false, "i", playerid);
		}
	}
	return 1;
}

stock ChatMessageInit(playerid, text[])
{
	{
		format(chat_message[0], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
		format(chat_message[1], 129, "- %s {%06x}(%s)", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid));
		format(chat_message[2], 129, "- %s", text);
		format(chat_message[3], 129, "(%d): %s", playerid, text);
		format(chat_message[4], 129, "%s", text);
	}
}
stock SetPlayerChatInit(playerid)
{
	new type = 0;
	switch(GetPlayerSettingData(playerid, S_CHAT_TYPE))
	{
		case SETTING_CHAT_ADVANCE:
		{
			if(GetPlayerSettingData(playerid, S_NICK_IN_CHAT) == SETTING_TYPE_ON)
			{
				if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
				{
					type = 0;
				}
				else type = 1;
			}
			else type = 2;
		}
		case SETTING_CHAT_STANDART:
		{
			if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
			{
				type = 3;
			}
			else type = 4;
		}
		default: type = 0;
	}
	SetPlayerChatType(playerid, type);
}
stock SetPlayerSpawnInit(playerid)
{
    new spawn_pos = random(sizeof spawn_pos_data);
	SetSpawnInfo
	(
		playerid,
		0,
		GetPlayerSkinEx(playerid),
		spawn_pos_data[spawn_pos][0], // + random(3),
		spawn_pos_data[spawn_pos][1], // + random(3),
		spawn_pos_data[spawn_pos][2],
		spawn_pos_data[spawn_pos][3],
		0, 0, 0, 0, 0, 0
	);
	callcmd::return_acsses(playerid);
	ResetWeapons(playerid);
	return 1;
}
stock SetPlayerSpawnPos(playerid)
{
	if(GetPlayerData(playerid, P_JAIL))
	{
		new jail_pos = random(sizeof g_jail_positions);
		SetPlayerPosEx
		(
			playerid,
			g_jail_positions[jail_pos][0],
			g_jail_positions[jail_pos][1],
			g_jail_positions[jail_pos][2],
			g_jail_positions[jail_pos][3],
			4, 5
		);
		SetPlayerData(playerid, P_HEALTH, 100);
		SetPlayerHealthEx(playerid, 100);
		return 1;
	}
	else if(GetPlayerData(playerid, P_HOSPITAL))
	{
		SetPlayerData(playerid, P_HEALTH, 20);
		SetPlayerHealthEx(playerid, 20);
		new Random = random(20), mesto;
		if(IsPlayerInRangeOfPoint(playerid, 2000.0, 2403.9458,-2661.6692,21.9886)) mesto = 6;
		else mesto = 5;
		SetPlayerPosEx
		(
			playerid,
			g_med_bed_pos[Random][0],
			g_med_bed_pos[Random][1],
			g_med_bed_pos[Random][2],
			-90.0,
			3, mesto
		);
		return 1;
	}
	else
	{
		switch(GetPlayerSpawnSetting(playerid))
		{
			case 1:
			{
				SetTimerEx("Timer_FixHouse", 400, false, "d", playerid);
			}
			case 2:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);
					return 1;
				}
				new hotel_id = GetPlayerData(playerid, P_HOUSE),
					room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				SetPlayerData(playerid, P_IN_BUSINESS, hotel_id + 30);
				EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
			}
			case 3:
			{
				new team_id = GetPlayerTeamEx(playerid);
				if(!team_id)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);
					return 1;
				}
				SetPlayerPosEx
				(
					playerid,
					GetTeamData(team_id, O_SPAWN)[0],
					GetTeamData(team_id, O_SPAWN)[1],
					GetTeamData(team_id, O_SPAWN)[2],
					GetTeamData(team_id, O_SPAWN)[3],
					GetTeamData(team_id, O_SPAWN_INT),
					GetTeamData(team_id, O_SPAWN_VW)
				);
			}
			case 4:
            {
                new fam_id = GetPlayerData(playerid, P_FAMILY);
				if(GetFamilyData(fam_id, F_GANG) == 1)
				{
					if(GetFamilyData(fam_id, F_HOUSE_ID) == -1)
					{
						SetPlayerSpawnSetting(playerid, 0);
						UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);
						return 1;
					}
					EnterPlayerToHouse(playerid, GetFamilyData(fam_id, F_HOUSE_ID));
				}
				else
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);
				}
            }
			case 5:
			{
				SetPlayerPosEx
				(
					playerid,
					-2800.1179,
					-1500.3904,
					1001.0106,
					91.9722,
					4,
					GetPlayerData(playerid, P_ID_SPAWN)
				);
				vehicle_house_id[playerid] = GetPlayerData(playerid, P_ID_SPAWN);
				BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выйти из дома\"]]");
			}
		}
	}
	callcmd::return_acsses(playerid);
	ResetWeapons(playerid);
	return 1;
}
public: Timer_FixHouse(playerid) EnterPlayerToHouse(playerid, g_player[playerid][P_ID_SPAWN]);
stock SetPlayerInit(playerid)
{
	SetPlayerLevelInit(playerid);
	if(GetPlayerFamily(playerid) == 0)
	{
		SetPlayerColorInit(playerid);
	}
	else
	{
	}
	SetPlayerSuspectInit(playerid);
	SetPlayerSkinInit(playerid);
	SetPlayerChatInit(playerid);
	CreateTeleportObjects(playerid);
	SetPlayerLogged(playerid, true);
}
stock GetPlayerSkinEx(playerid)
{
	if(1 <= GetPlayerTeamEx(playerid) <= 10)
		return GetPlayerData(playerid, P_OSKIN);
	else
		return GetPlayerData(playerid, P_SKIN);
}
stock PreLoadPlayerAnims(playerid)
{
	for(new idx; idx < sizeof g_anim_libs; idx ++)
	{
		PreloadAnimLib(playerid, g_anim_libs[idx]);
	}
}
stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0, 0);
}
stock SetPlayerColorInit(playerid)
{
	if(GetPlayerFamily(playerid) != 0)
	{
		if(g_family[GetPlayerFamily(playerid)][F_GANG] == 1)
		{
			SetPlayerColorEx(playerid, family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)]);
		}
		else
		{
			SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
		}
	}
	else SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
	return 1;
}
stock SetPlayerColorEx(playerid, color)
{
	SetPlayerData(playerid, P_COLOR, color);
	return SetPlayerColor(playerid, color);
}

stock SetPlayerHealthEx(playerid, Float: health, bool: inc_health = false)
{
	if(inc_health)
	{
		AddPlayerData(playerid, P_HEALTH, +, health);
	}
	else SetPlayerData(playerid, P_HEALTH, health);
	if(GetPlayerData(playerid, P_HEALTH) > 100.0)
		SetPlayerData(playerid, P_HEALTH, 100.0);
	return SetPlayerHealth(playerid, GetPlayerData(playerid, P_HEALTH));
}

stock GetPlayerTeamColor(playerid)
{
	return team_colors[GetPlayerTeamEx(playerid)];
}

stock SetPlayerSuspectInit(playerid)
{
	return SetPlayerWantedLevel(playerid, GetPlayerSuspect(playerid));
}

stock SetPlayerSkinInit(playerid)
{
	return SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));
}

stock SetPlayerLevelInit(playerid)
{
	return SetPlayerScore(playerid, GetPlayerLevel(playerid));
}

stock SetPlayerSkillsInit(playerid)
{
	SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
	SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
	SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
	SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
	SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
	SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
	SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
	SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
	SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
	SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
	SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);
	return 1;
}

stock SetPlayerSelectSkin(playerid, select_skin, skinid)
{
	SetPlayerData(playerid, P_SELECT_SKIN, select_skin);
	SetPlayerSkin(playerid, skinid);
}

stock SetPlayerPosEx(playerid, Float: x, Float: y, Float: z, Float: angle, interior = -1, virtual_world = -1, freeze = true)
{
	if(interior > -1)
		PlayerTeleportInit(playerid, x, y,  z, angle);
	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, angle);
	SetCameraBehindPlayer(playerid);
	if(interior != -1 && GetPlayerInterior(playerid) != interior)
	{
		SetPlayerInterior(playerid, interior);
	}
	if(virtual_world != -1 && GetPlayerVirtualWorld(playerid) != virtual_world)
	{
		SetPlayerVirtualWorld(playerid, virtual_world);
	}
	if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		SetPlayerData(playerid, P_LAST_PICKUP, -1);
	}
	if(freeze)
	{
		TeleportFreeze(playerid, 1200);
	}
	return 1;
}

stock TeleportFreeze(playerid, ms)
{
	if(ms <= 0)
		return 0;
	TogglePlayerControllable(playerid, false);
	SetTimerEx("TeleportUnfreeze", ms, false, "d", playerid);
	return 1;
}

public: TeleportUnfreeze(playerid)
{
	TogglePlayerControllable(playerid, true);
	return 1;
}

stock JailPlayer(playerid, jail_time) 
{
	new jail_pos = random(sizeof g_jail_positions);
	SetPlayerPosEx
	(
		playerid,
		g_jail_positions[jail_pos][0],
		g_jail_positions[jail_pos][1],
		g_jail_positions[jail_pos][2],
		g_jail_positions[jail_pos][3],
		4, 5
	);
	SetPlayerData(playerid, P_JAIL, jail_time * 60);
	UpdatePlayerDatabaseInt(playerid, "jail", jail_time * 60);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"До конца заключения\",%d,0]", gettime() + GetPlayerData(playerid, P_JAIL));
	BitStream_2(playerid, s_CefInterface, t_CefShow, "InformationTimer", STRING_GLOBAL);
	SetPlayerSkin(playerid, 50);	
	UnStarJail(playerid);
}

public:UnStarJail(playerid)
{
	new criminalid = playerid; 
	SetPlayerData(criminalid, P_SUSPECT, 0);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);
	SetPlayerSuspectInit(criminalid);	
}

public:InfoJailTime(playerid)
{
	if(GetPlayerData(playerid, P_JAIL))
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"До конца заключения\",%d,0]", gettime() + GetPlayerData(playerid, P_JAIL));
		BitStream_2(playerid, s_CefInterface, t_CefShow, "InformationTimer", STRING_GLOBAL);
		SetPlayerSkin(playerid, 50);
	}
}
public:CloseInfoJailTime(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "InformationTimer");
	ResetSkin(playerid);
}
public:NotFoudTurm(playerid)
{
	if(GetPlayerData(playerid, P_JAIL))
	{
		BitStream_2(playerid, s_CefInterface, t_CefShow, "ActorDialog","[0,1, \"Вы оказались в тюрьме строгого режима, где каждый день превращается в настоящую борьбу за выживание. Ваши обязанности включают в себя чистку унитазов и уборку параши. Шанс на побег? Всего 20%, побег осуществляется через канализацию, ваша задача как можно больше мыть унитазов и чистить параш чтобы найти выход на свободу ! Но будьте осторожны: если вы решите рискнуть, за вами начнется настоящая погоня, и звезды — это только начало\", \"sounds/new_year/ice_breaker/maksim/DX_organizator_01.mp3\", \"Мирон Горгидзе\", [], [\"\"]]");
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.playSound('https://xtreme-crmp.ru/Music/audioturma.mp3', 0, 10311, 0.65)");
		SetTimerEx("StopedNotFoundTurm", 23000 , false, "i", playerid);
	}
}

public:StopedNotFoundTurm(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "ActorDialog");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.destroySound(10311, 30)");
}

public: ShowDialogJTrade(playerid)
{
    Dialog
    (
        playerid, DIALOG_JAIL_TRADE, DIALOG_STYLE_TABLIST_HEADERS,
        "Товары",
        "Товар<t>Кол-во сигарет\n\n"\
        "1. Временный доступ к телефону<t>3 шт.\n"\
        "2. Заточка<t>5 шт.\n"\
        "3. Лопата<t>15 шт.\n"\
		"4. Глушилка связи<t>20 шт.\n"\
        "5. Купить наколки +1<t>От 10 шт.",
        "Купить", "Закрыть"
    );
}

public:TualetMoikaEditor(playerid)
{
    new randomValue = random(100);
    if (randomValue < 15) // 15% шанс
    {
		SendClientMessage(playerid, COLOR_RED, "У вас есть шанс на побег!");
		Dialog(playerid, DIALOG_EXJAIL, DIALOG_STYLE_MSGBOX, "{6EF83C}Тайный выход", "{FFFFFF}Вы уверены, что хотите совершить побег через канализацию?", "Да", "Нет");
		
    }
    else // 80% шанс
    {
        SendClientMessage(playerid, COLOR_RED, "Вы помыли туалет.");
    }
}

public:InfoRunJail(playerid) {
    new playerName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playerName, sizeof(playerName));
    static message[256];
    format(message, sizeof(message), "{FFFFFF}%s {0049FF}сбежал из Тюрьмы строгого режима (Тюрьма). Всем постам немедленно выдвинуться!", playerName);
    SendMessageToOnlyFsin(message, -1, playerid);
    return 1;
}

public:PobegGetStarted(playerid)
{
	UnjailPlayer(playerid);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Overlay", "[700, 1000]");
	SetPlayerSkin(playerid, 50);
	AddPlayerData(playerid, P_SUSPECT, +, 3);
	SetPlayerSuspectInit(playerid);
	UpdatePlayerDatabaseInt(playerid, "suspect", GetPlayerData(playerid, P_SUSPECT));
	SCM(playerid, 0xCECECEFF, "Побег успешно удался, но вас зафиксировали камеры. Будьте осторожны, полиция может найти вас вот-вот!");				
	SetPlayerPosEx
	(
		playerid,
		-1846.0076,-2551.1685,1.7344,269.9852,
		0, 0
	);				
	InfoRunJail(playerid);
}

stock UnjailPlayer(playerid)
{
	SetPlayerPosEx
	(
		playerid,
  		-1792.9584,-2628.5273,10.0593,0.3220,
		0, 0
	);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.destroySound(10311, 30)");
	SetPlayerData(playerid, P_JAIL, 0);
	UpdatePlayerDatabaseInt(playerid, "jail", 0);
	playerCigarettes[playerid] = 0;
	SetPVarInt(playerid, "Phone_access", 0);
	UnStarJail(playerid);
	CloseInfoJailTime(playerid);
}

stock UpdatePlayerDatabaseInt(playerid, field[], value)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new query[90];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %e=%d WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	return 1;
}

stock UpdatePlayerDatabaseFloat(playerid, field[], Float:value)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new query[90];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %e=%f WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	return 1;
}

stock UpdatePlayerDatabaseString(playerid, field[], value[])
{
	if(!IsPlayerConnected(playerid)) return 1;
	new query[150];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %e='%e' WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	query[0] = EOS;
	return 1;
}

stock FixKick(playerid, message[] = "Введите /q (/quit) чтобы выйти", time_ms = 500)
{
	if(strlen(message) > 10000)
		SendClientMessage(playerid, 0xFF6600FF, message);
	if(time_ms == 10000000)
	{
		new fmt_text[65];
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] кикнут антифлуд-системой", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}
	SetTimerEx("FixedKick", time_ms, false, "i", playerid);
	return 1;
}

stock CreateVehicles()
{
	new spawn_time = 60 * 5; // 5 минут
	new vehicles_count;
	for(new idxs; idxs < sizeof g_ferm_car; idxs ++)
	{
	    CreateVehicle(478,g_ferm_car[idxs][FER_POS_X],g_ferm_car[idxs][FER_POS_Y],g_ferm_car[idxs][FER_POS_Z],g_ferm_car[idxs][FER_POS_A],113,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
		vodila[idxs] = -1;
	}
	new car_police[14];
	car_police[0] = CreateVehicle(15609, 198.8777, 1368.8634, 11.7835, 171.4460, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[1] = CreateVehicle(15609, 202.8239, 1368.1943, 11.7862, 170.8694, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[2] = CreateVehicle(598, 206.5267, 1367.4874, 11.6218, 169.7002, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[3] = CreateVehicle(598, 210.3746, 1366.9320, 11.6257, 171.2347, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[4] = CreateVehicle(598, 214.4766, 1366.2396, 11.6325, 167.4563, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[5] = CreateVehicle(15607, 218.5738, 1366.1223, 11.9299, 169.6456, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[6] = CreateVehicle(15607, 222.4732, 1365.5402, 11.9233, 169.7375, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[7] = CreateVehicle(15607, 226.4768, 1364.8549, 11.9245, 169.0939, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[8] = CreateVehicle(15606, 230.2928, 1363.6844, 12.2058, 169.8107, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[9] = CreateVehicle(15606, 234.2896, 1362.9651, 12.2060, 169.1411, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[10] = CreateVehicle(15606, 238.3762, 1362.1558, 12.2061, 170.8689, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[11] = CreateVehicle(15608, 242.0080, 1361.5770, 12.1225, 170.3080, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[12] = CreateVehicle(15608, 246.1472, 1360.8417, 12.1245, 171.3198, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	car_police[13] = CreateVehicle(15608, 250.1328, 1360.2233, 12.1244, 168.7506, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR);
	for(new i; i < 14; i++)
	{
		SetVehicleVirtualWorld(car_police[i], 0);
		LinkVehicleToInterior(car_police[i], 0);
	}
	// --------------- Правительство
	CreateVehicle(409,-2503.4973,1575.9911,53.1492,199.9906,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // rolls royse phantom 1 1
	CreateVehicle(15146,-2499.7456,1577.2207,53.2251,200.5702,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // кулинан 1 1
	CreateVehicle(405,-2492.3027,1580.1443,53.0852,199.7967,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // Audi RS-6 AVANT 1 1
	CreateVehicle(15153,-2495.7761,1578.8550,53.1419,199.7284,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // X7 1 1
	CreateVehicle(487,-2423.5889,1593.8810,53.3698,74.8045,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // маверик 1 1
	CreateVehicle(15213,-2486.5664,1582.6829,52.9746,199.9983,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // camaro 1 1
	CreateVehicle(15213,-2489.2966,1581.2384,52.9748,199.8779,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // camaro 1 1
	// --------------- Автобусы
	AddStaticVehicleEx(418,827.8768,765.9424,12.2380,68.0135,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус
	AddStaticVehicleEx(418,830.0118,771.4808,12.2369,68.4209,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус
	AddStaticVehicleEx(418,832.8524,775.8442,12.2300,67.8730,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус
	AddStaticVehicleEx(418,834.2240,781.6674,12.2216,68.7841,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус
	AddStaticVehicleEx(418,836.4987,787.4495,12.2145,69.0537,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус 
	AddStaticVehicleEx(418,840.1808,793.6493,12.2073,68.9578,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус 
	AddStaticVehicleEx(418,786.6155,721.7680,12.5965,340.3144,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус 
	AddStaticVehicleEx(418,795.3056,745.0008,12.5841,339.3493,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус 
	AddStaticVehicleEx(418,803.6525,767.1485,12.5819,339.3504,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Автобус 
	// --------------- PUPG МП
	AddStaticVehicleEx(17410, -1480.6693, 6143.5054, 81.8303, 179.5176, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(17410, -1560.3650, 6046.3633, 82.1926, 359.2093, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(17410, -1426.3646, 6054.4233, 81.4203, 269.5324, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(500, -1587.3289, 6096.4375, 81.3961, 270.1072, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(500, -1574.8627, 6096.5430, 80.9308, 270.4586, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(500, -1559.1791, 6096.6646, 80.5633, 271.0620, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(500, -1403.3960, 6114.2173, 80.5212, 90.6890, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(500, -1377.2709, 6114.4141, 81.2389, 90.0123, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(500, -1385.1697, 6108.9512, 80.9418, 89.7866, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(470, -1434.5293, 6111.0835, 80.7237, 180.6751, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(470, -1363.3842, 6027.2861, 80.8188, 89.9837, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(470, -1520.4847, 6072.2148, 81.0220, 359.3676, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(470, -1547.9583, 6154.1470, 80.0447, 166.4134, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(483, -1497.4440, 6132.1289, 81.2508, 178.3463, 1, 1, spawn_time, 0); // car
	AddStaticVehicleEx(483, -1429.4659, 6067.4688, 81.5010, 269.4628, 1, 1, spawn_time, 0); // car
	// --------------- Армия
	CreateVehicle(17410, 1181.6855, 3223.1780, 12.3623, 359.8683, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 1
	CreateVehicle(17410, 1170.5500, 3222.9749, 12.3864, 0.2321, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 2
	CreateVehicle(17410, 1158.6925, 3222.8894, 12.3824, 359.7552, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 3
	CreateVehicle(470, 1134.7308, 3223.3884, 11.7024, 359.3763, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 4
	CreateVehicle(470, 1123.8486, 3223.7302, 11.7024, 0.4163, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 5
	CreateVehicle(470, 1112.1215, 3223.5396, 11.7024, 3.5262, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 6
	CreateVehicle(578, 1099.6592, 3221.6543, 11.0079, 1.1561, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 7
	CreateVehicle(578, 1087.6439, 3222.4653, 11.0079, 359.7804, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 8
	CreateVehicle(578, 1076.7375, 3220.4746, 11.0079, 1.2684, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 9
	CreateVehicle(483, 1064.5162, 3221.3132, 11.7713, 359.3542, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 10
	CreateVehicle(500, 1177.5533, 3249.7424, 11.5523, 180.6293, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(500, 1173.9113, 3249.7002, 11.5523, 179.1695, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(500, 1170.2692, 3249.6855, 11.5523, 179.5634, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(500, 1166.6273, 3249.7170, 11.5523, 179.5066, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(500, 1162.8800, 3387.3125, 11.4910, 0.1270, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(500, 1165.9614, 3387.3040, 11.4910, 359.0325, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(500, 1169.0427, 3387.2798, 11.4910, 359.9870, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(500, 1172.0725, 3387.7134, 11.4910, 357.7411, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(548, 1181.1371, 3530.8313, 12.9682, 206.9695, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(548, 1204.0703, 3541.6304, 12.9682, 206.9727, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(548, 1227.1212, 3553.1274, 12.9682, 207.4991, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(520, 1120.3120, 3467.4084, 11.8983, 0.2333, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(520, 1061.4357, 3466.6052, 11.9003, 0.3267, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	CreateVehicle(520, 1034.7521, 3466.2554, 11.8998, 0.8130, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // 
	// --------------- Федеральная служба безопасности
	CreateVehicle(17417, -270.8570, 553.3408, 12.9088, 176.7549, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(17417, -268.2188, 553.1105, 12.9087, 176.1170, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(17417, -265.2938, 553.0045, 12.9079, 177.4753, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(15143, -262.6269, 552.9198, 12.7502, 178.6007, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(15143, -260.0338, 553.0134, 12.7501, 177.8761, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(15143, -257.1938, 552.5089, 12.7506, 176.7151, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(15143, -254.3467, 552.0745, 12.7500, 178.2918, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(15143, -250.8901, 551.8599, 12.8177, 177.7362, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(487, -211.8000, 558.8664, 12.7763, 80.4880, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(15286, -247.7062, 551.9990, 13.1714, 177.6564, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(15286, -244.0937, 551.8764, 13.2300, 176.7555, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(15602, -240.9164, 551.8977, 12.9692, 177.1461, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(17401, -209.3350, 539.4055, 12.1635, 76.9232, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(17401, -210.1112, 535.9548, 12.2105, 77.7141, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	CreateVehicle(17401, -210.8880, 532.6641, 12.2455, 76.6780, 0, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ФСБ
	// --------------- ФСИН
	CreateVehicle(427,-1815.2554,-2725.2976,10.7708,200.9662,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН
	CreateVehicle(427,-1818.3779,-2726.4597,10.8539,201.0103,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН
	CreateVehicle(427,-1821.4937,-2727.6399,10.7734,200.4333,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 
	CreateVehicle(427,-1824.3861,-2728.9360,10.7796,199.5859,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН
	CreateVehicle(15687,-1827.7821,-2729.4016,10.8805,200.3697,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН
	CreateVehicle(15687,-1830.8792,-2730.8164,10.8861,200.6652,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН
	CreateVehicle(15687,-1833.8223,-2731.7065,10.8842,200.3689,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 
	CreateVehicle(15687,-1837.2834,-2732.7537,10.8839,200.1794,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 
	CreateVehicle(15687,-1840.2635,-2733.7793,10.8808,200.7457,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 
	CreateVehicle(554,-1843.6415,-2741.9485,11.4603,289.1718,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН
	CreateVehicle(554,-1842.5437,-2745.1978,11.4614,290.0756,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН
	CreateVehicle(554,-1841.2288,-2748.5830,11.4731,290.9094,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 	
	CreateVehicle(554, -1840.1531,-2751.7485,11.4596,291.1542,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 	
	CreateVehicle(15231,-1839.0190,-2754.3496,10.9082,289.5031,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 	
	CreateVehicle(15231,-1837.8893,-2757.3135,10.9326,290.2964,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 	
	CreateVehicle(15231,-1836.3759,-2760.6963,10.9324,290.2462,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 	
	CreateVehicle(430,-1940.3544,-2591.5803,-0.2613,280.1562,8,8, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 
	CreateVehicle(487,-1736.4817,-2937.8904,11.5300,17.0329,8,8, spawn_time, 0, VEHICLE_ACTION_TYPE_FSIN_CAR); // ФСИН 
	// --------------- Fixed nonrespawn car
	CreateVehicle(15670, -2052.6299, -216.1347, 25.7110, 349.3867, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2057.1108, -214.5135, 25.7089, 348.4944, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2062.0098, -213.9789, 25.7089, 349.5293, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2066.9568, -212.8959, 25.7085, 349.0983, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2071.8127, -212.0707, 25.7137, 348.6375, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2076.5044, -210.9969, 25.7135, 348.8573, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2030.8573, -175.8051, 25.7092, 78.6758, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2031.8887, -180.6991, 25.7074, 79.4031, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2032.8085, -185.4457, 25.7108, 78.8351, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2033.7085, -190.2104, 25.7149, 79.5558, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2034.4479, -195.0732, 25.7081, 78.9420, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	CreateVehicle(15670, -2035.6979, -200.0765, 25.7097, 79.3019, 8, 8, spawn_time, 0, VEHICLE_ACTION_TYPE_WORKTRASH); // Мусор
	// --------------- Радио ТРК ритм
	CreateVehicle(582,2197.1492,-1951.4202,18.7881,290.7231,79,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(15157,2195.0688,-1981.1245,18.7765,244.8187,79,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(15157,2193.4563,-1984.2747,18.7768,239.6632,79,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(551,2191.8257,-1987.6558,18.6688,233.7069,79,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(551,2189.4192,-1990.2644,18.6752,227.7432,79,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(15194,2187.3308,-1993.4224,18.9792,222.0561,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(15194,2184.6213,-1996.1213,18.8763,217.0417,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	// --------------- Больница
	new car_hospiatl[13];
	car_hospiatl[0] = CreateVehicle(416, 699.5395, 1763.6826, 11.8324, 130.7793, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 1
	car_hospiatl[1] = CreateVehicle(416, 697.1700, 1766.8615, 11.8323, 128.9718, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 2
	car_hospiatl[2] = CreateVehicle(416, 694.3016, 1769.7866, 11.8321, 129.0822, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 3
	car_hospiatl[3] = CreateVehicle(416, 690.9061, 1772.3298, 11.8315, 128.5790, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 4
	car_hospiatl[4] = CreateVehicle(416, 688.6376, 1775.8107, 11.8318, 130.5794, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 5
	car_hospiatl[5] = CreateVehicle(416, 686.1968, 1779.4364, 11.8323, 129.1514, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 6
	car_hospiatl[6] = CreateVehicle(416, 683.0171, 1783.1648, 11.8317, 128.9011, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 7
	car_hospiatl[7] = CreateVehicle(17415, 680.3270, 1786.8612, 11.8734, 128.9285, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 8
	car_hospiatl[8] = CreateVehicle(17415, 677.4202, 1790.1952, 11.8736, 130.6730, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 9
	car_hospiatl[9] = CreateVehicle(15121, 674.5099, 1793.3959, 11.8890, 131.3689, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 10
	car_hospiatl[10] = CreateVehicle(15121, 671.4595, 1797.0447, 11.8894, 127.8910, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 11
	car_hospiatl[11] = CreateVehicle(15121, 668.4343, 1800.4789, 11.8891, 128.0011, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 12
	car_hospiatl[12] = CreateVehicle(15121, 666.0571, 1803.6823, 11.8899, 129.4663, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 13
	for(new i; i < 13; i++)
	{
		SetVehicleVirtualWorld(car_hospiatl[i], 0);
		LinkVehicleToInterior(car_hospiatl[i], 0);
	}
	CreateVehicle(487, 639.6889,1755.8445,29.9544,129.0405,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Вертолет
	//----------------- Ферма Машины ---------------------
	CreateVehicle(531,1654.957,630.228,16.613,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(531,1650.889,630.245,16.611,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(531,1646.679,630.226,16.610,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(531,1642.787,630.102,16.611,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(531,1638.916,630.046,16.611,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(532,1594.989,611.532,17.831,179.1854,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(532,1608.136,611.887,17.832,179.1854,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	//----------------инкассаторки--------------------------
    Inkasator[0] = AddStaticVehicleEx(428,1807.3795,2257.5574,15.2320,269.5432,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_INKAS_CAR); //Инкассатор
    Inkasator[1] = AddStaticVehicleEx(428,1807.5477,2249.6047,15.2401,271.8061,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_INKAS_CAR); //Инкассатор
	Inkasator[2] = AddStaticVehicleEx(428,1807.5520,2253.6443,15.2430,268.7008,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_INKAS_CAR); //Инкассатор
	Inkasator[3] = AddStaticVehicleEx(428,1807.5560,2261.3799,15.2232,270.0005,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_INKAS_CAR); //Инкассатор
    Inkasator[4] = AddStaticVehicleEx(428,1807.5560,2265.4600,15.2232,269.9995,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_INKAS_CAR); //Инкассатор
	//----------------Дальнобойщики--------------------------
	//лыткарино
	CreateVehicle(15095,-2451.1936,-7.2010,14.1733,166.8005, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	CreateVehicle(15095,-2458.5398,-5.3462,14.1734,168.3058, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	CreateVehicle(15095,-2465.5256,-3.6849,14.1734,169.0451, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	CreateVehicle(15095,-2472.8955,-1.7559,14.1729,167.2526, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	CreateVehicle(15095,-2480.1777,0.0743,14.1725,168.5534, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	//южный 
	CreateVehicle(15095,2409.0625,-688.9885,12.5226,89.3875, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	CreateVehicle(15095,2409.3567,-681.3992,12.5217,88.4494, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	CreateVehicle(15095,2409.3152,-673.9944,12.5218,90.1935, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	CreateVehicle(15095,2409.4377,-666.6044,12.5225,89.4775, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	CreateVehicle(15095,2409.4736,-659.1310,12.5226,90.9086, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	//батырево
	CreateVehicle(15095,2067.5220,1790.3796,15.5005,0.6388, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	CreateVehicle(15095,2074.8145,1790.4099,15.5008,2.6084, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	CreateVehicle(15095,2082.3738,1790.4319,15.5015,1.9344, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	CreateVehicle(15095,2089.8953,1790.4175,15.5020,1.4974, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	CreateVehicle(15095,2097.3542,1790.4884,15.5018,1.7607, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	// --------------- Электрики
	CreateVehicle(15629,1801.0289,2477.0701,16.1066,34.5776,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRIK); //Дальнобойщики
	CreateVehicle(15629,1804.5516,2479.4497,16.1066,34.1451,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRIK); //Дальнобойщики
	CreateVehicle(15629,1807.9396,2481.8733,16.1086,35.8126,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRIK); //Дальнобойщики
	CreateVehicle(15629,1830.8522,2537.4937,16.1066,124.9374,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRIK); //Дальнобойщики
	CreateVehicle(15629,1833.0513,2534.2527,16.1103,123.9805,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRIK); //Дальнобойщики
	CreateVehicle(15629,1835.0750,2531.2168,16.1144,123.8763,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRIK); //Дальнобойщики
	//=========================================================аренда===============
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BUS_DRIVER)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RERFECT)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_MECHANIC)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TESLA_CAR)
		{
			SetVehicleNumber(i, 0, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_1)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_PPS_CAR)
		{
			 SetVehicleNumber(i, 6, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_2)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_3)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_GOV_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ARMY_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_MED_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RADIO_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_INKAS_CAR) //инкассаторки
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FBI_CAR) //ФСБ
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FSIN_CAR) //ФСБ
		{
			 SetVehicleNumber(i, 6, GenerateCarNumberRu(), GenerateCarRegRu());
		}		
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_PPS_CAR)
		{
			 SetVehicleNumber(i, 6, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_MCHS_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BAT_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_LYT_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FERMA_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_INKAS_CAR) 
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FIRE_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
	    vehicles_count++;
	}
	print("[Vehicle]: Все транспортные средства созданы");
}

stock CreateMedBeds()
{
	for(new i; i < sizeof g_med_bed_pos; i ++)
	{
		g_med_bed_label[i] = CreateDynamic3DTextLabel(" ", 0xFFFFFFEE, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2], 5.0, _, _, _, -1, -1, _, 30.0);
		UpdateMedBed(i);
	}
}

stock CreateArmories()
{
	for(new idx; idx < sizeof g_armory; idx ++)
	{
		CreatePickup
		(
			g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? 1242 : 1239,
			23,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z],
			-1,
			PICKUP_ACTION_TYPE_ARMORY, g_armory[idx][A_TYPE]
		);
		new fmt_text[55];
		format(fmt_text, sizeof fmt_text, "%s\n{FFFFFF}%s",
		g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? "Получение бронежилета" : "Склад организации",
		g_armory[idx][A_DESCRIPTION]);
		CreateDynamic3DTextLabel
		(
			fmt_text,
			0x3399FFFF,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z] + 1.0,
			8.0,
			_, _, _, -1, -1, _,
			15.0
		);
	}
}

stock ShowPlayerPayForRentDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PAY_FOR_RENT, DIALOG_STYLE_LIST,
		"{66CC00}Оплата",
		"1. Заплатить за дом\n"\
		"2. Оплатить аренду бизнеса\n"\
		"3. Оплатить аренду киоска\n"\
		"4. Оплатить аренду гаража\n"\
		"5. Оплатить аренду огорода\n"\
		"6. Оплатить аренду нефтяного насоса",
		"Далее", "Отмена"
	);
	return 1;
}

stock ClearBankAccountInfo(playerid, accountid)
{
	strmid(g_bank_account[playerid][accountid][BA_NAME], "None", 0, 21, 21);
	SetBankAccountData(playerid, accountid, BA_ID, 0);
	SetBankAccountData(playerid, accountid, BA_PIN_CODE, 0);
	format(g_bank_account[playerid][accountid][BA_BALANCE], 21, "0");
	SetBankAccountData(playerid, accountid, BA_REG_TIME, 0);
}

stock ClearBankAccountsData(playerid)
{
	for(new idx; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);
	}
}

stock ShowPlayerSettingServer(playerid)
{
	Dialog
	(
		playerid, DIALOG_SETTING_SERV, DIALOG_STYLE_LIST,
		"{"#cGold"}Настройки сервера",
		"1. {"#cW"}Изменить название сервера\n"\
		"2. {"#cW"}Изменить пароль сервера\n"\
		"3. {"#cW"}Управление X2\n"\
		"4. {"#cW"}Управление X3\n"\
		"5. {"#cW"}Произвести рестарт сервера\n"\
		"6. {"#cW"}Изменить логотип",
		"Выбрать", "Назад"
	);
	return 1;
}

stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
	if(IsPlayerConnected(x)) {
	GetPlayerIp(x,against_ip,32);
	if(!strcmp(against_ip,test_ip)) ip_count++;
	}
	}
	return ip_count;
}

stock ShowPlayerBankDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK, DIALOG_STYLE_LIST,
		"{00CC00}Банк",
		"Мои счета\n"\
		"Открыть новый счет",
		"Выбрать", "Отмена"
	);
}

stock ShowPlayerBankAccounts(playerid)
{
	new query[64];
	new Cache: result;
	new rows;
	new bank_accounts_list[(37 * MAX_BANK_ACCOUNTS) + 22 + 1];
	format(query, sizeof query, "SELECT * FROM bank_accounts WHERE uid=%d LIMIT %d", GetPlayerAccountID(playerid), MAX_BANK_ACCOUNTS);
	result = mysql_query(mysql, query);
	rows = cache_num_rows();
	bank_accounts_list = "{99CC00}Основной счет\n";
	for(new idx, count; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);
		if(idx < rows)
		{
			SetBankAccountData(playerid, idx, BA_ID, cache_get_row_int(idx, 0));
			cache_get_row(idx, 2, g_bank_account[playerid][idx][BA_NAME], mysql, 21);
			cache_get_row(idx, 4, g_bank_account[playerid][idx][BA_PIN_CODE], mysql, 9);
			cache_get_row(idx, 3, g_bank_account[playerid][idx][BA_BALANCE], mysql, 21);
			SetBankAccountData(playerid, idx, BA_REG_TIME, cache_get_row_int(idx, 5));
			format(query, sizeof query, "%s - №%d\n", GetBankAccountData(playerid, idx, BA_NAME), GetBankAccountData(playerid, idx, BA_ID));
			strcat(bank_accounts_list, query);
			SetPlayerListitemValue(playerid, count ++, idx);
		}
	}
	cache_delete(result);
	return Dialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_LIST, "{FFD83D}Ваши счета", bank_accounts_list, "Операции", "Назад");
}

stock IsValidBankAccount(playerid, accountid)
{
	if(0 <= accountid <= MAX_BANK_ACCOUNTS-1)
	{
		if(GetBankAccountData(playerid, accountid, BA_ID) > 0)
		{
			return 1;
		}
	}
	return 0;
}

stock UpdateBankAccountData(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new query[64];
		new Cache: result;
		format(query, sizeof query, "SELECT balance FROM bank_accounts WHERE id=%d LIMIT 1", GetBankAccountData(playerid, accountid, BA_ID));
		result = mysql_query(mysql, query);
		if(cache_num_rows())
			cache_get_row(0, 0, g_bank_account[playerid][accountid][BA_BALANCE], mysql, 21);
		cache_delete(result);
	}
}

stock GetBankAccountBalance(accountid)
{
	new query[64];
	new Cache: result;
	format(query, sizeof query, "SELECT balance FROM bank_accounts WHERE id=%d LIMIT 1", accountid);
	result = mysql_query(mysql, query);
	if(cache_num_rows())
		cache_get_row(0, 0, query, mysql, 21);
	cache_delete(result);
	return query;
}

stock ShowPlayerBankAccountOperation(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK_ACCOUNT_OPERATION, DIALOG_STYLE_LIST,
		"{FFD83D}Список операций",
		"1. Информация о счете\n"\
		"2. История операций\n"\
		"3. Снять деньги\n"\
		"4. Положить деньги\n"\
		"5. Перевести на другой счет\n"\
		"6. Переименовать счет\n"\
		"7. Изменить PIN-код",
		"Выбрать", "Назад"
	);
	return 1;
}

stock ShowPlayerBankAccountTransfer(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Исходный счет:\t%d\n"\
			"Назначение:\t\t%s, №%d\n\n"\
			"Введите сумму для перевода:",
			GetBankAccountData(playerid, accountid, BA_ID),
			GetPlayerBankTransfer(playerid, BT_NAME),
			GetPlayerBankTransfer(playerid, BT_ID)
		);
		Dialog(playerid, DIALOG_BANK_ACCOUNT_TRANSFER_2, DIALOG_STYLE_INPUT, "{FFD83D}Перевод средств", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock ShowPlayerATMTransfer(playerid)
{
	new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
	if(transfer_id)
	{
		new fmt_str[64 + 1];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Вы выполняете перевод на счет №%d\n"\
			"Укажите сумму:",
			transfer_id
		);
		Dialog(playerid, DIALOG_ATM_TRANSFER_MONEY_2, DIALOG_STYLE_INPUT, "{FFD83D}Безналичный перевод", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock IsABadBankAccountName(dest[], pos=0)
{
	new is_bad_name = false;
	do
	{
		switch(dest[pos])
		{
			case
				'a'..'z', 'A'..'Z', 'а'..'я', 'А'..'Я', '0'..'9': continue;
			default:
				is_bad_name = true;
		}
	}
	while(dest[++pos]);
	return is_bad_name;
}

stock BankAccountLog(playerid, accountid, description[])
{
	new query[180 + 1];
	mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts_log (acc_id,uip,time,description) VALUES (%d,'%e',%d,'%e')", accountid, GetPlayerIpEx(playerid), gettime(), description);
	mysql_query(mysql, query, false);
	return 1;
}

stock ShowPlayerBankAccountLog(playerid, accountid)
{
	new fmt_str[128];
	new Cache: result;
	new rows;
	format(fmt_str, sizeof fmt_str, "SELECT FROM_UNIXTIME(time,'%%Y-%%m-%%d') AS date,description FROM bank_accounts_log WHERE acc_id=%d ORDER BY id DESC LIMIT 10", accountid);
	result = mysql_query(mysql, fmt_str);
	rows = cache_num_rows();
	if(rows)
	{
		str_q[0] = EOS;
		format(str_q,sizeof str_q,"{FFFFFF}");
		new day, month, year;
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str);
			sscanf(fmt_str, "P<->ddd", day, month, year);
			cache_get_row(idx, 1, fmt_str);
			format(fmt_str, sizeof fmt_str, "%d %s %d г.\t\t%s\n", day, GetMonthName(month), year, fmt_str);
			strcat(str_q, fmt_str);
		}
		Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFD83D}Последние 10 операций", str_q, "Вернуться", "");
	}
	else Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFD83D}История", "{FFFFFF}История операций пуста", "Вернуться", "");
	cache_delete(result);
	return 1;
}

stock RemovePlayerAttachedObjects(playerid)
{
	for(new idx; idx < MAX_PLAYER_ATTACHED_OBJECTS; idx ++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, idx))
		{
			RemovePlayerAttachedObject(playerid, idx);
		}
	}
}

stock RemovePlayerAttachedObjectEx(playerid, ...)
{
	new args = numargs()-1;
	for(new idx; idx < args; idx ++)
		RemovePlayerAttachedObject(playerid, getarg(idx + 1));
}

stock MapIconsInit()
{
	for(new idx; idx < sizeof map_icons; idx ++)
	{
		CreateDynamicMapIcon
		(
			GetMapIconsData(idx, MI_POS_X),
			GetMapIconsData(idx, MI_POS_Y),
			GetMapIconsData(idx, MI_POS_Z),
			GetMapIconsData(idx, MI_TYPE),
			0,
			0,
			0,
			-1,
			MAP_ICON_STREAM_DISTANCE,
			MAPICON_LOCAL
		);
	}
}

stock TeleportPickupsInit()
{
	new Text3D:buffer;
	for(new idx; idx < sizeof g_teleport; idx ++)
	{
		if(strlen(GetTeleportData(idx, T_NAME)) && !GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD))
		{
			buffer = CreateDynamic3DTextLabel
			(
				GetTeleportData(idx, T_NAME),
				0x3399FFEE,
				GetTeleportData(idx, T_PICKUP_POS_X),
				GetTeleportData(idx, T_PICKUP_POS_Y),
				GetTeleportData(idx, T_PICKUP_POS_Z) + 0.8,
				5.0,
				INVALID_PLAYER_ID,
				INVALID_VEHICLE_ID,
				0,
				0,
				0,
				-1,
				STREAMER_3D_TEXT_LABEL_SD
			);
			SetTeleportData(idx, T_LABEL, buffer);
		}
		CreatePickup(1318, 23, GetTeleportData(idx, T_PICKUP_POS_X), GetTeleportData(idx, T_PICKUP_POS_Y), GetTeleportData(idx, T_PICKUP_POS_Z), GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD), PICKUP_ACTION_TYPE_TELEPORT, idx);
	}
	CreatePickup(1318, 23, 5.6028, -23.3124, 1080.9968, -1, PICKUP_ACTION_TYPE_BIZ_CAR_ENT); // авторынок телепорт ко входу
	CreatePickup(1318, 23, 5.9334, -25.4932, 1085.9291, -1, PICKUP_ACTION_TYPE_BIZ_CAR_EXI); // авторынок телепорт к выходу
	print("[TP]: Все входы/выходы созданы");
}

stock AtmsInit()
{
	new Float: x, Float: y, Float: z, Float: rot_z;
	new Float: dist = 0.6; // дистацния пикапа от банкомата
	for(new idx; idx < sizeof g_atm; idx ++)
	{
		x = GetATMInfo(idx, A_POS_X);
		y = GetATMInfo(idx, A_POS_Y);
		z = GetATMInfo(idx, A_POS_Z);
		rot_z = GetATMInfo(idx, A_ROT_Z);
		CreateDynamicObject(2942, x, y, z, 0.0, 0.0, rot_z, -1, -1, -1, STREAMER_OBJECT_SD, 100.0);
		CreateDynamic3DTextLabel("Банкомат\n{FFCC33}Нажмите ~k~~SNEAK_ABOUT~", 0x00CC00FE, x, y, z + 0.7, 3.0); // 0x00CC00EE
		#if defined ATM_CREATED_PICKUP
		rot_z += 180.0;
		CreatePickup(1212, 23, x + dist * -floatsin(rot_z, degrees), y + dist * floatcos(rot_z, degrees), z, -1, PICKUP_ACTION_TYPE_ATM, idx);
		#endif
	}
	print("[ATM]: Все банкоматы созданы");
}

stock GetPlayerNearestATM(playerid, Float: dist = 1.3)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
	new atmid = -1;
	new Float: my_dist;
	for(new idx; idx < sizeof g_atm; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetATMInfo(idx, A_POS_X), GetATMInfo(idx, A_POS_Y), GetATMInfo(idx, A_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock ShowPlayerATMDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM, DIALOG_STYLE_LIST,
		"{FFD83D}Банкомат",
		"1. Снять с банковского счета\n"\
		"2. Положить на банковский счет\n"\
		"3. Баланс банковского счета\n"\
		"4. Снять со счета предприятия\n"\
		"5. Снять со счета киоска\n"\
		"6. Положить на счет предприятия\n"\
		"7. Пополнить мобильный телефон\n"\
		"8. Безналичный перевод\n"\
		"9. Оплатить штраф\n"\
		"10. Благотворительность\n"\
		"11. Снять со счета нефтяного насоса",
		"Выбрать", "Выйти"
	);
	return 1;
}

stock ShowPlayerATMSelectSumDialog(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_MONEY : DIALOG_ATM_PUT_MONEY, DIALOG_STYLE_LIST,
		"Выберите сумму",
		"1.000.000 руб\n"\
		"2.000.000 руб\n"\
		"5.000.000 руб\n"\
		"10.000.000 руб\n"\
		"20.000.000 руб\n"\
		"50.000.000 руб\n"\
		"100.000.000 руб\n"\
		"Другая сумма...",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMSelectOtherSum(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_OTHER_MONEY : DIALOG_ATM_PUT_OTHER_MONEY, DIALOG_STYLE_INPUT,
		"{FFD83D}Другая сумма",
		"{FFFFFF}Укажите сумму:",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMCharityDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM_CHARITY, DIALOG_STYLE_INPUT,
		"{FFD83D}Благотворительность",
		"{FFFFFF}Мы предлагаем вам перечислить любую\n"\
		"сумму на благотворительный счет\n"\
		"Microsoft. Все средства пойдут на\n"\
		"развитие нашей страны и поднятие\n"\
		"экономики.\n\n"\
		"Помимо этого, в мэриях время от времени\n"\
		"будут публиковаться списки тех, кто\n"\
		"сделал наибольшие взносы.\n\n"\
		"Этот список можно просмотреть командой\n"\
		"/charity. Там же можно узнать общую\n"\
		"сумму сделанных Вами пожертвований.",
		"Внести", "Закрыть"
	);
	return 1;
}

stock ShowPlayerATMCompanyDialog(playerid, bool: take)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);
	if(businessid != -1)
	{
		new fmt_str[64 + 1];
		format
		(
			fmt_str, sizeof fmt_str,
			"1. %s (№%d)",
			GetBusinessData(businessid, B_NAME), businessid
		);
		Dialog(playerid, take ? DIALOG_ATM_SELECT_COMPANY_TAKE : DIALOG_ATM_SELECT_COMPANY_PUT, DIALOG_STYLE_LIST, "{FFD83D}Выберите предприятие", fmt_str, "Выбрать", "Назад");
	}
	else if(businessid != -1)
	{
		ShowPlayerATMBusinessDialog(playerid, take);
	}
}

public: Licencion(playerid)
{
	new query[64];
	mysql_format(mysql, query, sizeof query, "UPDATE tickets SET status=1 WHERE uid=%d", GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);							
	SetPlayerData(playerid, P_DRIVING_LIC, 2); 
	SetPlayerData(playerid, P_WEAPON_LIC, 1); 
	UpdatePlayerDatabaseInt(playerid, "driving_lic", 2);
	UpdatePlayerDatabaseInt(playerid, "weapon_lic", 1); 
}

stock ShowPlayerATMBusinessDialog(playerid, bool:take)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_BIZ_TAKE_MONEY : DIALOG_ATM_BIZ_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetBusinessData(businessid, B_NAME),
			"{FFFFFF}Укажите сумму:",
			take ? ("Снять") : ("Положить"), "Выйти"
		);
	}
}

stock BanksInit()
{
	CreatePickup(1274, 23, 300.5571,304.2417,1001.0000, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x00CC00FF, 300.5571,304.2417,1001.0000 + 0.8, 8.0);
	CreatePickup(1274, 23, 294.5605,304.2592,1001.0000, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("Оплата\n{CCCC00}дома\nгаража\nАЗС\nбизнеса\nкиоска\nогорода\nнефтенасоса", 0x66CC66FF, 294.5605,304.2592,1001.0000 + 0.8, 8.0);
	CreatePickup(1274, 23, 418.3971,572.8312,-36.6100, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x00CC00FF, 418.3971,572.8312,-36.6100 + 0.8, 8.0);
	CreatePickup(1274, 23, 412.5228,574.4662,-36.6100, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("Оплата\n{CCCC00}дома\nбизнеса\nАЗС\nгаража", 0x66CC66FF, 412.5228,574.4662,-36.6100 + 0.8, 8.0);
}

stock TempJobsInit()
{
	new idx;
	for(idx = 0; idx < sizeof g_temp_jobs; idx ++)
	{
		CreatePickup(1275, 23, GetTempJobInfo(idx, TJ_POS_X), GetTempJobInfo(idx, TJ_POS_Y), GetTempJobInfo(idx, TJ_POS_Z), -1, PICKUP_ACTION_TYPE_TEMP_JOB, idx);
	}
	for(idx = 0; idx < sizeof miner_carriage; idx ++)
    {
        miner_carriage[idx][MC_STATUS] = false;
        miner_carriage[idx][MC_OBJECT_ID] = CreateDynamicObject(1769, miner_carriage[idx][MC_START_POS_X], miner_carriage[idx][MC_START_POS_Y], miner_carriage[idx][MC_START_POS_Z], 0.0, 0.0, 90.0);
        Streamer_SetIntData(STREAMER_TYPE_OBJECT, miner_carriage[idx][MC_OBJECT_ID], E_STREAMER_EXTRA_ID, OBJECT_TYPE_CARRIAGE);
        miner_carriage[idx][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -845.5309, 1211.0574, 3012.1621 + 3.0, 10.0);
        miner_carriage[idx][MC_PICKUP_ID] = CreatePickup(19135, 23, -845.5291,1213.5364,3011.5315, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
    }
    miner_job_area = CreateDynamicRectangle(-763.2994, 1207.1509, 3011.5295, 267.5658, 0, 0);
	for(new i; i < sizeof miner_job_load_pos; i ++)
	{
		CreateDynamic3DTextLabel("Место\nдобычи руды", 0xFFFF00AA, miner_job_load_pos[i][0], miner_job_load_pos[i][1], miner_job_load_pos[i][2], 10.0);
		miner_job_load_cp[i] = CreateDynamicCP(miner_job_load_pos[i][0], miner_job_load_pos[i][1], miner_job_load_pos[i][2], 1.2, _, _, _, 5);
	}
	CreatePickup(19134, 23, -480.0557,3389.6550,29.8350, 0, PICKUP_ACTION_TYPE_MINER_SELL_M);
	CreateDynamic3DTextLabel("{FFFFFF}Покупка металла\n{00CC00}500.000 рублей {FFFFFF}за 1 кг", 0x009933FF,  -480.0557,3389.6550,29.8350 + 1.0, 10.0);
	CreateDynamic3DTextLabel("{e48900}Раздевалка", 0x009933FF, GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_X), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Y), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Z) + 0.82, 5.0);
	for(idx = 1; idx < 3; idx ++)
	{
		CreatePickup(1275, 33, 345.3347, -413.3510, 994.7978, -1, PICKUP_ACTION_TYPE_TEMP_JOB, TEMP_JOB_FACTORY);
	}
	for(idx = 0; idx < sizeof factory_take_metall_pos; idx ++)
	{
		CreatePickup(19135, 23, factory_take_metall_pos[idx][0], factory_take_metall_pos[idx][1], factory_take_metall_pos[idx][2] - 0.4, -1, PICKUP_ACTION_TYPE_FACTORY_MET);
	}
	for(idx = 0; idx < sizeof factory_desk; idx ++)
	{
		factory_desk[idx][FD_USED] = false;
		factory_desk[idx][FD_OBJECT_ID] = -1;
		factory_desk[idx][FD_CHEK_ID] = CreateDynamicCP(factory_desks[idx][0], factory_desks[idx][1], factory_desks[idx][2], 0.3, _, _, _, 0.3);
		factory_desk[idx][FD_LABEl] = CreateDynamic3DTextLabel("Рабочее место", 0xFFFFFFEE, factory_desks[idx][0], factory_desks[idx][1], factory_desks[idx][2] + 1.0, 5.0);
		CallLocalFunction("UpdateFactoryDesk", "i", idx);
	}
	factory_put_zone = CreateDynamicSphere(-2908.6921,-1179.9351,1001.0041, 3.0, -1, -1, -1);
	factory_job_area = CreateDynamicRectangle(-981.2298, 2098.1736, -1170.6591, 2263.3167, 0, 0);
	CreatePickup(19197, 23, 505.3354,-2376.7654,34.7782, 0, PICKUP_ACTION_TYPE_LUMBERJACK_P);
	CreateDynamic3DTextLabel("{B0C4DE}Склад досок\nНажмите {FFFFFF}L.ALT{B0C4DE} чтобы положить бревно", 0xB0C4DEFF,  505.3354,-2376.7654,34.7782 + 0.5, 2.0);
	CreateDynamic3DTextLabel("{B0C4DE}Место для укладки брёвен\n\nСтанок обрабатывает бревно:{FFFFFF} в разработке\n{B0C4DE}Всего в очереди: в разработке\n\nНажмите {FFFFFF}L.ALT{B0C4DE} чтобы положить бревно и начать работу", 0xB0C4DEFF,  469.7571,-2372.1516,34.7640 + 1.4, 2.0);
	CreateDynamicCP(469.7571,-2372.1516,34.7640, 1.5, -1, -1, _, 2.0);
	CreatePickup(19197, 23, 1658.4908, 692.3386, 16.4430, 0, PICKUP_ACTION_TYPE_FERMER_P); // склад фермы
	CreatePickup(19197, 23, 1601.8525, 640.0919, 16.2555, 0, PICKUP_ACTION_TYPE_FERMER_P); // запасы фермы
}

stock AnimListInit()
{
	new fmt_str[64];
	for(new idx; idx < sizeof anim_list; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetAnimListData(idx, AL_DESCRIPTION));
		strcat(anim_list_items, fmt_str);
		if(GetAnimListData(idx, AL_LOOP) > 2)
			anim_list[idx][AL_DESCRIPTION] = 2;
	}
	strcat(anim_list_items, "{33CC00}Информация");
}

stock RepositoriesLoad()
{
	new Cache: result;
	new type, action_id;
	result = mysql_query(mysql, "SELECT * FROM repositories ORDER BY type,action_id ASC");
	new rows = cache_num_rows();
	for(new idx; idx < rows; idx ++)
	{
		type = cache_get_row_int(idx, 1);
		action_id = cache_get_row_int(idx, 2);
		if(0 <= type <= sizeof g_repository-1)
		{
			if(0 <= action_id <= sizeof g_repository[]-1)
			{
				SetRepositoryData(type, action_id, R_AMOUNT, cache_get_row_int(idx, 3));
			}
		}
	}
	cache_delete(result);
	RepositoriesInit();
}

stock RepositoriesInit()
{
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -474.1064,3387.7664,31.3281 + 0.5, 10.0)); // руда
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -473.7023,3396.2358,32.4835 + 0.8, 10.0)); // металл
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2] + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0)); // металл
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 1243.0858,3223.8335,12.3937 + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0)); // патроны
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);
	SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_LABEL, CreateDynamic3DTextLabel("-No Init-", COLOR_WHITE, 1657.3654,692.2846,16.4430, 30.0));
	UpdateRepository(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER);
	SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 523.4781,-2378.2908,36.5435 + 2.0, 10.0)); // дерево на лесопилке
	UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
}

stock UpdateRepository(type, actionid)
{
	new fmt_str[128];
	new amount = GetRepositoryData(type, actionid, R_AMOUNT);
	new Text3D: label = GetRepositoryData(type, actionid, R_LABEL);
	new Text3D: label_2 = GetRepositoryData(type, actionid, R_LABEL_2);
	switch(type)
	{
		case REPOSITORY_TYPE_MINER:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_MINER_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Покупка металла\n(для развозчиков)\n\n{FFCD00}На складе %d кг\nКупить: /buym", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
					format(fmt_str, sizeof fmt_str, "Металл\n{FFD83D}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_ORE:
				{
					format(fmt_str, sizeof fmt_str, "Руда\n{00CC00}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_REMELTI:
				{
					format(fmt_str, sizeof fmt_str, "Кузница\n{CC9900}%d кг руды\nна переплавке", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_FACTORY_METAL..REPOSITORY_ACTION_FACTORY_PROD:
				{
					if(actionid != REPOSITORY_ACTION_FACTORY_PROD)
					{
						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Топливо: %d / 1000000 л\n\n{6699FF}/sellf", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[0], 0xFFFFFFFF, fmt_str);
						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Металл: %d / 1000000 кг\n\n{6699FF}/sellm", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[1], 0xFFFFFFFF, fmt_str);
					}
					label = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL);
					label_2 = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2);
					format
					(
						fmt_str, sizeof fmt_str,
						"Исходные материалы:\n"\
						"{FF9900}Топливо: %d / 1000000 л\n"\
						"Металл: %d / 1000000 кг\n"\
						"{33CC00}Продукты: %d шт.",
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT)
					);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FERMER:
		{
			format(fmt_str, sizeof fmt_str, "Склад фермы\n{CC9900}%d / 5000", amount);
			UpdateDynamic3DTextLabelText(label, COLOR_WHITE, fmt_str);
		}
		case REPOSITORY_TYPE_OIL_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_OIL_FACTORY_F:
				{
					format(fmt_str, sizeof fmt_str, "Топливо для АЗС\n\n{FFCD00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					format(fmt_str, sizeof fmt_str, "Топливо для завода\n\n{FFCD00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_ARMY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_ARMY_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Металл на складе:\n{66cc33}%d кг\n\n{9999ff}/takem\n/putm", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case  REPOSITORY_ACTION_ARMY_AMMO:
				{
					format(fmt_str, sizeof fmt_str, "Патроны на складе:\n%d / 200000 шт.", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFCD00FF, fmt_str);
				}
			}
		}
  		case REPOSITORY_TYPE_SAWMILL:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_SAWMILL_WOOD:
				{
					format(fmt_str, sizeof fmt_str, "На складе:\nДерево:{FFFFFF} %d / 1000000 ед", GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT));
					UpdateDynamic3DTextLabelText(label, 0xB0C4DEFF, fmt_str);
				}
			}
		}
	}
}

public: UpdateOilFactory()
{
	new add_fuels = (random(2500) + 500);
	new fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT) + add_fuels;
	new time = (random(fuels <= 20_000 ? 1 : 180) + 60) * 1000;
	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, fuels);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);
	SetTimer("UpdateOilFactory", time, false);
}

public: UpdateMinerRemelting()
{
	new remelting = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT);
	new ore = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);
	new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);
	new rand;
	rand = random(90) + 11; // от 10 до 100;
	if(remelting > 0) // если на переплавке есть руда
	{
		if(rand > remelting) // если взяли больше чем было
			rand = remelting; // берем все что осталось
		remelting -= rand;
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting); // забрали с переплавки
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall + rand); // добавили на склад металл
	}
	rand = random(90) + 11; // от 10 до 100;
	if(remelting < 100) // если на пререплавке меньше 100 кг
	{
		if(rand > ore) // если взяли больше чем на складе
			rand = ore; // берем все что осталось
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, ore - rand); // взяли со склада
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting + rand); // добавили в переплавку
	}
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);
	SetTimer("UpdateMinerRemelting", (random(16)+15) * 1000, false);
}

stock SaveRepository(type = -1, actionid = -1)
{
	new fmt_str[228];
	if(type != -1 && actionid != -1)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(type, actionid, R_AMOUNT), type, actionid);
		mysql_query(mysql, fmt_str, false);
	}
	else
	{
		for(new idx, idx_2; idx < sizeof g_repository; idx ++)
		{
			for(idx_2 = 0; idx_2 < sizeof g_repository[]; idx_2 ++)
			{
				if(GetRepositoryData(idx, idx_2, R_NOT_SAVE)) continue;
				format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(idx, idx_2, R_AMOUNT), idx, idx_2);
				mysql_query(mysql, fmt_str, false);
			}
		}
	}
}

stock PreLoadPlayerAnimList(playerid)
{
	if(!GetPlayerData(playerid, P_ANIM_LIST_INIT))
	{
		PreLoadPlayerAnims(playerid);
		SetPlayerData(playerid, P_ANIM_LIST_INIT, true);
		return 1;
	}
	return 0;
}

stock SetPlayerAnimation(playerid, animid)
{
	if(0 <= animid <= sizeof anim_list-1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			switch(animid+1)
			{
				case 1..4:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1 + animid);
				}
				default:
				{
					new type = USE_ANIM_TYPE_NONE - 1;
					if(GetAnimListData(animid, AL_LOOP))
					{
						SetPlayerData(playerid, P_USE_ANIM, true);
						BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
					else
					{
						if(IsPlayerUseAnim(playerid))
						{
							SetPlayerData(playerid, P_USE_ANIM, false);
							BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
						}
						type = USE_ANIM_TYPE_NONE;
					}
					ApplyAnimationEx(playerid, GetAnimListData(animid, AL_LIB), GetAnimListData(animid, AL_NAME), GetAnimListData(animid, AL_DELTA), (GetAnimListData(animid, AL_LOOP) % 2), GetAnimListData(animid, AL_LOCK_X), GetAnimListData(animid, AL_LOCK_Y), GetAnimListData(animid, AL_FREEZE), GetAnimListData(animid, AL_TIME), 0, type);
				}
			}
		}
		return 1;
	}
	return 0;
}

stock ClearPlayerUseAnim(playerid)
{
	if(IsPlayerUseAnim(playerid))
	{
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
		SetPlayerData(playerid, P_USE_ANIM, false);
		ClearPlayerAnim(playerid);
	}
}

stock IsValidMail(email[], len = sizeof email)
{
    new count[2];
    if(!(5 <= len <= 60)) return 0;
    for(new i; i != len; i++)
    {
		switch(email[i])
		{
			case '@':
			{
				count[0]++;
				if(count[0] != 1 || i == len - 1 || i == 0) return 0;
			}
			case '.':
			{
				if(count[0] == 1 && count[1] == 0 && i != len - 1)
				{
					count[1] = 1;
				}
			}
			case '0'..'9', 'a'..'z', 'A'..'Z', '_', '-':
			{
				continue;
			}
			default:
				return 0;
		}
    }
    if(count[1] == 0) return 0;
    return 1;
}

stock GetPlayerHouseName(playerid)
{
	new name[32];
	new houseid = GetPlayerHouse(playerid);
	if(houseid != -1)
	{
		switch(GetPlayerData(playerid, P_HOUSE_TYPE))
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					format(name, sizeof name, "Подъезд %d (№%d на %d этаже)", GetHouseData(houseid, H_ENTRACE) + 1, GetHouseData(houseid, H_FLAT_ID) + 1, GetHouseData(houseid, H_FLAT_ID) / 4 + 1);
				}
				else format(name, sizeof name, "%s (№%d)", GetHouseData(houseid, H_NAME), houseid);
			}
			case HOUSE_TYPE_ROOM:
			{
				format(name, sizeof name, "В гостях (дом №%d)", houseid);
			}
			case HOUSE_TYPE_HOTEL:
			{
				format(name, sizeof name, "Гостиница (№%d на %d этаже)", (GetPlayerData(playerid, P_HOUSE_ROOM) % 12) + 1, (GetPlayerData(playerid, P_HOUSE_ROOM) / 12) + 1);
			}
		}
	}
	else name = "Бездомный";
	return name;
}

stock GetPlayerBizName(playerid)
{
	new name[32];
	new businessid = GetPlayerData(playerid, P_BUSINESS);
	if(businessid != -1)
	{
		format(name, sizeof name, "%s (№%d)", GetBusinessData(businessid, B_NAME),  businessid);
	}
	else name = "Нет";
	return name;
}

stock GetPlayerJobAndRankName(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	new rang = GetPlayerJob(playerid);
	new fmt_rank[32];
	if(TEAM_GOVERNMENT <= team <= TEAM_MAFIA_ITALIAN)
	{
		if(!(1 <= rang <= 10))
			rang = 1;
		format(fmt_rank, sizeof fmt_rank, rank_names[team - 1][rang - 1]);
	}
	else
	{
	    format(fmt_rank, sizeof fmt_rank, GetPlayerJobName(playerid));
	}
	return fmt_rank;
}

stock GetPlayerTeamName(playerid)
{
	new team_name_id = GetPlayerTeamEx(playerid);
	switch(team_name_id)
	{
		case TEAM_GOVERNMENT..TEAM_RADIO:
			return team_names[team_name_id];
		case TEAM_FSIN..TEAM_FSB:
			return team_names[5];
		case TEAM_MAFIA_RUSSIAN..TEAM_MAFIA_ITALIAN:
			return team_names[team_name_id - 2];
		default:
			return team_names[0];
	}
	return team_names[0];
}

stock IsTeamSubdivision(team)
{
	if(TEAM_FSIN <= team <= TEAM_FSB)
	{
		return true;
	}
	return false;
}

stock GetPlayerSubdivisionName(playerid)
{
	new player_team = GetPlayerTeamEx(playerid);
	if(IsTeamSubdivision(player_team))
		return team_subdivision_name[player_team - 4];
	return team_subdivision_name[0];
}

stock GetPlayerTeamStats(playerid)
{
	new fmt_text[110];
	format(fmt_text, sizeof fmt_text, "Организация:<t><t><t>%s\n", GetPlayerTeamName(playerid));
	if(IsTeamSubdivision(GetPlayerTeamEx(playerid)))
	{
	    format(fmt_text, sizeof fmt_text, "%sПодразделение:<t><t>%s\n", fmt_text, GetPlayerSubdivisionName(playerid));
	}
	return fmt_text;
}

stock GetPlayerGameStatus(playerid)
{
	new status[16];
	switch(GetPlayerLevel(playerid))
	{
	    case 0: status = "Ошибка";
	    case 1: status = "Без статуса";
	    case 2..5: status = "Новичок";
	    case 6..9: status = "Развивающийся";
	    case 10..14: status = "Освоившийся";
	    case 15..19: status = "Опытный игрок";
	    case 20..29: status = "Активный игрок";
	    default: status = "Легендарный";
	}
	if(GetPlayerTeamEx(playerid) && (GetPlayerJob(playerid) == 10)) status = "Лидер";
	if(GetPlayerAdminEx(playerid) != 0) status = "Администратор";
	return status;
}

stock GetPlayerPodpiskaStatus(playerid)
{
	new status[25];
	switch(GetPlayerPremium(playerid))
	{
	    case 0: status = "Отсутствует";
	    case 1: status = "{C0C0C0}Silver{FFFFFF}";
	    case 2: status = "{FFD700}Gold{FFFFFF}";
	    case 3: status = "{E5E4E2}Platinum{FFFFFF}";
	}
	return status;
}

stock SendMessageToPrem(message[], color, p_level = 1)
{
    if(p_level < 1)
    p_level = 1;
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToPremTG(message[], color, p_level = 1)
{
    if(p_level < 1)
    p_level = 1;
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToAdmins(message[], color, type = 0)
{
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerAdminEx(playerid) < 1) continue;
		if(type == 1) if(GetPlayerData(playerid, P_LOG) == 1) continue;
		SCM(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToYAdmins(message[], color, y_level = 1)
{
	if(y_level < 1)
		y_level = 1;
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerYAdminEx(playerid) < y_level) continue;
		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToTeam(team, message[], color = -1, playerid = -1)
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerSettingData(i, S_TEAM_CHAT) == 0) continue;
		else if(GetPlayerTeamEx(i) != team) continue;
		else if(i == playerid) continue;
		SendClientMessage(i, color, message);
	}
	return 1;
}

stock SendMessageToPoliceTeam(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_FSIN, message, color, playerid);
	SendMessageToTeam(TEAM_PPS, message, color, playerid);
	SendMessageToTeam(TEAM_FSB, message, color, playerid);
	return 1;
}

stock SendMessageToOnlyFsin(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_FSIN, message, color, playerid);
	return 1;
}

stock SendMessageToJob(to_job, message[], color = -1, playerid = -1, bool: org_chat = false)
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerJob(playerid) != to_job) continue;
		else if(org_chat && !GetPlayerSettingData(playerid, S_TEAM_CHAT)) continue;
		else if(playerid == i) continue;
		SendClientMessage(i, color, message);
	}
	return 1;
}

stock HidePlayerDialog(playerid)
{
	return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "ВНИМАНИЕ!", "Время на авторизацию ограничено", "Окей", "");
}

stock ShowCurrentTime(playerid)
{
	new
		hour, minute,
		day, month, year;
	gettime(hour, minute);
	getdate(day, month, year);
	SetPlayerChatBubble(playerid, "звонит в службу точного времени...", 0xDD90FFFF, 25.0, 7000);
	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 0);
	new fmt_str[350];
	format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~w~%d.%02d.%02d", hour, minute, year, month, day);
	GameText(playerid, fmt_str, 3000, 2);
	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Здравствуйте!\n"\
		"Вы позвонили в службу точного времени\n\n"\
		"Сегодняшняя дата:\t\t{66CC00}%d %s %d г.\n"\
		"{FFFFFF}День недели:\t\t\t{66CC00}%s\n"\
		"{FFFFFF}Текущее время:\t\t{3399FF}%d:%02d\n\n"\
		"{FFFFFF}Время в игре за час:\t\t{FF7000}%d мин\n"\
		"{FFFFFF}Время в игре сегодня:\t{FF7000}%d ч %d мин\n"\
		"{FFFFFF}Время в игре вчера:\t\t{FF7000}%d ч %d мин",
		year,
		GetMonthName(month),
		day,
		GetDayName(GetDayOfWeek(day, month, year)),
		hour,
		minute,
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_MINUTES)
	);
	SendClientMessage(playerid, 0x99CC00FF, "Вы позвонили в службу точного времени");
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Точное время", fmt_str, "Закрыть", "");
}

stock GetDayOfWeek(day, month, year)
{
    new a = (14 - month) / 12;
    new y = year + 4800 - a;
	new m = month + 12 * a - 3;
	new c_date = day + (153 * m + 2) / 5 + 365 * y + y / 4 - y / 100 + y / 400 - 32045;
	new day_of_week = c_date % 7 + 1;
    return day_of_week;
}

stock UpdateCharity()
{
	if(cache_is_valid(charity_cache_data))
	{
		cache_delete(charity_cache_data);
	}
	new Cache: result;
	result = mysql_query(mysql, "SELECT (SELECT a.name FROM accounts a WHERE a.id = c.uid) as name, SUM(c.money) as total FROM charity c GROUP BY c.uid ORDER BY total DESC LIMIT 25", true);
	charity_cache_data = result;
	cache_delete(result);
}
// поменял тут  stock abs(value)

stock IsNumeric(dest[], pos=0)
{
	new is_numeric = true;
	do
	{
		switch(dest[pos])
		{
			case '0'..'9': continue;
			default:
			{
				is_numeric = false;
				break;
			}
		}
	}
	while(dest[++pos]);
	return is_numeric;
}

stock valfmt(dest[], value, size = sizeof dest)
{
	new buffer[15 + 1];
	valstr(buffer, value);
	new pos = strlen(buffer);
	while((pos -= 3) > 0)
	{
		strins(buffer, ".", pos);
	}
	format(dest, size, "%s", buffer);
}

stock GetFamilyChatID(team)
{
	if(TEAM_GOVERNMENT <= team <= TEAM_RADIO) return 1;
	else if(TEAM_FSIN <= team) return 2;
	else if(TEAM_MAFIA_RUSSIAN <= team <= TEAM_MAFIA_ITALIAN) return team;
	return 0;
}

stock GivePlayerDonate(playerid, donate, description[]="None", bool:save=true, bool:game_text=true)
{
	new fmt_str[185];
	AddPlayerData(playerid, P_DONATE_CURRENT, +, donate);
	if(donate > 0) AddPlayerData(playerid, P_DONATE_TOTAL, +, donate);
	format(fmt_str, sizeof fmt_str, "INSERT INTO donate_log (uid,uip,time,donate,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), donate, description);
	mysql_query(mysql, fmt_str, false);
	format(STRING_GLOBAL,sizeof STRING_GLOBAL, "window.setPlayerDonate('%d')",GetPlayerData(playerid, P_DONATE_CURRENT));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);		
	if(save)
	{
		UpdatePlayerDatabaseInt(playerid, "donate_current", GetPlayerCurrentDonate(playerid));
		UpdatePlayerDatabaseInt(playerid, "donate_total", GetPlayerTotalDonate(playerid));
	}
	if(game_text)
	{
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('GameText').add('[2,\"~w~%s%d рублей\",3000,0,-1,1]')", donate < 0 ? ("") : ("+"), donate);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		BitStream_1(playerid, s_CefInterface, t_CefShow, "GameText");
	}
	return 1;
}

stock BankLog(playerid, money, description[] = "None")
{
	new fmt_str[185];
	format(fmt_str, sizeof fmt_str, "[BANK] %s", description);
	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, fmt_str);
	mysql_query(mysql, fmt_str, false);
	return 1;
}

stock SendMessageInLocal(playerid, message[], color, Float: radius = 30.0)
{
	new virtual_world = GetPlayerVirtualWorld(playerid);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerVirtualWorld(idx) != virtual_world) continue;
		if(!IsPlayerInRangeOfPoint(idx, radius, x, y, z)) continue;
		SendClientMessage(idx, color, message);
	}
	return 1;
}

stock Action(playerid, message[], Float:radius=25.0, bool:bubble=true)
{
	if(strfind(message,"|") != -1 || strfind(message,"}") != -1 || strfind(message,"{") != -1 || strfind(message,"&") != -1 || strfind(message,"#") != -1 || strfind(message,"@") != -1 || strfind(message,"%") != -1)
	{
		return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}
	if(strcmp(message, "#", true) == 0 || strcmp(message, "|", true) == 0 || strcmp(message, "%", true) == 0 || strcmp(message, "@", true) == 0 || strcmp(message, "&", true) == 0)
	{
	    SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}
	if(bubble)
		SetPlayerChatBubble(playerid, message, 0xDD90FFFF, radius, 7000);
	new fmt_str[128];
	format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerNameEx(playerid), message);
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, radius);
	return 1;
}

stock EnablePlayerGPS(playerid, markertype, Float: x, Float: y, Float: z, message[] = "Место отмечено у Вас на GPS")
{
	SetPlayerGPSInfo(playerid, G_POS_X, x);
	SetPlayerGPSInfo(playerid, G_POS_Y, y);
	SetPlayerGPSInfo(playerid, G_POS_Z, z);
	SetPlayerMapIcon(playerid, 98, x, y, z, markertype, 0, MAPICON_GLOBAL);
	if(strlen(message))
		SendClientMessage(playerid, 0xCECECEFF, message);
	SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_ON);
	if(GetPlayerAdminEx(playerid) > 2)
	{
		Dialog(playerid, DIALOG_GOTO_GPS, DIALOG_STYLE_MSGBOX, "Подтверждение", "Вы действительно хотите телепортироваться на это место?", "Да", "Отмена");
	    SetPVarFloat(playerid, "goto_x", x);
		SetPVarFloat(playerid, "goto_y", y);
		SetPVarFloat(playerid, "goto_z", z);
		return 1;
	}
	return 1;
}

stock DisablePlayerGPS(playerid)
{
	if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
	{
		RemovePlayerMapIcon(playerid, 98);
		SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_OFF);
	}
	return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, to_player, Float: distance)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);
	return IsPlayerInRangeOfPoint(playerid, distance, x, y, z);
}
stock GetPlayerMaxStorage(playerid, storage)
{
	new amount;
	switch(storage)
	{
		case STORAGE_METALL: amount = 20;
		case STORAGE_AMMO: amount = 250;
		case STORAGE_DRUGS: amount = 500;
	}
	return GetPlayerData(playerid, P_IMPROVEMENTS) >= 3 ? amount * 2 : amount;
}

stock GetBusinessCars(businessid)
{
	new count,
		query[70],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM arenda_cars WHERE owner_id='%d'", businessid);
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

stock GetPlayerOwnableCars(playerid)
{
	new count,
		query[70],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

stock IsPlayerHasDonations(playerid)
{
	new query[80];
	new Cache: result;
	new rows;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM `donations` WHERE acc_id = '%d' AND activated = 0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	rows = cache_num_rows();
	cache_delete(result);
	if(rows) return 1;
	return 0;
}

stock GetPlayerDonationCurrency(playerid)
{
	new query[100],
		Cache: result,
		currency[64];
	mysql_format(mysql, query, sizeof query, "SELECT currency FROM `donations` WHERE acc_id = '%d' AND activated = 1 ORDER BY id DESC LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	if(cache_num_rows())
		cache_get_row(0, 0, currency);
	cache_delete(result);
	return currency;
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync, anim_type=USE_ANIM_TYPE_NONE)
{
	SetPlayerData(playerid, P_USE_ANIM_TYPE, anim_type);
	return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock ResetSkin(playerid)
{
	if(GetPlayerData(playerid, P_OSKIN) && 1 <= GetPlayerTeamEx(playerid) <= 10)
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
	else
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
	return 1;
}

stock InvitePlayer(playerid, org_id, give_rang = 1, bool: save = false)
{
	if(!(1 <= give_rang <= 10))
		give_rang = 1;
	if(1 <= org_id <= 10)
	{
		SetPlayerTeamEx(playerid, org_id);
		SetPlayerData(playerid, P_JOB, give_rang);
	}
	else
	{
		SetPlayerTeamEx(playerid, 0);
		SetPlayerData(playerid, P_JOB, 0);
	}
	SetPlayerColorEx(playerid, team_colors[org_id]);
	if(save)
	{
		new query[80];
		if(1 <= org_id <= 10)
		{
			if(!GetPlayerSex(playerid))
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_SKINS][give_rang - 1]);
			else
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_WOMEN_SKIN]);
		}
		else SetPlayerData(playerid, P_OSKIN, 0);
		format(query, sizeof query, "UPDATE accounts SET team=%d,org_skin=%d,job=%d WHERE id=%d",\
			GetPlayerTeamEx(playerid), GetPlayerData(playerid, P_OSKIN), GetPlayerData(playerid, P_JOB), GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);
		ResetSkin(playerid);
	}
	return 1;
}

stock UnInvite(playerid, to_player)
{
	if(!(1 <= GetPlayerTeamEx(to_player) <= 10)) return 0;
	new fmt_msg[110];
	if(playerid != to_player)
	{
		format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFF6600FF, fmt_msg);
		if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей организации", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
		}
		else
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из организации \"%s\"", GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
			SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
		}
		if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
			SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
		}
	}
	InvitePlayer(to_player, 0, 0, true);
	return 1;
}

stock SendPlayerOffer(playerid, to_player, type, value_1 = 0, value_2 = 0)
{
	if(GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER) == INVALID_PLAYER_ID)
	{
		STRING_GLOBAL[0] = EOS;
		switch(type)
		{
			case OFFER_TYPE_SELL_NEFTENASOS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить нефтяной насос №%d по цене %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш нефтяной насос за %d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
      		case OFFER_TYPE_SELL_GARDEN:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить теплицу №%d по цене %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Вашу теплицу за %d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_EXCHANGE:
            {
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам провести обмен", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");
				SCMF(playerid, 0x33999FFFF, "Вы предложили %s провести обмен", GetPlayerNameEx(to_player));
            }
			case OFFER_TYPE_TRADE:
            {
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам провести обмен предметами", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");
				SCMF(playerid, 0x33999FFFF, "Вы предложили %s провести обмен предметами", GetPlayerNameEx(to_player));
            }
			case OFFER_TYPE_HANDSHAKE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s предлагает пожать Вам руку", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пожать руку", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"Игрок %s предлагает пожать Вам руку\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_FIGHT:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s предлагает выйти на ринг с вами", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, COLOR_WHITE, "Нажмите {00CC00}Y или /yes {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s выйти на ринг с вами", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"Игрок %s предлагает выйти на ринг с вами\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_KISS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s предлагает поцеловаться с Вами", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, COLOR_WHITE, "Нажмите {00CC00}Y или /yes {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s поцеловаться с Вами", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"Игрок %s предлагает поцеловаться с Вами\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_GIVE_ITEM:
			{
				SCMF(to_player, 0x3399FFFF, "%s предлагает передать Вам предмет", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, COLOR_WHITE, "Нажмите {00CC00}Y или /yes {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");
				SCMF(playerid, 0x3399FFFF, "Вы предложили передать %s предмет", GetPlayerNameEx(to_player));
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"Игрок %s предлагает поцеловаться с Вами\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_WEDDING:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s предлагает Вам пожениться", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пожениться", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x33999FFFF, STRING_GLOBAL);
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"Игрок %s предлагает Вам пожениться\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_SELLSIM:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить SIM-карту {"#cGold"}'%d' {3399FF}за %d руб.", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Вашу SIM-карту за %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить SIM-карту '%d' за %d руб.\"]", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), value_1);
			}
			case OFFER_TYPE_SELL_BUSINESS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить бизнес №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш бизнес \"%s\" за %d руб", GetPlayerNameEx(to_player), GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить бизнес №%d '%s' по цене %d руб\"]", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
			}
			case OFFER_TYPE_BUSINESS_MANAGER:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам стать сотрудником его предприятия (%s)", GetPlayerNameEx(playerid), GetBusinessData(value_1, B_NAME));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s получил предложение стать вашим сотрудником", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам стать сотрудником его предприятия (%s)\"]", GetPlayerNameEx(playerid), GetBusinessData(value_1, B_NAME));
			}
			case OFFER_TYPE_SELL_HOME:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить дом №%d по цене %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш дом по цене %d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_HOME_RENT_ROOM:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам поселиться в своем доме №%d", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s поселиться в своем доме №%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SELL_OWNABLE_CAR:
			{
				new model_id = GetVehicleData(value_2, V_MODELID);
				new SellCarPrice[23];
				GetPVarString(playerid, "SellCarPrice", SellCarPrice, sizeof(SellCarPrice));
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить транспорт {33FF66}\"%s\" {3399FF}по цене %s руб", GetPlayerNameEx(playerid), GetVehicleInfo(model_id, VI_NAME), formatStr(SellCarPrice));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы купить его или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш транспорт \"%s\" за %s руб", GetPlayerNameEx(to_player), GetVehicleInfo(model_id, VI_NAME), formatStr(SellCarPrice));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SELL_GARAGE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить гараж №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetGarageData(value_1, G_SQL_ID), value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш гараж \"№%d\" за %d руб", GetPlayerNameEx(to_player), GetGarageData(value_1, G_SQL_ID), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SELL_KIOSK:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить киоск №%d по цене %d руб", GetPlayerNameEx(playerid), value_1,  value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш киоск \"№%d\" за %d руб", GetPlayerNameEx(to_player), value_1, value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_INVITE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам вступить в организацию \"%s\"", GetPlayerNameEx(playerid), GetPlayerTeamName(playerid));
				if(IsTeamSubdivision(GetPlayerTeamEx(playerid)))
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s, подразделение \"%s\"", STRING_GLOBAL, GetPlayerSubdivisionName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы принять предложение или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s вступить в организацию \"%s\"", GetPlayerNameEx(to_player), GetPlayerTeamName(playerid));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_FINVITE:
            {
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFFFFF}%s предлагает Вам вступить в семью \"%s\"", GetPlayerNameEx(playerid), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
                SendClientMessage(to_player, 0x1E90FFFF, STRING_GLOBAL);
                SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы принять предложение или {FF6600}N {FFFFFF}для отказа");
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили игроку {d8284c}%s {1E90FF}вступить в семью \"%s\"", GetPlayerNameEx(to_player), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
                SendClientMessage(playerid, 0x1E90FFFF, STRING_GLOBAL);
            }
			case OFFER_TYPE_MEDHELP:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам пройти курс платного лечения за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы пройти экспресс-лечение или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пройти у Вас курс платного лечения за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_HEAL:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам пройти курс лечения за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пройти у Вас курс лечения за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_CHANGE_SEX:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает сделать Вам операцию по смене пола за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s операцию по смене пола за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SHOW_SKILL:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s хочет показать Вам свои навыки владения оружием", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}для просмотра или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть на Ваши навыки владения оружием", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_TEST_DRIVE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s вам предложил автомобиль %s на тестдрайв на %d минут(ы)", GetPlayerNameEx(playerid), GetVehicleName(value_1), value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}для просмотра или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s отдать ваш автомобиль %s на тестдрайв на %d минут(ы)", GetPlayerNameEx(to_player),GetVehicleName(value_1), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SHOWMC:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его мед. карту", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Вашу мед. карту", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_CASINO_DICE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s хочет сыграть с Вами в кости. Ставка: %d руб.", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL), SetPVarInt(to_player, "DiceKaz", gettime()+5);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s сыграть в кости. Ставка: %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL), SetPVarInt(playerid, "DiceKaz", gettime()+5);
			}
			case OFFER_TYPE_GETHERE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s хочет телепортировать Вас к себе", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы принять телепорт или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы запросили у %s разрешение на телепорт его к Вам", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_GOTO:
			{
				SCMF(to_player, 0x3399FFFF, "%s хочет телепортироваться к вам", GetPlayerNameEx(playerid));
				SCM(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы принять телепорт или {FF6600}N {FFFFFF}для отказа");
				SCMF(playerid, 0x3399FFFF, "Вы запросили у %s разрешение на телепорт к нему", GetPlayerNameEx(to_player));
			}
			case OFFER_TYPE_GIVE_CAR_KEY:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s хочет дать Вам ключи от своего транспотра", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы взять их или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили игроку %s взять ключи от своего транспорта", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_GIVE_MIC:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам подключиться к радио-эфиру", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s подключиться к радио-эфиру", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SHOWPASS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его паспорт", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Ваш паспорт", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SHOWADMSTATS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его админ статы", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Ваши админ статы", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SHOW_DOCS: 
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его удостоверение", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Ваше удостоверение", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}		
			case OFFER_TYPE_SHOWLIC:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его лицензии", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);
				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y или /yes {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Ваши лицензии", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			default: return 1;
		}
		SetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER, to_player);
		SetPlayerOfferInfo(to_player, O_INCOMING_PLAYER, playerid);
		SetPlayerOfferInfo(to_player, O_INCOMING_TYPE, type);
		SetPlayerOfferValue(to_player, 0, value_1);
		SetPlayerOfferValue(to_player, 1, value_2);
	}
	else SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/cancel {FFFFFF}чтобы отозвать предыдущее предложение");
	return 1;
}

stock MoveCamera(playerid)
{
	new Float:FV[3], Float:CPR[3];
	GetPlayerCameraPos(playerid, CPR[0], CPR[1], CPR[2]);
	GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);
	if(noclipdata[playerid][acce_lmul] <= 1) noclipdata[playerid][acce_lmul] += ACCEL_RATE;
	new Float:speed = MOVE_SPEED * noclipdata[playerid][acce_lmul];
	new Float:X, Float:Y, Float:Z;
	GetNextCameraPosition(noclipdata[playerid][mode_mode], CPR, FV, X, Y, Z);
	MovePlayerObject(playerid, noclipdata[playerid][fly_object], X, Y, Z, speed);
	noclipdata[playerid][last_move] = GetTickCount();
	return 1;
}

stock GetNextCameraPosition(move_mode, Float:CPR[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
	#define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
			case MOVE_FORWARD:
			{
					X = CPR[0]+OFFSET_X;
					Y = CPR[1]+OFFSET_Y;
					Z = CPR[2]+OFFSET_Z;
			}
			case MOVE_BACK:
			{
					X = CPR[0]-OFFSET_X;
					Y = CPR[1]-OFFSET_Y;
					Z = CPR[2]-OFFSET_Z;
			}
			case MOVE_LEFT:
			{
					X = CPR[0]-OFFSET_Y;
					Y = CPR[1]+OFFSET_X;
					Z = CPR[2];
			}
			case MOVE_RIGHT:
			{
					X = CPR[0]+OFFSET_Y;
					Y = CPR[1]-OFFSET_X;
					Z = CPR[2];
			}
			case MOVE_BACK_LEFT:
			{
					X = CPR[0]+(-OFFSET_X - OFFSET_Y);
					Y = CPR[1]+(-OFFSET_Y + OFFSET_X);
					Z = CPR[2]-OFFSET_Z;
			}
			case MOVE_BACK_RIGHT:
			{
					X = CPR[0]+(-OFFSET_X + OFFSET_Y);
					Y = CPR[1]+(-OFFSET_Y - OFFSET_X);
					Z = CPR[2]-OFFSET_Z;
			}
			case MOVE_FORWARD_LEFT:
			{
					X = CPR[0]+(OFFSET_X  - OFFSET_Y);
					Y = CPR[1]+(OFFSET_Y  + OFFSET_X);
					Z = CPR[2]+OFFSET_Z;
			}
			case MOVE_FORWARD_RIGHT:
			{
					X = CPR[0]+(OFFSET_X  + OFFSET_Y);
					Y = CPR[1]+(OFFSET_Y  - OFFSET_X);
					Z = CPR[2]+OFFSET_Z;
			}
	}
}

stock ZaezdPlayerToGarage(playerid, garage_id)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetGarageData(garage_id, G_TYPE) == 1)
	{
		SetVehiclePos
		(
			vehicleid,
			-1615.8772,1579.1461,2005.7100
		);
		SetPlayerInterior(playerid, 9);
		LinkVehicleToInterior(vehicleid, 9);
		SetVehicleZAngle(vehicleid, 90.0);
	}
	if(GetGarageData(garage_id, G_TYPE) == 2)
	{
		SetVehiclePos
		(
			vehicleid,
			2896.7332,2898.6277,1001.0000
		);
		SetPlayerInterior(playerid, 5);
		LinkVehicleToInterior(vehicleid, 5);
		SetVehicleZAngle(vehicleid, 0.0);
	}
	if(GetGarageData(garage_id, G_TYPE) == 3)
	{
		SetVehiclePos
		(
			vehicleid,
			-1658.1536,-457.3881,1001.0000
		);
		SetPlayerInterior(playerid, 4);
		LinkVehicleToInterior(vehicleid, 4);
		SetVehicleZAngle(vehicleid, 359.8882);
	}
	if(GetGarageData(garage_id, G_TYPE) == 4)
	{
		SetVehiclePos
		(
			vehicleid,
			1601.4100,1772.8184,1096.9688
		);
		SetPlayerInterior(playerid, 4);
		LinkVehicleToInterior(vehicleid, 4);
		SetVehicleZAngle(vehicleid, 359.8882);
	}
	SetVehicleVirtualWorld(vehicleid, garage_id + 2000);
	SetPlayerInGarage(playerid, garage_id);
	SetPlayerVirtualWorld(playerid, garage_id + 2000);
}

stock ShowPlayerGarageZaezd(playerid, garage_id)
{
	if(0 <= garage_id <= g_garage_loaded)
	{
		SetPlayerUseListitem(playerid, garage_id);
		Dialog(playerid, DIALOG_GARAGE_ZAEZD, DIALOG_STYLE_MSGBOX, "{FFD83D}Въезд в гараж", "{"#cW"}Вы действительно заехать в свой гараж?", "Заехать", "Отмена");
	}
	return 1;
}

public: ShowOrgAllPlayers(playerid)
{
	new rows = cache_num_rows();
	new p_name[21];
	new lvl, rang;
	new fmt_str[33];
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL,sizeof STRING_GLOBAL,"Уровень\tРанг\tИмя\n\n{FFFFFF}");
	new idx, j = rows;
	if(j > 45)
		j = 45;
	for(idx = 0; idx < j; idx ++)
	{
		cache_get_row(idx, 0, p_name);
		lvl = cache_get_row_int(idx, 1);
		rang = cache_get_row_int(idx,2);
		format(fmt_str, sizeof fmt_str, "%d\t%d\t%s\n", lvl, rang, p_name);
		strcat(STRING_GLOBAL, fmt_str);
	}
	format(fmt_str, sizeof fmt_str, "{00CC00}Показаны %d/%d игроков", idx, rows);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, STRING_GLOBAL, "Закрыть", "");
	return 1;
}

stock IsAFamLeader(playerid)
{
	new house = 0;
	for(new i = 1; i <= TOTALFAM;i++)
	{
		if(!strcmp(FamInfo[i][fLeader], GetPlayerNameEx(playerid), true)) house++;
	}
	return house;
}

stock ShowTeamStructureDialog(playerid, teamid)
{
	if(teamid)
	{
		new fmt_str[40];
		string_dialog = "Уровень\tРанг\tТелефон\tИмя\n\n{FFFFFF}";
		foreach(new i: Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerTeamEx(i) != teamid) continue;
			format(fmt_str, sizeof fmt_str, "%d\t\t%d\t%d\t\t%s", GetPlayerLevel(i), GetPlayerJob(i), GetPlayerPhone(i), GetPlayerNameEx(i));
			strcat(string_dialog, fmt_str);
			if(IsPlayerAFK(i))
				strcat(string_dialog, "-AFK");
			strcat(string_dialog, "\n");
		}
		if(IsTeamSubdivision(teamid))
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Члены подразделения online", string_dialog, "Закрыть", "");
		else
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Члены организации online", string_dialog, "Закрыть", "");
	}
	else
	{
		new fmt_str[40];
		string_dialog = "Уровень\tТелефон\tИмя\n\n{FFFFFF}";
		foreach(new i: Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerJob(i) != GetPlayerJob(playerid)) continue;
			format(fmt_str, sizeof fmt_str, "%d\t%d%s%s", GetPlayerLevel(i), GetPlayerPhone(i), GetPlayerPhone(i) > 0 ? ("\t") : ("\t\t"), GetPlayerNameEx(i));
			strcat(string_dialog, fmt_str);
			if(IsPlayerAFK(i))
				strcat(string_dialog, "-AFK");
			if(IsPlayerInJob(i))
				strcat(string_dialog, " *");
			strcat(string_dialog, "\n");
		}
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Сотрудники online", string_dialog, "Закрыть", "");
	}
	return 1;
}

stock ShowDebtorListDialog(playerid, type)
{
	new
		fmt_str[36 + 1],
		text[((sizeof fmt_str) * 20) + 1],
		cur_time = gettime(),
		idx,
		count;
	if(type == 0)
	{
		if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerMoneyEx(playerid, -100000000);
		for(idx = 0, count = 0; idx < g_house_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetHouseData(idx, H_OWNER_ID) < 1) continue;
			if((((GetHouseData(idx, H_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetHouseData(idx, H_EVICTION)) continue;
			SetPlayerListitemValue(playerid, count, idx);
			count ++;
			if(GetHouseData(idx, H_TYPE))
			{
				format(fmt_str, sizeof fmt_str, "кв. %d под. %d (%s)\n", idx % 6 + 1, GetHouseData(idx, H_ENTRACE) + 1, "Нижегородская обл.");
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			}
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за жилье нет");
		Dialog(playerid, DIALOG_DEBTORLIST_HOUSE, DIALOG_STYLE_LIST, "{FFD83D}Жилье должников", text, "Отметить", "Назад");
	}
	else if(type == 1)
	{
		if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 200000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		GivePlayerMoneyEx(playerid, -200000000);
		for(idx = 0, count = 0; idx < g_business_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetBusinessData(idx, B_OWNER_ID) < 1) continue;
			if((((GetBusinessData(idx, B_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetBusinessData(idx, B_EVICTION)) continue;
			SetPlayerListitemValue(playerid, count, idx);
			count ++;
			format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за предприятия нет");
		Dialog(playerid, DIALOG_DEBTORLIST_BIZ, DIALOG_STYLE_LIST, "{FFD83D}Предприятия должников", text, "Отметить", "Назад");
	}
	return 1;
}

stock SellDebtorsHotels()
{
	new cur_time = gettime();
	new query[200];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts a,hotels h SET a.house_room=0,a.house_type=-1,h.owner_id=0,h.rent_time=0,h.status=1 WHERE a.id=h.owner_id AND h.rent_time < %d", cur_time);
	mysql_query(mysql, query, false);
	new hotel_owner_playerid;
	for(new h_id, r_id; h_id < MAX_HOTELS; h_id ++)
	{
		for(r_id = 0; r_id < MAX_HOTEL_ROOMS; r_id ++)
		{
			if(GetHotelData(h_id, r_id, H_RENT_DATE) < cur_time) continue;
			GetPlayerID(GetHotelData(h_id, r_id, H_OWNER_NAME), hotel_owner_playerid);
			SetHotelData(h_id, r_id, H_OWNER_ID, 0);
			SetHotelData(h_id, r_id, H_RENT_DATE, 0);
			if(IsPlayerConnected(hotel_owner_playerid) && IsPlayerLogged(hotel_owner_playerid))
			{
				if(GetPlayerHouse(hotel_owner_playerid, HOUSE_TYPE_HOTEL) == h_id)
				{
					SetPlayerData(hotel_owner_playerid, P_HOUSE, 		-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_ROOM, 	-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_TYPE, 	-1);
					SendClientMessage(hotel_owner_playerid, 0xFF6600FF, "Вы были выселены из гостиницы за неуплату услуг");
				}
			}
		}
	}
	return 1;
}

stock EnterPlayerToGarage(playerid, garage_id)
{
	if(GetGarageData(garage_id, G_TYPE) == 1)
	{
		SetPlayerPosEx
		(
			playerid,
			-1620.0846,1576.7509,2005.7100,270.1940,
			9,
			garage_id + 2000
		);
	}
	if(GetGarageData(garage_id, G_TYPE) == 2)
	{
		SetPlayerPosEx
		(
			playerid,
			2897.1111,2888.8059,1001.0000,358.8917,
			5,
			garage_id + 2000
		);
	}
	if(GetGarageData(garage_id, G_TYPE) == 3)
	{
		SetPlayerPosEx
		(
			playerid,
			-1652.2556,-466.1541,1001.0000,7.9008,
			4,
			garage_id + 2000
		);
	}
	if(GetGarageData(garage_id, G_TYPE) == 4)
	{
		SetPlayerPosEx
		(
			playerid,
			1603.3677,1764.6927,1096.9688,359.6479,
			4,
			garage_id + 2000
		);
	}
	SetPlayerInGarage(playerid, garage_id);
	SetPlayerVirtualWorld(playerid, garage_id + 2000);
}

stock ExitPlayerFromGarage(playerid, Float: radius = 3.0)
{
	new garage_id = GetPlayerInGarage(playerid);
	if(garage_id != -1)
	{
		if(IsPlayerInRangeOfPoint(playerid, radius, 2897.3401,2888.8042,1001.0000) || IsPlayerInRangeOfPoint(playerid, radius, -1657.9447,-467.8287,1001.0000) || IsPlayerInRangeOfPoint(playerid, radius, -1621.5743,1579.1401,2005.7100) || IsPlayerInRangeOfPoint(playerid, radius, 1603.3677, 1764.6927, 1097.1688))
		{
			SetPlayerInGarage(playerid, -1);
			SetPlayerPosEx
			(
				playerid,
				GetGarageData(garage_id, G_EXIT_POS_X),
				GetGarageData(garage_id, G_EXIT_POS_Y),
				GetGarageData(garage_id, G_EXIT_POS_Z),
				GetGarageData(garage_id, G_EXIT_ANGLE),
				0,
				0
			);
		}
		return 1;
	}
	return 0;
}

stock ShowPlayerGaragePayForRent(playerid)
{
	new garage_id = GetPVarInt(playerid, "ownablegarage_id");
	if(garage_id != -1)
	{
		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{"#cW"}Гараж:\t\t\t\t\t{FFD83D}№%d\n"\
			"{"#cW"}Оплаченных дней аренды:\t\t{FFD83D}%d из 14\n"\
			"{"#cW"}Ежедневная оплата:\t\t\t{FFD83D}%d руб\n"\
			"{"#cW"}Субсидия:\t\t\t\t{FFD83D}%s\n\n"\
			"{"#cW"}На сколько дней Вы хотите оплатить гараж?",
			garage_id,
			GetGarageData(garage_id, G_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetGarageData(garage_id, G_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? GetGarageData(garage_id, G_RENT_PRICE) / 2 : GetGarageData(garage_id, G_RENT_PRICE),
			GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? ("Есть"): ("Нет")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_GARAGE, DIALOG_STYLE_INPUT, "{FFD83D}Оплата гаража", fmt_str, "Оплатить", "Назад");
	}
}

stock SellGarage(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new garage_id = GetPVarInt(playerid, "ownablegarage_id");
	if(garage_id != -1)
	{
		new biz_price = GetGarageData(garage_id, G_PRICE);
		new biz_percent = biz_price / 100 * 30;
		new query[200];
		new return_money = (biz_price - biz_percent);
		SetGarageData(garage_id, G_OWNER_ID, 	0);
		if(to_player == INVALID_PLAYER_ID)
		{
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), return_money));
			BankLog(playerid, return_money, "Продажа гаража");
			SetGarageData(garage_id, G_IMPROVEMENTS, 	0);
			SetGarageData(garage_id, G_RENT_DATE,		0);
			SetGarageData(garage_id, G_LOCK_STATUS,	false);
			if(GetGarageData(garage_id, G_TYPE) == 1)
			{
				AddPlayerData(playerid, P_CAR_SLOTS,-,1);
				UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			}
			else if(GetGarageData(garage_id, G_TYPE) == 2)
			{
				AddPlayerData(playerid, P_CAR_SLOTS,-,2);
				UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			}
			else if(GetGarageData(garage_id, G_TYPE) == 3)
			{
				AddPlayerData(playerid, P_CAR_SLOTS,-,4);
				UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			}
			else if(GetGarageData(garage_id, G_TYPE) == 4)
			{
				AddPlayerData(playerid, P_CAR_SLOTS,-,5);
				UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			}
			format(query, sizeof query, "UPDATE accounts a,garage g SET a.bank=%s,g.owner_id=0,g.lock=0 WHERE a.id=%d AND g.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetGarageData(garage_id, G_SQL_ID));
			mysql_query(mysql, query, false);
			GivePlayerMoneyEx(playerid, 0, "Продажа гаража государству", false, false);
			CallLocalFunction("UpdateGarageLabel", "i", garage_id);
			SendClientMessage(playerid, COLOR_WHITE, "Вы успешно продали свой гараж!");
			format(query, sizeof query, "Налог за продажу бизнеса составил 30 процентов от его стоимости {FFD83D}(%d руб)", biz_percent);
			SendClientMessage(playerid, COLOR_WHITE, query);
			format(query, sizeof query, "Итого на банковский счет перечислено: {FFD83D}%d руб", return_money);
			SendClientMessage(playerid, COLOR_WHITE, query);
		}
		else
		{
			if(BuyPlayerGarage(to_player, garage_id, true, price) == 1)
			{
				GivePlayerMoneyEx(playerid, price, "Продажа гаража игроку");
				if(GetGarageData(garage_id, G_TYPE) == 1)
				{
					AddPlayerData(playerid, P_CAR_SLOTS,-,1);
					UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
					AddPlayerData(to_player, P_CAR_SLOTS,+,1);
					UpdatePlayerDatabaseInt(to_player, "car_slots", GetPlayerData(to_player, P_CAR_SLOTS));
				}
				else if(GetGarageData(garage_id, G_TYPE) == 2)
				{
					AddPlayerData(playerid, P_CAR_SLOTS,-,2);
					UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
					AddPlayerData(to_player, P_CAR_SLOTS,+,2);
					UpdatePlayerDatabaseInt(to_player, "car_slots", GetPlayerData(to_player, P_CAR_SLOTS));
				}
				else if(GetGarageData(garage_id, G_TYPE) == 3)
				{
					AddPlayerData(playerid, P_CAR_SLOTS,-,4);
					UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
					AddPlayerData(to_player, P_CAR_SLOTS,+,4);
					UpdatePlayerDatabaseInt(to_player, "car_slots", GetPlayerData(to_player, P_CAR_SLOTS));
				}
				else if(GetGarageData(garage_id, G_TYPE) == 4)
				{
					AddPlayerData(playerid, P_CAR_SLOTS,-,5);
					UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
					AddPlayerData(to_player, P_CAR_SLOTS,+,5);
					UpdatePlayerDatabaseInt(to_player, "car_slots", GetPlayerData(to_player, P_CAR_SLOTS));
				}
				biz_price = price;
				biz_percent = 0;
			}
			else return 1;
		}
		format(query, sizeof query, "~g~+%d рублей", (biz_price - biz_percent));
		GameText(playerid, query, 4000, 2);
	}
	return 1;
}

public: LoadGarages()
{
	new idx;
	new query[85];
	new Cache: result, rows;
	result = mysql_query(mysql, "SELECT g.*, IFNULL(a.name, 'Государство') owner_name FROM garage g LEFT JOIN accounts a ON a.id=g.owner_id ORDER BY g.id ASC", true);
	rows = cache_num_rows();
	if(rows > MAX_GARAGE)
	{
		rows = MAX_GARAGE;
		print("[Garage]: DB rows > MAX_GARAGE");
	}
	for(idx = 0; idx < rows; idx ++)
	{
		SetGarageData(idx, G_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetGarageData(idx, G_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));
		SetGarageData(idx, G_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetGarageData(idx, G_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetGarageData(idx, G_PRICE,			cache_get_field_content_int(idx, "price"));
		SetGarageData(idx, G_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		SetGarageData(idx, G_TYPE,		cache_get_field_content_int(idx, "type"));
		SetGarageData(idx, G_LOCK_STATUS,	bool: cache_get_field_content_int(idx, "lock"));
		SetGarageData(idx, G_POS_X,			cache_get_field_content_float(idx, "x"));
		SetGarageData(idx, G_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetGarageData(idx, G_POS_Z,			cache_get_field_content_float(idx, "z"));
		SetGarageData(idx, G_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetGarageData(idx, G_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetGarageData(idx, G_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetGarageData(idx, G_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));
		SetGarageData(idx, G_CAR_POS_X,		cache_get_field_content_float(idx, "car_x"));
		SetGarageData(idx, G_CAR_POS_Y,		cache_get_field_content_float(idx, "car_y"));
		SetGarageData(idx, G_CAR_POS_Z,		cache_get_field_content_float(idx, "car_z"));
		SetGarageData(idx, G_CAR_ANGLE,		cache_get_field_content_float(idx, "car_angle"));
		SetGarageData(idx, G_REPAIRS,		cache_get_field_content_int(idx, "repairs"));
		SetGarageData(idx, G_DRUGS,		cache_get_field_content_int(idx, "drugs"));
		SetGarageData(idx, G_METALL,		cache_get_field_content_int(idx, "metall"));
		SetGarageData(idx, G_AMMO,		cache_get_field_content_int(idx, "ammo"));
		SetGarageData(idx, G_EVICTION,		cache_get_field_content_int(idx, "eviction"));
		SetGarageData(idx, G_MIAMI,		cache_get_field_content_int(idx, "miami"));
		cache_get_field_content(idx, "owner_name", g_garage[idx][G_OWNER_NAME], mysql, 21);
		mysql_format(mysql, query, sizeof query, "UPDATE garage SET id=%d WHERE id=%d", idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);
		if(IsGarageOwned(idx) && !strcmp(GetGarageData(idx, G_OWNER_NAME), "Государство", true))
		{
			SetGarageData(idx, G_OWNER_ID, 0);
			mysql_format(mysql, query, sizeof query, "UPDATE garage SET owner_id=0,improvements=0 WHERE id=%d", GetGarageData(idx, G_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(GetGarageData(idx, G_MIAMI) != 0) Garage_CP[idx] = CreateDynamicCP(GetGarageData(idx, G_POS_X),GetGarageData(idx, G_POS_Y),GetGarageData(idx, G_POS_Z),1.5, _, _, _, 15.0);//пикапчик для гаража в майями
		UpdateGarage(idx);
		SetGarageData(idx, G_LABEL, CreateDynamic3DTextLabel(" - ", 0xFFFF00FF, GetGarageData(idx, G_POS_X), GetGarageData(idx, G_POS_Y), GetGarageData(idx, G_POS_Z) + 0.5, 6.50));
		UpdateGarageLabel(idx);
		garage_area[idx] = CreateDynamicSphere(GetGarageData(idx, G_POS_X), GetGarageData(idx, G_POS_Y), GetGarageData(idx, G_POS_Z), 3.0, 0, 0, -1);
	}
	g_garage_loaded = rows;
	cache_delete(result);
	printf("[Garage]: Гаражей загружено: %d", g_garage_loaded);
}

stock UpdateGarage(garage_id)
{
	if(GetGarageData(garage_id, G_ENTER_PICKUP))
		DestroyPickup(GetGarageData(garage_id, G_ENTER_PICKUP));
	SetGarageData(garage_id, G_ENTER_PICKUP, CreatePickup(1239, 23, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z), 0, PICKUP_ACTION_TYPE_GARAGE, garage_id));
	if(GetGarageData(garage_id, G_IMPROVEMENTS) > 1)
	{
		SetGarageData(garage_id, G_WORKBENCH_LABEL, CreateDynamic3DTextLabel("{CB9E3A}Верстак\n{FFFFFF}Подойдите для взаимодействия", COLOR_GOLD, g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][0],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][1],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][2] + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, garage_id + 2000, -1, -1, 50.0));
	}
}

stock ShowPlayerGarageInfo(playerid, garage_id)
{
	if(0 <= garage_id <= g_garage_loaded)
	{
		SetPlayerUseListitem(playerid, garage_id);
		Dialog(playerid, DIALOG_GARAGE_ENTER, DIALOG_STYLE_MSGBOX, "{FFD83D}Вход в гараж", "{"#cW"}Вы действительно хотите войти в этот гараж?", "Войти", "Отмена");
	}
	return 1;
}

public: ShowPlayerGarageDialog(playerid, operationid)
{
	new garage_id = GetPVarInt(playerid, "ownablegarage_id");
	if(garage_id != -1)
	{
		switch(operationid)
		{
			case GARAGE_OPERATION_PARAMS:
			{
				Dialog
				(
					playerid, DIALOG_GARAGE_PARAMS, DIALOG_STYLE_LIST,
					"{FFD83D}Параметры гаража",
					"1. Открыть или закрыть гараж\n"\
					"2. Найти гараж на GPS\n"\
					"3. Улучшить гараж\n"\
					"4. Доставить транспорт в гараж {FF6600}(4000 руб)",
					"Выбрать", "Назад"
				);
			}
			case GARAGE_OPERATION_LOCK:
			{
				if(GetGarageData(garage_id, G_LOCK_STATUS))
				{
					SetGarageData(garage_id, G_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Гараж открыт");
				}
				else
				{
					SetGarageData(garage_id, G_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Гараж закрыт");
				}
				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `garage` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetGarageData(garage_id, G_LOCK_STATUS), GetGarageData(garage_id, G_SQL_ID));
				mysql_query(mysql, query, false);
                UpdateGarageLabel(garage_id);
				CallLocalFunction("ShowPlayerGarageDialog", "ii", playerid, GARAGE_OPERATION_PARAMS);
			}
			case GARAGE_OPERATION_CAR_GPS:
			{
				if(!callcmd::getmygarage(playerid, ""))
				{
					CallLocalFunction("ShowPlayerGarageDialog", "ii", playerid, GARAGE_OPERATION_PARAMS);
				}
			}
			case GARAGE_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[254];
				format(fmt_str, sizeof fmt_str, "{FFFFFF}1 уровень:\t{FFFFFF}Оформление субсидии\t%s", GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? "{66CC33}Куплено" : "{FFFFFF}55.000 руб");
				strcat(string, fmt_str);
				format(fmt_str, sizeof fmt_str, "\n%s\t{FFFFFF}Верстак\t%s", GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? "{CC3333}2 уровень:" : "{FFFFFF}2 уровень:", GetGarageData(garage_id, G_IMPROVEMENTS) > 1 ? "{66CC33}Куплено" : "{FFFFFF}200.000 руб");
				strcat(string, fmt_str);
				Dialog(playerid, DIALOG_GARAGE_IMPROVEMENTS, DIALOG_STYLE_LIST, "{FFFFFF}Улучшения для гаража", string, "Купить", "Назад");
			}
			case GARAGE_OPERATION_CAR_DELIVERY:
			{
				new vehicleid = GetPlayerLastVehicle(playerid);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					new price = 4000;
					if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
					{
						GivePlayerMoneyEx(playerid, -price, "Доставка ТС к гаражу (/garage)", true, true);
						SetVehiclePos
						(
							vehicleid,
							-1617.1022,
							1579.0144,
							2005.5275
						);
						SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);
						SetVehicleVirtualWorld(vehicleid, garage_id + 2000);
						LinkVehicleToInterior(vehicleid, 1);
						SetVehicleZAngle(vehicleid, 89.6986);
						return SendClientMessage(playerid, 0xFFDD00, "Транспорт был доставлен в Ваш гараж");
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег");
				}
				else
				{
					if(GetPlayerOwnableCarLast(playerid) == 0)
						SendClientMessage(playerid, 0xFF6600FF, "У Вас нет личного транспорта");
					else
						SendClientMessage(playerid, 0xFF6600FF, "Ваш личный транспорт не загружен на сервер");
				}
				CallLocalFunction("ShowPlayerGarageDialog", "ii", playerid, GARAGE_OPERATION_PARAMS);
			}
		}
	}
	return 1;
}

public: UpdateGarageLabel(garage_id)
{
	new fmt_str[264 + 1];
	new fmt_type[30];
	if(GetGarageData(garage_id, G_TYPE) == 1) format(fmt_type, sizeof fmt_type, "Эконом");
	if(GetGarageData(garage_id, G_TYPE) == 2) format(fmt_type, sizeof fmt_type, "Средний");
	if(GetGarageData(garage_id, G_TYPE) == 3) format(fmt_type, sizeof fmt_type, "Элитный");
	if(GetGarageData(garage_id, G_TYPE) == 4) format(fmt_type, sizeof fmt_type, "VIP+");
	if(!IsGarageOwned(garage_id))
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"{fc7703}-Гараж-\n"\
			"{ffffff}Гараж класса: %s (%d)\n"\
			"{ffffff}Используйте {6cba78}/buygarage\n"\
			"{969696}Цена: %s руб",
			fmt_type,
			GetGarageData(garage_id, G_SQL_ID),
			formatInt(GetGarageData(garage_id, G_PRICE))
		);
	}
	else
	{
		format
		(
		    fmt_str, sizeof fmt_str,
            "{00a8e6}-Гараж-\n"\
			"{ffffff}Гараж класса: %s (%d)\n"\
			"{969696}Владелец: %s",
			fmt_type,
			GetGarageData(garage_id, G_SQL_ID),
			GetGarageData(garage_id, G_OWNER_NAME)
		);
	}
	UpdateDynamic3DTextLabelText(GetGarageData(garage_id, G_LABEL), 0xFFFF00FF, fmt_str);
}

stock StartCapture(playerid, gang_zone_id, attack_team, protect_team)
{
	if(g_capture[C_STATUS]) return 0;
	new fmt_text[128],
		gps_icons[3] = {62, 61, 60};
	format(fmt_text, sizeof fmt_text, "%s начали захват территории у %s",
	GetTeamName( (attack_team + TEAM_MAFIA_RUSSIAN) - 1), GetTeamName( (protect_team + TEAM_MAFIA_RUSSIAN) - 1));
	SendMessageToGang(fmt_text, 0xFF5533FF);
	format(fmt_text, sizeof fmt_text, "%s %s [%d] инициировал захват. У вас есть ровно 7 минут для захвата территории.",
	GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);
	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0xFF5533FF);
	foreach(new idx : Player)
	{
		if(!(TEAM_MAFIA_RUSSIAN <= GetPlayerTeamEx(idx) <= TEAM_MAFIA_ITALIAN)) continue;
		format(fmt_text, sizeof fmt_text, "Место отмечено на GPS. Окажите сопротивление вражеской банде в течение 7 минут, чтобы %s территорию",
		GetPlayerTeamEx(idx) == ((attack_team + TEAM_MAFIA_RUSSIAN) - 1) ? "захватить" : "сохранить свою");
		SendClientMessage(idx, 0xFFFF00FF, fmt_text);
		SetPlayerMapIcon
		(
			idx, 97,
			GetGangZoneData(gang_zone_id, GZ_MIN_X) + 50.0,
			GetGangZoneData(gang_zone_id, GZ_MIN_Y) + 50.0,
			0.0,
			gps_icons[ GetPlayerTeamEx(idx) - TEAM_MAFIA_RUSSIAN ],
			COLOR_WHITE,
			MAPICON_GLOBAL
		);
	}
	GangZoneFlashForAll(GetGangZoneData(gang_zone_id, GZ_ZONE), gang_zone_colors[attack_team]);
	g_capture[C_STATUS] = true;
	g_capture[C_GANG_ZONE] = gang_zone_id;
	g_capture[C_ATTACK_TEAM] = attack_team;
	g_capture[C_PROTECT_TEAM] = protect_team;
	g_capture[C_ATTACKER_KILLS] = 0;
	g_capture[C_PROTECTOR_KILLS] = 0;
	g_capture[C_TIME] = 7 * 60;
	UpdateCaptureTextDraw();
	return 1;
}

stock UpdateCaptureTextDraw()
{
    foreach(new playerid : Player)
    {
        if(GetPlayerFamily(playerid) != 0)
        {
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team1.name = '%s'", g_family[g_war[W_ATTACK_TEAM]][F_NAME]);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team2.name = '%s'", g_family[g_war[W_PROTECT_TEAM]][F_NAME]);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').seconds = %d", g_war[W_TIME]);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team1.kills = %d", g_war[W_ATTACKER_KILLS]);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team2.kills = %d", g_war[W_PROTECTOR_KILLS]);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
	}
}

stock IsPlayerInPoliceTeam(playerid)
{
	if(TEAM_FSIN <= GetPlayerTeamEx(playerid) <= TEAM_FSB) return true;
	return false;
}

stock IsPlayerInPoliceCar(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(VEHICLE_ACTION_TYPE_DPS_CAR <= GetVehicleData(vehicleid, V_ACTION_TYPE) <= VEHICLE_ACTION_TYPE_MCHS_CAR) return true;
	return false;
}

stock SendMessageToGang(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_MAFIA_RUSSIAN, message, color, playerid);
	SendMessageToTeam(TEAM_MAFIA_JAPAN, message, color, playerid);
	SendMessageToTeam(TEAM_MAFIA_ITALIAN, message, color, playerid);
	return 1;
}

stock CreateGreenZones()
{
	for(new i; i < sizeof g_green_zones; i ++)
	{
		g_green_zones[i][GZ_AREA] = CreateDynamicRectangle
		(
			g_green_zones[i][GZ_MIN_X], g_green_zones[i][GZ_MIN_Y],
			g_green_zones[i][GZ_MAX_X], g_green_zones[i][GZ_MAX_Y]
		);
		if(g_green_zones[i][GZ_ACTOR][0] != 0.0) 
        {
            g_green_zones[i][GZ_ACTOR_ID] = CreateActor(171, g_green_zones[i][GZ_ACTOR][0], g_green_zones[i][GZ_ACTOR][1], g_green_zones[i][GZ_ACTOR][2], g_green_zones[i][GZ_ACTOR][3]);
            g_green_zones[i][GZ_TEXT_ID] = CreateDynamic3DTextLabel("{FFBE5C}Парковщик{FFFFFF}\nЗаберите Ваш транспорт", 0xfab13bFF, g_green_zones[i][GZ_ACTOR][0], g_green_zones[i][GZ_ACTOR][1], g_green_zones[i][GZ_ACTOR][2]+1, 6.0);
        }
	}
	return 1;
}

stock ShowSpecmenuTD(playerid)
{

	STRING_GLOBAL[0] = EOS;

	new
		hour, minute,
		year, month, day;

	gettime(hour, minute);
	getdate(year, month, day);

	SetPlayerChatBubble(playerid, "звонит в службу точного времени...", 0xDD90FFFF, 25.0, 7000);
	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 0);

	new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	//new Float: vehicle_health;
	new Float:health; GetPlayerHealth(spec_player, health);
	new Float:armours;
	GetPlayerArmour(spec_player, armours);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[\"%d/%d/%d %d:%02d\"],[%d,\"%s\",%d,%d,%d,%d,%d,0,\"%s\",%d,\"-\",%d,\"Нет\",\"%d/%d/%d\",0,0,0,0,1]]", year, month, day, hour, minute, spec_player, GetPlayerNameEx(spec_player), GetPlayerLevel(spec_player), GetPlayerExp(spec_player), health, GetPlayerData(playerid, P_WARN), GetPlayerPing(spec_player), GetPlayerTeamName(spec_player), GetPlayerData(spec_player, P_JOB), armours, GetPlayerData(spec_player, P_SKILL_DEAGLE), GetPlayerData(spec_player, P_SKILL_M4), GetPlayerData(spec_player, P_SKILL_AK47));
	BitStream_2(playerid, s_CefInterface, t_CefShow, "AdminSpectate", STRING_GLOBAL);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "client.setHudStatus(false)");

	return 1;
}

public: MenuInfo(playerid, spec_player)
{
    new send_packet[356];
   	new Float:health; GetPlayerHealth(spec_player, health);
	new hour, minute, day, month, year;
	gettime(hour, minute); // %d:%02d
	getdate(year, month, day);
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').time = '%d/%d/%d %d:%02d'", year, month, day, hour, minute);
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.name = '%s'", GetPlayerNameEx(spec_player));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet),"interface('AdminSpectate').player.id = %d", spec_player);
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet),"interface('AdminSpectate').player.device = '1'");
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.lvl = %d", GetPlayerLevel(spec_player));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.exp = %d", GetPlayerExp(spec_player));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	new Float:armours;
	GetPlayerArmour(spec_player, armours);
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.armour = %d", armours);
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.loss = '0'");
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.warns = %d", GetPlayerData(spec_player, P_WARN));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.fraction = '%s'", GetPlayerTeamName(spec_player));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.ping = %d", GetPlayerPing(spec_player));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.weapon = %d", GetPlayerWeapon(spec_player));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.skills = '%d/%d/%d'", GetPlayerData(playerid, P_SKILL_DEAGLE),GetPlayerData(playerid, P_SKILL_M4),GetPlayerData(playerid, P_SKILL_AK47));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.hp = %f", health);
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	new veh_id = GetPlayerVehicleID(spec_player);
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.engine = %d", GetVehicleParamEx(veh_id, V_ENGINE));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.carHp = '0.0'", GetVehicleData(veh_id, V_HEALTH));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
	format(send_packet, sizeof(send_packet), "interface('AdminSpectate').player.carSpeed = %d", GetPlayerSpeed(spec_player));
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, send_packet);
	send_packet[0] =  EOS;
}

stock HideSpecmenuTD(playerid)
{
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, "window.closeInterface('AdminSpectate')");
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, "client.SetCursorStatus(false)");
	BitStream_1(playerid,  s_CefInterface, t_CefUpdate, "client.setHudStatus(true)");
	return 1;
}

stock ShowPlayerAvtoriz(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "confirmBrowserInitialize()");
	new name[25], fmt_str[260];
	GetPlayerName(playerid,name,sizeof name);
	format(fmt_str, sizeof fmt_str, "[\"auth\", \"%s\", 16, 3, 0, 0]", name);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Authorization", fmt_str);
}

new ObjectTrain[MAX_PLAYERS] = {INVALID_OBJECT_ID, ...};
stock ShowPlayerReg(playerid)
{
	SetPVarInt(playerid, "Login_1", 1);
	g_player_account_state[playerid] = 2;
	SetPlayerVirtualWorld(playerid, playerid + 1);
	ObjectTrain[playerid] = CreatePlayerObject(playerid, 10926, 240.046, 2773.26, 12.9784, 0.0, 0.0, 90.2);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "playSound('sounds/train/stop.mp3', 0, 1)");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "hideInterface('Hud')");
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Overlay", "[1000, 3000]");
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Authorization", "[\"register\", [78,135,137,212,213,230,15327,15353,15354,15355,15524,15525], 14, 3, 0, 0]");
	SetSpawnInfo(playerid, 0, 78, 245.5628, 2772.1128, 12.9705, 337.2245, 0, 0, 0, 0, 0, 0);
	PlayerToggleSpectate(playerid, false, false);
	_player_skin[playerid] = 78;
	_player_skin_sex{playerid} = false;
	ApplyActorAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 1, 1, 1, 0);
	InterpolateCameraPos(playerid, 233.3747,2773.7632,13.6588, 246.5050,2774.4876,13.4397, 10000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, 233.2423,2771.7351,13.6306, 245.8628,2772.1128,13.4397, 10000, CAMERA_MOVE);	
}
new
	bool:PlayerSpectate[MAX_PLAYERS];
stock PlayerToggleSpectate(playerid, bool:type, bool:islogged=true)
{
	if(!GetPlayerData(playerid, P_LOGGED) && islogged) type = true;
    PlayerSpectate[playerid] = type;
    TogglePlayerSpectating(playerid,type);
}
stock CancelFlyMode(playerid)
{
	DeletePVar(playerid, "FlyMode");
	CancelEdit(playerid);
	TogglePlayerSpectating(playerid, false);
	DestroyPlayerObject(playerid, noclipdata[playerid][fly_object]);
	noclipdata[playerid][camera_mode] = CAMERA_MODE_NONE;
	return 1;
}
stock FlyMode(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	noclipdata[playerid][fly_object] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);
	TogglePlayerSpectating(playerid, true);
	AttachCameraToPlayerObject(playerid, noclipdata[playerid][fly_object]);
	SetPVarInt(playerid, "FlyMode", 1);
	noclipdata[playerid][camera_mode] = CAMERA_MODE_FLY;
	return 1;
}

stock ShowPlayerInfoHospital(playerid)
{
	Dialog
	(
		playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
		"{"#cGold"}Больница",
		"{"#cW"}Государство бесплатно предоставляет медицинские услуги в\n"\
		"{"#cW"}городских больницах. Однако бесплатный курс может занять\n"\
		"время, поэтому за определенную cумму медперсонал готов\n"\
		"провести для Вас экспресс-лечение.",
		"Закрыть", ""
	);
	return 1;
}

public NoRoof(playerid)
{
    new carid = GetPlayerSurfingVehicleID(playerid); 
    if(carid != INVALID_VEHICLE_ID ) 
    {
        new Float:speed = GetVehicleSpeed(carid);
        new cm=GetVehicleModel(carid);
        switch(cm)
        {
            case 430,446,452,453,454,472,473,484,493,595:{return 1;} 
            default:{}
        }
        if(speed > 0) 
        {
            new Float:slx, Float:sly, Float:slz;
            GetPlayerPos(playerid, slx, sly, slz);
            SetPlayerPos(playerid, slx, sly, slz+2.5); 
            ApplyAnimation(playerid, "ped", "BIKE_fallR", 4.0, 0, 1, 0, 0, 0,0); 
            new Float:hp;
            GetPlayerHealth(playerid, hp);
            SetPlayerHealth(playerid, hp-15); 
            SetTimerEx("anim2", 1100, 0, "d", playerid); 
        }
    }
    return 1;
}

public anim2(playerid)
{
    ApplyAnimation(playerid, "ped", "getup", 4.0, 0, 1, 0, 0, 0,0);
    return 1;
}

stock TeleportPlayerGPS(playerid, Float: x, Float: y, Float: z)
{
	SetPlayerPos(playerid, x, y, z);
	return 1;
}

stock AddRentVehicle(id ,model, Float:X, Float:Y, Float:Z, Float:Angle, color1, color2, price)
{
    new newvid;
    newvid = AddStaticVehicle(model, X, Y, Z, Angle, color1, color2);
    RentCar[newvid][Rprice] = price;
    RentCar[newvid][Rcarid] = id;
    RentCar[newvid][ROwned] = 0;
    IsRentableVehicle[newvid] = 1;
    SetVehicleNumberPlate(newvid,"RENT");
}

TotalVehicles()
{
	new vid;
	vid = CreateVehicle(411, 0, 0, 0, 0, -1, -1, 10);
	DestroyVehicle(vid);
	vid--;
	return vid;
}

forward CountRentedVehicles();
public CountRentedVehicles()
{
	new count;
	for(new R=1; R<TotalVehicles(); R++)
	{
	    if(GetVehicleData(R, V_RENT) != -1)
	    {
	        count++;
		}
	}
}

stock SetPlayerFermerChopCP(playerid)
{
	new rand = random(sizeof fermer_job_chop_cp);
	SetPlayerCheckpoint(playerid, fermer_job_chop_cp[rand][0], fermer_job_chop_cp[rand][1], fermer_job_chop_cp[rand][2], 2.0, CP_ACTION_TYPE_FERMER_TAKE);
}

public: FermerPlayerDrop(playerid, bool: message)
{
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_CHOP);
	if(message)
		SendClientMessage(playerid, 0xFF6600FF, "Вы уронили сено");
	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
	ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 0);
	SetPlayerFermerChopCP(playerid);
	return 1;
}

stock GetDistanceBetweenPoints(Float: X, Float: Y, Float: Z, Float: PointX, Float: PointY, Float: PointZ)
{
	new Float: Distance;
	Distance = floatabs(floatsub(X, PointX)) + floatabs(floatsub(Y, PointY)) + floatabs(floatsub(Z, PointZ));
	return floatround(Distance);
}

stock CefBiz(playerid, biz_id)
{
	new fmt_text[148];
	format(fmt_text, sizeof(fmt_text), "[[1, \"Войти в %s [№ %d]\"]]", GetBusinessData(biz_id, B_NAME), GetBusinessData(biz_id, B_SQL_ID));
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", fmt_text);
	return 1;
}

stock formatInt(amount, delimiter[2] = ".")
{
	new int_string[15];
	format(int_string, sizeof(int_string), "%d", amount >= 0 ? amount : -amount);
	new value = strlen(int_string);
	switch(value)
	{
		case 4..6:
			strins(int_string, delimiter, value - 3, 1);
		case 7..9:
			strins(int_string, delimiter, value - 3, 1),
			strins(int_string, delimiter, value - 6, 1);
		case 10..12:
			strins(int_string, delimiter, value - 3, 1),
			strins(int_string, delimiter, value - 6, 1),
			strins(int_string, delimiter, value - 9, 1);
	}
	if(amount < 0) strins(int_string, "-", 0);
	new money[16];
	format(money, sizeof(money), "%s", int_string);
	return money;
}

forward OnRegistrationData(playerid, email[], password_first[], password_second[]);
forward OnRegistrationCharacter(playerid, eventid, row, skin);
forward OnRegistrationBonuses(playerid, name[]);
forward OnAuthorizationStart(playerid, password[]);

public: EndedInitializeBrowser(playerid, event)
{
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "confirmBrowserInitialize()");
    if(event == 3443) 
    {
        PlayerLauncher[playerid] = 1;
    }
    else 
    {
        PlayerLauncher[playerid] = 0;
    }
    return 1;
}

public OnRegistrationBonuses(playerid, name[])
{
	if(g_player_auth_inputs[playerid] == 1) return 1;
	if(g_player_account_state[playerid] != 2)
	{
		return printf("%s ["DETECT_ACH"] Anti-Spawn", GetPlayerNameEx(playerid));
	}
	new query[540];
	new Cache: result;
	SetPlayerData(playerid, P_SKIN, _player_skin[playerid]);
	format(g_player[playerid][P_REFER], 21, "%s", name);
	format(g_player[playerid][P_MONEY], 21, "400000000");
	format(g_player[playerid][P_BANK], 21, "0");
	mysql_format
	(
		mysql, query, sizeof query,
		"INSERT INTO accounts "\
			"(name,password,email,refer,sex,reg_time,reg_ip,last_ip,last_login,skin,serialid,money,bank) "\
			"VALUES "\
			"('%e','%e','%e','%s',%d,%d,'%e','%e','%d', %d, '%e','%e','%e')",
		GetPlayerNameEx(playerid),
		GetPlayerData(playerid, P_PASSWORD),
		GetPlayerData(playerid, P_EMAIL),
		GetPlayerData(playerid, P_REFER),
		_player_skin_sex{playerid},
		GetPlayerData(playerid, P_REG_TIME),
		GetPlayerData(playerid, P_REG_IP),
		GetPlayerData(playerid, P_LAST_IP),
		GetPlayerData(playerid, P_LAST_LOGIN_TIME),
		GetPlayerData(playerid, P_SKIN),
		GetPlayerData(playerid, P_HARDWARE_ID_TEMP),
		GetPlayerData(playerid, P_MONEY),
		GetPlayerData(playerid, P_BANK)
	);
	result = mysql_query(mysql, query);
	SetPlayerData(playerid, P_ACCOUNT_ID, cache_insert_id());
	cache_delete(result);
	if(DailyreWards_Time[playerid] == 0) DailyreWards_Time[playerid] = 7200;
	GiveSkin(playerid, GetPlayerData(playerid, P_SKIN));
	TogglePlayerSpectating(playerid, false);
	SetPlayerData(playerid, P_SELECT_SKIN, -1);
	SetPlayerData(playerid, P_VIP, 0);
	SetPlayerData(playerid, P_LEVEL, 3);
	UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
	AddPlayerData(playerid, P_CAR_SLOTS, +, 4);
	UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
	SetPlayerData(playerid, P_DRIVING_LIC, 1);
	UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
	SetPlayerData(playerid, P_GARAGE_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS));
	SetPlayerData(playerid, P_BIZ_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS));
	SetPlayerData(playerid, P_AUCTION_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "auction_slots", GetPlayerData(playerid, P_AUCTION_SLOTS));
	SetPlayerData(playerid, P_HOUSE_SLOTS, 2);
	UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS));
	SetPlayerData(playerid, P_KIOSK_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS));
	SetPlayerData(playerid, P_GARDEN_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "garden_slots", GetPlayerData(playerid, P_GARDEN_SLOTS));
	SetPlayerSkin(playerid, _player_skin[playerid]);
	SetPlayerSpawnInit(playerid);
	SpawnPlayer(playerid);
	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
	SetPlayerInit(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Overlay", "[1000, 2500]");
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Authorization");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "stopSound()");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "client.setChatStatus(true)");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "showInterface('Hud')");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "client.setHudStatus(true)");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud')");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').updateHungerLevel(100)");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').setServer(1)");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Hud').setShowControls(1)");	
	format(query, sizeof query, "interface('Hud').setBonus(%d)", g_doubling[1]);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
	format(query, sizeof query, "window.interface('Hud').info.money = window.interface('Hud').info.money = %s", GetPlayerMoneyEx(playerid));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, query);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.stopSound()");
	SetFullness(playerid, 75);
	SetPVarInt(playerid, "Login_1", 1);
	Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"{"#cW"}Подсказка","{"#cW"}Для таго чтобы заработал ESK и /mn {ff9980}После регистрации нужно перезайти в игру","", "Понял");
	DestroyPlayerObject(playerid, ObjectTrain[playerid]);
	status_authorization[playerid] = 1;
	g_player_auth_inputs[playerid] = 1;
	SetPlayerWeather(playerid, 0);
	SetPVarInt(playerid, "Login", 1);
	SetPlayerData(playerid, P_PREMIUM, 2);
	SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);
	UpdatePlayerDatabaseInt(playerid, "premium", 2);
	UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400); //
	return 1;
}

public OnRegistrationCharacter(playerid, eventid, row, skin)
{
	if(eventid == 0)
	{
		if(row == 0){
			_player_skin_sex{playerid} = false;
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Authorization').setSkins('[78,135,137,212,213,230,15327,15353,15354,15355,15524,15525]');");
			new const skins[12] = {78,135,137,212,213,230,15327,15353,15354,15355,15524,15525};
			_player_skin[playerid] = skins[skin];
		}
		if(row == 1){
			_player_skin_sex{playerid} = true;
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Authorization').setSkins('[89,15345,15352,88,39,38,75,15522]');");
			new const skins[8 + 1] = {89,15345,15352,88,39,38,75,15522};
			_player_skin[playerid] = skins[skin];
		}
		SetPlayerData(playerid, P_SEX, _player_skin_sex{playerid});
		SetPlayerSkin(playerid, _player_skin[playerid]);
	}
	if(eventid == 1) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Authorization').setRegistrationStage(3)");
	return true;
}

public OnRegistrationData(playerid, email[], password_first[], password_second[])
{
	if(g_player_account_state[playerid] != 2)
	{
		return printf("%s попытался выебнуться типо крутой хохол", GetPlayerNameEx(playerid));
	}
	if(GetPlayerSqlIDByName(GetPlayerNameEx(playerid)) != -1) return 1;
	SetPlayerData(playerid, P_REG_TIME, gettime());
	SetPlayerData(playerid, P_LAST_LOGIN_TIME, gettime());
	format(g_player[playerid][P_REG_IP], 16, "%s", GetPlayerIpEx(playerid));
	format(g_player[playerid][P_LAST_IP], 16, "%s", GetPlayerIpEx(playerid));
	format(g_player[playerid][P_PASSWORD], 85, "%s", password_first);
	format(g_player[playerid][P_EMAIL], 61, "%s", email);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Authorization').setRegistrationStage(2)");
	return GetPlayerAccountID(playerid);
}

public OnAuthorizationStart(playerid, password[])
{
	if(strlen(GetPlayerData(playerid, P_PASSWORD)) < 1) return 1;
	if(strfind(password,"~") != -1 || strfind(password,"%") != -1)
	{
		return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}
	if(strlen(password) < 1)
	{
		BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface(\"Authorization\").$refs.auth.setError(\"password\", \"Вы не ввели пароль\")");
		return 1;
	}
	new login_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
	new bool: wrong_password = false;
	new str_len = strlen(password);
	if(1 <= str_len <= 32)
	{
		if(strcmp(password, GetPlayerData(playerid, P_PASSWORD), false))
		{
			wrong_password = true;
			login_step--;
			ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Authorization').$refs.auth.setError(\"password\", \"Неправильный пароль\")");
		}
		else
		{
			SetPVarInt(playerid, "Login_1", 1);
			GetPlayerPassword(playerid, password);
			if(GetPlayerAdminEx(playerid) > 0) 
			{
				if(!strcmp(g_player[playerid][P_ADMIN_PASSWORD], "999999", true)) Dialog(playerid, DIALOG_ADMIN_CREATE_2, DIALOG_STYLE_PASSWORD,"{FFD83D}Система безопасности","{FFFFFF}Создайте свой личный пароль для авторизации как администратор","Далее", "Закрыть");
				else Dialog(playerid, DIALOG_ADMIN_PASS_2, DIALOG_STYLE_PASSWORD,"{FFD83D}Система безопасности","{FFFFFF}Введите пароль:","Далее", "Закрыть");
			}
			else status_authorization[playerid] = 1, BitStream_2(playerid, s_CefInterface, t_CefShow, "Loading", "[3000]"), SetTimerEx("OnPlayerLoading", 3000, false, "i", playerid);
		}
	}
	else
	{
		wrong_password = true;
		login_step--;
		ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Authorization').$refs.auth.setError(\"password\", \"Некорректная длинна пароля\")");
	}
	return 1;
}

stock GetPlayerPassword(playerid, password[])
{
	if(strcmp(password, GetPlayerData(playerid, P_PASSWORD), false))
	{
		printf("["DETECT_ACH"] Сработала проверка GetPlayerPassword (nick: %s)", GetPlayerNameEx(playerid));
		Kick(playerid);
	}
}

public: OnPlayerLoading(playerid) //изменял тут
{
    new query[512];
    format(query, sizeof query, "UPDATE accounts SET serialid_temp = '%e' WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_HARDWARE_ID_TEMP), GetPlayerAccountID(playerid));
    mysql_tquery(mysql, query);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.stopSound()");
    CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, LOGIN_STATE_LOAD_ACC, false);
    new type = GetPlayerData(playerid, P_WARDS_TYPE_PRIZES);
    if (GetPlayerData(playerid, P_WARDS_PRIZE) == -1)
    {
        SetPlayerData(playerid, P_WARDS_PRIZE, 0);
        UpdatePlayerDatabaseInt(playerid, "wards_prize", 0);
        STRING_GLOBAL[0] = EOS;
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d,-1,\"2 часа \",[[%d,%d,%d,1,\"%s\", 1],[%d,%d,%d,2,\"%s\", 2],[%d,%d,%d,3,\"%s\", 3],[%d,%d,%d,4,\"%s\", 4],[%d,%d,%d,5,\"%s\", 5],[%d,%d,%d,6,\"%s\", 6],[%d,%d,%d,7,\"%s\", 7]]]",
            GetPlayerData(playerid, P_WARDS_PRIZE),
            g_dailyrewards[type][0][DAILY_REWARDS_TYPE], g_dailyrewards[type][0][DAILY_REWARDS_ID], g_dailyrewards[type][0][DAILY_REWARDS_COUNT], g_dailyrewards[type][0][DAILY_REWARDS_NAME],
            g_dailyrewards[type][1][DAILY_REWARDS_TYPE], g_dailyrewards[type][1][DAILY_REWARDS_ID], g_dailyrewards[type][1][DAILY_REWARDS_COUNT], g_dailyrewards[type][1][DAILY_REWARDS_NAME],
            g_dailyrewards[type][2][DAILY_REWARDS_TYPE], g_dailyrewards[type][2][DAILY_REWARDS_ID], g_dailyrewards[type][2][DAILY_REWARDS_COUNT], g_dailyrewards[type][2][DAILY_REWARDS_NAME],
            g_dailyrewards[type][3][DAILY_REWARDS_TYPE], g_dailyrewards[type][3][DAILY_REWARDS_ID], g_dailyrewards[type][3][DAILY_REWARDS_COUNT], g_dailyrewards[type][3][DAILY_REWARDS_NAME],
            g_dailyrewards[type][4][DAILY_REWARDS_TYPE], g_dailyrewards[type][4][DAILY_REWARDS_ID], g_dailyrewards[type][4][DAILY_REWARDS_COUNT], g_dailyrewards[type][4][DAILY_REWARDS_NAME],
            g_dailyrewards[type][5][DAILY_REWARDS_TYPE], g_dailyrewards[type][5][DAILY_REWARDS_ID], g_dailyrewards[type][5][DAILY_REWARDS_COUNT], g_dailyrewards[type][5][DAILY_REWARDS_NAME],
            g_dailyrewards[type][6][DAILY_REWARDS_TYPE], g_dailyrewards[type][6][DAILY_REWARDS_ID], g_dailyrewards[type][6][DAILY_REWARDS_COUNT], g_dailyrewards[type][6][DAILY_REWARDS_NAME]);
        BitStream_2(playerid, s_CefInterface, t_CefShow, "DailyRewards", STRING_GLOBAL);
    }
    return 1;
}

stock OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(GetPVarInt(playerid, "Login_1") != 1) 
	{
		printf("["DETECT_ACH"] Игрок %s попытался использовать диалог не авторизовавшись", GetPlayerNameEx(playerid));
		return 1;
	}
	if(player_DialogID[playerid] != dialogid) return 1;
	player_DialogID[playerid] = -1;
    new list_id = listitem + 1;
	if(strcmp(inputtext, "#", true) == 0 || strcmp(inputtext, "|", true) == 0 || strcmp(inputtext, "%", true) == 0 || strcmp(inputtext, "@", true) == 0 || strcmp(inputtext, "&", true) == 0) SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	if(strfind(inputtext,"%") != -1) return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
    switch(dialogid)
	{
		case DIALOG_DONATE_BUY:
		{
			if(!response) return ShowPlayerDonateMenu(playerid);
			new	query[94],
				Cache: result;
			format(query, sizeof query, "SELECT * FROM donate_items WHERE id=%d LIMIT 1", GetPlayerListitemValue(playerid, listitem));
			result = mysql_query(mysql, query, true);
			new name[48];
			cache_get_field_content(0, "name", name);
			new item_id = cache_get_field_content_int(0, "item_id");
			new price = cache_get_field_content_int(0, "price");
			new count = cache_get_field_content_int(0, "count");
			new type = cache_get_field_content_int(0, "type");
			new indx = cache_get_field_content_int(0, "indx");
			cache_delete(result);
			if(GetPlayerCoins(playerid) < price) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2), ShowPlayerDonateMenu(playerid);
			if(type == 1)
			{
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты.");
				GivePlayerCoins(playerid, -price);
				GiveCar(playerid, item_id, 1, 1, -1, -1765.9470, 2911.2585, 5.8822, 90.4859, gettime());
				SCMF(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}Вы успешно приобрели транспорт: {FFFFFF}%s[№%d] {"SERVER_COLOR"}за {FFFFFF}%d "SERVER_RUB"", name, item_id, price);
			}
			if(type == 2)
			{
				if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
				GivePlayerCoins(playerid, -price);
				GiveSkin(playerid, item_id);
				SCMF(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}Вы успешно приобрели одежду: {FFFFFF}%s[№%d] {"SERVER_COLOR"}за {FFFFFF}%d "SERVER_RUB"", name, item_id, price);
			}
			if(type == 3)
			{
				if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
				GivePlayerCoins(playerid, -price);
				GiveAcs(playerid, item_id, indx);
				SCMF(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}Вы успешно приобрели аксессуар: {FFFFFF}%s[№%d] {"SERVER_COLOR"}за {FFFFFF}%d "SERVER_RUB"", name, item_id, price);
			}
			if(type == 5)
			{
				GivePlayerCoins(playerid, -price);
				GiveIteam(playerid, item_id, 1, count, 0);
				SCMF(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}Вы успешно приобрели: {FFFFFF}%s[№%d] {"SERVER_COLOR"}в количестве {FFFFFF}%d шт. {"SERVER_COLOR"}за {FFFFFF}%d "SERVER_RUB"", name, item_id, count, price);
			}
			if(type == 4)
			{
				GivePlayerCoins(playerid, -price);
				if(indx == 1) // дома
				{
					AddPlayerData(playerid, P_HOUSE_SLOTS, +, count);
					UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS));
				}
				if(indx == 2) // бизнесы
				{
					AddPlayerData(playerid, P_BIZ_SLOTS, +, count);
					UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS));
				}
				if(indx == 3) // гаражи
				{
					AddPlayerData(playerid, P_GARAGE_SLOTS, +, count);
					UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS));
				}
				if(indx == 4) // кары
				{
					AddPlayerData(playerid, P_CAR_SLOTS, +, count);
					UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
				}
				if(indx == 5) // огороды
				{
					AddPlayerData(playerid, P_GARDEN_SLOTS, +, count);
					UpdatePlayerDatabaseInt(playerid, "garden_slots", GetPlayerData(playerid, P_GARDEN_SLOTS));
				}
				if(indx == 6) // киоски
				{
					AddPlayerData(playerid, P_KIOSK_SLOTS, +, count);
					UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS));
				}
				if(indx == 7) // аукцион
				{
					AddPlayerData(playerid, P_AUCTION_SLOTS, +, count);
					UpdatePlayerDatabaseInt(playerid, "auction_slots", GetPlayerData(playerid, P_AUCTION_SLOTS));
				}
				SCMF(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}Вы успешно приобрели: {FFFFFF}%s {"SERVER_COLOR"}в количестве {FFFFFF}%d шт. {"SERVER_COLOR"}за {FFFFFF}%d "SERVER_RUB"", name, count, price);
			}
		}		
        case DIALOG_JAIL_ALERT:
        {
            if(!response) return 1;
            foreach(new i : Player)
            {
                if(IsPlayerConnected(i) && IsPlayerLogged(i) && IsPlayerInDynamicArea(i, AreaJailInterior) || IsPlayerConnected(i) && IsPlayerLogged(i) && IsPlayerInDynamicArea(i, AreaJail)) SCMF(i, 0x7ca2cbFF, "[Громкоговоритель] %s[%d]: {FFFFFF}%s", GetPlayerNameEx(playerid), playerid, inputtext);
            }
        }			
		case DIALOG_EXJAIL:
		{
            if(!response) return 1;
			PobegGetStarted(playerid);
		}	
		case BUY_TICKET_METRO:
		{
			if (response)
			{
				if (g_player_metro[playerid][E_PLAYER_METRO_STATUS] != 0)
				{
					SetPlayerPos(playerid, g_metro_station[listitem][PICKUP_POS_X], g_metro_station[listitem][PICKUP_POS_Y], g_metro_station[listitem][PICKUP_POS_Z]);
				}
				else
				{
					SendClientMessage(playerid, -1, "У вас нет билета.");
				}
			}
		}		
		case TRASH_PLAYER_WORK:
		{
			if (response)
			{
				SetPlayerCheckpoint(playerid, 
				g_trash_work[GetPlayerListitemValue(playerid, listitem)][TRASH_POS_X], 
				g_trash_work[GetPlayerListitemValue(playerid, listitem)][TRASH_POS_Y], 
				g_trash_work[GetPlayerListitemValue(playerid, listitem)][TRASH_POS_Z], 
				10.0, 
				CP_PUT_TRASH_WORK);
				g_player_trash[playerid][TRASH_ID] = GetPlayerListitemValue(playerid, listitem);
			}
		}	
		case RENT_WORK_VEHICLE:
		{
			if(response)
			{
				g_player_trash[playerid][TRASH_ID_CAR] = GetPlayerVehicleID(playerid);
				GameText(playerid, "Используйте: /trash для начало работы!", 2000, 0);
				SCM(playerid, -1, "{FFAF00}Используйте: {FFFFFF}/trash {FFAF00}для начало работы!");
				GivePlayerMoneyEx(playerid, -5000000);
			}
			else 
			{
				return 1;
			}
		}
		case DIALOG_DONATE_MENU:
		{
			if(!response) return ShowPlayerDonateMenu1(playerid);
			switch(listitem)
			{
				case 0:
				{
					page_cars[playerid] = 1;
					ShowDialogDonatePerfect(playerid, 4, page_cars[playerid]);
				}
				case 1:
				{
					page_cars[playerid] = 1;
					ShowDialogDonatePerfect(playerid, 1, page_cars[playerid]);
				}
				case 2:
				{						
					BitStream_2(playerid, s_CefInterface, t_CefShow, "ItemStore", "[\"Покупка скинов за /rub\",[\"Эксклюзивные скины!\"],[[\"/Skins/15498\",\"Скин\",\"200\",0],[\"/Skins/15563\",\"Скин\",\"200\",1],[\"/Skins/15564\",\"Скин\",\"200\",2],[\"/Skins/15565\",\"Скин\",\"200\",3],[\"/Skins/15499\",\"Скин\",\"300\",4],[\"/Skins/15493\",\"Скин\",\"300\",5],[\"/Skins/15496\",\"Скин\",\"300\",6],[\"/Skins/15490\",\"Скин\",\"300\",7],[\"/Skins/15569\",\"Скин\",\"300\",8],[\"/Skins/15571\",\"Скин\",\"300\",9],[\"/Skins/15572\",\"Скин\",\"300\",10],[\"/Skins/15574\",\"Скин\",\"300\",11],[\"/Skins/15586\",\"Скин\",\"200\",12],[\"/Skins/15589\",\"Скин\",\"200\",13],[\"/Skins/15588\",\"Скин\",\"200\",14],[\"/Skins/15587\",\"Скин\",\"200\",15],[\"/Skins/17024\",\"Скин\",\"225\",16],[\"/Skins/17023\",\"Скин\",\"225\",17],[\"/Skins/17022\",\"Скин\",\"225\",18],[\"/Skins/17017\",\"Скин\",\"225\",19],[\"/Skins/17041\",\"Скин\",\"225\",20],[\"/Skins/17039\",\"Скин\",\"225\",21],[\"/Skins/17040\",\"Скин\",\"225\",22],[\"/Skins/17038\",\"Скин\",\"225\",23],[\"/Skins/17045\",\"Скин\",\"250\",24],[\"/Skins/17044\",\"Скин\",\"250\",25],[\"/Skins/17043\",\"Скин\",\"250\",26],[\"/Skins/17042\",\"Скин\",\"250\",27],[\"/Skins/17059\",\"Скин\",\"250\",28],[\"/Skins/17050\",\"Скин\",\"250\",29],[\"/Skins/17047\",\"Скин\",\"250\",30],[\"/Skins/17046\",\"Скин\",\"250\",31],[\"/Skins/205\",\"Скин\",\"188\",32],[\"/Skins/204\",\"Скин\",\"188\",33],[\"/Skins/203\",\"Скин\",\"188\",34],[\"/Skins/202\",\"Скин\",\"188\",35],[\"/Skins/282\",\"Скин\",\"300\",36],[\"/Skins/265\",\"Скин\",\"300\",37],[\"/Skins/255\",\"Скин\",\"300\",38],[\"/Skins/224\",\"Скин\",\"300\",39],[\"/Skins/17055\",\"Скин\",\"300\",40],[\"/Skins/17064\",\"Скин\",\"300\",41],[\"/Skins/17067\",\"Скин\",\"300\",42],[\"/Skins/148\",\"Скин\",\"300\",43],[\"/Skins/17070\",\"Скин\",\"320\",44],[\"/Skins/17071\",\"Скин\",\"320\",45],[\"/Skins/17072\",\"Скин\",\"320\",46],[\"/Skins/17073\",\"Скин\",\"320\",47],[\"/Skins/17074\",\"Скин\",\"490\",48],[\"/Skins/17075\",\"Скин\",\"490\",49],[\"/Skins/17076\",\"Скин\",\"490\",50],[\"/Skins/17077\",\"Скин\",\"490\",51],[\"/Skins/15414\",\"Скин\",\"333\",52],[\"/Skins/15421\",\"Скин\",\"250\",53],[\"/Skins/15427\",\"Скин\",\"250\",54],[\"/Skins/15434\",\"Скин\",\"333\",55],[\"/Skins/15436\",\"Скин\",\"333\",56],[\"/Skins/15451\",\"Скин\",\"333\",57],[\"/Skins/15462\",\"Скин\",\"450\",58],[\"/Skins/15483\",\"Скин\",\"333\",59],[\"/Skins/15501\",\"Скин\",\"333\",60],[\"/Skins/15506\",\"Скин\",\"333\",61],[\"/Skins/15539\",\"Скин\",\"555\",62],[\"/Skins/15544\",\"Скин\",\"333\",63],[\"/Skins/15547\",\"Скин\",\"333\",64],[\"/Skins/15551\",\"Скин\",\"333\",65],[\"/Skins/15568\",\"Скин\",\"333\",66],[\"/Skins/15595\",\"Скин\",\"444\",67],[\"/Skins/17028\",\"Скин\",\"555\",68],[\"/Skins/17029\",\"Скин\",\"444\",69],[\"/Skins/17048\",\"Скин\",\"444\",70],[\"/Skins/17050\",\"Скин\",\"444\",71],[\"/Skins/17051\",\"Скин\",\"444\",72],[\"/Skins/17049\",\"Скин\",\"333\",73],[\"/Skins/17058\",\"Скин\",\"444\",74],[\"/Skins/17069\",\"Скин\",\"444\",75],[\"/Skins/1\",\"Скин\",\"333\",76],[\"/Skins/43\",\"Скин\",\"333\",77],[\"/Skins/48\",\"Скин\",\"444\",78],[\"/Skins/47\",\"Скин\",\"666\",79],[\"/Skins/51\",\"Скин\",\"444\",80],[\"/Skins/63\",\"Скин\",\"444\",81],[\"/Skins/115\",\"Скин\",\"333\",82],[\"/Skins/174\",\"Скин\",\"444\",83],[\"/Skins/175\",\"Скин\",\"333\",84],[\"/Skins/182\",\"Скин\",\"555\",85],[\"/Skins/183\",\"Скин\",\"444\",86],[\"/Skins/194\",\"Скин\",\"777\",87],[\"/Skins/206\",\"Скин\",\"555\",88],[\"/Skins/250\",\"Скин\",\"333\",89],[\"/Skins/258\",\"Скин\",\"333\",90],[\"/Skins/270\",\"Скин\",\"666\",91],[\"/Skins/271\",\"Скин\",\"555\",92],[\"/Skins/15320\",\"Скин\",\"444\",93],[\"/Skins/15358\",\"Скин\",\"444\",94],[\"/Skins/15357\",\"Скин\",\"444\",95],[\"/Skins/15407\",\"Скин\",\"444\",96],[\"/Skins/15415\",\"Скин\",\"777\",97],[\"/Skins/15423\",\"Скин\",\"555\",98],[\"/Skins/17079\",\"Скин\",\"700\",99],[\"/Skins/17081\",\"Скин\",\"400\",100],[\"/Skins/281\",\"Скин\",\"300\",101],[\"/Skins/280\",\"Скин\",\"888\",102]],0]");
					SetPVarInt(playerid,"rubitem",3);
				}
				case 3:
				{
					page_cars[playerid] = 1;
					ShowDialogDonatePerfect(playerid, 5, page_cars[playerid]);
				}
				case 4:
				{
					BitStream_2(playerid, s_CefInterface, t_CefShow, "ItemStore", "[\"Покупка аксессуаров за /rub\",[\"аксессуары\"],[[\"/accessories/17282\",\"Рюкзак\",\"100р\",0],[\"/accessories/17283\",\"Рюкзак\",\"100р\",1],[\"/accessories/17284\",\"Рюкзак\",\"100р\",2],[\"/accessories/17285\",\"Рюкзак\",\"100р\",3],[\"/accessories/16457\",\"Рюкзак\",\"100р\",4],[\"/accessories/16456\",\"Рюкзак\",\"100р\",5],[\"/accessories/16455\",\"Рюкзак\",\"100р\",6],[\"/accessories/16454\",\"Рюкзак\",\"100р\",7],[\"/accessories/16678\",\"Скейт\",\"100р\",8],[\"/accessories/16465\",\"Скейт\",\"100р\",9],[\"/accessories/16464\",\"Скейт\",\"100р\",10],[\"/accessories/16463\",\"Скейт\",\"100р\",11],[\"/accessories/16600\",\"Рука на плече\",\"100р\",12],[\"/accessories/14736\",\"Сова на плече\",\"100р\",13],[\"/accessories/14735\",\"Змея на шею\",\"100р\",14],[\"/accessories/14724\",\"Череп на плече\",\"100р\",15],[\"/accessories/16228\",\"Рюкзак\",\"100р\",16],[\"/accessories/16472\",\"Рюкзак\",\"100р\",17],[\"/accessories/16471\",\"Рюкзак\",\"100р\",18],[\"/accessories/16470\",\"Рюкзак\",\"100р\",19],[\"/accessories/14066\",\"Маска\",\"100р\",20],[\"/accessories/14064\",\"Маска\",\"100р\",21],[\"/accessories/14048\",\"Маска\",\"100р\",22],[\"/accessories/14052\",\"Маска\",\"100р\",23],[\"/accessories/14780\",\"Крылья\",\"250р\",24],[\"/accessories/14779\",\"Крылья\",\"250р\",25],[\"/accessories/14782\",\"Крылья\",\"250р\",26],[\"/accessories/14781\",\"Крылья\",\"250р\",27],[\"/accessories/16985\",\"Мечь\",\"88р\",28],[\"/accessories/16986\",\"Мечь\",\"88р\",29],[\"/accessories/16987\",\"Мечь\",\"88р\",30],[\"/accessories/16988\",\"Мечь\",\"88р\",31],[\"/accessories/16682\",\"Мечь\",\"88р\",32],[\"/accessories/16665\",\"Мечь\",\"88р\",33],[\"/accessories/16747\",\"Шапка Ушанка\",\"300р\",34],[\"/accessories/16746\",\"Шапка\",\"50р\",35],[\"/accessories/17385\",\"Рюкзак\",\"250р\",36],[\"/accessories/17390\",\"Рюкзак\",\"250р\",37],[\"/accessories/17605\",\"Рюкзак\",\"250р\",38],[\"/accessories/17395\",\"Рюкзак\",\"250р\",39],[\"/accessories/18292\",\"Рюкзак\",\"300р\",40],[\"/accessories/18000\",\"Рюкзак\",\"300р\",41],[\"/accessories/17999\",\"Рюкзак\",\"300р\",42],[\"/accessories/17987\",\"Рюкзак\",\"300р\",43],[\"/accessories/14075\",\"Рюкзак\",\"300р\",44],[\"/accessories/16592\",\"Рюкзак\",\"200р\",45],[\"/accessories/16779\",\"Плащ\",\"150р\",46],[\"/accessories/14739\",\"Крылья\",\"600р\",47],[\"/accessories/14196\",\"Посох\",\"450р\",48],[\"/accessories/14197\",\"Посох\",\"700р\",49],[\"/accessories/17386\",\"Маска\",\"350р\",50],[\"/accessories/18549\",\"Рюкзак\",\"400р\",51],[\"/accessories/18548\",\"Маска\",\"350р\",52],[\"/accessories/4125\",\"Шапка\",\"200\",53],[\"/accessories/4126\",\"Зонтик\",\"400\",54],[\"/accessories/4127\",\"Рюкзак\",\"400\",55],[\"/accessories/4128\",\"Рюкзак\",\"666\",56],[\"/accessories/4129\",\"Сумка\",\"444\",57],[\"/accessories/4134\",\"На плече\",\"666\",58]],0]");
					SetPVarInt(playerid,"rubitem",4);
				}
				case 5: //Покупка эксклюзивных аксессуаров на транспорт
				{
					Dialog
					(
						playerid, DIALOG_COINS_LIST_ACS_CAR, DIALOG_STYLE_LIST,
					"{FFFFFF}Покупка аксессуаров на транспорт",
					"{FFFFFF}Неон Красный [№ 18647]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Синий [№ 18648]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Зеленый [№ 18649]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Жолтый [№ 18650]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Розовый [№ 18651]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Белый [№ 18652]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Велосипед на багажник [№ 16229]\t{FFAF00}150 "SERVER_RUB"\n"\
					"{FFFFFF}Ватрушка на крышу [№ 15740]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Елка на крышу [№ 15736]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Мишка [№ 15874]\t{FFAF00}77 "SERVER_RUB"\n"\
					"{FFFFFF}Свадебные кольца [№ 15873]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Банки на глушитель [№ 15870]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Сноуборд [№ 15738]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Антены на крышу [№ 15737]\t{FFAF00}50 "SERVER_RUB"\n"\
					"{FFFFFF}Багажник на крышу [№ 15739]\t{FFAF00}150 "SERVER_RUB"\n"\
					"{FFFFFF}Решотка [№ 15896]\t{FFAF00}120 "SERVER_RUB"\n"\
					"{FFFFFF}Камуфляж [№ 15894]\t{FFAF00}120 "SERVER_RUB"\n"\
					"{FFFFFF}Маленький Гелик на крышу [№ 17273]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Зомби [№ 17637]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Матрас на крышу [№ 4137]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Мигалка на крышу [№ 17163]\t{FFAF00}999 "SERVER_RUB"",
					"Далее", "Назад"
					);
				}
				case 6: //Покупка игрового уровня
				{
					Dialog
					(
						playerid, DIALOG_COINS_LEVEL, DIALOG_STYLE_INPUT,
						"Покупка игрового уровня",
						"{FFFFFF}Цена игрового уровня за единицу - {FFAF00}5 "SERVER_RUB"\n"\
						"{FFFFFF}Укажите уровень от {FFAF00}1 {FFFFFF}до {FFAF00}999",
						"Далее", "Назад"
					);
				}
			}
		}
		case DIALOG_DONATE_MENU1:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDonateMenu(playerid);
				}
				case 1: //Покупка Наборов
				{
					Dialog
					(
						playerid, DIALOG_DONAT_VALUTE, DIALOG_STYLE_LIST,
					"{FFFFFF}Покупка Игровой валюты",
					"{FFFFFF}[1]. 100.000.000 Рублей\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}[2]. 300.000.000 Рублей\t{FFAF00}259 "SERVER_RUB"\n"\
					"{FFFFFF}[3]. 600.000.000 Рублей\t{FFAF00}459 "SERVER_RUB"\n"\
					"{FFFFFF}[4]. 1.000.000.000 Рублей\t{FFAF00}799 "SERVER_RUB"\n"\
					"{FFFFFF}[5]. 2.000.000.000 Рублей\t{FFAF00}1300 "SERVER_RUB"",
						"Купить", "Назад"
					);
				}
				case 2:
				{
					Dialog
					(
						playerid, DIALOG_COINS_VIP, DIALOG_STYLE_LIST,
					"{FFFFFF}Покупка vip",
					"{FFFFFF}[1]. VIP PLATIUM\t30 дней.\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}[2]. VIP GOLD\t30 дней.\t{FFAF00}250 "SERVER_RUB"\n"\
					"{FFFFFF}[3]. VIP SILVER\t30 дней.\t{FFAF00}100 "SERVER_RUB"",
						"Купить", "Назад"
					);
				}
				case 3: //Покупка Наборов
				{
					Dialog
					(
						playerid, DIALOG_DONAT_MEN, DIALOG_STYLE_LIST,
					"{FFFFFF}Покупка Донат-наборов",
					"{FFFFFF}[1]. Эпический стартовый набор\tВсе и сразу\t{FFAF00}500 "SERVER_RUB"\n"\
					"{FFFFFF}[2]. Донат-наборов\tЭлектричка\t{FFAF00}800 "SERVER_RUB"\n"\
					"{FFFFFF}[3]. Донат-наборов\tАристократ\t{FFAF00}600 "SERVER_RUB"\n"\
					"{FFFFFF}[4]. Донат-наборов\tГонщик 2.0\t{FFAF00}1500 "SERVER_RUB"",
						"Далее", "Назад"
					);
				}
				case 4: //Покупка Наборов
				{
					Dialog
					(
						playerid, DIALOG_DONAT_NAKAZ, DIALOG_STYLE_LIST,
					"{FFFFFF}Снятия наказаний за /rub",
					"{FFFFFF}[1]. Выход из Тюрьмы\t{FFAF00}250 "SERVER_RUB"\n"\
					"{FFFFFF}[2]. Снять мут чата\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}[3]. Снять мут голосового чата\t{FFAF00}200 "SERVER_RUB"\n"\
					"{FFFFFF}[4]. Снять мут /vr чата\t{FFAF00}50 "SERVER_RUB"\n"\
					"{FFFFFF}[5]. Снять мут /report\t{FFAF00}50 "SERVER_RUB"\n"\
					"{FFFFFF}[6]. Снять 1 warn\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}[7]. Снять 1 awarn\t{FFAF00}600 "SERVER_RUB"",
						"Купить", "Назад"
					);
				}
			}
		}
		case DIALOG_COINS_LIST_ACS_CAR:
		{
			if(!response) return ShowPlayerDonateMenu(playerid);
			new modelid, price, indx;
			switch(listitem + 1)
			{
				case 1: modelid = 18647, price = 30, indx = 14;
				case 2: modelid = 18648, price = 30, indx = 14;
				case 3: modelid = 18649, price = 30, indx = 14;
				case 4: modelid = 18650, price = 30, indx = 14;
				case 5: modelid = 18651, price = 30, indx = 14;
				case 6: modelid = 18652, price = 30, indx = 14;
				case 7: modelid = 16229, price = 150, indx = 14;
				case 8: modelid = 15740, price = 100, indx = 15;
				case 9: modelid = 15736, price = 100, indx = 16;
				case 10: modelid = 15874, price = 77, indx = 17;
				case 11: modelid = 15873, price = 100, indx = 20;
				case 12: modelid = 15870, price = 100, indx = 21;
				case 13: modelid = 15738, price = 100, indx = 14;
				case 14: modelid = 15737, price = 50, indx = 15;
				case 15: modelid = 15739, price = 150, indx = 16;
				case 16: modelid = 15896, price = 120, indx = 15;
				case 17: modelid = 15894, price = 120, indx = 15;
				case 18: modelid = 17273, price = 400, indx = 20;
				case 19: modelid = 17637, price = 400, indx = 20;
				case 20: modelid = 4137, price = 400, indx = 20;
				case 21: modelid = 18646, price = 999, indx = 20;
			}

			if(GetPlayerData(playerid, P_COINS) < price)
			{
				GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				Dialog
				(
					playerid, DIALOG_COINS_LIST_ACS_CAR, DIALOG_STYLE_LIST,
					"{FFFFFF}Покупка аксессуаров на транспорт",
					"{FFFFFF}Неон Красный [№ 18647]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Синий [№ 18648]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Зеленый [№ 18649]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Жолтый [№ 18650]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Розовый [№ 18651]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Белый [№ 18652]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Велосипед на багажник [№ 16229]\t{FFAF00}150 "SERVER_RUB"\n"\
					"{FFFFFF}Ватрушка на крышу [№ 15740]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Елка на крышу [№ 15736]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Мишка [№ 15874]\t{FFAF00}77 "SERVER_RUB"\n"\
					"{FFFFFF}Свадебные кольца [№ 15873]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Банки на глушитель [№ 15870]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Сноуборд [№ 15738]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Антены на крышу [№ 15737]\t{FFAF00}50 "SERVER_RUB"\n"\
					"{FFFFFF}Багажник на крышу [№ 15739]\t{FFAF00}150 "SERVER_RUB"\n"\
					"{FFFFFF}Решотка [№ 15896]\t{FFAF00}120 "SERVER_RUB"\n"\
					"{FFFFFF}Камуфляж [№ 15894]\t{FFAF00}120 "SERVER_RUB"\n"\
					"{FFFFFF}Маленький Гелик на крышу [№ 17273]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Зомби [№ 17637]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Матрас на крышу [№ 4137]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Мигалка на крышу [№ 17163]\t{FFAF00}999 "SERVER_RUB"",
					"Далее", "Назад"
				);
				return 1;
			}
			if(GetInventorySlots(playerid) == -1) 
			{
				Dialog
				(
					playerid, DIALOG_COINS_LIST_ACS_CAR, DIALOG_STYLE_LIST,
					"{FFFFFF}Покупка аксессуаров на транспорт",
					"{FFFFFF}Неон Красный [№ 18647]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Синий [№ 18648]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Зеленый [№ 18649]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Жолтый [№ 18650]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Розовый [№ 18651]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Неон Белый [№ 18652]\t{FFAF00}30 "SERVER_RUB"\n"\
					"{FFFFFF}Велосипед на багажник [№ 16229]\t{FFAF00}150 "SERVER_RUB"\n"\
					"{FFFFFF}Ватрушка на крышу [№ 15740]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Елка на крышу [№ 15736]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Мишка [№ 15874]\t{FFAF00}77 "SERVER_RUB"\n"\
					"{FFFFFF}Свадебные кольца [№ 15873]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Банки на глушитель [№ 15870]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Сноуборд [№ 15738]\t{FFAF00}100 "SERVER_RUB"\n"\
					"{FFFFFF}Антены на крышу [№ 15737]\t{FFAF00}50 "SERVER_RUB"\n"\
					"{FFFFFF}Багажник на крышу [№ 15739]\t{FFAF00}150 "SERVER_RUB"\n"\
					"{FFFFFF}Решотка [№ 15896]\t{FFAF00}120 "SERVER_RUB"\n"\
					"{FFFFFF}Камуфляж [№ 15894]\t{FFAF00}120 "SERVER_RUB"\n"\
					"{FFFFFF}Маленький Гелик на крышу [№ 17273]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Зомби [№ 17637]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Матрас на крышу [№ 4137]\t{FFAF00}400 "SERVER_RUB"\n"\
					"{FFFFFF}Мигалка на крышу [№ 17163]\t{FFAF00}999 "SERVER_RUB"",
					"Далее", "Назад"
				);
				return SendClientMessage(playerid, 0x3399FFFF, "В вашем инвентаре нет свободного места.");
			}
			GiveAcs(playerid, modelid, indx);
			AddPlayerData(playerid, P_COINS, -, price);
			UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));
			new query[148];
			format(query, sizeof query, "~r~-%s "SERVER_RUB"", formatInt(price));
			GameText(playerid, query, 3000, 2);
		}
		case DIALOG_COINS_VIP:
		{
			if(!response) return ShowPlayerDonateMenu1(playerid);

			switch(listitem)
			{
				case 0:
				{
						if(GetPlayerPremium(playerid) == 3) return SendClientMessage(playerid, -1, "{ff0000}[Ошибка] {ffffff}У вас уже есть Premium VIP!");
						if(GetPlayerCoins(playerid) < 400) return GameText(playerid, "~r~Недостаточно~n~Rub", 3000, 2);
						SetPlayerData(playerid, P_PREMIUM, 3);
						SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);
						UpdatePlayerDatabaseInt(playerid, "premium", 3);
						UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400); //
						GivePlayerCoins(playerid, -400);
						SCM(playerid, -1, "{ff8c00}[VIP] {ffffff}Вы успешно приобрели Platinum на 30 дней.");
				}
				case 1:
				{
						if(GetPlayerPremium(playerid) == 2) return SendClientMessage(playerid, -1, "{ff0000}[Ошибка] {ffffff}У вас уже есть GOLD VIP!");
						if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~Rub", 3000, 2);
						SetPlayerData(playerid, P_PREMIUM, 2);
						SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);
						UpdatePlayerDatabaseInt(playerid, "premium", 2);
						UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400); //
						GivePlayerCoins(playerid, -250);
						SCM(playerid, -1, "{ff8c00}[VIP] {ffffff}Вы успешно приобрели Gold на 30 дней.");
				}
				case 2:
				{
						if(GetPlayerPremium(playerid) == 1) return SendClientMessage(playerid, -1, "{ff0000}[Ошибка] {ffffff}У вас уже есть SILVER VIP!");
						if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~Rub", 3000, 2);
						SetPlayerData(playerid, P_PREMIUM, 1);
						SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);
						UpdatePlayerDatabaseInt(playerid, "premium", 1);
						UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400); //
						GivePlayerCoins(playerid, -100);
						SCM(playerid, -1, "{ff8c00}[VIP] {ffffff}Вы успешно приобрели Silver на 30 дней.");
				}
			}
		}
		case DIALOG_DONAT_MEN1:
		{
			if(!response) return 1;
			if(GetPlayerCoins(playerid) < 500) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2), ShowPlayerDonateMenu1(playerid);
			static string[256];
			format(string, sizeof(string), "Вы приобрели Донат набор Все и сразу!");
			SendClientMessage(playerid, COLOR_ORANGE, string);
			SetPlayerData(playerid, P_PREMIUM, 3);
			SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);
			UpdatePlayerDatabaseInt(playerid, "premium", 3);
			UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400); //
			GiveCar(playerid, 15696, 0, 0, -1, 1882.5557,2832.2222,12.0596,89.8854, gettime());
			GiveCar(playerid, 15684, 0, 0, -1, 1882.5557,2832.2222,12.0596,89.8854, gettime());
			mysql_query(mysql, str_q, false);
			GiveSkin(playerid, 203);
			GiveSkin(playerid, 205);
			GivePlayerMoney(playerid, 50000000);
			GivePlayerDonate(playerid, 500);
			GivePlayerCoins(playerid, -500);
			return 1;
		}
		case DIALOG_DONAT_MEN2:
		{
			if(!response) return 1;
			if(GetPlayerCoins(playerid) < 800) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2), ShowPlayerDonateMenu1(playerid);
			static string[256];
			format(string, sizeof(string), "Вы приобрели Донат набор Электричка!");
			SendClientMessage(playerid, COLOR_ORANGE, string);
			SetPlayerData(playerid, P_PREMIUM, 3);
			SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);
			UpdatePlayerDatabaseInt(playerid, "premium", 3);
			UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400); //
			GiveCar(playerid, 15695, 0, 0, -1, 1882.5557,2832.2222,12.0596,89.8854, gettime());
			mysql_query(mysql, str_q, false);
			GiveSkin(playerid, 17038);
			GiveSkin(playerid, 17040);
			GivePlayerMoney(playerid, 50000000);
			GivePlayerDonate(playerid, 500);
			GivePlayerCoins(playerid, -800);
			return 1;
		}
		case DIALOG_DONAT_MEN3:
		{
			if(!response) return 1;
			if(GetPlayerCoins(playerid) < 600) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2), ShowPlayerDonateMenu1(playerid);
			static string[256];
			format(string, sizeof(string), "Вы приобрели Донат набор Аристократ!");
			SendClientMessage(playerid, COLOR_ORANGE, string);
			SetPlayerData(playerid, P_PREMIUM, 2);
			SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);
			UpdatePlayerDatabaseInt(playerid, "premium", 2);
			UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400); //
			GiveCar(playerid, 15686, 0, 0, -1, 1882.5557,2832.2222,12.0596,89.8854, gettime());
			mysql_query(mysql, str_q, false);
			GiveSkin(playerid, 15317);
			GiveSkin(playerid, 17012);
			GivePlayerMoney(playerid, 40000000);
			GivePlayerDonate(playerid, 300);
			GivePlayerCoins(playerid, -600);
			return 1;
		}
		case DIALOG_DONAT_MEN4:
		{
			if(!response) return 1;
			if(GetPlayerCoins(playerid) < 1500) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2), ShowPlayerDonateMenu1(playerid);
			static string[256];
			format(string, sizeof(string), "Вы приобрели Донат набор Гонщик 2.0!");
			SendClientMessage(playerid, COLOR_ORANGE, string);
			SetPlayerData(playerid, P_PREMIUM, 3);
			SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);
			UpdatePlayerDatabaseInt(playerid, "premium", 3);
			UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400); //
			GiveCar(playerid, 15689, 0, 0, -1, 1882.5557,2832.2222,12.0596,89.8854, gettime());
			GiveCar(playerid, 17401, 0, 0, -1, 1882.5557,2832.2222,12.0596,89.8854, gettime());
			mysql_query(mysql, str_q, false);
			GiveSkin(playerid, 15570);
			GiveSkin(playerid, 15502);
			GivePlayerMoney(playerid, 80000000);
			GivePlayerDonate(playerid, 800);
			GivePlayerCoins(playerid, -1500);
			return 1;
		}
		case DIALOG_DONAT_MEN:
		{
			if(!response) return ShowPlayerDonateMenu1(playerid);

			switch(listitem)
			{
				case 0:
				{
					Dialog
					(
						playerid, DIALOG_DONAT_MEN1, DIALOG_STYLE_MSGBOX, 
						"{FFFFFF}Донат набор Все и сразу за 500 "SERVER_RUB"", 
						"{FFFFFF}При покупке вы получите:\n\n\
						{FFFFFF}- {E5E4E2}Platinum VIP {FFFFFF}на 30 дней\n\
						{FFFFFF}- Эксклюзивный автомобиль {FFAF00}Mercedes-Benz SL 63\n\
						{FFFFFF}- Эксклюзивный автомобиль {FFAF00}BMW M5 G90\n\
						{FFFFFF}- Мужской скин {C3C3C3}(ID: 203)\n\
						{FFFFFF}- Женский скин {C3C3C3}(ID: 205)\n\
						{FFFFFF}- 50.000.000 Рублей\n\
						{FFFFFF}- 500 Донат-Монет",
						"Купить", "Закрыть"
					);
				}
				case 1:
				{
					Dialog
					(
						playerid, DIALOG_DONAT_MEN2, DIALOG_STYLE_MSGBOX, 
						"{FFFFFF}Донат набор Электричка за 800 "SERVER_RUB"", 
						"{FFFFFF}При покупке вы получите:\n\n\
						{FFFFFF}- {E5E4E2}Platinum VIP {FFFFFF}на 30 дней\n\
						{FFFFFF}- Эксклюзивный автомобиль {FFAF00}Lixiang L9\n\
						{FFFFFF}- Мужской скин {C3C3C3}(ID: 17040)\n\
						{FFFFFF}- Женский скин {C3C3C3}(ID: 64)\n\
						{FFFFFF}- 50.000.000 Рублей\n\
						{FFFFFF}- 500 Донат-Монет",
						"Купить", "Закрыть"
					);
				}
				case 2:
				{
					Dialog
					(
						playerid, DIALOG_DONAT_MEN3, DIALOG_STYLE_MSGBOX, 
						"{FFFFFF}Донат набор Аристократ за 600 "SERVER_RUB"", 
						"{FFFFFF}При покупке вы получите:\n\n\
						{FFFFFF}- {FFD700}Gold VIP {FFFFFF}на 30 дней\n\
						{FFFFFF}- Эксклюзивный автомобиль {FFAF00}Rolls Royce Spectre\n\
						{FFFFFF}- Мужской скин {C3C3C3}(ID: 17012)\n\
						{FFFFFF}- Женский скин {C3C3C3}(ID: 15317)\n\
						{FFFFFF}- 40.000.000 Рублей\n\
						{FFFFFF}- 300 Донат-Монет",
						"Купить", "Закрыть"
					);
				}
				case 3:
				{
					Dialog
					(
						playerid, DIALOG_DONAT_MEN4, DIALOG_STYLE_MSGBOX, 
						"{FFFFFF}Донат набор Гонщик 2.0 за 1500 "SERVER_RUB"", 
						"{FFFFFF}При покупке вы получите:\n\n\
						{FFFFFF}- {E5E4E2}Platinum VIP {FFFFFF}на 30 дней\n\
						{FFFFFF}- Эксклюзивный автомобиль {FFAF00}Koenigsegg Agera RS\n\
						{FFFFFF}- Эксклюзивный автомобиль {FFAF00}Lamborghini Revuelto\n\
						{FFFFFF}- Мужской скин {C3C3C3}(ID: 15570)\n\
						{FFFFFF}- Мужской скин {C3C3C3}(ID: 15502)\n\
						{FFFFFF}- 80.000.000 Рублей\n\
						{FFFFFF}- 800 Донат-Монет",
						"Купить", "Закрыть"
					);
				}
			}
		}
		case DIALOG_DONAT_NAKAZ:
		{
			if(!response) return ShowPlayerDonateMenu1(playerid);

			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerCoins(playerid) < 250)
						return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
					if(GetPlayerData(playerid, P_JAIL) <= 0) return SendClientMessage(playerid, COLOR_ORANGE, "Вы не сидите в Тюрьме");
					GivePlayerCoins(playerid, -250);
					UnjailPlayer(playerid);
					SendClientMessage(playerid, COLOR_ORANGE, "Вы приобрели выход из Тюрьмы за 250 rub");
				}
				case 1:
				{
					if(GetPlayerCoins(playerid) < 100)
						return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
					if(GetPlayerData(playerid, P_MUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мута чата");
					GivePlayerCoins(playerid, -100);
					UpdatePlayerDatabaseInt(playerid, "mute", 0);
					SendClientMessage(playerid, COLOR_ORANGE, "Вы приобрели снятия мута чата за 100 rub");
				}
				case 2:
				{
					if(GetPlayerCoins(playerid) < 200)
						return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
					if(GetPlayerData(playerid, P_VOICEMUTE) <= 0) return SendClientMessage(playerid, 0xFF6600FF, "У вас нет мута голосового чата");
					GivePlayerCoins(playerid, -200);
					SetPlayerData(playerid, P_VOICEMUTE, 0);
					UpdatePlayerDatabaseInt(playerid, "voicemute", 0);
					SendClientMessage(playerid, COLOR_ORANGE, "Вы приобрели снятия мута голосового чата за 200 rub");
				}
				case 3:
				{
					if(GetPlayerCoins(playerid) < 50)
						return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
					if(GetPlayerData(playerid, P_VMUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У вас нету мута /vr чата");
					GivePlayerCoins(playerid, -50);
					UpdatePlayerDatabaseInt(playerid, "vmute", 0);
					SendClientMessage(playerid, COLOR_ORANGE, "Вы приобрели снятия мута /vr чата за 50 rub");
				}
				case 4:
				{
					if(GetPlayerCoins(playerid) < 50)
						return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
					if(GetPlayerData(playerid, P_RMUTE) <= 0) return SendClientMessage(playerid, 0xFF6600FF, "У вас нет блокировки репорта");
					GivePlayerCoins(playerid, -50);
					UpdatePlayerDatabaseInt(playerid, "rmute", 0);
					SendClientMessage(playerid, COLOR_ORANGE, "Вы приобрели снятия мута /report чата за 50 rub");
				}
				case 5:
				{
					if(GetPlayerCoins(playerid) < 400)
						return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
					GivePlayerCoins(playerid, -400);
					SetPlayerData(playerid, P_WARN, GetPlayerData(playerid, P_WARN)-1);
					UpdatePlayerDatabaseInt(playerid, "awarn", GetPlayerData(playerid, P_WARN));
					SendClientMessage(playerid, COLOR_ORANGE, "Вы приобрели снятия 1 warn за 400 rub");
				}
				case 6:
				{
					if(GetPlayerCoins(playerid) < 600)
						return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
					GivePlayerCoins(playerid, -600);
					SetPlayerData(playerid, P_AWARN, GetPlayerData(playerid, P_AWARN)-1);
					UpdatePlayerDatabaseInt(playerid, "awarn", GetPlayerData(playerid, P_AWARN));
					SendClientMessage(playerid, COLOR_ORANGE, "Вы приобрели снятия 1 awarn за 600 rub");
				}
			}
		}
        case DIALOG_RAFFLE_SHOP:
		{
			if(!response) return 1;
			for(new i; i < sizeof g_raffleShop; i++)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 4.5, g_pos_car_raffle[i][0],g_pos_car_raffle[i][1],g_pos_car_raffle[i][2])) 
					continue;
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), g_raffleShop[i][RS_PRICE]))
					return SCM(playerid, COLOR_GREY, "*Недостаточно средств для покупки билета.");
				GivePlayerMoneyEx(playerid, -g_raffleShop[i][RS_PRICE]);
                SendClientMessage(playerid,COLOR_GOLD,"Вы успешно купили билет на розыгрыш!");
				new query[94];
				format(query, sizeof query, "INSERT INTO raffle_shop (owner_id, type, ticket_id) VALUES (%d, %d, %d)", GetPlayerAccountID(playerid), i, g_raffleShop[i][RS_TICKETS]);
				mysql_query(mysql, query, false);
				g_raffleShop[i][RS_TICKETS]++;
                return 1;
			}
		}				
		case DIALOG_DONATE_BUY_NUMBER:
		{
			if(response)
			{
				if(strlen(inputtext) == 4 && (1000 <= strval(inputtext) <= 9999))
				{
					new number = strval(inputtext),
						query[102],
						rows,
						Cache: result;
					mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE phone=%d", number);
					result = mysql_query(mysql, query, true);
					rows = cache_num_rows();
					cache_delete(result);
					if(rows)
						SendClientMessage(playerid, 0x999999FF, "Введенный Вами номер уже занят");
					else
					{
						SetPlayerData(playerid, P_PHONE, number);
						UpdatePlayerDatabaseInt(playerid, "phone", number);
						GivePlayerCoins(playerid, -399);
						format
						(
							query, sizeof query,
							"{FFFFFF}Номер телефона изменен\n"\
							"Теперь с Вами  можно связаться по номеру {FFD83D}%d",
							GetPlayerPhone(playerid)
						);
						return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", query, "Закрыть", "");
					}
				}
				else SendClientMessage(playerid, 0x999999FF, "Недопустимый формат ввода");
			}
			ShowPlayerDonateMenu(playerid);
		}
		case DIALOG_DONATE_INFO: if(response) ShowPlayerDonateMenu(playerid);
		case DIALOG_CREATE_DONATE_FINISH:
		{
			if(!response) return callcmd::createcoinsitem(playerid);
			SCM(playerid, COLOR_GREY, "Вы успешно создали предмет в "SERVER_RUB" меню");
			new query[248];
			format(query, sizeof query, "INSERT INTO donate_items (type, name, item_id, price, count, indx) VALUES (%d, '%s', %d, %d, %d, %d)", 
			g_donate_create[playerid][DC_TYPE], g_donate_create[playerid][DC_NAME], g_donate_create[playerid][DC_ITEM_ID], g_donate_create[playerid][DC_PRICE], g_donate_create[playerid][DC_COUNT], g_donate_create[playerid][DC_INDX]);
			mysql_tquery(mysql, query, "", "");
			format(query, sizeof query, "[A] %s[%d] создал предмет в "SERVER_RUB" меню (type: %d | name: %s | price: %d | count: %d)", GetPlayerNameEx(playerid), playerid, g_donate_create[playerid][DC_TYPE], g_donate_create[playerid][DC_NAME], g_donate_create[playerid][DC_PRICE], g_donate_create[playerid][DC_COUNT]);
			SendMessageToAdmins(query, 0xFFFF00FF);
		}
		case DIALOG_CREATE_DONATE_1:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: callcmd::createcoinsitem(playerid);
				case 1: // транспорт id 1
				{
					g_donate_create[playerid][DC_TYPE] = 1;
					Dialog(playerid, DIALOG_CREATE_DONATE_2, DIALOG_STYLE_INPUT, "{FFCD00}Транспорт", "{FFFFFF}Введите id транспорта который хотите добавить", "Далее", "Назад");
				}
				case 2: // одежда id 2
				{
					g_donate_create[playerid][DC_TYPE] = 2;
					Dialog(playerid, DIALOG_CREATE_DONATE_2, DIALOG_STYLE_INPUT, "{FFCD00}Одежда", "{FFFFFF}Введите id одежды который хотите добавить", "Далее", "Назад");
				}
				case 3: // аксессуар id 3
				{
					g_donate_create[playerid][DC_TYPE] = 3;
					Dialog(playerid, DIALOG_CREATE_DONATE_2, DIALOG_STYLE_INPUT, "{FFCD00}Аксессуар", "{FFFFFF}Введите id аксессуара который хотите добавить", "Далее", "Назад");
				}
				case 4: // аксессуар id 5
				{
					g_donate_create[playerid][DC_TYPE] = 5;
					Dialog(playerid, DIALOG_CREATE_DONATE_2, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите id предмета который хотите добавить", "Далее", "Назад");
				}
			}
		}
		case DIALOG_CREATE_DONATE_2:
		{
			if(!response) return callcmd::createcoinsitem(playerid);
			if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) 
			{	
				if(g_donate_create[playerid][DC_TYPE] == 1) Dialog(playerid, DIALOG_CREATE_DONATE_2, DIALOG_STYLE_INPUT, "{FFCD00}Транспорт", "{FFFFFF}Введите id транспорта который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 2) Dialog(playerid, DIALOG_CREATE_DONATE_2, DIALOG_STYLE_INPUT, "{FFCD00}Одежда", "{FFFFFF}Введите id одежды который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 3) Dialog(playerid, DIALOG_CREATE_DONATE_2, DIALOG_STYLE_INPUT, "{FFCD00}Аксессуар", "{FFFFFF}Введите id аксессуара который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 5) Dialog(playerid, DIALOG_CREATE_DONATE_2, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите id предмета который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				return 1;
			}
			if(g_donate_create[playerid][DC_TYPE] == 1)
			{
				Dialog(playerid, DIALOG_CREATE_DONATE_3, DIALOG_STYLE_INPUT, "{FFCD00}Транспорт", "{FFFFFF}Введите название транспорта который хотите добавить", "Далее", "Назад");
			}
			if(g_donate_create[playerid][DC_TYPE] == 2)
			{
				Dialog(playerid, DIALOG_CREATE_DONATE_3, DIALOG_STYLE_INPUT, "{FFCD00}Одежда", "{FFFFFF}Введите название одежды который хотите добавить", "Далее", "Назад");
			}
			if(g_donate_create[playerid][DC_TYPE] == 3)
			{
				Dialog(playerid, DIALOG_CREATE_DONATE_3, DIALOG_STYLE_INPUT, "{FFCD00}Аксессуар", "{FFFFFF}Введите название аксессуар который хотите добавить", "Далее", "Назад");
			}
			if(g_donate_create[playerid][DC_TYPE] == 5)
			{
				Dialog(playerid, DIALOG_CREATE_DONATE_3, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите название предмета который хотите добавить", "Далее", "Назад");
			}
			g_donate_create[playerid][DC_ITEM_ID] = strval(inputtext);
		}
		case DIALOG_CREATE_DONATE_5:
		{
			if(!response) return callcmd::createcoinsitem(playerid);
			if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) 
			{	
				if(g_donate_create[playerid][DC_TYPE] == 1) Dialog(playerid, DIALOG_CREATE_DONATE_5, DIALOG_STYLE_INPUT, "{FFCD00}Транспорт", "{FFFFFF}Введите стоимость транспорта который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 2) Dialog(playerid, DIALOG_CREATE_DONATE_5, DIALOG_STYLE_INPUT, "{FFCD00}Одежда", "{FFFFFF}Введите стоимость одежды который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 3) Dialog(playerid, DIALOG_CREATE_DONATE_5, DIALOG_STYLE_INPUT, "{FFCD00}Аксессуар", "{FFFFFF}Введите стоимость аксессуара который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 5) Dialog(playerid, DIALOG_CREATE_DONATE_5, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите стоимость предмета который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				return 1;
			}
			g_donate_create[playerid][DC_PRICE] = strval(inputtext);
			if(g_donate_create[playerid][DC_TYPE] == 1)
			{
				CreateDonateItems(playerid);
			}
			if(g_donate_create[playerid][DC_TYPE] == 2)
			{
				CreateDonateItems(playerid);
			}
			if(g_donate_create[playerid][DC_TYPE] == 3)
			{
				Dialog
				(
					playerid, DIALOG_CREATE_DONATE_4, DIALOG_STYLE_INPUT, 
					"{FFCD00}Аксессуар", 
					"{FFFFFF}Введите тип аксессуара который хотите добавить\n\n\
					Список типов аксессуаров:\n\
					Тип 0 - Очки\n\
					Тип 1 - Бандана\n\
					Тип 2 - Маска\n\
					Тип 3 - Берет\n\
					Тип 4 - шляпа (Шапка, Кепка)\n\
					Тип 5 - Сумка\n\
					Тип 6 - Ремень\n\
					Тип 7 - Украшение на руку\n\
					Тип 8 - Рюкзак\n\
					Тип 9 - Украшение на шею\n\
					Тип 10 - Плащ\n\
					Тип 11 - Бронижелет\n\
					Тип 12 - Посох\n\
					Тип 13 - Крылья\n\
					Тип 14 - Украшение на транспорт\n\
					Тип 15 - Украшение на транспорт\n\
					Тип 16 - Украшение на транспорт\n\
					Тип 17 - Украшение на транспорт\n\
					Тип 18 - Скейтборд\n\
					Тип 19 - украшение на левое плечо\n\
					Тип 20 - Украшение на транспорт\n\
					Тип 21 - Украшение на транспорт\n\
					Тип 22 - Аксессуар на спину", 
					"Далее", "Назад"
				);
			}
			if(g_donate_create[playerid][DC_TYPE] == 5)
			{
				Dialog(playerid, DIALOG_CREATE_DONATE_4, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите количество предмета который хотите добавить", "Далее", "Назад");
			}
		}
		case DIALOG_CREATE_DONATE_3:
		{
			if(!response) return callcmd::createcoinsitem(playerid);
			if(strlen(inputtext) > 48 || 5 > strlen(inputtext))
			{	
				if(g_donate_create[playerid][DC_TYPE] == 1) Dialog(playerid, DIALOG_CREATE_DONATE_3, DIALOG_STYLE_INPUT, "{FFCD00}Транспорт", "{FFFFFF}Введите название транспорта который хотите добавить\n\n{FF6600}Укажите не меньше 5-ти и не больше 48-ми символов", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 2) Dialog(playerid, DIALOG_CREATE_DONATE_3, DIALOG_STYLE_INPUT, "{FFCD00}Одежда", "{FFFFFF}Введите название одежды который хотите добавить\n\n{FF6600}Укажите не меньше 5-ти и не больше 48-ми символов", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 3) Dialog(playerid, DIALOG_CREATE_DONATE_3, DIALOG_STYLE_INPUT, "{FFCD00}Аксессуар", "{FFFFFF}Введите название аксессуара который хотите добавить\n\n{FF6600}Укажите не меньше 5-ти и не больше 48-ми символов", "Далее", "Назад");
				if(g_donate_create[playerid][DC_TYPE] == 5) Dialog(playerid, DIALOG_CREATE_DONATE_3, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите название предмета который хотите добавить\n\n{FF6600}Укажите не меньше 5-ти и не больше 48-ми символов", "Далее", "Назад");
				return 1;
			}
			format(g_donate_create[playerid][DC_NAME], 48, "%s", inputtext);
			if(g_donate_create[playerid][DC_TYPE] == 1) Dialog(playerid, DIALOG_CREATE_DONATE_5, DIALOG_STYLE_INPUT, "{FFCD00}Транспорт", "{FFFFFF}Введите стоимость транспорта который хотите добавить", "Далее", "Назад");
			if(g_donate_create[playerid][DC_TYPE] == 2) Dialog(playerid, DIALOG_CREATE_DONATE_5, DIALOG_STYLE_INPUT, "{FFCD00}Одежда", "{FFFFFF}Введите стоимость одежды который хотите добавить", "Далее", "Назад");
			if(g_donate_create[playerid][DC_TYPE] == 3) Dialog(playerid, DIALOG_CREATE_DONATE_5, DIALOG_STYLE_INPUT, "{FFCD00}Аксессуар", "{FFFFFF}Введите стоимость аксессуара который хотите добавить", "Далее", "Назад");
			if(g_donate_create[playerid][DC_TYPE] == 5) Dialog(playerid, DIALOG_CREATE_DONATE_5, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите стоимость предмета который хотите добавить", "Далее", "Назад");
		}
		case DIALOG_CREATE_DONATE_4:
		{
			if(!response) return callcmd::createcoinsitem(playerid);
			if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) 
			{
				if(g_donate_create[playerid][DC_TYPE] == 3) 
					Dialog
					(
						playerid, DIALOG_CREATE_DONATE_4, DIALOG_STYLE_INPUT, 
						"{FFCD00}Аксессуар", 
						"{FFFFFF}Введите тип аксессуара который хотите добавить\n\n\
						Список типов аксессуара:\n\
						Тип 0 - Очки\n\
						Тип 1 - Бандана\n\
						Тип 2 - Маска\n\
						Тип 3 - Берет\n\
						Тип 4 - шляпа (Шапка, Кепка)\n\
						Тип 5 - Сумка\n\
						Тип 6 - Ремень\n\
						Тип 7 - Украшение на руку\n\
						Тип 8 - Рюкзак\n\
						Тип 9 - Украшение на шею\n\
						Тип 10 - Плащ\n\
						Тип 11 - Бронижелет\n\
						Тип 12 - Посох\n\
						Тип 13 - Крылья\n\
						Тип 14 - Украшение на транспорт\n\
						Тип 15 - Украшение на транспорт\n\
						Тип 16 - Украшение на транспорт\n\
						Тип 17 - Украшение на транспорт\n\
						Тип 18 - Скейтборд\n\
						Тип 19 - украшение на левое плечо\n\
						Тип 20 - Украшение на транспорт\n\
						Тип 21 - Украшение на транспорт\n\
						Тип 22 - Аксессуар на спину\n\n\
						{FF6600}Укажите корректное значение", 
						"Далее", "Назад"
					);
				if(g_donate_create[playerid][DC_TYPE] == 5) Dialog(playerid, DIALOG_CREATE_DONATE_4, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите количество предмета который хотите добавить\n\n{FF6600}Укажите корректное значение", "Далее", "Назад");
				return 1;	
			}
			if(g_donate_create[playerid][DC_TYPE] == 3)
			{
				if(strval(inputtext) > 22)
				{
					Dialog
					(
						playerid, DIALOG_CREATE_DONATE_4, DIALOG_STYLE_INPUT, 
						"{FFCD00}Аксессуар", 
						"{FFFFFF}Введите тип аксессуара который хотите добавить\n\n\
						Список типов аксессуаров:\n\
						Тип 0 - Очки\n\
						Тип 1 - Бандана\n\
						Тип 2 - Маска\n\
						Тип 3 - Берет\n\
						Тип 4 - шляпа (Шапка, Кепка)\n\
						Тип 5 - Сумка\n\
						Тип 6 - Ремень\n\
						Тип 7 - Украшение на руку\n\
						Тип 8 - Рюкзак\n\
						Тип 9 - Украшение на шею\n\
						Тип 10 - Плащ\n\
						Тип 11 - Бронижелет\n\
						Тип 12 - Посох\n\
						Тип 13 - Крылья\n\
						Тип 14 - Украшение на транспорт\n\
						Тип 15 - Украшение на транспорт\n\
						Тип 16 - Украшение на транспорт\n\
						Тип 17 - Украшение на транспорт\n\
						Тип 18 - Скейтборд\n\
						Тип 19 - украшение на левое плечо\n\
						Тип 20 - Украшение на транспорт\n\
						Тип 21 - Украшение на транспорт\n\
						Тип 22 - Аксессуар на спину\n\n\
						{FF6600}Данного типа не существует", 
						"Далее", "Назад"
					);
					return 1;
				}
				g_donate_create[playerid][DC_INDX] = strval(inputtext);
				CreateDonateItems(playerid);
			}
			if(g_donate_create[playerid][DC_TYPE] == 5)
			{
				if(strval(inputtext) > 2000000000)
				{
					Dialog(playerid, DIALOG_CREATE_DONATE_4, DIALOG_STYLE_INPUT, "{FFCD00}Предмет", "{FFFFFF}Введите количество предмета который хотите добавить\n\n{FF6600}Нельзя указать количество больше 1.999.999.999 шт.", "Далее", "Назад");
					return 1;
				}
				g_donate_create[playerid][DC_COUNT] = strval(inputtext);
				CreateDonateItems(playerid);
			}
		}
		case DIALOG_CAR_LIST_NOTARY:
		{
			if(!response) return 1;
			if((GetPlayerOwnableCars(g_player_notary_offer_id[playerid]) + 1) > GetPlayerCarSlots(g_player_notary_offer_id[playerid]))
				return SendClientMessage(playerid, 0xeb622aFF, "У одной из сторон достигнут лимит ТС");
			new idx = GetPlayerListitemValue(playerid, listitem);
			new vehicleid = INVALID_VEHICLE_ID;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(i, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
					{
						vehicleid = i;
					}
				}
			}
			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0xFF6600FF, "Данный транспорт не загружен на сервер");
			g_player_notary_item_id[playerid] = vehicleid;
			new model_id = GetVehicleData(vehicleid, V_MODELID);
			new fmt_text[248];
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player1\": {\"item\": 2,\"itemName\": \"Транспорт %s \",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')",GetVehicleInfo(model_id, VI_NAME), GetVehicleInfo(model_id, VI_PRICE));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player2\": {\"item\": 2,\"itemName\": \"Транспорт %s \",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')",GetVehicleInfo(model_id, VI_NAME), GetVehicleInfo(model_id, VI_PRICE));
			BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
		}
		case DIALOG_BIZ_LIST_NOTARY:
		{
			if(!response) return 1;
			if((GetPlayerOwnableBiz(g_player_notary_offer_id[playerid]) + 1) > GetPlayerBizSlots(g_player_notary_offer_id[playerid])) 
				return SCM(playerid, 0xeb622aFF, "У одной из сторон достигнут лимит бизнесов");
			new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			g_player_notary_item_id[playerid] = idx;
			new fmt_text[248];
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player1\": {\"item\": 1,\"itemName\": \"Бизнес %s №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')",GetBusinessData(idx, B_NAME), idx, GetBusinessData(idx, B_PRICE));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player2\": {\"item\": 1,\"itemName\": \"Бизнес %s №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')",GetBusinessData(idx, B_NAME), idx, GetBusinessData(idx, B_PRICE));
			BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
		}
		case DIALOG_GARAGE_LIST_NOTARY:
		{
			if(!response) return 1;
			if(GetPlayerOwnableGarage(g_player_notary_offer_id[playerid]) + 1 > GetPlayerGarageSlots(g_player_notary_offer_id[playerid])) 
				return SCM(playerid, 0xeb622aFF, "У одной из сторон достигнут лимит гаражей");
			new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			g_player_notary_item_id[playerid] = idx;
			new fmt_text[248];
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player1\": {\"item\": 0,\"itemName\": \"Гараж №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", idx, GetGarageData(idx, G_PRICE));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player2\": {\"item\": 0,\"itemName\": \"Гараж №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", idx, GetGarageData(idx, G_PRICE));
			BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
		}
		case DIALOG_KIOSK_LIST_NOTARY:
		{
			if(!response) return 1;
			if((GetPlayerOwnableKiosk(g_player_notary_offer_id[playerid]) + 1) > GetPlayerKioskSlots(g_player_notary_offer_id[playerid])) 
				return SCM(playerid, 0xeb622aFF, "У одной из сторон достигнут лимит киосков");
			new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			g_player_notary_item_id[playerid] = idx;
			new fmt_text[248];
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player1\": {\"item\": 8,\"itemName\": \"Киоск: %s №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", GetKioskData(idx, K_NAME), idx, GetKioskData(idx, K_PRICE));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player2\": {\"item\": 8,\"itemName\": \"Киоск: %s №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", GetKioskData(idx, K_NAME), idx, GetKioskData(idx, K_PRICE));
			BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
		}
		case DIALOG_GARDEN_LIST_NOTARY:
		{
			if(!response) return 1;
			if(GetPlayerOwnableGarden(g_player_notary_offer_id[playerid]) + 1 > GetPlayerGardenSlots(g_player_notary_offer_id[playerid])) 
				return SCM(playerid, 0xeb622aFF, "У одной из сторон достигнут лимит огородов");
			new idx = GetPlayerListitemValue(playerid, listitem);
			g_player_notary_item_id[playerid] = idx;
			new fmt_text[248];
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player1\": {\"item\": 7,\"itemName\": \"Огород: №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')",idx, GetGardenData(idx, G_PRICE));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player2\": {\"item\": 7,\"itemName\": \"Огород: №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')",idx, GetGardenData(idx, G_PRICE));
			BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
		}
		case DIALOG_HOME_LIST_NOTARY:
		{
			if(!response) return 1;
			if((GetPlayerOwnableHouse(g_player_notary_offer_id[playerid]) + 1) > GetPlayerHouseSlots(g_player_notary_offer_id[playerid])) 
				return SCM(playerid, 0xeb622aFF, "У одной из сторон достигнут лимит домов");
			new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			g_player_notary_item_id[playerid] = idx;
			new fmt_text[248];
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player1\": {\"item\": 3,\"itemName\": \"Дом №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", idx, GetHouseData(idx, H_PRICE));
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
			format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player2\": {\"item\": 3,\"itemName\": \"Дом №%d\",\"itemPrice\": %d,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", idx, GetHouseData(idx, H_PRICE));
			BitStream_1(g_player_notary_offer_id[playerid], s_CefInterface, t_CefUpdate, fmt_text);
		}
		case DIALOG_BET_SVALKA:
		{
			if(!response) return 1;
			if(g_svalka_playerid_type[playerid] == 1) 
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты.");
			if(g_svalka_playerid_type[playerid] == 2)
				if(GetInventorySlots(playerid) == -1) return SendClientMessage(playerid, 0x3399FFFF, "В вашем инвентаре нет свободного места.");
			OnPlayerOpenDumpInterface(playerid, g_svalka_playerid[playerid], g_svalka_playerid_type[playerid]);
		}
		case DIALOG_TK_JMENU:
		{
			if(!response) return 1;
			switch(listitem + 1)
			{
				case 1: 
				{
					string_dialog[0] = EOS;
					format
					(
						string_dialog, sizeof string_dialog, 
						"{ffffff}Наименование: {ffd31d}%s{ffffff}\n\
						Владелец: {fbdf6a}%s{ffffff}\n\
						Рейтинг: {fbdf6a}0{ffffff} ед.\n\n\
						- Критерии по рейтингу для вступления: {cefb6a}отсутствуют{ffffff}\n\
						- Критерии по рейтингу для увольнения: {f06868}отсутствуют{ffffff}\n\
						- Зарплата заместителей: {cefb6a}отсутствуют",
						GetBusinessData(GetPlayerData(playerid, P_TK_JOB), B_NAME), 
						GetBusinessData(GetPlayerData(playerid, P_TK_JOB), B_OWNER_NAME)
					);
					Dialog(playerid, DIALOG_TK_JMENU_1, DIALOG_STYLE_MSGBOX, "{FFCD00}Информация о компании", string_dialog,"Назад", "");
				}
				case 2:
				{
					Dialog
					(
						playerid, DIALOG_TK_JMENU_TUTORIAL, DIALOG_STYLE_LIST, 
						"{FFCD00}Руководство по работе", 
						"{fbdf6a}1.{ffffff} Что такое транспортная компания\n\
						{fbdf6a}2.{ffffff} Как работать в транспортной компании\n\
						{fbdf6a}3.{ffffff} Информация о навыке дальнобойщика\n\
						{fbdf6a}4.{ffffff} Понятия \'рейтинг\' и \'номинация\'\n\
						{fbdf6a}5.{ffffff} Возможные штрафы за нарушения\n",
						"Далее", "Назад"
					);
				}
				case 3:
				{
					string_dialog[0] = EOS;
					new fmt_text[135];
					string_dialog = "{ffffff}Имя\t{ffffff}Должность\t{ffffff}Состояние\t{ffffff}Рейтинг";
					foreach(new i: Player)
					{
						if(!IsPlayerConnected(i)) continue;
						else if(!IsPlayerLogged(i)) continue;
						else if(GetPlayerJob(i) != 4) continue;
						else if(GetPlayerData(i, P_TK_JOB) != GetPlayerData(playerid, P_TK_JOB)) continue;
						else if(GetPlayerData(i, P_JOB_CAR) == INVALID_VEHICLE_ID) continue;
						format(fmt_text, sizeof fmt_text, "\n%s\tСотрудник\tСвободен\t{fbdf6a}%d{ffffff} ед.", GetPlayerNameEx(i), GetPlayerData(i, P_JOB_LOAD_ITEMS));
						strcat(string_dialog, fmt_text);
					}
					Dialog(playerid, DIALOG_TK_JMENU_1, DIALOG_STYLE_TABLIST_HEADERS, "{FFCD00}Сотрудники на рабочем месте", string_dialog,"Назад", "");
				}
				case 4:
				{
					SetPlayerData(playerid, P_JOB, 0);
					SCM(playerid, COLOR_RED, "Вы уволились с работы: \"Дальнобойщик\"");
				}
			}
		}
		case DIALOG_JOB_ITEM:
		{
			if(response)
			{
				if(GetPlayerJobLoadItems(playerid) > 5299) return SCM(playerid, COLOR_GREY, "Ваш прицеп уже загружен на максимальное количество (5300 ед.)");
				Dialog(playerid, DIALOG_JOB_ITEM_1, DIALOG_STYLE_INPUT, "{FFFFFF}Действие на заводе", "{FFFFFF}Введите количество товара, которое хотите погрузить:", "Далее", "Закрыть");
			}
			else
			{
				if(GetPlayerJobLoadItems(playerid) < 1) return SCM(playerid, COLOR_GREY, "Вы не можете разгрузить, так как ваш прицеп пуст!");
				Dialog(playerid, DIALOG_JOB_ITEM_2, DIALOG_STYLE_INPUT, "{FFFFFF}Действие на заводе", "{FFFFFF}Введите количество товара, которое хотите разгрузить:", "Далее", "Закрыть");
			}
		}
		case DIALOG_JOB_ITEM_1:
		{
			if(!response) return 1;
			new count = strval(inputtext);
			if(5300 < GetPlayerJobLoadItems(playerid) + count) return SCM(playerid, COLOR_GREY, "Вы не можете погрузить больше 5300 ед.");
			if(count < 1) return SCM(playerid, COLOR_GREY, "Некорректное количество.");
			g_player_order_time[playerid][0] = count / 180;
			g_player_order_count[playerid] = count;
			if(g_player_order_time[playerid][0] == 0) g_player_order_time[playerid][0] = 2; 
			TogglePlayerControllable(playerid,false);
			if(GetPlayerJobLoadItems(playerid) + count > 4080) SCM(playerid, 0xd8dd8fFF, "Вы превысили рекомендации по количеству груза, есть шанс того, что в ходе доставки транспорт не справится");
			SCMF(playerid, 0xFFFFFFFF, "Погрузка товара началась, примерное время: {b8d469}%d сек{FFFFFF}, не покидайте свой транспорт", g_player_order_time[playerid][0]);
		}
		case DIALOG_JOB_ITEM_2:
		{
			if(!response) return 1;
			new count = strval(inputtext);
			if(count > GetPlayerJobLoadItems(playerid)) return SCM(playerid, COLOR_GREY, "Вы не можете разгрузить больше, чем у вас имеется.");
			if(count < 1) return SCM(playerid, COLOR_GREY, "Некорректное количество.");
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "Невозможно начать разгрузку, так как у вас отсутствует прицеп с товаром");
			g_player_order_time[playerid][1] = count / 180;
			g_player_order_count[playerid] = count;
			TogglePlayerControllable(playerid,false);
			SCMF(playerid, 0xFFFFFFFF, "Разгрузка товара началась, примерное время: {b8d469}%d сек{FFFFFF}, не покидайте свой транспорт", g_player_order_time[playerid][1]);
		}
		case DIALOG_TK_JMENU_TUTORIAL:
		{
			if(!response) ShowPlayerJMenu(playerid);
			switch(listitem + 1)
			{
				case 1: 
				{
					Dialog
					(
						playerid, DIALOG_TK_JMENU_TUTORIAL_EXIT, DIALOG_STYLE_MSGBOX, 
						"{FFCD00}Руководство по работе: транспортные компании", 
						"{ffffff}Транспортная компания - это организация, которая занимается поставками груза и топлива для бизнес-предприятий.\n\
						Таких компаний всего несколько, но все они между собой соревнуются, дабы занять лидерство на рынке поставок.\n\n\
						У каждой компании есть свой владелец. Он принимает сотрудников на работу, может их увольнять или повышать до заместителя.\n\
						Также владелец способен полностью управлять транспортом компании: покупка, настройка, улучшения и многое другое.\n",
						"Назад", ""
					);
				}
				case 2: 
				{
					Dialog
					(
						playerid, DIALOG_TK_JMENU_TUTORIAL_EXIT, DIALOG_STYLE_MSGBOX, 
						"{FFCD00}Руководство по работе: начало работы", 
						"{ffffff}Для начала стоит знать, что работать в компании нужно с полной ответственностью и пониманием к другим игрокам. \n\
						На базе компании есть парковка, где должны располагаться фуры. С их помощью которых можно начать работу.\n\n\
						После того как Вы возьмёте транспорт компании, необходимо оставить залог. Если Вы заняли тягач, то Вам потребуется взять\n\
						нужный прицеп. Они доступны в меню гаража (меню можно открыть через сигнал грузовика). Прицепы появляются на специальной\n\
						парковке. Также рекомендуем обращать внимание на инструкции в чате, они часто помогают.\n\n\
						Есть два вида прицепов: для топлива и для твёрдого товара. Иногда все прицепы одного типа могут разобрать. Если в гараже нет\n\
						нужного Вам прицепа, то придётся подождать пока кто-то другой не закончит свою работу. Если на парковке компании есть\n\
						обычный грузовик (не тягач), то можно использовать его, он не требует прицепа (однако он не может перевозить топливо).\n\n\
						Чтобы правильно закончить работу, необходимо приехать на базу компании и вернуть рабочий транспорт и прицеп (если \n\
						Вы его брали). Важное примечание: если рабочий транспорт будет сломан, то придётся оплатить штраф.\n",
						"Назад", ""
					);
				}
				case 3: 
				{
					Dialog
					(
						playerid, DIALOG_TK_JMENU_TUTORIAL_EXIT, DIALOG_STYLE_MSGBOX, 
						"{FFCD00}Руководство по работе: навык и опыт", 
						"{ffffff}Навык дальнобойщика показывает Вашу опытность на данной работе и влияет на рабочий процесс, зачастую упрощая его.\n\
						Навык может как увеличиваться так и уменьшаться. Всё зависит от Вашего стиля работы.\n\n\
						Пожалуй, единственный способ заставить прогрессировать навык, это быстро и качественно выполнять свою работу.\n\
						Но иногда случаются аварии, в ходе чего перевозимый Вами товар может повредиться. Если повреждения критичны,\n\
						то компания выпишет Вам денежный штраф (при получении штрафов навык снижается). Нанесение ущерба транспорту,\n\
						прицепам и небрежное отношение к работе также способствует убыванию навыка.\n\n\
						Хорошо развитый навык может неплохо скрасить рабочий процесс. Он позволяет получить преимущество перед менее\n\
						опытными сотрудниками. У опытного дальнобойщика будет уходить меньше времени на погрузку товара и он сможет\n\
						получать приятную надбавку к заработанной плате (исходя из прогнозируемой зарплаты и процента прокачки навыка).\n\n\
						У каждого дальнобойщика есть своё удостоверение, которое можно показать. Оно доступно по команде {fbdf6a}/tpass{ffffff}.\n",
						"Назад", ""
					);
				}
				case 4: 
				{
					Dialog
					(
						playerid, DIALOG_TK_JMENU_TUTORIAL_EXIT, DIALOG_STYLE_MSGBOX, 
						"{FFCD00}Руководство по работе: система рейтинга", 
						"{ffffff}Система рейтинга помогает соревноваться дальнобойщикам и компаниям между собой. Очки могут как прибавляться,\n\
						так и убавляться. Например, за поставку груза без задержек и ущерба Вы сможете получить вознаграждение в виде очков\n\
						навыка и рейтинга. Важно полностью завершать заказы, а не оставлять их на половине. Иначе Вы не сможете получить \n\
						полное вознаграждение.\n\n\
						В системе рейтинга среди сотрудников компаний существуют номинации: \'{fbdf6a}Сотрудник Дня{ffffff}\', \'{fbdf6a}Сотрудник Недели{ffffff}\'\n\
						и \'{fbdf6a}Сотрудник Месяца{ffffff}\'. Победитель одной из таких номинаций определяется наибольшим количеством заработанных\n\
						очков рейтинга за указаный промежуток времени. Вознаграждения за победу в номинации бывают разные, чем больше срок\n\
						определения победителя, тем более ценная будет награда.",
						"Назад", ""
					);
				}
				case 5: 
				{
					Dialog
					(
						playerid, DIALOG_TK_JMENU_TUTORIAL_EXIT, DIALOG_STYLE_MSGBOX, 
						"{FFCD00}Руководство по работе: штрафы", 
						"{ffffff}1. Уничтожение грузовика и прицепа (или цистерны).\n\
						Последствия: -{f06868}650 руб{ffffff}.\n\n\
						2. Уничтожение рабочего грузовика.\n\
						Последствия: -{f06868}400 руб{ffffff}.\n\n\
						3. Уничтожение прицепа для груза или цистерны с топливом.\n\
						Последствия: -{f06868}250 руб{ffffff}.\n\n\
						4. Потеря прицепа для груза или прицепа с цистерной.\n\
						Последствия: -{f06868}300 руб{ffffff}.\n\n\
						5. Долгое нахождение на паузе, при этом занимая рабочий транспорт.\n\
						Последствия: -{f06868}400 руб{ffffff}.\n\n\
						6. Ущерб доставляемому грузу.\n\
						Последствия: {f06868}денежный штраф{ffffff}, исходя из нанесённого ущерба.\n\n\
						7. Проезд на красный в рабочее время.\n\
						Последствия: {f06868}денежный штраф от государства{ffffff}.\n\n\
						За каждое нарушение предусмотрено снижение очков рейтинга и очков навыка.\n\
						Если у Вас не будет средств, чтобы оплатить штраф, то очки будут снижены в большом количестве.\n",
						"Назад", ""
					);
				}
			}
		}
		case DIALOG_TK_JMENU_TUTORIAL_EXIT:
		{
			if(!response) return 1;
			Dialog
			(
				playerid, DIALOG_TK_JMENU_TUTORIAL, DIALOG_STYLE_LIST, 
				"{FFCD00}Руководство по работе", 
				"{fbdf6a}1.{ffffff} Что такое транспортная компания\n\
				{fbdf6a}2.{ffffff} Как работать в транспортной компании\n\
				{fbdf6a}3.{ffffff} Информация о навыке дальнобойщика\n\
				{fbdf6a}4.{ffffff} Понятия \'рейтинг\' и \'номинация\'\n\
				{fbdf6a}5.{ffffff} Возможные штрафы за нарушения\n",
				"Далее", "Назад"
			);
		}
		case DIALOG_TK_JMENU_1:
		{
			if(!response) return 1;
			ShowPlayerJMenu(playerid);
		}
		case DIALOG_TK_MENU_INVITE_1:
		{
			if(!response) return 1;
			if(GetPlayerData(playerid, P_LEVEL) < 4) return SCM(playerid, COLOR_GREY, "У вас недостаточный уровень для трудоустройства");
			Dialog
			(
				playerid, DIALOG_TK_MENU_INVITE_2, DIALOG_STYLE_LIST, 
				"{FFFFFF}Список доступных вакансий", 
				"{FFFFFF}1. Внештатный сотрудник\t{E6CE7B}(требуется свой грузовик)\n\
				{FFFFFF}2. Обычный сотрудник\t{E6CE7B}(особых критерий нет)",
				"Выбор", "Закрыть"
			);
		}
		case DIALOG_TK_MENU_INVITE_2:
		{
			if(!response) return 1;
			switch(listitem + 1)
			{
				case 1: 
				{
					SCM(playerid, 0x66CC00FF, "Вы устроились на работу \"Дальнобойщик\"");
					SCM(playerid, 0xFFFFFFFF, "Рекомендуем Вам ознакомиться с {E6CE7B}руководством по работе{FFFFFF}, оно доступно через меню - {BEC58C}/jmenu");
					SetPlayerData(playerid, P_JOB, 4);	
					UpdatePlayerDatabaseInt(playerid, "job", GetPlayerData(playerid, P_JOB));
					SetPlayerData(playerid, P_TK_JOB, GetNearestBusiness(playerid, 64.0));	
					UpdatePlayerDatabaseInt(playerid, "tk_job", GetPlayerData(playerid, P_TK_JOB));
					SetPlayerData(playerid, P_TK_JOB_TYPE, 2);	
					UpdatePlayerDatabaseInt(playerid, "tk_job_type", GetPlayerData(playerid, P_TK_JOB_TYPE));
				}
				case 2:
				{
					SCM(playerid, 0x66CC00FF, "Вы устроились на работу \"Дальнобойщик\"");
					SCM(playerid, 0xFFFFFFFF, "Рекомендуем Вам ознакомиться с {E6CE7B}руководством по работе{FFFFFF}, оно доступно через меню - {BEC58C}/jmenu");
					SetPlayerData(playerid, P_JOB, 4);	
					UpdatePlayerDatabaseInt(playerid, "job", GetPlayerData(playerid, P_JOB));
					SetPlayerData(playerid, P_TK_JOB, GetNearestBusiness(playerid, 64.0));	
					UpdatePlayerDatabaseInt(playerid, "tk_job", GetPlayerData(playerid, P_TK_JOB));
					SetPlayerData(playerid, P_TK_JOB_TYPE, 1);	
					UpdatePlayerDatabaseInt(playerid, "tk_job_type", GetPlayerData(playerid, P_TK_JOB_TYPE));
				}
			}
		}
		case DIALOG_TK_MENU_H:
		{
			if(!response) return 1;
			if(GetPlayerData(playerid, P_JOB_CAR) != GetPlayerVehicleID(playerid)) return 1;
			switch(listitem + 1)
			{
				case 1: 
				{
					if(GetPlayerData(playerid, P_TK_JOB_TYPE) != 1) return SCM(playerid, COLOR_GREY, "Вы не можете посместить свой транспорт на парковку");
					SCM(playerid, 0xFFFFFFFF, "Вы поместили {E6CE7B}транспорт на парковку");
					SetVehicleToRespawn(GetPlayerData(playerid, P_JOB_CAR));
					SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
				}
				case 2:
				{
					if(g_player_trailer_status[playerid] == 0) return SCM(playerid, COLOR_GREY, "Вы не брали прицеп, чтобы его поместить в гараж");
					SCM(playerid, 0xFFFFFFFF, "Вы поместили {E6CE7B}прицеп в гараж");
					DestroyVehicle(g_player_trailer[playerid]);
					g_player_trailer_status[playerid] = 0;
					g_player_trailer_type[playerid] = 0;
				}
				case 3:
				{
					if(g_player_trailer_status[playerid] != 0) return SCM(playerid, COLOR_GREY, "Сначала поместите прицеп в гараж который взяли ранее");
					new type;
					if(GetPlayerData(playerid, P_TK_JOB) == 129) type = 0;
					if(GetPlayerData(playerid, P_TK_JOB) == 130) type = 1;
					if(GetPlayerData(playerid, P_TK_JOB) == 131) type = 2;
					new random_ = random(4);
					g_player_trailer[playerid] = CreateVehicle(435, g_pos_truck_trailer[type][random_][0],g_pos_truck_trailer[type][random_][1],g_pos_truck_trailer[type][random_][2],g_pos_truck_trailer[type][random_][3], 1, 1, -1); //Дальнобойщики
					g_player_trailer_status[playerid] = 1;
					g_player_trailer_type[playerid] = 1;
					SCM(playerid, 0xFFFFFFFF, "Ваш прицеп располагается в {E6CE7B}складском комплексе{FFFFFF}, подъедьте к нему {E6CE7B}задней стороной {FFFFFF}и прицепитесь");
				}
				case 4:
				{
					if(g_player_trailer_status[playerid] != 0) return SCM(playerid, COLOR_GREY, "Сначала поместите прицеп в гараж который взяли ранее");
					new type;
					if(GetPlayerData(playerid, P_TK_JOB) == 129) type = 0;
					if(GetPlayerData(playerid, P_TK_JOB) == 130) type = 1;
					if(GetPlayerData(playerid, P_TK_JOB) == 131) type = 2;
					new random_ = random(4);
					g_player_trailer[playerid] = CreateVehicle(584, g_pos_truck_trailer[type][random_][0],g_pos_truck_trailer[type][random_][1],g_pos_truck_trailer[type][random_][2],g_pos_truck_trailer[type][random_][3], 1, 1, -1); //Дальнобойщики
					g_player_trailer_status[playerid] = 1;
					g_player_trailer_type[playerid] = 2;
					SCM(playerid, 0xFFFFFFFF, "Ваш прицеп располагается в {E6CE7B}складском комплексе{FFFFFF}, подъедьте к нему {E6CE7B}задней стороной {FFFFFF}и прицепитесь");
				}
				case 5:
				{
					Dialog
					(
						playerid, DIALOG_TK_MENU_H, DIALOG_STYLE_MSGBOX, 
						"{FFCD00}Информация о парковке", 
						"{ffffff}На базе каждой транспортной компании есть парковка для грузовиков. Одновременно на парковке не может\n\
						располагаться более 5 фур. Это стандартные лимиты на парковочные места. Иногда транспорта\n\
						может и вовсе не быть.\n\n\
						Начинающие компании могут позволить себе немного транспорта, по мере развития автопарк становится больше.\n\
						Обищй лимит транспортных средств в компании - 20 единиц. На каждого сотрудника предусмотрен транспорт.\n\n\
						Как только сотрудник возьмёт себе транспорт и покинет парковку, при наличии транспорта в гараже,\n\
						спустя некоторое время на парковку будет вывезен очередной грузовик. Владелец компании может полностью \n\
						распоряжаться своими транспортными средствами, и при необходимости изменять свой автопарк.\n\n\
						Если сотрудник нанёс ущерб транспорту, или доставлемому товару - ему выдадут штраф на определённую сумму.\n\
						Полный список штрафов можно глянуть в руководстве (/jmenu > Руководство).\n\n",
						"", "Закрыть"
					);
				}
			}
		}
		case DIALOG_JOB:
		{
			if (!response) return 1;

			switch (listitem)
			{
				case 0:
				{
					EnablePlayerGPS(playerid, 37, -489.6082,3337.2766,31.0381, "{FFFFFF}Работа {FFAF00}Шахтера {FFFFFF}отмечена у вас на GPS");
				}
				case 1:
				{
					EnablePlayerGPS(playerid, 37, 429.9873,-2442.7161,34.9269, "{FFFFFF}Работа {FFAF00}Лесаруба {FFFFFF}отмечена у вас на GPS");
				}
				case 2:
				{
					EnablePlayerGPS(playerid, 37, 2808.4153,-2036.1716,21.3944, "{FFFFFF}Работа {FFAF00}Пилота {FFFFFF}отмечена у вас на GPS");
				}
				case 3:
				{
					EnablePlayerGPS(playerid, 37, -2081.8723,-197.4954,25.7463, "{FFFFFF}Работа {FFAF00}Мусоровоза {FFFFFF}отмечена у вас на GPS");
				}
			}
		}
		case DIALOG_KIOCK:
		{
			if (!response) return 1;

			switch (listitem)
			{
				case 0:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 35000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -35000000);
					GiveIteam(playerid, 138, 1, 5, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Тряпки {FFAF00}в количестве {FFFFFF}5 шт. {FFAF00}за {FFFFFF}35.000.000 Рублей");
				}
				case 1:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 20000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -20000000);
					GiveIteam(playerid, 318, 1, 1, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Футболку {FFAF00}в количестве {FFFFFF}1 шт. {FFAF00}за {FFFFFF}20.000.000 Рублей");
				}
				case 2:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 6500000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -6500000);
					GiveIteam(playerid, 317, 1, 1, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Кроссовки {FFAF00}в количестве {FFFFFF}1 шт. {FFAF00}за {FFFFFF}6.500.000 Рублей");
				}
				case 3:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 45000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -45000000);
					GiveIteam(playerid, 156, 1, 3, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аккумуляторы {FFAF00}в количестве {FFFFFF}3 шт. {FFAF00}за {FFFFFF}45.000.000 Рублей");
				}
				case 4:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 55000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -55000000);
					GiveIteam(playerid, 153, 1, 5, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Инструменты {FFAF00}в количестве {FFFFFF}5 шт. {FFAF00}за {FFFFFF}55.000.000 Рублей");
				}
				case 5:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 75000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -75000000);
					GiveIteam(playerid, 155, 1, 4, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Колеса {FFAF00}в количестве {FFFFFF}4 шт. {FFAF00}за {FFFFFF}75.000.000 Рублей");
				}
				case 6:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 22500000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -22500000);
					GiveIteam(playerid, 188, 1, 1, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Двигатель {FFAF00}в количестве {FFFFFF}1 шт. {FFAF00}за {FFFFFF}22.500.000 Рублей");
				}
				case 7:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 30000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -30000000);
					GiveIteam(playerid, 190, 1, 10, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Запчасти к рулю амг {FFAF00}в количестве {FFFFFF}10 шт. {FFAF00}за {FFFFFF}30.000.000 Рублей");
				}
				case 8:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 60000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -60000000);
					GiveIteam(playerid, 122, 1, 4, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Диски {FFAF00}в количестве {FFFFFF}4 шт. {FFAF00}за {FFFFFF}60.000.000 Рублей");
				}
				case 9:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 25000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
					GivePlayerMoneyEx(playerid, -25000000);
					GiveIteam(playerid, 191, 1, 1, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Лобовое стекло {FFAF00}в количестве {FFFFFF}1 шт. {FFAF00}за {FFFFFF}25.000.000 Рублей");
				}
			}
		}
		case DIALOG_OBNOVA:
		{
			if (!response) return 1;

			switch (listitem)
			{
				case 0:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					GivePlayerMoneyEx(playerid, -100000000);
					GiveAcs(playerid, 4132, 0);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Пляжные очки {FFAF00}за {FFFFFF}100.000.000 Рублей");
				}
				case 1:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 80000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					GivePlayerMoneyEx(playerid, -80000000);
					GiveAcs(playerid, 4133, 4);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Колючий нимб {FFAF00}за {FFFFFF}80.000.000 Рублей");
				}
				case 2:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 300000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					GivePlayerMoneyEx(playerid, -300000000);
					GiveAcs(playerid, 4136, 4);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Шлем три полоски  {FFAF00}за {FFFFFF}300.000.000 Рублей");
				}
				case 3:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 400000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					GivePlayerMoneyEx(playerid, -400000000);
					GiveAcs(playerid, 4131, 7);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Железная рука {FFAF00}за {FFFFFF}400.000.000 Рублей");
				}
				case 4:
				{
					if(GetPlayerCurrentDonate(playerid) < 10000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerDonate(playerid, -10000);
					GiveAcs(playerid, 4130, 9);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Подвуска АК-47 {FFAF00}за {FFFFFF}10.000 Донат-Монет");
				}
				case 5:
				{
					if(GetPlayerCurrentDonate(playerid) < 30000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerDonate(playerid, -30000);
					GiveAcs(playerid, 4127, 8);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Рюкзак Уточка {FFAF00}за {FFFFFF}30.000 Донат-Монет");
				}
				case 6:
				{
					if(GetPlayerCurrentDonate(playerid) < 30000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerDonate(playerid, -30000);
					GiveAcs(playerid, 4129, 5);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Нагрудная сумка VL {FFAF00}за {FFFFFF}30.000 Донат-Монет");
				}
				case 7:
				{
					if(GetPlayerCurrentDonate(playerid) < 30000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerDonate(playerid, -30000);
					GiveAcs(playerid, 4135, 11);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Бронежелет зазгрузка {FFAF00}за {FFFFFF}30.000 Донат-Монет");
				}
				case 8:
				{
					if(GetPlayerCurrentDonate(playerid) < 35000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerDonate(playerid, -35000);
					GiveAcs(playerid, 4126, 4);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Шляпа с зонтиком {FFAF00}за {FFFFFF}35.000 Донат-Монет");
				}
				case 9:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 600000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					if(GetPlayerCurrentDonate(playerid) < 50000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerMoneyEx(playerid, -600000000);
					GivePlayerDonate(playerid, -50000);
					GiveAcs(playerid, 4128, 8);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар Рюкзак акваланг {FFAF00}за {FFFFFF}50.000 Донат-Монет и 600.000.000 Рублей");
				}
				case 10:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 600000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					if(GetPlayerCurrentDonate(playerid) < 60000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerMoneyEx(playerid, -600000000);
					GivePlayerDonate(playerid, -60000);
					GiveAcs(playerid, 4134, 19);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Аксуссуар На плечо Шпиониро {FFAF00}за {FFFFFF}60.000 Донат-Монет и 600.000.000 Рублей");
				}
				case 11:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 200000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					if(GetPlayerCurrentDonate(playerid) < 150000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerMoneyEx(playerid, -200000000);
					GivePlayerDonate(playerid, -15000);
					GiveSkin(playerid, 281);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Скин Гобник {FFAF00}за {FFFFFF}15.000 Донат-Монет и 200.000.000 Рублей");
				}
				case 12:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 500000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					if(GetPlayerCurrentDonate(playerid) < 30000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");
					GivePlayerMoneyEx(playerid, -500000000);
					GivePlayerDonate(playerid, -30000);
					GiveSkin(playerid, 15338);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Скин Опасная девушка {FFAF00}за {FFFFFF}30.000 Донат-Монет и 500.000.000 Рублей");
				}
				case 13:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 700000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					if(GetPlayerCurrentDonate(playerid) < 60000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");		
					GivePlayerMoneyEx(playerid, -700000000);
					GivePlayerDonate(playerid, -60000);
					GiveSkin(playerid, 288);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Скин Серфера {FFAF00}за {FFFFFF}60.000 Донат-Монет и 700.000.000 Рублей");
				}
				case 14:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 1500000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					if(GetPlayerCurrentDonate(playerid) < 100000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");	
					GivePlayerMoneyEx(playerid, -1500000000);
					GivePlayerDonate(playerid, -100000);
					GiveSkin(playerid, 280);
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Скин Бората в трусах {FFAF00}за {FFFFFF}100.000 Донат-Монет и 1.500.000.000 Рублей");
				}
				case 15:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 400000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					if(GetPlayerCurrentDonate(playerid) < 10000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");	
					GivePlayerMoneyEx(playerid, -400000000);
					GivePlayerDonate(playerid, -10000);
					GiveCar(playerid, 17427, 0, 0, -1, 1882.5557,2832.2222,12.0596,89.8854, gettime());
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Машинау УРУС {FFAF00}за {FFFFFF}10.000 Донат-Монет и 400.000.000 Рублей");
				}
				case 16:
				{
					if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 500000000)) return GameText(playerid, "~r~Недостаточно~n~Виртов", 3000, 2);
					if(GetPlayerCurrentDonate(playerid) < 60000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");	
					GivePlayerMoneyEx(playerid, -500000000);
					GivePlayerDonate(playerid, -60000);
					GiveCar(playerid, 544, 0, 0, -1, 1882.5557,2832.2222,12.0596,89.8854, gettime());
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Машину ЗИЛ МЧС {FFAF00}за {FFFFFF}60.000 Донат-Монет и 500.000.000 Рублей");
				}
				case 17:
				{
					if(GetPlayerCurrentDonate(playerid) < 200000) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно донат-монет");		
					GivePlayerDonate(playerid, -200000);
					GiveCar(playerid, 17420, 0, 0, 0, 1882.5557,2832.2222,12.0596,89.8854, gettime());
					GiveCar(playerid, 17421, 0, 0, 0, 1882.5557,2832.2222,12.0596,89.8854, gettime());
					SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Машину Дривт камаз+Жига {FFAF00}за {FFFFFF}200.000 Донат-Монет");
				}
			}
		}
		case DIALOG_FSB_O:
		{
			if (!response) return 1;
			if(GetPlayerTeamEx(playerid) != TEAM_FSB)
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому вы не сотрудник ФСБ!");
			switch (listitem)
			{
				case 0:
				{
					SetPlayerSkin(playerid, 15321);
				}
				case 1:
				{
					SetPlayerSkin(playerid, 15325);
				}
				case 2:
				{
					SetPlayerSkin(playerid, 148);
				}
				case 3:
				{
					SetPlayerSkin(playerid, 15343);
				}
				case 4:
				{
					SetPlayerSkin(playerid, 15340);
				}
				case 5:
				{
					SetPlayerSkin(playerid, 15330);
				}
				case 6:
				{
					SetPlayerSkin(playerid, 255);
				}
				case 7:
				{
					SetPlayerSkin(playerid, 179);
				}
				case 8:
				{
					SetPlayerSkin(playerid, 61);
				}
				case 9:
				{
					SetPlayerSkin(playerid, 15401);
				}
				case 10:
				{
					SetPlayerSkin(playerid, 15381);
				}
				case 11:
				{
					SetPlayerSkin(playerid, 276);
				}
				case 12:
				{
					SetPlayerSkin(playerid, 15382);
				}
			}
		}
		case DIALOG_TINTING_INSTAL:
		{
			if(!response) return 1;
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), g_player_tinting_price[playerid])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
			new vehicleid = GetPlayerVehicleID(playerid);
    		new toner_id = GetPlayerInBiz(playerid);
			GivePlayerMoneyEx(playerid, -g_player_tinting_price[playerid], "Покупка тонировки");
			AddBusinessProfit(playerid, toner_id, (g_player_tinting_price[playerid] / 100) * 20, 1);
			BitStream_1(playerid, s_CefInterface, t_CefHide, "TintingOrder");
			SetVehiclePos(vehicleid, GetBusinessData(toner_id, B_EXIT_POS_X), GetBusinessData(toner_id, B_EXIT_POS_Y), GetBusinessData(toner_id, B_EXIT_POS_Z));
			SetVehicleZAngle(vehicleid, GetBusinessData(toner_id, B_EXIT_ANGLE));
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerInBiz(playerid, -1);
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
			SaveOwnableTinting(vehicleid);
			g_player_tinting_price[playerid] = 0;
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 0)");
			
		}				
		case DIALOG_VINIL_INSTAL:
		{
			if(!response) return 1;
			new type = g_player_vinil[playerid];
			if(type < 41) if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), g_tuning_vinil_price[type])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
			else if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 10000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
			if(type < 41) GivePlayerMoneyEx(playerid, -g_tuning_vinil_price[type], "Покупка винила в детелинге");
			else GivePlayerMoneyEx(playerid, -10000000, "Покупка винила в детелинге");
			new vehicleid = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SetOwnableCarData(index, OC_VINILTYPE, 1);
			if(type == 0) SetOwnableCarData(index, OC_VINIL, -1);
			else if(type < 41) SetOwnableCarData(index, OC_VINIL, type);
			else SetOwnableCarData(index, OC_VINIL, type - 41), SetOwnableCarData(index, OC_VINILTYPE, 0);
			new query[148];
			format(query, sizeof query, "UPDATE ownable_cars SET vinil=%d, viniltype=%d WHERE id=%d", GetOwnableCarData(index, OC_VINIL), GetOwnableCarData(index, OC_VINILTYPE), GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);
			new biz_id = GetPlayerInBiz(playerid);
			if(type < 41) AddBusinessProfit(playerid, biz_id, (g_tuning_vinil_price[type] / 100) * 20, 1);
			else AddBusinessProfit(playerid, biz_id, 2000000, 1);
			g_player_vinil[playerid] = 0;
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 0)");
		}
		case DIALOG_NONCEF_MENU:
		{
			STRING_GLOBAL[0] = EOS;
			BitStream_2(playerid, s_CefInterface, t_CefShow, "MainMenu", "[-1, 6, []]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(0, '[%s,%d,\"%s\",[\"%s\"],[%d,%d,%d],%d,%d,%d,%d,\"%s\",%d,%d,%d,0,\""SERVER_NAME_RP" "SERVER_VERSION"\",%d,%d]')",
			GetPlayerMoneyEx(playerid), GetPlayerCurrentDonate(playerid), GetPlayerNameEx(playerid), GetPlayerGameStatus(playerid),  GetPlayerLevel(playerid), GetExpToNextLevel(playerid), GetPlayerExp(playerid), GetPlayerPremium(playerid), g_Vinoslivost[GetPlayerData(playerid, P_IMPROVEMENTS)],
			GetPlayerData(playerid, P_POWER), RPPoint[playerid], nakolka_name[GetPlayerData(playerid, P_NAKOLKA)], playerid, GetPlayerData(playerid, P_BP_LEVEL), GetPlayerData(playerid, P_BP_PREMIUM), GetPlayerPremiumTime(playerid), GetPlayerPhone(playerid));
			BitStream_2(playerid, s_CefInterface, t_CefShow, "MainMenu", STRING_GLOBAL);
			return 1;
		}	
  		case DIALOG_START_UGONKA:
		{
			if(!response) return 1;
			if(ugonka_activations < 1) return SCM(playerid, COLOR_RED, "Заказов на угон в данный момент нет.");

			CreateUgonka(playerid);
		}
		case DIALOG_SHINOMONTAJ_INSTAL:
		{
			if(!response) return 1;
			new vehicleid = GetPlayerOwnableCarLast(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return 1;
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			new type = g_player_diski[playerid];
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), g_tuning_diski_id[type][2])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
			GivePlayerMoneyEx(playerid, -g_tuning_diski_id[type][2], "покупка дисков");
			SetOwnableCarData(index, OC_DISKI, g_tuning_diski_id[type][0]);
			new query[148];
			format(query, sizeof query, "UPDATE ownable_cars SET diski=%d WHERE id=%d", g_tuning_diski_id[type][0], GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);
			new business_id = GetNearestBusiness(playerid, 15.0);
			if(business_id != -1)
			{
				AddBusinessProfit(playerid, business_id, g_tuning_diski_id[type][2], 1);
			}
			SetCameraBehindPlayer(playerid);
			BitStream_1(playerid, s_CefInterface, t_CefHide, "TuningStyling");
			SetPlayerStatusDiski(playerid);
		}
		case DIALOG_SHINOMONTAJ:
		{
			if(!response) return 1;
			switch(listitem + 1)
			{
				case 1:
				{
					new vehicleid = GetPlayerOwnableCarLast(playerid);
					if(vehicleid == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_GREY, "Заказать установку дисков можно только на личный транспорт!");
					if(GetPlayerStatusDiski(playerid) == -1) return SCM(playerid, COLOR_GREY, "Все места в данной шиномонтажке заняты, попробуйте позже.");
					STRING_GLOBAL[0] = EOS;
					new query[124];
					strcat(STRING_GLOBAL, "[\"Стоковые\",-1,5000],");
					for(new i = 1; i < sizeof g_tuning_diski_id; i++)
					{
						format(query, sizeof query, "[\"%d\",%d,%d],", i, g_tuning_diski_id[i][1], g_tuning_diski_id[i][2]);
						strcat(STRING_GLOBAL, query);
					}
					new str_len = strlen(STRING_GLOBAL);
					strdel(STRING_GLOBAL, str_len - 1, str_len);
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[%s]]", STRING_GLOBAL);
					BitStream_2(playerid, s_CefInterface, t_CefShow, "TuningStyling", STRING_GLOBAL);
					new type = g_player_diski_id[playerid];
					new event = g_player_diski_type[playerid];
					new Float: x, Float: y, Float: z;
	    			GetVehiclePos(vehicleid, x,y,z);
					SetVehiclePos(vehicleid, g_tuning_diski_pos_car[type][event][0], g_tuning_diski_pos_car[type][event][1], z);
					SetVehicleZAngle(vehicleid, g_tuning_diski_pos_car[type][event][3]);
					SetPlayerCameraPos(playerid, g_tuning_diski_camera[type][event][0][0], g_tuning_diski_camera[type][event][0][1], g_tuning_diski_camera[type][event][0][2]);
					SetPlayerCameraLookAt(playerid, g_tuning_diski_camera[type][event][1][0], g_tuning_diski_camera[type][event][1][1], g_tuning_diski_camera[type][event][1][2]);
				}
			}
		}
		case DIALOG_CONTAINER_BET:
		{
			if(!response) return 1;
			for(new i; i < MAX_CONTAINERS; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2]))
				{
					if(s_containers[i][S_CT_STATUS] != 1) return 1;
					if(IsPlayerInRangeOfPoint(playerid, 4.0,-1965.4330,2931.9961,7.8827)){InterpolateCameraPos(playerid, -1971.4741,2924.9089,11.0000, -1971.4741,2924.9089,11.0000, 140000);InterpolateCameraLookAt(playerid, -1958.8909,2932.2317,7.6256, -1958.8909,2932.2317,7.6256, 140000);}
					if(IsPlayerInRangeOfPoint(playerid, 4.0,-1949.1790,2932.1426,7.8827)){InterpolateCameraPos(playerid, -1954.6362,2925.3267,11.0000, -1954.6362,2925.3267,11.0000, 140000);InterpolateCameraLookAt(playerid, -1942.3273,2932.2578,7.6256, -1942.3273,2932.2578,7.6256, 140000);}
					if(IsPlayerInRangeOfPoint(playerid, 4.0,-1931.8142,2932.0295,7.8827)){InterpolateCameraPos(playerid, -1937.0596,2925.6311,11.0000, -1937.0596,2925.6311,11.0000, 140000);InterpolateCameraLookAt(playerid, -1925.0729,2932.0801,7.6256, -1925.0729,2932.0801,7.6256, 140000);}
					if(IsPlayerInRangeOfPoint(playerid, 4.0,-1914.7488,2931.9314,7.8827)){InterpolateCameraPos(playerid, -1919.9353,2925.3799,11.0000, -1919.9353,2925.3799,11.0000, 140000);	InterpolateCameraLookAt(playerid, -1908.0543,2932.1396,7.8256, -1908.0543,2932.1396,7.8256, 140000);}
					if(IsPlayerInRangeOfPoint(playerid, 4.0,-1904.9335,2926.5046,7.8827)){InterpolateCameraPos(playerid, -1908.7003,2920.2185,11.0000, -1908.7003,2920.2185,11.0000, 140000);	InterpolateCameraLookAt(playerid, -1898.1759,2926.6406,8.0333, -1898.1759,2926.6406,8.0333, 140000);}
					if(IsPlayerInRangeOfPoint(playerid, 4.0,-1922.4528,2926.6348,7.8827)){InterpolateCameraPos(playerid, -1926.1553,2919.7920,11.0000, -1926.1553,2919.7920,11.0000, 140000);	InterpolateCameraLookAt(playerid, -1915.8451,2926.5098,8.0256, -1915.8451,2926.5098,8.0256, 140000);}
					if(IsPlayerInRangeOfPoint(playerid, 4.0,-1938.8236,2926.3770,7.8827)){InterpolateCameraPos(playerid, -1942.5883,2919.4651,11.0000, -1942.5883,2919.4651,11.0000, 140000);	InterpolateCameraLookAt(playerid, -1931.7786,2926.5559,8.0256, -1931.7786,2926.5559,8.0256, 140000);}
					new fsf[213];
					format(fsf, sizeof fsf, "[\"%s\", %d, %d, %d, %d]", s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], s_containers[i][S_CT_TYPE], s_containers[i][S_CT_PRICE], s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10, s_containers[i][S_CT_TIME]);
					BitStream_2(playerid, s_CefInterface, t_CefShow, "ContainersBet", fsf);
					SCM(playerid, 0xa9acafFF, "Вы вошли в режим участника на аукцион контейнеров.");
					SCM(playerid, 0xa9acafFF, "Увеличивайте ставку чтобы лидировать в аукционе относительно текущей цены контейнера.");
					SCM(playerid, 0xa9acafFF, "Не покидайте, аукцион, если Ваша ставка лидирует, иначе дальнейшее участие будет невозможно.");
					containers_id[playerid] = i;
				}
			}
		}
		case DIALOG_PLAYER_ACS_CONTAINER:
		{
			if(!response) return 1;
			new i = containers_id[playerid];
			new item_id = containers_item_id[playerid];
			switch(listitem)
			{
				case 0..1:
				{
					new str_c[450],str_cs[70];
					new port = 50000 / 100 * 20;
					format(str_cs, sizeof str_cs,"{769A37}Аксессуар: №%d", s_containers_items[i][item_id][S_CT_I_ID]);
					format(str_c, sizeof str_c,
					"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20%)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(50000), formatInt(50000 - port));
					Dialog
					(
						playerid, DIALOG_PLAYER_ACS_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
						"Выбор", "Отмена"
					);
				}
				case 2:
				{
					if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
					SCMF(playerid, 0x78C02AFF, "{FFAF00}Вы забрали Аксессуар {FFFFFF}[№%d] {FFAF00}себе в инвентарь.", s_containers_items[i][item_id][S_CT_I_ID]);
					GiveAcs(playerid, s_containers_items[i][item_id][S_CT_I_ID], s_containers_items[i][item_id][S_CT_I_IDNX]);
					s_containers_items[i][item_id][S_CT_I_STATUS] = 0;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Containers");
					OpenItemContainers(playerid);
				}
				case 3:
				{
					new port = 50000 / 100 * 20;
					SCMF(playerid, 0x78C02AFF, "{FFAF00}Аксессуар {FFFFFF}[№%d] {FFAF00}был продан за {FFFFFF}%s руб.", s_containers_items[i][item_id][S_CT_I_ID], formatInt(50000 - port));
					GivePlayerMoneyEx(playerid, 50000 - port, "Продажа предмета с контейнера");
					s_containers_items[i][item_id][S_CT_I_STATUS] = 0;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Containers");
					OpenItemContainers(playerid);
				}
			}
		}
		case DIALOG_PLAYER_ITEM_CONTAINER:
		{
			if(!response) return 1;
			new i = containers_id[playerid];
			new item_id = containers_item_id[playerid];
			switch(listitem)
			{
				case 0..1:
				{
					new str_c[450],str_cs[70];
					new port = ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] / 100 * 20;
					format(str_cs, sizeof str_cs,"{769A37}Предмет: №%d", s_containers_items[i][item_id][S_CT_I_ID]);
					format(str_c, sizeof str_c,
					"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20%)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price]), formatInt(ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] - port));
					Dialog
					(
						playerid, DIALOG_PLAYER_ITEM_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
						"Выбор", "Отмена"
					);
				}
				case 2:
				{
					if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
					SCMF(playerid, 0x78C02AFF, "{FFAF00}Вы забрали {FFFFFF}%s [№%d] {FFAF00}себе в инвентарь.", ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]], s_containers_items[i][item_id][S_CT_I_ID]);
					GiveIteam(playerid, s_containers_items[i][item_id][S_CT_I_ID], 1, 1, 0);
					s_containers_items[i][item_id][S_CT_I_STATUS] = 0;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Containers");
					OpenItemContainers(playerid);
				}
				case 3:
				{
					new port = ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] / 100 * 20;
					SCMF(playerid, 0x78C02AFF, "{FFAF00}Предмет {FFFFFF}%s [№%d] {FFAF00}был продан за {FFFFFF}%s руб.", ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]], s_containers_items[i][item_id][S_CT_I_ID], formatInt(ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] - port));
					GivePlayerMoneyEx(playerid, ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] - port, "Продажа предмета с контейнера");
					s_containers_items[i][item_id][S_CT_I_STATUS] = 0;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Containers");
					OpenItemContainers(playerid);
				}
			}
		}
		case DIALOG_PLAYER_SKIN_CONTAINER:
		{
			if(!response) return 1;
			new i = containers_id[playerid];
			new item_id = containers_item_id[playerid];
			switch(listitem)
			{
				case 0..1:
				{
					new str_c[450],str_cs[70];
					new port = s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] / 100 * 20;
					format(str_cs, sizeof str_cs,"{769A37}Одежда: №%d",s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][0]);
					format(str_c, sizeof str_c,
					"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20%)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1]), formatInt(s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] - port));
					Dialog
					(
						playerid, DIALOG_PLAYER_SKIN_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
						"Выбор", "Отмена"
					);
				}
				case 2:
				{
					if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
					SCMF(playerid, 0x78C02AFF, "{FFAF00}Вы забрали одежду {FFFFFF}№%d {FFAF00}себе в инвентарь.", s_containers_items[i][item_id][S_CT_I_ID]);
					GiveSkin(playerid, s_containers_items[i][item_id][S_CT_I_ID]);
					s_containers_items[i][item_id][S_CT_I_STATUS] = 0;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Containers");
					OpenItemContainers(playerid);
				}
				case 3:
				{
					new port = s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] / 100 * 20;
					SCMF(playerid, 0x78C02AFF, "{FFAF00}Одежда {FFFFFF}№%d {FFAF00}была продан за {FFFFFF}%s руб.", s_containers_items[i][item_id][S_CT_I_ID], formatInt(s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] - port));
					GivePlayerMoneyEx(playerid, s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] - port, "Продажа скина с контейнера");
					s_containers_items[i][item_id][S_CT_I_STATUS] = 0;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Containers");
					OpenItemContainers(playerid);
				}
			}
		}
		case DIALOG_PLAYER_CAR_CONTAINER:
		{
			if(!response) return 1;
			new i = containers_id[playerid];
			switch(listitem)
			{
				case 0..1:
				{
					new str_c[450];
					new proc[20];
					format(proc, sizeof proc, "20%");
					new port = GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE) / 100 * 20;
					format(str_c, sizeof str_c,
					"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-%s)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE)), formatInt(GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE) - port), proc);
					Dialog
					(
						playerid, DIALOG_PLAYER_CAR_CONTAINER, DIALOG_STYLE_LIST, "{769A37}Действие с транспортом", str_c,
						"Выбор", "Отмена"
					);
				}
				case 2:
				{
					if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					{
						new str_c[450];
						new proc[20];
						format(proc, sizeof proc, "20%");
						new port = GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE) / 100 * 20;
						format(str_c, sizeof str_c,
						"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-%s)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE)), formatInt(GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE) - port), proc);
						Dialog
						(
							playerid, DIALOG_PLAYER_CAR_CONTAINER, DIALOG_STYLE_LIST, "{769A37}Действие с транспортом", str_c,
							"Выбор", "Отмена"
						);
						return 1;
					}
					GiveCar(playerid, s_containers_items[i][0][S_CT_I_ID], 1, 1, -1, container_spawn_vehicle_buy[i][CS_POS_X], container_spawn_vehicle_buy[i][CS_POS_Y], container_spawn_vehicle_buy[i][CS_POS_Z], container_spawn_vehicle_buy[i][CS_POS_A], gettime());
					new query[144];
					format(query, sizeof query, "{FFAF00}Вы забрали автомобиль {FFFFFF}%s {FFAF00}себе.", GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_NAME));
					SendClientMessage(playerid, 0x78C02AFF, query);
					DellContainers(i);
					containers_id[playerid] = -1;
				}
				case 3:
				{
					new port = GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE) / 100 * 20;
					new query[144];
					format(query, sizeof query, "{FFAF00}Автомобиль {FFFFFF}%s {FFAF00}был продан за {FFFFFF}%d руб.", GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID], VI_NAME), GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID], VI_PRICE) - port);
					SendClientMessage(playerid, 0x78C02AFF, query);
					GivePlayerMoneyEx(playerid, GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID], VI_PRICE) - port, "Продажа авто в порту");
					DellContainers(i);
					containers_id[playerid] = -1;
				}
			}
		}
		case DIALOG_CARWASH_START:
		{
			if(!response) return 1;
			new i = g_carwash_player_id[playerid];
			new business = GetNearestBusiness(playerid, 18.0);
			if(business == -1) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 4.5, g_carwash_object_pos[i][0][G_CARWASH_X],g_carwash_object_pos[i][0][G_CARWASH_Y],g_carwash_object_pos[i][0][G_CARWASH_Z])) return 1;
			if(g_carwash_status[i] == 1) return SendClientMessage(playerid, 0xCECECEFF, "Данная автомойка уже моет");
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), GetBusinessData(business, B_PROD_PRICE))) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
			GivePlayerMoneyEx(playerid, -GetBusinessData(business, B_PROD_PRICE), "оплата на автомойке");
			AddBusinessProfit(playerid, business, (GetBusinessData(business, B_PROD_PRICE) / 100) * 30, 1);
			g_carwash_object[i][0] = CreateObject(g_carwash_object_pos[i][1][G_CARWASH_ID], g_carwash_object_pos[i][1][G_CARWASH_X],g_carwash_object_pos[i][1][G_CARWASH_Y],g_carwash_object_pos[i][1][G_CARWASH_Z], 0.0, 0.0, 0.0);
			g_carwash_object[i][1] = CreateObject(g_carwash_object_pos[i][2][G_CARWASH_ID], g_carwash_object_pos[i][2][G_CARWASH_X],g_carwash_object_pos[i][2][G_CARWASH_Y],g_carwash_object_pos[i][2][G_CARWASH_Z], 0.0, 0.0, 0.0);
			g_carwash_object[i][2] = CreateObject(g_carwash_object_pos[i][3][G_CARWASH_ID], g_carwash_object_pos[i][3][G_CARWASH_X],g_carwash_object_pos[i][3][G_CARWASH_Y],g_carwash_object_pos[i][3][G_CARWASH_Z], 0.0, 0.0, 0.0);
			g_carwash_object[i][3] = CreateObject(g_carwash_object_pos[i][4][G_CARWASH_ID], g_carwash_object_pos[i][4][G_CARWASH_X],g_carwash_object_pos[i][4][G_CARWASH_Y],g_carwash_object_pos[i][4][G_CARWASH_Z], 0.0, 0.0, 0.0);
			GameText(playerid, "Мойка автомобиля...", 15000, 3); 
			SCM(playerid, 0x6BB61BFF, "{F81414}[Автомойка] {6EF83C}Начата мойка автомобиля, пожалуйста ожидайте.");
			g_carwash_status[i] = 1;
			TogglePlayerControllable(playerid,false);
			SetTimerEx("StopCarWash", 15000, false, "i", playerid);
			return 1;
		}
		case DIALOG_CREATE_CODE:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: typecode = 1, Dialog(playerid, DIALOG_NAME_CODE, DIALOG_STYLE_INPUT, "Промокод", "{FFFFFF}Введите название промокода", "Далее", "Закрыть");
				case 1: typecode = 2, Dialog(playerid, DIALOG_NAME_CODE, DIALOG_STYLE_INPUT, "Бонус-код", "{BE2D2D}Введите название бонус-кода", "Далее", "Закрыть");		
			}
		}
		case DIALOG_NAME_CODE:
		{
			if(!response) return 1;
			if(strlen(inputtext) < 4)
			{
				if(typecode == 1) Dialog(playerid, DIALOG_NAME_CODE, DIALOG_STYLE_INPUT, "Промокод", "{FFFFFF}Введите название промокода\n\n{BE2D2D}Название должно состоять минимум из 4 символов", "Далее", "Закрыть");
				if(typecode == 2) Dialog(playerid, DIALOG_NAME_CODE, DIALOG_STYLE_INPUT, "Бонус-код", "{FFFFFF}Введите название бонус-кода\n\n{BE2D2D}Название должно состоять минимум из 4 символов", "Далее", "Закрыть");
				return 1;
			}
			format(code_name, sizeof(code_name), "%s", inputtext);
			if(typecode == 1) Dialog(playerid, DIALOG_SETTINGS_CODE_1, DIALOG_STYLE_INPUT, "Промокод", "{FFFFFF}Введите кол-во активаций промокода", "Далее", "Закрыть");
			if(typecode == 2) Dialog(playerid, DIALOG_SETTINGS_CODE_1, DIALOG_STYLE_INPUT, "Бонус-код", "{FFFFFF}Введите кол-во активаций бонус-кода", "Далее", "Закрыть");
		}
		case DIALOG_SETTINGS_CODE_1:
		{
			if(!response) return 1;
			new count = strval(inputtext);
			if(250 < count || 1 > count)
			{
				if(typecode == 1) Dialog(playerid, DIALOG_SETTINGS_CODE_1, DIALOG_STYLE_INPUT, "Промокод", "{FFFFFF}Введите кол-во активаций промокода\n\n{BE2D2D}Введите корректное значение: от 1 до 250 активаций", "Далее", "Закрыть");
				if(typecode == 2) Dialog(playerid, DIALOG_SETTINGS_CODE_1, DIALOG_STYLE_INPUT, "Бонус-код", "{FFFFFF}Введите кол-во активаций бонус-кода\n\n{BE2D2D}Введите корректное значение: от 1 до 250 активаций", "Далее", "Закрыть");
				return 1;
			}
			code_count_activation = count;
			if(typecode == 2) UpdateCodeDialog(playerid);
			if(typecode == 1) Dialog(playerid, DIALOG_TIME_CODE, DIALOG_STYLE_INPUT, "Промокод", "{FFFFFF}Введите кол-во времени для отыгровки промокода (в минутах)", "Далее", "Закрыть");
		}
		case DIALOG_TIME_CODE:
		{
			if(!response) return 1;
			new count = strval(inputtext);
			if(250 < count || 1 > count)
			{
				Dialog(playerid, DIALOG_TIME_CODE, DIALOG_STYLE_INPUT, "Промокод", "{FFFFFF}Введите кол-во времени для отыгровки промокода (в минутах)\n\n{BE2D2D}Введите корректное значение: от 1 до 250 минут", "Далее", "Закрыть");
				return 1;
			}
			code_count_time = count;
			UpdateCodeDialog(playerid);
		}
		case DIALOG_SETTINGS_CODE_2:
		{
			if (!response) return 1;
			if (GetPlayerAdminEx(playerid) < 7) return 1;
			else if (admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
			
			switch (listitem + 1)
			{
				case 1:
				{
					new query[148];
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "");
					for (new i; i < MAX_PRIZES_CODE; i++)
					{
						if (code_additionally[i] != 0)
						{
							if (code_additionally_type[i] == 1) format(query, sizeof query, "\n{FFFFFF}%d. Деньги, количесво %s", i + 1, formatInt(code_additionally_count[i]));
							if (code_additionally_type[i] == 2) format(query, sizeof query, "\n{FFFFFF}%d. Донат, количесво %s", i + 1, formatInt(code_additionally_count[i]));
							if (code_additionally_type[i] == 3) format(query, sizeof query, "\n{FFFFFF}%d. EXP, количесво: %d", i + 1, code_additionally_count[i]);
							if (code_additionally_type[i] == 4) format(query, sizeof query, "\n{FFFFFF}%d. %s, количесво %d", i + 1, ItemsInfo[code_additionally_id[i]][i_item_name], code_additionally_count[i]);
							if (code_additionally_type[i] == 5) format(query, sizeof query, "\n{FFFFFF}%d. Транспорт[ID:%d]", i + 1, code_additionally_id[i]);
							if (code_additionally_type[i] == 6) format(query, sizeof query, "\n{FFFFFF}%d. Слоты на бизнес, количесво %d", i + 1, code_additionally_count[i]);
							if (code_additionally_type[i] == 7) format(query, sizeof query, "\n{FFFFFF}%d. Слоты на дом, количесво %d", i + 1, code_additionally_count[i]);
							if (code_additionally_type[i] == 8) format(query, sizeof query, "\n{FFFFFF}%d. Слоты на гараж, количесво %d", i + 1, code_additionally_count[i]);
							if (code_additionally_type[i] == 9) format(query, sizeof query, "\n{FFFFFF}%d. Слоты на авто, количесво %d", i + 1, code_additionally_count[i]);
							if (code_additionally_type[i] == 10) format(query, sizeof query, "\n{FFFFFF}%d. Слоты на киоск, количесво %d", i + 1, code_additionally_count[i]);
							if (code_additionally_type[i] == 11) format(query, sizeof query, "\n{FFFFFF}%d. Одежда[ID:%d]", i + 1, code_additionally_id[i]);
							if (code_additionally_type[i] == 12) format(query, sizeof query, "\n{FFFFFF}%d. Аксессуар[ID:%d]", i + 1, code_additionally_id[i]);
							if (code_additionally_type[i] == 13 && code_additionally_id[i] == 1) format(query, sizeof query, "\n{FFFFFF}%d. Купон на выход из Тюрьма (%d мин)", i + 1, code_additionally_count[i]);
							strcat(STRING_GLOBAL, query);
						}
					}
					if (typecode == 2) DLGF(playerid, DIALOG_SETTINGS_CODE_FINAL, DIALOG_STYLE_MSGBOX, "Подтверждение", "{FFFFFF}Вы действительно хоите активировать Бонус-Код:-%s-?\n{FFFFFF}Количество активаций: %d\nПризы:%s", "Далее", "Назад", code_name, code_count_activation, STRING_GLOBAL);
					if (typecode == 1) DLGF(playerid, DIALOG_SETTINGS_CODE_FINAL, DIALOG_STYLE_MSGBOX, "Подтверждение", "{FFFFFF}Вы действительно хоите создать Промокод:-%s-?\nВремя отыгровки: %d минут\n{FFFFFF}Количество активаций: %d\n{FFFFFF}Призы:%s", "Создать", "Назад", code_name, code_count_time, code_count_activation, STRING_GLOBAL);
				}
				case 2:
				{
					if (GetPlayerAdminEx(playerid) < 7) return 1;
					else if (admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
					for (new i; i < MAX_PRIZES_CODE; i++)
					{
						if (code_additionally[i] != 0) continue;
						Dialog(playerid, DIALOG_SETTINGS_CODE_3, DIALOG_STYLE_LIST, "Создать приз", "1. Деньги\n2. Донат\n3. EXP\n4. Предмет\n5. Транспорт\n6. Слот на бизнес\n7. Слот на дом\n8. Слот на гараж\n9. Слот на авто\n10. Слот на киоски\n11. Одежда\n12. Аксессуар\n13. Купоны", "Далее", "Назад");
						return 1;
					}
					UpdateCodeDialog(playerid), SCM(playerid, COLOR_GREY, "Создано максимальное количество призов.");
				}
				case 3:
				{
					for (new i; i < MAX_PRIZES_CODE; i++)
					{
						code_additionally[i] = 0;
						code_additionally_type[i] = 0;
						code_additionally_id[i] = 0;
						code_additionally_count[i] = 0;
					}
					UpdateCodeDialog(playerid), SCM(playerid, COLOR_GREY, "Вы удалили все призы.");
				}
				case 4..10:
				{
					new id[6];
					new count;
					for (new i; i < MAX_PRIZES_CODE; i++)
					{
						if (code_additionally[i] == 0) continue;
						id[count] = i;
						count++;
					}
					code_additionally[id[listitem - 3]] = 0;
					code_additionally_type[id[listitem - 3]] = 0;
					code_additionally_id[id[listitem - 3]] = 0;
					code_additionally_count[id[listitem - 3]] = 0;
					UpdateCodeDialog(playerid), SCM(playerid, COLOR_GREY, "Вы успешно удалили приз");
				}
			}
		}
		case DIALOG_SETTINGS_CODE_FINAL:
		{
			if(!response) return UpdateCodeDialog(playerid);
			if(GetPlayerAdminEx(playerid) < 7) return 1;
 	    		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
			new query[548];
			format(query, sizeof query, "INSERT INTO prizes_code (name, count_time, count_activation, type_code, type_prize_1, id_prize_1, count_prize_1, type_prize_2, id_prize_2, count_prize_2, type_prize_3, id_prize_3, count_prize_3, type_prize_4, id_prize_4, count_prize_4, type_prize_5, id_prize_5, count_prize_5, type_prize_6, id_prize_6, count_prize_6)\
			VALUES ('%s', %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
			code_name, code_count_time * 60, code_count_activation, typecode,
			code_additionally_type[0], code_additionally_id[0], code_additionally_count[0],
			code_additionally_type[1], code_additionally_id[1], code_additionally_count[1],
			code_additionally_type[2], code_additionally_id[2], code_additionally_count[2],
			code_additionally_type[3], code_additionally_id[3], code_additionally_count[3],
			code_additionally_type[4], code_additionally_id[4], code_additionally_count[4],
			code_additionally_type[5], code_additionally_id[5], code_additionally_count[5]);
			mysql_query(mysql, query);
			for(new i; i < MAX_PRIZES_CODE; i++)
			{
				code_additionally[i] = 0;
			}
			if(typecode == 2) SCMF(playerid, COLOR_ORANGE, "Вы успешно создали бонус-код: {FFFFFF}%s", code_name);
			if(typecode == 1) SCMF(playerid, COLOR_ORANGE, "Вы успешно создали промокод: {FFFFFF}%s", code_name);
			code_count_time = 0;
			foreach(new i: Player)
			{
				//BitStream_1(i, s_CefInterface, t_CefUpdate, "interface('ScreenNotification').add('[1, \"Bonuscode\", \"{6EF83C}Активировать code: {FFFFFF}"SERVER_TELEGRAM"\", \"C77D87\", 15000]')");
			}	
		}
		case DIALOG_SETTINGS_CODE_3:
		{
			if(!response) return UpdateCodeDialog(playerid);
			new prize_code;
			for(new i; i < MAX_PRIZES_CODE; i++)
			{
				if(code_additionally[i] != 0) continue;
				prize_code = i;
				break;
			}
			code_additionally_type[prize_code] = listitem + 1;
			switch(listitem + 1)
			{
				case 1: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Деньги", "{FFFFFF}Введите кол-во денег", "Далее", "");
				case 2: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Донат", "{FFFFFF}Введите кол-во доната", "Далее", "");
				case 3: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "EXP", "{FFFFFF}Введите кол-во EXP", "Далее", "");
				case 4: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Предмет", "{FFFFFF}Введите id предмета", "Далее", "");
				case 5: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Транспорт", "{FFFFFF}Введите id автомобиля", "Далее", "");
				case 6: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на бизнес", "{FFFFFF}Введите кол-во слотов на бизнес", "Далее", "");
				case 7: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на дом", "{FFFFFF}Введите кол-во слотов на дом", "Далее", "");
				case 8: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на гараж", "{FFFFFF}Введите кол-во слотов на гараж", "Далее", "");
				case 9: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на авто", "{FFFFFF}Введите кол-во слотов на авто", "Далее", "");
				case 10: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на киоски", "{FFFFFF}Введите кол-во слотов на киоски", "Далее", "");
				case 11: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Одежда", "{FFFFFF}Введите id одежды", "Далее", "");
				case 12: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Аксессуар", "{FFFFFF}Введите id (объект) аксессуара", "Далее", "");
				case 13: Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_LIST, "Купоны", "{FFFFFF}Купон на выход из тюрьмы Тюрьма", "Далее", "");
			}
		}
		case DIALOG_SETTINGS_CODE_4:
		{
			if(!response) return 1;
			new prize_code;
			for(new i; i < MAX_PRIZES_CODE; i++)
			{
				if(code_additionally[i] != 0) continue;
				prize_code = i;
				break;
			}
			new count = strval(inputtext);
			if(code_additionally_type[prize_code] == 5) 
			{
				if(count < 1) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Транспорт", "Введите id автомобиля\n\n{BE2D2D}Вы указали неверный id авто. Доступные авто: 400-614, 699, 793-799, 907-909, 965, 999, 1326, 15065-15299, 15600-15699", "Далее", "");
				if(!(400 <= count <= 614) && (!(699 <= count <= 699) && (!(793 <= count <= 799) && (!(15065 <= count <= 15299) && (!(15600 <= count <= 15699) && (!(907 <= count <= 909) && (!(965 <= count <= 965) && (!(999 <= count <= 999) && (!(1326 <= count <= 1326))))))))))
				{
					return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Транспорт", "Введите id автомобиля\n\n{BE2D2D}Вы указали неверный id авто. Доступные авто: 400-614, 699, 793-799, 907-909, 965, 999, 1326, 15065-15299, 2", "Далее", "");
				}
			}
			if(code_additionally_type[prize_code] != 5) 
			{
				switch(code_additionally_type[prize_code])
				{
					case 1: if(500000000 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Деньги", "Введите кол-во денег\n\n{BE2D2D}Введите корректное значение: от 1 до 500.000.000", "Далее", "");
					case 2: if(1000 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Донат", "Введите кол-во доната\n\n{BE2D2D}Введите корректное значение: от 1 до 1000", "Далее", "");
					case 3: if(100 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "EXP", "Введите кол-во EXP\n\n{BE2D2D}Введите корректное значение: от 1 до 100", "Далее", "");
					case 4: if(500 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Предмет", "Введите id предмета\n\n{BE2D2D}Введите корректное значение", "Далее", "");
					case 6: if(15 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на бизнес", "Введите кол-во слотов на бизнес\n\n{BE2D2D}Введите корректное значение: от 1 до 15", "Далее", "");
					case 7: if(15 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на дом", "Введите кол-во слотов на дом\n\n{BE2D2D}Введите корректное значение: от 1 до 15", "Далее", "");
					case 8: if(15 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на гараж", "Введите кол-во слотов на гараж\n\n{BE2D2D}Введите корректное значение: от 1 до 15", "Далее", "");
					case 9: if(15 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на авто", "Введите кол-во слотов на авто\n\n{BE2D2D}Введите корректное значение: от 1 до 15", "Далее", "");
					case 10: if(15 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Слот на киоски", "Введите кол-во слотов на киоски\n\n{BE2D2D}Введите корректное значение: от 1 до 15", "Далее", "");
					case 11: if(50000 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_4, DIALOG_STYLE_INPUT, "Одежда", "Введите id одежды\n\n{BE2D2D}Введите корректное значение", "Далее", "");
				}
			}
			if(code_additionally_type[prize_code] == 4)
			{
				code_additionally_id[prize_code] = count;
				Dialog(playerid, DIALOG_SETTINGS_CODE_ITEM, DIALOG_STYLE_INPUT, "Предмет", "Введите кол-во предмета", "Далее", "");
			}
			else if(code_additionally_type[prize_code] == 12)
			{
				code_additionally_id[prize_code] = count;
				Dialog(playerid, DIALOG_SETTINGS_CODE_ITEM, DIALOG_STYLE_INPUT, "Аксессуар", "Типы аксессуаров:\n\
				Тип 0 - Очки\n\
				Тип 1 - Бандана\n\
				Тип 2 - Маска\n\
				Тип 3 - Берет\n\
				Тип 4 - Шляпа\n\
				Тип 5 - Сумка\n\
				Тип 6 - Ремень\n\
				Тип 7 - Украшение на руку\n\
				Тип 8 - Рюкзак\n\
				Тип 9 - Украшение на шею\n\
				Тип 10 - Плащ\n\
				Тип 11 - Бронижелет\n\
				Тип 12 - Посох\n\
				Тип 13 - Крылья\n\
				Тип 14 - Украшение на транспорт\n\
				Тип 15 - Украшение на транспорт\n\
				Тип 16 - Украшение на транспорт\n\
				Тип 17 - Украшение на транспорт\n\
				Тип 18 - Скейтборд\n\
				Тип 19 - Украшение на левое плечо\n\n\
				Введите определенный тип аксессуара:", "Далее", "");
			}
			else if(code_additionally_type[prize_code] == 13)
			{
				new type = listitem + 1;
				code_additionally_id[prize_code] = type;
				Dialog(playerid, DIALOG_SETTINGS_CODE_ITEM, DIALOG_STYLE_INPUT, "Купон", "Введите время действия купона (в минутах)", "Далее", "");
			}
			else 
			{
				if(code_additionally_type[prize_code] == 5 || code_additionally_type[prize_code] == 11) code_additionally_id[prize_code] = count;
				else code_additionally_count[prize_code] = count;
				code_additionally[prize_code] = 1;
				UpdateCodeDialog(playerid);
			}
		}
		case DIALOG_SETTINGS_CODE_ITEM:
		{
			if(!response) return 1;
			new prize_code;
			for(new i; i < MAX_PRIZES_CODE; i++)
			{
				if(code_additionally[i] != 0) continue;
				prize_code = i;
				break;
			}
			if(code_additionally_type[prize_code] == 4)
			{
				new count = strval(inputtext);
				if(50 < count || 1 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_ITEM, DIALOG_STYLE_INPUT, "Предмет", "Введите кол-во предмета\n\n{BE2D2D}Введите корректное значение: от 1 до 50", "Далее", "");
			}
			else if(code_additionally_type[prize_code] == 13)
			{
				new count = strval(inputtext);
				if(500 < count || 5 > count) return Dialog(playerid, DIALOG_SETTINGS_CODE_ITEM, DIALOG_STYLE_INPUT, "Купон", "Введите время действия купона (в минутах)\n\n{BE2D2D}Введите корректное значение (от 5 до 500 минут)", "Далее", "");
			}
			code_additionally_count[prize_code] = strval(inputtext);
			code_additionally[prize_code] = 1;
			UpdateCodeDialog(playerid);
		}
		case DIALOG_PROMO_ACTIVATE:
		{
			if(response)
			{
				if(!strlen(inputtext)) return callcmd::pcode(playerid, "");
				new query[256],
					Cache: result,
					rows,
					count_activation,
					count_time,
					type_prize[6],
					id_prize[6],
					count_prize[6];
				mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode_activations WHERE owner_id='%d' AND name='%s'", GetPlayerAccountID(playerid), inputtext);
				result = mysql_query(mysql, query, true);
				rows = cache_num_rows();
				cache_delete(result);
				if(rows) return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","Вы уже активировали данный промокодом","", "Хорошо");
				mysql_format(mysql, query, sizeof query, "SELECT * FROM prizes_code WHERE name='%s' AND count_activation > 0 AND type_code=1", inputtext);
				result = mysql_query(mysql, query, true);
				rows = cache_num_rows();
				if(rows)
				{
					count_activation = cache_get_field_content_int(0, "count_activation");
					count_time = cache_get_field_content_int(0, "count_time");
					type_prize[0] = cache_get_field_content_int(0, "type_prize_1");
					id_prize[0] = cache_get_field_content_int(0, "id_prize_1");
					count_prize[0] = cache_get_field_content_int(0, "count_prize_1");
					type_prize[1] = cache_get_field_content_int(0, "type_prize_2");
					id_prize[1] = cache_get_field_content_int(0, "id_prize_2");
					count_prize[1] = cache_get_field_content_int(0, "count_prize_2");
					type_prize[2] = cache_get_field_content_int(0, "type_prize_3");
					id_prize[2] = cache_get_field_content_int(0, "id_prize_3");
					count_prize[2] = cache_get_field_content_int(0, "count_prize_3");
					type_prize[3] = cache_get_field_content_int(0, "type_prize_4");
					id_prize[3] = cache_get_field_content_int(0, "id_prize_4");
					count_prize[3] = cache_get_field_content_int(0, "count_prize_4");
					type_prize[4] = cache_get_field_content_int(0, "type_prize_5");
					id_prize[4] = cache_get_field_content_int(0, "id_prize_5");
					count_prize[4] = cache_get_field_content_int(0, "count_prize_5");
					type_prize[5] = cache_get_field_content_int(0, "type_prize_6");
					id_prize[5] = cache_get_field_content_int(0, "id_prize_6");
					count_prize[5] = cache_get_field_content_int(0, "count_prize_6");
				}
				cache_delete(result);
				if(!rows) return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","Данный промокод не найден","", "Хорошо");
				if(count_activation > 0)
				{
					mysql_format(mysql, query, sizeof query, "UPDATE prizes_code SET count_activation='%d' WHERE name='%s'", count_activation - 1, inputtext);
					mysql_query(mysql, query, false);
					CreatePlayerPromo(playerid, inputtext, count_time);
					SCMF(playerid, 0x66CC33FF, "{ffff00}Вы активировали промокод \"%s\"", inputtext);
					SCM(playerid, COLOR_GREY, "Примечание: бонусы выдаются во время зарплаты");
					string_dialog[0] = EOS;
					for(new i; i < MAX_PRIZES_CODE; i++)
					{	
						if(type_prize[i] == 1) format(query, sizeof query, "{FFFFFF}- %s рублей\n", formatInt(count_prize[i])),strcat(string_dialog, query);
						if(type_prize[i] == 2) format(query, sizeof query, "{FFFFFF}- %s донат-монет\n", formatInt(count_prize[i])),strcat(string_dialog, query);
						if(type_prize[i] == 3) format(query, sizeof query, "{FFFFFF}- Игровой опыт в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 4) format(query, sizeof query, "{FFFFFF}- %s в количестве %d шт.\n", ItemsInfo[id_prize[i]][i_item_name], count_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 5) format(query, sizeof query, "{FFFFFF}- %s [№%d]\n", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 6) format(query, sizeof query, "{FFFFFF}- Слот на бизнес в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 7) format(query, sizeof query, "{FFFFFF}- Слот на дом в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 8) format(query, sizeof query, "{FFFFFF}- Слот на гараж в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 9) format(query, sizeof query, "{FFFFFF}- Слот на транспорт в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 10) format(query, sizeof query, "{FFFFFF}- Слот на киоск в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 11) format(query, sizeof query, "{FFFFFF}- Одежда[№%d]\n", id_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 12) format(query, sizeof query, "{FFFFFF}- Аксессуар[№%d]\n", id_prize[i]),strcat(string_dialog, query);
						if(type_prize[i] == 13 && id_prize[i] == 1) format(query, sizeof query, "{FFFFFF}- Купон на выход из Тюрьма (%d мин)\n", count_prize[i]),strcat(string_dialog, query);
					}
					format
					(
						string_dialog, sizeof string_dialog, 
						"{bebfba}Вы активировали промокод \'%s\'\n\
						{FFFFFF}После {6cbbea}%02d {FFFFFF}минут игры на сервере (не AFK), Вы получите:\n\n\
						%s\n\
						Примечание: призы выдаются во время отыгранной зарплаты\n\n\
						Успейте выполнить все условия для получения награды",
						inputtext, floatround(count_time / 60), string_dialog
					);
					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Активация промокода", string_dialog,"", "Хорошо");
				}
				else return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","{bebfba}Данного промокода нету либо достигнут его лимит","", "Хорошо");
			}
		}
        case DIALOG_BONUSCODE_ACTIVATE:
		{
			if(!response) return 1;
			if(!strlen(inputtext)) return Dialog(playerid, DIALOG_BONUSCODE_ACTIVATE, DIALOG_STYLE_INPUT,"Активация бонус кода","Введите ваш бонус код в поле ниже","Далее", "Отмена");
			new query[256],
				Cache: result,
				rows,
				count_activation,
				type_code,
				type_prize[6],
				id_prize[6],
				count_prize[6];
			format(query, sizeof query, "SELECT * FROM promocode_activations WHERE owner_id='%d' AND name='%s'", GetPlayerAccountID(playerid), inputtext);
			result = mysql_query(mysql, query, true);
			rows = cache_num_rows();
			cache_delete(result);
			if(rows) return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","Вы уже активировали данный бонус код","", "Хорошо");
			format(query, sizeof query, "SELECT * FROM prizes_code WHERE name='%s' AND count_activation > 0 AND type_code=2", inputtext);
			result = mysql_query(mysql, query, true);
			rows = cache_num_rows();
			if(rows)
			{
				count_activation = cache_get_field_content_int(0, "count_activation");
				type_prize[0] = cache_get_field_content_int(0, "type_prize_1");
				id_prize[0] = cache_get_field_content_int(0, "id_prize_1");
				count_prize[0] = cache_get_field_content_int(0, "count_prize_1");
				type_prize[1] = cache_get_field_content_int(0, "type_prize_2");
				id_prize[1] = cache_get_field_content_int(0, "id_prize_2");
				count_prize[1] = cache_get_field_content_int(0, "count_prize_2");
				type_prize[2] = cache_get_field_content_int(0, "type_prize_3");
				id_prize[2] = cache_get_field_content_int(0, "id_prize_3");
				count_prize[2] = cache_get_field_content_int(0, "count_prize_3");
				type_prize[3] = cache_get_field_content_int(0, "type_prize_4");
				id_prize[3] = cache_get_field_content_int(0, "id_prize_4");
				count_prize[3] = cache_get_field_content_int(0, "count_prize_4");
				type_prize[4] = cache_get_field_content_int(0, "type_prize_5");
				id_prize[4] = cache_get_field_content_int(0, "id_prize_5");
				count_prize[4] = cache_get_field_content_int(0, "count_prize_5");
				type_prize[5] = cache_get_field_content_int(0, "type_prize_6");
				id_prize[5] = cache_get_field_content_int(0, "id_prize_6");
				count_prize[5] = cache_get_field_content_int(0, "count_prize_6");
				type_code = cache_get_field_content_int(0, "type_code");
			}
			cache_delete(result);
			if(type_code == 1) return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","Данный бонус код не найден","", "Хорошо");
			if(!rows) Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","Данный бонус код не найден","", "Хорошо");
			mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode_activations WHERE owner_id='%d' AND name='%s'", GetPlayerAccountID(playerid), inputtext);
			result = mysql_query(mysql, query, true);
			rows = cache_num_rows();
			if(count_activation > 0)
			{
				mysql_format(mysql, query, sizeof query, "UPDATE prizes_code SET count_activation='%d' WHERE name='%s'", count_activation - 1, inputtext);
				mysql_query(mysql, query, false);
				mysql_format(mysql, query, sizeof query, "INSERT INTO promocode_activations (owner_id, name, time, type, status) VALUES (%d, '%s', 0, 0, 2)", GetPlayerAccountID(playerid), inputtext);
				mysql_query(mysql, query, false);
				string_dialog[0] = EOS;
				for(new i; i < MAX_PRIZES_CODE; i++)
				{	
					if(type_prize[i] == 1) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Деньги: %d руб {F3FF02}за активацию бонус кода", count_prize[i]), 
						GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, count_prize[i], 0),
						format(query, sizeof query, "{FFFFFF}- %s рублей\n", formatInt(count_prize[i])),
						strcat(string_dialog, query);
					if(type_prize[i] == 2) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Донат: %d руб {F3FF02}за активацию бонус кода", count_prize[i]), 
						GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, count_prize[i], 0),
						format(query, sizeof query, "{FFFFFF}- %s донат-монет\n", formatInt(count_prize[i])),
						strcat(string_dialog, query);
					if(type_prize[i] == 3) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}%d EXP {F3FF02}за активацию бонус кода", count_prize[i]), 
						GivePlayerExp(playerid, count_prize[i]),
						format(query, sizeof query, "{FFFFFF}- Игровой опыт в количестве %d шт.\n", count_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 4) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}%s в количестве %d шт. {F3FF02}за активацию бонус кода",ItemsInfo[id_prize[i]][i_item_name], count_prize[i]), 
						format(query, sizeof query, "%s", ItemsInfo[id_prize[i]][i_item_name]),
						GivePlayerMyPrizes(playerid, query, 8, id_prize[i], 0, count_prize[i], 0),
						format(query, sizeof query, "{FFFFFF}- %s в количестве %d шт.\n", ItemsInfo[id_prize[i]][i_item_name], count_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 5) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}%s {F3FF02}за активацию бонус кода", GetVehicleInfo(id_prize[i], VI_NAME)), 
						format(query, sizeof query, "%s[№%d]", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),
						GivePlayerMyPrizes(playerid, query, 3, id_prize[i], 0, 1, -1),
						format(query, sizeof query, "{FFFFFF}- %s [№%d]\n", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 6) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Слот на бизнес в количестве %d шт. {F3FF02}за активацию бонус кода", count_prize[i]), 
						AddPlayerData(playerid, P_BIZ_SLOTS, +, count_prize[i]),
						UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS)),
						format(query, sizeof query, "{FFFFFF}- Слот на бизнес в количестве %d шт.\n", count_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 7) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Слот на дом в количестве %d шт. {F3FF02}за активацию бонус кода", count_prize[i]), 
						AddPlayerData(playerid, P_HOUSE_SLOTS, +, count_prize[i]),
						UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS)),
						format(query, sizeof query, "{FFFFFF}- Слот на дом в количестве %d шт.\n", count_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 8) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Слот на гараж в количестве %d шт. {F3FF02}за активацию бонус кода", count_prize[i]), 
						AddPlayerData(playerid, P_GARAGE_SLOTS, +, count_prize[i]),
						UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS)),
						format(query, sizeof query, "{FFFFFF}- Слот на гараж в количестве %d шт.\n", count_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 9) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Слот на транспорт в количестве %d шт. {F3FF02}за активацию бонус кода", count_prize[i]), 
						AddPlayerData(playerid, P_CAR_SLOTS, +, count_prize[i]),
						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS)),
						format(query, sizeof query, "{FFFFFF}- Слот на транспорт в количестве %d шт.\n", count_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 10) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Слот на киоск в количестве %d шт. {F3FF02}за активацию бонус кода", count_prize[i]), 
						AddPlayerData(playerid, P_KIOSK_SLOTS, +, count_prize[i]),
						UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS)),
						format(query, sizeof query, "{FFFFFF}- Слот на киоск в количестве %d шт.\n", count_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 11)
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Одежда[№%d] {F3FF02}за активацию бонус кода", id_prize[i]), 
						format(query, sizeof query, "Одежда[№%d]", id_prize[i]),
						GivePlayerMyPrizes(playerid, query, 4, id_prize[i], 0, 1, 0),
						format(query, sizeof query, "{FFFFFF}- Одежда[№%d]\n", id_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 12) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Аксессуар[№%d] {F3FF02}за активацию бонус кода", id_prize[i]), 
						format(query, sizeof query, "Аксессуар[№%d]", id_prize[i]),
						GivePlayerMyPrizes(playerid, query, 6, id_prize[i], 0, 1, count_prize[i]),
						format(query, sizeof query, "{FFFFFF}- Аксессуар[№%d]\n", id_prize[i]),
						strcat(string_dialog, query);
					if(type_prize[i] == 13 && id_prize[i] == 1) 
						SCMF(playerid, COLOR_ORANGE, "{F3FF02}Вам начислен приз {FFFFFF}Купон на выход из Тюрьма (%d мин) {F3FF02}за активацию бонус кода", count_prize[i]), 
						format(query, sizeof query, "Купон для выхода из тюрьмы Тюрьма (%d мин)", count_prize[i]),
						GivePlayerMyPrizes(playerid, query, 16, count_prize[i], 0, 0, 0),
						format(query, sizeof query, "{FFFFFF}- Купон для выхода из Тюрьма (%d мин)\n", count_prize[i]),
						strcat(string_dialog, query);
				}
				format
				(
					string_dialog, sizeof string_dialog, 
					"{bebfba}Вы успешно активировали бонус код и получили:\n\n\
					%s",
					string_dialog
				);
				Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Успешная активация", string_dialog,"", "Хорошо");
			}
			else Dialog(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","{bebfba}Данного бонус-кода нет либо достигнут его лимит","", "Хорошо");
			return 1;
		}
		case DIALOG_OWNABLE_GARAGE_OPLATA:
		{
			if(!response) return 1;
			new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			SetPVarInt(playerid, "ownablegarage_id", idx);
			ShowPlayerGaragePayForRent(playerid);
		}
		case DIALOG_SELL_GARAGE_LIST:
		{
			if(!response) return 1;
			new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			SetPVarInt(playerid, "ownablegarage_id", idx);
			new garage_id = GetPVarInt(playerid, "ownablegarage_id");
			if(garage_id != -1)
			{
				Dialog
				(
					playerid, DIALOG_GARAGE_SELL, DIALOG_STYLE_MSGBOX,
					"{FFD83D}Продажа гаража",
					"{"#cW"}Вы уверены что хотите продать свой гараж государству?\n\n"\
					"Вам будет возвращена его стоимость за вычитом 30%\n"\
					"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
					"Если Вы хотите продать бизнес другому игроку,\n"\
					"используйте команду: {FFD83D}/sellmygarage",
					"Да", "Нет"
				);
			}
			else SendClientMessage(playerid, 0xFF6600FF, "У Вас нет гаража");
			return 1;
		}
		case dJobPilot:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					new randomIndex = random(2);
					new planeID;
					if(randomIndex == 0) {
						planeID = 519; // Самолет с ID 519
					} else {
						planeID = 577; // Самолет с ID 577
					}
					SetPlayerPos(playerid, 2705.4731, -1899.2540, 22.0031);
					PlainVeh[playerid] = AddStaticVehicleEx(planeID, 2702.0137, -1904.0129, 23.4342, 300.2607, 1, 1, 360);
					scm(playerid, COLOR_CHAT, "* Осуществите посадку пассажиров!");
					scm(playerid, COLOR_CHAT, "* Чтобы закончить рейс выпрыгните из самолёта.");
					SetPlayerRaceCheckpoint(playerid, 3, gPlainPoints[42][0], gPlainPoints[42][1], gPlainPoints[42][2], gPlainPoints[42][3], gPlainPoints[42][4], gPlainPoints[42][5], 20.0, 2021);
					PlayerIsPlain[playerid] = 1;
					PutPlayerInVehicle(playerid, PlainVeh[playerid], 0);
				}
			}
		}
		case DIALOG_INFO_GARAGE_LIST:
		{
			if(!response) return 1;
			new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			SetPVarInt(playerid, "ownablegarage_id", idx);
			new garage_id = GetPVarInt(playerid, "ownablegarage_id");
			if(garage_id != -1)
			{
				string_dialog[0] = EOS;
				format
				(
					string_dialog, sizeof string_dialog,
					"{ffffff}Номер гаража:<t><t><t>%d\n",
					garage_id
				);
				format
				(
					string_dialog, sizeof string_dialog,
					"{ffffff}Владелец:<t><t><t><t>{339999}%s\n"\
					"%s{ffffff}Город / поселок:\t\t\t%s\n"\
					"Район:\t\t\t\t\t%s\n"\
					"Уровень улучшений:<t><t><t>%d\n"\
					"Гараж оплачен на:<t><t><t>%d/14 дней\n"\
					"Гос. стоимость:<t><t><t>%s\n"\
					"Арендная плата:<t><t><t>%d руб в день\n"\
					"Статус:<t><t><t><t><t>%s\n\n"\
					"{669966}Для открытия панели управления Вашим гаражом\n"\
					"нажмите кнопку 'Изменить'",
					GetGarageData(garage_id, G_OWNER_NAME),
					string_dialog,
					GetCityName(GetGarageData(garage_id, G_CITY)),
					GetZoneName(GetGarageData(garage_id, G_ZONE)),
					GetGarageData(garage_id, G_IMPROVEMENTS),
					GetGarageData(garage_id, G_RENT_DATE) <= gettime() ? 0 :
					GetElapsedTime(GetGarageData(garage_id, G_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
					formatInt(GetGarageData(garage_id, G_PRICE)),
					GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? (GetGarageData(garage_id, G_RENT_PRICE) / 2) : (GetGarageData(garage_id, G_RENT_PRICE)),
					GetGarageData(garage_id, G_LOCK_STATUS) ? ("{CC3333}Гараж закрыт") : ("{66CC33}Гараж открыт")
				);
				Dialog(playerid, DIALOG_GARAGE_INFO, DIALOG_STYLE_MSGBOX, "{FFD83D}Информация о гараже", string_dialog, "Изменить", "Отмена");
			}
			else SendClientMessage(playerid, 0xFF6600FF, "У Вас нет гаража");
			return 1;
		}
		case DIALOG_SELL_MY_GARAGE_LIST:
		{
			if(!response) return 1;
			new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			SetPVarInt(playerid, "ownablegarage_id", idx);
			new garageid = GetPVarInt(playerid, "ownablegarage_id");
			new price = GetPVarInt(playerid, "Sellprice");
			new to_player = GetPVarInt(playerid, "to_player");
			new Float: g_pos_x = GetGarageData(garageid, G_POS_X);
			new Float: g_pos_y = GetGarageData(garageid, G_POS_Y);
			new Float: g_pos_z = GetGarageData(garageid, G_POS_Z);
			if(!(IsPlayerInRangeOfPoint(playerid, 7.0, g_pos_x, g_pos_y, g_pos_z) && IsPlayerInRangeOfPoint(to_player, 7.0, g_pos_x, g_pos_y, g_pos_z)))
				SendClientMessage(playerid, 0xFF6600FF, "Вы и покупатель должны находиться рядом с бизнесом который хотите продать");
			SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_GARAGE, garageid, price);
			return 1;
		}
		case DIALOG_CREATE_FAMILY:
            {
                if(!response) return 1;
                if(GetPlayerData(playerid, P_FAMILY) != 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже состоите в семье");
                if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 50000000))
                {
                    new str_len = strlen(inputtext);
					if(6 <= str_len <= 36)
					{
	                    new query[512],
	                        Cache: result,
	                        rows;
	                    mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE name='%s'", inputtext);
	                    result = mysql_query(mysql, query, true);
	                    rows = cache_num_rows();
	                    cache_delete(result);
	                    if(rows)
	                    {
	                        SendClientMessage(playerid, 0xCECECEFF, "Данное имя уже используется");
						    Dialog
						    (
						        playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
						        "Создание семьи",
						        "{999999}- Цена: 50.000.000 рублей<n>\
								{999999}- Только русские и английские символы<n>\
								{999999}- Используйте от 6 до 36 символов<n>\
								{FFFFFF}Введите название Вашей семьи",
						        "Создать", "Отмена"
						    );
	                        return 1;
	                    }
	                    GivePlayerMoneyEx(playerid, -50000000, "Создание семьи",true,true);
	                    SendClientMessage(playerid, 0x66CC00FF, "Вы успешно создали семью! {"#cGold"}Используйте /fmenu для информации.");
	                    new time = gettime();
	                    mysql_format
	                    (
	                        mysql, query, sizeof query,
	                        "INSERT INTO family "\
	                            "(name,u_id,time) "\
	                            "VALUES "\
	                            "('%e',%d,%d)",
	                        inputtext,
	                        GetPlayerAccountID(playerid),
	                        time
	                    );
	                    result = mysql_query(mysql, query);
	                    new fam_id = cache_insert_id();
	                    SetPlayerData(playerid, P_FAMILY, fam_id);
	                    SetPlayerData(playerid, P_FAMILY_RANK, 10);
	                    format(query, sizeof query, "UPDATE accounts SET family=%d, family_rank=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_FAMILY), GetPlayerData(playerid, P_FAMILY_RANK), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
	                    SetFamilyData(fam_id, F_SQL_ID, fam_id);
	                    format(g_family[fam_id][F_NAME], 64, "%s", inputtext);
						new text_str[144];
						format(text_str, 144, "{FFB500}%s", inputtext);
						g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
						new
							hour, minute,second,
							day, month, year;
						gettime(hour, minute,second);
						getdate(year, month, day);
	                    SetFamilyData(fam_id, F_TIME_DAY, day);
	                    SetFamilyData(fam_id, F_TIME_MOUNTH, month);
	                    SetFamilyData(fam_id, F_TIME_YEAR, year);
	                    SetFamilyData(fam_id, F_TIME_HOUR, hour);
	                    SetFamilyData(fam_id, F_TIME_MINUTE, minute);
	                    SetFamilyData(fam_id, F_TIME_SECOND, second);
	                    format(query, sizeof query, "UPDATE family SET day=%d, mounth=%d,year=%d,hour=%d,minute=%d,second=%d WHERE id=%d LIMIT 1", day,month,year,hour,minute,second, g_family[fam_id][F_SQL_ID]);
						mysql_query(mysql, query, false);
	                    SetFamilyData(fam_id, F_HOUSE_ID, -1);
	                    SetFamilyData(fam_id, F_USER_ID, GetPlayerAccountID(playerid));
	                    format(g_family[fam_id][F_RANK1], 32, "Терпила");
	                    format(g_family[fam_id][F_RANK2], 32, "Шнырь");
	                    format(g_family[fam_id][F_RANK3], 32, "Босяк");
	                    format(g_family[fam_id][F_RANK4], 32, "Барыга");
	                    format(g_family[fam_id][F_RANK5], 32, "Вор");
	                    format(g_family[fam_id][F_RANK6], 32, "Блатной");
	                    format(g_family[fam_id][F_RANK7], 32, "Пахан");
	                    format(g_family[fam_id][F_RANK8], 32, "Командир");
	                    format(g_family[fam_id][F_RANK9], 32, "Заместитель");
	                    format(g_family[fam_id][F_RANK10], 32, "Создатель");
	                    mysql_format(mysql, query, sizeof query, "UPDATE family SET rank1='%e', rank2='%e' WHERE id=%d LIMIT 1",
						GetFamilyData(fam_id, F_RANK1),GetFamilyData(fam_id, F_RANK2), g_family[fam_id][F_SQL_ID]);
						mysql_query(mysql, query, false);
						mysql_format(mysql, query, sizeof query, "UPDATE family SET rank3='%e', rank4='%e' WHERE id=%d LIMIT 1",
						GetFamilyData(fam_id, F_RANK3),GetFamilyData(fam_id, F_RANK4), g_family[fam_id][F_SQL_ID]);
						mysql_query(mysql, query, false);
						mysql_format(mysql, query, sizeof query, "UPDATE family SET rank5='%e', rank6='%e' WHERE id=%d LIMIT 1",
						GetFamilyData(fam_id, F_RANK5),GetFamilyData(fam_id, F_RANK6), g_family[fam_id][F_SQL_ID]);
						mysql_query(mysql, query, false);
						mysql_format(mysql, query, sizeof query, "UPDATE family SET rank7='%e',rank8='%e' WHERE id=%d LIMIT 1",
						GetFamilyData(fam_id, F_RANK7),GetFamilyData(fam_id, F_RANK8), g_family[fam_id][F_SQL_ID]);
						mysql_query(mysql, query, false);
						mysql_format(mysql, query, sizeof query, "UPDATE family SET rank9='%e', rank10='%e' WHERE id=%d LIMIT 1",
						GetFamilyData(fam_id, F_RANK9),GetFamilyData(fam_id, F_RANK10), g_family[fam_id][F_SQL_ID]);
						mysql_query(mysql, query, false);
						g_family_loaded ++;
						cache_delete(result);
					}
					else
					{
					    SendClientMessage(playerid, 0xCECECEFF, "* Кол-во символов от 6 до 36!");
					    Dialog
					    (
					        playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
					        "Создание семьи",
					        "{999999}- Цена: 50.000.000 рублей<n>\
							{999999}- Только русские и английские символы<n>\
							{999999}- Используйте от 6 до 36 символов<n>\
							{FFFFFF}Введите название Вашей семьи",
					        "Создать", "Отмена"
					    );
					}
                }
                else SendClientMessage(playerid, 0xCECECEFF, "*У Вас недостаточно денег");
            }
			case DIALOG_COLOR_GANG_CR:
			{
			    if(!response) return 1;
			    new fam_id = GetPlayerData(playerid, P_FAMILY),
					fmt_text[556];
			    SetFamilyData(fam_id, F_COLOR, list_id);
                SetFamilyData(fam_id, F_GANG, 1);
                SetFamilyData(fam_id, F_FAMILY_CARS, 10);
				SetFamilyData(fam_id, F_HOUSE_ID,GetPlayerHouse(playerid));
                mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d',gang=1,house_id=%d,family_cars=10 WHERE id='%d' LIMIT 1", list_id,GetPlayerHouse(playerid), fam_id);
				mysql_query(mysql, fmt_text, false);
				foreach(new i : Player)
				{
					if(!IsPlayerConnected(i)) continue;
					else if(!IsPlayerLogged(i)) continue;
					if(GetPlayerData(i, P_FAMILY) == GetPlayerData(playerid, P_FAMILY))
					{
						DestroyDynamic3DTextLabel(g_player[i][P_FAM_LABEL]);
						g_player[i][P_FAM_LABEL] = Text3D: -1;
						SetPlayerColorEx(i, family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)]);
						new text_str[144];
						format(text_str, 144, "{%06x}%s", family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerFamily(i)][F_NAME]);
						g_player[i][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, i, INVALID_VEHICLE_ID, 1);
					}
				}
		        new houseid = GetFamilyData(fam_id, F_HOUSE_ID);
		        new type = GetHouseData(houseid, H_TYPE);
				DestroyPickup(gangsklads[fam_id]);
				if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
		        gangsklads[fam_id] = CreatePickup(1239, 23, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_SKLAD);
				SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z) + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));
				CallLocalFunction("UpdateGangSklad", "i", fam_id);
				format(fmt_text, sizeof fmt_text, "<%s> Ваша семья стала бандой! База находится в доме №%d", GetFamilyData(fam_id, F_NAME), GetFamilyData(fam_id, F_HOUSE_ID));
				SendClientMessage(playerid, 0xFF9C18FF, fmt_text);
			}
            case DIALOG_FAMILY_FFF:
            {
                callcmd::fmenu(playerid, "");
            }
            case DIALOG_FAMILY_MENU:
            {
                if(!response) return 1;
                switch(listitem)
                {
                    case 0:
                    {
						new fmt_text[78],fmt_texts[30],
							list[sizeof fmt_text * 10 + 50] = "{ffffff}Имя<t>{ffffff}Телефон<n>";
						new pl,afk;
						foreach(new i : Player)
						{
							if(!IsPlayerConnected(i)) continue;
							else if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == GetPlayerData(playerid, P_FAMILY))
							{
							    new namerank[40];
							    new fam_id = GetPlayerData(playerid, P_FAMILY);
							    new rank = GetPlayerData(i, P_FAMILY_RANK);
							    pl = pl+1;
							    if(IsPlayerAFK(i))
							    {
							        afk = afk +1;
							    }
							    if(rank == 1) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK1));
							    if(rank == 2) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK2));
							    if(rank == 3) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK3));
							    if(rank == 4) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK4));
							    if(rank == 5) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK5));
							    if(rank == 6) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK6));
							    if(rank == 7) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK7));
							    if(rank == 8) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK8));
							    if(rank == 9) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK9));
							    if(rank == 10) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK10));
								format(fmt_text, sizeof fmt_text, "1. %s[%d] {e65050}[%s]{ffffff}<t>%d<n>", GetPlayerNameEx(i), i, namerank,GetPlayerPhone(i));
								strcat(list, fmt_text);
								format(fmt_texts, sizeof fmt_texts, "{FFCD00}В игре: %d (%d в AFK)",pl,afk);
							}
						}
						Dialog(playerid, DIALOG_FAMILY_FFF, 5, fmt_texts, list, "Назад", "");
                    }
                    case 1:
                    {
						new query[144],
							text[1440],
							Cache: result,
							rows;
						mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE family='%d'", GetPlayerData(playerid, P_FAMILY));
						result = mysql_query(mysql, query);
						rows = cache_num_rows();
						for(new i = 0; i < rows; i++)
						{
							new name[21];
							cache_get_field_content(i, "name", name);
							new user_id = cache_get_field_content_int(i, "id");
							format(query, sizeof query, "%d. %s<n>", i+1, name);
							strcat(text, query);
							SetPlayerListitemValue(playerid, i, user_id);
						}
						cache_delete(result);
						Dialog(playerid, DIALOG_FAMILY_PL, DIALOG_STYLE_LIST, "{FFCD00}Состав семьи", text, "Выгнать", "Отмена");
                    }
                    case 2: ShowFamilyInfo(playerid);
                    case 3:
                    {
					 	if(IsPlayerInRangeOfPoint(playerid, 35.0, 300.5571,304.2417,1001.0000)) //300.5571,304.2417,1001.0000
						{
							Dialog(playerid, DIALOG_FAMILY_BANK, DIALOG_STYLE_LIST, "{FFCD00}Бюджет семьи", "1. Пополнить<n>2. Снять<n>3. История", "Принять", "Отмена");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "*Вы не в банке");
                    }
                }
            }
            case DIALOG_GANG_MENU:
            {
                if(!response) return 1;
                switch(listitem)
                {
                    case 0:
                    {
						new fmt_text[78], fmt_texts[30];
						string_dialog = "{ffffff}Имя<t>{ffffff}Телефон<n>";
						new pl,afk;
						foreach(new i : Player)
						{
							if(!IsPlayerConnected(i)) continue;
							else if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == GetPlayerData(playerid, P_FAMILY))
							{
							    new namerank[40];
							    new fam_id = GetPlayerData(playerid, P_FAMILY);
							    new rank = GetPlayerData(i, P_FAMILY_RANK);
							    pl = pl+1;
							    if(IsPlayerAFK(i)) afk = afk +1;
							    if(rank == 1) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK1));
							    if(rank == 2) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK2));
							    if(rank == 3) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK3));
							    if(rank == 4) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK4));
							    if(rank == 5) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK5));
							    if(rank == 6) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK6));
							    if(rank == 7) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK7));
							    if(rank == 8) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK8));
							    if(rank == 9) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK9));
							    if(rank == 10) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK10));
							    if(IsPlayerAFK(i)) format(fmt_text, sizeof fmt_text, "%d. %s[%d](AFK) {e65050}[%s]{ffffff}<t>%d<n>", pl,GetPlayerNameEx(i), i, namerank,GetPlayerPhone(i));
								else format(fmt_text, sizeof fmt_text, "%d. %s[%d] {e65050}[%s]{ffffff}<t>%d<n>", pl,GetPlayerNameEx(i), i, namerank,GetPlayerPhone(i));
								strcat(string_dialog, fmt_text);
								format(fmt_texts, sizeof fmt_texts, "{FFCD00}В игре: %d (%d в AFK)",pl,afk);
							}
						}
						Dialog(playerid, DIALOG_FAMILY_FFF, 5, fmt_texts, string_dialog, "Назад", "");
                    }
                    case 1:
                    {
						string_dialog[0] = EOS;
						new query[144], Cache: result, rows;
						mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE family='%d'", GetPlayerData(playerid, P_FAMILY));
						result = mysql_query(mysql, query);
						rows = cache_num_rows();
						for(new i = 0; i < rows; i++)
						{
							new name[21];
							cache_get_field_content(i, "name", name);
							new user_id = cache_get_field_content_int(i, "id");
							format(query, sizeof query, "%d. %s<n>", i+1, name);
							strcat(string_dialog, query);
							SetPlayerListitemValue(playerid, i, user_id);
						}
						cache_delete(result);
						Dialog(playerid, DIALOG_FAMILY_PL, DIALOG_STYLE_LIST, "{FFCD00}Состав семьи", string_dialog, "Выгнать", "Отмена");
                    }
                    case 2: ShowFamilyInfo(playerid);
                    case 3:
                    {
					    if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа");
						new query[50];
					    for(new i = 0; i < 18; i ++)
						{
					    	format(query, sizeof query, "\"%06x\",", family_colors[i]);
							strcat(STRING_GLOBAL, query);
					    }
					  	new str_len;
						str_len = strlen(STRING_GLOBAL);
						strdel(STRING_GLOBAL, str_len - 1, str_len);
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Выберите цвет банды\", [%s], 1]",  STRING_GLOBAL);
						SetPVarInt(playerid,"colortype",2);
					    BitStream_2(playerid, s_CefInterface, t_CefShow, "GangColor", STRING_GLOBAL);
                    }
                    case 4:
                    {
						new query[148],
							Cache: result,
							biz_id,
							biz_name[64];
						mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE gang='%d'", GetPlayerData(playerid, P_FAMILY));
						result = mysql_query(mysql, query, true);
						new rows = cache_num_rows();
						if(!rows)
							return SendClientMessage(playerid, 0x999999FF, "У Вашей банды нет во владенни бизнесов.");
                        vibor_biz_atm[playerid] = 1;
						string_dialog[0] = EOS;
						for(new i = 0; i < rows; i ++)
						{
							biz_id = cache_get_field_content_int(i, "id");
							cache_get_field_content(i, "name", biz_name);
							format(query, sizeof query, "{FFFFFF} %s [%d]\n", biz_name, biz_id);
							strcat(string_dialog, query);
							SetPlayerListitemValue(playerid, i, biz_id-1);
						}
						Dialog
						(
							playerid, DIALOG_GANG_BIZ, DIALOG_STYLE_LIST,
							"{FFCD00}Бизнесы банды",
							string_dialog,
							"Выбрать", "Закрыть"
						);
						cache_delete(result);
                    }
                    case 5: ViewFamilyCar(playerid);
                    case 6: ShowInfoGangSklad(playerid);
                    case 7:
                    {
                        if(GetPlayerData(playerid, P_FAMILY_RANK) == 10)
                        {
							Dialog
							(
								playerid, DIALOG_GANG_RANG, DIALOG_STYLE_LIST,
								"{FFCD00}Настройка рангов",
								"1. Настройка склада<n>2. Настройка названий рангов",
								"Выбрать", "Закрыть"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "*Данное меню вам не доступно");
                    }
	           	}
            }
			case DIALOG_GANG_SK_EDIT:
			{
			    if(!response) return 1;
                new fam_id = GetPlayerData(playerid, P_FAMILY);
                switch(listitem)
                {
                    case 0:
                    {
						string_dialog[0] = EOS;
						new fmt_text[144];
					    format(fmt_text, sizeof fmt_text, "1. %s<n>",GetFamilyData(fam_id, F_RANK1));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "2. %s<n>",GetFamilyData(fam_id, F_RANK2));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "3. %s<n>",GetFamilyData(fam_id, F_RANK3));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "4. %s<n>",GetFamilyData(fam_id, F_RANK4));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "5. %s<n>",GetFamilyData(fam_id, F_RANK5));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "6. %s<n>",GetFamilyData(fam_id, F_RANK6));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "7. %s<n>",GetFamilyData(fam_id, F_RANK7));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "8. %s<n>",GetFamilyData(fam_id, F_RANK8));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "9. %s<n>",GetFamilyData(fam_id, F_RANK9));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "10. %s<n>",GetFamilyData(fam_id, F_RANK10));
						strcat(string_dialog, fmt_text);
						Dialog
						(
							playerid, DIALOG_GANG_SK_EDIT_1, DIALOG_STYLE_LIST,
							"{FFCD00}Выберите ранг для изменения",
							string_dialog,
							"Выбрать", "Закрыть"
						);
                    }
                    case 1:
                    {
						string_dialog[0] = EOS;
						new fmt_text[144];
					    format(fmt_text, sizeof fmt_text, "1. %s<n>",GetFamilyData(fam_id, F_RANK1));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "2. %s<n>",GetFamilyData(fam_id, F_RANK2));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "3. %s<n>",GetFamilyData(fam_id, F_RANK3));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "4. %s<n>",GetFamilyData(fam_id, F_RANK4));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "5. %s<n>",GetFamilyData(fam_id, F_RANK5));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "6. %s<n>",GetFamilyData(fam_id, F_RANK6));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "7. %s<n>",GetFamilyData(fam_id, F_RANK7));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "8. %s<n>",GetFamilyData(fam_id, F_RANK8));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "9. %s<n>",GetFamilyData(fam_id, F_RANK9));
					    strcat(string_dialog, fmt_text);
					    format(fmt_text, sizeof fmt_text, "10. %s<n>",GetFamilyData(fam_id, F_RANK10));
						strcat(string_dialog, fmt_text);
						Dialog
						(
							playerid, DIALOG_GANG_SK_EDIT_2, DIALOG_STYLE_LIST,
							"{FFCD00}Выберите ранг для изменения",
							string_dialog,
							"Выбрать", "Закрыть"
						);
                    }
               	}
			}
            case DIALOG_GANG_RANG:
            {
                if(!response) return 1;
                if(GetPlayerData(playerid, P_FAMILY_RANK) == 10)
                {
                    new fam_id = GetPlayerData(playerid, P_FAMILY);
                    switch(listitem)
	                {
	                    case 0:
	                    {
							Dialog
							(
								playerid, DIALOG_GANG_SK_EDIT, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите предмет который хотите настроить",
								"1. Деньги<n> 2. Оружие",
								"Выбрать", "Закрыть"
							);
	                    }
	                    case 1:
	                    {
							string_dialog[0] = EOS;
							new fmt_text[144];
						    format(fmt_text, sizeof fmt_text, "1. %s<n>",GetFamilyData(fam_id, F_RANK1));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "2. %s<n>",GetFamilyData(fam_id, F_RANK2));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "3. %s<n>",GetFamilyData(fam_id, F_RANK3));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "4. %s<n>",GetFamilyData(fam_id, F_RANK4));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "5. %s<n>",GetFamilyData(fam_id, F_RANK5));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "6. %s<n>",GetFamilyData(fam_id, F_RANK6));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "7. %s<n>",GetFamilyData(fam_id, F_RANK7));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "8. %s<n>",GetFamilyData(fam_id, F_RANK8));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "9. %s<n>",GetFamilyData(fam_id, F_RANK9));
						    strcat(string_dialog, fmt_text);
						    format(fmt_text, sizeof fmt_text, "10. %s<n>",GetFamilyData(fam_id, F_RANK10));
							strcat(string_dialog, fmt_text);
							Dialog
							(
								playerid, DIALOG_GANG_RANG_EDIT, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите ранг для изменения",
								string_dialog,
								"Выбрать", "Закрыть"
							);
	                    }
	               }
                }
				else SendClientMessage(playerid, 0xCECECEFF, "*Данное меню вам не доступно");
            }
            case DIALOG_GANG_SK_EDIT_1:
            {
			    if(response)
                {
                    SetPVarInt(playerid, "listitems",listitem);
					Dialog(playerid, DIALOG_GANG_SK_EDIT_3, DIALOG_STYLE_INPUT, "{FFCD00}Настройка рангов", "{FFFFFF}Введите кол-во патрон который сможет брать данный ранг:", "Приять", "Назад");
                }
            }
            case DIALOG_GANG_SK_EDIT_2:
            {
			    if(response)
                {
                    SetPVarInt(playerid, "listitems",listitem);
                 	Dialog(playerid, DIALOG_GANG_SK_EDIT_4, DIALOG_STYLE_INPUT, "{FFCD00}Настройка рангов", "{FFFFFF}Введите кол-во денег который сможет брать данный ранг:", "Приять", "Назад");
                }
            }
			case DIALOG_GANG_RANG_EDIT:
			{
			    if(response)
                {
                    SetPVarInt(playerid, "listitems",listitem);
	                Dialog(playerid, DIALOG_GANG_RANG_EDIT_1, DIALOG_STYLE_INPUT, "{FFCD00}Настройка рангов", "{FFFFFF}Введите название ранга которое хотите поставить:", "Приять", "Назад");
                }
			}
			case DIALOG_GANG_SK_EDIT_3:
			{
			    if(!response) return 1;
			    new put_sum = strval(inputtext);
			    if(!(100 <= put_sum <= 50000000)) return SendClientMessage(playerid, 0xCECECEFF, "Кол-во денег от 100 до 50.000.000");
			    new fam_id = GetPlayerData(playerid, P_FAMILY);
			    listitem = GetPVarInt(playerid, "listitems");
			    F_RANK_MON[fam_id][listitem] = put_sum;
			    new query[144];
			 	format(query, sizeof query, "UPDATE family SET mon_rank%d=%d WHERE id=%d LIMIT 1",listitem+1,F_RANK_MON[fam_id][listitem], g_family[fam_id][F_SQL_ID]);
				mysql_query(mysql, query, false);
			    SendClientMessage(playerid, 0xCECECEFF, "Вы успешно изменили кол-во денег, которое может брать данный ранг!");
			}
			case DIALOG_GANG_SK_EDIT_4:
			{
			    if(!response) return 1;
			    new put_sum = strval(inputtext);
			    if(!(10 <= put_sum <= 500)) return SendClientMessage(playerid, 0xCECECEFF, "Кол-во патрон от 100 до 500");
			    new fam_id = GetPlayerData(playerid, P_FAMILY);
			    listitem = GetPVarInt(playerid, "listitems");
			    F_RANK_PAT[fam_id][listitem] = put_sum;
				new query[144];
			 	format(query, sizeof query, "UPDATE family SET pat_rank%d=%d WHERE id=%d LIMIT 1",listitem+1,F_RANK_PAT[fam_id][listitem], g_family[fam_id][F_SQL_ID]);
				mysql_query(mysql, query, false);
			    SendClientMessage(playerid, 0xCECECEFF, "Вы успешно изменили кол-во патрон, которое может брать данный ранг!");
			}
			case DIALOG_GANG_RANG_EDIT_1:
			{
			    if(response)
                {
                    if(!(5 <= strlen(inputtext) <= 30)) return SendClientMessage(playerid, 0xCECECEFF, "Кол-во символов от 5 до 30");
                    new fam_id = GetPlayerData(playerid, P_FAMILY);
					listitem = GetPVarInt(playerid, "listitems");
                    if(listitem == 0)format(GetFamilyData(fam_id, F_RANK1), 31, "%s", inputtext);
                    if(listitem == 1)format(GetFamilyData(fam_id, F_RANK2), 31, "%s", inputtext);
                    if(listitem == 2)format(GetFamilyData(fam_id, F_RANK3), 31, "%s", inputtext);
                    if(listitem == 3)format(GetFamilyData(fam_id, F_RANK4), 31, "%s", inputtext);
                    if(listitem == 4)format(GetFamilyData(fam_id, F_RANK5), 31, "%s", inputtext);
                    if(listitem == 5)format(GetFamilyData(fam_id, F_RANK6), 31, "%s", inputtext);
                    if(listitem == 6)format(GetFamilyData(fam_id, F_RANK7), 31, "%s", inputtext);
                    if(listitem == 7)format(GetFamilyData(fam_id, F_RANK8), 31, "%s", inputtext);
                    if(listitem == 8)format(GetFamilyData(fam_id, F_RANK9), 31, "%s", inputtext);
					if(listitem == 9)format(GetFamilyData(fam_id, F_RANK10), 31, "%s", inputtext);
                    new query[255];
                    format(query, sizeof query, "UPDATE family SET rank1='%s', rank2='%s' WHERE id=%d LIMIT 1",
					GetFamilyData(fam_id, F_RANK1),GetFamilyData(fam_id, F_RANK2), g_family[fam_id][F_SQL_ID]);
					mysql_query(mysql, query, false);
					format(query, sizeof query, "UPDATE family SET rank3='%s', rank4='%s' WHERE id=%d LIMIT 1",
					GetFamilyData(fam_id, F_RANK3),GetFamilyData(fam_id, F_RANK4), g_family[fam_id][F_SQL_ID]);
					mysql_query(mysql, query, false);
					format(query, sizeof query, "UPDATE family SET rank5='%s', rank6='%s' WHERE id=%d LIMIT 1",
					GetFamilyData(fam_id, F_RANK5),GetFamilyData(fam_id, F_RANK6), g_family[fam_id][F_SQL_ID]);
					mysql_query(mysql, query, false);
					format(query, sizeof query, "UPDATE family SET rank7='%s',rank8='%s' WHERE id=%d LIMIT 1",
					GetFamilyData(fam_id, F_RANK7),GetFamilyData(fam_id, F_RANK8), g_family[fam_id][F_SQL_ID]);
					mysql_query(mysql, query, false);
					format(query, sizeof query, "UPDATE family SET rank9='%s', rank10='%s' WHERE id=%d LIMIT 1",
					GetFamilyData(fam_id, F_RANK9),GetFamilyData(fam_id, F_RANK10), g_family[fam_id][F_SQL_ID]);
					mysql_query(mysql, query, false);
                    SendClientMessage(playerid, 0xCECECEFF, "Вы успешно изменили название ранга!");
                }
			}
			case DIALOG_FAMILY_PL:
			{
                if(!response) return 1;
                if(GetPlayerData(playerid, P_FAMILY_RANK) < 9) return SendClientMessage(playerid, 0xCECECEFF, "*Данное меню вам не доступно");
				new idx = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "listitem_fam", listitem);
				SetPVarInt(playerid, "acc_id", idx);
				new query[144],
					Cache: result,
					rows;
				mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id='%d'", idx);
				result = mysql_query(mysql, query);
				rows = cache_num_rows();
				for(new i = 0; i < rows; i++)
				{
					new name[21];
					new namerank[20];
					new rank = cache_get_field_content_int(i, "family_rank");
					new fam_id = cache_get_field_content_int(i, "family");
				    if(rank == 1) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK1));
				    if(rank == 2) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK2));
				    if(rank == 3) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK3));
				    if(rank == 4) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK4));
				    if(rank == 5) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK5));
				    if(rank == 6) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK6));
				    if(rank == 7) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK7));
				    if(rank == 8) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK8));
				    if(rank == 9) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK9));
				    if(rank == 10) format(namerank, sizeof namerank, "%s",GetFamilyData(fam_id, F_RANK10));
					cache_get_field_content(i, "name", name);
					format(query, sizeof query, "{FFFFFF}Игрок: %s<n>Положение: %s",  name, namerank);
				}
				cache_delete(result);
				Dialog(playerid, DIALOG_FAMILY_PLA, DIALOG_STYLE_MSGBOX, "{FFCD00}Состав семьи", query, "Выгнать", "Отмена");
			}
			case DIALOG_FAMILY_PLA:
			{
			    if(!response) return 1;
			    if(GetPlayerData(playerid, P_FAMILY_RANK) < 9) return SendClientMessage(playerid, 0xCECECEFF, "*Данное меню вам не доступно");
			    new id = GetPVarInt(playerid, "acc_id");
			    new fmt_str[144],Cache: result;
				mysql_format(mysql, fmt_str, sizeof fmt_str, "SELECT * FROM accounts WHERE id='%d'", id);
				result = mysql_query(mysql, fmt_str);
				new rows = cache_num_rows();
				for(new i = 0; i < rows; i++)
				{
				    new rank = cache_get_field_content_int(i, "family_rank");
				    if(GetPlayerData(playerid, P_FAMILY_RANK) == rank)
				    {
				        return SendClientMessage(playerid, 0xCECECEFF, "*Вы не можете выгнать данного человека!");
				    }
				    if(rank == 10)
				    {
				        return SendClientMessage(playerid, 0xCECECEFF, "*Вы не можете выгнать данного человека!");
				    }
				}
			 	format(fmt_str, sizeof fmt_str, "UPDATE accounts SET family=0,family_rank=0 WHERE id=%d LIMIT 1", id);
    			mysql_query(mysql, fmt_str, false);
    			cache_delete(result);
				foreach(new i: Player)
				{
					if(!IsPlayerConnected(i)) continue;
					if(!IsPlayerLogged(i)) continue;
					if(GetPlayerData(i, P_FAMILY) == 0) continue;
					if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;
					if(id == GetPlayerAccountID(i))
					{
					    SetPlayerData(i, P_FAMILY,0);
					    SetPlayerData(i, P_FAMILY_RANK,0);
						DestroyDynamic3DTextLabel(g_player[i][P_FAM_LABEL]);
						g_player[i][P_FAM_LABEL] = Text3D: -1;
						SetPlayerColorEx(i, GetPlayerTeamColor(i));
					}
				}
			}
            case DIALOG_FAMILY_BANK_PUT:
            {
                if(response)
                {
	                new put_sum = strval(inputtext);
	                if(put_sum > 0 && IsNumeric(inputtext))
	                {
	                    new fmt_str[155];
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), put_sum))
	                    {
	                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.money=%s,f.money=f.money + %d WHERE a.id=%d AND f.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), -put_sum), put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
	                        mysql_query(mysql, fmt_str, false);
	                        if(!mysql_errno())
	                        {
	                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY, +, put_sum);
	                            GivePlayerMoneyEx(playerid, -put_sum, "Пополнение банка семьи", false, true);
	                            new fmt_msg[144];
	                            format(fmt_msg, sizeof fmt_msg, "<%s> %s[%d] пополнил бюджет семьи на %d руб. Бюджет %d руб.", GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME), GetPlayerNameEx(playerid), playerid, put_sum,GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY));
								foreach(new i: Player)
								{
									if(!IsPlayerConnected(i)) continue;
									if(!IsPlayerLogged(i)) continue;
									if(GetPlayerData(i, P_FAMILY) == 0) continue;
									if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;
									SendClientMessage(i, 0xFF4D18FF, fmt_msg);
								}
	                        }
	                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
	                    }
	                    else SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств");
	                }
                }
                else Dialog(playerid, DIALOG_FAMILY_BANK, DIALOG_STYLE_LIST, "{FFCD00}Бюджет семьи", "1. Пополнить<n>2. Снять<n>3. История", "Принять", "Отмена");
            }
            case DIALOG_FAMILY_BANK_PICK:
            {
                if(response)
                {
	                new put_sum = strval(inputtext);
	                if(put_sum > 0 && IsNumeric(inputtext))
	                {
	                    new fmt_str[155];
	                    if(GetPlayerData(playerid, P_FAMILY) >= put_sum)
	                    {
	                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.money=%s,f.money=f.money + %d WHERE a.id=%d AND f.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), put_sum), -put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
	                        mysql_query(mysql, fmt_str, false);
	                        if(!mysql_errno())
	                        {
	                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY, -, put_sum);
	                            GivePlayerMoneyEx(playerid, put_sum, "снятие с банка семьи", false, true);
	                            new fmt_msg[144];
	                            format(fmt_msg, sizeof fmt_msg, "<%s> %s[%d] снял с бюджета семьи на %d руб. Бюджет %d руб.", GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME), GetPlayerNameEx(playerid), playerid, put_sum,GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY));
								foreach(new i: Player)
								{
									if(!IsPlayerConnected(i)) continue;
									if(!IsPlayerLogged(i)) continue;
									if(GetPlayerData(i, P_FAMILY) == 0) continue;
									if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;
									if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;
									SendClientMessage(i, 0xFF4D18FF, fmt_msg);
								}
	                        }
	                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
	                    }
	                    else SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств на счете семьи");
	                }
                }
                else Dialog(playerid, DIALOG_FAMILY_BANK, DIALOG_STYLE_LIST, "{FFCD00}Бюджет семьи", "1. Пополнить<n>2. Снять<n>3. История", "Принять", "Отмена");
            }
            case DIALOG_FAMILY_BANK:
            {
                if(response)
                {
                    switch(listitem)
                    {
                        case 0:
                        {
                            Dialog(playerid, DIALOG_FAMILY_BANK_PUT, DIALOG_STYLE_INPUT, "{FFCD00}Бюджет семьи", "{FFFFFF}Введите количество, которое хотите положить:", "Приять", "Назад");
                        }
                        case 1:
                        {
                            new fmt_texts[144];
                            format(fmt_texts, sizeof fmt_texts, "{FFFFFF}Доступно: {FFCD00}%d руб.<n><n>{FFFFFF}Введите количество, которое хотите снять:",GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY));
                            Dialog(playerid, DIALOG_FAMILY_BANK_PICK, DIALOG_STYLE_INPUT, "{FFCD00}Бюджет семьи", fmt_texts, "Приять", "Назад");
                        }
                        case 2:
                        {
                        }
                    }
                }
                else callcmd::fmenu(playerid, "");
            }
            case DIALOG_FAMILY_LEAVE:
            {
                new fmt_text[110];
                if(response)
                {
                    new fam_id = GetPlayerData(playerid, P_FAMILY);
                    format(fmt_text, sizeof fmt_text, "<%s> %s[%d]: покинул семью по собственному желанию",
                    GetFamilyData(fam_id, F_NAME), GetPlayerNameEx(playerid), playerid);
                    foreach(new i: Player)
                    {
                        if(!IsPlayerConnected(i)) continue;
                        if(!IsPlayerLogged(i)) continue;
                        if(GetPlayerData(i, P_FAMILY) == 0) continue;
                        if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;
                        if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;
                        SendClientMessage(i, 0xCECECEFF, fmt_text);
                    }
                    format(fmt_text, sizeof fmt_text, "Вы покинули семью \"%s\"", GetFamilyData(fam_id, F_NAME));
                    SendClientMessage(playerid, 0xFFFF00FF, fmt_text);
                    FUnInvite(playerid, playerid);
                }
            }
            case DIALOG_FAMILY_RANG:
            {
                if(!response) return callcmd::fmenu(playerid, "");
                new fam_id = GetPlayerData(playerid, P_FAMILY),
                    desc[32] = "";
                switch(listitem)
                {
                    case 0: strcat(desc, g_family[fam_id][F_RANK1]);
                    case 1: strcat(desc, g_family[fam_id][F_RANK2]);
                    case 2: strcat(desc, g_family[fam_id][F_RANK3]);
                    case 3: strcat(desc, g_family[fam_id][F_RANK4]);
                    case 4: strcat(desc, g_family[fam_id][F_RANK5]);
                    case 5: strcat(desc, g_family[fam_id][F_RANK6]);
                    case 6: strcat(desc, g_family[fam_id][F_RANK7]);
                    case 7: strcat(desc, g_family[fam_id][F_RANK8]);
                    case 8: strcat(desc, g_family[fam_id][F_RANK9]);
                    case 9: strcat(desc, g_family[fam_id][F_RANK10]);
                }
                SetPVarInt(playerid, "userang", listitem+1);
                Dialog
                (
                    playerid, DIALOG_FAMILY_RCHANGE, DIALOG_STYLE_INPUT,
                    desc,
                    "{FFFFFF}Введите название, которое Вы хотите {d8284c}установить:",
                    "Далее", "Отмена"
                );
            }
			case DIALOG_OWNABLE_HOME_FAMILY:
			{
				new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				SetPVarInt(playerid, "ownablehouse_id", idx);
				new houseids = GetPVarInt(playerid, "ownablehouse_id");
				if(g_family[GetPlayerFamily(playerid)][F_GANG] == 1)
				{
					new fmt_text[144];
					new fam_id = GetPlayerData(playerid, P_FAMILY);
					SetFamilyData(fam_id, F_HOUSE_ID, houseids);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET house_id=%d WHERE id='%d' LIMIT 1", houseids, fam_id);
					mysql_query(mysql, fmt_text, false);
					format(fmt_text, sizeof fmt_text, "<%s> База банды теперь находится в доме №%d", GetFamilyData(fam_id, F_NAME), GetFamilyData(fam_id, F_HOUSE_ID));
					foreach(new i: Player)
					{
						if(!IsPlayerConnected(i)) continue;
						if(!IsPlayerLogged(i)) continue;
						if(GetPlayerData(i, P_FAMILY) == 0) continue;
						if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;
						if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;
						SendClientMessage(playerid, 0xFF9C18FF, fmt_text);
					}
					new houseid = GetFamilyData(fam_id, F_HOUSE_ID);
					new type = GetHouseData(houseid, H_TYPE);
					DestroyPickup(gangsklads[fam_id]);
					if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
					gangsklads[fam_id] = CreatePickup(1239, 23, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_SKLAD);
					SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z) + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));
					CallLocalFunction("UpdateGangSklad", "i", fam_id);
				}
			}
            case DIALOG_FAMILY_RCHANGE:
            {
                if(!response) return callcmd::fmenu(playerid, "");
                new fmt_text[556],
                    rang_id = GetPVarInt(playerid, "userang"),
                    fam_id = GetPlayerData(playerid, P_FAMILY);
                switch(rang_id)
                {
                    case 1:
                    {
                        format(g_family[fam_id][F_RANK1], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank1='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 2:
                    {
                        format(g_family[fam_id][F_RANK2], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank2='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 3:
                    {
                        format(g_family[fam_id][F_RANK3], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank3='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 4:
                    {
                        format(g_family[fam_id][F_RANK4], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank4='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 5:
                    {
                        format(g_family[fam_id][F_RANK5], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank5='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 6:
                    {
                        format(g_family[fam_id][F_RANK6], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank6='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 7:
                    {
                        format(g_family[fam_id][F_RANK7], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank7='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 8:
                    {
                        format(g_family[fam_id][F_RANK8], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank8='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 9:
                    {
                        format(g_family[fam_id][F_RANK9], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank9='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 10:
                    {
                        format(g_family[fam_id][F_RANK10], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank10='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                }
                format(fmt_text, sizeof fmt_text, "Вы успешно изменили название ранга {d8284c}№%d {1E90FF}на {d8284c}\"%s\"", rang_id, inputtext);
                SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
            }
            case DIALOG_FAMILY_CAR_ADD:
            {
            	if(response)
				{
					if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
					if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа");
					if(!IsPlayerInAnyVehicle(playerid))
						return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");
					new vehicleid = GetPlayerVehicleID(playerid);
					new query[144];
					new vehicleid1 = GetPlayerOwnableCarLast(playerid);
					if(vehicleid1 != GetPlayerVehicleID(playerid))
					return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
					new idx = GetVehicleData(vehicleid, V_ACTION_ID);
					SetOwnableCarData(idx, OC_FAM_CAR, GetPlayerData(playerid, P_FAMILY));
					SetOwnableCarData(idx, OC_FAM_CAR_RANK, 1);
					mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET famcar=%d, famcarrank=%d WHERE id=%d", GetOwnableCarData(idx, OC_FAM_CAR),GetOwnableCarData(idx, OC_FAM_CAR_RANK), GetOwnableCarData(idx, OC_SQL_ID));
					mysql_query(mysql, query, false);
					new color = family_color_car[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)][0];
					ChangeVehicleColor(vehicleid, color, color);
					SendClientMessage(playerid, 0xCECECEFF, "Вы успешно добавили свой транспорт себе в семью!");
				}
            }
            case DIALOG_FAMILY_CAR_REMOVE:
            {
            	if(response)
				{
					if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
					if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа");
					if(!IsPlayerInAnyVehicle(playerid))
						return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");
					new vehicleid = GetPlayerVehicleID(playerid);
					new query[144];
					new vehicleid1 = GetPlayerOwnableCarLast(playerid);
					if(vehicleid1 != GetPlayerVehicleID(playerid))
					return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
					new idx = GetVehicleData(vehicleid, V_ACTION_ID);
					SetOwnableCarData(idx, OC_FAM_CAR, 0);
					SetOwnableCarData(idx, OC_FAM_CAR_RANK, 0);
					mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET famcar=%d, famcarrank=%d WHERE id=%d", GetOwnableCarData(idx, OC_FAM_CAR),GetOwnableCarData(idx, OC_FAM_CAR_RANK), GetOwnableCarData(idx, OC_SQL_ID));
					mysql_query(mysql, query, false);
					ChangeVehicleColor(vehicleid, GetOwnableCarData(idx, OC_COLOR_1), GetOwnableCarData(idx, OC_COLOR_2));
					SendClientMessage(playerid, 0xCECECEFF, "Вы успешно убрали свой транспорт со своей семьи!");
				}
			}
			case DIALOG_FAMILY_DELL:
			{
			    if(!response) return 1;
				new fam_id = GetPlayerData(playerid, P_FAMILY),
					query[80];
				format(query, sizeof query, "UPDATE family SET u_id=-1,name='delete' WHERE id=%d LIMIT 1", g_family[fam_id][F_SQL_ID]);
				mysql_query(mysql, query, false);
				DestroyPickup(gangsklads[fam_id]);
				if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
				foreach(new i : Player)
				{
					if(!IsPlayerConnected(i)) continue;
					else if(!IsPlayerLogged(i)) continue;
					if(GetPlayerData(i, P_FAMILY) == GetPlayerData(playerid, P_FAMILY))
					{
						DestroyDynamic3DTextLabel(g_player[i][P_FAM_LABEL]);
						SetPlayerColorEx(i, GetPlayerTeamColor(i));
						SCMF(i, 0x1E90FFFF, "Внимание! Владелец удалил семью %s, в которой вы состоите", GetFamilyData(fam_id, F_NAME));
						SetPlayerData(i, P_FAMILY,0);
						SetPlayerData(i, P_FAMILY_RANK,0);
				        format(query, sizeof query, "UPDATE accounts SET family=%d,family_rank=%d WHERE id=%d",GetPlayerData(i, P_FAMILY), GetPlayerData(i, P_FAMILY_RANK), GetPlayerAccountID(i));
				        mysql_query(mysql, query, false);
					}
				}
			}
			case DIALOG_OWNABLE_CAR_FAMILY:
			{
			    if(response)
				{
					new vehicleid = INVALID_VEHICLE_ID;
					new idx = GetPVarInt(playerid, "ownablecar_id");
	                for(new i = 0; i < MAX_VEHICLES; i++)
					{
					    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FAMILY_CAR)
					    {
						    new iddx = GetVehicleData(i, V_ACTION_ID);
					        if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
					        {
					            vehicleid = i;
					        }
				        }
					}
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						switch(listitem + 1)
						{
						    case 1:
						    {
								if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
								{
									if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 300))
									{
										GivePlayerMoneyEx(playerid, -300, "Метка ТС на GPS", true, true);
										new Float: x, Float: y, Float: z;
										GetVehiclePos(vehicleid, x, y, z);
										EnablePlayerGPS(playerid, 55, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
										return 1;
									}
									else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
						    }
							case 2: // Открыть / закрыть
							{
								if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 1000))
								{
									SetPVarInt(playerid, "go_list", 1);
									SetVehicleToRespawn(vehicleid);
									GivePlayerMoneyEx(playerid, -1000, "респавн тс семьи", true, true);
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
							case 3: // Выгрузить транспорт
							{
								if(UnloadFamilyOwnableCar(vehicleid))
									SendClientMessage(playerid, 0x66CC33FF, "Транспорт успешно выгружен!");
							}
							case 4: // Выгрузить транспорт
							{
								SetPVarInt(playerid, "veh_id", vehicleid);
								Dialog
								(
									playerid, DIALOG_FAMILT_CAR_RANK, DIALOG_STYLE_INPUT,
									"Изменение доступа ранга траспорта банды",
									"{FFFFFF} Введите какой хотите поставить ранг у траспорта\n\
									Доступный ранг, который можно поставить от 1 до 9",
									"Поставить", "Назад"
								);
							}
						}
					}
				}
			}
			case DIALOG_FAM_CAR_LIST:
			{
				if(response)
				{
					new idx = GetPlayerListitemValue(playerid, listitem);
					SetPVarInt(playerid, "listitem_car", listitem);
					new Cache: result;
					new famid = GetPlayerData(playerid, P_FAMILY);
					SetPVarInt(playerid, "ownablecar_id", idx);
					new veh_id = INVALID_VEHICLE_ID;
					for(new i = 0; i < MAX_VEHICLES; i++)
					{
						if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FAMILY_CAR)
						{
							new iddx = GetVehicleData(i, V_ACTION_ID);
							if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
							{
								veh_id = i;
							}
						}
					}
					if(veh_id == INVALID_VEHICLE_ID)
					{
						if(LoadFamilyCar(famid,idx) != -1)
						{
							SendClientMessage(playerid, 0x66CC33FF, "Данный траспорт успешно загружен!");
							SendClientMessage(playerid, -1, "Чтобы открыть данный транспорт пропишите: /lock 4.");
						}
						else SendClientMessage(playerid, 0x999999FF, "Ошибка при загрузке транспорта семьи");
					}
					else
					{
						ShowOwnableCarFamilyLoadDialog(playerid, idx, true);
					}
					cache_delete(result);
				}
			}
			case DIALOG_FAMILT_CAR_RANK:
			{
			    if(response)
				{
				    new rang = strval(inputtext);
				    if(1 <= rang <= 9)
				    {
	        			new query[100];
	                    new vehicleid = GetPVarInt(playerid, "veh_id"), index = GetVehicleData(vehicleid, V_ACTION_ID);
	                    SetOwnableCarData(index, OC_RANG, rang);
	                    mysql_format(mysql, query, sizeof query, "UPDATE family_cars SET rang = '%d' WHERE id='%d'",rang, GetOwnableCarData(index, OC_SQL_ID));
	                    mysql_query(mysql, query, false);
	                    SendClientMessage(playerid, -1, "Вы успешно изменили ранг-доступ данному трансопрту");
	               	}
	               	else
	               	{
	               	    SendClientMessage(playerid, -1, "Допустимый ранг от 1 до 9!");
						Dialog
						(
							playerid, DIALOG_FAMILT_CAR_RANK, DIALOG_STYLE_INPUT,
							"Изменение доступа ранга траспорта банды",
							"{FFFFFF} Введите какой хотите поставить ранг у траспорта\n\
							Доступный ранг, который можно поставить от 1 до 9",
							"Поставить", "Назад"
						);
	               	}
				}
			}
			case DIALOG_GANG_CAR_ADD:
		{
			if(response)
			{
				new vehicleid = GetPlayerOwnableCarLast(playerid);
				new fam_id = GetPlayerData(playerid,P_FAMILY);
				new Cache: result;
				str_q[0] = EOS;
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new Float: x,Float: y,Float: z,Float: angle;
				GetVehiclePos(vehicleid, x, y, z); // узнаем координаты авто
				GetVehicleZAngle(vehicleid, angle);
				mysql_format(mysql, str_q, sizeof str_q, "DELETE FROM ownable_cars WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, str_q, false);
				format
				(
					str_q, sizeof str_q,
					"INSERT INTO family_cars \
					(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time,diski,gidra,mileage,iznos,gryaz,vinil,typenumber,number,region,obves,tonerinstall) \
					VALUES \
					('%d','%d','%d','%d','%f','%f','%f','%f','%d','%d','%d','%f','%d','%f','%d','%d','%s','%s','%s','%d')",
					fam_id,
					GetOwnableCarData(index, OC_MODEL_ID),
					GetOwnableCarData(index, OC_COLOR_1),
					GetOwnableCarData(index, OC_COLOR_2),
					x,
					y,
					z,
					angle,
					gettime(),
					GetOwnableCarData(index, OC_DISKI),
					GetOwnableCarData(index, OC_GIDRA),
					GetVehicleData(vehicleid, V_MILEAGE),
					GetVehicleData(vehicleid, V_IZNOS),
					GetVehicleData(vehicleid, V_GRYAZ),
					GetOwnableCarData(index, OC_VINIL),
					GetOwnableCarData(index, OC_NUMBERTYPE),
					GetOwnableCarData(index, OC_NUMBER),
					GetOwnableCarData(index, OC_REGION),
					GetOwnableCarData(index, OC_OBVES),
					GetOwnableCarData(index, OC_TONERINSTALL)
				);
				result = mysql_query(mysql, str_q, true);
				cache_delete(result);
				SendClientMessage(playerid, 0x66CC00FF, "Вы успешно отдали данный транспорт в использование свой банды.");
				SetOwnableCarData(index, OC_CREATE, 0);
				DestroyVehicleLabel(vehicleid);
				DestroyVehicle(vehicleid);
				SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);
			}
		}
		case DIALOG_GANG_CAR_DELL:
		{
			if(response)
			{
				new vehicleid = GetFamilyOwnableCarLast(playerid,GetPlayerData(playerid, P_FAMILY));
				new Cache: result;
				str_q[0] = EOS;
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new Float: x,Float: y,Float: z,Float: angle;
				GetVehiclePos(vehicleid, x, y, z); // узнаем координаты авто
				GetVehicleZAngle(vehicleid, angle);
				mysql_format(mysql, str_q, sizeof str_q, "DELETE FROM family_cars WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, str_q, false);
				format
				(
					str_q, sizeof str_q,
					"INSERT INTO ownable_cars \
					(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time,diski,gidra,vinil,typenumber,number,region,obves,tonerinstall) \
					VALUES \
					('%d','%d','%d','%d','%f','%f','%f','%f','%d','%d','%d','%d','%d','%s','%s','%s','%d')",
					GetPlayerAccountID(playerid),
					GetOwnableCarData(index, OC_MODEL_ID),
					GetOwnableCarData(index, OC_COLOR_1),
					GetOwnableCarData(index, OC_COLOR_2),
					x,
					y,
					z,
					angle,
					gettime(),
					GetOwnableCarData(index, OC_DISKI),
					GetOwnableCarData(index, OC_GIDRA),
					GetOwnableCarData(index, OC_VINIL),
					GetOwnableCarData(index, OC_NUMBERTYPE),
					GetOwnableCarData(index, OC_NUMBER),
					GetOwnableCarData(index, OC_REGION),
					GetOwnableCarData(index, OC_OBVES),
					GetOwnableCarData(index, OC_TONERINSTALL)
				);
				result = mysql_query(mysql, str_q, true);
				cache_delete(result);
				SendClientMessage(playerid, 0x66CC00FF, "Вы успешно забрали данный транспорт со своей банды.");
				SetOwnableCarData(index, OC_OWNER_ID, 0);
				DestroyVehicleLabel(vehicleid);
				DestroyVehicle(vehicleid);
				SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);
			}
		}
		case DIALOG_CASE_TWO:
		{
			if(!response) return 1;
			GameText(playerid, "~o~Успешно", 3000, 2);
			new random_case = RandomEx(1,10);
			switch(random_case)
			{
				case 1: GiveIteam(playerid, 258, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Форсаж`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 2: GiveIteam(playerid, 261, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Темные дела`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 3: GiveIteam(playerid, 272, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Велесова ночь`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 4: GiveIteam(playerid, 278, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Оперской`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 5: GiveIteam(playerid, 284, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Новогодний`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 6: GiveIteam(playerid, 290, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Черное золото`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 7: GiveIteam(playerid, 300, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Охотничий`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 8: GiveIteam(playerid, 328, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Египетская сила`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 9: GiveIteam(playerid, 344, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Велесова ночь 2`{4169e1}, взаимодействовать с ним можно через инвентарь");
				case 10: GiveIteam(playerid, 348, 1, 1, 0), SCM(playerid, -1, "{4169e1}Вы успешно получили кейс {FFFFFF}`Рождественский Экспресс`{4169e1}, взаимодействовать с ним можно через инвентарь");
			}
		}
		case DIALOG_KEY_ONE:
		{
			if(!response) return 1;
			GiveIteam(playerid, 259, 1, 1, 0);
			GameText(playerid, "~o~Успешно", 3000, 2);
			SCM(playerid, -1, "{4169e1}Вы успешно получили {FFFFFF}`Ключ от кейса`{4169e1}, взаимодействовать с ним можно через инвентарь");
		}
		case DIALOG_FREE_HEAL:
		{
			if(response)
			{
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 2000000)) return SendClientMessage(playerid, 0xFF6600FF, "Медицинская помощь стоит 2.000.000 рублей");
				{
					GivePlayerMoneyEx(playerid, -2000000, "Медицинская помощь");
					SetPlayerData(playerid, P_HEALTH, 70.0);
					SetPlayerHealthEx(playerid, 70.0);
					GameText(playerid, "~b~+70 здоровья", 4000, 2);
					ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 0);
					return 1;
				}
			}
			}
			case DIALOG_KEYSN: if(response) GiveIteam(playerid, 284, 1, 1, 0);
			case DIALOG_KEYST: if(response) GiveIteam(playerid, 261, 1, 1, 0);
			case DIALOG_SELL_MYSTALL:
			{
			    new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			    new businessid = idx;
			    new Float: g_pos_x = GetKioskData(businessid, K_POS_X);
				new Float: g_pos_y = GetKioskData(businessid, K_POS_Y);
				new Float: g_pos_z = GetKioskData(businessid, K_POS_Z);
				if(!(IsPlayerInRangeOfPoint(playerid, 7.0, g_pos_x, g_pos_y, g_pos_z) && IsPlayerInRangeOfPoint(GetPVarInt(playerid, "to_player"), 7.0, g_pos_x, g_pos_y, g_pos_z)))
					return SendClientMessage(playerid, 0xFF6600FF, "Вы и покупатель должны находиться рядом с киоском который хотите продать");
			    SendPlayerOffer(playerid, GetPVarInt(playerid, "to_player"), OFFER_TYPE_SELL_KIOSK, businessid, GetPVarInt(playerid, "price"));
			}
			case DIALOG_SELL_ITEM_ACCEPT:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new item_id = GetPVarInt(playerid, "SellItem");
				new count = GetPVarInt(playerid, "SellItemCount");
				new price = GetPVarInt(playerid, "SellItemPrice");
				new query[512];
				mysql_format(mysql, query, sizeof query, "INSERT INTO kiosks_items (kiosk_id, item_id, owner_id, name, count, price) VALUES (%d, %d, %d, '%s', %d, %d)", GetKioskData(kiosk_id, K_SQL_ID), item_id, GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), count, price);
				mysql_query(mysql, query, false);
				GiveIteam(playerid, item_id, 0, count, 0, "Выставил предмет в киоск");
				SCM(playerid, 0xADCEEAFF, "Вы успешно выставили предмет на продажу");
			}
			case DIALOG_SELL_NUMBER_ACCEPT:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new slot = GetPVarInt(playerid, "SellItemSlot");
				new type = GetPVarInt(playerid, "SellItemType");
				new price = GetPVarInt(playerid, "SellItemPrice");
				new query[512], number[32], region[32], typenumber;
				for(new i; i < MAX_PLAYER_ITEMS; i++)
				{
					if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
					if(GetPlayerItem(i, PI_TYPE) != type) continue;
					format(number, 32, "%s", GetPlayerItem(i, PI_NUMBER));
					format(region, 32, "%s", GetPlayerItem(i, PI_REGION));
					typenumber = GetPlayerItem(i, PI_TYPENUMBER);
					mysql_format(mysql, query, sizeof query, "INSERT INTO kiosks_items (kiosk_id, item_id, owner_id, name, count, price, number, region, typenumber, aks_id, typeacs, indx, skin_id, item_type) VALUES (%d, 0, %d, '%s', 1, %d, '%s', '%s', %d, 0, 0, 0, 0, 1)",
					GetKioskData(kiosk_id, K_SQL_ID), GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), price, number, region, typenumber);
					mysql_query(mysql, query, false);
					mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE slots=%d AND type=%d AND owner_id=%d LIMIT 1", slot, type, GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
					DeleteItems(i);
					SCM(playerid, 0xADCEEAFF, "Вы успешно выставили автомобильный номер на продажу");
					return 1;
				}
			}
			case DIALOG_SELL_ACS_ACCEPT:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new slot = GetPVarInt(playerid, "SellItemSlot");
				new type = GetPVarInt(playerid, "SellItemType");
				new price = GetPVarInt(playerid, "SellItemPrice");
				new query[512], indx, aks_id, typeacs, status;
				for(new i; i < MAX_PLAYER_ITEMS; i++)
				{
					if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
					if(GetPlayerItem(i, PI_TYPE) != type) continue;
					typeacs = GetPlayerItem(i, PI_TYPEACS);
					aks_id = GetPlayerItem(i, PI_AKS_ID);
					indx = GetPlayerItem(i, PI_INDX);
					status = GetPlayerItem(i, PI_STATUS);
					if(status == 0)
					{
						mysql_format(mysql, query, sizeof query, "INSERT INTO kiosks_items (kiosk_id, item_id, owner_id, name, count, price, aks_id, typeacs, indx, skin_id, item_type) VALUES (%d, 0, %d, '%s', 1, %d, %d, %d, %d, 0, 2)",
						GetKioskData(kiosk_id, K_SQL_ID), GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), price, aks_id, typeacs, indx);
						mysql_query(mysql, query, false);
						mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE slots=%d AND type=%d AND owner_id=%d LIMIT 1", slot, type, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
						SCM(playerid, 0xADCEEAFF, "Вы успешно выставили аксессуар на продажу");
						DeleteItems(i);
					}
					else if(status == 1)
					{
						SCM(playerid, 0xADCEEAFF, "Для того чтобы продать аксессуар, нужно его снять");
					}
					return 1;
				}
			}
			case DIALOG_SELL_SKIN_ACCEPT:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new slot = GetPVarInt(playerid, "SellItemSlot");
				new type = GetPVarInt(playerid, "SellItemType");
				new price = GetPVarInt(playerid, "SellItemPrice");
				new query[512], skin_id;
				for(new i; i < MAX_PLAYER_ITEMS; i++)
				{
					if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
					if(GetPlayerItem(i, PI_TYPE) != type) continue;
					skin_id = GetPlayerItem(i, PI_SKIN_ID);
					if(GetPlayerSkin(playerid) == skin_id) SetPlayerSkin(playerid, 252);
					mysql_format(mysql, query, sizeof query, "INSERT INTO kiosks_items (kiosk_id, item_id, owner_id, name, count, price, skin_id, item_type) VALUES (%d, 0, %d, '%s', 1, %d, %d, 3)",
					GetKioskData(kiosk_id, K_SQL_ID), GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), price, skin_id);
					mysql_query(mysql, query, false);
					mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE slots=%d AND type=%d AND owner_id=%d LIMIT 1", slot, type, GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
					DeleteItems(i);
					SCM(playerid, 0xADCEEAFF, "Вы успешно выставили свою одежду на продажу");
					return 1;
				}
			}
			case DIALOG_STALL_BUY_ITEM_ACCEPT:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new item_id = GetPVarInt(playerid, "item_id");
				new price = GetPVarInt(playerid, "price");
				new count = GetPVarInt(playerid, "count");
				new count1 = GetPVarInt(playerid, "count1"); // сколько есть в бд
				new owner_id = GetPVarInt(playerid, "owner_id");
				new id = GetPVarInt(playerid, "id");
				if(GetStallItemsId(id) == -1) return SCM(playerid, COLOR_BLUENEW, "Данный предемет был продан или снят с продажи.");
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SCM(playerid, 0xADCEEAFF, "У вас недостаточно средств.");
				GivePlayerMoneyEx(playerid, -price, "Покупка предмета в киоске");
				format(g_kiosk[kiosk_id][K_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_kiosk[kiosk_id][K_BALANCE], (price / 100) * GetKioskData(kiosk_id, K_NALOG)));
                new fmt_str_st[512];
				mysql_format(mysql, fmt_str_st, sizeof fmt_str_st, "UPDATE kiosk SET balance=%s WHERE id=%d", GetKioskData(kiosk_id, K_BALANCE),GetKioskData(kiosk_id, K_SQL_ID));
				mysql_query(mysql, fmt_str_st, false);
				GiveIteam(playerid, item_id, 1, count, 0);
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Stall");
				if(count1 - count != 0)
				{
					new query[512];
					format(query, sizeof query, "UPDATE kiosks_items SET count=%d WHERE id=%d LIMIT 1", count1 - count, id);
					mysql_query(mysql, query, false);
				}
				else
				{
					new query[512];
					mysql_format(mysql, query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", id);
					mysql_query(mysql, query, false);
				}
				new to_player = GetPlayerIDBySqlID(owner_id);
				if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
				{
					GivePlayerMoneyEx(to_player, price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), "продажа предмета в киоске");
					SCM(to_player, 0xADCEEAFF, "Ваш предмет в киоске приобрели.");
				}
				else
				{
					new fmt_str[512];
					format(fmt_str, sizeof fmt_str, "UPDATE accounts SET bank = bank + %d WHERE id=%d LIMIT 1", price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), owner_id);
					mysql_query(mysql, fmt_str, false);
				}
			}
			case DIALOG_STALL_BUY_ITEM:
			{
				if(!response) return 1;
				new count = strval(inputtext);
				new item_id = GetPVarInt(playerid, "item_id");
				new price = GetPVarInt(playerid, "price");
				new have_count = GetPVarInt(playerid, "count");
				new id = GetPVarInt(playerid, "id");
				new str_c[268];
				if(GetStallItemsId(id) == -1) return SCM(playerid, COLOR_BLUENEW, "Данный предемет был продан или снят с продажи.");
				if(count < 1) return SCM(playerid, 0xADCEEAFF, "Нкорректное количество товара.");
				if(count > have_count) return SCM(playerid, 0xADCEEAFF, "В этом киоске нет этого товара в таком количестве.");
				if(count > 25) return SCM(playerid, COLOR_RED, "За раз можно купить до 25 вещей!"), DLGF(playerid, DIALOG_STALL_BUY_ITEM, DIALOG_STYLE_INPUT, "Покупка предмета", "{FFFFFF}Сколько вы желаете приобрести?\nНа продаже: {006400}%d {FFFFFF}ед.", "Далее", "Назад", count);
				new sellprice = price * count;
				SetPVarInt(playerid, "price", sellprice);
				SetPVarInt(playerid, "count", count);
				format(str_c, sizeof str_c, "{FFFFFF}Товар: {FECC00}'%s'\n{FFFFFF}Количество: {FECC00}%d\n{FFFFFF}Стоимость: {FECC00}%d руб.", ItemsInfo[item_id][i_item_name], count, sellprice);
				Dialog(playerid, DIALOG_STALL_BUY_ITEM_ACCEPT, DIALOG_STYLE_MSGBOX, "Желаете приобрести?", str_c, "Да", "Нет");
			}
			case DIALOG_SET_ELECT:
			{
				if(!response) return 1;
				SCM(playerid, 0xADCEEAFF, "{4aba16}Вы успешно переоделись в рабочую одежду");
				SCM(playerid, 0xADCEEAFF, "{FFFFFF}Садитесь в рабочий транспорт, чтобы начать работу {ffa500}электриком");
				SetPVarInt(playerid, "Electrickrabota", 1);
			}
			case DIALOG_SET_ELECT2:
			{
				if(!response) return 1;
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 1500)) return SendClientMessage(playerid, 0xFF6600FF, " У вас недостаточно денег");
				GivePlayerMoneyEx(playerid, -1500, "", true, true);
				SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу электрика {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
			}
			case DIALOG_SET_NALOG:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new nalog = strval(inputtext);
				new query[512];
				if(nalog < 1) return SCM(playerid, 0xCECECEFF, "* Налог не должен быть меньше 1 процента.");
				if(nalog > 25) return SCM(playerid, 0xCECECEFF, "* Налог не должен превышать 25 процентов.");
				mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET nalog=%d WHERE id=%d", nalog, GetKioskData(kiosk_id, K_SQL_ID));
				mysql_query(mysql, query, false);
				SetKioskData(kiosk_id, K_NALOG, nalog);
				SCMF(playerid, 0xADCEEAFF, "Вы успешно поставили налог в {FFFFFF}%d процентов", nalog);
			}
			case DIALOG_REMOVE_OWNED_ITEM:
			{
				if(!response) return 1;
				new item_id = GetPVarInt(playerid, "item_id");
				new count = GetPVarInt(playerid, "count");
				new query[512];
				GiveIteam(playerid, item_id, 1, count, 0);
				SCM(playerid, 0xADCEEAFF, "Вы сняли ваш предмет с продажи.");
				mysql_format(mysql, query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", GetPVarInt(playerid, "id"));
				mysql_query(mysql, query, false);
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Stall");
			}
			case DIALOG_REMOVE_STALL_ITEM:
			{
				if(!response) return DeletePVar(playerid, "RemoveItem");
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new item_id = GetPVarInt(playerid, "RemoveItem");
				new query[264], 
					number[32], 
					region[32], 
					Cache:result;
				SCM(playerid, 0xADCEEAFF, "Вы сняли предмет с продажи");
				format(query, sizeof query, "SELECT * FROM kiosks_items WHERE kiosk_id=%d AND id=%d", kiosk_id, GetPVarInt(playerid, "ItemSQLid"));
				result = mysql_query(mysql, query, true);
				cache_get_field_content(0, "region", region);
				cache_get_field_content(0, "number", number);
				new owner_id = cache_get_field_content_int(0, "owner_id");
				new count = cache_get_field_content_int(0, "count");
				new typenumber = cache_get_field_content_int(0, "typenumber");
				new aks_id = cache_get_field_content_int(0, "aks_id");
				new typeacs = cache_get_field_content_int(0, "typeacs");
				new indx = cache_get_field_content_int(0, "indx");
				new skin_id = cache_get_field_content_int(0, "skin_id");
				new item_type = cache_get_field_content_int(0, "item_type");
				new player = GetPlayerIDBySqlID(owner_id);
				cache_delete(result);
				if(IsPlayerConnected(player) && IsPlayerLogged(player))
				{
					SCM(player, 0xABCDEFFF, "Пока вы находились вне игры, вам вернули товары из киоска, используйте {FFFFFF}/return_items {ABCDEF}чтобы забрать их.");
					if(item_type == 0) GiveIteam(player, item_id, 1, count, 0);
					if(item_type == 1)
					{
						CreateItemsCarNumber(GetPlayerAccountID(player), 1, -1, -1, number, region, typenumber, -1, -1, 0, 1);
					}
					if(item_type == 2)
					{
						CreateItemsAcs(GetPlayerAccountID(player), 1, -1, -1, aks_id, typeacs, 0, indx, -1, -1, 0, 2);
					}
					if(item_type == 3)
					{
						CreateItemsSkin(GetPlayerAccountID(player), 1, -1, -1, skin_id, 0, -1, -1, 0, 3);
					}
				}
				else
				{
					if(item_type == 1)
					{
						CreateItemsCarNumber(owner_id, 1, -1, -1, number, region, typenumber, -1, -1, 0, 1);
					}
					if(item_type == 2)
					{
						CreateItemsAcs(owner_id, 1, -1, -1, aks_id, typeacs, 0, indx, -1, -1, 0, 2);
					}
					if(item_type == 3)
					{
						CreateItemsSkin(owner_id, 1, -1, -1, skin_id, 0, -1, -1, 0, 3);
					}
				}
				format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", GetPVarInt(playerid, "ItemSQLid"));
				mysql_query(mysql, query, false);
				DeletePVar(playerid, "RemoveItem");
				DeletePVar(playerid, "ItemSQLid");
			}
			case DIALOG_BUY_STALL:
			{
				if(!response) return 1;
				new kiosk_id = GetPVarInt(playerid, "buy_stall");
				if((GetPlayerOwnableKiosk(playerid) + 1) > GetPlayerKioskSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество бизнес компаний.");
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), GetKioskData(kiosk_id, K_PRICE))) return SCM(playerid, -1, "*Недостаточно средств.");
				new query[512];
				//SetPlayerData(playerid, P_KIOSK, kiosk_id);
				//UpdatePlayerDatabaseInt(playerid, "kiosk", kiosk_id);
				SetKioskData(kiosk_id, K_OWNER_ID, GetPlayerAccountID(playerid));
				mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET owner_id=%d WHERE id=%d", GetPlayerAccountID(playerid), GetKioskData(kiosk_id, K_SQL_ID));
				mysql_query(mysql, query, false);
				GivePlayerMoneyEx(playerid, -GetKioskData(kiosk_id, K_PRICE));
				SCMF(playerid, 0x499E3DFF, "Поздравляем! {FFFFFF}Вы успешно приобрели киоск {499E3D}№%d {FFFFFF}за {499E3D}%d руб.", kiosk_id, GetKioskData(kiosk_id, K_PRICE));
				SCM(playerid, 0xADCEEAFF, "Если вы хотите изменить название киоска, воспользуйтесь командой {FFFFFF}/changestallname");
				SCM(playerid, 0xADCEEAFF, "Если вы захотите продать киоск, воспользуйтесь командой {FFFFFF}/sellstall");
				SCM(playerid, 0xADCEEAFF, "Для управления киоском подойдите к нему и нажмите клавишу {FFFFFF}ALT");
				SCM(playerid, 0xADCEEAFF, "Не забывайте регулярно проводить уборку в киоске, иначе он может ломаться и потеряет улучшения.");
			}
			case 0:
			{
				switch(listitem)
				{
				}
				return 1;
			}
			case DIALOG_CREATE_GUN:
			{
				if(response)
				{
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SendClientMessage(playerid, 0xFF6600FF, "* У вас недостаточно денег для крафта");
					if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xFF6600FF, "* Крафтить АК-47 можно со 2 лвла");
					{
					    SetPVarInt(playerid, "ak47", 1);
						GivePlayerMoneyEx(playerid, -100000, "Крафт оружия", true, true);
                        BitStream_2(playerid, s_CefInterface, t_CefShow, "WeaponAssembly", "[2]");
                        GameText(playerid, "~r~~h~Cоберите АК-47", 3000, 1);
			            return 1;
					}
                }
			}
			case DIALOG_CREATE_GUN1:
			{
				if(response)
				{
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SendClientMessage(playerid, 0xFF6600FF, "* У вас недостаточно денег для крафта");
					if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xFF6600FF, "* Крафтить Deagle можно со 2 лвла");
					{
					    SetPVarInt(playerid, "deagle", 1);
						GivePlayerMoneyEx(playerid, -100000, "Крафт оружия", true, true);
                        BitStream_2(playerid, s_CefInterface, t_CefShow, "WeaponAssembly", "[0]");
                        GameText(playerid, "~r~~h~Cоберите Deagle", 3000, 1);
			            return 1;
					}
                }
			}
			case DIALOG_CREATE_GUN2:
			{
				if(response)
				{
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SendClientMessage(playerid, 0xFF6600FF, "* У вас недостаточно денег для крафта");
					if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xFF6600FF, "* Крафтить M4 можно со 2 лвла");
					{
					    SetPVarInt(playerid, "m4", 1);
						GivePlayerMoneyEx(playerid, -100000, "Крафт оружия", true, true);
                        BitStream_2(playerid, s_CefInterface, t_CefShow, "WeaponAssembly", "[1]");
                        GameText(playerid, "~r~~h~Cоберите M4", 3000, 1);
			            return 1;
					}
                }
			}
			case DIALOG_CREATE_GUN3:
			{
				if(response)
				{
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SendClientMessage(playerid, 0xFF6600FF, "* У вас недостаточно денег для крафта");
					if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xFF6600FF, "* Крафтить Shotgun можно со 2 лвла");
					{
					    SetPVarInt(playerid, "shotgun", 1);
						GivePlayerMoneyEx(playerid, -100000, "Крафт оружия", true, true);
                        BitStream_2(playerid, s_CefInterface, t_CefShow, "WeaponAssembly", "[3]");
                        GameText(playerid, "~r~~h~Cоберите Shotgun", 3000, 1);
			            return 1;
					}
                }
			}
			case DIALOG_ANTISKLAD:
			{
			}
			case DIALOG_VARKA_DRUGS:
			{
			    if(response)
			    {
			        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000)) return SendClientMessage(playerid, 0xFF6600FF, "* У вас недостаточно денег для варки");
			        if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xFF6600FF, "* Варить наркотики можно со 2 лвла");
					{
						GivePlayerMoneyEx(playerid, -100000, "Варка наркотиков", true, true);
						new drugs = RandomEx(5, 70);
						switch(drugs)
						{
							case 5..20: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[0]");
							case 21..32: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[1]");
							case 33..40: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[2]");
							case 41..47: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[3]");
							case 48..60: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[4]");
							case 61..70: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[5]");
							case 71..87: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[0]");
							case 88..99: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[1]");
							case 100..111: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[2]");
							case 112..120: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[3]");
							case 121..140: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[4]");
							case 141..148: BitStream_2(playerid, s_CefInterface, t_CefShow, "Drugs", "[5]");
						}
						GiveIteam(playerid, 25, 1, 10, 0);
                        GameText(playerid, "~r~~h~Сварите наркотики", 3000, 1);
			            return 1;
					}
				}
			}
			case DIALOG_STAGES_1:
			{
				if(response)
				{
		    		new vehicleid = GetPlayerVehicleID(playerid);
		    		if(IsValidDynamicObject(EditStage1Player[vehicleid])) DestroyDynamicObject(EditStage1Player[vehicleid]);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		    	    new fmt_text[144];
		    	    SetOwnableCarData(index, OC_STAGE1, 0);
					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) - 10.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) - 20.0);
					UpdateVehicleHandling(playerid, vehicleid);
		    	    SetOwnableCarData(index, OC_STAGE, 0);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage1=0, stage=0 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
					GivePlayerMoneyEx(playerid, 1500000);
				}
				else
				{
   					SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
					SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
				}
		    }
		    case DIALOG_STAGES_1_1:
			{
				if(response)
				{
		    		new vehicleid = GetPlayerVehicleID(playerid);
		    		if(IsValidDynamicObject(EditStage1_1Player[vehicleid])) DestroyDynamicObject(EditStage1_1Player[vehicleid]);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		    	    new fmt_text[144];
		    	    SetOwnableCarData(index, OC_STAGE1_1, 0);
					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) - 15.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) - 30.0);
					UpdateVehicleHandling(playerid, vehicleid);
		    	    SetOwnableCarData(index, OC_STAGE, 1);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage1_1=0, stage=1 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
					GivePlayerMoneyEx(playerid, 2000000);
				}
				else
				{
   					SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
					SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
				}
		    }
		    case DIALOG_STAGES_2:
			{
				if(response)
				{
		    		new vehicleid = GetPlayerVehicleID(playerid);
		    		if(IsValidDynamicObject(EditStage2Player[vehicleid])) DestroyDynamicObject(EditStage2Player[vehicleid]);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		    	    new fmt_text[144];
		    	    SetOwnableCarData(index, OC_STAGE2, 0);
					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) - 25.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) - 40.0);
					UpdateVehicleHandling(playerid, vehicleid);
		    	    SetOwnableCarData(index, OC_STAGE, 2);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage2=0, stage=2 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
					GivePlayerMoneyEx(playerid, 10000000);
				}
				else
				{
   					SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
					SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
				}
		    }
		    case DIALOG_STAGES_3:
			{
				if(response)
				{
		    		new vehicleid = GetPlayerVehicleID(playerid);
		    		if(IsValidDynamicObject(EditStage3Player[vehicleid])) DestroyDynamicObject(EditStage3Player[vehicleid]);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		    	    new fmt_text[144];
		    	    SetOwnableCarData(index, OC_STAGE3, 0);
		    	    SetOwnableCarData(index, OC_STAGE, 3);
					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) - 25.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) - 50.0);
					UpdateVehicleHandling(playerid, vehicleid);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage3=0, stage=3 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
					GivePlayerMoneyEx(playerid, 20000000);
				}
				else
				{
   					SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
					SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
				}
		    }
   			case DIALOG_STAGE_1:
			{
				if(response)
				{
				    new Float: x, Float: y, Float: z;
				    new vehicleid = GetPlayerVehicleID(playerid);
				    new idx = GetVehicleData(vehicleid, V_ACTION_ID);
				    GetVehiclePos(vehicleid, x,y,z);
					switch(listitem + 1)
					{
						case 1,2,5,7:
						{
							string_dialog[0] = EOS;
							format(string_dialog, sizeof string_dialog,
							"{E4E4DF}Деталь \t{E4E4DF}Статус \t{E4E4DF}Стоимость \n\n\n{F6B243}Комплект STAGE 1 \n{E4E4DF}Радиатор \t%s \t{91D643}3.000.000 руб\n{E4E4DF}Выхлоп \t%s \t{91D643}4.000.000 руб\n\n\n{946A1F}Комплект STAGE 2 \n{5C5D5C}Турбина \t%s \t{55703F}20.000.000 руб\n\n\n{946A1F}Комплект STAGE 3 \n{5C5D5C}Нагнетатель \t%s \t{55703F}40.000.000 руб\n",
							GetOwnableCarData(idx, OC_STAGE1) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
							GetOwnableCarData(idx, OC_STAGE1_1) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
							GetOwnableCarData(idx, OC_STAGE2) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
							GetOwnableCarData(idx, OC_STAGE3) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено")
							);
							Dialog(playerid, DIALOG_STAGE_1, DIALOG_STYLE_LIST, "{F6CC3F}Элементы установки", string_dialog, "Выбор", "Отмена");
						}
					    case 3:
					    {
							if(stagestats[playerid] == 1)
							{
						        if(GetOwnableCarData(idx, OC_STAGE1) == 1)
						        {
									Dialog
									(
									    playerid, DIALOG_STAGES_1, 0,
									    "{F6CC3F}Элементы установки",
									    "{E4E4DF}Вы действительно хотите снять компонент STAGE 1 'Радиатор'<n>\
										Вам будет возвращено: 1.500.000 рублей",
									    "Выбор", "Отмена"
									);
						        }
						        else
								{
		                            if(IsValidDynamicObject(EditStage1_1Player[vehicleid])) DestroyDynamicObject(EditStage1_1Player[vehicleid]);
							        SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
									SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
									EditStage1Player[vehicleid] = CreateDynamicObject(10443, x, y, z,   0.00000, 0.00000, 180.00000);
									SetPVarInt(playerid, "stage_edit_1", 1);
									SetPVarInt(playerid, "model_id", 10443);
									EditDynamicObject(playerid, EditStage1Player[vehicleid]);
								}
				            }
					    }
					    case 4:
					    {
					    	if(stagestats[playerid] == 1)
							{
						        if(GetOwnableCarData(idx, OC_STAGE1_1) == 1)
						        {
									Dialog
									(
									    playerid, DIALOG_STAGES_1_1, 0,
									    "{F6CC3F}Элементы установки",
									    "{E4E4DF}Вы действительно хотите снять компонент STAGE 1 'Выхлоп'<n>\
										Вам будет возвращено: 2.000.000 рублей",
									    "Выбор", "Отмена"
									);
						        }
								else
								{
							        if(GetOwnableCarData(idx, OC_STAGE1) == 1)
							        {
								        if(IsValidDynamicObject(EditStage1_1Player[vehicleid])) DestroyDynamicObject(EditStage1_1Player[vehicleid]);
										SetPlayerCameraPos(playerid,2337.7588,-2617.0513,1003.1210);
										SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
										EditStage1_1Player[vehicleid] = CreateDynamicObject(10442, x, y, z,   0.00000, 0.00000, 180.00000);
										SetPVarInt(playerid, "stage_edit_1_1", 1);
										SetPVarInt(playerid, "model_id", 10442);
										EditDynamicObject(playerid, EditStage1_1Player[vehicleid]);
									}
								}
							}
					    }
					    case 6:
					    {
					    	if(stagestats[playerid] == 2)
							{
						    	if(GetOwnableCarData(idx, OC_STAGE2) == 1)
						        {
						        	Dialog
									(
									    playerid, DIALOG_STAGES_2, 0,
									    "{F6CC3F}Элементы установки",
									    "{E4E4DF}Вы действительно хотите снять компонент STAGE 2 'Турбина'<n>\
										Вам будет возвращено: 10.000.000 рублей",
									    "Выбор", "Отмена"
									);
						        }
								else
						        {
							    	if(GetOwnableCarData(idx, OC_STAGE1) == 1 && GetOwnableCarData(idx, OC_STAGE1_1) == 1)
							        {
								        if(IsValidDynamicObject(EditStage2Player[vehicleid])) DestroyDynamicObject(EditStage2Player[vehicleid]);
										SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
										SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
										EditStage2Player[vehicleid] = CreateDynamicObject(10445, x, y, z,   0.00000, 0.00000, 180.00000);
										SetPVarInt(playerid, "stage_edit_2", 1);
										SetPVarInt(playerid, "model_id", 10445);
										EditDynamicObject(playerid, EditStage2Player[vehicleid]);
									}
					            }
					       	}
					    }
					    case 8:
					    {
					    	if(stagestats[playerid] == 3)
							{
						    	if(GetOwnableCarData(idx, OC_STAGE3) == 1)
						        {
						        	Dialog
									(
									    playerid, DIALOG_STAGES_3, 0,
									    "{F6CC3F}Элементы установки",
									    "{E4E4DF}Вы действительно хотите снять компонент STAGE 3 'Нагнетатель'<n>\
										Вам будет возвращено: 20.000.000 рублей",
									    "Выбор", "Отмена"
									);
						        }
								else
						        {
							        if(GetOwnableCarData(idx, OC_STAGE1) == 1 && GetOwnableCarData(idx, OC_STAGE1_1) == 1 && GetOwnableCarData(idx, OC_STAGE2) == 1)
							        {
								        if(IsValidDynamicObject(EditStage3Player[vehicleid])) DestroyDynamicObject(EditStage3Player[vehicleid]);
										SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
										SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
										EditStage3Player[vehicleid] = CreateDynamicObject(10444, x, y, z,   0.00000, 0.00000, 180.00000);
										SetPVarInt(playerid, "stage_edit_3", 1);
										SetPVarInt(playerid, "model_id", 10444);
										EditDynamicObject(playerid, EditStage3Player[vehicleid]);
									}
					            }
					       	}
					    }
					}
				}
			}
			case DIALOG_OWNABLE_BIZ_OPLATA:
			{
				if(response)
				{
				    new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				    SetPVarInt(playerid, "ownablebiz_id", idx);
				    ShowPlayerBusinessPayForRent(playerid);
				}
			}
			case DIALOG_OWNABLE_KIOSK_OPLATA:
			{
				if(response)
				{
				    new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				    SetPVarInt(playerid, "ownablekiosk_id", idx);
				    ShowPlayerKioskPayForRent(playerid);
				}
			}
         case DIALOG_GARDEN_SELL:
			{
				new garden = GetPVarInt(playerid, "garden_id");
				if(garden != -1)
				{
					if(response)
					{
						SellGarden(playerid,garden);
					}
				}
			}
			case DIALOG_RULLET_SHOW:
			{
				if(!response) return 1;
				if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.4474,-302.4741,1012.0385))
				{
					RouletteTable[playerid] = 1;
					InterpolateCameraPos(playerid, 226.078033, -302.750885, 1011.523315, 225.375091, -302.632354, 1013.522888, 1000);
					InterpolateCameraLookAt(playerid, 221.130889, -302.555145, 1010.825195, 221.801132, -302.647369, 1010.026245, 1000);
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.1531,-296.3004,1012.0284))
				{
					RouletteTable[playerid] = 2;
					InterpolateCameraPos(playerid, 226.246841, -296.717224, 1011.795837, 225.492965, -296.621063, 1013.492187, 1000);
					InterpolateCameraLookAt(playerid, 221.296600, -296.629730, 1011.097717, 221.715301, -296.595642, 1010.216735, 1000);
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.7382,-296.5287,1012.0684))
				{
					RouletteTable[playerid] = 3;
					InterpolateCameraPos(playerid, 205.489654, -296.730712, 1011.446472, 205.750213, -296.680328, 1013.723571, 1000);
					InterpolateCameraLookAt(playerid, 210.484100, -296.722320, 1011.210998, 209.323822, -296.732971, 1010.226928, 1000);
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.9463,-303.3881,1012.0385))
				{
					RouletteTable[playerid] = 4;
					InterpolateCameraPos(playerid, 204.530761, -303.071838, 1011.295043, 205.576446, -303.171691, 1013.490661, 1000);
					InterpolateCameraLookAt(playerid, 209.524154, -303.174743, 1011.059570, 209.493804, -303.188140, 1010.383544, 1000);
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, 191.6914,-293.2050,1012.8684))
				{
					RouletteTable[playerid] = 5;
					InterpolateCameraPos(playerid, 191.356338, -296.251281, 1012.188903, 191.293655, -295.537445, 1014.428344, 1000);  //
					InterpolateCameraLookAt(playerid, 191.410964, -291.255920, 1011.980712, 191.314788, -291.671630, 1011.257385, 1000);
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, 201.4565,-331.6115,1012.0385))
				{
					RouletteTable[playerid] = 6;
					InterpolateCameraPos(playerid, 204.557525, -331.987152, 1011.129333, 203.738037, -331.871582, 1013.848327, 1000);
					InterpolateCameraLookAt(playerid, 199.560974, -331.924133, 1011.303894, 200.052810, -331.764617, 1010.470825, 1000);
				}
				RulletShow(playerid);
				return 1;
			}
			case DIALOG_MINER_BUY_METALL:
			{
				if(!response) return 1;
				if(strval(inputtext) < 1) return SCM(playerid, COLOR_GREY, "Некорректное количество."), ShowPlayerBuyMetalDialog(playerid);
				if(strval(inputtext) > 1000) return SCM(playerid, COLOR_GREY, "Можно купить от 1 до 1000 кг металла за раз."), ShowPlayerBuyMetalDialog(playerid);
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), strval(inputtext) * 500000)) return SCM(playerid, COLOR_GREY, "Недостаточно средств для покупки металла.");
				if(GetInventorySlots(playerid) == -1) return SCM(playerid, COLOR_GREY, "В вашем инвентаре нет свободного места"), ShowPlayerBuyMetalDialog(playerid);
				SCMF(playerid, 0x3584ccFF, "Вы купили %d кг за %s рублей", strval(inputtext), formatInt(strval(inputtext) * 500000));
				GivePlayerMoneyEx(playerid, -(strval(inputtext) * 500000), "Покупка металла");
				GiveIteam(playerid, 27, 1, strval(inputtext), 0);
			}
			case DIALOG_AHELP:
			{
				if(response)
				{
				    switch(listitem)
					{
						case 0:
						{
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды администратора 1 уровня",
							"{ffffff}Здесь отображены актуальные команды администратора: 1 {ffffff}уровня\n\n"\
							"/ahelp /log /sp /a /ytadmins /fixcar\n"\
							"/photo_screen /pos /tpk /uncuff /spoff /awarns /admins\n"\
                            "/add_tplist /alogin\n"\
							"/atinfo /pm /z /tplist /info",
		                    "Закрыть", "");
						}
						case 1:
						{
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды администратора 2 уровня",
							"{ffffff}Здесь отображены актуальные команды администратора: 2 {ffffff}уровня\n\n"\
							"/viplist /ytubers /offmute /stats /offstats /kick /mute /unmute /jaillist /setfuel\n"\
							"/getv /spawn /goto /getcar /hp /afly /down /fly /gotocar /jetpack /jail /unjail\n"\
							"/offjail /offunjail /rmute /unrmute /delveh /plveh /slap /voicemute /unvoicemute",
							"Закрыть", "");
						}
						case 2:
						{
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды администратора 3 уровня",
							"{ffffff}Здесь отображены актуальные команды администратора: 3 {ffffff}уровня\n\n"\
							"/skin /house /biz /spcar /rwc /gethere /sethunger /kazna_log /agivevb /findcar\n"\
							"/createorders /gotogarden /neft /stall /vipmute /unvipmute /alock\n"\
							"/set_iznos", 
							"Закрыть", "");
						}
						case 3:
						{
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды администратора 4 уровня", 
							"{ffffff}Здесь отображены актуальные команды администратора: 4 {ffffff}уровня\n\n"\
							"/hpall /msg /ears /mp_tp /setleader /auninvite /freeze /unfreeze /templeader /veh\n"\
							"/gotogarage /mp_gun /mp_skin /mp_freeze /mp_unfreeze /removegun /nokay /okay\n"\
							"/ban /unban /offwarn /warn /agm /mplist\n"\
							"{C77D87}/cc /changeinfo", 
							"Закрыть", "");
						}
						case 4:
						{
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды администратора 5 уровня",
							"{ffffff}Здесь указаны команды администратора: 5 {ffffff}уровня\n\n"\
							"/lip /amsg /settime /setweather /setskills /agivelic /setspeed /bank_log /yrangoff /unwarn /offban /offunwarn /ytlist\n"\
							"/adminlist /skick",
							"Закрыть", "");
						}
						case 5:
						{						
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды администратора 6 уровня",
							"{ffffff}Доступные команды администратора 6 {ffffff}уровня:\n\n"\
							"{ffffff}/getlog /bizinfo /money /inter /world /setprods /givegun /alldelveh /aefir /aedit /setfuels /pj /a_atinfo /a_tuning\n"\
							"{ffffff}/yrang /unbanip /banip /arangoff /sban /offawarn /awarn /unawarn /arang",
							"Закрыть", "");
						}
						case 6:
						{
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды администратора 7 уровня",
							"{ffffff}Здесь отображены актуальные команды администратора: 7 {ffffff}уровня\n\n"\
							"/hangl /dumpspawn /contspawn /setbizwar /faketext /info_work /give_work /givefstyle /payday /fullprods /spcars\n"\
							"/getname /money_log /houseinfo /setnakolka\n"\
							"/addsklad /fullsellall /set_car_market_all /set_car_market /offhardban /hardban /setmindostup\n"\
							"/givecar /giveitem /offban /add_rentveh /setvip /create_x2 /setstats\n"\
							"/auction_slot /addauctionlot /setprefix",
							"Закрыть", "");
						}
						case 7:
						{
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды администратора 8 уровня",
							"{ffffff}Доступные команды администратора 8 {ffffff}уровня:\n\n"\
							"{ffffff}/givemyskin /givemydonate /givemymoney /givekey /givecase /addmycar\n"\
							"{ffffff}/setbuyadmin /sellhotels /set_garage_pick /set_garage_exit /set_garage_car /giveacs\n"\
							"{ffffff}/news /info_world /delocar /add_pcar /dellmap /editmap /map /gzcolor\n"\
							"{ffffff}/zbtplayer /addzbtplayer /delzbtplayer /asellstall\n"\
							"{ffffff}/get_car_market /addcarsharing /sellslet /give_jticket\n"\
							"{ffffff}/setrates /addgarage /asellgarden /addgarden /addneft /kiosk_slot /mp_tg /give_paintball /ercs\n"\
							"{ffffff}/add_slot /addcar /giveskin /blackmarket /createcode", 
							"Закрыть", "");
						}
						case 8:
						{
							ShowPlayerDialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды спонсора 9 уровня",
							"{ffffff}Доступные команды спонсора 9 {ffffff}уровня:\n\n"\
							"{ffffff}/setvehnumber - Выдать номер на автомобиль\n"\
							"{ffffff}/givefish - Дать фишки игроку", 
							"Закрыть", "");
						}
						case 9:
						{
							ShowPlayerDialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды руководства 10 уровня",
							"{ffffff}Доступные команды для руководства 10 {ffffff}уровня:\n\n"\
							"{ffffff}/givedonateall - Выдать донат всем игрокам\n"\
							"{ffffff}/givecaseall - Выдать кейсы всем игрокам\n"\
							"{ffffff}/spawnugon - Заспавнить контракты\n"\
							"{ffffff}/carauction - Открыть аукцион автомобилей", 
							"Закрыть", "");
						}
						case 10:
						{
							ShowPlayerDialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды Основателя",
							"{ffffff}Доступные команды для Основателя 999 {ffffff}уровня:\n\n"\
							"{ffffff}/give_rub - Выдать рубли игроку\n"\
							"{ffffff}/omsg - Отправить сообщение ко всем игрокам\n"\
							"{ffffff}/setadmin - Установить административный уровень игроку\n"\
							"{ffffff}/infa - Получить информацию о сервере\n"\
							"{ffffff}/omenu - Открыть меню администратора\n"\
							"{ffffff}/asellhouse - Продать дом\n"\
							"{ffffff}/asellbiz - Продать бизнес\n"\
							"{ffffff}/asellgarage - Продать гараж\n"\
							"{ffffff}/add_accept - Принять заявку\n"\
							"{ffffff}/addbiz - Добавить бизнес\n"\
							"{ffffff}/b_set_pick - Установить точку для бизнеса\n"\
							"{ffffff}/b_set_exit_pos - Установить точку выхода для бизнеса\n"\
							"{ffffff}/b_set_pos - Установить позицию для бизнеса\n"\
							"{ffffff}/b_set_name - Установить название для бизнеса\n"\
							"{ffffff}/b_set_int - Установить интерьер для бизнеса\n"\
							"{ffffff}/set_pick - Установить точку сбора\n"\
							"{ffffff}/addhouse - Добавить дом\n"\
							"{ffffff}/setexitpos - Установить позицию выхода\n"\
							"{ffffff}/setcarpos - Установить позицию транспортного средства\n"\
							"{ffffff}/delocar - Забрать машину/удалить машину\n"\
							"{ffffff}/givesnow - Выдать снег\n"\
							"{ffffff}/spawnauction - ЗаSpawn'ить аукцион",
							"Закрыть", "");
						}
				    }
				}
			}
			case DIALOG_MVDPICKUP:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0:
						{
							new criminalid = playerid; 
							if (GetPlayerData(criminalid, P_SUSPECT) < 1)
							{
								return SendClientMessage(playerid, 0x999999FF, "У вас нет звёзд розыска");
							}
							JailPlayer(criminalid, GetPlayerSuspect(criminalid) * 10);
							SetPlayerData(criminalid, P_SUSPECT, 0);
							UpdatePlayerDatabaseInt(criminalid, "suspect", 0);
							SetPlayerSuspectInit(criminalid);							
						}
						case 1:
						{
							SendClientMessage(playerid, 0xAA3333AA, "У вас нет машины, которую можно объявить в розыск");
							return 1;
						}
						case 2:
						{
							if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "AllTickets"))) return SCM(playerid, 0xe2c977FF, "У вас недостаточно денег для оплаты всех штрафов.");
							GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "AllTickets"), "Оплата всех штрафов");
							SCMF(playerid, 0xFFFF00FF, "Вы успешно оплатили все свои штрафы {FFFFFF}%s {a6caf0}.", formatInt(GetPVarInt(playerid, "AllTickets")));
							Licencion(playerid);
							return 1;
						}						
					}
				}
			}
            case DIALOG_EXIT_METRO:
			{
			    if(response)
			    {
					if(GetPVarInt(playerid, "Metro_work") == 1)
					{
						metro_user -= 1;
						DisablePlayerRaceCheckpoint(playerid);
						DestroyVehicle(metro_train[playerid]);
						new fmt_str[130];
						format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы заработали %d руб.", metro_zarplata[playerid]);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);
						GivePlayerMoneyEx(playerid, metro_zarplata[playerid], "Работа метро", true, true);
						metro_train[playerid] = INVALID_VEHICLE_ID;
						metro_zarplata[playerid] = 0;
						BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('Machinist')");
						SetPlayerPos(playerid, 93.8737,812.0742,-30.5367);
						SetCameraBehindPlayer(playerid);
						OffFirstPerson(playerid);
						DeletePVar(playerid, "Metro_work");
					}
				}
			}
			case DIALOG_INVITE_METRO:
			{
			    if(response)
			    {
					if(metro_user >= 5) return SendClientMessage(playerid, 0x7f7f7fFF, "На маршруте нет свободных мест");
					if(metro_status == 1) return SendClientMessage(playerid, 0x7f7f7fFF, "В депо метрополитена нет мест,подождите пока займут электропоезд");
					SetPVarInt(playerid, "Metro_work",1);
					SetPVarInt(playerid, "Metro_start",1);
					metro_user += 1;
					metro_status = 1;
					metro_train[playerid] = AddStaticVehicleEx(537,-394.6066,475.2843,12.0387,90.0,17,17, -1); //поезд метро
					SetPlayerCheckpoint(playerid, -392.5566,482.6591,12.0604, 2.0, CP_ACTION_TYPE_PUT_TRAIN);
					SetVehicleParam(metro_train[playerid], V_ENGINE, VEHICLE_PARAM_ON);
				}
			}
            case DIALOG_DONATE_LEVEL:
			{
				if(response)
				{
      					new level = strval(inputtext);
						if(0 <= level <= 999 && IsNumeric(inputtext))
						{
						    if(GetPlayerCurrentDonate(playerid) < 50)
							{
							    new fmt_text[300];
								format(fmt_text, sizeof fmt_text, "Недостаточно средств.Сейчас на Вашем счету %d.00 руб", GetPlayerCurrentDonate(playerid));
								SendClientMessage(playerid, 0xFF6600FF, fmt_text);
								Dialog
								(
									playerid, DIALOG_DONATE_LEVEL, DIALOG_STYLE_INPUT,
									"Покупка игрового уровня",
									"{FFFFFF}Цена игрового уровня - 50 руб\n"\
									"Укажите уровень от 0 до 999",
									"Далее", "Отмена"
								);
								return 1;
							}
                            SetPlayerData(playerid, P_LEVEL, level);
							SetPlayerScore(playerid, level);
							new fmt_msg[128];
							mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE accounts SET level=%d WHERE id=%d", GetPlayerLevel(playerid),GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_msg, false);
							GivePlayerDonate(playerid, -25, "Покупка уровня", true, true);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_DONATE_LEVEL, DIALOG_STYLE_INPUT,
								"Покупка игрового уровня",
								"{FFFFFF}Цена игрового уровня - 50 руб\n"\
								"Укажите уровень от 0 до 999",
								"Далее", "Отмена"
							);
						}
				}
				else
				{
    			ShowPlayerDonateMenu(playerid);
				}
			}
			case DIALOG_ADMIN_CREATE:
		    {
                if(!response) return true;
		        if(response)
		        {
		            if(!(1 <= strlen(inputtext) <= 15) || strfind(inputtext, " ") != -1)
					{
						SendClientMessage(playerid, 0xFF6600FF, "Длина пароля должна быть от 6 до 15 символов");
						SendClientMessage(playerid, 0xFF6600FF, "Также не допускается использование пробелов");
					}
					else
					{
						if(!strcmp(g_player[playerid][P_PASSWORD], inputtext, true)) return SCM(playerid, COLOR_GREY, "Пароль от аккаунта и пароль от админ-прав должен различаться");
						new query[100];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET adminspasslogin='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
						if(!mysql_errno())
						{
							format(g_player[playerid][P_ADMIN_PASSWORD], 16, "%s", inputtext);
							format(query, sizeof query, "{99CC00}Ваш пароль: {FFFFFF}%s", GetPlayerData(playerid, P_ADMIN_PASSWORD));
							if(GetPlayerAdminEx(playerid) != 0)
							{
								format
								(
					                STRING_GLOBAL, sizeof STRING_GLOBAL,
									"{C3C3C3}<Alogin> вошел %s[%d] %d уровень",
									GetPlayerNameEx(playerid), playerid, GetPlayerAdminEx(playerid)
								);
							}
							if(GetPlayerYAdminEx(playerid) != 0)
							{
								format
								(
					                STRING_GLOBAL, sizeof STRING_GLOBAL,
									"[A]{FFFFFF} %s[%d] {99CC00}регистрируется в системе как ютубер %d уровня",
									GetPlayerNameEx(playerid), playerid, GetPlayerYAdminEx(playerid)
								);
							}
                            SendMessageToAdmins(STRING_GLOBAL, 0x99CC00FF);
							SendClientMessage(playerid, 0x99CC00FF, query);
							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 05)");
					}
		        }
		    }
			case DIALOG_ADMIN_CREATE_2:
		    {
                if(!response) return true;
				if(!(1 <= strlen(inputtext) <= 15) || strfind(inputtext, " ") != -1)
				{
					SendClientMessage(playerid, 0xFF6600FF, "Длина пароля должна быть от 6 до 15 символов");
					SendClientMessage(playerid, 0xFF6600FF, "Также не допускается использование пробелов");
					Dialog(playerid, DIALOG_ADMIN_CREATE_2, DIALOG_STYLE_PASSWORD,"{FFD83D}Система безопасности","{FFFFFF}Создайте свой личный пароль для авторизации как администратор","Далее", "Закрыть");
				}
				else
				{
					if(!strcmp(g_player[playerid][P_PASSWORD], inputtext, true)) 
					{
						Dialog(playerid, DIALOG_ADMIN_CREATE_2, DIALOG_STYLE_PASSWORD,"{FFD83D}Система безопасности","{FFFFFF}Создайте свой личный пароль для авторизации как администратор","Далее", "Закрыть");
						return SCM(playerid, COLOR_GREY, "Пароль от аккаунта и пароль от админ-прав должен различаться");
					}
					new query[100];
					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET adminspasslogin='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
					if(!mysql_errno())
					{
						format(g_player[playerid][P_ADMIN_PASSWORD], 16, "%s", inputtext);
						format(query, sizeof query, "{99CC00}Ваш пароль: {FFFFFF}%s", GetPlayerData(playerid, P_ADMIN_PASSWORD));
						if(GetPlayerAdminEx(playerid) != 0)
						{
							format
							(
								STRING_GLOBAL, sizeof STRING_GLOBAL,
								"{C3C3C3}<Alogin> вошел %s[%d] как администратор %d уровня",
								GetPlayerNameEx(playerid), playerid, GetPlayerAdminEx(playerid)
							);
						}
						SendMessageToAdmins(STRING_GLOBAL, 0x99CC00FF);
						SendClientMessage(playerid, 0x99CC00FF, query);
						Dialog(playerid, DIALOG_ADMIN_PASS_2, DIALOG_STYLE_PASSWORD,"{FFD83D}Система безопасности","Система безопасности запрашивает ввод пароля от админ-прав.\n\n{FFFFFF}Введите пароль:", "Далее", "Закрыть");
						return 1;
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 05)");
				}
		    }
			case DIALOG_ADMIN_PASS_2:
			{
                if(!response) return Kick(playerid);
				if(strlen(inputtext) && !strcmp(inputtext, g_player[playerid][P_ADMIN_PASSWORD], false))
				{
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{C3C3C3}<Alogin> вошел %s[%d] как администратор %d уровня", GetPlayerNameEx(playerid), playerid, GetPlayerAdminEx(playerid));
					SendMessageToAdmins(STRING_GLOBAL, COLOR_GREY);
					status_authorization[playerid] = 1;
					BitStream_2(playerid, s_CefInterface, t_CefShow, "Loading", "[3000]");
					SetTimerEx("OnPlayerLoading", 3000, false, "i", playerid);
					admin_logged[playerid] = true;
				}
				else 
				{
					if(GetPVarInt(playerid, "Alogin") == 1) return admin_logged[playerid] = false, Kick(playerid);
					else if(GetPVarInt(playerid, "Alogin") == 0) return Dialog(playerid, DIALOG_ADMIN_PASS_2, DIALOG_STYLE_PASSWORD,"{FFD83D}Система безопасности","Система безопасности{BE2D2D}У вас осталось последняя попытка\n{FFFFFF}Введите пароль:","Далее", "Закрыть"), SetPVarInt(playerid, "Alogin", 1);
				}
			}
			case DIALOG_ADMIN_PASS:
			{
                if(!response) return Kick(playerid);
				if(response)
				{
					if(strlen(inputtext) && !strcmp(inputtext, g_player[playerid][P_ADMIN_PASSWORD], false))
					{
						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{C3C3C3}<Alogin> вошел %s[%d] как администратор %d уровня", GetPlayerNameEx(playerid), playerid, GetPlayerAdminEx(playerid));
						SendMessageToAdmins(STRING_GLOBAL, COLOR_GREY);
						admin_logged[playerid] = true;
					}
					else 
					{
						if(GetPVarInt(playerid, "Alogin") == 1) return SendClientMessage(playerid, 0xFF6600FF, "Пароль не верный."), admin_logged[playerid] = false, Kick(playerid);
						else if(GetPVarInt(playerid, "Alogin") == 0) return Dialog(playerid, DIALOG_ADMIN_PASS, DIALOG_STYLE_PASSWORD,"{FFD83D}Система безопасности "SERVER_NAME_RP"","{BE2D2D}У вас осталось последняя попытка\n{FFFFFF}Введите пароль:","Далее", "Закрыть"), SetPVarInt(playerid, "Alogin", 1);
					}
				}
			}
			case DIALOG_SETBONUS:
			{
			    if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
						 for(new i = 0; i < MAX_PLAYERS; i++)
	                     {
                         BitStream_1(i, s_CefInterface, t_CefUpdate, "interface('Hud').setBonus(2)");
                         }
                         new query[200];
	                     mysql_format(mysql, query, sizeof query, "UPDATE server_config SET x_donate='2', x_exp='2', x_sallary='2', test_status='0' LIMIT 1");
	                     mysql_query(mysql, query, false);
						}
						case 2:
						{
                         for(new i = 0; i < MAX_PLAYERS; i++)
	                     {
                         BitStream_1(i, s_CefInterface, t_CefUpdate, "interface('Hud').setBonus(3)");
                         }
                         new query[200];
	                     mysql_format(mysql, query, sizeof query, "UPDATE server_config SET x_donate='2', x_exp='2', x_sallary='2', test_status='0' LIMIT 1");
	                     mysql_query(mysql, query, false);
						}
					}
				}
				else return SendClientMessageToAll(COLOR_YELLOW, "Бонус не выбран.'");
			}
			case DIALOG_MEROPRIATIE:
			{
			    if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							SetPlayerPos(playerid, 899.2795,4778.1416,415.1280);
							SendClientMessage(playerid,COLOR_ORANGE,"Вы были тилипортированы на трассу Гонки (В воздухе).");
						}
						case 2:
						{
							SetPlayerPos(playerid, -1354.1407,5761.4336,75.2560);
							SendClientMessage(playerid,COLOR_ORANGE,"Вы были тилипортированы на трассу Скилл тест.");
						}
						case 3:
						{
							SetPlayerPos(playerid, -1576.4528,6105.8828,80.8396);
							SendClientMessage(playerid,COLOR_ORANGE,"Вы были тилипортированы на PUBG локацию (Машины, ящики с оружием).");
						}
						case 4:
						{
							SetPlayerPos(playerid, -704.2706,3381.9133,78.3308);
							SendClientMessage(playerid,COLOR_ORANGE,"Вы были тилипортированы на Паркур локация (двигаються обекты!).");
						}
					}
				}
			}
			case R_F:
			{
			    if(response)
		        {
					new carprice = GetVehicleData(GetPlayerVehicleID(playerid), V_RENTP),string[80];
					new businessid = GetVehicleData(GetPlayerVehicleID(playerid), V_RENT);
					if(GetILPlayerInt(GetPlayerMoneyEx(playerid), carprice))
					{
						RemovePlayerFromVehicle(playerid);
						TogglePlayerControllable(playerid,1);
						SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно средств для аренды транспорта.");
						return 1;
					}
					if(GetPlayerData(playerid, P_RENT_CAR) != INVALID_VEHICLE_ID)
					{
						RemovePlayerFromVehicle(playerid);
						TogglePlayerControllable(playerid,1);
						SendClientMessage(playerid,COLOR_WHITE,"У вас уже есть арендованное авто. /unrent чтобы вернуть его.");
						return 1;
					}
					new take_prods = 50;
					if(GetBusinessData(businessid, B_PRODS) >= take_prods)
					{
						AddBusinessProfit(playerid, businessid, carprice, take_prods);
					}
					else
					{
						RemovePlayerFromVehicle(playerid);
						TogglePlayerControllable(playerid,1);
						SendClientMessage(playerid,COLOR_WHITE,"В бизнесе недостаточно продуктов. Аренда авто закрыта.");
						return 1;
					}
					format(string, sizeof(string), "{66CC00}Вы арендовали транспорт для временного использования");
					SendClientMessage(playerid,COLOR_WHITE,string);
					SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {3CB371}/lock 2{FFFFFF} для открытия и закрытия дверей");
					SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы разорвать договор аренды введите {3CB371}/unrent");
					TogglePlayerControllable(playerid,1);
					GivePlayerMoneyEx(playerid, -carprice, "Аренда авто");
					GetVehicleData(GetPlayerVehicleID(playerid), V_OWRENT) = GetPlayerName(playerid, OwnedName, sizeof(OwnedName));
					SetVehicleNumberPlate(GetPlayerVehicleID(playerid),"RENTED");
					SetPlayerData(playerid, P_RENT_CAR, GetPlayerVehicleID(playerid));
		        }
          		else
		        {
		            RemovePlayerFromVehicle(playerid);
				    TogglePlayerControllable(playerid,1);
		        }
			}
			// -----------------------------------------------------------------
			case DIALOG_PNEWMA_DESTROY:
			{
				if(!response) return 1;
				new vehicleid = GetPlayerVehicleID(playerid);
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				GivePlayerMoneyEx(playerid, 25000000, "снятие пневмы", true, true);
				SetOwnableCarData(index, OC_PNEWMA, 0);
				SetOwnableCarData(index, OC_PNEWMA_1, 0.0);
				SetOwnableCarData(index, OC_PNEWMA_2, 0.0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehicleVirtualWorld(vehicleid, 0);
				SetVehiclePos(vehicleid, -413.4231,1010.6860,12.0819);
				SetVehicleZAngle(vehicleid, 2.8581);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				SpeedometrShowForPlayer(playerid);
				SendClientMessage(playerid, -1, "Вы успешно сняли пневму со своего авто!");
				SaveOwnableCar(vehicleid);
				UpdateVehicleHandling(playerid, vehicleid);
				BitStream_1(playerid, s_CefInterface, t_CefHide, "TuningPneuma");
			}
			case DIALOG_F_STYLE:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
						if(GetPlayerData(playerid, P_STYLE_1) == 0)
						SendClientMessage(playerid, 0xFF0000AA, "У вас не изучен стиль боя 'Бокс'");
					    if(GetPlayerData(playerid, P_STYLE_1) == 1)
			            {
						SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
						SendClientMessage(playerid, 0x33FF33AA, "Вы выбрали стиль боя 'Бокс'");
						}
						}
						case 2:
						{
						if(GetPlayerData(playerid, P_STYLE_2) == 0)
						SendClientMessage(playerid, 0xFF0000AA, "У вас не изучен стиль боя 'Кунгфу'");
					    if(GetPlayerData(playerid, P_STYLE_2) == 1)
			            {
						SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
						SendClientMessage(playerid, 0x33FF33AA, "Вы выбрали стиль боя 'Кунгфу'");
						}
						}
						case 3:
						{
						if(GetPlayerData(playerid, P_STYLE_3) == 0)
						SendClientMessage(playerid, 0xFF0000AA, "У вас не изучен стиль боя 'СКолена'");
					    if(GetPlayerData(playerid, P_STYLE_3) == 1)
			            {
						SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
						SendClientMessage(playerid, 0x33FF33AA, "Вы выбрали стиль боя 'СКолена'");
						}
						}
						case 4:
						{
						if(GetPlayerData(playerid, P_STYLE_4) == 0)
						SendClientMessage(playerid, 0xFF0000AA, "У вас не изучен стиль боя 'Проход в ноги'");
					    if(GetPlayerData(playerid, P_STYLE_4) == 1)
			            {
						SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
						SendClientMessage(playerid, 0x33FF33AA, "Вы выбрали стиль боя 'Проход в ноги'");
						}
						}
						case 5:
						{
						if(GetPlayerData(playerid, P_STYLE_5) == 0)
						SendClientMessage(playerid, 0xFF0000AA, "У вас не изучен стиль боя 'Локтем'");
					    if(GetPlayerData(playerid, P_STYLE_5) == 1)
			            {
						SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
						SendClientMessage(playerid, 0x33FF33AA, "Вы выбрали стиль боя 'Локтем'");
						}
						}
						default:
							return 1;
					}
				}
			}
			case DIALOG_24_7:
			{
			    if(!response) return 1;
			    switch(listitem)
			    {
			        case 0:
			        {
					   	if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 6000))
			            {
							GiveWeapon(playerid, 43, 15);
							SendClientMessage(playerid, 0x66CC00FF, "Вы купили фотоаппарат на 15 снимков");
				            GivePlayerMoneyEx(playerid, -6000);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Набор фотографа стоит 6000 рублей");
			        }
			        case 1:
			        {
					   	if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 6500))
			            {
							GiveWeapon(playerid, WEAPON_FLOWER, 1);
							SendClientMessage(playerid, 0x66CC00FF, "Вы купили букет цветов");
							SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/present {66CC00}чтобы подарить их кому нибудь");
				            GivePlayerMoneyEx(playerid, -6500);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Букет стоит 6500 рублей");
			        }
			        case 2:
			        {
					   	if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 18000))
			            {
							GiveWeapon(playerid, WEAPON_CANE, 1);
							SendClientMessage(playerid, 0x66CC00FF, "Вы купили трость");
				            GivePlayerMoneyEx(playerid, -18000);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Трость стоит 18000 рублей");
			        }
					case 3:
			        {
					   	if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 24000))
			            {
							GiveWeapon(playerid, WEAPON_PARACHUTE, 1);
							SendClientMessage(playerid, 0x66CC00FF, "Вы купили парашют");
				            GivePlayerMoneyEx(playerid, -24000);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Парашют стоит 24000 рублей");
			        }
		        	case 4:
			        {
			        }
		        	case 5:
			        {
						if(!GetPlayerData(playerid, P_MASK))
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 7100))
							{
								SetPlayerData(playerid, P_MASK, 1);
								SendClientMessage(playerid, 0x66CC00FF, "Вы купили маску");
								SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/mask {66CC00}для скрытия Вашего расположения на карте (на 10 минут)");
								GivePlayerMoneyEx(playerid, -7100);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Маска стоит 7100 рублей");
						}
						else SendClientMessage(playerid, 0x999999FF, "Вы уже приобрели маску");
			        }
		        	case 6:
			        {
			        }
		     	  }
			}
			case DIALOG_PLAYER_STATS: if(response) callcmd::menu(playerid);
			case DIALOG_TEMP_LEADER:
			{
			    if(!response) return 1;
				SetPlayerTeamEx(playerid, listitem + 1);
				SetPlayerData(playerid, P_JOB, 10);
				if(!GetPlayerSex(playerid))
					SetPlayerData(playerid, P_OSKIN, g_organization[listitem][O_SKINS][10]);
				else
					SetPlayerData(playerid, P_OSKIN, g_organization[listitem][O_WOMEN_SKIN]);
				SetPlayerColorEx(playerid, team_colors[listitem + 1]);
                ResetSkin(playerid);
				new fmt_msg[200];
				format(fmt_msg, sizeof fmt_msg, "Вы взяли временное лидерство организации \"%s\"", GetPlayerTeamName(playerid));
				SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
				format(fmt_msg, sizeof fmt_msg, "[A] %s [%d] взял временное лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(playerid));
				SendMessageToAdmins(fmt_msg, COLOR_GREY);
			}
			case DIALOG_SECURITY_SETTING_PASS_1:
			{
				if(response)
				{
					if
					(
						strlen(inputtext)
						&& !strcmp(inputtext, GetPlayerData(playerid, P_PASSWORD), false)
					)
					{
						Dialog
						(
							playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
							"{FFD83D}Новый пароль",
							"{FFFFFF}Введите новый пароль в поле ниже:",
							"Изменить", "Отмена"
						);
						return 1;
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Вы ввели неверный пароль");
				}
			}
			case DIALOG_SECURITY_SETTING_PASS_2:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 23) || strfind(inputtext, " ") != -1)
					{
						SendClientMessage(playerid, 0xFF6600FF, "Длина пароля должна быть от 6 до 15 символов");
						SendClientMessage(playerid, 0xFF6600FF, "Также не допускается использование пробелов");
					}
					else
					{
						if(strcmp(GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP), false))
						{
							new lastip[64];
							new regip[64];
							strmid(lastip,GetPlayerIpEx(playerid),0,3);
							strmid(regip,GetPlayerData(playerid, P_REG_IP),0,3);
							if(strval(lastip) != strval(regip)) 
							{
								new fmt_text[148];
								format(fmt_text, sizeof fmt_text,"[A] Игрок %s[%d] неудачно попытался сменить пароль (Смена основного IP-адреса)",GetPlayerNameEx(playerid), playerid, GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP));
								SendMessageToAdmins(fmt_text, 0xFF6600FF);
								printf("["DETECT_ACH"] Игрок %s неудачно попытался сменить пароль (Смена IP-адреса) [%s (last) | %s (reg)]", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP));
								return 1;
							}
						}
						new query[100];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET password='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
						if(!mysql_errno())
						{
							format(g_player[playerid][P_PASSWORD], 85, "%s", inputtext);
							format(query, sizeof query, "Ваш новый пароль: {3399FF}%s", GetPlayerData(playerid, P_PASSWORD));
							SendClientMessage(playerid, 0xFFFF00FF, query);
							SendClientMessage(playerid, 0xFFFFFFFF, "Рекомендуем сделать скрин {00CC00}(клавиша F8) {FFFFFF}чтобы не забыть его");
							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 05)");
					}
					Dialog
					(
						playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
						"{FFD83D}Новый пароль",
						"{FFFFFF}Введите новый пароль в поле ниже:",
						"Изменить", "Отмена"
					);
				}
			}
			case DIALOG_TAKE_ITEM_SKIN:
			{
				if(!response) return 1;
				for(new i; i < MAX_ITEMS; i++)
				{
					if(items_objs[i] != -1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
						{
							if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
							DestroyObject(items_objs[i]);
							DestroyDynamic3DTextLabel(number_labels[i]);
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
							GiveSkin(playerid, item1[i]);
							SendClientMessage(playerid, 0xCECECEFF, "{"#cGold"}Вы подобрали предмет 'Одежда' в количестве 1.");
							items_objs[i] = -1;
							type_item[i] = 0;
							item1[i] = 0;
							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "Подобрал(а) предмет");
							SetPlayerChatBubble(playerid, STRING_GLOBAL, 0x3399FFFF, 10.0, 5000);
							DestroyDynamicArea(ItemDropSphere[i]);
							return 1;
						}
					}
				}
			}
			case DIALOG_TAKE_ITEM_GUN:
			{
				if(!response) return 1;
				for(new i; i < MAX_ITEMS; i++)
				{
					if(items_objs[i] != -1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
						{
							if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
							DestroyObject(items_objs[i]);
							DestroyDynamic3DTextLabel(number_labels[i]);
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
							GiveWeapon(playerid, item1[i], item2[i]);
							SCMF(playerid, 0xCECECEFF, "{"#cGold"}Вы подобрали предмет 'Оружие' в количестве %d.", item2[i]);
							items_objs[i] = -1;
							type_item[i] = 0;
							item1[i] = 0;
							item2[i] = 0;
							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "Подобрал(а) предмет");
							SetPlayerChatBubble(playerid, STRING_GLOBAL, 0x3399FFFF, 10.0, 5000);
							DestroyDynamicArea(ItemDropSphere[i]);
							return 1;
						}
					}
				}
			}
			case DIALOG_TAKE_ITEM_ACS:
			{
			    if(!response) return 1;
				for(new i; i < MAX_ITEMS; i++)
				{
					if(items_objs[i] != -1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
						{
							if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
							DestroyObject(items_objs[i]);
							DestroyDynamic3DTextLabel(number_labels[i]);
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
							CreateItemsAcs(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), item1[i], item3[i], 0, item2[i], -1, -1, 0, type_item[i]);
							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{"#cGold"}Вы подобрали предмет '%s' в количестве 1.", ItemsInfo[item3[i]]);
							SendClientMessage(playerid, 0xCECECEFF, STRING_GLOBAL);
							items_objs[i] = -1;
							type_item[i] = 0;
							item1[i] = 0;
							item2[i] = 0;
							item3[i] = 0;
							item4[i] = 0;
							format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "Подобрал(а) предмет");
							SetPlayerChatBubble(playerid, STRING_GLOBAL, 0x3399FFFF, 10.0, 5000);
							DestroyDynamicArea(ItemDropSphere[i]);
							return 1;
						}
					}
				}
			}
			case DIALOG_TAKE_MONEY:
			{
				if(!response) return 1;
				for(new i; i < MAX_ITEMS; i++)
				{
					if(items_objs[i] != -1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
						{
							DestroyObject(items_objs[i]);
							DestroyDynamic3DTextLabel(number_labels[i]);
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
							GivePlayerMoneyEx(playerid, item2[i], "Подобрал деньги");
							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{"#cGold"}Вы подобрали предмет 'Деньги' в количестве %d.",item2[i]);
							SendClientMessage(playerid, 0xCECECEFF, STRING_GLOBAL);
							itempos[i][0]=0, itempos[i][1]=0, itempos[i][2]=-10;
							items_objs[i] = 0;
							type_item[i] = 0;
							item1[i] = 0;
							item2[i] = 0;
							format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "Подобрал(а) предмет");
							SetPlayerChatBubble(playerid, STRING_GLOBAL, 0x3399FFFF, 10.0, 5000);
							DestroyDynamicArea(ItemDropSphere[i]);
							return 1;
						}
					}
				}
			}
			case DIALOG_TAKE_ITEM:
			{
			    if(!response) return 1;
				for(new i; i < MAX_ITEMS; i++)
				{
					if(items_objs[i] != -1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
						{
							if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
							DestroyObject(items_objs[i]);
							DestroyDynamic3DTextLabel(number_labels[i]);
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
							GiveIteam(playerid, item1[i], 1, item2[i], 0, "Поднял предмет [Инвентарь]");
							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{"#cGold"}Вы подобрали предмет '%s' в количестве %d.", ItemsInfo[item1[i]],item2[i]);
							SendClientMessage(playerid, 0xCECECEFF, STRING_GLOBAL);
							itempos[i][0]=0, itempos[i][1]=0, itempos[i][2]=-10;
							items_objs[i] = 0;
							type_item[i] = 0;
							item1[i] = 0;
							item2[i] = 0;
							format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "Подобрал(а) предмет");
							SetPlayerChatBubble(playerid, STRING_GLOBAL, 0x3399FFFF, 10.0, 5000);
							DestroyDynamicArea(ItemDropSphere[i]);
							return 1;
						}
					}
				}
			}
			case DIALOG_TAKE_ITEM_NUMBER:
			{
			    if(!response) return 1;
				for(new i; i < MAX_ITEMS; i++)
				{
					if(items_objs[i] != -1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
						{
							if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
							DestroyObject(items_objs[i]);
							DestroyDynamic3DTextLabel(number_labels[i]);
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
							SendClientMessage(playerid, 0xCECECEFF, "{"#cGold"}Вы подобрали предмет 'Автомобильный номер' в количестве 1.");
							CreateItemsCarNumber(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), number_item[i], region_item[i], item1[i], -1, -1, 0, 1);
							itempos[i][0]=0, itempos[i][1]=0, itempos[i][2]=-10;
							format(number_item[i], 10, "");
							format(region_item[i], 10, "");
							items_objs[i] = 0;
							type_item[i] = 0;
							item1[i] = 0;
							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "Подобрал(а) предмет");
							SetPlayerChatBubble(playerid, STRING_GLOBAL, 0x3399FFFF, 10.0, 5000);
							DestroyDynamicArea(ItemDropSphere[i]);
							return 1;
						}
					}
				}
			}
			case DIALOG_KIOSK_BUY:
			{
			    if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				if(kiosk_id == -1) return SCM(playerid, 0xCECECEFF, "* Вы слишком далеко от киоска");
				if(GetKioskData(kiosk_id, K_OWNER_ID) != 0) return SCM(playerid, 0xCECECEFF, "* Этот киоск уже куплен");
				Dialog(playerid, DIALOG_BUY_STALL, DIALOG_STYLE_MSGBOX, "Покупка киоска", "Вы действительно хотите приобрести этот киоск?", "Да", "Нет");
				SetPVarInt(playerid, "buy_stall", kiosk_id);
				return 1;
			}
			case DIALOG_FIX_CAR:
			{
				if(response)
				{
					{
                        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 5000000)) return SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно средств");
					    SendClientMessage(playerid, COLOR_ORANGE, "Вы купили рем. комплект!");
					    SendClientMessage(playerid, COLOR_ORANGE, "Использовать рем. комплект: {2f89f7}через инвентарь или /fixcar");
					    GivePlayerMoneyEx(playerid, -5000000);
					    GiveIteam(playerid, 44, 1, 1, 0);
					}
				}
			}
			case DIALOG_REPORT_Z:
			{
				if(!response) return 1;
				new query[345];
				format(query, sizeof query, "INSERT INTO `report_mesage` (`owner_id`, `report_id`, `name`, `text`, `data`, `status`) VALUES (%d, %d, '%s', '%s', %d, 1)", GetPlayerAccountID(playerid), m_player_report_id[playerid], GetPlayerNameEx(playerid), inputtext, gettime());
				mysql_query(mysql, query, false);
				SCMF(playerid, COLOR_YELLOW, "Вы успешно ответили на запрос {FFFFFF}[№ %d]", m_player_report_id[playerid]);
				GetPVarInt(playerid, "owner_id_player");
				new to_player = GetPlayerIDBySqlID(GetPVarInt(playerid, "owner_id_player"));
				if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
				{
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[1, 0, \"%s\", %d]", GetPlayerNameEx(playerid), m_player_report_id[playerid]);
					BitStream_2(to_player, s_CefInterface, t_CefShow, "Notification", STRING_GLOBAL);
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Для %s[acc:%d]: %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), inputtext);
					SendLog(playerid, LOG_TYPE_ADMIN_ANSWER, STRING_GLOBAL);
				}
				m_player_report_id[playerid] = -1;
			}
			case DIALOG_REPORT_1:
			{
   				if(!response) return 1;
  			  	format(report_message[playerid], sizeof report_message, "%s", inputtext);
				if(strfind(report_message[playerid], "%~%k%~%~SWITCH_DEBUG_CAM_ON%~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
				{
				return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
				if(strfind(report_message[playerid], "~k~~SWITCH_DEBUG_CAM_ON~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
				{
				return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
			    if(strfind(report_message[playerid], "~k~~TAKE_SCREEN_SHOT~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
			    {
			    return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
			    }
				if(strfind(report_message[playerid], "%~%k%~%~SWITCH_DEBUG_CAM_ON%~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
				{
					return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
				if(strfind(report_message[playerid],"%s") != -1)
				{
					return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
				if(strfind(report_message[playerid],"%ss") != -1)
				{
					return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
		    	Dialog(playerid, DIALOG_REPORT_2, DIALOG_STYLE_LIST, "Выберите действие", "1. Жалоба на игрока\n2. Задать вопрос", "Далее", "Закрыть");
			}
			case DIALOG_GOTO_GPS:
        	{
        	    if(response)
        	    {
        	        TeleportPlayerGPS(playerid, GetPVarFloat(playerid, "goto_x"), GetPVarFloat(playerid, "goto_y"), GetPVarFloat(playerid, "goto_z"));
        	        DeletePVar(playerid, "goto_x");
                    DeletePVar(playerid, "goto_y");
                    DeletePVar(playerid, "goto_z");
				}
        	}
			case DIALOG_REPORT_2:
			{
			    if(!response) return 1;
				if(IsPlayerRMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас заблокирован доступ к репорту. Время до разблокировки: /time");
				if(strlen(report_message[playerid]) < 3)
				{
				    SendClientMessage(playerid, 0xFF6600FF, "Слишком короткий запрос");
				    return 1;
				}
				if(strlen(report_message[playerid]) > 180)
				{
				    SendClientMessage(playerid, 0xFF6600FF, "Слишком длинный запрос");
				    return 1;
				}
				if(strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
				{
					return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
				if(strfind(report_message[playerid], "~k~~SWITCH_DEBUG_CAM_ON~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
				{
				return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
			    if(strfind(report_message[playerid], "~k~~TAKE_SCREEN_SHOT~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
			    {
			    return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
			    }
				if(strfind(report_message[playerid], "%~%k%~%~SWITCH_DEBUG_CAM_ON%~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
				{
				return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
				if(strfind(report_message[playerid], "%~%k%~%~SWITCH_DEBUG_CAM_ON%~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
				{
					return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
				if(strfind(report_message[playerid],"%s") != -1)
				{
					return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
				if(strfind(report_message[playerid],"%ss") != -1)
				{
					return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}
				new mes[228];
				switch(listitem + 1)
				{
				    case 1:
				    {
						format(mes,sizeof(mes),"{FF0000}Жалоба от Игрока %s [id:%d]:{E9DB00} %s", GetPlayerNameEx(playerid), playerid, report_message[playerid]);
						SendMessageToAdmins(mes, -1);
						format(mes,sizeof(mes),"{FF0000}[ВАША ЖАЛОБА]{E9DB00} %s", report_message[playerid]);
						SendClientMessage(playerid, -1, mes);
				    }
				    case 2:
				    {
						format(mes,sizeof(mes),"{00FF17}Вопрос от игрока %s [id:%d]:{E9DB00} %s", GetPlayerNameEx(playerid), playerid, report_message[playerid]);
						SendMessageToAdmins(mes, -1);
						format(mes,sizeof(mes),"{00FF17}[ВАШ ВАПРОС]{E9DB00} %s", report_message[playerid]);
						SendClientMessage(playerid, -1, mes);
				    }
			    }
			    SetPVarInt(playerid, "antifloodrep", gettime() + 15);
			}
			case DIALOG_CHANGE_NAME:
			{
				if(response)
				{
					if(!GetPVarInt(playerid, "change_name_status"))
					{
						new len = strlen(inputtext);
						if(4 <= len <= 20)
						{
							new bool: valid_name = true;
							for(new idx; idx < len; idx ++)
							{
								switch(inputtext[idx])
								{
									case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
									default:
										valid_name = false;
								}
							}
							if(!strcmp(GetPlayerNameEx(playerid), inputtext, true))
							{
								SendClientMessage(playerid, 0xFF6600FF, "Вы уже используете это имя");
							}
							else if(valid_name)
							{
								new query[128];
								new Cache: result, rows;
								mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query, true);
								rows = cache_num_rows();
								cache_delete(result);
								if(!rows)
								{
									SetPVarInt(playerid, "change_name_status", 1);
									SetPVarString(playerid, "change_name", inputtext);
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FFD83D}Заявка на изменение имени",
										"{FFFFFF}Ваша просьба об изменении ника отправлена администрации.\n"\
										"Вы получите сообщение, как только заявка будет обработана.\n\n"\
										"Если в течении нескольких минут Ваше имя не было изменено,\n"\
										"то, скорее всего, оно не соответствует RP правилам,\n"\
										"либо Вы уже используете RP имя.",
										"Ок", ""
									);
									format(query, sizeof query, "[Смена non rp имени] %s >> %s {FFCD00}| /okay %d для одобрения" , GetPlayerNameEx(playerid), inputtext, playerid);
									SendMessageToAdmins(query, 0x66CC99FF);
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Введенное Вами имя уже используется");
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Имя уже используется или содержит недопустимые символы");
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
							}
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Недопустимый формат ввода");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы уже подавали заявку на изменение имени");
				}
			}
			case DIALOG_ANIM_LIST:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"Информация",
								"Для быстрого запуска нужной анимации можно использовать {FFFFFF}/anim(list) [номер категории] [номер анимации из списка]",
								"Закрыть", ""
							);
						}
						case 2:
						{
	    					Dialog
							(
								playerid, DIALOG_ANIM_LIST_1, DIALOG_STYLE_LIST,
								"{9966FF}Анимации",
								"1. Махать рукой\n"\
								"2. Попрощаться\n"\
								"3. Приветствие 1\n"\
								"4. Приветствие 2\n"\
								"5. Приветствие 3\n"\
								"6. Приветствие 4",
								"Выбрать", "Закрыть"
							);
						}
						case 3:
						{
							Dialog
							(
								playerid, DIALOG_ANIM_LIST_2, DIALOG_STYLE_LIST,
								"{"#cGold"}Уникальные танцы",
								 "1. Аэробика\n"\
					            "2. Руки вверх\n"\
					            "3. Лучшие друзья\n"\
					            "4. Танец локтями\n"\
					            "5. Конго\n"\
					            "6. Робот\n"\
					            "7. Крисс-Кросс\n"\
					            "8. Классический\n"\
					            "9. Диско\n"\
					            "10. Хочу в пляс\n"\
					            "11. Казачок\n"\
					            "12. Фламенко\n"\
					            "13. Харлем-Шейк\n"\
					            "14. Флосс\n"\
					            "15. Грув\n"\
					            "16. Рокер\n"\
					            "17. Хип-Хоп\n"\
					            "18. Техно-Виккинг\n"\
					            "19. Торнадо\n"\
					            "20. Брейк-данс\n"\
					            "21. Флекс\n"\
					            "22. Техно-Зомби",
							 	"Выбрать", "Закрыть"
					 		);
						}
						case 4:
						{
 							Dialog
							(
								playerid, DIALOG_ANIM_LIST_3, DIALOG_STYLE_LIST,
								"{9966FF}Анимации",
								"1. Лечь на землю\n"\
								"2. Укрыться\n"\
								"3. Эффект электрошокера\n"\
								"4. Присесть\n"\
								"5. Расслаблено сесть\n"\
								"6. Спать на боку\n"\
								"7. Спать на спине\n"\
								"8. Облокотиться на бок\n"\
								"9. Лечь, оперевшись на ладонь\n"\
								"10. Сесть на стул\n"\
								"11. Сидеть уставшим за компьютером\n"\
								"12. Сидеть за столом\n"\
								"13. Сидеть и печатать\n"\
								"14. Сесть, закинув ногу на ногу\n"\
								"15. Сесть на стул (2)\n"\
								"16. Сесть на стул (3)\n"\
								"17. Лечь на землю (2)\n"\
								"18. Плохое самочувствие",
								"Выбрать", "Закрыть"
							);
						}
						case 5:
						{
 							Dialog
							(
								playerid, DIALOG_ANIM_LIST_4, DIALOG_STYLE_LIST,
								"{9966FF}Анимации",
								"1. Походка пьяного\n"\
								"2. Кувыркаться",
								"Выбрать", "Закрыть"
							);
						}
						case 6:
						{
                        	Dialog
							(
								playerid, DIALOG_ANIM_LIST_5, DIALOG_STYLE_LIST,
								"{9966FF}Анимации",
								"1. Вытянуть руку перед собой\n"\
								"2. Сложить руки вместе\n"\
								"3. Поза вратаря\n"\
								"4. Руки вверх!\n"\
								"5. Раздумье\n"\
								"6. Размахивать руками на месте\n"\
								"7. Смотреть наверх\n"\
								"8. Указать рукой наверх",
								"Выбрать", "Закрыть"
							);
						}
						case 7:
						{
                        	Dialog
							(
								playerid, DIALOG_ANIM_LIST_6, DIALOG_STYLE_LIST,
								"{9966FF}Анимации",
								"1. Подложить бомбу\n"\
								"2. Надеть маску\n"\
								"3. Предложить наркотики\n"\
								"4. Мужское курение\n"\
								"5. Женское курение\n"\
								"6. Выпить напиток\n"\
								"7. Позвать кого-то\n"\
								"8. Смотреть по сторонам\n"\
								"9. Толкнуть боком\n"\
								"10. Взять что-то и рассмотреть\n"\
								"11. Отказаться от чего-либо\n"\
								"12. Искуственное дыхание\n"\
								"13. Пощечины для лежачего\n"\
								"14. Подглядывать через что-то\n"\
								"15. Движения тореодора\n"\
								"16. Быть в страхе\n"\
								"17. Призывать к чему-либо\n"\
								"18. Сходить по-маленькому\n"\
								"19. Голосовать на остановке\n"\
								"20. Удар ногой\n"\
								"21. Стучаться в дверь\n"\
								"22. Устроить бунт",
								"Выбрать", "Закрыть"
							);
						}
						case 8:
						{
							Dialog
							(
								playerid, DIALOG_ANIM_LIST_7, DIALOG_STYLE_LIST,
								"{9966FF}Анимации",
								"1. Шлепнуть кому-то по заднице\n"\
								"2. Поцелуй 1\n"\
								"3. Поцелуй 2\n"\
								"4. Поцелуй 3",
								"Выбрать", "Закрыть"
							);
						}
						case 9:
						{
							Dialog
							(
								playerid, DIALOG_ANIM_LIST_8, DIALOG_STYLE_LIST,
								"{9966FF}Анимации",
								"1. Читать рэп\n"\
								"2. Восточное единоборство\n"\
								"3. Facepalm\n"\
								"4. Гангстерский жест",
								"Выбрать", "Закрыть"
							);
						}
						case 10:
						{
							Dialog
							(
								playerid, DIALOG_ANIM_LIST_9, DIALOG_STYLE_LIST,
								"{9966FF}Анимации",
								"1. Съел что-то не то...\n"\
								"2. Перекусить",
								"Выбрать", "Закрыть"
							);
						}
					}
				}
			}
			case DIALOG_ANIM_LIST_1:
			{
				if(response)
				{
					switch(listitem + 1)
					{
					    case 1: ApplyAnimation(playerid, "ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					    case 2: ApplyAnimation(playerid, "ped",				"endchat_03",			4.0, true,  1, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					    case 3: ApplyAnimation(playerid, "RIOT",			"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					    case 4: ApplyAnimation(playerid, "GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					    case 5: ApplyAnimation(playerid, "GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					    case 6: ApplyAnimation(playerid, "GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			case DIALOG_ANIM_LIST_2:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_In_O", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 2: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_In_P", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 3: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_In_T", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 4: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_Out_O", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 5: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_Pose_P", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 6: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_Pose_O", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 7: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_Pose_P", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 8: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_Pose_T", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 9: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmR_In_O", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 10: ApplyAnimation(playerid, "TATTOOS", "none none none ", 4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 11: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmR_In_T", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 12: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmR_Out_O", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 13: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmR_Out_P", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 14: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmR_Out_T", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 15: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmR_Pose_O", 4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 16: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmR_Pose_P", 4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 17: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmR_Pose_T", 4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 18: ApplyAnimation(playerid, "TATTOOS", "TAT_Back_In_O", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 19: ApplyAnimation(playerid, "TATTOOS", "TAT_Back_Pose_T", 4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 20: ApplyAnimation(playerid, "TATTOOS", "TAT_ArmL_Out_P", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 21: ApplyAnimation(playerid, "TATTOOS", "TAT_Sit_Loop_T", 	4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 22: ApplyAnimation(playerid, "TATTOOS", "TAT_Back_Sit_In_P", 4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			case DIALOG_ANIM_LIST_3:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ApplyAnimation(playerid, "BEACH",			"bather",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 2: ApplyAnimation(playerid, "ped",				"cower", 				3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 3: ApplyAnimation(playerid, "CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 4: ApplyAnimation(playerid, "BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 5: ApplyAnimation(playerid, "BLOWJOBZ",			"BJ_COUCH_LOOP_P",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 6: ApplyAnimation(playerid, "CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 7: ApplyAnimation(playerid, "CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 8: ApplyAnimation(playerid, "GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 9: ApplyAnimation(playerid, "BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 10: ApplyAnimation(playerid, "INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 11: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 12: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 13: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 14: ApplyAnimation(playerid, "JST_BUISNESS",		"girl_02",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 15: ApplyAnimation(playerid, "MISC",				"SEAT_LR",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 16: ApplyAnimation(playerid, "ped",				"SEAT_idle",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 17: ApplyAnimation(playerid, "SWAT",				"gnstwall_injurd",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 18: ApplyAnimation(playerid, "SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			case DIALOG_ANIM_LIST_4:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ApplyAnimation(playerid, "PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 2: ApplyAnimation(playerid, "ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			case DIALOG_ANIM_LIST_5:
			{
				if(response)
				{
					switch(listitem + 1) // ApplyAnimation(playerid, );
					{
						case 1: ApplyAnimation(playerid, "SHOP",				"ROB_Loop_Threat",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 2: ApplyAnimation(playerid, "COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 3: ApplyAnimation(playerid, "BSKTBALL",			"BBALL_def_loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 4: ApplyAnimation(playerid, "PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 5: ApplyAnimation(playerid, "GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 6: ApplyAnimation(playerid, "LOWRIDER",			"RAP_B_Loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 7: ApplyAnimation(playerid, "ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 8: ApplyAnimation(playerid, "ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			case DIALOG_ANIM_LIST_6:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ApplyAnimation(playerid, "BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 2: ApplyAnimation(playerid, "SHOP",				"ROB_Shifty",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 3: ApplyAnimation(playerid, "DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 4: ApplyAnimation(playerid, "SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 5: ApplyAnimation(playerid, "SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 6: ApplyAnimation(playerid, "BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 7: ApplyAnimation(playerid, "CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 8: ApplyAnimation(playerid, "DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 9: ApplyAnimation(playerid, "GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 10: ApplyAnimation(playerid, "INT_SHOP",			"shop_shelf",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 11: ApplyAnimation(playerid, "KISSING",			"GF_StreetArgue_02",4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 12: ApplyAnimation(playerid, "MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 13: ApplyAnimation(playerid, "MISC",				"bitchslap",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 14: ApplyAnimation(playerid, "MISC",				"bng_wndw",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 15: ApplyAnimation(playerid, "MISC",				"KAT_Throw_K",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 16: ApplyAnimation(playerid, "ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 17: ApplyAnimation(playerid, "ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 18: ApplyAnimation(playerid, "PAULNMAC",			"Piss_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 19: ApplyAnimation(playerid, "ped",				"IDLE_taxi", 		3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 20: ApplyAnimation(playerid, "POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 21: ApplyAnimation(playerid, "POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 22: ApplyAnimation(playerid, "RIOT",				"RIOT_ANGRY_B",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			case DIALOG_ANIM_LIST_7:
			{
				if(response) // ApplyAnimation(playerid, );
				{
					switch(listitem + 1)
					{
						case 1: ApplyAnimation(playerid, "SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 2: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 3: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 4: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			case DIALOG_ANIM_LIST_8:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ApplyAnimation(playerid, "benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 2: ApplyAnimation(playerid, "PARK",				"Tai_Chi_Loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 3: ApplyAnimation(playerid, "MISC",				"plyr_shkhead",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 4: ApplyAnimation(playerid, "GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			case DIALOG_ANIM_LIST_9:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ApplyAnimation(playerid, "FOOD",				"EAT_Vomit_P", 		3.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
						case 2: ApplyAnimation(playerid, "FOOD",				"EAT_Burger", 		3.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OPEN_HOOD_OR_TRUNK:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid)
				{
					new E_VEHICLE_PARAMS_STRUCT: param = response ? V_BONNET : V_BOOT;
					new set_status = GetVehicleParam(vehicleid, param) ^ VEHICLE_PARAM_ON;
					SetVehicleParam(vehicleid, param, set_status);
				}
			}
			case DIALOG_ATM:
			{
				if(response)
				{
					switch(listitem+1)
					{
						case 1,2: // Снять\Положить с банковского счета
						{
							ShowPlayerATMSelectSumDialog(playerid, !listitem);
						}
						case 3: // Баланс банковского счета
						{
							new fmt_str[64];
							format(fmt_str, sizeof fmt_str, "{FFFFFF}На Вашем банковском счету {00CC00}%s руб", formatStr(GetPlayerBankMoney(playerid)));
							Dialog
							(
								playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Баланс счета",
								fmt_str,
								"Назад", "Выйти"
							);
						}
						case 4: // Снять со счета предприятия
						{
							//ShowPlayerATMCompanyDialog(playerid, true);
							new query[256],
								Cache: result,
								biz_id,
								biz_name[64];
							mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query, true);
							new rows = cache_num_rows();
							if(!rows)
								return SendClientMessage(playerid, 0x999999FF, "У вас не одного бизнеса во владении.");
							vibor_biz_atm[playerid] = 2;
							string_dialog[0] = EOS;
							for(new i = 0; i < rows; i ++)
							{
								biz_id = cache_get_field_content_int(i, "id");
								cache_get_field_content(i, "name", biz_name);
								format(query, sizeof query, "{FFFFFF}%d. - %s (№%d)<t>Владелец\n", i + 1, biz_name, biz_id);
								strcat(string_dialog, query);
								SetPlayerListitemValue(playerid, i, biz_id-1);
							}
							Dialog
							(
								playerid, DIALOG_ATM_BIZ_LIST, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите бизнес",
								string_dialog,
								"Выбрать", "Закрыть"
							);
							cache_delete(result);
						}
						case 5: // Положить на счет предприятия
						{
							//ShowPlayerATMCompanyDialog(playerid, false);
							new query[256],
								Cache: result,
								kiosk_id;
							mysql_format(mysql, query, sizeof query, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query, true);
							new rows = cache_num_rows();
							if(!rows)
								return SendClientMessage(playerid, 0x999999FF, "У вас не одного киоска во владении.");
                            vibor_kiosk_atm[playerid] = 1;
							string_dialog[0] = EOS;
							for(new i = 0; i < rows; i ++)
							{
								kiosk_id = cache_get_field_content_int(i, "id");
								format(query, sizeof query, "{FFFFFF}Киоск №%d\n", kiosk_id);
								strcat(string_dialog, query);
								SetPlayerListitemValue(playerid, i, kiosk_id-1);
							}
							Dialog
							(
								playerid, DIALOG_ATM_KIOSK_LIST, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите киоск",
								string_dialog,
								"Выбрать", "Закрыть"
							);
							cache_delete(result);
						}
						case 6: // Положить на счет предприятия
						{
							new biz_id,
								biz_name[64],
								query[256],
								Cache: result;
							mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query, true);
							new rows = cache_num_rows();
							if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного бизнеса во владении.");
                            vibor_biz_atm[playerid] = 1;
							string_dialog = "";
							for(new i = 0; i < rows; i ++)
							{
								biz_id = cache_get_field_content_int(i, "id");
								cache_get_field_content(i, "name", biz_name);
								format(query, sizeof query, "{FFFFFF}%d. - %s (№%d)<t>Владелец\n", i + 1, biz_name, biz_id);
								strcat(string_dialog, query);
								SetPlayerListitemValue(playerid, i, biz_id-1);
							}
							Dialog
							(
								playerid, DIALOG_ATM_BIZ_LIST, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите бизнес",
								string_dialog,
								"Выбрать", "Закрыть"
							);
							cache_delete(result);
						}
						case 7: // Пополнить мобильный телефон
						{
							if(GetPlayerPhone(playerid) != 0)
							{
								Dialog
								(
									playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
									"{FFD83D}Пополнение мобильного телефона",
									"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
									"Готово", "Назад"
								);
							}
							else
							{
								SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");
								ShowPlayerATMDialog(playerid);
							}
						}
						case 8: // Безналичный перевод
						{
							if(GetPlayerLevel(playerid) >= 3)
							{
								Dialog
								(
									playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT,
									"{FFD83D}Безналичный перевод",
									"{FFFFFF}Укажите номер банковского счета:",
									"Далее", "Отмена"
								);
							}
							else SendClientMessage(playerid, 0x999999FF, "Перевод денег доступен с 3 уровня");
						}
						case 9:
						{
							Dialog
							(
								playerid, DIALOG_ATM_TICKET_SELECT, DIALOG_STYLE_LIST,
								"{FFD83D}Оплатить штраф",
								"1. Посмотреть список своих штрафов\n"\
								"2. Оплатить штраф по его номеру\n"\
								"3. Оплатить все штрафы",
								"Далее", "Назад"
							);
						}
						case 10: ShowPlayerATMCharityDialog(playerid);
						case 11: 
						{
							new query[256],
								Cache: result,
								biz_id;
							mysql_format(mysql, query, sizeof query, "SELECT * FROM neftenasos WHERE owner_id='%d'", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query, true);
							new rows = cache_num_rows();
							if(!rows)
								return SendClientMessage(playerid, 0x999999FF, "У вас не одного нефтенасоса во владении.");
							string_dialog[0] = EOS;
							for(new i = 0; i < rows; i ++)
							{
								biz_id = cache_get_field_content_int(i, "id");
								format(query, sizeof query, "{FFFFFF}Нефтенасос №%d\n", biz_id);
								strcat(string_dialog, query);
								SetPlayerListitemValue(playerid, i, biz_id-1);
							}
							Dialog
							(
								playerid, DIALOG_OWNABLE_NEFTENASOS_LIST, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите нефтяной насос",
								string_dialog,
								"Далее", "Назад"
							);
							cache_delete(result);
						}
						default:
							return 1;
					}
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_TAKE_MONEY: // снять деньги
			{
				if(response)
				{
					if(0 <= listitem <= 6)
					{
						new sum = atm_item_sum[listitem];
						if(GetILPlayerInt(GetPlayerBankMoney(playerid), sum))
						{
							format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -sum));
							GivePlayerMoneyEx(playerid, sum, "Снятие денег с банкомата");
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%s,bank=%s WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "На Вашем банковском счету недостаточно средств");
							ShowPlayerATMSelectSumDialog(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_TAKE_OTHER_MONEY: // снять деньги (другая сума)
			{
				if(response)
				{
					if(IsILNumeric(inputtext))
					{
						if(GetILPlayerStr(GetPlayerBankMoney(playerid), inputtext))
						{
							new money_str[23];
							format(money_str, sizeof money_str, "-%s", inputtext);
							format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerStr(playerid, GetPlayerBankMoney(playerid), money_str));
							GivePlayerMoneyStr(playerid, inputtext, "Снятие денег с банкомата");
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET bank=%s WHERE id=%d LIMIT 1", GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "На Вашем банковском счету недостаточно средств");
							ShowPlayerATMSelectOtherSum(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMSelectSumDialog(playerid, true);
				}
			}
			case DIALOG_ATM_PUT_MONEY: // положить деньги
			{
				if(response)
				{
					if(0 <= listitem <= 6)
					{
						new sum = atm_item_sum[listitem];
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), sum))
						{
							format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), sum));
							GivePlayerMoneyEx(playerid, -sum, "Пополнение денег в банкомате");
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%s,bank=%s WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
							ShowPlayerATMSelectSumDialog(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
	       	case DIALOG_ATM_BIZ_LIST:
			{
				new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				SetPVarInt(playerid, "ownablebiz_id", idx);
				if(vibor_biz_atm[playerid] == 2)
				{
					Dialog
					(
						playerid, DIALOG_ATM_BIZ_TAKE_MONEY, DIALOG_STYLE_INPUT,
						"{FFCD00}Снятие с счёта бизнеса",
						"{FFFFFF}Укажите сумму, на которую хотите снять счёт данного бизнеса:",
						"Готово", "Назад"
					);
				}
				if(vibor_biz_atm[playerid] == 1)
				{
				    Dialog
					(
						playerid, DIALOG_ATM_BIZ_PUT_MONEY, DIALOG_STYLE_INPUT,
						"{FFCD00}Пополнение счёта бизнеса",
						"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
						"Готово", "Назад"
					);
				}
             }
            case DIALOG_ATM_KIOSK_LIST:
			{
				new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				new fmt_text[210];
				SetPVarInt(playerid, "ownablekiosk_id", idx);
				if(vibor_kiosk_atm[playerid] == 1)
				{
					format
				    (
				        fmt_text, sizeof fmt_text,
				        "{FFFFFF}Киоск: {006400}№%d\n"\
				        "{FFFFFF}Баланс: {006400}%s руб.\n\n"\
				        "{FFFFFF}Сколько вы хотите снять?",
				        idx, formatStr(GetKioskData(idx, K_BALANCE))
				    );
				    Dialog(playerid, DIALOG_ATM_KIOSK_TAKE_MONEY, DIALOG_STYLE_INPUT, "{FFCD00}Снятие средств", fmt_text, "Да", "Нет");
				}
    		}
			case DIALOG_ATM_PUT_OTHER_MONEY: // положить деньги (другая сума)
			{
				if(response)
				{
					if(IsILNumeric(inputtext))
					{
						if(!GetILPlayerStr(GetPlayerMoneyEx(playerid), inputtext)) return SCM(playerid, 0xCECECEFF, "У Вас с собой нет столько денег"), ShowPlayerATMSelectOtherSum(playerid, false);
						format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerStr(playerid, GetPlayerBankMoney(playerid), inputtext));
						new money_str[23];
						format(money_str, sizeof money_str, "-%s", inputtext);
						GivePlayerMoneyStr(playerid, money_str, "Пополнение денег в банкомате", true, true);
						new query[149];
						format(query, sizeof query, "UPDATE accounts SET money=%s, bank=%s WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
						ShowPlayerATMDialog(playerid);
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMSelectSumDialog(playerid, false);
				}
			}
			case DIALOG_ATM_BALANCE:
			{
				if(response)
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PHONE_BALANCE:
			{
				if(response)
				{
					new sum = strval(inputtext);
					if(sum > 0 && IsNumeric(inputtext))
					{
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), sum))
						{
							new query[128];
							format(query, sizeof query, "UPDATE accounts SET money=%s,phone_balance=%d WHERE id=%d LIMIT 1", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), -sum), GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -sum, "Пополнение счета телефона", false, true);
								AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);
								format(query, sizeof query, "Вы пополнили счет мобильного телефона на {FF9900}%d руб", sum);
								SendClientMessage(playerid, 0x66CC00FF, query);
								format(query, sizeof query, "Сейчас на счету %d руб", GetPlayerData(playerid, P_PHONE_BALANCE));
								SendClientMessage(playerid, 0x66CC00FF, query);
								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 15)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
					Dialog
					(
						playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
						"{FFD83D}Пополнение мобильного телефона",
						"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
						"Готово", "Назад"
					);
				}
				else
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_SELECT_COMPANY_TAKE, DIALOG_ATM_SELECT_COMPANY_PUT:
			{
				if(response)
				{
					new bool: action = (dialogid == DIALOG_ATM_SELECT_COMPANY_TAKE);
					switch(listitem + 1)
					{
						case 1:
							ShowPlayerATMBusinessDialog(playerid, action);
					}
				}
				else
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_BY_EXIT_MVD:
			{
				if(!response) return 1;
				SendClientMessage(playerid,0x008000FF,"{ffffff}Вы успешно выехали из парковки"); // Выводим оповещение
				SetVehiclePos(GetPlayerVehicleID(playerid), 210.4814,1367.2345,12.1203);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 169.9973);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
			}
   			case DIALOG_BY_EXIT_HOSPITAL:
			{
				if(!response) return 1;
				SendClientMessage(playerid,0x008000FF,"{ffffff}Вы успешно выехали из парковки"); // Выводим оповещение
				SetVehiclePos(GetPlayerVehicleID(playerid), 674.4968,1793.6567,11.8217);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 131.7351);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
   			}
			case DIALOG_BY_EXIT_SR:
			{
			    if(!response) return 1;
			    new vehicleid = GetPVarInt(playerid, "veh_id");
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				GetOwnableCarData(index, OC_POS_X) = GetOwnableCarData(index, OC_BY_POS_X);
				GetOwnableCarData(index, OC_POS_Y) = GetOwnableCarData(index, OC_BY_POS_Y);
				GetOwnableCarData(index, OC_POS_Z) = GetOwnableCarData(index, OC_BY_POS_Z);
				GetOwnableCarData(index, OC_ANGLE) = GetOwnableCarData(index, OC_BY_ANGLE);
				SendClientMessage(playerid, 0xFFDAB9FF, "Ваше т/с было снято с продажи");
				SendClientMessage(playerid, 0xFFA500FF, "Ваш транспорт был снят с продажи, припаркован на том месте, где находился до аренды и выгружен");
				if(GetOwnableCarData(index, OC_BY_ID) == 2)
				{
    				bymestasr[GetOwnableCarData(index, OC_MESTOID)] = 0;
    			}
				new query[190];
			    format(query, sizeof query, "UPDATE ownable_cars SET inter=0,world=0 WHERE id=%d LIMIT 1",GetOwnableCarData(index, OC_SQL_ID));
			    mysql_tquery(mysql, query, "", "");
				SaveOwnableCar(vehicleid);
				UnloadPlayerOwnableCar(true, vehicleid);
			}
			case DIALOG_BY_EXIT:
			{
			    if(!response) return 1;
			    new vehicleid = GetPVarInt(playerid, "veh_id");
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				GetOwnableCarData(index, OC_POS_X) = GetOwnableCarData(index, OC_BY_POS_X);
				GetOwnableCarData(index, OC_POS_Y) = GetOwnableCarData(index, OC_BY_POS_Y);
				GetOwnableCarData(index, OC_POS_Z) = GetOwnableCarData(index, OC_BY_POS_Z);
				GetOwnableCarData(index, OC_ANGLE) = GetOwnableCarData(index, OC_BY_ANGLE);
				SendClientMessage(playerid, 0xFFDAB9FF, "Ваше т/с было снято с продажи");
				SendClientMessage(playerid, 0xFFA500FF, "Ваш транспорт был снят с продажи, припаркован на том месте, где находился до аренды и выгружен");
				if(GetOwnableCarData(index, OC_BY_ID) == 1)
				{
    				bymestavis[GetOwnableCarData(index, OC_MESTOID)] = 0;
    			}
				new query[190];
			    format(query, sizeof query, "UPDATE ownable_cars SET inter=0,world=0 WHERE id=%d LIMIT 1",GetOwnableCarData(index, OC_SQL_ID));
			    mysql_tquery(mysql, query, "", "");
				SaveOwnableCar(vehicleid);
				UnloadPlayerOwnableCar(true, vehicleid);
			}
			case DIALOG_SET_MIN_PRICE:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new price = strval(inputtext);
				new str_c[128];
				new query[512];
				if(price < 500) return SCM(playerid, 0xCECECEFF, "* Минимальная цена не должна быть меньше 500 руб.");
				if(price > 50000) return SCM(playerid, 0xCECECEFF, "* Минимальная цена не должна быть более чем 50000 руб.");
				mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET min_price=%d WHERE id=%d", price, GetKioskData(kiosk_id, K_SQL_ID));
				mysql_query(mysql, query, false);
				SetKioskData(kiosk_id, K_MIN_PRICE, price);
				format(str_c, sizeof str_c, "Вы успешно поставили минимальную цену в {FFFFFF}%d руб.", price);
				SCM(playerid, 0xADCEEAFF, str_c);
			}
			case DIALOG_SELL_ITEM_KIOSK:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new count = strval(inputtext);
				new h_count = GetIteam(playerid, GetPVarInt(playerid, "SellItem"));
				new str_c[248];
				if(count > h_count) return SCM(playerid, 0xCECECEFF, "* У вас нет столько единиц этого предмета.");
                if(0 >= count) return SCM(playerid, 0xCECECEFF, "* Некорректное значение.");
				SetPVarInt(playerid, "SellItemCount", count);
				format(str_c, sizeof str_c, "{FFFFFF}Введите цену за {006400}1 {FFFFFF}шт.\nЦена не должна быть меньше {006400}%d {FFFFFF}руб.", GetKioskData(kiosk_id, K_MIN_PRICE));
				Dialog(playerid, DIALOG_SELL_ITEM_PRICE, DIALOG_STYLE_INPUT, "Продажа предмета", str_c, "Далее", "Назад");
			}
			case DIALOG_SELL_NUMBER_KIOSK:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new price = strval(inputtext);
				new str_c[248];
				if(!IsILNumeric(inputtext)) return SCM(playerid, COLOR_RED, "Ошибка ввода. Повторите попытку");
				if(!GetILPlayerStr("2000000000", inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену, до 2.000.000.000 руб");
				if(price < GetKioskData(kiosk_id, K_MIN_PRICE)) return SCM(playerid, 0xCECECEFF, "Цена не должна быть менее указаной в диалоге");
				SetPVarInt(playerid, "SellItemPrice", price);
				format(str_c, sizeof str_c, "{FFFFFF}Вы собираетесь продать {006400}'Автомобильный номер'{FFFFFF}.\nВ количестве: {006400}1 {FFFFFF}шт.\nЦена за одну единицу товара: {006400}%d {FFFFFF} руб.", GetPVarInt(playerid, "SellItemPrice"));
				Dialog(playerid, DIALOG_SELL_NUMBER_ACCEPT, DIALOG_STYLE_MSGBOX, "Продажа автомобильного номера", str_c, "Готово", "Назад");
			}
			case DIALOG_SELL_ACS_KIOSK:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new price = strval(inputtext);
				new str_c[248];
				if(!IsILNumeric(inputtext)) return SCM(playerid, COLOR_RED, "Ошибка ввода. Повторите попытку");
				if(!GetILPlayerStr("2000000000", inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену, до 2.000.000.000 руб");
				if(price < GetKioskData(kiosk_id, K_MIN_PRICE)) return SCM(playerid, 0xCECECEFF, "Цена не должна быть менее указаной в диалоге");
				SetPVarInt(playerid, "SellItemPrice", price);
				format(str_c, sizeof str_c, "{FFFFFF}Вы собираетесь продать {006400}'Аксессуар'{FFFFFF}.\nВ количестве: {006400}1 {FFFFFF}шт.\nЦена за одну единицу товара: {006400}%d {FFFFFF} руб.", GetPVarInt(playerid, "SellItemPrice"));
				Dialog(playerid, DIALOG_SELL_ACS_ACCEPT, DIALOG_STYLE_MSGBOX, "Продажа аксессуара", str_c, "Готово", "Назад");
			}
			case DIALOG_SELL_SKIN_KIOSK:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new price = strval(inputtext);
				new str_c[248];
				if(!IsILNumeric(inputtext)) return SCM(playerid, COLOR_RED, "Ошибка ввода. Повторите попытку");
				if(!GetILPlayerStr("2000000000", inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену, до 2.000.000.000 руб");
				if(price < GetKioskData(kiosk_id, K_MIN_PRICE)) return SCM(playerid, 0xCECECEFF, "Цена не должна быть менее указаной в диалоге");
				SetPVarInt(playerid, "SellItemPrice", price);
				format(str_c, sizeof str_c, "{FFFFFF}Вы собираетесь продать {006400}'Одежда'{FFFFFF}.\nВ количестве: {006400}1 {FFFFFF}шт.\nЦена за одну единицу товара: {006400}%d {FFFFFF} руб.", GetPVarInt(playerid, "SellItemPrice"));
				Dialog(playerid, DIALOG_SELL_SKIN_ACCEPT, DIALOG_STYLE_MSGBOX, "Продажа одежды", str_c, "Готово", "Назад");
			}
			case DIALOG_SELL_ITEM_PRICE:
			{
				if(!response) return 1;
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				new price = strval(inputtext);
				new str_c[248];
				new count = GetPVarInt(playerid, "SellItemCount");
				if(!IsILNumeric(inputtext)) return SCM(playerid, COLOR_RED, "Ошибка ввода. Повторите попытку");
				if(!GetILPlayerStr("2000000000", inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену, до 2.000.000.000 руб");
				if(price < GetKioskData(kiosk_id, K_MIN_PRICE)) return SCM(playerid, 0xCECECEFF, "Цена не должна быть менее указаной в диалоге");
				SetPVarInt(playerid, "SellItemPrice", price);
				format(str_c, sizeof str_c, "{FFFFFF}Вы собираетесь продать {006400}'Предмет'{FFFFFF}.\nВ количестве: {006400}%d {FFFFFF}шт.\nЦена за одну единицу товара: {006400}%d {FFFFFF} руб.", GetPVarInt(playerid, "SellItemCount"), GetPVarInt(playerid, "SellItemPrice"));
				if(!(1 <= count)) return SendClientMessage(playerid, 0xCECECEFF, "Неккоректное значение");
				Dialog(playerid, DIALOG_SELL_ITEM_ACCEPT, DIALOG_STYLE_MSGBOX, "Продажа предмета", str_c, "Готово", "Назад");
			}
			case DIALOG_BY_EXIT_NIZ:
			{
			    if(!response) return 1;
			    new vehicleid = GetPVarInt(playerid, "veh_id");
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				GetOwnableCarData(index, OC_POS_X) = GetOwnableCarData(index, OC_BY_POS_X);
				GetOwnableCarData(index, OC_POS_Y) = GetOwnableCarData(index, OC_BY_POS_Y);
				GetOwnableCarData(index, OC_POS_Z) = GetOwnableCarData(index, OC_BY_POS_Z);
				GetOwnableCarData(index, OC_ANGLE) = GetOwnableCarData(index, OC_BY_ANGLE);
				SendClientMessage(playerid, 0xFFDAB9FF, "Ваше т/с было снято с продажи");
				SendClientMessage(playerid, 0xFFA500FF, "Ваш транспорт был снят с продажи, припаркован на том месте, где находился до аренды и выгружен");
				if(GetOwnableCarData(index, OC_BY_ID) == 3)
				{
					bymestaniz[GetOwnableCarData(index, OC_MESTOID)] = 0;
				}
				new query[190];
			    format(query, sizeof query, "UPDATE ownable_cars SET inter=0,world=0 WHERE id=%d LIMIT 1",GetOwnableCarData(index, OC_SQL_ID));
			    mysql_tquery(mysql, query, "", "");
				SaveOwnableCar(vehicleid);
				UnloadPlayerOwnableCar(true, vehicleid);
			}
            case DIALOG_BUY_MARIH:
			{
			    if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 500000)) return SendClientMessage(playerid, -1, "У Вас недостаточно средств!");
				GiveIteam(playerid,172, 1, 5, 0);
				SCM(playerid, 0xCECECEFF, "{ff9900}Вы купили {FFFFFF}`Семена марихуаны` {ff9900}в количестве {FFFFFF}5 {ff9900}шт за {FFFFFF}500.000 {ff9900}руб");
				GivePlayerMoneyEx(playerid, -500000, "Покупка Марихуаны");
				return 1;
			}
			case DIALOG_KIOSK_MIN_PRICE:
			{
				if(!response) return 1;
				if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену налога");
				if(strlen(inputtext) > 9) return SendClientMessage(playerid, 0xFF6600FF, "Не больше 9-ти символов!");
				new nalog = strval(inputtext);
				if(!(500 <= nalog))
					return SendClientMessage(playerid, 0xCECECEFF, "Минимальная цена с 500 рублей.");
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				SetKioskData(kiosk_id, K_MIN_PRICE,nalog);
				new fmt_text[144];
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET min_price=%d WHERE id=%d", GetKioskData(kiosk_id, K_MIN_PRICE), GetKioskData(kiosk_id, K_SQL_ID));
				mysql_query(mysql, fmt_text, false);
				format(fmt_text, sizeof fmt_text,"Вы установили новую минимальную цену на продажу товара {FFFFFF}%d {FFA500}руб.",nalog);
				SendClientMessage(playerid, 0xFFA500FF, fmt_text);
			}
			case DIALOG_SELL_CAR_ELITE:
			{
				if(!response) return 1;
				if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену продажи");
				if(strlen(inputtext) > 9) return SendClientMessage(playerid, 0xFF6600FF, "Не больше 9-ти символов!");
				new sell_price = strval(inputtext);
				new vehicleid = GetPlayerVehicleID(playerid);
				new vehicleid1 = GetPlayerOwnableCarLast(playerid);
				if(vehicleid1 != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
                new index = GetVehicleData(vehicleid, V_ACTION_ID);
				if(!(3000 <= sell_price))
					return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должа быть от 3000 рублей");
				GetVehiclePos(vehicleid, GetOwnableCarData(index, OC_BY_POS_X), GetOwnableCarData(index, OC_BY_POS_Y), GetOwnableCarData(index, OC_BY_POS_Z));
				GetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_BY_ANGLE));
				if(bymestavis[1] == 0) SetVehiclePos(vehicleid, g_load_car_market[1][POS_MESTO_X_2],g_load_car_market[1][POS_MESTO_Y_2],g_load_car_market[1][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[1][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 1), bymestavis[1] = 1;
                else if(bymestavis[2] == 0) SetVehiclePos(vehicleid, g_load_car_market[2][POS_MESTO_X_2],g_load_car_market[2][POS_MESTO_Y_2],g_load_car_market[2][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[2][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 2), bymestavis[2] = 1;
				else if(bymestavis[3] == 0) SetVehiclePos(vehicleid, g_load_car_market[3][POS_MESTO_X_2],g_load_car_market[3][POS_MESTO_Y_2],g_load_car_market[3][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[3][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 3), bymestavis[3] = 1;
				else if(bymestavis[4] == 0) SetVehiclePos(vehicleid, g_load_car_market[4][POS_MESTO_X_2],g_load_car_market[4][POS_MESTO_Y_2],g_load_car_market[4][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[4][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 4), bymestavis[4] = 1;
				else if(bymestavis[5] == 0) SetVehiclePos(vehicleid, g_load_car_market[5][POS_MESTO_X_2],g_load_car_market[5][POS_MESTO_Y_2],g_load_car_market[5][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[5][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 5), bymestavis[5] = 1;
				else if(bymestavis[6] == 0) SetVehiclePos(vehicleid, g_load_car_market[6][POS_MESTO_X_2],g_load_car_market[6][POS_MESTO_Y_2],g_load_car_market[6][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[6][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 6), bymestavis[6] = 1;
				else if(bymestavis[7] == 0) SetVehiclePos(vehicleid, g_load_car_market[7][POS_MESTO_X_2],g_load_car_market[7][POS_MESTO_Y_2],g_load_car_market[7][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[7][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 7), bymestavis[7] = 1;
				else if(bymestavis[8] == 0) SetVehiclePos(vehicleid, g_load_car_market[8][POS_MESTO_X_2],g_load_car_market[8][POS_MESTO_Y_2],g_load_car_market[8][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[8][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 8), bymestavis[8] = 1;
				else if(bymestavis[9] == 0) SetVehiclePos(vehicleid, g_load_car_market[9][POS_MESTO_X_2],g_load_car_market[9][POS_MESTO_Y_2],g_load_car_market[9][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[9][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 9), bymestavis[9] = 1;
				else if(bymestavis[10] == 0) SetVehiclePos(vehicleid, g_load_car_market[10][POS_MESTO_X_2],g_load_car_market[10][POS_MESTO_Y_2],g_load_car_market[10][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[10][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 10), bymestavis[10] = 1;
				else if(bymestavis[11] == 0) SetVehiclePos(vehicleid, g_load_car_market[11][POS_MESTO_X_2],g_load_car_market[11][POS_MESTO_Y_2],g_load_car_market[11][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[11][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 11), bymestavis[11] = 1;
				else if(bymestavis[12] == 0) SetVehiclePos(vehicleid, g_load_car_market[12][POS_MESTO_X_2],g_load_car_market[12][POS_MESTO_Y_2],g_load_car_market[12][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[12][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 12), bymestavis[12] = 1;
				else if(bymestavis[13] == 0) SetVehiclePos(vehicleid, g_load_car_market[13][POS_MESTO_X_2],g_load_car_market[13][POS_MESTO_Y_2],g_load_car_market[13][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[13][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 13), bymestavis[13] = 1;
				else if(bymestavis[14] == 0) SetVehiclePos(vehicleid, g_load_car_market[14][POS_MESTO_X_2],g_load_car_market[14][POS_MESTO_Y_2],g_load_car_market[14][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[14][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 14), bymestavis[14] = 1;
				else if(bymestavis[15] == 0) SetVehiclePos(vehicleid, g_load_car_market[15][POS_MESTO_X_2],g_load_car_market[15][POS_MESTO_Y_2],g_load_car_market[15][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[15][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 15), bymestavis[15] = 1;
				else if(bymestavis[16] == 0) SetVehiclePos(vehicleid, g_load_car_market[16][POS_MESTO_X_2],g_load_car_market[16][POS_MESTO_Y_2],g_load_car_market[16][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[16][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 16), bymestavis[16] = 1;
				else if(bymestavis[17] == 0) SetVehiclePos(vehicleid, g_load_car_market[17][POS_MESTO_X_2],g_load_car_market[17][POS_MESTO_Y_2],g_load_car_market[17][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[17][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 17), bymestavis[17] = 1;
				else if(bymestavis[18] == 0) SetVehiclePos(vehicleid, g_load_car_market[18][POS_MESTO_X_2],g_load_car_market[18][POS_MESTO_Y_2],g_load_car_market[18][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[18][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 18), bymestavis[18] = 1;
				else if(bymestavis[19] == 0) SetVehiclePos(vehicleid, g_load_car_market[19][POS_MESTO_X_2],g_load_car_market[19][POS_MESTO_Y_2],g_load_car_market[19][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[19][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 19), bymestavis[19] = 1;
				else if(bymestavis[20] == 0) SetVehiclePos(vehicleid, g_load_car_market[20][POS_MESTO_X_2],g_load_car_market[20][POS_MESTO_Y_2],g_load_car_market[20][POS_MESTO_Z_2]),SetVehicleZAngle(vehicleid,g_load_car_market[20][POS_MESTO_ANGEL_2]), SetOwnableCarData(index, OC_MESTOID, 20), bymestavis[20] = 1;
				else return SendClientMessage(playerid, -1, "Все места на бу рынке заняты.");
				new str[300], fmt[64];
				if(GetPlayerPhone(playerid) != 0) format(fmt, sizeof fmt,"%s", GetPlayerPhone(playerid));
				else format(fmt, sizeof fmt,"отсутствует");
				format(str, sizeof str,
				"{FFA500}Модель:{FFFFFF} %s\n"\
				"{FFA500}Продавец:{FFFFFF} %s\n"\
				"{FFA500}Цена:{FFFFFF} %s {FFA500}руб\n"\
				"{FFA500}Телефон:{FFFFFF} %d",
				GetVehicleName(vehicleid), GetPlayerNameEx(playerid), formatInt(strval(inputtext)), fmt);
				CreateVehicleLabel(vehicleid, str, 0xFFFFFFFF, 0.0, 0.0, 1.0, 8);
				SendClientMessage(playerid, 0xFFA500FF, "Вы арендовали место на парковке на 60 минут. Сядьте в т/с, если хотите снять его с продажи.");
				SendClientMessage(playerid, 0xFFA500FF, "Внимание! Если вы покинете авторынок более чем на 3 минут(ы) весь ваш транспорт будет снят с продажи.");
				SendClientMessage(playerid, 0xFFA500FF, "Для смены цены продажи транспорта встаньте возле него и используйте {"#cW"}/cm_price.");
				SendClientMessage(playerid, 0xFFA500FF, "Так же можете предложить тест-драйв другому игроку {"#cW"}/cm_test_drive.");
				SetPlayerInBiz(playerid, GetPVarInt(playerid, "by_id"));
				SetVehicleParam(vehicleid, V_ENGINE, false);
				SetPlayerInterior(playerid, 4);
				LinkVehicleToInterior(vehicleid, 4);
				SetPlayerVirtualWorld(playerid, 263);
				SetVehicleVirtualWorld(vehicleid, 263);
				SetPVarInt(playerid, "in_by", 1);
				SetOwnableCarData(index, OC_BY_ID, 1);
				new businessid = GetPVarInt(playerid, "by_id");
				GivePlayerMoneyEx(playerid, -GetBusinessData(businessid, B_ARENDA_PRICE), "место на б/у рынке", true, true);
				AddBusinessProfit(playerid, businessid, GetBusinessData(businessid, B_ARENDA_PRICE), 0);
				return 1;
			}
			case DIALOG_SELL_CAR_NIZ:
			{
				if(!response) return 1;
				if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену продажи");
				if(strlen(inputtext) > 9) return SendClientMessage(playerid, 0xFF6600FF, "Не больше 9-ти символов!");
				new sell_price = strval(inputtext);
				new vehicleid = GetPlayerVehicleID(playerid);
				new vehicleid1 = GetPlayerOwnableCarLast(playerid);
				if(vehicleid1 != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
                new index = GetVehicleData(vehicleid, V_ACTION_ID);
				if(!(3000 <= sell_price))
					return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должа быть от 3000 рублей");
				GetVehiclePos(vehicleid, GetOwnableCarData(index, OC_BY_POS_X), GetOwnableCarData(index, OC_BY_POS_Y), GetOwnableCarData(index, OC_BY_POS_Z));
				GetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_BY_ANGLE));
				if(bymestaniz[1] == 0) SetVehiclePos(vehicleid, g_load_car_market[1][POS_MESTO_X_3],g_load_car_market[1][POS_MESTO_Y_3],g_load_car_market[1][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[1][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 1), bymestaniz[1] = 1;
                else if(bymestaniz[2] == 0) SetVehiclePos(vehicleid, g_load_car_market[2][POS_MESTO_X_3],g_load_car_market[2][POS_MESTO_Y_3],g_load_car_market[2][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[2][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 2), bymestaniz[2] = 1;
				else if(bymestaniz[3] == 0) SetVehiclePos(vehicleid, g_load_car_market[3][POS_MESTO_X_3],g_load_car_market[3][POS_MESTO_Y_3],g_load_car_market[3][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[3][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 3), bymestaniz[3] = 1;
				else if(bymestaniz[4] == 0) SetVehiclePos(vehicleid, g_load_car_market[4][POS_MESTO_X_3],g_load_car_market[4][POS_MESTO_Y_3],g_load_car_market[4][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[4][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 4), bymestaniz[4] = 1;
				else if(bymestaniz[5] == 0) SetVehiclePos(vehicleid, g_load_car_market[5][POS_MESTO_X_3],g_load_car_market[5][POS_MESTO_Y_3],g_load_car_market[5][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[5][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 5), bymestaniz[5] = 1;
				else if(bymestaniz[6] == 0) SetVehiclePos(vehicleid, g_load_car_market[6][POS_MESTO_X_3],g_load_car_market[6][POS_MESTO_Y_3],g_load_car_market[6][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[6][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 6), bymestaniz[6] = 1;
				else if(bymestaniz[7] == 0) SetVehiclePos(vehicleid, g_load_car_market[7][POS_MESTO_X_3],g_load_car_market[7][POS_MESTO_Y_3],g_load_car_market[7][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[7][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 7), bymestaniz[7] = 1;
				else if(bymestaniz[8] == 0) SetVehiclePos(vehicleid, g_load_car_market[8][POS_MESTO_X_3],g_load_car_market[8][POS_MESTO_Y_3],g_load_car_market[8][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[8][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 8), bymestaniz[8] = 1;
				else if(bymestaniz[9] == 0) SetVehiclePos(vehicleid, g_load_car_market[9][POS_MESTO_X_3],g_load_car_market[9][POS_MESTO_Y_3],g_load_car_market[9][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[9][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 9), bymestaniz[9] = 1;
				else if(bymestaniz[10] == 0) SetVehiclePos(vehicleid, g_load_car_market[10][POS_MESTO_X_3],g_load_car_market[10][POS_MESTO_Y_3],g_load_car_market[10][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[10][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 10), bymestaniz[10] = 1;
				else if(bymestaniz[11] == 0) SetVehiclePos(vehicleid, g_load_car_market[11][POS_MESTO_X_3],g_load_car_market[11][POS_MESTO_Y_3],g_load_car_market[11][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[11][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 11), bymestaniz[11] = 1;
				else if(bymestaniz[12] == 0) SetVehiclePos(vehicleid, g_load_car_market[12][POS_MESTO_X_3],g_load_car_market[12][POS_MESTO_Y_3],g_load_car_market[12][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[12][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 12), bymestaniz[12] = 1;
				else if(bymestaniz[13] == 0) SetVehiclePos(vehicleid, g_load_car_market[13][POS_MESTO_X_3],g_load_car_market[13][POS_MESTO_Y_3],g_load_car_market[13][POS_MESTO_Z_3]),SetVehicleZAngle(vehicleid,g_load_car_market[13][POS_MESTO_ANGEL_3]), SetOwnableCarData(index, OC_MESTOID, 13), bymestaniz[13] = 1;
				else return SendClientMessage(playerid, -1, "Все места на бу рынке заняты.");
				new str[300], fmt[64];
				if(GetPlayerPhone(playerid) != 0) format(fmt, sizeof fmt,"%s", GetPlayerPhone(playerid));
				else format(fmt, sizeof fmt,"отсутствует");
				format(str, sizeof str,
				"{FFA500}Модель:{FFFFFF} %s\n"\
				"{FFA500}Продавец:{FFFFFF} %s\n"\
				"{FFA500}Цена:{FFFFFF} %s {FFA500}руб\n"\
				"{FFA500}Телефон:{FFFFFF} %d",
				GetVehicleName(vehicleid), GetPlayerNameEx(playerid), formatInt(strval(inputtext)), fmt);
				CreateVehicleLabel(vehicleid, str, 0xFFFFFFFF, 0.0, 0.0, 1.0, 8);
				SendClientMessage(playerid, 0xFFA500FF, "Вы арендовали место на парковке на 60 минут. Сядьте в т/с, если хотите снять его с продажи.");
				SendClientMessage(playerid, 0xFFA500FF, "Внимание! Если вы покинете авторынок более чем на 3 минут(ы) весь ваш транспорт будет снят с продажи.");
				SendClientMessage(playerid, 0xFFA500FF, "Для смены цены продажи транспорта встаньте возле него и используйте {"#cW"}/cm_price.");
				SendClientMessage(playerid, 0xFFA500FF, "Так же можете предложить тест-драйв другому игроку {"#cW"}/cm_test_drive.");
				SetPlayerInBiz(playerid, GetPVarInt(playerid, "by_id"));
				SetVehicleParam(vehicleid, V_ENGINE, false);
				SetPlayerInterior(playerid, 4);
				LinkVehicleToInterior(vehicleid, 4);
				SetPlayerVirtualWorld(playerid, 261);
				SetVehicleVirtualWorld(vehicleid, 261);
				SetPVarInt(playerid, "in_by", 1);
				SetOwnableCarData(index, OC_BY_ID, 3);
				new businessid = GetPVarInt(playerid, "by_id");
				GivePlayerMoneyEx(playerid, -GetBusinessData(businessid, B_ARENDA_PRICE), "место на б/у рынке", true, true);
				AddBusinessProfit(playerid, businessid, GetBusinessData(businessid, B_ARENDA_PRICE), 0);
				return 1;
			}
			case DIALOG_SELL_CAR_SR:
			{
				if(!response) return 1;
				if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену продажи");
				if(strlen(inputtext) > 9) return SendClientMessage(playerid, 0xFF6600FF, "Не больше 9-ти символов!");
				new sell_price = strval(inputtext);
				new vehicleid = GetPlayerVehicleID(playerid);
				new vehicleid1 = GetPlayerOwnableCarLast(playerid);
				if(vehicleid1 != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
                new index = GetVehicleData(vehicleid, V_ACTION_ID);
				if(!(3000 <= sell_price))
					return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должа быть от 3000 рублей");
				GetVehiclePos(vehicleid, GetOwnableCarData(index, OC_BY_POS_X), GetOwnableCarData(index, OC_BY_POS_Y), GetOwnableCarData(index, OC_BY_POS_Z));
				GetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_BY_ANGLE));
                if(bymestasr[1] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[1][POS_MESTO_X_1],g_load_car_market[1][POS_MESTO_Y_1],g_load_car_market[1][POS_MESTO_Z_1],g_load_car_market[1][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 1), bymestasr[1] = 1;
                else if(bymestasr[2] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[2][POS_MESTO_X_1],g_load_car_market[2][POS_MESTO_Y_1],g_load_car_market[2][POS_MESTO_Z_1],g_load_car_market[2][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 2), bymestasr[2] = 1;
				else if(bymestasr[3] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[3][POS_MESTO_X_1],g_load_car_market[3][POS_MESTO_Y_1],g_load_car_market[3][POS_MESTO_Z_1],g_load_car_market[3][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 3), bymestasr[3] = 1;
				else if(bymestasr[4] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[4][POS_MESTO_X_1],g_load_car_market[4][POS_MESTO_Y_1],g_load_car_market[4][POS_MESTO_Z_1],g_load_car_market[4][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 4), bymestasr[4] = 1;
				else if(bymestasr[5] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[5][POS_MESTO_X_1],g_load_car_market[5][POS_MESTO_Y_1],g_load_car_market[5][POS_MESTO_Z_1],g_load_car_market[5][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 5), bymestasr[5] = 1;
				else if(bymestasr[6] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[6][POS_MESTO_X_1],g_load_car_market[6][POS_MESTO_Y_1],g_load_car_market[6][POS_MESTO_Z_1],g_load_car_market[6][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 6), bymestasr[6] = 1;
				else if(bymestasr[7] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[7][POS_MESTO_X_1],g_load_car_market[7][POS_MESTO_Y_1],g_load_car_market[7][POS_MESTO_Z_1],g_load_car_market[7][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 7), bymestasr[7] = 1;
				else if(bymestasr[8] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[8][POS_MESTO_X_1],g_load_car_market[8][POS_MESTO_Y_1],g_load_car_market[8][POS_MESTO_Z_1],g_load_car_market[8][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 8), bymestasr[8] = 1;
				else if(bymestasr[9] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[9][POS_MESTO_X_1],g_load_car_market[9][POS_MESTO_Y_1],g_load_car_market[9][POS_MESTO_Z_1],g_load_car_market[9][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 9), bymestasr[9] = 1;
				else if(bymestasr[10] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[10][POS_MESTO_X_1],g_load_car_market[10][POS_MESTO_Y_1],g_load_car_market[10][POS_MESTO_Z_1],g_load_car_market[10][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 10), bymestasr[10] = 1;
				else if(bymestasr[11] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[11][POS_MESTO_X_1],g_load_car_market[11][POS_MESTO_Y_1],g_load_car_market[11][POS_MESTO_Z_1],g_load_car_market[11][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 11), bymestasr[11] = 1;
				else if(bymestasr[12] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[12][POS_MESTO_X_1],g_load_car_market[12][POS_MESTO_Y_1],g_load_car_market[12][POS_MESTO_Z_1],g_load_car_market[12][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 12), bymestasr[12] = 1;
				else if(bymestasr[13] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[13][POS_MESTO_X_1],g_load_car_market[13][POS_MESTO_Y_1],g_load_car_market[13][POS_MESTO_Z_1],g_load_car_market[13][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 13), bymestasr[13] = 1;
				else if(bymestasr[14] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[14][POS_MESTO_X_1],g_load_car_market[14][POS_MESTO_Y_1],g_load_car_market[14][POS_MESTO_Z_1],g_load_car_market[14][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 14), bymestasr[14] = 1;
				else if(bymestasr[15] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[15][POS_MESTO_X_1],g_load_car_market[15][POS_MESTO_Y_1],g_load_car_market[15][POS_MESTO_Z_1],g_load_car_market[15][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 15), bymestasr[15] = 1;
				else if(bymestasr[16] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[16][POS_MESTO_X_1],g_load_car_market[16][POS_MESTO_Y_1],g_load_car_market[16][POS_MESTO_Z_1],g_load_car_market[16][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 16), bymestasr[16] = 1;
				else if(bymestasr[17] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[17][POS_MESTO_X_1],g_load_car_market[17][POS_MESTO_Y_1],g_load_car_market[17][POS_MESTO_Z_1],g_load_car_market[17][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 17), bymestasr[17] = 1;
				else if(bymestasr[18] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[18][POS_MESTO_X_1],g_load_car_market[18][POS_MESTO_Y_1],g_load_car_market[18][POS_MESTO_Z_1],g_load_car_market[18][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 18), bymestasr[18] = 1;
				else if(bymestasr[19] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[19][POS_MESTO_X_1],g_load_car_market[19][POS_MESTO_Y_1],g_load_car_market[19][POS_MESTO_Z_1],g_load_car_market[19][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 19), bymestasr[19] = 1;
				else if(bymestasr[20] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[20][POS_MESTO_X_1],g_load_car_market[20][POS_MESTO_Y_1],g_load_car_market[20][POS_MESTO_Z_1],g_load_car_market[20][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 20), bymestasr[20] = 1;
				else if(bymestasr[21] == 0) SetVehiclePosAc(vehicleid, g_load_car_market[21][POS_MESTO_X_1],g_load_car_market[21][POS_MESTO_Y_1],g_load_car_market[21][POS_MESTO_Z_1],g_load_car_market[21][POS_MESTO_ANGEL_1]), SetOwnableCarData(index, OC_MESTOID, 21), bymestasr[21] = 1;
				else return SendClientMessage(playerid, -1, "Все места на бу рынке заняты.");
				new str[300], fmt[64];
				if(GetPlayerPhone(playerid) != 0) format(fmt, sizeof fmt,"%s", GetPlayerPhone(playerid));
				else format(fmt, sizeof fmt,"отсутствует");
				format(str, sizeof str,
				"{FFA500}Модель:{FFFFFF} %s\n"\
				"{FFA500}Продавец:{FFFFFF} %s\n"\
				"{FFA500}Цена:{FFFFFF} %s {FFA500}руб\n"\
				"{FFA500}Телефон:{FFFFFF} %d",
				GetVehicleName(vehicleid), GetPlayerNameEx(playerid), formatInt(strval(inputtext)), fmt);
				CreateVehicleLabel(vehicleid, str, 0xFFFFFFFF, 0.0, 0.0, 1.0, 8);
				SendClientMessage(playerid, 0xFFA500FF, "Вы арендовали место на парковке на 60 минут. Сядьте в т/с, если хотите снять его с продажи.");
				SendClientMessage(playerid, 0xFFA500FF, "Внимание! Если вы покинете авторынок более чем на 3 минут(ы) весь ваш транспорт будет снят с продажи.");
				SendClientMessage(playerid, 0xFFA500FF, "Для смены цены продажи транспорта встаньте возле него и используйте {"#cW"}/cm_price.");
				SendClientMessage(playerid, 0xFFA500FF, "Так же можете предложить тест-драйв другому игроку {"#cW"}/cm_test_drive.");
				SetPlayerInBiz(playerid, GetPVarInt(playerid, "by_id"));
				SetVehicleParam(vehicleid, V_ENGINE, false);
				SetPlayerInterior(playerid, 4);
				LinkVehicleToInterior(vehicleid, 4);
				SetPlayerVirtualWorld(playerid, 262);
				SetVehicleVirtualWorld(vehicleid, 262);
				SetPVarInt(playerid, "in_by", 1);
				SetOwnableCarData(index, OC_BY_ID, 2);
				new businessid = GetPVarInt(playerid, "by_id");
				GivePlayerMoneyEx(playerid, -GetBusinessData(businessid, B_ARENDA_PRICE), "место на б/у рынке", true, true);
				AddBusinessProfit(playerid, businessid, GetBusinessData(businessid, B_ARENDA_PRICE), 0);
				return 1;
			}
			case DIALOG_KIOSK_NALOG:
			{
				if(!response) return 1;
				if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену налога");
				if(strlen(inputtext) > 9) return SendClientMessage(playerid, 0xFF6600FF, "Не больше 9-ти символов!");
				new nalog = strval(inputtext);
				if(!(1 <= nalog <= 25))
					return SendClientMessage(playerid, 0xCECECEFF, "Процент налога должен быть от 1 до 25.");
				new kiosk_id = GetNearestKiosk(playerid, 7.0);
				SetKioskData(kiosk_id, K_NALOG,nalog);
				new fmt_text[144];
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET nalog=%d WHERE id=%d", GetKioskData(kiosk_id, K_NALOG), GetKioskData(kiosk_id, K_SQL_ID));
				mysql_query(mysql, fmt_text, false);
				format(fmt_text, sizeof fmt_text,"Вы установили новый налог на продажу товара {FFFFFF}%d {FFA500}процента(ов).",nalog);
				SendClientMessage(playerid, 0xFFA500FF, fmt_text);
				UpdKioskss(playerid);
			}
			case DIALOG_ATM_BIZ_TAKE_MONEY:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(!GetILPlayerStr("2000000000", inputtext)) return SCM(playerid, COLOR_GREY, "С счета предприятия можно снять до 2.000.000.000 руб за раз");
						if(IsILNumeric(inputtext))
						{
							if(GetILPlayerInt(GetBusinessData(businessid, B_BALANCE), sum))
							{
								new query[128 + 1];
								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%s,b.balance=%s WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), sum), SetILPlayerInt(playerid, g_business[businessid][B_BALANCE], -sum), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);
								if(!mysql_errno())
								{
									format(g_business[businessid][B_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_business[businessid][B_BALANCE], -sum));
									GivePlayerMoneyEx(playerid, sum, "+ Снятие средств со счета Бизнеса", false, true);
									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На счету предприятия нет такой суммы");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка ввода, повторите попытку");
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_KIOSK_TAKE_MONEY:
			{
				new kiosksid = GetPVarInt(playerid, "ownablekiosk_id");
				if(kiosksid != -1)
				{
					if(response)
					{
						if(IsILNumeric(inputtext))
						{
							if(GetILPlayerStr(GetKioskData(kiosksid, K_BALANCE), inputtext))
							{
								new query[128 + 1];
								format(query, sizeof query, "-%s", inputtext);
								format(query, sizeof query, "UPDATE kiosk SET balance=%s WHERE id=%d", 
								SetILPlayerStr(playerid, g_kiosk[kiosksid][K_BALANCE], query), GetKioskData(kiosksid, K_SQL_ID));
								mysql_query(mysql, query, false);
								if(!mysql_errno())
								{
									format(query, sizeof query, "-%s", inputtext);
									format(g_kiosk[kiosksid][K_BALANCE], 21, "%s", SetILPlayerStr(playerid, g_kiosk[kiosksid][K_BALANCE], query));
									GivePlayerMoneyStr(playerid, inputtext, "+ Снятие средств со счета киоска");
									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На счету киоска нет такой суммы");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка ввода, повторите попытку");
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_NEFTENASOS_PUT_MONEY:
			{
				new neftid = GetPVarInt(playerid, "ownableneft_id");
				if(neftid == -1) return 1;
				if(!response) return ShowPlayerATMDialog(playerid);
				new sum = strval(inputtext);
				if(sum > 0 && IsNumeric(inputtext))
				{
					if(GetNeftData(neftid, N_BALANCE) >= sum)
					{
						new query[128 + 1];
						format(query, sizeof query, "UPDATE accounts a, neftenasos b SET a.money=%s,b.balance=%d WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), sum), GetNeftData(neftid, N_BALANCE)-sum, GetPlayerAccountID(playerid), GetNeftData(neftid, N_SQL_ID));
						mysql_query(mysql, query, false);
						if(!mysql_errno())
						{
							AddNeftData(neftid, N_BALANCE, -, sum);
							GivePlayerMoneyEx(playerid, sum, "+ Снятие средств со счета нефтенасоса", false, true);
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "На счету нефтенасоса нет такой суммы");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Ошибка ввода, повторите попытку");
			}
			case DIALOG_ATM_BIZ_PUT_MONEY:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						if(!GetILPlayerStr("2000000000", inputtext)) return SCM(playerid, COLOR_GREY, "На счет предприятия можно положить до 2.000.000.000 руб за раз");
						new sum = strval(inputtext);
						if(IsILNumeric(inputtext))
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), sum))
							{
								new query[128 + 1];
								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%s,b.balance=%s WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), -sum), SetILPlayerInt(playerid, g_business[businessid][B_BALANCE], sum), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);
								if(!mysql_errno())
								{
									format(g_business[businessid][B_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_business[businessid][B_BALANCE], sum));
									GivePlayerMoneyEx(playerid, -sum, "Пополнение счета Бизнеса", false, true);
									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка ввода, повторите попытку");
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_TRANSFER_MONEY_1:
			{
				if(response)
				{
					new transfer_id = strval(inputtext);
					if(transfer_id > 0 && IsILNumeric(inputtext))
					{
						SetPlayerBankTransfer(playerid, BT_ID, 0);
						SetPlayerBankTransfer(playerid, BT_UID, 0);
						new query[64 + 1];
						new Cache: result;
						format(query, sizeof query, "SELECT id, uid FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
						result = mysql_query(mysql, query);
						if(cache_num_rows())
							SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0)),
							SetPlayerBankTransfer(playerid, BT_UID, cache_get_row_int(0, 1));
						cache_delete(result);
						if(GetPlayerBankTransfer(playerid, BT_ID))
						{
							new to_player = GetPlayerIDBySqlID(GetPlayerBankTransfer(playerid, BT_UID));
							if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
							{
								return ShowPlayerATMTransfer(playerid);
							}
							else SCM(playerid, 0xc7590fFF, "Владелец счета должен находиться на сервере.");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Счета с таким номером не существует");
					}
					Dialog
					(
						playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT,
						"{FFD83D}Безналичный перевод",
						"{FFFFFF}Укажите номер банковского счета:",
						"Далее", "Отмена"
					);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TRANSFER_MONEY_2:
			{
				new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
				if(response && transfer_id)
				{
					if(!GetILPlayerStr("2000000000", inputtext)) return SCM(playerid, COLOR_GREY, "Перевод доступен до 2.000.000.000 руб за один раз"), ShowPlayerATMTransfer(playerid);
					new to_player = GetPlayerIDBySqlID(GetPlayerBankTransfer(playerid, BT_UID));
					if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SCM(playerid, 0xc7590fFF, "Владелец счета должен находиться на сервере."), ShowPlayerATMTransfer(playerid);
					new transfer_sum = strval(inputtext);
					if(IsILNumeric(inputtext))
					{
						if(GetILPlayerInt(GetPlayerBankMoney(playerid), transfer_sum))
						{
							new fmt_str[155];
							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.bank=%s,ba.balance=%s WHERE a.id=%d AND ba.id=%d", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -transfer_sum), SetILPlayerInt(playerid, GetBankAccountBalance(transfer_id), transfer_sum / 100 * 80), GetPlayerAccountID(playerid), transfer_id);
							mysql_query(mysql, fmt_str, false);
							if(!mysql_errno())
							{
								format(fmt_str, sizeof fmt_str, "+ Пополнения с банкомата %d руб", transfer_sum / 100 * 80);
								BankAccountLog(playerid, transfer_id, fmt_str);
								format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -transfer_sum));
								format(g_bank_account[to_player][transfer_id][BA_BALANCE], 21, "%s", SetILPlayerInt(playerid, GetBankAccountBalance(transfer_id), transfer_sum / 100 * 80));
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Откуда:\t\t\tОсновной счет\n"\
									"Куда:\t\t\t\tСчет №%d\n"\
									"Сумма:\t\t\t\t%d руб\n"\
									"{3caa3c}Коммисия:\t\t\t\t%d руб\n"\
									"{FFFFFF}Остаток на Вашем счету:\t%s руб",
									transfer_id,
									transfer_sum / 100 * 80,
									transfer_sum / 100 * 20,
									formatStr(GetPlayerBankMoney(playerid))
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99FF00}Перевод завершен", fmt_str, "Закрыть", "");
								new businessid = GetPlayerInBiz(playerid);
								AddBusinessProfit(playerid, businessid, transfer_sum / 100 * 20, 1);
								return PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 11)");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "На основном банковском счете недостаточно денег");
					}
					ShowPlayerATMTransfer(playerid);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_SELECT:
			{
				if(!response) return ShowPlayerATMDialog(playerid);
				switch(listitem + 1)
				{
					case 1:
					{
						type_page_cars[playerid] = 0;
						page_cars[playerid] = 1;
						ShowOwnableTickets(playerid, page_cars[playerid], 0);
					}
					case 2:
					{
						Dialog
						(
							playerid, DIALOG_ATM_TICKET_PAY, DIALOG_STYLE_INPUT,
							"{FFD83D}Оплата штрафа",
							"{FFFFFF}Введите номер штрафа для оплаты",
							"Далее", "Назад"
						);
					}
					case 3:
					{
						new query[90],
							Cache: result;
						mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d AND status=0", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);
						new rows = cache_num_rows();
						SetPVarInt(playerid, "AllTickets", 0);
						for(new i; i < rows; i++)
						{
							SetPVarInt(playerid, "AllTickets", GetPVarInt(playerid, "AllTickets") + cache_get_field_content_int(i, "amount"));
						}
						cache_delete(result);
						if(rows)
						{
							string_dialog[0] = EOS;
							format(string_dialog, sizeof string_dialog, "{FFFFFF}На ваше имя выписано {deb308}%d {FFFFFF}штрафов на сумму {deb308}%s руб.", rows, formatInt(GetPVarInt(playerid, "AllTickets")));
							Dialog(playerid, DIALOG_ATM_TICKET_PAY_ALL, DIALOG_STYLE_MSGBOX,"{FFD83D}Оплата всех штрафов",string_dialog,"Далее", "Назад");
						}
						else ShowPlayerATMDialog(playerid), SCM(playerid, -1, "У вас нет штрафов");
					}
				}
			}
			case DIALOG_ATM_TICKET_PAY_ALL:
			{
				if(!response) return ShowPlayerATMDialog(playerid);
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "AllTickets"))) return SCM(playerid, 0xe2c977FF, "У вас недостаточно денег для оплаты всех штрафов.");
				GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "AllTickets"), "Оплата всех штрафов");
				SCMF(playerid, 0xa6caf0FF, "Вы успешно оплатили все свои штрафы на сумму {FFFFFF}%s {a6caf0}руб.", formatInt(GetPVarInt(playerid, "AllTickets")));
				new query[64];
				mysql_format(mysql, query, sizeof query, "UPDATE tickets SET status=1 WHERE uid=%d", GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
			}
			case DIALOG_ATM_TICKET_LIST:
			{
				if(!response) return 1;
				if(GetPlayerListitemValue(playerid, listitem)) PayTicket(playerid, GetPlayerListitemValue(playerid, listitem));
			}
			case DIALOG_DRAG_RACING:
			{
				if(!response) return 1;
				if(listitem == 0) if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 1)) return SCM(playerid, COLOR_GREY, "У вас недостаточно средств, минимум 1 руб.");
				if(listitem == 1) if(GetIteam(playerid, 293) < 1) return SCM(playerid, COLOR_GREY, "У вас недостаточно средств, минимум 1 фишка.");
				if(listitem == 2) if(GetPlayerCurrentDonate(playerid) < 1) return SCM(playerid, COLOR_GREY, "У вас недостаточно средств, минимум 1 донат.");
				g_drag_racing[g_drag_racing_id[playerid]][E_BET] = listitem;
				BitStream_1(playerid, s_CefInterface, t_CefHide, "DragRacingStart");
				BitStream_2(playerid, s_CefInterface, t_CefShow, "DragRacingStart", "[1, [1, [2, 2], 0, 0]]");
				g_drag_racing[g_drag_racing_id[playerid]][E_TYPE] = 1;
			}
			case DIALOG_TAKE_CAR_PRIZE:
			{
			    if(!response) return RemovePlayerFromVehicle(playerid);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid)) return GameText(playerid, "~r~Недостаточно~n~слотов на транспорт", 3000, 2), RemovePlayerFromVehicle(playerid);
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					new model_id = GetVehicleModel(vehicleid);
					if(model_id == 0) return RemovePlayerFromVehicle(playerid);
					new Float: pos_xp, Float: pos_yp, Float: pos_zp,Float: angle = 180.0;
					GetPlayerPos(playerid, pos_xp, pos_yp, pos_zp);
					new query[220];
					format(query, sizeof query, "[Розыгрыш] Игрок: %s[%d] выиграл транспорт: %s", GetPlayerNameEx(playerid), playerid, GetVehicleInfo(model_id , VI_NAME));
					SendClientMessageToAll(0xFFA500FF, query);
					GiveCar(playerid, model_id, 1, 1, -1, pos_xp, pos_yp, pos_zp, angle, gettime());
					DestroyVehicleLabel(vehicleid);
					DestroyVehicle(vehicleid);
					SendClientMessage(playerid, 0x66CC00FF, "Поздравляем! Вы успешно забрали транспорт себе! Загрузить: {FFA500}/car");
				}
			}
			case DIALOG_PLAYER_BONUS:
			{
				if(!response) return 1;
				if(listitem == 0)
				{
					new count = GetPVarInt(playerid, "all_player_bonus");
					if(count < 1) return 1;
					GivePlayerMoneyEx(playerid, count, "Забрал все бонусы с /bonus");
					new query[148];
					format(query, sizeof query, "DELETE FROM player_bonus WHERE owner_id=%d", GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
					SCMF(playerid, 0x288ef0FF, "Вы забрали все бонусы в размере {ffd010}%s руб", formatInt(count));
					DeletePVar(playerid, "all_player_bonus");
				}
				else
				{
					new query[148],
						text[32],
						Cache: result;
					mysql_format(mysql, query, sizeof query, "SELECT * FROM player_bonus WHERE id=%d LIMIT 1", GetPlayerListitemValue(playerid, listitem - 1));
					result = mysql_query(mysql, query);
					new count = cache_get_field_content_int(0, "count");
					cache_get_field_content(0, "text", text);
					cache_delete(result);
					GivePlayerMoneyEx(playerid, count, "Забрал с бонусов");
					format(query, sizeof query, "DELETE FROM player_bonus WHERE id=%d", GetPlayerListitemValue(playerid, listitem - 1));
					mysql_query(mysql, query, false);
					SCMF(playerid, 0x288ef0FF, "Вы получили бонус в размере {ffd010}%s руб {288ef0}за %s", formatInt(count), text);
				}
			}
			case DIALOG_PLAYER_NOTIFICATION:
			{
				if(!response) return 1;
				new query[148],
					text[148],
					note_text[148],
					time[21],
					Cache: result;
				mysql_format(mysql, query, sizeof query, "SELECT * FROM notification WHERE id=%d LIMIT 1", GetPlayerListitemValue(playerid, listitem));
				result = mysql_query(mysql, query);
				cache_get_field_content(0, "text", text);
				cache_get_field_content(0, "note_text", note_text);
				cache_get_field_content(0, "time", time);
				cache_delete(result);
				string_dialog[0] = EOS;
				format(string_dialog, sizeof string_dialog, "Тип уведомления:\t\t\t%s\nДата и время:\t\t\t%s\n\n%s",text, time, note_text);
				Dialog(playerid, DIALOG_PLAYER_NOTIFICATION_2, DIALOG_STYLE_MSGBOX, "{FFFFFF}Информация уведомления", string_dialog, "Назад", "Закрыть");
				mysql_format(mysql, query, sizeof query, "UPDATE notification SET status=0 WHERE id=%d", GetPlayerListitemValue(playerid, listitem));
				mysql_query(mysql, query, false);
			}
			case DIALOG_PLAYER_NOTIFICATION_2:
			{
				if(!response) return 1;
				callcmd::notification(playerid);
			}
			case DIALOG_CAR_ACTIVE_ACS_LIST:
			{
				if(!response) return true;
				if(active_acs[playerid] != INVALID_VEHICLE_ID)
				{
					RemovePlayerFromVehicle(playerid);
					active_acs[playerid] = INVALID_VEHICLE_ID;
					active_acs_id[playerid] = -1;
				}
				new query[94],
					Cache: result;
				mysql_format(mysql, query, sizeof query, "SELECT * FROM cars_accessories WHERE id=%d LIMIT 1", GetPlayerListitemValue(playerid, listitem));
				result = mysql_query(mysql, query, true);
				new indx = cache_get_field_content_int(0, "indx");
				new model_id = cache_get_field_content_int(0, "model_id");
				cache_delete(result);
				active_acs_id[playerid] = GetPlayerListitemValue(playerid, listitem);
				new Float: x,
					Float: y,
					Float: z,
					Float: a;
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, a);
				if(model_id == 16229)  
					active_acs[playerid] = CreateVehicle(510, x, y, z, a, 0, 0, -1, 0, VEHICLE_ACTION_TYPE_ACTIVE_ACS, 0);
				if(model_id == 17163)  
					active_acs[playerid] = CreateVehicle(15683, x, y, z, a, 0, 0, -1, 0, VEHICLE_ACTION_TYPE_ACTIVE_ACS, 0);
				PutPlayerInVehicle(playerid, active_acs[playerid], 0);
				new vehicleid = GetPVarInt(playerid, "AcsVehicleCar");
				if(IsValidDynamicObject(car_accessories[vehicleid][indx])) DestroyDynamicObject(car_accessories[vehicleid][indx]);
				car_accessories[vehicleid][indx] = INVALID_OBJECT_ID;
			}
			case DIALOG_CAR_ACCESSORIES_LIST:
			{
				if(!response) return 1;
				if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
				new query[94],
					type,
                    Cache: result;
                mysql_format(mysql, query, sizeof query, "SELECT * FROM cars_accessories WHERE id=%d LIMIT 1", GetPlayerListitemValue(playerid, listitem));
                result = mysql_query(mysql, query, true);
				new indx = cache_get_field_content_int(0, "indx");
				new model_id = cache_get_field_content_int(0, "model_id");
                cache_delete(result);
				format(query, sizeof query, "DELETE FROM cars_accessories WHERE id=%d", GetPlayerListitemValue(playerid, listitem));
				mysql_query(mysql, query, false);
                if(indx == 0) type = 14;
				if(indx == 1) type = 15;
				if(indx == 2) type = 16;
				if(indx == 3) type = 17;
				if(indx == 4) type = 20;
				if(indx == 5) type = 21;
				GiveAcs(playerid, model_id, type);
				new vehicleid = GetPVarInt(playerid, "AcsVehicleCar");
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new car_id = GetOwnableCarData(index, OC_SQL_ID);
				LoadCarAccessories(car_id, vehicleid);
				SCM(playerid, 0x2B83DBFF, "Вы сняли украшение с транспорта");
			}
			case DIALOG_ATM_TICKET_PAY:
			{
				if(response)
				{
					new ticketid = strval(inputtext);
					PayTicket(playerid, ticketid);
				}
				ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_CHARITY:
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum >= 25000000 && put_sum <= 2000000000 && IsNumeric(inputtext))
					{
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), put_sum))
						{
							new fmt_str[148];
							format(fmt_str, sizeof fmt_str, "INSERT INTO charity (uid,money,time,name) VALUES (%d,%d,%d,'%s')", GetPlayerAccountID(playerid), put_sum, gettime(), GetPlayerNameEx(playerid));
							mysql_query(mysql, fmt_str, false);
							GivePlayerMoneyEx(playerid, -put_sum, "Благотворительность", true, true);
							format(fmt_str, sizeof fmt_str, "Вы сделали пожертвование в размере %d рублей", put_sum);
							SendClientMessage(playerid, 0x3399FFFF, fmt_str);
							new global_msg[256];
							format(global_msg, sizeof global_msg, "{F3FF02}%s {FFFFFF}сделал(а) пожертвование в размере {F81414}%d рублей {FFFFFF}Деньги пошли в фонд Microsoft.", GetPlayerNameEx(playerid), put_sum);
							SendClientMessageToAll(0xFFFFFF00, global_msg); 
							UpdateCharity();
							SetPlayerData(playerid, P_DOSTIJ20, GetPlayerData(playerid, P_DOSTIJ20) + put_sum);
							UpdatePlayerDatabaseInt(playerid, "dostij20", GetPlayerData(playerid, P_DOSTIJ20) + put_sum);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег");
						}
					}
					else
					{
						SendClientMessage(playerid, 0xCECECEFF, "Сумма пожертвования должна быть от 25.000.000 до 2.000.000.000 рублей.");
						ShowPlayerATMCharityDialog(playerid);
					}
				}
			}
			case DIALOG_HEALTH_BUSINESS:
			{
                if(response)
                {
				    new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
					new action_id = GetPickupInfo(pickupid, P_ACTION_ID);
				    new businessid = GetPlayerInBiz(playerid);
					if(businessid != -0)
					{
						if(businessid == action_id)
						{
							new time = gettime();
							if(GetPVarInt(playerid, "biz_health_use") <= time)
							{
								new price = BIZ_HEALTH_SERVICE_PRICE;
								if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
								{
									GivePlayerMoneyEx(playerid, -price, "Использование аптечки в бизнесе", true, true);
									if(GetBusinessData(businessid, B_PRODS) >= 1)
									{
										AddBusinessProfit(playerid, businessid, price, 1);
									}
									SetPlayerHealthEx(playerid, 99.0);
									SetPVarInt(playerid, "biz_health_use", time + 90); // 90 сек (1:30 минут)
								}
								else SendClientMessage(playerid, 0x999999FF, "Услуги медпункта стоят 3500 рублей");
							}
							else SendClientMessage(playerid, 0x999999FF, "Недавно Вы уже пользовались услугами медпункта");
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_KIOSK_NAME://надо
			{
				new str_len = strlen(inputtext);
				if(str_len > 25) return SendClientMessage(playerid, 0xCECECEFF, "Максимальная длина текста не более 25 символов");
				new kiosk_id = GetNearestKiosk(playerid, 7.0), fmt_text[128];
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET name='%s' WHERE id=%d", inputtext, GetKioskData(kiosk_id, K_SQL_ID));
				mysql_query(mysql, fmt_text, false);
				format(g_kiosk[kiosk_id][K_NAME],33,inputtext);
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL,sizeof STRING_GLOBAL,"{FF8800}Магазин №%d\n{0E0101}\"%s\"", GetKioskData(kiosk_id, K_SQL_ID),inputtext);
				SetDynamicObjectMaterialText(kiosktext[GetKioskData(kiosk_id, K_SQL_ID)], 0,STRING_GLOBAL, 120, "Arial", 20, 1, 0xFFFFFFFF, 0xFFFFFFFF, 1);
				SendClientMessage(playerid, 0xCECECEFF, "Вы успешно сменили название киоска");
			}
			case DIALOG_PAY_FOR_RENT:
			{
				if(!response) return 1;
				switch(listitem + 1)
				{
					case 1: // Заплатить за дом
					{
						ShowPlayerHousePayForRent(playerid);
						return 1;
					}
					case 2: // Оплатить аренду бизнеса
					{
						new query[256],
							Cache: result,
							biz_id,
							biz_name[64];
						mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);
						new rows = cache_num_rows();
						if(!rows)
							return SendClientMessage(playerid, 0x999999FF, "У вас не одного бизнеса во владении.");
						string_dialog[0] = EOS;
						for(new i = 0; i < rows; i ++)
						{
							biz_id = cache_get_field_content_int(i, "id");
							cache_get_field_content(i, "name", biz_name);
							format(query, sizeof query, "{FFFFFF}%d. - %s (№%d)<t>Владелец\n", i + 1, biz_name, biz_id);
							strcat(string_dialog, query);
							SetPlayerListitemValue(playerid, i, biz_id-1);
						}
						Dialog
						(
							playerid, DIALOG_OWNABLE_BIZ_OPLATA, DIALOG_STYLE_LIST,
							"{FFCD00}Выберите бизнес",
							string_dialog,
							"Выбрать", "Закрыть"
						);
						cache_delete(result);
						return 1;
					}
					case 3: // Оплатить аренду киоска
					{
						new query[256],
							Cache: result,
							biz_id,
							biz_name[64];
						mysql_format(mysql, query, sizeof query, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);
						new rows = cache_num_rows();
						if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного киоска во владении.");
						string_dialog[0] = EOS;
						for(new i = 0; i < rows; i ++)
						{
							biz_id = cache_get_field_content_int(i, "id");
							cache_get_field_content(i, "name", biz_name);
							format(query, sizeof query, "{FFFFFF}%d. - %s (№%d)\n", i + 1, biz_name, biz_id);
							strcat(string_dialog, query);
							SetPlayerListitemValue(playerid, i, biz_id-1);
						}
						Dialog
						(
							playerid, DIALOG_OWNABLE_KIOSK_OPLATA, DIALOG_STYLE_LIST,
							"{FFCD00}Выберите киоск",
							string_dialog,
							"Выбрать", "Закрыть"
						);
						cache_delete(result);
						return 1;
					}
					case 4: // Оплатить гараж
					{					
						new query[256],
							Cache: result,
							biz_id;
						mysql_format(mysql, query, sizeof query, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);
						new rows = cache_num_rows();
						if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного гаража во владении.");
						string_dialog[0] = EOS;
						for(new i = 0; i < rows; i ++)
						{
							biz_id = cache_get_field_content_int(i, "id");
							format(query, sizeof query, "{FFFFFF}%d. - Гараж (№%d)\n", i + 1, biz_id);
							strcat(string_dialog, query);
							SetPlayerListitemValue(playerid, i, biz_id-1);
						}
						Dialog
						(
							playerid, DIALOG_OWNABLE_GARAGE_OPLATA, DIALOG_STYLE_LIST,
							"{FFCD00}Выберите киоск",
							string_dialog,
							"Выбрать", "Закрыть"
						);
						cache_delete(result);
						return 1;
					}
					case 5: // Оплатить огород
					{
						new query[256],
							Cache: result,
							garden_id;
						mysql_format(mysql, query, sizeof query, "SELECT * FROM gardens WHERE owner_id='%d'", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);
						new rows = cache_num_rows();
						if(!rows)
							return SendClientMessage(playerid, 0x999999FF, "У вас нет огородов.");
						string_dialog[0] = EOS;
						for(new i = 0; i < rows; i ++)
						{
							garden_id = cache_get_field_content_int(i, "id");
							format(query, sizeof query, "%d.{FFFFFF} Огород №%d\n",i+1, garden_id);
							strcat(string_dialog, query);
							SetPlayerListitemValue(playerid, i, garden_id);
						}
						Dialog
						(
							playerid, DIALOG_GARDEN_LIST, DIALOG_STYLE_LIST,
							"{FFCD00}Огороды",
							string_dialog,
							"Выбрать", "Закрыть"
						);
						cache_delete(result);
						return 1;
					}
					case 6:
					{
						new query[256],
							Cache: result;
						format(query, sizeof query, "SELECT * FROM neftenasos WHERE owner_id='%d'", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);
						new rows = cache_num_rows();
						if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного нефтенасоса во владении.");
						string_dialog[0] = EOS;
						for(new i; i < rows; i ++)
						{
							new biz_id = cache_get_field_content_int(i, "id");
							format(query, sizeof query, "{FFFFFF}Нефтенасос №%d\n", biz_id);
							strcat(string_dialog, query);
							SetPlayerListitemValue(playerid, i, biz_id);
						}
						Dialog
						(
							playerid, DIALOG_OWNABLE_NEFTENASOS_LIST2, DIALOG_STYLE_LIST,
							"{FFCD00}Выберите нефтенасос",
							string_dialog,
							"Выбрать", "Закрыть"
						);
						cache_delete(result);
						return 1;
					}
				}
				ShowPlayerPayForRentDialog(playerid);
			}
			case DIALOG_GARDEN_LIST:
			{
			    if(response)
				{
				    new garden = GetPlayerListitemValue(playerid, listitem);
				    if(garden != -1)
				    {
				    	ShowPlayerGardenPayForRent(playerid,garden);
				    }
			    }
			}
			case DIALOG_PAY_FOR_RENT_GARDEN:
			{
				new businessid = GetPVarInt(playerid,"garden_id");
				if(businessid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
							new rent_time = GetGardenData(businessid, G_RENT_DATE);
							new rent_price = GetGardenData(businessid, G_RENT_PRICE);
							new total_price = rent_price * days;
							if((rent_time + days) <= 14)
							{
								if(GetILPlayerInt(GetPlayerBankMoney(playerid), total_price))
								{
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,gardens b SET a.bank=%s,b.rent=%d WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price), days + rent_time, GetPlayerAccountID(playerid), GetGardenData(businessid, G_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									if(!mysql_errno())
									{
										format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price));
										SetGardenData(businessid, G_RENT_DATE, days + rent_time);
										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду огорода еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");
									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 14 дней");
						}
						ShowPlayerGardenPayForRent(playerid,businessid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_BIZ:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
							new time = gettime();
							new rent_time = GetBusinessData(businessid, B_RENT_DATE);
							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2;
							new total_price = rent_price * days;
							if((rent_days + days) <= 14)
							{
								if(GetILPlayerInt(GetPlayerBankMoney(playerid), total_price))
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.bank=%s,b.rent_time=%d WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price), rent_time, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									if(!mysql_errno())
									{
										format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price));
										SetBusinessData(businessid, B_RENT_DATE, rent_time);
										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду бизнеса еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");
									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 14 дней");
						}
						ShowPlayerBusinessPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_KIOSK:
			{
				new businessid = GetPVarInt(playerid, "ownablekiosk_id");
				if(businessid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
							new rent_time = GetKioskData(businessid, K_RENT_DATE);
							new rent_price = GetKioskData(businessid, K_RENT_PRICE);
							new total_price = rent_price * days;
							if((rent_time + days) <= 14)
							{
								if(GetILPlayerInt(GetPlayerBankMoney(playerid), total_price))
								{
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,kiosk b SET a.bank=%s,b.rent=%d WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price), days + rent_time, GetPlayerAccountID(playerid), GetKioskData(businessid, K_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									if(!mysql_errno())
									{
										format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price));
										SetKioskData(businessid, K_RENT_DATE, days + rent_time);
										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду киоска еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");
									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 14 дней");
						}
						ShowPlayerKioskPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_GARAGE:
			{
				new garage_id = GetPVarInt(playerid, "ownablegarage_id");
				if(garage_id != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
							new time = gettime();
							new rent_time = GetGarageData(garage_id, G_RENT_DATE);
							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? GetGarageData(garage_id, G_RENT_PRICE) / 2 : GetGarageData(garage_id, G_RENT_PRICE);
							new total_price = rent_price * days;
							if((rent_days + days) <= 14)
							{
								if(GetILPlayerInt(GetPlayerBankMoney(playerid), total_price))
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,garage g SET a.bank=%s,g.rent_time=%d WHERE a.id=%d AND g.id=%d", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price), rent_time, GetPlayerAccountID(playerid), GetGarageData(garage_id, G_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									if(!mysql_errno())
									{
										format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price));
										SetGarageData(garage_id, G_RENT_DATE, rent_time);
										format(fmt_str, sizeof fmt_str, "С банковского счета снято {"#cGold"}%d руб", total_price);
										SendClientMessage(playerid, COLOR_WHITE, fmt_str);
										format(fmt_str, sizeof fmt_str, "Вы успешно оплатили гараж еще на {"#cGold"}%d дней", days);
										SendClientMessage(playerid, COLOR_WHITE, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, COLOR_GOLD, "На основном банковском счету не хватает денег для оплаты");
									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, COLOR_GOLD, "Вы не можете оплатить за аренду гаражa больше чем на 14 дней");
						}
						ShowPlayerGaragePayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_BANK:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							ShowPlayerBankAccounts(playerid);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT,
								"{FFD83D}Создание нового счета",
								"{FFFFFF}Введите название для нового счета.\n"\
								"Максимальная длина 20 символов:",
								"Ок", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_GARAGE_BUY:
			{
				if(response)
				{
					new garage_id = GetPVarInt(playerid, "buy_garage_id");
					if(IsPlayerInRangeOfPoint(playerid, 7.0, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z)))
					{
						if(!IsGarageOwned(garage_id))
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), GetGarageData(garage_id, G_PRICE)))
							{
								if(GetOwnableAuction(2, GetGarageData(garage_id, G_SQL_ID)) > 0) return SCM(playerid, COLOR_GREY, "* Данный гараж выставлен на аукцион");
								SendClientMessage(playerid, COLOR_WHITE, "Поздравляем! Вы купили гараж");
								BuyPlayerGarage(playerid, garage_id);
								if(GetGarageData(garage_id, G_TYPE) == 1)
								{
									AddPlayerData(playerid, P_CAR_SLOTS,+,1);
									UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
								}
								else if(GetGarageData(garage_id, G_TYPE) == 2)
								{
									AddPlayerData(playerid, P_CAR_SLOTS,+,3);
									UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
								}
								else if(GetGarageData(garage_id, G_TYPE) == 3)
								{
									AddPlayerData(playerid, P_CAR_SLOTS,+,4);
									UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
								}
								else if(GetGarageData(garage_id, G_TYPE) == 4)
								{
									AddPlayerData(playerid, P_CAR_SLOTS,+,5);
									UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
								}
								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{"#cGold"}Новый гараж", "{"#cW"}Вам нужно заплатить за аренду гаража в ближайшем отделением банка {"#cGold"}(H - GPS)", "Ок", "");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно денег для покупки этого гаража");
						}
						else
						{
							new fmt_str[64];
							format(fmt_str, sizeof fmt_str, "Этот гараж уже куплен. Владелец: %s", GetGarageData(garage_id, G_OWNER_NAME));
							SendClientMessage(playerid, 0xFF6600FF, fmt_str);
						}
					}
				}
				DeletePVar(playerid, "buy_biz_id");
			}
			case DIALOG_BIZ_SELL_TEST:
			{
			    new businessid = GetPlayerListitemValue(playerid, listitem) + 1;
			    SetPVarInt(playerid, "ownablebiz_id", businessid);
			    Dialog
				(
					playerid, DIALOG_BIZ_SELL, DIALOG_STYLE_MSGBOX,
					"{FFCD00}Продажа бизнеса",
					"{FFFFFF}Вы уверены что хотите продать свой бизнес государству?\n\n"\
					"Вам будет возвращено его стоимость за вычитом 30%\n"\
					"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
					"Если Вы хотите продать бизнес другому игроку,\n"\
					"используйте команду /sellmybiz",
					"Да", "Нет"
				);
			}
			case DIALOG_KIOSK_SELL:
			{
			    SellKiosk(playerid);
			}
			case DIALOG_KIOSK_SELL_LIST:
			{
			    if(!response) return 1;
			    new idx = GetPlayerListitemValue(playerid, listitem) + 1;
			    SetPVarInt(playerid, "ownablekiosk_id", idx);
			    new kiosk_id = idx;
			    if(kiosk_id != -1)
				{
					Dialog
					(
						playerid, DIALOG_KIOSK_SELL, DIALOG_STYLE_MSGBOX,
						"{FFCD00}Продажа киоска",
						"{FFFFFF}Вы уверены что хотите продать свой киоск государству?\n\n"\
						"Вам будет возвращено его стоимость за вычитом 30%\n"\
						"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
						"Если Вы хотите продать киоск другому игроку,\n"\
						"используйте команду /sellmystall",
						"Да", "Нет"
					);
				}
			}
			case DIALOG_GARAGE_SELL:
			{
				new garage_id = GetPVarInt(playerid, "ownablegarage_id");
				if(garage_id != -1)
				{
					if(response)
					{
						SellGarage(playerid);
					}
				}
			}
			case DIALOG_GARAGE_INFO:
			{
				if(response)
				{
					new garage_id = GetPVarInt(playerid, "ownablegarage_id");
					if(garage_id != -1)
					{
						ShowPlayerGarageDialog(playerid, GARAGE_OPERATION_PARAMS);
					}
				}
			}
			case DIALOG_GARAGE_ZAEZD:
			{
				new garage_id = GetPlayerUseListitem(playerid);
				if(garage_id >= 0 && response)
				{
					if(!GetGarageData(garage_id, G_LOCK_STATUS))
					{
						ZaezdPlayerToGarage(playerid, garage_id);
					}
					else GameText(playerid, "~r~Закрыт", 3000, 2);
				}
			}
			case DIALOG_GARAGE_PARAMS:
			{
				new garage_id = GetPVarInt(playerid, "ownablegarage_id");
				if(garage_id != -1)
				{
					if(response)
					{
						ShowPlayerGarageDialog(playerid, listitem + 1);
					}
					else callcmd::garage(playerid, "");
				}
			}
			case DIALOG_GARAGE_IMPROVEMENTS:
			{
				new garage_id = GetPVarInt(playerid, "ownablegarage_id");
			    if(response)
			    {
					switch(listitem + 1)
					{
					    case 1:
					    {
					        if(GetGarageData(garage_id, G_IMPROVEMENTS) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Данное улучшение уже куплено");
					        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 55000)) return SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно средств");
							SetGarageData(garage_id, G_IMPROVEMENTS, 1);
							new query[75];
							mysql_format(mysql, query, sizeof query, "UPDATE `garage` SET `improvements`=%d WHERE `id`=%d LIMIT 1", GetGarageData(garage_id, G_IMPROVEMENTS), GetGarageData(garage_id, G_SQL_ID));
							mysql_query(mysql, query, false);
							SendClientMessage(playerid, 0xFFD83DFF, "Вы приобрели улучшение '{"#cW"}Оформление субсиддии{FFCC00}'");
							GivePlayerMoneyEx(playerid, -55000, "Улучшение гаража", true, true);
					    }
						case 2:
					    {
							if(GetGarageData(garage_id, G_IMPROVEMENTS) == 0) return SendClientMessage(playerid, 0xFF6600FF, "Сначало купите 1 уровень улучшения");
					        if(GetGarageData(garage_id, G_IMPROVEMENTS) > 1) return SendClientMessage(playerid, 0xFF6600FF, "Данное улучшение уже куплено");
					        if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 200000)) return SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно средств");
							SetGarageData(garage_id, G_IMPROVEMENTS, 2);
							new query[75];
							mysql_format(mysql, query, sizeof query, "UPDATE `garage` SET `improvements`=%d WHERE `id`=%d LIMIT 1", GetGarageData(garage_id, G_IMPROVEMENTS), GetGarageData(garage_id, G_SQL_ID));
							mysql_query(mysql, query, false);
							SetGarageData(garage_id, G_WORKBENCH_LABEL, CreateDynamic3DTextLabel("{CB9E3A}Верстак\n{FFFFFF}Подойдите для взаимодействия", COLOR_GOLD, g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][0],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][1],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][2] + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, garage_id + 2000, -1, -1, 50.0));
							SendClientMessage(playerid, 0xFFD83DFF, "Вы приобрели улучшение '{"#cW"}Верстак{FFCC00}'");
							GivePlayerMoneyEx(playerid, -200000, "Улучшение гаража", true, true);
					    }
					}
				}
				else callcmd::garage(playerid, "");
			}
			case DIALOG_GARAGE_ENTER:
			{
				new garage_id = GetPlayerUseListitem(playerid);
				if(garage_id >= 0 && response)
				{
					if(!GetGarageData(garage_id, G_LOCK_STATUS))
					{
						EnterPlayerToGarage(playerid, garage_id);
					}
					else GameText(playerid, "~r~Закрыт", 3000, 2);
				}
			}
			case DIALOG_BANK_ACCOUNTS:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: ShowPlayerATMDialog(playerid);
						case 1..(MAX_BANK_ACCOUNTS):
						{
							new accountid = GetPlayerListitemValue(playerid, listitem - 1);
							if(IsValidBankAccount(playerid, accountid))
							{
								SetPlayerUseListitem(playerid, accountid);
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_LOGIN, DIALOG_STYLE_PASSWORD,
									"{FFD83D}Авторизация",
									"{FFFFFF}Введите PIN-код счета:",
									"Ввести", "Отмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_LOGIN:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						new pin_len = strlen(GetBankAccountData(playerid, accountid, BA_PIN_CODE));
						if(!strcmp(GetBankAccountData(playerid, accountid, BA_PIN_CODE), inputtext, false) && pin_len && len)
						{
							ShowPlayerBankAccountOperation(playerid);
						}
						else
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF9900}Ошибка",
								"{FFFFFF}Вы допустили ошибку при вводе PIN-кода",
								"Закрыть", ""
							);
						}
					}
				}
			}
			case DIALOG_BANK_ACCOUNT_OPERATION:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						switch(listitem + 1)
						{
							case 1: // Информация о счете
							{
								UpdateBankAccountData(playerid, accountid);
								new fmt_str[128];
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Номер счета:\t\t%d\n"\
									"Наименование:\t%s\n"\
									"Баланс:\t\t{00CC66}%s руб",
									GetBankAccountData(playerid, accountid, BA_ID),
									GetBankAccountData(playerid, accountid, BA_NAME),
									formatStr(GetBankAccountData(playerid, accountid, BA_BALANCE))
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFD83D}Информация", fmt_str, "Вернуться", "");
							}
							case 2: // История операций
							{
								ShowPlayerBankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID));
							}
							case 3: // Снять деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
									"{FFD83D}Снять деньги",
									"{FFFFFF}Укажите сумму:",
									"Снять", "Отмена"
								);
							}
							case 4: // Положить деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
									"{FFD83D}Положить деньги",
									"{FFFFFF}Укажите сумму:",
									"Положить", "Отмена"
								);
							}
							case 5: // Перевести на другой счет
							{
								if(GetPlayerLevel(playerid) > 3)
								{
									Dialog
									(
										playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
										"{FFD83D}Перевод средств",
										"{FFFFFF}Укажите номер счета, на который\n"\
										"хотите осуществить перевод:",
										"Далее", "Отмена"
									);
								}
								else SendClientMessage(playerid, 0x999999FF, "Перевод денег доступен только со 3 уровня");
							}
							case 6: // Переименовать счет
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
									"{FFD83D}Переименование счета",
									"{FFFFFF}Введите новое название для этого счета.\n"\
									"Максимальная длина 20 символов:",
									"Ок", "Отмена"
								);
							}
							case 7: // Изменить PIN-код
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
									"{FFD83D}Изменение PIN-кода",
									"{FFFFFF}Введите новый PIN-код.\n"\
									"Длина от 4 до 8 цифр:",
									"Ок", "Отмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_INFO:
			{
				ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TAKE_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						if(IsILNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);
							new fmt_str[155];
							new money_str[23];
							format(money_str, sizeof money_str, "-%s", inputtext);
							if(GetILPlayerStr(GetBankAccountData(playerid, accountid, BA_BALANCE), inputtext))
							{
								format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=%s WHERE id=%d", SetILPlayerStr(playerid, GetBankAccountData(playerid, accountid, BA_BALANCE), money_str), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);
								if(!mysql_errno())
								{
									GivePlayerMoneyStr(playerid, inputtext, "Снятие с банк. счета (банк)");
									format(g_bank_account[playerid][accountid][BA_BALANCE], 21, "%s", SetILPlayerStr(playerid, GetBankAccountData(playerid, accountid, BA_BALANCE), money_str));
									format(fmt_str, sizeof fmt_str, "- Снятие наличных %d руб", inputtext);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет:<t><t>№%d\n"\
										"Вы сняли:<t>{FF9900}%s руб\n"\
										"{FFFFFF}Остаток:<t>%s руб",
										GetBankAccountData(playerid, accountid, BA_ID),
										formatStr(inputtext),
										formatStr(GetBankAccountData(playerid, accountid, BA_BALANCE))
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Операция завершена успешно", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Недостаточно средств. Текущий баланс счета №%d: {009966}%s руб", GetBankAccountData(playerid, accountid, BA_ID), formatStr(GetBankAccountData(playerid, accountid, BA_BALANCE)));
								SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
							}
						}
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
							"{FFD83D}Снять деньги",
							"{FFFFFF}Укажите сумму:",
							"Снять", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_PUT_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						if(IsILNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);
							new fmt_str[155];
							new money_str[23];
							format(money_str, sizeof money_str, "-%s", inputtext);
							if(GetILPlayerStr(GetPlayerMoneyEx(playerid), inputtext))
							{
								format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=%s WHERE id=%d", SetILPlayerStr(playerid, GetBankAccountData(playerid, accountid, BA_BALANCE), inputtext), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);
								if(!mysql_errno())
								{
									GivePlayerMoneyStr(playerid, money_str, "Пополнение банк. счета (банк)");
									format(g_bank_account[playerid][accountid][BA_BALANCE], 21, "%s", SetILPlayerStr(playerid, GetBankAccountData(playerid, accountid, BA_BALANCE), inputtext));
									format(fmt_str, sizeof fmt_str, "+ Пополнение на сумму %d руб", inputtext);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет:\t\t\t№%d\n"\
										"Вы положили:\t{00CC00}%s руб\n"\
										"{FFFFFF}Итоговый баланс:\t%s руб",
										GetBankAccountData(playerid, accountid, BA_ID),
										formatStr(inputtext),
										formatStr(GetBankAccountData(playerid, accountid, BA_BALANCE))
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Операция завершена успешно", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
							}
							else SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств");
						}
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
							"{FFD83D}Положить деньги",
							"{FFFFFF}Укажите сумму:",
							"Положить", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_1:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_id = strval(inputtext);
						if(transfer_id > 0 && IsNumeric(inputtext))
						{
							new fmt_str[64 + 1];
							new Cache: result;
							new rows;
							format(fmt_str, sizeof fmt_str, "SELECT id,name,uid FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
							result = mysql_query(mysql, fmt_str);
							if((rows = cache_num_rows()))
							{
								SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));
								SetPlayerBankTransfer(playerid, BT_UID, cache_get_row_int(0, 2));
								cache_get_row(0, 1, g_player_bank_transfer[playerid][BT_NAME], mysql, 21);
							}
							cache_delete(result);
							if(rows)
							{
								new to_player = GetPlayerIDBySqlID(GetPlayerBankTransfer(playerid, BT_UID));
								if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
								{
									if(GetBankAccountData(playerid, accountid, BA_ID) != GetPlayerBankTransfer(playerid, BT_ID)) return ShowPlayerBankAccountTransfer(playerid, accountid);
									else return SCM(playerid, 0xc7590fFF, "Вы не можете совершить перевод на один и тот же счет.");
								}
								else SCM(playerid, 0xc7590fFF, "Владелец счета должен находиться на сервере.");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Счета с таким номером не существует");
						}
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
							"{FFD83D}Перевод средств",
							"{FFFFFF}Укажите номер счета, на который\n"\
							"хотите осуществить перевод:",
							"Далее", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_2:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_sum = strval(inputtext);
						new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
						new to_player = GetPlayerIDBySqlID(GetPlayerBankTransfer(playerid, BT_UID));
						if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SCM(playerid, 0xc7590fFF, "Владелец счета должен находиться на сервере."), ShowPlayerATMTransfer(playerid);
						if(!GetILPlayerStr("2000000000", inputtext)) return SCM(playerid, COLOR_GREY, "Перевод доступен до 2.000.000.000 руб за один раз"), ShowPlayerATMTransfer(playerid);
						if(transfer_sum > 0 && IsILNumeric(inputtext))
						{
							//UpdateBankAccountData(playerid, accountid);
							//new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);
							if(GetILPlayerInt(GetBankAccountData(playerid, accountid, BA_BALANCE), transfer_sum))
							{
								new fmt_str[160];
								if(GetBankAccountData(playerid, accountid, BA_ID) != transfer_id)
								{
									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=%s WHERE id=%d LIMIT 1", SetILPlayerInt(playerid, GetBankAccountData(playerid, accountid, BA_BALANCE), -transfer_sum), GetBankAccountData(playerid, accountid, BA_ID));
									mysql_query(mysql, fmt_str, false);
									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=%s WHERE id=%d LIMIT 1", SetILPlayerInt(playerid, GetBankAccountBalance(transfer_id), transfer_sum / 100 * 80), transfer_id);
									mysql_query(mysql, fmt_str, false);
									//SetBankAccountData(playerid, accountid, BA_BALANCE, balance - transfer_sum);
									format(g_bank_account[playerid][accountid][BA_BALANCE], 21, "%s", SetILPlayerInt(playerid, GetBankAccountData(playerid, accountid, BA_BALANCE), -transfer_sum));
									format(g_bank_account[to_player][transfer_id][BA_BALANCE], 21, "%s", SetILPlayerInt(playerid, GetBankAccountBalance(transfer_id), transfer_sum / 100 * 80));
								}
								format(fmt_str, sizeof fmt_str, "- Перевод %d руб на счет №%d", transfer_sum / 100 * 80, transfer_id);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);
								format(fmt_str, sizeof fmt_str, "+ Перевод %d руб со счета №%d", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
								BankAccountLog(playerid, transfer_id, fmt_str);
								SetPlayerBankTransfer(playerid, BT_ID, 0);
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Со счета:\t\t\t№%d\n"\
									"На счет:\t\t\t№%d\n"\
									"Cумма перевода:\t\t{FF9900}%s руб\n"\
									"{3caa3c}Коммисия:\t\t\t\t%s руб\n"\
									"{FFFFFF}Остаток на Вашем счете:\t{00CC66}%s руб",
									GetBankAccountData(playerid, accountid, BA_ID),
									transfer_id,
									formatInt(transfer_sum / 100 * 80),
									formatInt(transfer_sum / 100 * 20),
									formatStr(GetBankAccountData(playerid, accountid, BA_BALANCE))
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Перевод успешно выполнен", fmt_str, "Вернуться", "");
								new businessid = GetPlayerInBiz(playerid);
								AddBusinessProfit(playerid, businessid, transfer_sum / 100 * 20, 0);
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "На счету недостаточно средств для перевода");
								ShowPlayerBankAccountTransfer(playerid, accountid);
							}
						}
						else ShowPlayerBankAccountTransfer(playerid, accountid);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_NAME:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						if(3 <= len <= 20)
						{
							if(!IsABadBankAccountName(inputtext))
							{
								new fmt_str[128];
								mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);
								if(!mysql_errno())
								{
									format(g_bank_account[playerid][accountid][BA_NAME], 21, "%s", inputtext);
									format(fmt_str, sizeof fmt_str, "* Переименование счета на %s", inputtext);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет успешно переименован.\n"\
										"Теперь он будет доступен под названием %s",
										GetBankAccountData(playerid, accountid, BA_NAME)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFD83D}Завершение", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 10)");
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Недопустимые символы в новом названии");
								SendClientMessage(playerid, 0xFF6600FF, "Можно использовать {FFCC15}русские {FF6600}и {FFCC15}английские {FF6600}буквы, а также {FFCC15}цифры");
							}
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Длина названия счета может быть от {FFCC15}3 до 20 {FF6600}символов");
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
							"{FFD83D}Переименование счета",
							"{FFFFFF}Введите новое название для этого счета.\n"\
							"Максимальная длина 20 символов:",
							"Ок", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_PIN:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						if(4 <= len <= 8 && IsNumeric(inputtext))
						{
							new fmt_str[128];
							mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET pin='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
							mysql_query(mysql, fmt_str, false);
							if(!mysql_errno())
							{
								format(g_bank_account[playerid][accountid][BA_PIN_CODE], 9, "%s", inputtext);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), "* Изменение PIN-кода");
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}PIN-код успешно изменен.\n"\
									"Рекомендуем сделать скрин (F8) чтобы не забыть его: {CCFF00}%s",
									GetBankAccountData(playerid, accountid, BA_PIN_CODE)
								);
								return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFD83D}Изменение PIN", fmt_str, "Вернуться", "");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 10)");
						}
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
							"{FFD83D}Изменение PIN-кода",
							"{FFFFFF}Введите новый PIN-код.\n"\
							"Длина от 4 до 8 цифр:",
							"Ок", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_RAZDEVALKA:
			{
				if(!response) return 1;
				if(GetPlayerSkin(playerid) == GetPlayerData(playerid, P_OSKIN))
				{
					SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
					SendClientMessage(playerid, -1, "Вы успешно сняли рабочую форму");
				}
				else
				{
					SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
					SendClientMessage(playerid, -1, "Вы успешно надели рабочую форму");
				}
			}
			case DIALOG_RAZDEVALKAM:
			{
				if(!response)
				{
    				SetPVarInt(playerid, "mechanic", 0);
					SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
					SendClientMessage(playerid, -1, "Вы успешно сняли рабочую форму");
				}
				else
				{
    				SetPVarInt(playerid, "mechanic", 1);
					SetPlayerSkin(playerid, 268);
					SendClientMessage(playerid, -1, "{}Используйте{} /end{} чтобы вернуть свою внешность");
				}
			}
			case DIALOG_BUY_LIC: //поэт
			{
				if(!response)
				{
					SCM(playerid,COLOR_RED, "Вы успешно отказались от комплекта с лицензиями.");
				}
				else
				{
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 9500000)) return SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					GivePlayerMoneyEx(playerid, -9500000, "Покупка лицензий", true, true);
					SetPlayerData(playerid, P_DRIVING_LIC, 2); 
					SetPlayerData(playerid, P_WEAPON_LIC, 1); 
					UpdatePlayerDatabaseInt(playerid, "driving_lic", 2);
					UpdatePlayerDatabaseInt(playerid, "weapon_lic", 1); 
					SCM(playerid,COLOR_GOLD, "Вы успешно приобрели весь комплект лицензий.");
				}
			}
			case DIALOG_BANK_CREATE_ACCOUNT:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(3 <= len <= 20)
					{
						if(!IsABadBankAccountName(inputtext))
						{
							new query[128];
							new Cache: result;
							new total_accounts;
							format(query, sizeof query, "SELECT COUNT(*) FROM bank_accounts WHERE uid=%d", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query);
							total_accounts = cache_get_row_int(0, 0);
							cache_delete(result);
							if(total_accounts < MAX_BANK_ACCOUNTS)
							{
								mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts (uid,name,reg_time) VALUES (%d,'%e',%d)", GetPlayerAccountID(playerid), inputtext, gettime());
								mysql_query(mysql, query, false);
								if(!mysql_errno())
								{
									Dialog
									(
										playerid, DIALOG_BANK_CREATED_ACCOUNT, DIALOG_STYLE_MSGBOX,
										"{FFD83D}Счет создан",
										"{FFFFFF}Вы создали новый счет в банке.\n\n"\
										"Для доступа к нему используйте PIN-код {00FF66}0000{FFFFFF}. После входа\n"\
										"настоятельно рекомендуем изменить его на более сложный.\n"\
										"Это поможет защитить счет от несанкционированного доступа.",
										"Готово", ""
									);
								}
							}
							else Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Лимит счетов", "{FFFFFF}Можно создать не более восьми банковских счетов", "Ок", "");
						}
						else
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF3300}Ошибка",
								"{FFFFFF}Операция запрещена. Недопустимые символы в названии счета\n"\
								"Можно использовать {FFCC15}русские {FFFFFF}и {FFCC15}английские {FFFFFF}буквы, а также {FFCC15}цифры",
								"Выход", ""
							);
						}
					}
					else
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF3300}Ошибка",
							"{FFFFFF}Длина названия счета может быть от {FFCC15}3 до 20 {FFFFFF}символов",
							"Закрыть", ""
						);
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_CREATED_ACCOUNT:
			{
				ShowPlayerBankDialog(playerid);
			}
			case DIALOG_PHONE_CALL:
			{
				if(response)
				{
					new number = strval(inputtext);
					if(number >= 0 && strlen(inputtext))
					{
						new params[16];
						valstr(params, number);
						callcmd::c(playerid, params);
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Ошибка набора");
				}
			}
			case DIALOG_PHONE_CALL_BALANCE:
			{
				SetPlayerPhoneUseState(playerid, false);
			}
			case DIALOG_JAIL_TRADE: //поэт
			{
				if(!response) return 1;
				switch(listitem)
				{
					case 0:
					{
						if (playerCigarettes[playerid] >= 3) {
							playerCigarettes[playerid] -= 3;
							SetPVarInt(playerid, "Phone_access", 1);
							SendClientMessage(playerid, COLOR_GREY, "* Вы купили товар.");
						} else {
							SendClientMessage(playerid, COLOR_RED, "* У вас недостаточно сигарет для покупки. Вам нужно 3 сигареты.");
						}
					}
					case 1:
					{
						if (playerCigarettes[playerid] >= 5) {
							playerCigarettes[playerid] -= 5;
							GivePlayerWeapon(playerid, 4, 1);
							SendClientMessage(playerid, COLOR_GREY, "* Вы купили товар.");
						} else {
							SendClientMessage(playerid, COLOR_RED, "* У вас недостаточно сигарет для покупки. Вам нужно 5 сигареты.");
						}
					}
					case 2:
					{
						if (playerCigarettes[playerid] >= 15) {
							playerCigarettes[playerid] -= 15;
							GivePlayerWeapon(playerid, 6, 1);
							SendClientMessage(playerid, COLOR_GREY, "* Вы купили товар.");
						} else {
							SendClientMessage(playerid, COLOR_RED, "* У вас недостаточно сигарет для покупки. Вам нужно 15 сигареты.");
						}
					}
					case 3:
					{
						SendClientMessage(playerid, 0xFF6600FF, "В данный момент вы не можете использовать данную функцию.");
					}
					case 4:
					{
						if (playerCigarettes[playerid] >= 10) 
						{
							playerCigarettes[playerid] -= 10;
							SetPlayerData(playerid, P_NAKOLKA, GetPlayerData(playerid, P_NAKOLKA) + 1),
							SendClientMessage(playerid, COLOR_GREY, "* Вы купили +1 к тегущей наколке.");
						} else {
							SendClientMessage(playerid, COLOR_RED, "* У вас недостаточно сигарет для покупки. Вам нужно 10 сигареты.");
						}
					}
				}
			}	
			case DIALOG_CONFIG:
			{
				if(!response) return 1;
				switch(listitem)
				{
					case 0, 1, 2:
					{
						SendClientMessage(playerid, -1, "Используйте /setrates чтобы изменить");
					}
					case 3:
					{
						if(Test_server == 0)
						{
							Test_server = 1;
							SendClientMessage(playerid, -1, "Вы успешно закрыли севрер");
						}
						else
						{
							Test_server = 0;
							SendClientMessage(playerid, -1, "Вы успешно открыли сервер");
						}
						SaveServerConfig();
					}
					case 4:
					{
						new query[128];
						format(query, sizeof query, "SELECT name FROM test_user");
						mysql_tquery(mysql, query, "ShowTestPlayer", "i", playerid);
					}
					case 5:
					{
						SendClientMessage(playerid, -1, "Используйте /addzbtplayer чтобы добавить");
					}
					case 6:
					{
						SendClientMessage(playerid, -1, "Используйте /delzbtplayer чтобы удалить");
					}
				}
			}
			case DIALOG_INFO_HELP:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
						Dialog
						(
						playerid, DIALOG_HELP_CMD, DIALOG_STYLE_LIST,
						"{FFFFFF}Список команд",
						"{FFFFFF}1. Командя для помощи\n"\
						"{FFFFFF}2. Общие государственные команды",
						"Выбрать", "закрыть"
						);
						return 1;
						}
						case 2:
						{
							{
								Dialog
								(
									playerid, DIALOG_INFO_HELP, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Информация о проекте",
									"Лучший CRMP Проект "SERVER_NAME_RP"\n\
									Наш Сайт "SERVER_SITE"\n\
									Наш Форум "SERVER_FORUM"\n\
									Наш Telegram "SERVER_TELEGRAM"\n\
									Разработчик игрового мода vk.com/loboda6",
									"Закрыть", ""
								);
							}
						}
						case 3:
						{
						Dialog
						(
						playerid, DIALOG_SYSTEM, DIALOG_STYLE_LIST,
						"{FFFFFF}Интересные локации",
						"{FFFFFF}1. Таинственый контейнер\n"\
						"{FFFFFF}2. Все или не-чего Бокс\n"\
						"{FFFFFF}3. Киоск (Вещи для крафта)\n"\
						"{FFFFFF}4. Барыга Виталий Автоугонщик",
						"Выбрать", "закрыть"
						);
						return 1;
						}
						case 4:
						{
						Dialog
	                    (	
	    				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
	    				"{FFFFFF}Мероприятия",
 						"{ffffff}О проводениях крутых меропритиях вы можите узнать в нашем ТГК "SERVER_TELEGRAM".",
						"Закрыть", ""
						);
						}
						case 5:
						{
						Dialog
	                    (	
	    				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
	    				"{00CC33}Тех. Вопросы и помощь",
 						"{ffffff}Все вопросы, связанные с тех. моментами, багами,<n>предложения по улучшению проекта и т.д можно задать тут:{ffffff}<n><n>Форум - {F3FF02}"SERVER_FORUM"{ffffff}<n>Сайт - {F3FF02}"SERVER_SITE"{ffffff}<n>Telegram - {F3FF02}"SERVER_TELEGRAM"{ffffff}<n>{ffffff}Vkontakte - {F3FF02}"SERVER_VK"",
						"Закрыть", ""
						);
						}
						default:
							return 1;
					}
				}
			}
			case DIALOG_SYSTEM:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							EnablePlayerGPS(playerid, 37, -1940.9128,2895.8516,5.9990, "Таинственный контейнер отмечена у вас на GPS");
						}
						case 2:
						{
							EnablePlayerGPS(playerid, 37, 139.2284,703.8436,12.2744, "Все или нечего Бокс отмечен у вас на GPS");
						}
						case 3:
						{
							EnablePlayerGPS(playerid, 37, -2345.2776,190.5451,21.4445, "Киоск (Вещи для крафта) отмечен у вас на GPS");
						}
						case 4:
						{
							EnablePlayerGPS(playerid, 37, 962.6889,-1965.2474,37.0288, "{FFAF00}Барыга Виталий\n{ffffff}Автоугонщик отмечен у вас на GPS");
						}
					}
				}
			}
			case DIALOG_HELP_CMD:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							{
								Dialog
								(
									playerid, DIALOG_HELP_CMD, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Командя для помощи",
									"/fixcar — Починить транспорт\n\
									/getv — Телепортировать к себе свой транспорт\n\
									/rub — Донат меню",
									"", "Закрыть"
								);
							}
						}
						case 2:
						{
							{
								Dialog
								(
									playerid, DIALOG_HELP_CMD, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Общие государственные команды",
									"/r — РП рация\n\
									/rr — нон РП рация\n\
									/d — РП рация департамента (общий гос. чат)\n\
									/dd — нон РП рация департамента (общий гос. чат)\n\
									/sc — статистика по проделанной работе\n\
									/rc — переключение между каналами рации\n\
									/find — онлайн сотрудники\n\
									/tbank — казна фракции\n\
									/team_history — фракционная история (принятие, увольнение, повышение)\n\
									/leave — покинуть фракцию по собственному желанию\n\
									\n\
									Общие команды для лидера и заместителя:\n\
									/gnews (/gov) — подача новостей в общий чат (волна для гос. фракций)\n\
									/add_event — создать временной промежуток собеседования\n\
									/uniforms — настройка формы сотрудников\n\
									/invite [ID] — приглашение во фракцию/взвод\n\
									/uninvite [ID] — увольнение игрока в сети\n\
									/uninviteoff [nick] — оффлайн увольнение\n\
									/changeskin [ID] — изменить форму\n\
									/rang [ID] — изменение ранга сотрудника\n\
									/blist — чёрный список фракции\n\
									/fwarn [ID] [причина] — выдать выговор сотруднику\n\
									/unfwarn [ID] — снять выговор сотруднику\n\
									/r_mute [ID] время причина — выдача мута\n\
									/r_mute [ID] [0] [причина] — снятие мута",
									"", "Закрыть"
								);
							}
						}
					}
				}
			}
  			case DIALOG_ACTION:
			{
				if(response)
				{
					if(1 <= (listitem+1) <= 4)
					{
						new targetid = GetPlayerData(playerid, P_TARGET_ID);
						if(IsPlayerConnected(targetid) && IsPlayerLogged(targetid))
						{
							if(IsPlayerInRangeOfPlayer(playerid, targetid, 10.0))
							{
								new params[5];
								valstr(params, targetid);
								new cmd[4][16] = {"cmd_hi", "cmd_pass", "cmd_lic", "cmd_skill"};
								CallLocalFunction(cmd[listitem], "ds", playerid, params);
							}
							else SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
						}
						else SendClientMessage(playerid, 0x999999FF, "Игрок вышел из игры");
					}
					SetPlayerData(playerid, P_TARGET_ID, INVALID_PLAYER_ID);
				}
			}
			case DIALOG_VIEV_JOBS_LIST:
			{
				if(response)
				{
					new count;
					if(GetPlayerData(playerid, P_JOB) == 1) count = 7;
					if(GetPlayerData(playerid, P_JOB) == 2) count = 8;
					if(GetPlayerData(playerid, P_JOB) == 3) count = 12;
					if(GetPlayerData(playerid, P_JOB) == 4) count = 16;
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d,[%d],[0,2],[[7,5,122000000,0,[]],[8,6,120500000,0,[]],[12,9,0,0,[]],[16,11,0,0,[]]]]", GetPlayerLevel(playerid), count);
					BitStream_2(playerid, s_CefInterface, t_CefShow,"Employment", STRING_GLOBAL);
				}
			}
			case DIALOG_END_JOB:
			{
				if(response)
					EndPlayerJob(playerid);
			}
			case DIALOG_BUS_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 180))
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда автобуса", true, true);
							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, COLOR_WHITE, "Для того, чтобы начать работу водителя автобуса {"#cGold"}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_OPEN_CONTEINER:
			{
				if(response)
				{
					if(GetIteam(playerid, 259) < 1500) return SCM(playerid, COLOR_GREY, "*У вас недостаточно ключей от кейса ля открытия данного контейнера");
					if(GetPlayerCurrentDonate(playerid) < 1500) return SCM(playerid, 0xBEBEBEBE, "*У вас недостаточно доната для открытия данного контейнера.");
					if(GetIteam(playerid, 293) < 15000) return SCM(playerid, COLOR_GREY, "*У вас недостаточно фишек ля открытия данного контейнера");
					OpenConteiner(playerid);
				}
			}

			case DIALOG_BUS_ROUTE_COST:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new route_cost = strval(inputtext);
						if(0 <= route_cost <= 10000000 && IsNumeric(inputtext))
						{
							SetPlayerData(playerid, P_JOB_TARIFF, route_cost);
							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_SELECTION, DIALOG_STYLE_LIST,
								"{"#cGold"}Выберите маршрут",
								g_bus_routes_list,
								"Ок", "Отмена"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
								"{"#cGold"}Стоимость проезда",
								"{"#cW"}Сколько будет стоить проезд?\n"\
								"Укажите цену от 0 до 10000000 рублей",
								"Далее", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_BUS_ROUTE_SELECTION:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(0 <= listitem <= sizeof g_bus_routes - 1)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
							SetPlayerData(playerid, P_BUS_ROUTE, listitem);
							StartPlayerJob(playerid, JOB_BUS_DRIVER);
						}
					}
				}
			}
			case DIALOG_TAXI_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 150000))
						{
							GivePlayerMoneyEx(playerid, -150000, "Аренда такси", true, true);
							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, COLOR_WHITE, "Для того, чтобы начать работу таксиста {"#cGold"}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_RERFECT_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_RERFECT && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 180))
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда эвакуатора", true, true);
							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу автомеханика {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_RERFECT_START_JOB:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_RERFECT && action_id == VEHICLE_ACTION_ID_NONE)
					{
						Dialog
						(
							playerid, DIALOG_RERFECT_NAME, DIALOG_STYLE_INPUT,
							"{FFD83D}Автомеханик",
							"{FFFFFF}Введите название для Вашей техслужбы,\n"\
							"или оставьте поле пустым",
							"Готово", "Отмена"
						);
					}
				}
			}
			case DIALOG_RERFECT_NAME:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(len)
					{
						if(!(1 <= len <= 15))
						{
							Dialog
							(
								playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
								"{FFD83D}Автомеханик",
								"{FFFFFF}Введите название для Вашей техслужбы,\n"\
								"или оставьте поле пустым",
								"Готово", "Отмена"
							);
							return SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное название | 15 символов максимум");
						}
						else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
					}
					else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;
					StartPlayerJob(playerid, JOB_RERFECT_DRIVER);
				}
			}
			case DIALOG_TAXI_NAME:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15))
					{
						Dialog
						(
							playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
							"{FFD83D}Название такси",
							"{FFFFFF}Придумайте название для вашего такси\n"\
							"Максимальная длина 15 символов\n\n"\
							"Если вы не хотите как-то называться\n"\
							"нажмите кнопку Пропустить",
							"Далее", "Пропустить"
						);
						return 1;
					}
					else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
				}
				else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;
				Dialog
				(
					playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT,
					"{FFD83D}Настройка счетчика",
					"{FFFFFF}Укажите тариф по которому будет работать ваше такси\n"\
					"Эта сумма будет сниматься с пассажира каждые 100 м поездки\n"\
					"Тарифная ставка может быть от 0 до 550000 рублей",
					"Ок", "Отмена"
				);
			}
			case DIALOG_TAXI_TARIFF:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new tariff = strval(inputtext);
						if(!(0 <= tariff <= 550000) || !IsNumeric(inputtext))
						{
							Dialog
							(
								playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT,
								"{FFD83D}Настройка счетчика",
								"{FFFFFF}Укажите тариф по которому будет работать ваше такси\n"\
								"Эта сумма будет сниматься с пассажира каждые 100 м поездки\n"\
								"Тарифная ставка может быть от 0 до 550.000 рублей",
								"Ок", "Отмена"
							);
							return 1;
						}
						else
						{
							SetPlayerData(playerid, P_JOB_TARIFF, tariff);
							StartPlayerJob(playerid, JOB_TAXI_DRIVER);
						}
					}
				}
				g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;
			}
			case DIALOG_MECHANIC_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 180))
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда эвакуатора", true, true);
							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу автомеханика {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_MECHANIC_START_JOB:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						Dialog
						(
							playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
							"{FFD83D}Автомеханик",
							"{FFFFFF}Введите название для Вашей техслужбы,\n"\
							"или оставьте поле пустым",
							"Готово", "Отмена"
						);
					}
				}
			}
			case DIALOG_TRUCKER_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 2000000)) return SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					GivePlayerMoneyEx(playerid, -2000000, "Аренда грузовика", true, true);
					SetPlayerData(playerid, P_JOB_CAR, vehicleid);
					SetPlayerData(playerid, P_IN_JOB, true);
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFA500}Транспортная компания\n{FFFFFF}%s", GetBusinessData(GetPlayerData(playerid, P_TK_JOB), B_NAME));
					CreateVehicleLabel(vehicleid, STRING_GLOBAL, 0x3399FFFF, 0.0, 2.1, 3.1, 20.0);
					SCM(playerid, 0xFFFFFFFF, "Вы начали свой {E6CE7B}рабочий день. Посигнальте {FFFFFF}и выберите необходимый прицеп");
				}
				else RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TRUCKER_START_JOB:
			{
				if(response)
				{
					StartPlayerJob(playerid, JOB_TRUCKER);
				}
			}
			case DIALOG_PHONE_BOOK:
			{
				if(response && (0 <= listitem <= MAX_PHONE_BOOK_CONTACTS-1))
				{
					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS, listitem);
				}
			}
			case DIALOG_WOSH_SKIN:
			{
				if(!response) return 1;
				if(!GetPlayerSex(playerid))
					SetPlayerSkin(playerid, 252);
				else
					SetPlayerSkin(playerid, 75);
				SendClientMessage(playerid, 0xB0C4DEFF, "Вы запустили стиральную машину. Не покидайте прачечную до окончания стирки");
				woshtimer[playerid] = SetTimerEx("WoshTimer", 2000, true, "i", playerid);
				BitStream_2(playerid, s_CefInterface, t_CefShow, "ProgressBar", "[[\"Одежда стирается\", 0, 1000]]");
			    TogglePlayerControllable(playerid, false);
			}
			case DIALOG_PHONE_BOOK_OPTION:
			{
				new contactid = GetPlayerPhoneBookSelectContact(playerid);
				if(contactid != INVALID_PLAYER_ID)
				{
					if(response)
					{
						ShowPhoneBookOperation(playerid, listitem + 1, contactid);
					}
					else ShowPlayerPhoneBook(playerid);
				}
			}
			case DIALOG_PHONE_BOOK_SEND_SMS:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(len)
					{
						if(len < 65)
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new fmt_str[90];
							format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER), inputtext);
							callcmd::sms(playerid, fmt_str);
							return 1;
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение для отправки");
					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_SEND_SMS);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NAME:
			{
				if(response)
				{
					if(3 <= strlen(inputtext) <= 20)
					{
						new contactid = GetPlayerPhoneBookSelectContact(playerid);
						new query[90];
						format(g_player_phone_book[playerid][contactid][PB_NAME], 21, "%s", inputtext);
						mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
						mysql_query(mysql, query, false);
						SendClientMessage(playerid, 0x99CC33FF, "Имя контакта изменено");
						ShowPlayerPhoneBook(playerid);
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NAM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NUMBER:
			{
				if(response)
				{
					if(3 <= strlen(inputtext) <= 9 && strval(inputtext) > 0 && IsNumeric(inputtext))
					{
						if(!CheckPhoneBookUsedNumber(playerid, inputtext))
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new query[90];
							format(g_player_phone_book[playerid][contactid][PB_NUMBER], 10, "%s", inputtext);
							mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET number='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
							mysql_query(mysql, query, false);
							SendClientMessage(playerid, 0x99CC33FF, "Номер контакта изменен");
							ShowPlayerPhoneBook(playerid);
						}
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NUM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_ADD_CONTACT:
			{
				if(response)
				{
					new player_name[20 + 1];
					GetPVarString(playerid, "add_contact_name", player_name, sizeof(player_name));
					if(!(3 <= strlen(inputtext) <= 9) || strval(inputtext) < 1 || !IsNumeric(inputtext))
					{
						new fmt_str[64 + 1];
						format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите номер телефона для контакта %s", player_name);
						Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "{FFD83D}Добавление нового контакта", fmt_str, "Добавить", "Отмена");
						return 1;
					}
					AddPhoneBookContact(playerid, player_name, inputtext);
				}
				DeletePVar(playerid, "add_contact_name");
			}
			case DIALOG_TEMP_JOB_INKAS_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_INKAS, TJ_SKIN)[GetPlayerSex(playerid)]);
						SetPlayerTempJob(playerid, TEMP_JOB_INKAS);
						SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу инкассатора");
						SendClientMessage(playerid, 0x3399FFFF, "Садитесь в авто и работайте");
						SetPlayerData(playerid, P_IN_JOB, true);
					}
				}
			}
			case DIALOG_TEMP_JOB_INKAS_END:
			{
				if(response) EndPlayerTempJob(playerid, TEMP_JOB_INKAS);
			}
			case DIALOG_TEMP_JOB_MINER_START:
			{
				if(!response) return 1;
				if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
				{
					SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_MINER, TJ_SKIN)[GetPlayerSex(playerid)]);
					SetPlayerJobLoadItems(playerid, 0);
					SetPlayerTempJob(playerid, TEMP_JOB_MINER);
					SetPVarInt(playerid, "miner_1",0);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
					SetPlayerMinerJobLoadCP(playerid);
					SendClientMessage(playerid, 0xff9900FF, "Вы начали работу. Направляйтесь к лифту, чтобы спуститься под землю.");
					SetPlayerCheckpoint(playerid, -470.2869,2876.5969,1192.7656, 1.0);
					g_player_mine_cp[playerid] = 1;
				}
			}
			case DIALOG_TEMP_JOB_MINER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_MINER);
					DisablePlayerCheckpoint(playerid);
					g_player_mine_cp[playerid] = 0;
					g_player_mine_status[playerid] = 0;
					g_player_mine_object[playerid] = INVALID_OBJECT_ID;
					g_player_mine_sphere[playerid] = 0;
					g_player_mine_rack[playerid] = 0;
					g_player_mine_ore[playerid] = -1;
				}
			}
			case DIALOG_TEMP_JOB_FACTORY_TRUCKER:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);
					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY_TRUCKER, TJ_SKIN)[GetPlayerSex(playerid)];
							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);
							if(GetPlayerSex(playerid))
								SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);
							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY_TRUCKER);
							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_NONE);
							SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу в службе доставки завода");
							SendClientMessage(playerid, 0x66CC00FF, "Для получения информации воспользуйтесь инструкцией рядом с Вами");
							SetPlayerData(playerid, P_IN_JOB, true);
						}
						case TEMP_JOB_FACTORY_TRUCKER:
						{
							EndPlayerJob(playerid);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_FACTORY:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);
					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY, TJ_SKIN)[GetPlayerSex(playerid)];
							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);
							TogglePlayerFactoryCP(playerid, true);
							SetPlayerData(playerid, P_JOB_WAGE, 0);
							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY);
							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
							SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу в производственном цеху завода");
							SendClientMessage(playerid, 0x66CC00FF, "Для получения информации воспользуйтесь инструкцией у входа в цех");
							DeletePVar(playerid, "factory_skill");
							DeletePVar(playerid, "factory_bad_prods");
							DeletePVar(playerid, "factory_take_metall");
						}
						case TEMP_JOB_FACTORY:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_LUMBERJACK_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_LUMBERJACK, TJ_SKIN)[GetPlayerSex(playerid)]);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
						SetPlayerLumberJackChopCP(playerid);
						SendClientMessage(playerid, 0xB0C4DEFF, "Подойдите к отмеченному дереву и срубите его, после отнесите на склад брёвен");
					}
				}
			}
			case DIALOG_TEMP_JOB_LUMBERJACK_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);
				}
			}
			case DIALOG_FUEL_STATION_BUY_JERRICA:
			{
				if(!response) return true;
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 500000)) return SCM(playerid, COLOR_GREY, "Недостаточно средств");
				GiveIteam(playerid, 1, 1, 1, 0);
				GivePlayerMoneyEx(playerid, -500000, "Покупка канистры на АЗС", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Вы купили канистру с 15 литрами бензина");
				SendClientMessage(playerid, 0x3399FFFF, "Чтобы заправить транспорт, подойдите к нему и нажмите ПКМ");
				SendClientMessage(playerid, 0xCECECEFF, "Примечание: Вы не должны двигаться во время заправки. ПКМ - правая кнопка мышки");
			}
			case DIALOG_FUEL_STATION_PRICE_FUEL:
			{
				new stationid = GetPVarInt(playerid, "ownablebiz_id");
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(25000 <= price <= 50000 && IsNumeric(inputtext))
						{
							new fmt_str[75];
							new query[64 + 1];
							SetBusinessData(stationid, B_PROD_PRICE, price);
							format(fmt_str, sizeof fmt_str, "Теперь топливо на Вашей заправке будет продаваться по %d руб", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
							format(query, sizeof query, "UPDATE business SET prod_price=%d WHERE id=%d LIMIT 1", GetBusinessData(stationid, B_PROD_PRICE), GetBusinessData(stationid, B_SQL_ID));
							mysql_query(mysql, query, false);
							UpdateBusinessLabel(stationid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Укажите отпускную цену от 25.000 до 50.000 рублей за 1 литр");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_BUY_FUEL_PR:
			{
				new stationid = GetPVarInt(playerid, "ownablebiz_id");
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(2 <= price <= 10 && IsNumeric(inputtext))
						{
							new fmt_str[90];
							format(fmt_str, sizeof fmt_str, "Теперь топливо для Вашей заправки будет закупаться по %d руб за 1 литр", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_JERRICAN_FILL_CAR:
			{
				new vehicleid = GetPVarInt(playerid, "jerrican_fill_car");
				new modelid = GetVehicleData(vehicleid, V_MODELID);
				DeletePVar(playerid, "jerrican_fill_car");
				if(modelid == 15126)
					return SendClientMessage(playerid, 0xCECECEFF, "В транспортном средстве установлен электродвигатель, вы не сможете заправить его бензином.");
				if(modelid == 543)
					return SendClientMessage(playerid, 0xCECECEFF, "В транспортном средстве установлен электродвигатель, вы не сможете заправить его бензином.");
				if(modelid == 15192)
					return SendClientMessage(playerid, 0xCECECEFF, "В транспортном средстве установлен электродвигатель, вы не сможете заправить его бензином.");
			    if(modelid == 15104)
					return SendClientMessage(playerid, 0xCECECEFF, "В транспортном средстве установлен электродвигатель, вы не сможете заправить его бензином.");
			    if(modelid == 15110)
					return SendClientMessage(playerid, 0xCECECEFF, "В транспортном средстве установлен электродвигатель, вы не сможете заправить его бензином.");
				if(response && vehicleid)
				{
					new Float: x, Float: y, Float: z;
					GetVehiclePos(vehicleid, x, y, z);
					if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
					{
						if((GetVehicleData(vehicleid, V_FUEL) + 15.0) <= 100.0)
						{
							SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 15.0);
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							DeletePVar(playerid, "have_jerrican");
							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
							SendClientMessage(playerid, 0x66CC00FF, "Транспорт заправлен");
						    GiveIteam(playerid, 1, 0,1,0);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В бензобак этого транспорта столько не поместится");
					}
					else SendClientMessage(playerid, 0x999999FF, "Вы находитесь слишком далеко от транспорта");
				}
			}
			case DIALOG_GARDEN:
			{ 
				if(!response) return 1;
				if(GetPlayerWeapon(playerid) != 6) return SCM(playerid, COLOR_GREY,"Для того чтобы посадить семена, требуется лопата в руке.");
				new idmap;
				new garden_id = GetPVarInt(playerid, "garden_id");
				new yamka_id = GetPVarInt(playerid, "yamka_id");
                if(GetGardenData(garden_id, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden_id, G_POS_X) + GardenGryadka_1[yamka_id][0], GetGardenData(garden_id, G_POS_Y) + GardenGryadka_1[yamka_id][1], GetGardenData(garden_id, G_POS_Z) + GardenGryadka_1[yamka_id][2] + 1)) return 1;
				if(GetGardenData(garden_id, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden_id, G_POS_X) + GardenGryadka_2[yamka_id][0], GetGardenData(garden_id, G_POS_Y) + GardenGryadka_2[yamka_id][1], GetGardenData(garden_id, G_POS_Z) + GardenGryadka_2[yamka_id][2] + 1)) return 1;
				if(GetGardenData(garden_id, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden_id, G_POS_X) + GardenGryadka_3[yamka_id][0], GetGardenData(garden_id, G_POS_Y) + GardenGryadka_3[yamka_id][1], GetGardenData(garden_id, G_POS_Z) + GardenGryadka_3[yamka_id][2] + 1)) return 1;
				switch(listitem)
				{
					case 0:
					{
						Dialog
						(
							playerid, DIALOG_GARDEN, DIALOG_STYLE_LIST,
							"Какое растение вы хотите посадить?",
							"Название\tВремя роста\tИнтервал полива\n\
							{FFFFFF}Помидоры\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Огурцы\t{"#cGold"}20 мин.\t4 мин.\n\
							{FFFFFF}Марихуана\t{"#cGold"}30 мин.\t4 мин.\n\
							{FFFFFF}Картофель\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Свёкла\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Перец\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Баклажан\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Капуста\t{"#cGold"}10 мин.\t4 мин.\n\
							{FFFFFF}Морковь\t{"#cGold"}10 мин.\t4 мин.",
							"Готово", "Закрыть"
						);
						return 1;
					}
					case 1: // Помидоры
					{
						if(GetIteam(playerid, 173) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 173, 0, 5, 0);
						idmap = 10936;
					}
					case 2: // Огурцы
					{
						if(GetIteam(playerid, 174) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 174, 0, 5, 0);
						idmap = 10935;
					}
					case 3: // Марихуана
					{
						if(GetIteam(playerid, 172) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 172, 0, 5, 0);
						idmap = 10937;
					}
					case 4: // Картофель
					{
						if(GetIteamIndx(playerid, 336, 0) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 336, 0, 5, 0);
						idmap = 16553;
					}
					case 5: // Свёкла
					{
						if(GetIteamIndx(playerid, 336, 1) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 336, 0, 5, 1);
						idmap = 16550;
					}
					case 6: // Перец
					{
						if(GetIteamIndx(playerid, 336, 2) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 336, 0, 5, 2);
						idmap = 16551;
					}
					case 7: // Баклажан
					{
						if(GetIteamIndx(playerid, 336, 3) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 336, 0, 5, 3);
						idmap = 16552;
					}
					case 8: // Капуста
					{
						if(GetIteamIndx(playerid, 336, 4) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 336, 0, 5, 4);
						idmap = 16549;
					}
					case 9: // морковь
					{
						if(GetIteamIndx(playerid, 336, 5) < 5) return SCM(playerid, 0xCECECEFF, "У вас недостаточно семян для посадки. (минимум 5 семян)");
						GiveIteam(playerid, 336, 0, 5, 5);
						idmap = 16548;
					}
				}
				G_TYPE_YAM[garden_id][yamka_id] = listitem;
				if(GetGardenData(garden_id, G_IMPROVEMENTS) < 3) gardendyamka[garden_id][yamka_id] = CreateObject(idmap, GetGardenData(garden_id, G_POS_X) + GardenGryadka_1[yamka_id][0], GetGardenData(garden_id, G_POS_Y) + GardenGryadka_1[yamka_id][1], GetGardenData(garden_id, G_POS_Z) + GardenGryadka_1[yamka_id][2] - 1,   0.00000, 0.00000, 0.0000);
				if(GetGardenData(garden_id, G_IMPROVEMENTS) == 3) gardendyamka[garden_id][yamka_id] = CreateObject(idmap, GetGardenData(garden_id, G_POS_X) + GardenGryadka_2[yamka_id][0], GetGardenData(garden_id, G_POS_Y) + GardenGryadka_2[yamka_id][1], GetGardenData(garden_id, G_POS_Z) + GardenGryadka_2[yamka_id][2] - 1,   0.00000, 0.00000, 0.0000);
				if(GetGardenData(garden_id, G_IMPROVEMENTS) == 4) gardendyamka[garden_id][yamka_id] = CreateObject(idmap, GetGardenData(garden_id, G_POS_X) + GardenGryadka_3[yamka_id][0], GetGardenData(garden_id, G_POS_Y) + GardenGryadka_3[yamka_id][1], GetGardenData(garden_id, G_POS_Z) + GardenGryadka_3[yamka_id][2] - 1,   0.00000, 0.00000, 0.0000);
				G_STATUS_YAM[garden_id][yamka_id] = 1;
				ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
				new fmt_text[148];
				format(fmt_text, sizeof fmt_text,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}0.0%\n{FFFFFF}Требуется полив",garden_name[G_TYPE_YAM[garden_id][yamka_id]-1]);
				UpdateDynamic3DTextLabelText(gardendyamkalab[garden_id][yamka_id], 0xFFFF00FF, fmt_text);
				return 1;
			}
			case DIALOG_GARDEN_BUY:
			{
				if(response)
				{
					new garden = GetPVarInt(playerid, "buy_biz_id");
					if(IsPlayerInRangeOfPoint(playerid, 7.0, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z)))
					{
						if(!IsGardenOwned(garden))
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), GetGardenData(garden, G_PRICE)))
							{
								if(GetPlayerOwnableGarden(playerid) + 1 > GetPlayerGardenSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество огородов.");
								BuyPlayerGarden(playerid, garden);
								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								new fmt_str[144];
								format(fmt_str, sizeof fmt_str,"{FFFFFF}Вы успешно приобрели огород {FFA500}№%d {FFFFFF}за {FFA500}%s {FFFFFF}руб.",garden,formatInt(GetGardenData(garden, G_PRICE)));
                                SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого огорода");
						}
						else SendClientMessage(playerid, 0xFFDF87FF, "Огород уже куплен другим игроком");
					}
				}
				DeletePVar(playerid, "buy_biz_id");
			}
			case DIALOG_BIZ_BUY:
			{
				if(response)
				{
					new businessid = GetPVarInt(playerid, "buy_biz_id");
					if(IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
					{
						if(!IsBusinessOwned(businessid))
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), GetBusinessData(businessid, B_PRICE)))
							{
							    SetPlayerData(playerid, P_DOSTIJ9, GetPlayerData(playerid, P_DOSTIJ9) + 1);
								UpdatePlayerDatabaseInt(playerid, "dostij9", GetPlayerData(playerid, P_DOSTIJ9) + 1);
								SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы купили бизнес");
								BuyPlayerBusiness(playerid, businessid);
								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Новый бизнес", "{FFFFFF}Вам нужно заплатить за аренду бизнеса в ближайшем отделением банка {FFCD00}(/gps)", "Ок", "");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого бизнеса");
						}
						else
						{
							new fmt_str[64];
							format(fmt_str, sizeof fmt_str, "Этот бизнес уже куплен. Владелец: %s", GetBusinessData(businessid, B_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
					}
				}
				DeletePVar(playerid, "buy_biz_id");
			}
			case DIALOG_BIZ_INFO:
			{
				if(!response) return 1;
				ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
			}
			case DIALOG_BIZ_PARAMS:
			{
				if(!response) return callcmd::business(playerid, "");
				ShowPlayerBusinessDialog(playerid, listitem + 1);
			}
			case DIALOG_BIZ_ARENDA:
			{
			    if(response)
			    {
			        BitStream_2(playerid, s_CefInterface, t_CefShow,"Select", "[\"OnPlayerEventRentCar\"]");
			        BitStream_1(playerid, s_CefInterface, t_CefHide,  "Interactions");
			        TogglePlayerControllable(playerid, false);
			        arendavibor[playerid] = 1;
			        new biz_id = GetPVarInt(playerid, "arenda_id");
					for(new i = 0; i < MAX_VEHICLES; i++)
					{
						if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
						{
						    new index = GetVehicleData(i, V_ACTION_ID);
						    if(GetRentCarData(index, R_RENT_OWNER) == -1)
						    {
								SetPVarInt(playerid, "vehid_arenda", i);
								new Float:X,Float:Y,Float:Z;
								GetVehiclePos(i, X,Y,Z);
								SetPlayerVirtualWorld(playerid, biz_id);
								SetVehicleVirtualWorld(i, biz_id);
								SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
								SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
								return 1;
							}
						 }
					}
			    }
			}
			case DIALOG_BIZ_ARENDA_CAR:
			{
				if(response)
				{
				    new businessid = GetPVarInt(playerid, "ownablebiz_id");
					switch(listitem + 1)
					{
						case 1:
						{
							new query[148],
								Cache: result;
							mysql_format(mysql, query, sizeof query, "SELECT * FROM arenda_cars WHERE owner_id='%d'", businessid);
							result = mysql_query(mysql, query, true);
							new rows = cache_num_rows();
							if(!rows)
								SendClientMessage(playerid, 0x999999FF, "У Вашей аренды авто нет транспорта");
							else
							{
								string_dialog[0] = EOS;
								for(new i = 0; i < rows; i ++)
								{
								    new vehicleid = cache_get_field_content_int(i, "vehicleid");
								    new Float: iznos = cache_get_field_content_float(i, "iznos");
								    new model_id = cache_get_field_content_int(i, "model_id");
								    new price = cache_get_field_content_int(i, "price");
									format(query, sizeof query, "{FFFFFF}%d.  %s (ID: %d)<t>{FFFFFF}Аренда: {6495ED}%d рублей{FFFFFF}<t>Износ: {6495ED}%d% <n>", i+1, GetVehicleInfo(model_id , VI_NAME), vehicleid, price, floatround(iznos));
									strcat(string_dialog, query);
									SetPlayerListitemValue(playerid, i, vehicleid);
								}
				   				Dialog
								(
									playerid, DIALOG_BIZ_CAR_LIST, DIALOG_STYLE_LIST,
									"Транспорт",
									string_dialog,
									"Выбрать", "Назад"
								);
							}
							cache_delete(result);
						}
						case 2:
						{
			   				if((GetBusinessCars(businessid) + 1) > 8)
								return SendClientMessage(playerid, 0x3399FFFF, "У вашей аренды авто максимальное количество автомобилей!");
						    new inter, world, Float:X, Float:Y, Float:Z, Float:FA;
							GetPlayerPos(playerid, X, Y, Z);
							GetPlayerFacingAngle(playerid, FA);
							inter = GetPlayerInterior(playerid);
							world = GetPlayerVirtualWorld(playerid);
							SetPVarFloat(playerid, "pos_x", X);
							SetPVarFloat(playerid, "pos_y", Y);
							SetPVarFloat(playerid, "pos_z", Z);
							SetPVarFloat(playerid, "angle", FA);
							SetPVarInt(playerid, "player_int", inter);
							SetPVarInt(playerid, "player_world", world);
							SetPlayerVirtualWorld(playerid, playerid + 1);
							SetPlayerPosEx(playerid, 1853.8215,2813.3525,20.1436,270.9554, 0, _, false);
							TogglePlayerControllable(playerid, false);
							SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(400, 1847.1146,2819.2698,20.5752,321.0539, 1, 1, 0));
							SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
							LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
                            SetPlayerInterior(playerid, 0);
							SetPlayerCameraPos(playerid, 1856.1144, 2822.7991, 22.2357);
							SetPlayerCameraLookAt(playerid, 1847.2103, 2819.2700, 20.5730);
							SetPVarInt(playerid, "STONKScar", 1);
							LoadPlayerCarsShop(playerid);
							SetPVarInt(playerid, "arendacar_buy", 1);
						}
					}
				}
				else
				{
 					ShowPlayerBusinessDialog(playerid, 0);
				}
			}
			case DIALOG_BIZ_ARENDA_CARS:
			{
			    if(response)
			    {
			        new businessid = GetPVarInt(playerid, "arenda_id");
			        new vehicleid = GetPVarInt(playerid, "vehid_arenda");
			        new index = GetVehicleData(vehicleid, V_ACTION_ID);
			        if(GetPlayerData(playerid, P_RENT_CAR) != INVALID_VEHICLE_ID)
			        {
						SendClientMessage(playerid,COLOR_WHITE,"У вас уже есть арендованное авто. /unrent чтобы вернуть его.");
						return 1;
			        }
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), GetRentCarData(index, R_PRICE)))
					{
						SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно средств для аренды транспорта.");
						return 1;
					}
					if(GetBusinessData(businessid, B_PRODS) >= 1)
					{
						new carprice = GetRentCarData(index, R_PRICE);
						AddBusinessProfit(playerid, businessid, carprice, 1);
					}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"В бизнесе недостаточно продуктов. Аренда авто закрыта.");
						return 1;
					}
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
                    PutPlayerInVehicle(playerid, vehicleid, 0);
					TogglePlayerControllable(playerid, true);
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Select");
					SetCameraBehindPlayer(playerid);
					new string[144];
					format(string, sizeof(string), "{66CC00}Вы арендовали транспорт для временного использования");
					SendClientMessage(playerid,COLOR_WHITE,string);
					SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {3CB371}/lock 2{FFFFFF} для открытия и закрытия дверей");
					SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы разорвать договор аренды введите {3CB371}/unrent");
					GivePlayerMoneyEx(playerid, -GetRentCarData(index, R_PRICE), "Аренда авто");
					SetPlayerData(playerid, P_RENT_CAR, vehicleid);
					SetRentCarData(index, R_RENT_OWNER, playerid);
			    }
			}
			case DIALOG_BIZ_CAR_ARENDA_1:
			{
			    if(response)
			    {
			        new price = strval(inputtext);
			    	if(!(1 <= price <= 100000000)) return BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('GameText').add('[2,\"~r~ Цена аренды от 1 до 100.000.000 рублей\",5000,0,-1,1]')");
			    	new vehicleid = GetPVarInt(playerid, "vehicleid");
			    	new index = GetVehicleData(vehicleid, V_ACTION_ID);
			    	SetRentCarData(index, R_PRICE, price);
					new query[144];
					mysql_format(mysql, query, sizeof query, "UPDATE arenda_cars SET price=%d WHERE id=%d", price, GetRentCarData(index, R_SQL_ID));
					mysql_query(mysql, query, false);
					SendClientMessage(playerid, 0x999999FF, "Вы успешно изменили цену аренды авто!");
			    }
			}
			case DIALOG_BIZ_ARENDA_CAR_SELECT:
			{
			    new businessid = GetPlayerData(playerid, P_BUSINESS);
			    if(response)
			    {
					switch(listitem + 1)
					{
						case 1:
						{
						    Dialog(playerid, DIALOG_BIZ_CAR_ARENDA_1, DIALOG_STYLE_INPUT, "Настройка аренды авто", "{FFFFFF}Введите цену аренды?", "Готово", "Назад");
						}
						case 2:
						{
						    new vehicleid = GetPVarInt(playerid, "vehicleid");
							new fmt_str[256];
                            new model_id = GetVehicleData(vehicleid, V_MODELID);
							new price = GetVehicleInfo(model_id, VI_PRICE);
							new percent = price * 45 / 100;
							format
							(
								fmt_str, sizeof fmt_str,
								"Модель:\t%s (№%d)\n"\
								"Стоимость:\t%d руб\n\n"\
								"Вы уверены что хотите продать транспорт?\n"\
								"На Ваш банковский счет будет начислено %d руб\n\n"\
								"Если Вы хотите продать его другому игроку,\n"\
								"используйте команду /sellmycar",
								GetVehicleName(vehicleid),
								model_id,
								price,
								price - percent
							);
							Dialog(playerid, DIALOG_BIZ_CAR_SELL, DIALOG_STYLE_MSGBOX, "Продажа транспорта с аренды атво", fmt_str, "Да", "Нет");
						}
					}
			    }
			    else
			    {
					new query[148],
						Cache: result;
					mysql_format(mysql, query, sizeof query, "SELECT * FROM arenda_cars WHERE owner_id='%d'", businessid);
					result = mysql_query(mysql, query, true);
					new rows = cache_num_rows();
					if(!rows)
						SendClientMessage(playerid, 0x999999FF, "У Вашей аренды авто нет транспорта");
					else
					{
						string_dialog[0] = EOS;
						for(new i = 0; i < rows; i ++)
						{
						    new vehicleid = cache_get_field_content_int(i, "vehicleid");
						    new Float: iznos = cache_get_field_content_float(i, "iznos");
						    new model_id = cache_get_field_content_int(i, "model_id");
						    new price = cache_get_field_content_int(i, "price");
							format(query, sizeof query, "{FFFFFF}%d.  %s (ID: %d)<t>{FFFFFF}Аренда: {6495ED}%d рублей{FFFFFF}<t>Износ: {6495ED}%d% <n>", i+1, GetVehicleInfo(model_id , VI_NAME), vehicleid, price, floatround(iznos));
							strcat(string_dialog, query);
							SetPlayerListitemValue(playerid, i, vehicleid);
						}
		   				Dialog
						(
							playerid, DIALOG_BIZ_CAR_LIST, DIALOG_STYLE_LIST,
							"Транспорт",
							string_dialog,
							"Выбрать", "Назад"
						);
					}
					cache_delete(result);
			    }
			}
			case DIALOG_BIZ_CAR_LIST:
			{
			    if(response)
				{
				    new vehicleid = GetPlayerListitemValue(playerid, listitem);
				    SetPVarInt(playerid, "vehicleid", vehicleid);
				    new index = GetVehicleData(vehicleid, V_ACTION_ID);
				    new msg[244];
				    format(msg, sizeof msg, "1. Аренда {6495ED}%d руб.<n>{FFFFFF}2. Продать",
					GetRentCarData(index, R_PRICE));
					Dialog
					(
						playerid, DIALOG_BIZ_ARENDA_CAR_SELECT, DIALOG_STYLE_LIST,
						"{FFFFFF}Транспорт",
						msg,
						"Выбрать", "Назад"
					);
				}
				else
				{
				 	Dialog
					(
						playerid, DIALOG_BIZ_ARENDA_CAR, DIALOG_STYLE_LIST,
						"{FFFFFF}Транспорт",
						"1. Посмотреть\n"\
						"2. Купить",
						"Выбрать", "Назад"
					);
				}
			}
			case DIALOG_BIZ_ARENDA_PRICE:
			{
				new businessid = GetPlayerData(playerid, P_BUSINESS);
				if(businessid != -1)
				{
					if(response)
					{
						if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену продажи");
						if(strlen(inputtext) > 9) return SendClientMessage(playerid, 0xFF6600FF, "Не больше 9-ти символов!");
						new sell_price = strval(inputtext);
						if(sell_price < 3000 || sell_price > 50000) return SendClientMessage(playerid, 0xFF6600FF, "Цена аренды от 3.000 рублей до 50.000 рублей");
						SetBusinessData(businessid, B_ARENDA_PRICE, sell_price);
						new fmt_str[144];
						format(fmt_str, sizeof fmt_str, "UPDATE business SET arenda_price=%d WHERE id=%d LIMIT 1",  GetBusinessData(businessid, B_ARENDA_PRICE) , GetBusinessData(businessid, B_SQL_ID));
						mysql_query(mysql, fmt_str, false);
						format(fmt_str, sizeof fmt_str,
						"Вы успешно поставили цену на место на б/у рынке за %s рублей",
						formatInt(sell_price));
						SendClientMessage(playerid, -1, fmt_str);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ENTER_PRICE:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(strlen(inputtext))
						{
							if((0 <= price <= 1000000) && IsNumeric(inputtext))
							{
								new query[64 + 1];
								SetBusinessData(businessid, B_ENTER_PRICE, price);
								format(query, sizeof query, "UPDATE business SET enter_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_PRICE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);
								UpdateBusinessLabel(businessid);
								SendClientMessage(playerid, 0x66CC00FF, "Цена за вход в бизнес изменена");
								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Предел цены от 0 до 1000000 рублей");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Введите цену за вход в Ваш бизнес");
						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_ENTER_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PROD_PRICE:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						if(GetBusinessData(businessid, B_TYPE) == 43)
						{
							new price = strval(inputtext);
							if(strlen(inputtext) && IsNumeric(inputtext))
							{
								if(5000 <= price <= 50000)
								{
									new query[64 + 1];
									SetBusinessData(businessid, B_PROD_PRICE, price);
									format(query, sizeof query, "UPDATE business SET prod_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, query, false);
									UpdateBusinessLabel(businessid);
									SendClientMessage(playerid, 0x66CC00FF, "Стоимость продукта изменена");
									return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость от 5000 до 50000 рублей");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Введите стоимость продукта");
							ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
						}
						else
						{
							new price = strval(inputtext);
							if(strlen(inputtext) && IsNumeric(inputtext))
							{
								if(25 <= price <= 2000)
								{
									new query[64 + 1];
									SetBusinessData(businessid, B_PROD_PRICE, price);
									format(query, sizeof query, "UPDATE business SET prod_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, query, false);
									UpdateBusinessLabel(businessid);
									SendClientMessage(playerid, 0x66CC00FF, "Стоимость продукта изменена");
									return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость от 25 до 2000 рублей");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Введите стоимость продукта");
							ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
						}
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_PRODS:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						if(GetBusinessData(businessid, B_ORDER_ID) != -1)
						{
							SendClientMessage(playerid, 0x999999FF, "Заказ для Вашего предприятии уже оформлен");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
						}
						if(GetBusinessData(businessid, B_PROD_PRICE) > 0)
						{
							new order_prods = strval(inputtext);
							new prod_price = GetBusinessData(businessid, B_PROD_PRICE);
							new price = order_prods * prod_price;
							if(order_prods > 0 && IsNumeric(inputtext))
							{
								new fmt_str[256];
								new free_prods_slots = GetBusinessMaxProd(businessid) - GetBusinessData(businessid, B_PRODS);
								if(free_prods_slots > 1000)
									free_prods_slots = 1000;
								if(order_prods <= free_prods_slots)
								{
									if(GetILPlayerInt(GetBusinessData(businessid, B_BALANCE), price))
									{
										new order_id = CreateOrder(ORDER_TYPE_BUSINESS, businessid, order_prods, prod_price);
										if(order_id != -1)
										{
											format(g_business[businessid][B_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_business[businessid][B_BALANCE], -price));
											AddBusinessData(businessid, B_PRODS, +, order_prods);
											format(fmt_str, sizeof fmt_str, "UPDATE business SET balance=%s,products=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_PRODS) , GetBusinessData(businessid, B_SQL_ID));
											mysql_query(mysql, fmt_str, false);
											new year, month, day;
											timestamp_to_date(GetOrderData(order_id, O_TIME), year, month, day);
											format
											(
												fmt_str, sizeof fmt_str,
												"{FFFFFF}Параметры заказа:\n\n"\
												"Количество продуктов:\t\t%d шт.\n"\
												"Стоимость 1 продутка:\t\t%d руб\n"\
												"Общая стоимость заказа:\t\t%d руб\n"\
												"Дата оформления заказа:\t\t%02d-%02d-%d\n\n"\
												"Данные были переданы службе развозчиков продуктов\n"\
												"Ожидайте выполнения Вашего заказа",
												order_prods,
												prod_price,
												price,
												day, month, year
											);
											Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99CC00}Заказ оформлен", fmt_str, "Закрыть", "");
										}
										else SendClientMessage(playerid, 0x999999FF, "В данный момент Вы не можете оформить заказ");
										return 1;
									}
									else
									{
										format(fmt_str, sizeof fmt_str, "Чтобы оплатить заказ необходимо иметь %d руб на счету бизнеса", price);
										SendClientMessage(playerid, 0xFF6600FF, fmt_str);
									}
								}
								else
								{
									format(fmt_str, sizeof fmt_str, "Вы не можете заказать более %d продуктов", free_prods_slots);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFF6600FF, "Перед тем как оформить заказ, установите стоимость продукта");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
						}
						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_ORDER);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_CANCEL:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						new order_id = GetBusinessData(businessid, B_ORDER_ID);
						if(order_id != -1 && GetOrderData(order_id, O_SQL_ID) > 0)
						{
							if(!GetOrderData(order_id, O_USED))
							{
								new fmt_str[128];
								DeleteOrder(order_id);
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Вы отменили заказ продуктов"
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF9900}Отмена заказа", fmt_str, "Закрыть", "");
								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ваш заказ выполняется, его нельзя отменить");
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ELECT:
			{
				if(!response) 
					return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				new businessid = GetPVarInt(playerid, "ownablebiz_id"),
					b = businessid,
					type;
				if(businessid != -1)
				{
					if(b == 3 || b == 4 || b == 5 || b == 9 || b == 20 || b == 22 || b == 23 || b == 24 || b == 25 || b == 26 || b == 28 || b == 29 || b == 35 || b == 41 || b == 42 || b == 53 || b == 56 || b == 59 ||  b == 60 ||  b == 61 ||  b == 62 ||  b == 63 ||  b == 64 ||  b == 65 ||  b == 68 || b == 69 || b == 70 || b == 71 || b == 72 || b == 73 || b == 74 || b == 75 || b == 78 || b == 79 || b == 84 || b == 85 || b == 87 || b == 88 || b == 90 || b == 91 || b == 92)
						type = 1;
					if(b == 1 || b == 2 || b == 6 || b == 7 || b == 11 || b == 12 || b == 14 || b == 18 || b == 30 || b == 31 || b == 36 || b == 37 || b == 39 || b == 40 || b == 43 || b == 44 || b == 54 || b == 55 || b == 57 ||  b == 58 ||  b == 67 ||  b == 86 ||  b == 89)
						type = 5;
					else
						type = 3;
					if(GetBusinessData(businessid, B_ELECTRICITY) == type + listitem)
						return SCM(playerid, 0xafdafcFF, "Вы уже подключены к данной электростанции");
					else if(GetBusinessData(businessid, B_ELECTRICITY) != 0)
					{
						for(new i; i < g_business_loaded; i ++)
						{
							if(GetBusinessData(i, B_TYPE) != 36) continue;
							if(GetBusinessData(i, B_ELECTRICITY) != GetBusinessData(businessid, B_ELECTRICITY)) continue;
							AddBusinessData(i, B_TYPEWETRIKI, -, 1);
							new query[148];
							mysql_format(mysql, query, sizeof query, "UPDATE business SET `typewetriki`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(i, B_TYPEWETRIKI), GetBusinessData(i, B_SQL_ID));
							mysql_query(mysql, query, false);
						}
					}
					for(new i; i < g_business_loaded; i ++)
					{
						if(GetBusinessData(i, B_TYPE) != 36) continue;
						if(GetBusinessData(i, B_ELECTRICITY) != type + listitem) continue;
						AddBusinessData(i, B_TYPEWETRIKI, +, 1);
						new query[148];
						mysql_format(mysql, query, sizeof query, "UPDATE business SET `typewetriki`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(i, B_TYPEWETRIKI), GetBusinessData(i, B_SQL_ID));
						mysql_query(mysql, query, false);
					}
					SetBusinessData(businessid, B_ELECTRICITY, type + listitem);
					SendClientMessage(playerid, 0xafdafcFF, "Вы успешно поменяли доставщика {FFFFFF}энергии!");
					GameText(playerid, "~g~Успешно", 2000, 2);
					new query[148];
					mysql_format(mysql, query, sizeof query, "UPDATE business SET `electricity`=%d WHERE `id`=%d LIMIT 1", type + listitem, GetBusinessData(businessid, B_SQL_ID));
					mysql_query(mysql, query, false);
				}
			}
			case DIALOG_BIZ_IMPROVEMENT:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_business_improvements - 1)
						{
							new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
							new i_price = g_business_improvements[listitem][I_PRICE];
							if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), i_price))
							{
								new fmt_str[64];
								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, business b SET a.money=%s, b.improvements=%d WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), -i_price), i_level + 1, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, fmt_str, false);
								if(!mysql_errno())
								{
									new cur_max_prods = GetBusinessMaxProd(businessid);
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для Бизнеса", false, true);
									format(fmt_str, sizeof fmt_str, "Вы улучшили свой бизнес до {FFCD00}%s {3399FF}уровня", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);
									AddBusinessData(businessid, B_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1:
										{
											format(fmt_str, sizeof fmt_str, "Количество слотов для продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);
											SendClientMessage(playerid, 0x999999FF, "Теперь можно намного реже пополнять их запас");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь ваши клиенты смогут пользоваться услугами медпункта на территории бизнеса");
											SendClientMessage(playerid, 0x999999FF, "Доходы от этого будут перечисляться на баланс предприятия");
											BusinessHealthPickupInit(businessid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Благодаря пониженному налогу, вы будете платить за аренду помещения в 2 раза меньше");
											SendClientMessage(playerid, 0x999999FF, "Благодаря этому, вы сможете получать большую прибыль");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь ваши клиенты будут слышать звук при входе в бизнес");
											SendClientMessage(playerid, 0x999999FF, "Вы также можете поменять или выключить его командой {FF9900}/bizmusic");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x66CC00FF, "В Вашем бизнесе был оборудован дополнительный склад продуктов повышенной вместимости");
											format(fmt_str, sizeof fmt_str, "Количество слотов для продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x999999FF, fmt_str);
										}
										case 6:
										{
											format(fmt_str, sizeof fmt_str, "INSERT INTO business_gps (bid,time) VALUES (%d,%d)", businessid, gettime());
											mysql_query(mysql, fmt_str, false);
											g_business_gps_init = false;
											SendClientMessage(playerid, 0x66CC00FF, "Теперь Ваш бизнес можно будет найти в списке бизнесов {FF9900}(/gps > Бизнес)");
											SendClientMessage(playerid, 0x999999FF, "Это позволит привлечь дополнительных клиентов, тем самым повысить доходы предприятия");
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 23)");
							}
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_MANAGER:
			{
			    new businessid = GetPlayerListitemValue(playerid, listitem);
			    SetPVarInt(playerid, "ownablebiz_id", businessid);
			    new to_player = GetPVarInt(playerid, "manager_to_player");
			    SendPlayerOffer(playerid, to_player, OFFER_TYPE_BUSINESS_MANAGER, businessid);
			}
			case DIALOG_BIZ_SELL_MY_BIZ:
			{
			    new businessid = GetPlayerListitemValue(playerid, listitem) + 1;
			    SetPVarInt(playerid, "ownablebiz_id", businessid);
			    Dialog
				(
					playerid, DIALOG_BIZ_SELL_MY_BIZ2, DIALOG_STYLE_MSGBOX,
					"{FFCD00}Продажа бизнеса",
					"{FFFFFF}Вы уверены что хотите продать свой бизнес?",
					"Да", "Нет"
				);
			}
			case DIALOG_BIZ_SELL_MY_BIZ2:
			{
			    new businessid = GetPVarInt(playerid, "ownablebiz_id");
			    new to_player = GetPVarInt(playerid, "sellmybiz_to_player");
			    new price = GetPVarInt(playerid, "sellmybiz_money");
			    new Float: b_pos_x = GetBusinessData(businessid, B_POS_X);
				new Float: b_pos_y = GetBusinessData(businessid, B_POS_Y);
				new Float: b_pos_z = GetBusinessData(businessid, B_POS_Z);
				if(!(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(to_player, 7.0, b_pos_x, b_pos_y, b_pos_z)))
					return SendClientMessage(playerid, 0xFF6600FF, "Вы и покупатель должны находиться рядом с бизнесом который хотите продать");
			    SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_BUSINESS, businessid, price);
			}
			case DIALOG_BIZ_SELL:
			{
				new businessid = GetPVarInt(playerid, "ownablebiz_id");
				if(businessid != -1)
				{
					if(response)
					{
						if(GetBusinessData(businessid, B_ORDER_ID) != -1)
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF6600}Продажа бизнеса",
								"{FFFFFF}Перед тем как продать бизнес государству\n"\
								"заказ продуктов нужно {FF3333}отменить",
								"Закрыть", ""
							);
						}
						else 
						{
							new biz_price = GetBusinessData(businessid, B_PRICE);
							new biz_percent = biz_price / 100 * 60;
							new biz_improvemnts_price = BusinessImprovementsPrice(businessid);
							if(biz_improvemnts_price)
								biz_improvemnts_price = biz_improvemnts_price / 100 * 35;
							new query[200];
							new return_money = (biz_price - biz_percent) + biz_improvemnts_price;
							SetBusinessData(businessid, B_OWNER_ID, 	0);
							format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), return_money));
							BankLog(playerid, return_money, "Продажа бизнеса");
							SetBusinessData(businessid, B_IMPROVEMENTS, 	0);
							SetBusinessData(businessid, B_PRODS, 			0);
							SetBusinessData(businessid, B_PROD_PRICE,		0);
							format(g_business[businessid][B_BALANCE], 21, "0");
							SetBusinessData(businessid, B_RENT_DATE,		0);
							SetBusinessData(businessid, B_ENTER_MUSIC,		0);
							SetBusinessData(businessid, B_LOCK_STATUS,	false);
							BusinessHealthPickupInit(businessid);
							format(query, sizeof query, "UPDATE accounts a,business b SET a.bank=%s,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
							mysql_query(mysql, query, false);
							format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
							mysql_query(mysql, query, false);
							g_business_gps_init = false;
							GivePlayerMoneyEx(playerid, 0, "Продажа бизнеса государству", false, false);
							CallLocalFunction("UpdateBusinessLabel", "i", businessid);
							SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой бизнес!");
							format(query, sizeof query, "Налог за продажу бизнеса составил 60 процентов от его стоимости {99CC00}(%d руб)", biz_percent);
							SendClientMessage(playerid, 0xCECECEFF, query);
							format(query, sizeof query, "Вам было возвращено 35 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
							SendClientMessage(playerid, 0xCECECEFF, query);
							format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
							SendClientMessage(playerid, 0xFFFFFFFF, query);
						}
					}
				}
			}
			case DIALOG_BIZ_ENTER_MUSIC:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_business_sound)
						{
							new query[64];
							format(query, sizeof query, "UPDATE business SET enter_music=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_MUSIC), GetBusinessData(businessid, B_SQL_ID));
							mysql_query(mysql, query, false);
							if(listitem > 0)
								PlayerPlaySound(playerid, g_business_sound[listitem - 1], 0.0, 0.0, 0.0);
							SetBusinessData(businessid, B_ENTER_MUSIC, listitem);
							SendClientMessage(playerid, 0x66CC00FF, "Звук при входе в бизнес изменен");
						}
					}
				}
			}
			case DIALOG_BIZ_ENTER:
			{
				new businessid = GetPVarInt(playerid, "biz_enter") - 1;
				DeletePVar(playerid, "biz_enter");
				if(response)
				{
					if(businessid != -1 && GetBusinessData(businessid, B_ENTER_PRICE) > 0)
					{
						if(IsBusinessOwned(businessid))
						{
							if(IsPlayerInRangeOfPoint(playerid, 5.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
							{
								new price = GetBusinessData(businessid, B_ENTER_PRICE);
								new take_prods = GetBusinessEnterProdCount(businessid);
								if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для входа");
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessProfit(playerid, businessid, price, take_prods);
								}
								SetPlayerUseListitem(playerid, businessid);
								GivePlayerMoneyEx(playerid, -price, "Оплата за вход в бизнес");
								BitStream_2(playerid, s_CefInterface, t_CefShow, "Overlay", "[500,500,1.00,1]");
								EnterPlayerToBiz(playerid, businessid);
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CAR_MARKET_SRED:
			{
				if(!response) return 1;
				if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
                	return GameText(playerid, "У Вас нет лицензии на вождение ТС", 2000, 5);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/rub > Покупка дополнительных слотов");
				SetPlayerVirtualWorld(playerid, playerid + 1);
				TogglePlayerControllable(playerid, false);
				SetPlayerInterior(playerid, 4);
				SetPlayerPosEx(playerid, -2000.7031,-1296.6309,1038.5972, 0.0, _, _, false);
				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(411, -2000.7031,-1296.6309,1034.5972,170.2028, 1, 1, 4));
				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
				SetPlayerCameraPos(playerid, -1998.716308,-1303.332397,1035.359985);
				SetPlayerCameraLookAt(playerid, -1999.810913,-1298.486938,1034.791137);
				SetPVarInt(playerid, "sredcar", 1);
				LoadPlayerCarsShop(playerid);
				return 1;
			}
			case DIALOG_BIZ_CAR_MARKET_GRUZ:
			{
				if(!response) return 1;
				if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
                	return GameText(playerid, "У Вас нет лицензии на вождение ТС", 2000, 5);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/rub > Покупка дополнительных слотов");
				SetPlayerVirtualWorld(playerid, playerid + 1);
				TogglePlayerControllable(playerid, false);
				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(15083, 1027.6141,-1892.0331,34.7166,298.6746, 1, 1, 0));
				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerCameraPos(playerid, 1042.315307,-1890.139770,36.3141);
				SetPlayerCameraLookAt(playerid, 1032.475219,-1891.380981,35.0);
				SetPlayerInterior(playerid, 0);
				SetPVarInt(playerid, "gruzcar", 1);
				LoadPlayerCarsShop(playerid);
				return 1;
			}
			case DIALOG_BIZ_CAR_MARKET_AVIA:
			{
				if(!response) return 1;
                if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
                	return GameText(playerid, "У Вас нет лицензии на вождение ТС", 2000, 5);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/rub > Покупка дополнительных слотов");
				SetPlayerVirtualWorld(playerid, playerid + 1);
				TogglePlayerControllable(playerid, false);
				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(469, -31.9133,936.1386,21.8680,160.1091, 1, 1, 0));
				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerCameraPos(playerid, -27.8507,928.0004,24.5853);
				SetPlayerCameraLookAt(playerid, -34.2980,939.8040,21.7852);
				SetPlayerInterior(playerid, 0);
				SetPVarInt(playerid, "aviacar", 1);
				LoadPlayerCarsShop(playerid);
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				SetPlayerInBiz(playerid, 4);
				return 1;
			}
			case DIALOG_BIZ_CAR_MARKET_KATER:
			{
				if(!response) return 1;
                if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
                	return GameText(playerid, "У Вас нет лицензии на вождение ТС", 2000, 5);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/rub > Покупка дополнительных слотов");
				SetPlayerVirtualWorld(playerid, playerid + 1);
				TogglePlayerControllable(playerid, false);
				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(469,  2690.7903, -3408.1589, -0.2678, 189.6871, 1, 1, 0));
				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerCameraPos(playerid, 2674.085449,-3400.375732,8.293850);
				SetPlayerCameraLookAt(playerid, 2678.323730,-3402.177246,6.346755); 
				SetPlayerInterior(playerid, 0);
				SetPVarInt(playerid, "katercar", 1);
				LoadPlayerCarsShop(playerid);
				BitStream_1(playerid, s_CefInterface, t_CefHide,  "Interactions");
				SetPlayerInBiz(playerid, 5);
				return 1;
			}
			case DIALOG_BIZ_CAR_MARKET_MOTO:
			{
				if(!response) return 1;
				if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
                	return GameText(playerid, "У Вас нет лицензии на вождение ТС", 2000, 5);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/rub > Покупка дополнительных слотов");
				SetPlayerVirtualWorld(playerid, playerid + 1);
				TogglePlayerControllable(playerid, false);
				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(15139, -2246.7114,277.0202,23.9346,262.9701, 1, 1, 0));
				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerCameraPos(playerid, -2242.3931,281.0331,25.5243);
				SetPlayerCameraLookAt(playerid, -2248.1477,275.5012,24.5337);
				SetPlayerInterior(playerid, 0);
				SetPVarInt(playerid, "motocar", 1);
				LoadPlayerCarsShop(playerid);
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				SetPlayerInBiz(playerid, 0);
				return 1;
			}
			case DIALOG_BIZ_CAR_MARKET_HOME:
			{
				if(!response) return 1;
				if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
                	return GameText(playerid, "У Вас нет лицензии на вождение ТС", 2000, 5);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/rub > Покупка дополнительных слотов");
				SetPlayerVirtualWorld(playerid, playerid + 1);
				TogglePlayerControllable(playerid, false);
				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(15277, -2398.1401,192.3957,21.5556,260.6368, 1, 1, 0));
				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerCameraPos(playerid, -2387.3169,202.7339,24.1007);
				SetPlayerCameraLookAt(playerid, -2401.2058,189.0401,21.1746);
				SetPlayerInterior(playerid, 0);
				SetPVarInt(playerid, "homecar", 1);
				LoadPlayerCarsShop(playerid);
				return 1;
			}
			case DIALOG_BIZ_CAR_MARKET_NIZ:
			{
				if(!response) return 1;
				if(GetPlayerData(playerid, P_DRIVING_LIC) < 1) return GameText(playerid, "У Вас нет лицензии на вождение ТС", 2000, 5);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/rub > Покупка дополнительных слотов");
				SetPlayerPosEx(playerid, 262.2371,2445.2175,1000.7915, 180.0, _, _, false);
				TogglePlayerControllable(playerid, false);
				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(411, 262.2371,2431.2175,1000.7915,326.5478, 1, 1, 5));
				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
				SetPlayerVirtualWorld(playerid, playerid + 1);
				SetPlayerInterior(playerid, 4);
				SetPlayerCameraPos(playerid, 261.873260, 2438.841552, 1001.580139);
				SetPlayerCameraLookAt(playerid, 261.866110, 2433.895507, 1000.847534);
				LoadPlayerCarsShop(playerid);
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				SetPlayerInBiz(playerid, 2);
				return 1;
			}
			case DIALOG_BIZ_CAR_MARKET:
			{
				if(!response) return 1;
				if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
                	return GameText(playerid, "У Вас нет лицензии на вождение ТС", 2000, 5);
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/rub > Покупка дополнительных слотов");
				SetPlayerVirtualWorld(playerid, playerid + 1);
				SetPlayerPosEx(playerid, 1853.8215,2813.3525,20.1436,270.9554, 0, _, false);
				TogglePlayerControllable(playerid, false);
				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(400, 1847.1146,2819.2698,20.5752,321.0539, 1, 1, 0));
				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerCameraPos(playerid, 1856.1144, 2822.7991, 22.2357);
				SetPlayerCameraLookAt(playerid, 1847.2103, 2819.2700, 20.5730);
				SetPVarInt(playerid, "STONKScar", 1);
				LoadPlayerCarsShop(playerid);
				SetPlayerInBiz(playerid, 1);
				return 1;
			}
			case DIALOG_BIZ_SHOP_ZAKUS:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_ZAKUS))
						{
							new price;
							new take_prods;
							switch(listitem + 1)
							{
								case 1:
								{
									price = 100000;
									take_prods = 2;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xFF6600FF, "Стандартный куриный обед стоит 100000 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка стандартного куриного обеда");
									Action(playerid, "купил(а) стандартный куриный обед");
									SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
									SetPVarInt(playerid,"respeat",1);
									SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
									ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
								}
								case 2:
								{
									price = 150000;
									take_prods = 2;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Набор ассорти из курицы стоит 150000 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка набора ассорти из курицы");
									Action(playerid, "купил(а) набор ассорти из курицы");
									SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
									SetPVarInt(playerid,"respeat",2);
									SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
									ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
								}
								case 3:
								{
									price = 200000;
									take_prods = 2;
         							if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Набор королевского обеда стоит 200000 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка набора королевского обеда");
									Action(playerid, "купил(а) набор королевского обеда");
									SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
									SetPVarInt(playerid,"respeat",3);
									SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
									ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
								}
        						case 4:
								{
									price = 250000;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0x999999FF, "У Вас не хватает денег");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка в закусочной");
									GiveIteam(playerid, 280, 1, 1, 0);
									Action(playerid, "купил(а) напиток", 	15.0, false);
								}
							}
						}
					}
				}
			}
			case DIALOG_BIZ_SHOP_KONDITER:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_KONDITER))
						{
							new price;
							new take_prods;
							switch(listitem + 1)
							{
								case 1:
								{
									price = 630;
									take_prods = 2;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xFF6600FF, "Стандартный куриный обед стоит 630 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка маленького десерта");
									Action(playerid, "купил(а) маленький десерт");
									SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
									SetPVarInt(playerid,"respeat",1);
									SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
									ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
								}
								case 2:
								{
									price = 1120;
									take_prods = 3;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Набор ассорти из курицы стоит 1120 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка среднего десерта");
									Action(playerid, "купил(а) средний десерт");
									SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
									SetPVarInt(playerid,"respeat",2);
									SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
									ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
								}
								case 3:
								{
									price = 1575;
									take_prods = 3;
         							if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Набор королевского обеда стоит 1575 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка большого десерта");
									Action(playerid, "купил(а) большой десерт");
									SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
									SetPVarInt(playerid,"respeat",3);
									SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
									ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
								}
        						case 4:
								{
									price = 227;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0x999999FF, "У Вас не хватает денег");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка в закусочной");
									GivePlayerDrinkItem(playerid, 0);
									Action(playerid, "купил(а) напиток", 15.0, false);
								}
							}
						}
					}
				}
			}
			/*
	case DIALOG_BIZ_VETRIKI:
	{
		if(!response) return 1;
		new businessid = GetPlayerInBiz(playerid);

		if(businessid != -1)
		{
			switch(listitem + 1)
			{
			case 1:
				{
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 10000000)) return SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно денег.");
					AddBusinessData(businessid, B_IZNOS, +, 50000);
					SetBusinessData(businessid, B_TIME_REPAIR_1, gettime());
					GivePlayerMoneyEx(playerid, -RandomEx(5000000, 10000000));
					SCM(playerid,COLOR_GOLD,"[Информация] Диагностика прошла успешно, энергия пополнилась.");
				}
				case 2:
				{
					if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 10000000)) return SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно денег.");
					AddBusinessData(businessid, B_IZNOS, +, 50000);
					SetBusinessData(businessid, B_TIME_REPAIR_2, gettime());
					GivePlayerMoneyEx(playerid, -RandomEx(5000000, 10000000));
					SCM(playerid,COLOR_GOLD,"[Информация] Диагностика прошла успешно, энергия пополнилась.");
				}
			} 
			format(g_business[businessid][B_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_business[businessid][B_BALANCE], RandomEx(9500000, 12000000)));
			new query[248];
			mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d, `balance`=%s, `time_repair_1`=%d, `time_repair_2`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(businessid, B_IZNOS), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_TIME_REPAIR_1), GetBusinessData(businessid, B_TIME_REPAIR_2), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);
		}
	}
	*/
	case DIALOG_BIZ_VETRIKI:
	{
		if(!response) return 1;
		new businessid = GetPlayerInBiz(playerid);
		if(GetBusinessData(businessid, B_IZNOS) != 0)
			return SCM(playerid, -1, "Данная ветряная электростанция не нуждается в ремонте");

		if(businessid != -1)
		{	
			switch(listitem + 1)
			{
				case 1: 
				{
					AddBusinessData(businessid, B_IZNOS, +, 500);
					SetBusinessData(businessid, B_TIME_REPAIR_1, gettime());
					SCM(playerid,COLOR_GOLD,"[Информация] Диагностика прошла успешно, энергия пополнилась.");
				}
				case 2:
				{
					AddBusinessData(businessid, B_IZNOS, +, 500);
					SetBusinessData(businessid, B_TIME_REPAIR_2, gettime());
					SCM(playerid,COLOR_GOLD,"[Информация] Диагностика прошла успешно, энергия пополнилась.");
				}
			}
			format(g_business[businessid][B_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_business[businessid][B_BALANCE], RandomEx(2000000, 6000000)));
			new query[248];
			mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d, `balance`=%s, `time_repair_1`=%d, `time_repair_2`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(businessid, B_IZNOS), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_TIME_REPAIR_1), GetBusinessData(businessid, B_TIME_REPAIR_2), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);
		}
	}
	case DIALOG_ACTION_FISH:
	{
		if(!response)
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "Fishing");
			BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
			BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Начать рыбалку\"]]");
			g_player_deteling_id[playerid] = 0;
			g_player_status_fish[playerid] = 2;
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid,true);
			SCM(playerid, 0x56e65eFF, "Вы отпустили рыбу в воду.");
			GameText(playerid, "РЫБАК +4", 3000, 2);
			return true;
		}
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Fishing");
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
		BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Начать рыбалку\"]]");
		g_player_deteling_id[playerid] = 0;
		g_player_status_fish[playerid] = 2;
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);
		GiveIteam(playerid, 133, 1, 1, g_player_type_fish[playerid]);
		SCM(playerid, 0x56e65eFF, "Вы забрали рыбу себе.");
		GameText(playerid, "РЫБАК +2", 3000, 2);
	}
	case DIALOG_BIZ_GUN:
	{
		if(!response) return 1;

		switch(listitem)
		{
			case 0:
			{
				if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 30000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
				GivePlayerMoneyEx(playerid, -30000000);
				GiveWeapon(playerid, 34, 100);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}СВД {FFAF00}в количестве {FFFFFF}100 шт. {FFAF00}за {FFFFFF}30.000.000 Рублей");
			}
			case 1:
			{
				if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 5000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
				GivePlayerMoneyEx(playerid, -5000000);
				GiveWeapon(playerid, WEAPON_BAT, 1);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Биту {FFAF00}в количестве {FFFFFF}100 шт. {FFAF00}за {FFFFFF}5.000.000 Рублей");
			}
			case 2:
			{
				if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 10000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
				GivePlayerMoneyEx(playerid, -10000000);
				GiveWeapon(playerid, 26, 100);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Обрез {FFAF00}в количестве {FFFFFF}100 шт. {FFAF00}за {FFFFFF}10.000.000 Рублей");
			}
			case 3:
			{		
				if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 13000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
				GivePlayerMoneyEx(playerid, -13000000);				
				GiveWeapon(playerid, 24, 100);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}Desert Eagle {FFAF00}в количестве {FFFFFF}100 шт. {FFAF00}за {FFFFFF}13.000.000 Рублей");
			}
			case 4:
			{
				if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 25000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
				GivePlayerMoneyEx(playerid, -25000000);
				GiveWeapon(playerid, 29, 100);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}MP-5 {FFAF00}в количестве {FFFFFF}100 шт. {FFAF00}за {FFFFFF}25.000.000 Рублей");
			
			}
			case 5:
			{
				if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 25000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
				GivePlayerMoneyEx(playerid, -25000000);
				GiveWeapon(playerid, 30, 100);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}АК-74М {FFAF00}в количестве {FFFFFF}100 шт. {FFAF00}за {FFFFFF}25.000.000 Рублей");
			}
			case 6:
			{
				if (!GetILPlayerInt(GetPlayerMoneyEx(playerid), 30000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
				GivePlayerMoneyEx(playerid, -30000000);
				GiveWeapon(playerid, 31, 100);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}М4 {FFAF00}в количестве {FFFFFF}100 шт. {FFAF00}за {FFFFFF}30.000.000 Рублей");
			}
		}
	}
	case DIALOG_DONAT_VALUTE:
	{
		if(!response) return ShowPlayerDonateMenu1(playerid);

		switch(listitem)
		{
			case 0:
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GivePlayerMoneyEx(playerid, 100000000);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}100.000.000 Рублей{FFAF00} за {FFFFFF}100 "SERVER_RUB"");
			}
			case 1:
			{
				if(GetPlayerCoins(playerid) < 259) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -259);
				GivePlayerMoneyEx(playerid, 300000000);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}300.000.000 Рублей{FFAF00} за {FFFFFF}259 "SERVER_RUB"");
			}
			case 2:
			{
				if(GetPlayerCoins(playerid) < 459) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -459);
				GivePlayerMoneyEx(playerid, 600000000);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}600.000.000 Рублей{FFAF00} за {FFFFFF}459 "SERVER_RUB"");
			}
			case 3:
			{		
				if(GetPlayerCoins(playerid) < 799) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -799);
				GivePlayerMoneyEx(playerid, 1000000000);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}1.000.000.000 Рублей{FFAF00} за {FFFFFF}799 "SERVER_RUB"");
			}
			case 4:
			{
				if(GetPlayerCoins(playerid) < 1300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -1300);
				GivePlayerMoneyEx(playerid, 2000000000);
				SCM(playerid, -1, "{FFAF00}Вы успешно приобрели: {FFFFFF}2.000.000.000 Рублей{FFAF00} за {FFFFFF}1300 "SERVER_RUB"");
			}
		}
	}
	case DIALOG_BIZ_SHOP_FISH:
	{
		new businessid = GetNearestBusiness(playerid, 3.0);
		if(businessid == -1) 
			return true;
		if(!response) 
			return true;
		new price, 
			item_id, 
			indx, 
			count,
			name[24];
		switch(listitem + 1)
		{
			case 1: price = 122500, item_id = 132, indx = 0, count = 1, format(name, sizeof name, "Поплавочная удочка");
			case 2:	price = 245000, item_id = 132, indx = 1, count = 1, format(name, sizeof name, "Улучшенная удочка");
			case 3:	price = 700000, item_id = 132, indx = 2, count = 1, format(name, sizeof name, "Спиннинг");
			case 4:	price = 87500, item_id = 325, indx = 0, count = 1, format(name, sizeof name, "Леска 0.15мм");
			case 5:	price = 140000, item_id = 325, indx = 1, count = 1, format(name, sizeof name, "Леска 0.3мм");
			case 6:	price = 280000, item_id = 325, indx = 2, count = 1, format(name, sizeof name, "Леска 0.85мм");
			case 7:	price = 3500, item_id = 326, indx = 0, count = 10, format(name, sizeof name, "Кусочки хлеба");
			case 8:	price = 7000, item_id = 326, indx = 1, count = 10, format(name, sizeof name, "Лягушка");
			case 9:	price = 10500, item_id = 326, indx = 2, count = 10, format(name, sizeof name, "Кузнечик");
			case 10: price = 3500, item_id = 326, indx = 3, count = 10, format(name, sizeof name, "Червь");
			case 11: price = 14000, item_id = 326, indx = 4, count = 10, format(name, sizeof name, "Мотыль");
			case 12: price = 14000, item_id = 326, indx = 5, count = 10, format(name, sizeof name, "Опарыш");
			case 13: price = 350000, item_id = 15576, indx = 0, count = 10, format(name, sizeof name, "Акваланг");
		}
		if(GetInventorySlots(playerid) == -1) 
			return SCM(playerid, 0xCECECEFF, "В вашем инвентаре нет свободного места");
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) 
			return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно средств");
		SCMF(playerid, 0xbacb69FF, "Вы купили \"%s\" за %d руб.", name, price);
		GivePlayerMoneyEx(playerid, -price, "Покупка в магазине рыбалова");
		if(listitem + 1 != 13)
			GiveIteam(playerid, item_id, 1, count, indx);
		else
			GiveSkin(playerid, item_id);
		if(GetBusinessData(businessid, B_PRODS) >= 1)
			AddBusinessProfit(playerid, businessid, price, 1);
	}
   case DIALOG_BIZ_SHOP_24_7:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
						{
							new price;
							new take_prods;
							switch(listitem + 1)
							{
								case 1:
								{
									price = 350000;
									take_prods = 2;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Набор для диагностики стоит 350000 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка диагностики авто");
									GiveIteam(playerid, 254, 1, 5, 0);
									SendClientMessage(playerid, 0x66CC00FF, "Вы купили набор для диагностики на 5 проверок авто");
									SendClientMessage(playerid, 0x66CC00FF, "Использовать набор: /diagnostics");
								}
								case 2:
								{
									price = 5000;
									take_prods = 2;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Набор фотографа стоит 5000 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка фотоаппарата");
									GiveWeapon(playerid, 43, 15);
									SendClientMessage(playerid, 0x66CC00FF, "Вы купили камеру на 15 снимков");
								}
								case 3:
								{
									Dialog
									(
										playerid, DIALOG_RENTBUY, DIALOG_STYLE_MSGBOX,
										"{FFFFFF}Покупка ремкомплекта",
										"{FFFFFF}Стоимость ремкомплекта: {008000}35.000 руб\n\n"\
										"{FFFFFF}Вы действительно хотите купить ремкомплект?",
										"Далее", "Отмена"
									);
								}
								case 4:
								{
									price = 5000;
									take_prods = 2;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Топор стоит 5000 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка топора");
									GiveWeapon(playerid, WEAPON_CANE, 1);
									SendClientMessage(playerid, 0x66CC00FF, "Вы купили топор");
								}
								case 5:
								{
									price = 15000;
									take_prods = 5;
									if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Парашют стоит 15000 рублей");
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка парашюта");
									GiveWeapon(playerid, WEAPON_PARACHUTE, 1);
									SendClientMessage(playerid, 0x66CC00FF, "Вы купили парашют");
								}
								case 6:
								{
									Dialog(playerid, DIALOG_LOTTERY, DIALOG_STYLE_TABLIST_HEADERS, "Список лотерей", "Название \t № \t Цена билета \t Бюджет \t Статус\n 1. 'Новогодний' \t №:1 \t 5.000.000 руб \t 100.000.000 руб \t активна ", "Выбрать", "Закрыть");
								}
								case 7:
								{
									price = 25000;
									take_prods = 1;
									if(!GetPlayerData(playerid, P_MASK))
									{
										if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return SendClientMessage(playerid, 0xCECECEFF, "Маска стоит 25000 рубль");
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessProfit(playerid, businessid, price, take_prods);
										}
										GivePlayerMoneyEx(playerid, -price, "Покупка маски");
										SetPlayerData(playerid, P_MASK, 1);
										SendClientMessage(playerid, 0x66CC00FF, "Вы купили маску");
										SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/mask {66CC00}для скрытия Вашего расположения на карте (на 10 минут)");
									}
									else SendClientMessage(playerid, 0x999999FF, "Вы уже приобрели маску");
								}
								case 8:
								{
									price = 15000;
									take_prods = 3;
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_SHOP_GARDEN_ACCEPT:
			{
				if(!response) 
					return callcmd::buy(playerid, "");
				new businessid = GetPlayerInBiz(playerid);
				new price, item_id, indx;
				new type = GetPVarInt(playerid, "shop_garden_type");
				switch(type)
				{
					case 1: item_id = 173, indx = 0;
					case 2:	item_id = 174, indx = 0;
					case 3: price = 500000, item_id = 168, indx = 0;
					case 4: item_id = 336, indx = 0;
					case 5: item_id = 336, indx = 1;
					case 6: item_id = 336, indx = 2;
					case 7: item_id = 336, indx = 3;
					case 8: item_id = 336, indx = 4;
					case 9: item_id = 336, indx = 5;
					case 10: price = 3500000, item_id = 0, indx = 0;
				}
				if(type != 3 && type != 10) 
				{
					if(strval(inputtext) > 0 && IsNumeric(inputtext) && strval(inputtext) < 100)
						price = 50000 * strval(inputtext);
					else 
						return SCM(playerid, COLOR_GREY, "За один раз можно приобрести от 1 до 100 шт.");
				}
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) 
					return SCM(playerid, COLOR_GREY, "Недостаточно средств для покупки."), callcmd::buy(playerid, "");
				if(type == 10)
					GiveWeapon(playerid, 6, 1), SCMF(playerid, 0xc6e469FF, "Вы купили \"Лопата\" за %s руб.", formatInt(price));
				else if(type == 3)
					GiveIteam(playerid, item_id, 1, 1, indx), SCMF(playerid, 0xc6e469FF, "Вы купили \"%s\" за %s руб.", ItemsInfo[item_id], formatInt(price));
				else 
					GiveIteam(playerid, item_id, 1, strval(inputtext), indx), SCMF(playerid, 0xc6e469FF, "Вы купили \"%s\" за %s руб.", ItemsInfo[item_id], formatInt(price));
				GivePlayerMoneyEx(playerid, -price, "Покупка в магазине садовод");
				if(GetBusinessData(businessid, B_PRODS) >= 1)
					AddBusinessProfit(playerid, businessid, price / 100 * 20, 1);	
				callcmd::buy(playerid, "");
			}
			case DIALOG_BIZ_SHOP_GARDEN:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(!response) return 1;
					if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре ~n~нет свободного места", 3000, 2);
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_GARDEN))
					{
						switch(listitem + 1)
						{
							case 1:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_INPUT,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Семена томата\n\
									{FFFFFF}Стоимость: {dc8d47}50.000 руб за 1 шт.\n\n\
									{FFFFFF}Укажите количество, которое хотите приобрести:",
									"Купить", "Отмена"
								);
							}
							case 2:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_INPUT,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Семена огурцов\n\
									{FFFFFF}Стоимость: {dc8d47}50.000 руб за 1 шт.\n\n\
									{FFFFFF}Укажите количество, которое хотите приобрести:",
									"Купить", "Отмена"
								);
							}
							case 3:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_MSGBOX,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Лейка\n\
									{FFFFFF}Стоимость: {dc8d47}500.000 руб",
									"Купить", "Отмена"
								);
							}
							case 4:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_INPUT,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Семена картофеля\n\
									{FFFFFF}Стоимость: {dc8d47}50.000 руб за 1 шт.\n\n\
									{FFFFFF}Укажите количество, которое хотите приобрести:",
									"Купить", "Отмена"
								);
							}
							case 5:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_INPUT,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Семена свёклы\n\
									{FFFFFF}Стоимость: {dc8d47}50.000 руб за 1 шт.\n\n\
									{FFFFFF}Укажите количество, которое хотите приобрести:",
									"Купить", "Отмена"
								);
							}
							case 6:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_INPUT,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Семена перца\n\
									{FFFFFF}Стоимость: {dc8d47}50.000 руб за 1 шт.\n\n\
									{FFFFFF}Укажите количество, которое хотите приобрести:",
									"Купить", "Отмена"
								);
							}
							case 7:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_INPUT,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Семена баклажана\n\
									{FFFFFF}Стоимость: {dc8d47}50.000 руб за 1 шт.\n\n\
									{FFFFFF}Укажите количество, которое хотите приобрести:",
									"Купить", "Отмена"
								);
							}
							case 8:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_INPUT,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Семена капусты\n\
									{FFFFFF}Стоимость: {dc8d47}50.000 руб за 1 шт.\n\n\
									{FFFFFF}Укажите количество, которое хотите приобрести:",
									"Купить", "Отмена"
								);
							}
							case 9:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_INPUT,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Семена моркови\n\
									{FFFFFF}Стоимость: {dc8d47}50.000 руб за 1 шт.\n\n\
									{FFFFFF}Укажите количество, которое хотите приобрести:",
									"Купить", "Отмена"
								);
							}
							case 10:
							{
								Dialog
								(
									playerid, DIALOG_BIZ_SHOP_GARDEN_ACCEPT, DIALOG_STYLE_MSGBOX,
									"{FFFFFF}Подтверждение",
									"{FFFFFF}Вы подтверждаете покупку данного товара?\n\n\n\
									{FFFFFF}Товар: {e5bd44}Лопата\n\
									{FFFFFF}Стоимость: {dc8d47}3.500.000 руб",
									"Купить", "Отмена"
								);
							}
						}
						SetPVarInt(playerid, "shop_garden_type", listitem + 1);
					}
				}
			}
			case DIALOG_BIZ_AVTOZAP_1:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(response)
				{
    				new price;
			    	new take_prods;
					switch(listitem)
					{
					    case 0:
						{
							price = 35000;
							take_prods = 2;
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessProfit(playerid, businessid, price, take_prods);
								}
								GivePlayerMoneyEx(playerid, -price, "Покупка инструментов");
								SendClientMessage(playerid, 0x66CC00FF, "Вы купили моторное масло. Чтобы его заменить, езжайте в СТО (Арзамас)");
							}
							else SendClientMessage(playerid, 0x888888FF, "Моторное масло стоит 200 рублей");
						}
						case 1:
						{
							price = 70000;
							take_prods = 4;
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessProfit(playerid, businessid, price, take_prods);
								}
								GivePlayerMoneyEx(playerid, -price, "Покупка инструментов");
								SendClientMessage(playerid, 0x66CC00FF, "Вы купили воздушный фильтр. Чтобы его заменить, езжайте в СТО (Арзамас)");
							}
							else SendClientMessage(playerid, 0x888888FF, "Воздушный фильтр стоит 300 рублей");
						}
						case 2:
						{
							price = 70000;
							take_prods = 3;
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessProfit(playerid, businessid, price, take_prods);
								}
								GivePlayerMoneyEx(playerid, -price, "Покупка инструментов");
								SendClientMessage(playerid, 0x66CC00FF, "Вы купили маслянный фильтер. Чтобы его заменить, езжайте в СТО (Арзамас)");
							}
							else SendClientMessage(playerid, 0x888888FF, "Маслянный фильтр стоит 100 рублей");
						}
						case 3:
						{
							price = 300000;
							take_prods = 4;
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessProfit(playerid, businessid, price, take_prods);
								}
								GivePlayerMoneyEx(playerid, -price, "Покупка инструментов");
								SendClientMessage(playerid, 0x33AA33FF, "Вы купили савбуфер.");
								SendClientMessage(playerid, 0xFFFFFFFF, "Установить в авто {33AA33}/sab{FFFFFF}, снять с авто {33AA33}/remove_sab");
							}
							else SendClientMessage(playerid, 0x888888FF, "Савбуфер стоит 30.000 рублей");
						}
						case 4:
						{
							price = 750000;
							take_prods = 2;
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessProfit(playerid, businessid, price, take_prods);
								}
								GivePlayerMoneyEx(playerid, -price, "Покупка автосигнализации");
								GiveIteam(playerid, 256, 1, 1, 0);
								SendClientMessage(playerid, 0x66CC00FF, "Вы купили автосигнализацию");
								SendClientMessage(playerid, 0x66CC00FF, "Использовать ключ: {2f89f7}/keys");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автосигнализация стоит 350.000 рублей");
						}
						case 5:
						{
							price = 150000;
							take_prods = 2;
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessProfit(playerid, businessid, price, take_prods);
								}
								GivePlayerMoneyEx(playerid, -price, "Покупка рем. комплекта");
								GiveIteam(playerid, 44, 1, 1, 0);
								SendClientMessage(playerid, 0x66CC00FF, "Вы купили рем. комплект");
								SendClientMessage(playerid, 0x66CC00FF, "Использовать рем. комплект: {2f89f7}через инвентарь или /fixcar");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Рем. комплект стоит 15.000 рублей");
						}
					}
				}
			}
			case DIALOG_BIZ_CELL_SALON:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
						{
							new price;
							new take_prods;
							switch(listitem + 1)
							{
								case 1:
								{
									price = 15000;
									take_prods = 2;
									if(!GetPlayerPhone(playerid))
									{
										if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessProfit(playerid, businessid, price, take_prods);
											}
											GivePlayerMoneyEx(playerid, -price, "Покупка телефона");
											SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);
											UpdatePlayerDatabaseInt(playerid, "phone", GetPlayerData(playerid, P_PHONE));
											SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFD83D}/c(/call) или /call [номер телефона] {66CC00}чтобы сделать звонок.");
											SendClientMessage(playerid, 0x66CC00FF, "Для отправки SMS сообщения используйте {FFD83D}/sms{66CC00}. Другие команды: {FFD83D}/menu > Список команд > Общение");
											new query[148];
											format
											(
												query, sizeof query,
												"{FFFFFF}Поздравляем!\n"\
												"Вы купили мобильный телефон. Ваш номер: {FFD83D}%d",
												GetPlayerPhone(playerid)
											);
											Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Покупка мобильного телефона", query, "Закрыть", "");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Мобильный телефон стоит 15000 рублей");
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас уже есть мобильный телефон");
									}
								}
								case 2:
								{
									price = 18000;
									take_prods = 4;
									if(!GetPlayerWatch(playerid))
									{
										if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessProfit(playerid, businessid, price, take_prods);
											}
											GivePlayerMoneyEx(playerid, -price, "Покупка Apple Watch");
											SetPlayerData(playerid, P_WATCH, GetPlayerAccountID(playerid) + 1000000);
											SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFD83D}/watch для открытия часов.");
											new query[148];
											format
											(
												query, sizeof query,
												"{FFFFFF}Поздравляем!\n"\
												"Вы купили наручные часы - Apple Watch.",
												GetPlayerWatch(playerid)
											);
											Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Покупка наручных часов", query, "Закрыть", "");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Apple Watch стоят 18000 рублей");
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "* У Вас уже есть Apple Watch");
									}
								}
								case 3:
								{
									price = 4300;
									if(GetPlayerPhone(playerid))
									{
										if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
												"{66CC00}Изменение номера",
												"{FFFFFF}Введите новый номер в поле ниже\n\n"\
												"{FF6633}Примечания:\n"\
												"{FFD83D}- Номер должен быть шестизначным,\n"\
												"например: 777777\n"\
												"- Номер не должен начинаться с 0\n\n"\
												"{FFFFFF}Вы также можете вернуть свой\n"\
												"стандартный номер. Для этого\n"\
												"введите в поле {3399FF}цифру 0",
												"Сменить", "Отмена"
											);
											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Для изменение номера телефона необходимо 4300 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");
									callcmd::buy(playerid, "");
								}
								case 4:
								{
									price = 1400;
									if(GetPlayerPhone(playerid))
									{
										if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_COLOR, DIALOG_STYLE_LIST,
												"{66CC00}Изменение цвета телефона",
												"1. Карамельный\n"\
												"2. Синий\n"\
												"3. Оранжевый\n"\
												"4. Серебристый\n"\
												"5. Розовый\n"\
												"6. Красный\n"\
												"7. Зеленый\n"\
												"8. Темно-синий\n"\
												"9. Желтый\n"\
												"10. Белый",
												"Поменять", "Отмена"
											);
											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 1400 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");
									callcmd::buy(playerid, "");
								}
								case 5:
								{
									if(GetPlayerPhone(playerid) != 0)
									{
										Dialog
										(
											playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
											"{FFD83D}Пополнение мобильного телефона",
											"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
											"Готово", "Назад"
										);
										return 1;
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");
									callcmd::buy(playerid, "");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_PHONE_BALANCE:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							new sum = strval(inputtext);
							if(sum > 0 && IsNumeric(inputtext))
							{
								if(GetILPlayerInt(GetPlayerMoneyEx(playerid), sum))
								{
									new query[128];
									format(query, sizeof query, "UPDATE accounts SET money=%s,phone_balance=%d WHERE id=%d LIMIT 1", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid), -sum), GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -sum, "Пополнение счета телефона", false, true);
										AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);
										format(query, sizeof query, "Вы пополнили счет мобильного телефона на {FF9900}%d руб", sum);
										SendClientMessage(playerid, 0x66CC00FF, query);
										format(query, sizeof query, "Сейчас на счету %d руб", GetPlayerData(playerid, P_PHONE_BALANCE));
										SendClientMessage(playerid, 0x66CC00FF, query);
										return 1;
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 15)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");
							}
							Dialog
							(
								playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
								"{FFD83D}Пополнение мобильного телефона",
								"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
								"Готово", "Назад"
							);
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_NUMBER:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							new buffer = strlen(inputtext);
							if((1 <= buffer <= 10) && IsNumeric(inputtext))
							{
								new fmt_str[175];
								new number = strval(inputtext);
								new price = 10000;
								new take_prods = 3;
								if(number > 0)
								{
									if(inputtext[0] != '0' && buffer == 6)
									{
										new Cache: result;
										buffer = 0;
										format(fmt_str, sizeof fmt_str, "SELECT id FROM accounts WHERE phone=%d LIMIT 1", number);
										result = mysql_query(mysql, fmt_str, true);
										buffer = cache_num_rows();
										cache_delete(result);
										if(!buffer)
										{
											if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessProfit(playerid, businessid, price, take_prods);
												}
												GivePlayerMoneyEx(playerid, -price, "Смена номера телефона[1]");
												SetPlayerData(playerid, P_PHONE, number);
												UpdatePlayerDatabaseInt(playerid, "phone", GetPlayerData(playerid, P_PHONE));
												format
												(
													fmt_str, sizeof fmt_str,
													"{FFFFFF}Номер телефона изменен\n"\
													"Теперь с Вами  можно связаться по номеру {FFD83D}%d",
													GetPlayerPhone(playerid)
												);
												return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", fmt_str, "Закрыть", "");
											}
											else
											{
												return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
											}
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Введенный Вами номер уже занят");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Номер введен некорректно. Повторите попытку");
								}
								else
								{
									if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessProfit(playerid, businessid, price, take_prods);
										}
										GivePlayerMoneyEx(playerid, -price, "Смена номера телефона[2]");
										SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);
										UpdatePlayerDatabaseInt(playerid, "phone", GetPlayerData(playerid, P_PHONE));
										format(fmt_str, sizeof fmt_str, "{FFFFFF}Установлен Ваш стандартный номер: {FFD83D}%d", GetPlayerPhone(playerid));
										return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", fmt_str, "Закрыть", "");
									}
									else
									{
										return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
									}
								}
							}
							Dialog
							(
								playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
								"{66CC00}Изменение номера",
								"{FFFFFF}Введите новый номер в поле ниже\n\n"\
								"{FF6633}Примечания:\n"\
								"{FFD83D}- Номер должен быть шестизначным,\n"\
								"например: 777777\n"\
								"- Номер не должен начинаться с 0\n\n"\
								"{FFFFFF}Вы также можете вернуть свой\n"\
								"стандартный номер. Для этого\n"\
								"введите в поле {3399FF}цифру 0",
								"Сменить", "Отмена"
							);
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_COLOR:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							if(0 <= listitem <= 9)
							{
								new price = 2500;
								new take_prods = 1;
								if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
								{
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Смена цвета телефона");
									SetPlayerData(playerid, P_PHONE_COLOR, listitem);
									SendClientMessage(playerid, 0x3399FFFF, "Вы изменили цвет своего мобильного телефона");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 2500 рублей");
							}
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CLUB:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CLUB, 15.0)
					|| IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CASINO, 15.0))
					{
						if(response)
						{
							if(0 <= listitem <= 9)
							{
								new const
									item_price[10] = {1500, 3000, 3000, 2700, 6000, 9000, 12000, 7500, 5000, 1500};
								if(GetILPlayerInt(GetPlayerMoneyEx(playerid), item_price[listitem]))
								{
									new take_prods = 1;
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, item_price[listitem], take_prods);
									}
									GivePlayerMoneyEx(playerid, -item_price[listitem], "Покупка в клубе/казино");
									GivePlayerDrinkItem(playerid, listitem);
									switch(listitem+1)
									{
										case 1: Action(playerid, "купил(а) банку лимонада", 	15.0, false);
										case 2: Action(playerid, "купил(а) бутылку пива", 		15.0, false);
										case 3: Action(playerid, "купил(а) бутылку вина", 		15.0, false);
										case 4: Action(playerid, "купил(а) бутылку шампанского",15.0, false);
										case 5: Action(playerid, "купил(а) бутылку водки", 		15.0, false);
										case 6: Action(playerid, "купил(а) бутылку коньяка",	15.0, false);
										case 7: Action(playerid, "купил(а) бутылку виски", 		15.0, false);
										case 8: Action(playerid, "купил(а) бутылку абсента", 	15.0, false);
										case 9: Action(playerid, "купил(а) закуску", 			15.0, false);
										case 10:Action(playerid, "купил(а) сигару", 			15.0, false);
									}
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас не хватает денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_SHOP_APTEKA:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_APTEKA))
						{
							new price;
							new take_prods;
							switch(listitem + 1)
							{
								case 1:
								{
									price = 50000;
									take_prods = 1;
                                    if(GetIteam(playerid, 2) == 0)
									{
										if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessProfit(playerid, businessid, price, take_prods);
											}
											GivePlayerMoneyEx(playerid, -price, "Покупка аптечек");
											GiveIteam(playerid, 2,1, 2,0);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Две аптечки стоят 50.000 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Можно иметь всего 2 аптечки");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_GARAGE_BAR:
			{
				if(response)
				{
					if(0 <= listitem <= 9)
					{
						GivePlayerDrinkItem(playerid, listitem);
						switch(listitem+1)
						{
							case 1: Action(playerid, "взял(а) банку лимонада", 	15.0, false);
							case 2: Action(playerid, "взял(а) бутылку пива", 		15.0, false);
							case 3: Action(playerid, "взял(а) бутылку вина", 		15.0, false);
							case 4: Action(playerid, "взял(а) бутылку шампанского",15.0, false);
							case 5: Action(playerid, "взял(а) бутылку водки", 		15.0, false);
							case 6: Action(playerid, "взял(а) бутылку коньяка",	15.0, false);
							case 7: Action(playerid, "взял(а) бутылку виски", 		15.0, false);
							case 8: Action(playerid, "взял(а) бутылку абсента", 	15.0, false);
							case 9: Action(playerid, "взял(а) закуску", 			15.0, false);
							case 10:Action(playerid, "взял(а) сигару", 			15.0, false);
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_LIST:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							if(0 <= listitem <= MAX_BUSINESS-1)
							{
								new price = 2500; //
								if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
								{
									new fmt_str[300];
									GivePlayerMoneyEx(playerid, -price, "Просмотр инфо о бизнесе (управление статистики)", true, true);
									businessid = g_business_realtor_list_idx[listitem];
									SetPlayerUseListitem(playerid, businessid);
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Название:\t\t\t%s\n"\
										"Номер бизнеса:\t\t%d\n"\
										"Город / область:\t\t%s\n"\
										"Район:\t\t\t\t%s\n"\
										"Стоимость:\t\t\t%s\n\n"\
										"{FFFFFF}Вы также можете посмотреть фотографию бизнеса.\n"\
										"Для этого нажмите кнопку Фото. {FFD83D}Услуга стоит 2500 руб",
										GetBusinessData(businessid, B_NAME),
										businessid,
										GetCityName(GetBusinessData(businessid, B_CITY)),
										GetZoneName(GetBusinessData(businessid, B_ZONE)),
										formatInt(GetBusinessData(businessid, B_PRICE))
									);
									Dialog(playerid, DIALOG_BIZ_REALTOR_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{CC9900}Информация о выбранном бизнесе", fmt_str, "Фото", "Закрыть");
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							new price = 5000; //
							businessid = GetPlayerUseListitem(playerid);
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
							{
								GivePlayerMoneyEx(playerid, -price, "Просмотр фото бизнеса (управление статистики)", true, true);
								TogglePlayerSpectating(playerid, true);
								SetPlayerVirtualWorld(playerid, playerid + 50);
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {99CC00}~k~~PED_SPRINT~ {FFFFFF}для выхода");
								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_BIZ);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_BIZ, businessid);
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_GET:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 5500;
							new houseid = strval(inputtext);
							if(strlen(inputtext) && IsNumeric(inputtext) && (0 <= houseid <= g_house_loaded-1))
							{
								if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
								{
									GivePlayerMoneyEx(playerid, -price, "Просмотр инфо о доме (риелторское агенство)", true, true);
									new fmt_str[512];
									new type = GetHouseData(houseid, H_TYPE);
									new entranceid = GetHouseData(houseid, H_ENTRACE);
									SetPlayerUseListitem(playerid, houseid);
									if(entranceid != -1)
									{
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Тип / название:\t\t%s\n"\
											"Номер квартиры:\t\t%d\n"\
											"Номер подъезда:\t\t%d\n"\
											"Город / область:\t\t%s\n"\
											"Район:\t\t\t\t%s\n"\
											"Стоимость:\t\t\t%s\n"\
											"Количество комнат:\t\t%d\n"\
											"Статус:\t\t\t\t%s\n\n"\
											"{FFFFFF}Вы можете посмотреть как выглядит подъезд этой квартиры\n"\
											"Для этого нажмите кнопку Фото. {FFD83D}Услуга стоит 2500 рублей",
											GetHouseData(houseid, H_NAME),
											GetHouseData(houseid, H_FLAT_ID) + 1,
											entranceid + 1,
											GetCityName(GetEntranceData(entranceid, E_CITY)),
											GetZoneName(GetEntranceData(entranceid, E_ZONE)),
											formatInt(GetHouseData(houseid, H_PRICE)),
											GetHouseTypeInfo(type, HT_ROOMS),
											IsHouseOwned(houseid) ? ("{FF6600}Квартира занята") : ("{00CC33}Квартира свободна")
										);
									}
									else
									{
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Тип / название:\t\t%s\n"\
											"Номер дома:\t\t\t%d\n"\
											"Город / область:\t\t%s\n"\
											"Район:\t\t\t\t%s\n"\
											"Стоимость:\t\t\t%s\n"\
											"Количество комнат:\t\t%d\n"\
											"Статус:\t\t\t\t%s\n\n"\
											"{FFFFFF}Вы также можете посмотреть как выглядит этот дом снаружи.\n"\
											"Для этого нажмите кнопку Фото. {FFD83D}Услуга стоит 2500 рублей",
											GetHouseData(houseid, H_NAME),
											houseid,
											GetCityName(GetHouseData(houseid, H_CITY)),
											GetZoneName(GetHouseData(houseid, H_ZONE)),
											formatInt(GetHouseData(houseid, H_PRICE)),
											GetHouseTypeInfo(type, HT_ROOMS),
											IsHouseOwned(houseid) ? ("{FF6600}Дом занят") : ("{00CC33}Дом свободен")
										);
									}
									Dialog(playerid, DIALOG_BIZ_REALTOR_HOME_INFO, DIALOG_STYLE_MSGBOX, "{FF9933}Информация о выбранном доме", fmt_str, "Фото", "Назад");
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
							else
							{
								if(!(0 <= houseid <= g_house_loaded-1))
									SendClientMessage(playerid, 0xCECECEFF, "Этот дом еще не построили");
								ShowPlayerRealtorHomeDialog(playerid);
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 3000; 
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
							{
								GivePlayerMoneyEx(playerid, -price, "Просмотр фото дома (риелторское агенство)", true, true);
								TogglePlayerSpectating(playerid, true);
								SetPlayerVirtualWorld(playerid, playerid + 3000);
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {00CC99}~k~~PED_SPRINT~ {FFFFFF}для выхода");
								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_HOUSE);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_HOUSE, GetPlayerUseListitem(playerid));
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
						}
						else ShowPlayerRealtorHomeDialog(playerid);
					}
				}
			}
			case DIALOG_BIZ_CLOTHING_BUY:
			{
	            if(!response) return 1;
	            new bizid = GetPlayerInBiz(playerid);
	            if(bizid == -1) return 1;
	            if(IsPlayerInBuyPosBiz(playerid, bizid, BUSINESS_TYPE_CLOTHING_SHOP, 50.0)) 
				{
	                new sex = GetPlayerSex(playerid),
	                    item_ = GetPlayerData(playerid, P_SELECT_SKIN),
	                    price = g_business_clothing_skins[sex][item_][g_cost];
	                if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), price)) return GameText(playerid, "~r~Недостаточно~n~средств", 4000, 0);
	                new take_prods = random(200) + 20,
	                    biz_price = price / 100 * 40,
	                    skinid = g_business_clothing_skins[sex][item_][g_model];
                	SetPlayerData(playerid, P_SKIN, skinid);
					UpdatePlayerDatabaseInt(playerid, "skin", skinid);
					SetPlayerSkin(playerid, skinid);
					Action(playerid, "переодевается в другую одежду", _, false);
					if(GetBusinessData(bizid, B_PRODS) >= take_prods)
						AddBusinessProfit(playerid, bizid, biz_price, take_prods);
					GiveSkin(playerid, skinid);
					GivePlayerMoneyEx(playerid, -price, "Покупка скина (магазин одежды)");
					GameText(playerid, "Новая одежда была добавлена в ваш инвентарь", 3000, 2);
                    SetPlayerData(playerid, P_DOSTIJ14, GetPlayerData(playerid, P_DOSTIJ14) + price);
					UpdatePlayerDatabaseInt(playerid, "dostij14", GetPlayerData(playerid, P_DOSTIJ14) + price);
					BitStream_1(playerid, s_CefInterface, t_CefHide, "ClothingStore");
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, true);
					SetPlayerVirtualWorld(playerid, bizid + 255);
					SetPlayerData(playerid, P_SELECT_SKIN, -1);
					p_business_clothing_page[playerid] = 0;
	            }
				return 1;
	        }
			case DIALOG_HOUSE_BUY:
			{
				new houseid = GetPlayerUseListitem(playerid);
				if(houseid >= 1 && response)
				{
					if((GetPlayerOwnableHouse(playerid) + 1) > GetPlayerHouseSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество домов.");
					if(IsPlayerInRangeOfHouse(playerid, houseid, 5.0))
					{
						if(!IsHouseOwned(houseid))
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), GetHouseData(houseid, H_PRICE)))
							{
								if(GetOwnableAuction(0, GetHouseData(houseid, H_SQL_ID)) > 0) return SCM(playerid, COLOR_GREY, "* Данный дом выставлен на аукцион");
								SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы приобрели дом");
								BuyPlayerHouse(playerid, houseid);
								EnterPlayerToHouse(playerid, houseid);
								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								GameText(playerid, "~b~Добро пожаловать ~g~в~n~~y~в новый ~w~ дом!", 4000, 2);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Новый дом", "{FFFFFF}Вам нужно заплатить за дом в ближайшем отделением банка {FFCD00}(/gps)", "Ок", "");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого дома");
						}
						else
						{
							new fmt_str[64];
							format(fmt_str, sizeof fmt_str, "Этот дом уже куплен. Владелец: %s", GetHouseData(houseid, H_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
					}
				}
			}
			case DIALOG_HOUSE_SELL:
			{
				if(!response) return 1;
				SellHouse(playerid);
			}
   			case DIALOG_HOUSE_INFO:
			{
				if(response)
				{
					new houseid = GetPVarInt(playerid, "ownablehouse_id");
					if(houseid != -1)
					{
						ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
					}
				}
			}
			case DIALOG_HOUSE_PARAMS:
			{
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(houseid != -1)
				{
					if(response)
					{
						ShowPlayerHouseDialog(playerid, listitem + 1);
					}
					else callcmd::home(playerid);
				}
			}
			case DIALOG_HOUSE_IMPROVEMENTS:
			{
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_house_improvements - 1)
						{
							new i_level = GetHouseData(houseid, H_IMPROVEMENTS);
							new i_price = g_house_improvements[listitem][I_PRICE];
							if(i_level >= sizeof g_house_improvements) SendClientMessage(playerid, 0x999999FF, "Вы уже приобрели все доступные улучшения для дома");
							else if(i_level < listitem) SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							else if(i_level > listitem) SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							else if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), i_price))
							{
								new fmt_str[64];
								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, houses h SET a.money=%s, h.improvements=%d WHERE a.id=%d AND h.id=%d", SetILPlayerInt(playerid, GetPlayerMoneyEx(playerid),-i_price), i_level + 1, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
								mysql_query(mysql, fmt_str, false);
								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для дома", false, true);
									format(fmt_str, sizeof fmt_str, "Вы улучшили свой дом до {FFCD00}%s {3399FF}уровня", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);
									AddHouseData(houseid, H_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь в доме всегда будет доступна аптечка");
											SendClientMessage(playerid, 0x999999FF, "Вы и ваши гости в любой момент можете использовать ее");
											HouseHealthInit(houseid);
										}
										case 2:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Вы можете разрешить людям проживать в Вашем доме с помощью команды {FF9900}/live");
											SendClientMessage(playerid, 0x999999FF, "В доме могут разместиться столько гостей, сколько в нем комнат");
										}
										case 3:
										{
											SendClientMessage(playerid, 0x66CC00FF, "На Ваше имя была оформлена субсидия, которая дает право платить пониженную квартплату");
											SendClientMessage(playerid, 0x999999FF, "Благодаря этому, ежедневная квартплата уменьшена в 2 раза");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Используйте {3399FF}/makestore {66CC00}для размещения шкафа. В нем можно будет хранить различные вещи");
											SendClientMessage(playerid, 0x999999FF, "В любой момент можно перенести шкаф на другое место. Для открытия шкафа напишите {3399FF}/use");
											HouseStoreInit(houseid);
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 35)");
							}
						}
					}
					ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_PROMO_LIST:
			{
				if(!response) return true;
				new idx = GetPlayerListitemValue(playerid, listitem);
				if(GetPlayerPromo(idx, PA_OWNER_ID) != GetPlayerAccountID(playerid)) return 1;
				if(GetPlayerPromo(idx, PA_STATUS) != 0) return 1;
				new query[94],
				type_prize[6],
				id_prize[6],
				count_prize[6],
				Cache: result;
				format(query, sizeof query, "SELECT * FROM prizes_code WHERE name='%s' LIMIT 1", GetPlayerPromo(idx, PA_NAME));
				result = mysql_query(mysql, query, true);
				if(cache_num_rows())
				{
					type_prize[0] = cache_get_field_content_int(0, "type_prize_1");
					id_prize[0] = cache_get_field_content_int(0, "id_prize_1");
					count_prize[0] = cache_get_field_content_int(0, "count_prize_1");
					type_prize[1] = cache_get_field_content_int(0, "type_prize_2");
					id_prize[1] = cache_get_field_content_int(0, "id_prize_2");
					count_prize[1] = cache_get_field_content_int(0, "count_prize_2");
					type_prize[2] = cache_get_field_content_int(0, "type_prize_3");
					id_prize[2] = cache_get_field_content_int(0, "id_prize_3");
					count_prize[2] = cache_get_field_content_int(0, "count_prize_3");
					type_prize[3] = cache_get_field_content_int(0, "type_prize_4");
					id_prize[3] = cache_get_field_content_int(0, "id_prize_4");
					count_prize[3] = cache_get_field_content_int(0, "count_prize_4");
					type_prize[4] = cache_get_field_content_int(0, "type_prize_5");
					id_prize[4] = cache_get_field_content_int(0, "id_prize_5");
					count_prize[4] = cache_get_field_content_int(0, "count_prize_5");
					type_prize[5] = cache_get_field_content_int(0, "type_prize_6");
					id_prize[5] = cache_get_field_content_int(0, "id_prize_6");
					count_prize[5] = cache_get_field_content_int(0, "count_prize_6");
				}
				cache_delete(result);
				for(new i; i < MAX_PRIZES_CODE; i++)
				{	
					if(type_prize[i] == 1) 
					{
						GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, count_prize[i], 0);
					}
					if(type_prize[i] == 2) 
					{
						GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, count_prize[i], 0);
					}
					if(type_prize[i] == 3) 
					{
						AddPlayerData(playerid, P_EXP, +, count_prize[i]);
						UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
					}
					if(type_prize[i] == 4) 
					{
						format(query, sizeof query, "%s", ItemsInfo[id_prize[i]][i_item_name]),
						GivePlayerMyPrizes(playerid, query, 8, id_prize[i], 0, count_prize[i], 0);
					}
					if(type_prize[i] == 5) 
					{
						format(query, sizeof query, "Транспорт[№%d]", id_prize[i]),
						GivePlayerMyPrizes(playerid, query, 3, id_prize[i], 0, 1, -1);
					}
					if(type_prize[i] == 6) 
					{
						AddPlayerData(playerid, P_BIZ_SLOTS, +, count_prize[i]);
						UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS));
					}
					if(type_prize[i] == 7) 
					{
						AddPlayerData(playerid, P_HOUSE_SLOTS, +, count_prize[i]);
						UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS));
					}
					if(type_prize[i] == 8) 
					{
						AddPlayerData(playerid, P_GARAGE_SLOTS, +, count_prize[i]);
						UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS));
					}
					if(type_prize[i] == 9) 
					{
						AddPlayerData(playerid, P_CAR_SLOTS, +, count_prize[i]);
						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
					}
					if(type_prize[i] == 10) 
					{
						AddPlayerData(playerid, P_KIOSK_SLOTS, +, count_prize[i]);
						UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS));
					}
					if(type_prize[i] == 11) 
					{
						format(query, sizeof query, "Одежда[№%d]", id_prize[i]),
						GivePlayerMyPrizes(playerid, query, 4, id_prize[i], 0, 1, 0);
					}
					if(type_prize[i] == 12) 
					{
						format(query, sizeof query, "Аксессуар[№%d]", id_prize[i]),
						GivePlayerMyPrizes(playerid, query, 6, id_prize[i], 0, 1, count_prize[i]);
					}
					if(type_prize[i] == 13 && id_prize[i] == 1) 
					{
						format(query, sizeof query, "Купон для выхода из тюрьмы Тюрьма (%d мин)", count_prize[i]);
						GivePlayerMyPrizes(playerid, query, 16, count_prize[i], 0, 0, 0);
					}
				}
				SCMF(playerid, 0x64be2fFF, "Вы получаете бонус за использование промокода \"%s\"", GetPlayerPromo(idx, PA_NAME));
				SCM(playerid, 0xFFFFFFFF, "Зайдите в {4a92eb}Игровое меню -> мои награды {FFFFFF}чтобы забрать вещи");
				format(query, sizeof query, "UPDATE promocode_activations SET status=-1 WHERE id=%d", GetPlayerPromo(idx, PA_ID));
				mysql_query(mysql, query, false);
				DestroyPromo(idx);
			}
			case DIALOG_HOUSE_RENTERS:
			{
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= MAX_HOUSE_ROOMS-1)
						{
							new room = GetPlayerListitemValue(playerid, listitem);
							ShowHouseRenterInfo(playerid, houseid, room);
						}
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_INFO:
			{
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							switch(listitem + 1)
							{
								case 4:
								{
									new fmt_str[95];
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Вы действительно хотите выселить {FFCD00}%s {FFFFFF}из своего дома?",
										GetHouseRenterInfo(houseid, room, HR_OWNER_NAME)
									);
									return Dialog(playerid, DIALOG_HOUSE_RENTER_EVICT, DIALOG_STYLE_MSGBOX, "{33AACC}Выселение арендатора", fmt_str, "Да", "Нет");
								}
							}
							ShowHouseRenterInfo(playerid, houseid, room);
						}
						else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_EVICT:
			{
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							new fmt_str[64],
								renter_id = GetPlayerID(GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));
							format(fmt_str, sizeof fmt_str, "Вы выселили %s из своего дома", GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
							EvictHouseRenter(houseid, room, renter_id, playerid);
						}
						else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_EVICT:
			{
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(houseid != -1)
				{
					if(response)
					{
						new roomid = GetPlayerData(playerid, P_HOUSE_ROOM);
						new owner_id = GetPlayerID(GetHouseData(houseid, H_OWNER_NAME));
						EvictHouseRenter(houseid, roomid, playerid);
						if(owner_id != INVALID_PLAYER_ID)
						{
							new fmt_str[45 + 1];
							format(fmt_str, sizeof fmt_str, "%s выселился из Вашего дома", GetPlayerNameEx(playerid));
							SendClientMessage(owner_id, 0x66CC00FF, fmt_str);
						}
						SendClientMessage(playerid, 0x66CC00FF, "Вы выселились из дома");
					}
				}
			}
			case DIALOG_HOUSE_MOVE_STORE:
			{
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(houseid != -1)
				{
					if(response)
					{
						if(GetPlayerInHouse(playerid) == houseid)
						{
							if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
							{
								new type = GetHouseData(houseid, H_TYPE);
								if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
								{
									if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
									{
										new query[128];
										new Float: pos_x, Float: pos_y, Float: pos_z;
										GetPlayerPos(playerid, pos_x, pos_y, pos_z);
										SetHouseData(houseid, H_STORE_X, pos_x);
										SetHouseData(houseid, H_STORE_Y, pos_y);
										SetHouseData(houseid, H_STORE_Z, pos_z);
										DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
										SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);
										HouseStoreInit(houseid);
										format(query, sizeof query, "UPDATE houses SET store_x=%f,store_y=%f,store_z=%f WHERE id=%d LIMIT 1", pos_x, pos_y, pos_z, GetHouseData(houseid, H_SQL_ID));
										mysql_tquery(mysql, query, "", "");
									}
								}
							}
						}
					}
				}
			}
			case DIALOG_HOUSE_ENTER:
			{
				new houseid = GetPlayerUseListitem(playerid);
				if(houseid >= 0 && response && GetPlayerInHouse(playerid) == -1){
					if(!GetHouseData(houseid, H_LOCK_STATUS) || GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid) EnterPlayerToHouse(playerid, houseid);
					else GameText(playerid, "~r~Закрыт", 3000, 2);
				}
			}
			case DIALOG_ENTRANCE_LIFT:
			{
				if(response)
				{
					new entranceid = GetPlayerInEntrance(playerid);
					if(entranceid != -1)
					{
						new floor = GetPlayerInEntranceFloor(playerid);
						if(floor != -1)
						{
							if(0 <= listitem <= MAX_ENTRANCE_FLOORS-1)
							{
								new to_floor = GetPlayerListitemValue(playerid, listitem);
								if(!to_floor)
								{
									SetPlayerPosEx(playerid, 2325.8708,-2455.3804,998.6328,178.6014, 1, entranceid + 2500);
								}
								else SetPlayerPosEx(playerid, 2326.6941,-2455.9602,1009.4453,182.0717, 1, to_floor + 1);
								SetPlayerInEntranceFloor(playerid, to_floor);
							}
						}
					}
				}
			}
			// -----------------------------------------------------------------
			// -----------------------------------------------------------------
			case DIALOG_HOTEL:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						switch(listitem + 1)
						{
							case 1:
							{
								ShowPlayerHotelFloorsInfo(playerid, hotel_id);
							}
							case 2:
							{
								if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
								{
									new free_room = GetHotelFreeRoom(hotel_id);
									if(free_room != -1)
									{
										SetPlayerUseListitem(playerid, free_room);
										new fmt_str[128];
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Мы предлагаем Вам поселиться в номере %d на %d этаже\n"\
											"Регистрация стоит 1000 рублей. Вы уверены?",
											(free_room % 12) + 1,
											(free_room / 12) + 1
										);
										Dialog(playerid, DIALOG_HOTEL_REG_ROOM, DIALOG_STYLE_MSGBOX, "{66CC99}Подтверждение регистрации", fmt_str, "Выбрать", "Назад");
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
											"{66CC99}Свободные номера",
											"{FFFFFF}В этой гостинице нет свободных номеров",
											"Назад", "Закрыть"
										);
									}
								}
								else
								{
									Dialog
									(
										playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
										"{66CC99}Регистрация",
										"{FFFFFF}Вы уже снимаете номер в гостинице",
										"Назад", "Закрыть"
									);
								}
							}
							case 3:
							{
								ShowPlayerHotelClientMenu(playerid, hotel_id);
							}
						}
					}
				}
			}
			case DIALOG_HOTEL_FLOOR_SELECT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						ShowPlayerHotelFloorInfo(playerid, hotel_id, listitem);
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_INFO:
			{
				if(response)
				{
					ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_LIFT:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
						if(0 <= listitem <= max_floors-1)
						{
							new to_floor = GetPlayerListitemValue(playerid, listitem);
							if(!to_floor)
							{
								new businessid = GetPlayerInBiz(playerid);
								new type = GetBusinessData(businessid, B_INTERIOR);
								SetPlayerPosEx(playerid, 730.1479, 599.7930, 1002.9598, 89.9507, GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR), businessid + 255);
							}
							else SetPlayerPosEx(playerid, 1276.0446, -773.2361, 1202.7220, 360.0, to_floor, ((hotel_id + 1) * 200) + (to_floor + 1000));
							SetPlayerData(playerid, P_IN_HOTEL_FLOOR, to_floor);
						}
					}
				}
			}
			case DIALOG_HOTEL_CLIENT_MENU:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						switch(listitem + 1)
						{
							case 1: // Оплатить проживание
							{
								ShowPlayerHotelRoomPayForRent(playerid);
							}
							case 2: // Информация о транспорте
							{
								new vehicleid = GetPlayerOwnableCarLast(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									new model_id = GetVehicleData(vehicleid, V_MODELID);
									if(model_id)
									{
										new fmt_str[64];
										new index = GetVehicleData(vehicleid, V_ACTION_ID);
										format(fmt_str, sizeof fmt_str, "Модель: %s (номер модели %d)", GetVehicleName(vehicleid), model_id);
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);
										if(!(GetOwnableCarData(index, OC_COLOR_1) == -1 || GetOwnableCarData(index, OC_COLOR_2) == -1))
										{
											format(fmt_str, sizeof fmt_str, "Цвет 1: ID %d   Цвет 2: ID %d", GetOwnableCarData(index, OC_COLOR_1), GetOwnableCarData(index, OC_COLOR_2));
											SendClientMessage(playerid, 0x99FF66FF, fmt_str);
										}
										else SendClientMessage(playerid, 0x99FF66FF, "Цвета транспорта: случайные");
										format(fmt_str, sizeof fmt_str, "Гос. стоимость: %d руб", GetVehicleInfo(model_id , VI_PRICE));
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);
									}
								}
								else
								{
									if(GetPlayerOwnableCars(playerid) == 0)
										SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
									else
										SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
								}
							}
							case 3: // Отметить транспорт на GPS
							{
								callcmd::getmycar(playerid, "");
							}
							case 4: // Подогнать транспорт к отелю (1000 руб)
							{
								new vehicleid = GetPlayerOwnableCarLast(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									if(!SetVehicleToHotelRespawn(hotel_id, vehicleid))
									{
										SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете использовать эту функцию");
									}
								}
								else
								{
									if(GetPlayerOwnableCars(playerid) == 0)
										SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
									else
										SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
								}
							}
							case 6: // Выселиться из отеля
							{
								Dialog
								(
									playerid, DIALOG_HOTEL_OUT, DIALOG_STYLE_MSGBOX,
									"{66CC99}Выселение",
									"{FFFFFF}Вы уверены что хотите выселиться из отеля?",
									"Да", "Нет"
								);
							}
							default:
								return 1;
						}
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_PAY_FOR_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
							new time = gettime();
							new rent_time = GetHotelData(hotel_id, room_id, H_RENT_DATE);
							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new total_price = days * 1000;
							if((rent_days + days) <= 7)
							{
								if(GetILPlayerInt(GetPlayerBankMoney(playerid), total_price))
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, hotels h SET a.bank=%s,h.rent_time=%d WHERE a.id=%d AND h.id=%d", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price), rent_time, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									if(!mysql_errno())
									{
										format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price));
										SetHotelData(hotel_id, room_id, H_RENT_DATE, rent_time);
										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										format(fmt_str, sizeof fmt_str, "Вы успешно проживание в отеле еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");
									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 7 дней");
						}
						ShowPlayerHotelRoomPayForRent(playerid);
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			case DIALOG_HOTEL_OUT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new query[155];
						format(query, sizeof query, "UPDATE accounts a,hotels h SET a.house_type=-1,a.house_room=-1,h.owner_id=0,h.rent_time=0 WHERE a.id=%d AND h.id=%d", GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
						mysql_query(mysql, query, false);
						if(!mysql_errno())
						{
							SetPlayerData(playerid, P_HOUSE, 		-1);
							SetPlayerData(playerid, P_HOUSE_ROOM, 	-1);
							SetPlayerData(playerid, P_HOUSE_TYPE, 	-1);
							SetHotelData(hotel_id, room_id, H_OWNER_ID, 	0);
							SetHotelData(hotel_id, room_id, H_RENT_DATE, 	0);
							SetHotelData(hotel_id, room_id, H_STATUS, 		false);
							SendClientMessage(playerid, 0x3399FFFF, "Вы выселились из отеля");
						}
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			// -----------------------------------------------------------------
		case DIALOG_OWNABLE_CAR:
		{
			if(response)
			{
				new idx = GetPVarInt(playerid, "ownablecar_id");
				new vehicleid = INVALID_VEHICLE_ID;
                for(new i = 0; i < MAX_VEHICLES; i++)
				{
				    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				    {
					    new iddx = GetVehicleData(i, V_ACTION_ID);
				        if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
				        {
				            vehicleid = i;
				        }
			        }
				}
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					switch(listitem + 1)
					{
						case 1: // Открыть / закрыть
						{
						    SetPVarInt(playerid, "go_list", 1);
							callcmd::lock(playerid, "1");
						}
						case 2: // Вставить / вытащить ключи
						{
						    SetPVarInt(playerid, "go_list", 1);
							callcmd::key(playerid, "");
						}
						case 3: // Отметить транспорт на GPS
						{
						    SetPVarInt(playerid, "go_list", 1);
							callcmd::getmycar(playerid, "");
						}
						case 4: // Содержимое багажника
						{
							//ShowTrunkDialog(playerid, vehicleid, true);
						}
						case 5: // Документы на транспорт
						{
							ShowOwnableCarPass(playerid, vehicleid);
							SetPVarInt(playerid, "owenrname", playerid);
						}
						case 6: // Припарковать транспорт
						{
							callcmd::park(playerid, "");
						}
						case 7: // Выгрузить транспорт
						{
							if(UnloadPlayerOwnableCar(true, vehicleid))
								SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно выгружен!");
							else
								SendClientMessage(playerid, 0x999999FF, "С момента загрузки данного транспорта еще не прошло 1 минуты");
						}
						default:
							return 1;
					}
					//callcmd::car(playerid, "");
				}
			}
		}
		case DIALOG_OWNABLE_CAR_LOAD:
		{
			if(response)
			{
				new idx = GetPVarInt(playerid, "ownablecar_id"),
					Float: x,
					Float: y,
					Float: z,
					stoyanka,
					Cache: result,
					query[500];
				mysql_format(mysql, query, sizeof query, "SELECT pos_x, pos_y, pos_z,stoyanka FROM ownable_cars WHERE id='%d'", idx);
				result = mysql_query(mysql, query, true);
				if(cache_num_rows())
				{
					x = cache_get_row_float(0, 0);
					y = cache_get_row_float(0, 1);
					z = cache_get_row_float(0, 2);
					stoyanka = cache_get_field_content_int(0, "stoyanka");
				}
				cache_delete(result);
				switch(listitem + 1)
				{
					case 1:
					{
						if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
						{
							if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 3000))
							{
								GivePlayerMoneyEx(playerid, -300, "Метка ТС на GPS", true, true);
								EnablePlayerGPS(playerid, 55, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
					}
					case 2:
					{
                        if(stoyanka == 2234) return SCM(playerid, 0x999999FF ,"Ваш транспорт на штрафстоянке");
						if(vehicle_house_id[playerid] != idx)
						{
							if(!IsPlayerInRangeOfPoint(playerid, 45.0, x, y, z))
							{
								SendClientMessage(playerid, 0x999999FF, "Вы слишком далеко от места, где припаркован Ваш транспорт");
							}
							else
							{
								if(LoadOwnableCar(playerid, idx) != -1)
								{
									PlayerOwnableCarInit(playerid, GetPVarInt(playerid, "listitem_car"));
									SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно загружен!");
								}
								else SendClientMessage(playerid, 0x999999FF, "Ошибка при загрузке личного транспорта");
							}
						}
						else
						{
							if(LoadOwnableCar(playerid, idx) != -1)
							{
								PlayerOwnableCarInit(playerid, GetPVarInt(playerid, "listitem_car"));
								SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно загружен!");
								//SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								//LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
							}
							else SendClientMessage(playerid, 0x999999FF, "Ошибка при загрузке личного транспорта");
						}
					}
					case 3:
					{
					    if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 5000)) return SCM(playerid, -1, "Недостаточно средств");
					    GivePlayerMoneyEx(playerid, -5000,"Доставка транспорта на штрафстоянку",true,true);
				 		format(query, sizeof query, "UPDATE ownable_cars SET stoyanka = '1',pos_x=%f,pos_y=%f,pos_z=%f,angle=%f WHERE id=%d LIMIT 1", -1621.7325,-2510.0464,7.4877,130.6668,idx);
						mysql_tquery(mysql, query, "", "");
						SCM(playerid, 0x66CC33FF,"Ваш транспорт успешно доставлен на штрафстоянку");
					}
				}
			}
			else
			{
				if(GetPVarInt(playerid, "show_menu"))
				{
					DeletePVar(playerid, "show_menu");
					callcmd::car(playerid, "");
				}
			}
		}
		case DIALOG_OWNABLE_CAR_SELECT:
		{
			if(response)
			{
				new fmt_text[144],
					Cache: result;
				new to_player = GetPVarInt(playerid, "to_player");
				new id = GetPlayerListitemValue(playerid, listitem);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE id='%d'", id);
				result = mysql_query(mysql, fmt_text, true);
				new rows = cache_num_rows();
				for(new i = 0; i < rows; i ++)
				{
					new vehicleid = INVALID_VEHICLE_ID;
					for(new is = 0; is < MAX_VEHICLES; is++)
					{
						if(GetVehicleData(is, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
						{
							new iddx = GetVehicleData(is, V_ACTION_ID);
							if(GetOwnableCarData(iddx,OC_SQL_ID) == id)
							{
								vehicleid = is;
							}
						}
					}
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						new model_id = cache_get_field_content_int(i, "model_id") ;
						format(fmt_text, sizeof fmt_text, "Вы выбрали транспорт: %s", GetVehicleInfo(model_id, VI_NAME));
						SendClientMessage(playerid, 0xFFFFFFFF, fmt_text);
						new Float: x, Float: y,Float: z;
						GetPlayerPos(to_player, x, y, z);
						SetVehiclePos(vehicleid, x + 2.0, y + 2.0, z);
						format(fmt_text, sizeof fmt_text, "Вы телепортировали к %s его личный транспорт", GetPlayerNameEx(to_player));
						SendClientMessage(playerid, -1, fmt_text);
						format(fmt_text, sizeof fmt_text, "Администратор %s телепортировал к Вам Ваш личный транспорт", GetPlayerNameEx(playerid));
						SendClientMessage(to_player, -1, fmt_text);
						if(GetPlayerYAdminEx(playerid) >= 2)
						{
							format(fmt_text, sizeof fmt_text, "[Y] %s[%d] телепортировал к %s[%d] его личный транспорт", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
							SendMessageToAdmins(fmt_text, 0x999999FF);
						}
					}
					else
					{
						LoadOwnableCar(to_player, id);
						for(new is = 0; is < MAX_VEHICLES; is++)
						{
							if(GetVehicleData(is, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
							{
								new iddx = GetVehicleData(is, V_ACTION_ID);
								if(GetOwnableCarData(iddx,OC_SQL_ID) == id)
								{
									vehicleid = is;
								}
							}
						}
						new Float: x, Float: y,Float: z;
						GetPlayerPos(to_player, x, y, z);
						SetVehiclePos(vehicleid, x + 2.0, y + 2.0, z);
						format(fmt_text, sizeof fmt_text, "Вы телепортировали к %s его личный транспорт", GetPlayerNameEx(to_player));
						SendClientMessage(playerid, -1, fmt_text);
						format(fmt_text, sizeof fmt_text, "Администратор %s телепортировал к Вам Ваш личный транспорт", GetPlayerNameEx(playerid));
						SendClientMessage(to_player, -1, fmt_text);
						if(GetPlayerYAdminEx(playerid) >= 2)
						{
							format(fmt_text, sizeof fmt_text, "[Y] %s[%d] телепортировал к %s[%d] его личный транспорт", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
							SendMessageToAdmins(fmt_text, 0x999999FF);
						}
					}
				}
				cache_delete(result);
			}
		}
        case DIALOG_PRIZE:
		{
			if(!response) return 1;
			new id = GetPVarInt(playerid, "id_priz");
			new fmt_text[84],
				Cache: result;
			format(fmt_text, sizeof fmt_text, "SELECT * FROM prizes WHERE id='%d'", id);
			result = mysql_query(mysql, fmt_text, true);
			new size = cache_get_field_content_int(0, "size");
			new item = cache_get_field_content_int(0, "item");
			new count = cache_get_field_content_int(0, "count");
			new indx = cache_get_field_content_int(0, "indx");
			cache_delete(result);//size - Это тип предмета (0 - значек вопроса | 1 - оружие | 2 - ехp | 3 - авто | 4 - скин | 5 - деньги | 6 - аксессуар | 7 - вип | 8 - предмет | 9 - патроны | 10 - донат)
			if(size == 3)
			{
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid)) return GameText(playerid, "~r~Все слоты для транспорта~n~заняты", 3000, 2);
				GiveCar(playerid, item, 1, 1, indx, 1882.5557,2832.2222,12.0596,89.8854, gettime());
			}
			if(size == 4)
			{
				if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
				GiveSkin(playerid, item);
			}
			if(size == 5)
			{	
				GivePlayerMoneyEx(playerid, count, "Получение денег с моих наград");
			}
			if(size == 6)
			{
				if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
				GiveAcs(playerid, item, indx);
			}
			if(size == 8)
			{
				if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
				GiveIteam(playerid, item, 1, count, 0, "Забрал с моих наград [Мои награды]");
			}
			if(size == 10) GivePlayerDonate(playerid, count, "Получение доната с моих наград", true, true);
			if(size == 16) 
			{
				if(GetPlayerData(playerid, P_JAIL) > 0)
				{
					if((GetPlayerData(playerid, P_JAIL) / 60) > item)
					{
						AddPlayerData(playerid, P_JAIL, -, item * 60);
						UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));
					}
					else
					{
						SetPlayerData(playerid, P_JAIL, 0);
						UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));
						SendClientMessage(playerid, 0x66CC00FF, "Срок заключения закончился"),
						UnjailPlayer(playerid);
						CloseInfoJailTime(playerid);
					}
				}
				else 
				{
					SCM(playerid, COLOR_GREY, "Для активации купона вы должны находится в Тюрьма.");
					GameText(playerid, "Для активации купона ~n~вы должны находится в Тюрьма", 3000, 2);
					return true;
				}
			}
			GameText(playerid, "~g~Успешно", 4000, 2);
			SCM(playerid, 0x5DA130FF, "Награда была добавлена на Ваш аккаунт.");
			format(fmt_text, sizeof fmt_text, "DELETE FROM prizes WHERE id='%d'", id);
			mysql_query(mysql, fmt_text, false);
			LoadMainPrizeMenu(playerid, pageprizenumber[playerid][0], pageprizenumber[playerid][1]);
		}
		case DIALOG_OWNABLE_CAR_SPAWN:
		{
			if(!response) return 1;
			new idx = GetPlayerListitemValue(playerid, listitem);
			SetPVarInt(playerid, "listitem_car", listitem);
			SetPVarInt(playerid, "ownablecar_id", idx);
			new veh_id = INVALID_VEHICLE_ID;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(i, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
					{
						veh_id = i;
					}
				}
			}
			if(veh_id == INVALID_VEHICLE_ID) 
			{
				SCM(playerid, 0x999999FF, "Данный транспорт не загружен на сервер");
				BitStream_1(playerid, s_CefInterface, t_CefHide, "SelectSpawn");
				return true;
			}
			new model_id = GetVehicleData(veh_id, V_MODELID);
			for(new i; i < sizeof g_vehicle_house; i++)
			{
				if(g_vehicle_house[i] != model_id) continue;
				SetPlayerData(playerid, P_ID_SPAWN, idx);
				UpdatePlayerDatabaseInt(playerid, "id_spawn", idx);
				SetPlayerData(playerid, P_SPAWN, 5);
				UpdatePlayerDatabaseInt(playerid, "setting_spawn", 5);
				SendClientMessage(playerid, 0x3399FFFF, "Место появления в игре изменено");
				BitStream_1(playerid, s_CefInterface, t_CefHide, "SelectSpawn");
				return true;
			}
			SCM(playerid, COLOR_GREY, "Данный транспорт не предназначен для спавна");
			BitStream_1(playerid, s_CefInterface, t_CefHide, "SelectSpawn");
		}
		case DIALOG_OWNABLE_CAR_NUMBER:
		{
			if(!response) return 1;
			new idx = g_player_listitem[playerid][listitem];
			SetPVarInt(playerid, "listitem_car", listitem);
			SetPVarInt(playerid, "ownablecar_id", idx);
			new vehicleid = INVALID_VEHICLE_ID;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(i, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
					{
						vehicleid = i;
					}
				}
			}
			if(vehicleid != INVALID_VEHICLE_ID)
			{
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				if(GetOwnableCarData(index, OC_NUMBER_STATUS) == 0)
				{
					InterfaceShowNumberBuy(playerid, true);
					SetPVarInt(playerid, "ownablecar_id", vehicleid);
				}
				else
				{
					SCM(playerid, COLOR_GREY, "*На данный транспорт уже выдавались номера");
				}
			}
			else
			{
				SendClientMessage(playerid, 0xFF6600FF, "Ваш личный ТС должен находиться на сервере");
			}
		}
		case DIALOG_SELL_CAR:
		{
			if(!response) return 1;
			new idx = GetPlayerListitemValue(playerid, listitem);
			SetPVarInt(playerid, "listitem_car", listitem);
			SetPVarInt(playerid, "ownablecar_id", idx);
			new vehicleid = INVALID_VEHICLE_ID;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(i, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
					{
						vehicleid = i;
					}
				}
			}
			if(vehicleid != INVALID_VEHICLE_ID)
			{
				new model_id = GetVehicleData(vehicleid, V_MODELID);
				if(model_id)
				{
					string_dialog[0] = EOS;
					new price = GetVehicleInfo(model_id, VI_PRICE);
					new percent_default = price / 100 * 30;
					new percent = price / 150 * GetVehicleData(vehicleid, V_IZNOS);
					format
					(
						string_dialog, sizeof string_dialog,
						"Модель:\t%s (№%d)\n"\
						"Вы получите:\t%s руб\n\n"\
						"Вы уверены что хотите утилизировать ТС?\n"\
						"Все предметы из багажника будут удалены\n"\
						"На Ваш банковский счет будет начислено %s руб\n\n"\
						"Если двигатель изношен не полностью, то\n"\
						"Вы также можете продать ТС другому игроку,\n"\
						"{008000}используя команду /sellmycar",
						GetVehicleName(vehicleid),
						model_id,
						formatInt(price - (percent + percent_default)),
						formatInt(price - (percent + percent_default))
					);
					Dialog(playerid, DIALOG_OWNABLE_CAR_SELL, DIALOG_STYLE_MSGBOX, "Утилизация личного транспорта", string_dialog, "Да", "Нет");
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0) SendClientMessage(playerid, 0xFF6600FF, "У Вас нет личного транспорта");
				else SendClientMessage(playerid, 0xFF6600FF, "Данный транспорт не загружен на сервер");
			}
		}
		case DIALOG_SELL_OWNABLE_CAR:
		{
			if(!response) return 1;
			new idx = GetPlayerListitemValue(playerid, listitem);
			SetPVarInt(playerid, "listitem_car", listitem);
			SetPVarInt(playerid, "ownablecar_id", idx);
			new veh_id = INVALID_VEHICLE_ID;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(i, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
					{
						veh_id = i;
					}
				}
			}
			if(veh_id == INVALID_VEHICLE_ID) return SCM(playerid, 0x999999FF, "Данный транспорт не загружен на сервер");
			//new price = GetPVarInt(playerid, "SellCarPrice");
			new to_player = GetPVarInt(playerid, "SellCarTo_player");
			new Float: car_x, Float: car_y, Float: car_z;
			GetVehiclePos(veh_id, car_x, car_y, car_z);
			if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(to_player, 15.0, car_x, car_y, car_z))
			{
				SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_OWNABLE_CAR, 1, veh_id);
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около ТС");
		}
		case DIALOG_OWNABLE_CAR_LIST:
		{
			if(response)
			{
				new idx = g_player_listitem[playerid][listitem];
				SetPVarInt(playerid, "listitem_car", listitem);
				SetPVarInt(playerid, "ownablecar_id", idx);
				new veh_id = INVALID_VEHICLE_ID;
                for(new i = 0; i < MAX_VEHICLES; i++)
				{
				    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				    {
					    new iddx = GetVehicleData(i, V_ACTION_ID);
				        if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
				        {
				            veh_id = i;
				        }
			        }
				}
				if(veh_id == INVALID_VEHICLE_ID)
				{
					ShowOwnableCarLoadDialog(playerid, idx, true);
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_OWNABLE_CAR, DIALOG_STYLE_LIST,
						"{0099FF}Система управления транспортом",
						"1. {669900}Открыть {FFFFFF}или {FF3300}закрыть {FFFFFF}транспорт\n"\
						"2. Вставить / вытащить ключи\n"\
						"3. Отметить транспорт на GPS {FF6600}(5000 руб)\n"\
						"4. Содержимое багажника\n"\
						"5. Документы на транспорт\n"\
						"{888888}6. Припарковать транспорт\n"\
						"{888888}7. Выгрузить транспорт с сервера",
						"Выбрать", "Закрыть"
					);
				}
			}
		}
		case DIALOG_PNEWMA_BUY:
		{
			if(!response) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			new modelid = GetVehicleData(vehicleid, V_MODELID);
			if(GetVehicleHandlingID(modelid) == -1) return GameText(playerid, "~r~На данный транспорт невозможно установить пневму", 3000, 1);
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000000)) return SendClientMessage(playerid, 0x999999FF, "Недостаточно средств!");
			GivePlayerMoneyEx(playerid, -100000000, "Покупка пневмы", true, true);
			SetOwnableCarData(index, OC_PNEWMA, 1);
			SaveOwnableCar(vehicleid);
			SetPlayerVirtualWorld(playerid, 0);
			SetVehicleVirtualWorld(vehicleid, 0);
			SetVehiclePos(vehicleid, -413.4231,1010.6860,12.0819);
			SetVehicleZAngle(vehicleid, 2.8581);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
			SpeedometrShowForPlayer(playerid);
			SCM(playerid, 0xFFFFFFFF, "Вы установили на свой автомобиль пневматическую подвеску за {c07700}100.000.000 RUB{FFFFFF}.");
			SCM(playerid, 0xFFFFFFFF, "Управление подвеской доступно через специальный пульт: {c8c993}/spanel{FFFFFF}.");
			BitStream_1(playerid, s_CefInterface, t_CefHide, "TuningPneuma");
		}
        case DIALOG_BIZ_CAR_SELL:
		{
			if(response)
			{
				new vehicleid = GetPVarInt(playerid, "vehicleid");
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					new model_id = GetVehicleData(vehicleid, V_MODELID);
					if(DestroyRentCar(vehicleid))
					{
						new fmt_str[128];
						new car_price = GetVehicleInfo(model_id, VI_PRICE);
						new percent = car_price * 20 / 100;
						new price = car_price - percent;
						format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), price));
						BankLog(playerid, price, "продажа тс аренды");
						format(fmt_str, sizeof fmt_str, "UPDATE accounts SET bank=%s WHERE id=%d LIMIT 1", GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
						mysql_query(mysql, fmt_str, false);
						SendClientMessage(playerid, 0x3399FFFF, "Вы продали транспорт со своей аренды авто");
						format(fmt_str, sizeof fmt_str, "Налоговый сбор составляет 30 процентов от его стоимости {FF9900}(%d руб)", percent);
						SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
						format(fmt_str, sizeof fmt_str, "На основной банковский счет переведено {FFFF00}%d руб", price);
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);
						format(fmt_str, sizeof fmt_str, "~g~+%d rub", price);
						GameText(playerid, fmt_str, 4000, 2);
					}
				}
			}
		}
		case DIALOG_OWNABLE_CAR_SELL:
		{
			if(!response) return 1;
			new idx = GetPVarInt(playerid, "ownablecar_id");
			new vehicleid = INVALID_VEHICLE_ID;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(i, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
					{
						vehicleid = i;
					}
				}
			}
			if(vehicleid != INVALID_VEHICLE_ID)
			{
				new model_id = GetVehicleData(vehicleid, V_MODELID);
				if(DestroyOwnableCar(vehicleid))
				{
					new fmt_str[128];
					new car_price = GetVehicleInfo(model_id, VI_PRICE);
					new percent = car_price / 150 * GetVehicleData(vehicleid, V_IZNOS);
					new percent_default = car_price / 100 * 30;
					new price = car_price - (percent + percent_default);
					format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), price));
					format(fmt_str, sizeof fmt_str, "UPDATE accounts SET bank=%s WHERE id=%d LIMIT 1", GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
					mysql_query(mysql, fmt_str, false);
					BankLog(playerid, price, "Продажа личного транспорта");
					SendClientMessage(playerid, 0x3399FFFF, "Вы утилизировали личный транспорт");
					format(fmt_str, sizeof fmt_str, "На основной банковский счет переведено {FFFF00}%s руб", formatInt(price));
					SendClientMessage(playerid, 0x66CC00FF, fmt_str);
				}
			}
		}
			case DIALOG_OWNABLE_BIZ_NOTARY:
			{
				if(response)
				{
					new idx = GetPlayerListitemValue(playerid, listitem) + 1;
					SetPVarInt(playerid, "ownablebiz_id", idx);
					new businessid = GetPVarInt(playerid, "ownablebiz_id");
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Trade').updateData('{\"player1\": {\"item\": 1,\"itemName\": \"Бизнес %s [№%d]\",\"itemPrice\": %d,\"itemSurcharge\": %d,\"state\": 0,\"commission\": 0}}')", GetBusinessData(businessid, B_NAME), businessid, GetBusinessData(businessid, B_PRICE), GetPVarInt(playerid, "itemSurcharge"));
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Trade').updateData('{\"player2\": {\"item\": 1,\"itemName\": \"Бизнес %s [№%d]\",\"itemPrice\": %d,\"itemSurcharge\": %d,\"state\": 0,\"commission\": 0}}')", GetBusinessData(businessid, B_NAME), businessid, GetBusinessData(businessid, B_PRICE), GetPVarInt(GetPVarInt(playerid, "Trade_player1"), "itemSurcharge"));
					BitStream_1(GetPVarInt(playerid, "Trade_player1"), s_CefInterface, t_CefUpdate, STRING_GLOBAL);
					SetPVarInt(playerid, "NotaryObject", 2);
				}
			}	
			case DIALOG_OWNABLE_GARAGE_NOTARY:
			{
				if(response)
				{
					new idx = GetPlayerListitemValue(playerid, listitem) + 1;
					SetPVarInt(playerid, "ownablegarage_id", idx);
					new businessid = GetPVarInt(playerid, "ownablegarage_id");
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Trade').updateData('{\"player1\": {\"item\": 1,\"itemName\": \"Гараж [№%d]\",\"itemPrice\": %d,\"itemSurcharge\": %d,\"state\": 0,\"commission\": 0}}')", businessid, GetGarageData(businessid, G_PRICE), GetPVarInt(playerid, "itemSurcharge"));
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Trade').updateData('{\"player2\": {\"item\": 1,\"itemName\": \"Гараж [№%d]\",\"itemPrice\": %d,\"itemSurcharge\": %d,\"state\": 0,\"commission\": 0}}')", businessid, GetGarageData(businessid, G_PRICE), GetPVarInt(GetPVarInt(playerid, "Trade_player1"), "itemSurcharge"));
					BitStream_1(GetPVarInt(playerid, "Trade_player1"), s_CefInterface, t_CefUpdate, STRING_GLOBAL);
					SetPVarInt(playerid, "NotaryObject", 8);
				}
			}
			case DIALOG_OWNABLE_NEFTENASOS_LIST2:
			{
				if(!response) return 1;
				new businessid = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "ownableneft_id", businessid);
				string_dialog[0] = EOS;
				format
				(
					string_dialog, sizeof string_dialog,
					"{FFFFFF}Нефтенасос {006400}№%d\n\
					{FFFFFF}Оплачено: {006400}%d/5 дн.\n\
					{FFFFFF}Стоимость аренды за 1 день составляет {006400}%d руб.",
					businessid, GetNeftData(businessid, N_RENT_DATE), GetNeftData(businessid, N_RENT_PRICE)
				);
				Dialog(playerid, DIALOG_ATM_NEFTENASOS_RENT, DIALOG_STYLE_INPUT, "{FFFFFF}Оплата аренды нефтенасоса", string_dialog, "Готово", "Назад");
			}
			case DIALOG_ATM_NEFTENASOS_RENT:
			{
				new businessid = GetPVarInt(playerid, "ownableneft_id");
				if(businessid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
							new rent_time = GetNeftData(businessid, N_RENT_DATE);
							new rent_price = GetNeftData(businessid, N_RENT_PRICE);
							new total_price = rent_price * days;
							if((rent_time + days) <= 5)
							{
								if(GetILPlayerInt(GetPlayerBankMoney(playerid), total_price))
								{
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,neftenasos b SET a.bank=%s,b.rent=%d WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price), days + rent_time, GetPlayerAccountID(playerid), GetNeftData(businessid, N_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									if(!mysql_errno())
									{
										format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price));
										SetNeftData(businessid, N_RENT_DATE, days + rent_time);
										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду нефтенасоса еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");
									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 5 дней");
						}
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_OWNABLE_NEFTENASOS_LIST:
			{
				if(!response) return ShowPlayerATMDialog(playerid);
				new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				SetPVarInt(playerid, "ownableneft_id", idx);
				new fmt[148];
				format(fmt, sizeof fmt,"{FFFFFF}Нефтенасос {006400}№%d\n{FFFFFF}Баланс: {006400}%d {FFFFFF}руб.\n\nСколько вы хотите снять?", idx, GetNeftData(idx, N_BALANCE));
				Dialog(playerid, DIALOG_ATM_NEFTENASOS_PUT_MONEY, DIALOG_STYLE_INPUT,"{FFFFFF}Снятие средств",fmt,"Готово", "Назад");
			}
			case DIALOG_OWNABLE_BIZ_LIST:
			{
				if(response)
				{
					new idx = GetPlayerListitemValue(playerid, listitem) + 1;
					//ShowOwnableBizDialog(playerid, idx, true);
					SetPVarInt(playerid, "ownablebiz_id", idx);
				    new businessid = idx;
					if(businessid != -1)
					{
						static const
							music_name[6][9] = {"Отключен", "Звук 1", "Звук 2", "Звук 3", "Звук 4", "Звук 5"};
						if(GetBusinessData(businessid, B_ENTER_MUSIC) > sizeof music_name - 1) SetBusinessData(businessid, B_ENTER_MUSIC, sizeof music_name - 1);
						string_dialog[0] = EOS;
						if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 37)
						{
							if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_ARENDA)
							{
								format
								(
									string_dialog, sizeof string_dialog,
									"{FFFFFF}Название:<t><t><t><t>{339999}%s\n"\
									"{FFFFFF}Номер бизнеса:<t><t><t>%d\n"\
									"Владелец:<t><t><t><t>%s\n"\
									"Город / область:<t><t><t>%s\n"\
									"Район:<t><t><t><t><t>%s\n"\
									"Количество продуктов:<t><t>%d из %d\n"\
									"Стоимость 1 продукта:<t><t>%d руб\n"\
									"Уровень улучшений:<t><t><t>%d\n"\
									"Баланс предприятия:<t><t><t>%s руб\n"\
									"Бизнес арендован на:<t><t>%d/14 дней\n"\
									"{FFFFFF}Гос. стоимость:<t><t><t>%s руб\n"\
									"Аренда помещения:<t><t><t>%d руб в день\n"\
									"Тип аренды:<t><t><t><t>%s\n"\
									"{669966}Для открытия панели управления вашим бизнесом\n"\
									"нажмите кнопку Изменить",
									GetBusinessData(businessid, B_NAME),
									businessid,
									GetBusinessData(businessid, B_OWNER_NAME),
									GetCityName(GetBusinessData(businessid, B_CITY)),
									GetZoneName(GetBusinessData(businessid, B_ZONE)),
									GetBusinessData(businessid, B_PRODS),
									GetBusinessMaxProd(businessid),
									GetBusinessData(businessid, B_PROD_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS),
									formatStr(GetBusinessData(businessid, B_BALANCE)),
									GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
									GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
									formatInt(GetBusinessData(businessid, B_PRICE)),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная")
								);
							}
							else
							{
								new type;
								for(new i; i < g_business_loaded; i ++)
								{
									if(GetBusinessData(i, B_TYPE) != 36) continue;
									if(GetBusinessData(i, B_ELECTRICITY) != GetBusinessData(businessid, B_ELECTRICITY)) continue;
									type = i;
								}
								new fmt_text[148];
								if(type != 0)
								{
									if(GetBusinessData(type, B_IZNOS) != 0) 
										format(fmt_text, sizeof fmt_text, "{66CC33}%s (Работает)", GetBusinessData(type, B_NAME));
									else if(GetBusinessData(type, B_IZNOS) == 0) 
										format(fmt_text, sizeof fmt_text, "{CC3333}%s (Сломан)", GetBusinessData(type, B_NAME));
								}
								else 
									format(fmt_text, sizeof fmt_text, "{CC3333}Нет", GetBusinessData(type, B_NAME));
								format
								(
									string_dialog, sizeof string_dialog,
									"{FFFFFF}Название:<t><t><t><t>{339999}%s\n"\
									"{FFFFFF}Номер бизнеса:<t><t><t>%d\n"\
									"Владелец:<t><t><t><t>%s\n"\
									"Город / область:<t><t><t>%s\n"\
									"Район:<t><t><t><t><t>%s\n"\
									"Плата за вход:<t><t><t>%d руб\n"\
									"Количество продуктов:<t><t>%d из %d\n"\
									"Стоимость 1 продукта:<t><t>%d руб\n"\
									"Уровень улучшений:<t><t><t>%d\n"\
									"Баланс предприятия:<t><t><t>%s руб\n"\
									"Бизнес арендован на:<t><t>%d/14 дней\n"\
									"Звук при входе:<t><t><t>{%s}%s\n"\
									"{FFFFFF}Гос. стоимость:<t><t><t>%s руб\n"\
									"Аренда помещения:<t><t><t>%d руб в день\n"\
									"Тип аренды:<t><t><t><t>%s\n"\
									"Статус:<t><t><t><t><t>%s\n\n"\
									"{FFFFFF}Электричество:<t><t><t>%s\n"\
									"{FFFFFF}Потребление за 1000 часов:<t><t><t>17 кВт\n"\
									"{FFFFFF}Поставщик энергии:<t><t><t><t>%s\n"\
									"{FFFFFF}Тариф за энергию:<t><t><t><t><t>%d руб\n\n"\
									"{669966}Для открытия панели управления вашим бизнесом\n"\
									"нажмите кнопку Изменить",
									GetBusinessData(businessid, B_NAME),
									businessid,
									GetBusinessData(businessid, B_OWNER_NAME),
									GetCityName(GetBusinessData(businessid, B_CITY)),
									GetZoneName(GetBusinessData(businessid, B_ZONE)),
									GetBusinessData(businessid, B_ENTER_PRICE),
									GetBusinessData(businessid, B_PRODS),
									GetBusinessMaxProd(businessid),
									GetBusinessData(businessid, B_PROD_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS),
									formatStr(GetBusinessData(businessid, B_BALANCE)),
									GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
									GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
									!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
									music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
									formatInt(GetBusinessData(businessid, B_PRICE)),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная"),
									GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Бизнес закрыт") : ("{66CC33}Бизнес открыт"),
									GetBusinessData(businessid, B_ELECTRICITY) != 0 ? "{66CC33}Есть" : "{CC3333}Нет",
									fmt_text,
									GetBusinessData(type, B_PROD_PRICE)
								);
							}
						}
						else if(GetBusinessData(businessid, B_TYPE) != 37)
						{
							new nameee[64];
							if(GetBusinessData(businessid, B_IZNOS) >= 1000) format(nameee, sizeof(nameee), "{66CC33}Низкий");
							else if(GetBusinessData(businessid, B_IZNOS) < 1000) format(nameee, sizeof(nameee), "{ffa420}Средний");
							else if(GetBusinessData(businessid, B_IZNOS) < 250) format(nameee, sizeof(nameee), "{CC3333}Высокий");
							format
							(
								string_dialog, sizeof string_dialog,
								"{FFFFFF}Название:<t><t><t><t>{339999}%s\n"\
								"{FFFFFF}Номер бизнеса:<t><t><t>%d\n"\
								"Владелец:<t><t><t><t>%s\n"\
								"Город / область:<t><t><t>%s\n"\
								"Район:<t><t><t><t><t>%s\n"\
								"Плата за вход:<t><t><t>%d руб\n"\
								"Количество продуктов:<t><t>%d из %d\n"\
								"Стоимость 1 продукта:<t><t>%d руб\n"\
								"Уровень улучшений:<t><t><t>%d\n"\
								"Баланс предприятия:<t><t><t>%s руб\n"\
								"Бизнес арендован на:<t><t>%d/14 дней\n"\
								"Звук при входе:<t><t><t>{%s}%s\n"\
								"{FFFFFF}Гос. стоимость:<t><t><t>%s руб\n"\
								"Аренда помещения:<t><t><t>%d руб в день\n"\
								"Тип аренды:<t><t><t><t>%s\n"\
								"Статус:<t><t><t><t><t>%s\n\n"\
								"{FFFFFF}Состояние:<t><t><t>{66CC33}%s\n"\
								"{FFFFFF}В хранилище энергии:<t><t>{ffa420}%d кВт\n"\
								"{FFFFFF}Шанс поломки:<t><t><t><t>%s\n"\
								"{FFFFFF}Последняя поломка:<t><t>{ffa420}Неизвестно\n"\
								"{FFFFFF}Последняя диагностика:<t><t>{ffa420}Неизвестно\n"\
								"{FFFFFF}Изменение тарифов:<t><t>{ffa420}Неизвестно\n\n"\
								"{669966}Для открытия панели управления вашим бизнесом\n"\
								"нажмите кнопку Изменить",
								GetBusinessData(businessid, B_NAME),
								businessid,
								GetBusinessData(businessid, B_OWNER_NAME),
								GetCityName(GetBusinessData(businessid, B_CITY)),
								GetZoneName(GetBusinessData(businessid, B_ZONE)),
								GetBusinessData(businessid, B_ENTER_PRICE),
								GetBusinessData(businessid, B_PRODS),
								GetBusinessMaxProd(businessid),
								GetBusinessData(businessid, B_PROD_PRICE),
								GetBusinessData(businessid, B_IMPROVEMENTS),
								formatStr(GetBusinessData(businessid, B_BALANCE)),
								GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
								GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
								!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
								music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
								formatInt(GetBusinessData(businessid, B_PRICE)),
								GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
								GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная"),
								GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Бизнес закрыт") : ("{66CC33}Бизнес открыт"),
								GetBusinessData(businessid, B_ELECTRICITY) ? ("{CC3333}Сломан") : ("{66CC33}Работает"),
								GetBusinessData(businessid, B_IZNOS),
								nameee
							);
						}
						else
						{
							format
							(
								string_dialog, sizeof string_dialog,
								"{FFFFFF}Название:<t><t><t><t>{339999}%s\n"\
								"{FFFFFF}Номер бизнеса:<t><t><t>%d\n"\
								"Владелец:<t><t><t><t>%s\n"\
								"Город / поселок:<t><t><t>%s\n"\
								"Район:<t><t><t><t><t>%s\n"\
								"Количество топлива:<t><t><t>%d л из %d\n"\
								"Цена топлива:<t><t><t>%d руб\n"\
								"Закупочная цена:<t><t><t>2 руб за 1 л\n"\
								"Уровень улучшений:<t><t><t>%d\n"\
								"Баланс предприятия:<t><t><t>%s руб\n"\
								"Бизнес арендован на:<t><t><t>%d/14 дней\n"\
								"Гос. стоимость:<t><t><t>%s руб\n"\
								"Аренда территории:<t><t><t>%d руб в день\n"\
								"Акцизный сбор:<t><t><t>%s\n"\
								"Статус:<t><t><t><t><t>%s\n\n"\
								"{669966}Для открытия панели управления вашим бизнесом\n"\
								"нажмите кнопку Изменить",
								GetBusinessData(businessid, B_NAME),
								businessid,
								GetBusinessData(businessid, B_OWNER_NAME),
								GetCityName(GetBusinessData(businessid, B_CITY)),
								GetZoneName(GetBusinessData(businessid, B_ZONE)),
								GetBusinessData(businessid, B_PRODS),
								GetBusinessMaxProd(businessid),
								GetBusinessData(businessid, B_PROD_PRICE),
								GetBusinessData(businessid, B_IMPROVEMENTS),
								formatStr(GetBusinessData(businessid, B_BALANCE)),
								GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
								GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
								formatInt(GetBusinessData(businessid, B_PRICE)),
								GetBusinessData(businessid, B_IMPROVEMENTS) < 4 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2,
								GetBusinessData(businessid, B_IMPROVEMENTS) < 4 ? ("Взымается") : ("Не взымается"),
								GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Закрыто") : ("{66CC33}Бизнес открыт")
							);
						}
						Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о бизнесе", string_dialog, "Изменить", "Отмена");
					}
				}
			}
			case DIALOG_SET_SPAWN:
			{
				if(!response) return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, LOGIN_STATE_LOAD_ACC, false);
				CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, LOGIN_STATE_LOAD_ACC, false);
				SetSpawnInfo
				(
				playerid,
				0,
				GetPlayerSkinEx(playerid),
				GetPlayerData(playerid, P_AFTER_X), // + random(3),
				GetPlayerData(playerid, P_AFTER_Y), // + random(3),
				GetPlayerData(playerid, P_AFTER_Z),
				12,
				0, 0, 0, 0, 0, 0
				);		
				if(GetPlayerData(playerid, P_JAIL) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Заключенным нельзя телепортироватьcя");
				SpawnPlayer(playerid);
				SetPlayerSpawnInit(playerid);
			}
			case DIALOG_PAY_FOR_RENT_HOME:
			{
				new houseid = GetPlayerListitemValue(playerid, listitem) + 1;
				if(houseid != -1)
				{
					SetPVarInt(playerid, "ownablehouse_id", houseid);
					new fmt_str[256];
					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Дом:\t\t\t\t\t№%d (%s)\n"\
						"Оплаченных дней аренды:\t\t%d из 14\n"\
						"Ежедневная квартплата:\t\t%d руб\n"\
						"Субсидия:\t\t\t\t%s\n\n"\
						"На сколько дней Вы хотите оплатить дом?",
						houseid,
						GetHouseData(houseid, H_NAME),
						GetHouseData(houseid, H_RENT_DATE) <= gettime() ? 0 :
						GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
						GetHouseData(houseid, H_IMPROVEMENTS) < 3 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2,
						GetHouseData(houseid, H_IMPROVEMENTS) < 3 ? ("Нет") : ("Есть")
					);
					Dialog(playerid, DIALOG_PAY_FOR_RENT_HOUSE, DIALOG_STYLE_INPUT, "{66CC00}Оплата дома", fmt_str, "Оплатить", "Назад");
				}
			}
			case DIALOG_PAY_FOR_RENT_HOUSE:
			{
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(response)
				{
					new days = strval(inputtext);
					if(days > 0 && IsNumeric(inputtext))
					{
						new fmt_str[128 + 1];
						new time = gettime();
						new rent_time = GetHouseData(houseid, H_RENT_DATE);
						new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
						new rent_price = GetHouseData(houseid, H_IMPROVEMENTS) < 3 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2;
						new total_price = rent_price * days;
						if((rent_days + days) <= 14)
						{
							if(GetILPlayerInt(GetPlayerBankMoney(playerid), total_price))
							{
								rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,houses h SET a.bank=%s,h.rent_time=%d WHERE a.id=%d AND h.id=%d", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price), rent_time, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
								mysql_query(mysql, fmt_str, false);
								if(!mysql_errno())
								{
									format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -total_price));
									SetHouseData(houseid, H_RENT_DATE, rent_time);
									format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
									SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
									format(fmt_str, sizeof fmt_str, "Вы успешно оплатили дом еще на {3399FF}%d дней", days);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);
								}
							}
							else
							{
								SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");
								format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
								SendClientMessage(playerid, 0x999999FF, fmt_str);
							}
						}
						else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 14 дней");
					}
					ShowPlayerHousePayForRent(playerid);
				}
				else ShowPlayerPayForRentDialog(playerid);
			}
			case DIALOG_SPAWN_HOME_LIST:
			{
				new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				SetPVarInt(playerid, "ownablehouse_id", idx);
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				SetPlayerData(playerid, P_ID_SPAWN, houseid);
				UpdatePlayerDatabaseInt(playerid, "id_spawn", houseid);
				SetPlayerData(playerid, P_SPAWN, 1);
				UpdatePlayerDatabaseInt(playerid, "setting_spawn", 1);
				SendClientMessage(playerid, 0x3399FFFF, "Место появления в игре изменено");
				BitStream_1(playerid, s_CefInterface, t_CefHide, "SelectSpawn");
			}
			case DIALOG_SELL_MY_HOME_LIST:
			{
				new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				SetPVarInt(playerid, "ownablehouse_id", idx);
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Продавать дом можно только с {99ff00}2{CECECE} уровня");
				if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(GetPVarInt(playerid, "to_player"), houseid, 10.0)))
					return SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около дома который хотите продать");
				SendPlayerOffer(playerid, GetPVarInt(playerid, "to_player"), OFFER_TYPE_SELL_HOME, houseid, GetPVarInt(playerid, "Sellprice"));
			}
			case DIALOG_SELL_HOME_LIST:
			{
				new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				if(idx != -1)
				{
					SetPVarInt(playerid, "ownablehouse_id", idx);
					Dialog
					(
						playerid, DIALOG_HOUSE_SELL, DIALOG_STYLE_MSGBOX,
						"{FFD83D}Продажа дома",
						"{FFFFFF}Вы уверены что хотите продать свой дом государству?\n\n"\
						"Вам будет возвращено ее стоимость за вычитом 40%\n"\
						"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
						"Если Вы хотите продать дом другому игроку,\n"\
						"используйте команду /sellmyhome",
						"Да", "Нет"
					);
				}
			}
			case DIALOG_OWNABLE_HOME_LIST:
			{
				new idx = GetPlayerListitemValue(playerid, listitem) + 1;
				SetPVarInt(playerid, "ownablehouse_id", idx);
				new houseid = GetPVarInt(playerid, "ownablehouse_id");
				string_dialog[0] = EOS;
				new entranceid = GetHouseData(houseid, H_ENTRACE);
				format(string_dialog, sizeof string_dialog, "{FFFFFF}Тип / название:\t\t\t{339999}%s\n", GetHouseData(houseid, H_NAME));
				if(entranceid != -1)
				{
					format
					(
						string_dialog, sizeof string_dialog,
						"%s{FFFFFF}Номер подъезда:\t\t\t%d\n"\
						"Номер квартиры:\t\t\t%d\n"\
						"Город / поселок:\t\t\t%s\n"\
						"Район:\t\t\t\t\t%s\n",
						string_dialog,
						entranceid + 1,
						GetHouseData(houseid, H_FLAT_ID) + 1,
						GetCityName(GetEntranceData(entranceid, E_CITY)),
						GetZoneName(GetEntranceData(entranceid, E_ZONE))
					);
				}
				else
				{
					format
					(
						string_dialog, sizeof string_dialog,
						"%s{FFFFFF}Номер дома:\t\t\t\t%d\n"\
						"Город / область:\t\t\t%s\n"\
						"Район:\t\t\t\t\t%s\n",
						string_dialog,
						houseid,
						GetCityName(GetHouseData(houseid, H_CITY)),
						GetZoneName(GetHouseData(houseid, H_ZONE))
					);
				}
				format
				(
					string_dialog, sizeof string_dialog,
					"%sСтоимость:<t><t><t><t>%s руб\n"\
					"Дом оплачен на:<t><t><t>%d/14 дней\n"\
					"Количество комнат:<t><t><t>%d\n"\
					"Уровень улучшений:<t><t><t>%d\n"\
					"Модель домашнего авто:<t><t>{FF3333}Нет\n"\
					"{FFFFFF}Квартплата:<t><t><t><t>%d руб в день\n"\
					"Тип квартплаты:<t><t><t>%s\n"\
					"Статус:<t><t><t><t><t>%s\n\n"\
					"{669966}Для открытия панели управления вашим домом\n"\
					"нажмите кнопку Изменить",
					string_dialog,
					formatInt(GetHouseData(houseid, H_PRICE)),
					GetHouseData(houseid, H_RENT_DATE) <= gettime() ? 0 :
					GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
					GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS),
					GetHouseData(houseid, H_IMPROVEMENTS),
					GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? (GetHouseData(houseid, H_RENT_PRICE)) : (GetHouseData(houseid, H_RENT_PRICE) / 2),
					GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Обычная") : ("Пониженная"),
					GetHouseData(houseid, H_LOCK_STATUS) ? ("{CC3333}Дом закрыт") : ("{66CC33}Дом открыт")
				);
				Dialog(playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о доме", string_dialog, "Изменить", "Отмена");
			}
			case DIALOG_SET_PRIVATE:
			{
				if(response)
			    {
					if(strval(inputtext) != 8702) return SendClientMessage(playerid,-1,"Пароль не верный!"), Dialog(playerid, DIALOG_SET_PRIVATE, DIALOG_STYLE_INPUT,"{FFD83D}Система безопасности","{FFFFFF}Введите пароль для входа на сервер:","Далее", "Закрыть");
					Dialog(playerid, DIALOG_SET_SPAWN, DIALOG_STYLE_MSGBOX,"{FFFFFF}Восстановление позиции","Хотите вернуться на место последнего выхода из игры?","Да", "Нет");
				}
				else Kick(playerid);
			}
			case DIALOG_TEAM_CHANGE_SKIN:
			{
				if(!response || !(0 <= listitem <= 9)) return 1;
				new to_player = GetPVarInt(playerid, "change_team_skin_playerid");
				new team_id = GetPlayerTeamEx(playerid);
				if(!(1 <= team_id <= 10) || !(9 <= GetPlayerJob(playerid) <= 10)) return 1;
				if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || team_id != GetPlayerTeamEx(to_player)) return 1;
				if(GetPlayerSex(to_player)) return 1;
				new query[85];
				new index = GetPlayerListitemValue(playerid, listitem);
				SetPlayerData(to_player, P_OSKIN, GetTeamData(team_id, O_SKINS)[index]);
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET org_skin=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerAccountID(to_player));
				mysql_query(mysql, query, false);
				ResetSkin(to_player);
				format(query, sizeof query, "%s {FFFFFF}выдал Вам новую униформу", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0xFFFFFFFF, query);
				format(query, sizeof query, "Вы выдали новую униформу {FFFFFF}%s[%d]", GetPlayerNameEx(to_player), to_player);
				SendClientMessage(playerid, 0xFF8C00FF, query);
				return 1;
			}
			case DIALOG_TEAM_LEAVE:
			{
				if(response)
				{
					new fmt_text[110];
					format(fmt_text, sizeof fmt_text, "%s %s[%d] покинул организацию по собственному желанию",
					GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);
					SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x3399FFFF, playerid);
					format(fmt_text, sizeof fmt_text, "Вы покинули организацию \"%s\"", GetTeamName(GetPlayerTeamEx(playerid)));
					SendClientMessage(playerid, 0xFFFF00FF, fmt_text);
					UnInvite(playerid, playerid);
				}
			}
			case DIALOG_DEBTORLIST:
			{
				if(!response) return 1;
				if(0 <= listitem <= 1)
				{
					ShowDebtorListDialog(playerid, listitem);
				}
				return 1;
			}
			case DIALOG_DEBTORLIST_HOUSE..DIALOG_DEBTORLIST_FUEL_ST:
			{
				if(!response) return callcmd::list(playerid, "");
				if(!(0 <= listitem <= 19)) return 1;
				new type = dialogid - DIALOG_DEBTORLIST_HOUSE;
				new buffer = GetPlayerListitemValue(playerid, listitem);
				switch(type)
				{
					case 0:
					{
						if(!GetHouseData(buffer, H_TYPE))
						{
							EnablePlayerGPS(playerid, 56, GetHouseData(buffer, H_POS_X), GetHouseData(buffer, H_POS_Y), GetHouseData(buffer, H_POS_Z), "Дом должника отмечен у Вас на GPS");
						}
						else
						{
							new ent_id = GetHouseData(buffer, H_ENTRACE);
							EnablePlayerGPS(playerid, 56, GetEntranceData(ent_id, E_POS_X), GetEntranceData(ent_id, E_POS_Y), GetEntranceData(ent_id, E_POS_Z), "Подъезд квартиры должника отмечена у Вас на GPS");
						}
					}
					case 1: EnablePlayerGPS(playerid, 56, GetBusinessData(buffer, B_POS_X), GetBusinessData(buffer, B_POS_Y), GetBusinessData(buffer, B_POS_Z), "Предприятие должника отмечено у Вас на GPS");
					default: return -1;
				}
				return 1;
			}
			case DIALOG_DEBTOR_SELL_LIST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 7) return 1;
				//if(!response) return callcmd::debtorsell(playerid, "");
				if(!response) return 1;
				switch(listitem)
				{
					case 0:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_HOUSE, DIALOG_STYLE_INPUT,
							"{99CC00}Акт выселения из жилого помещения",
							"Заполните акт выселения из жилого помещения\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер дома/квартиры\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта должник будет выселен",
							"Подписать", "Назад"
						);
						// 0x3399FFFF > Должник был выселен из дома/квартиры. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 1000 руб.
					}
					case 1:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_BIZ, DIALOG_STYLE_INPUT,
							"{99CC00}Акт изъятия предпрятия",
							"Заполните акт изъятия предприятия у должника\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер предприятия\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта предприятие станет собственностью государства",
							"Подписать", "Назад"
						);
						// 0x3399FFFF > Предприятие должника было изъято в пользу государства. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 10000 руб.
					}
					case 2:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_FUEL_ST, DIALOG_STYLE_INPUT,
							"{99CC00}Акт изъятия АЗС",
							"Заполните акт изъятия АЗС у должника\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер АЗС\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта АЗС станет собственностью государства",
							"Подписать", "Назад"
						);
					}
					default: return -1;
				}
				return 1;
			}
			case DIALOG_DEBTOR_SELL_HOUSE:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
				if(!response) return callcmd::debtorsell(playerid, "");
				new sell_houseid = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_houseid, worker_id[0], worker_id[1]);
				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_houseid <= g_house_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите номер дома/квартиры");
					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Вы находитесь далеко от дома/квартиры должника");
					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID первого понятого");
					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID второго понятого");
					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых не является сотрудником правительства 3 ранга");
					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых находится далеко от дома/квартиры должника");
					else if((((GetHouseData(sell_houseid, H_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "У владельца этого дома/квартиры нет задолжности за неуплату услуг");
					else if(GetHouseData(sell_houseid, H_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "Акт выселения из этого жилого помещения уже подписан");
					else
					{
						SendClientMessage(playerid, 0x3399FFFF, "Должник был выселен из дома/квартиры. На оформление документов потребуется время");
						SendClientMessage(playerid, 0x3399FFFF, "Вы получаете премию 10000 руб.");
						SetPlayerChatBubble(playerid, "+1000 руб", 0x3399FFFF, 5.0, 3000);
						GameText(playerid, "~b~~h~+1000 рублей", 4000, 2);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));
						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "Вы получили премию 1000000 руб.");
							SetPlayerChatBubble(worker_id[i], "+1000000 руб", 0x3399FFFF, 5.0, 3000);
							GameText(worker_id[i], "~b~~h~+1000000 рублей", 4000, 2);
							AddPlayerData(worker_id[i], P_WAGE, +, 1000000);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}
						new query[90];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1 WHERE id=%d", GetHouseData(sell_houseid, H_OWNER_ID));
						mysql_query(mysql, query, false);
						new owner_player = GetPlayerIDBySqlID(GetHouseData(sell_houseid, H_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							if(GetPlayerHouse(owner_player, HOUSE_TYPE_HOME) == sell_houseid)
							{
								SetPlayerData(owner_player, P_HOUSE, -1);
								SendClientMessage(owner_player, 0xFF6600FF, "Вы были выселены из дома/квартиры за неуплату услуг");
							}
						}
						SetHouseData(sell_houseid, H_RENT_DATE, gettime() + (random(169200) + 3600));
						SetHouseData(sell_houseid, H_EVICTION, 1);
						mysql_format(mysql, query, sizeof query, "UPDATE houses SET eviction=1, rent_time=%d WHERE id=%d LIMIT 1", GetHouseData(sell_houseid, H_RENT_DATE), GetHouseData(sell_houseid, H_SQL_ID));
						mysql_query(mysql, query, false);
						return 1;
					}
				}
				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_HOUSE, DIALOG_STYLE_INPUT,
					"{99CC00}Акт выселения из жилого помещения",
					"Заполните акт выселения из жилого помещения\n\n\
					{FFFFFF}Укажите через пробел:\n\n\
					{FFCC00}1. Номер дома/квартиры\n\
					2. ID первого понятого\n\
					3. ID второго понятого\n\n\
					{FFFFFF}Когда закончите составление документа, подпишите его.\n\
					Сразу после подписания акта должник будет выселен.",
					"Подписать", "Назад"
				);
				return 1;
			}
			case DIALOG_DEBTOR_SELL_BIZ:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
				if(!response) return callcmd::debtorsell(playerid, "");
				new sell_biz_id = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_biz_id, worker_id[0], worker_id[1]);
				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_biz_id <= g_business_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите номер предприятия");
					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Вы находитесь далеко от предприятия должника");
					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID первого понятого");
					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID второго понятого");
					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых не является сотрудником правительства 3 ранга");
					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых находится далеко от предприятия должника");
					else if((((GetBusinessData(sell_biz_id, B_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "У владельца этого предприятия нет задолжности за неуплату услуг");
					else if(GetBusinessData(sell_biz_id, B_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "Акт изъятия этого предприятия уже подписан");
					else
					{
						// 0x3399FFFF > Предприятие должника было изъято в пользу государства. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 10000 руб.
						SendClientMessage(playerid, 0x3399FFFF, "Предприятие должника было изъято в пользу государства. На оформление документов потребуется время");
						SendClientMessage(playerid, 0x3399FFFF, "Вы получаете премию 10000 руб.");
						SetPlayerChatBubble(playerid, "+10000 руб", 0x3399FFFF, 5.0, 3000);
						GameText(playerid, "~b~~h~+10000 рублей", 4000, 2);
						AddPlayerData(playerid, P_WAGE, +, 10000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));
						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "Вы получили премию 10000 руб.");
							SetPlayerChatBubble(worker_id[i], "+10000 руб", 0x3399FFFF, 5.0, 3000);
							GameText(worker_id[i], "~b~~h~+10000 рублей", 4000, 2);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}
						new query[90];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET business = -1 WHERE id=%d", GetBusinessData(sell_biz_id, B_OWNER_ID));
						mysql_query(mysql, query, false);
						new owner_player = GetPlayerIDBySqlID(GetBusinessData(sell_biz_id, B_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							if(GetPlayerBusiness(owner_player) == sell_biz_id)
							{
								SendClientMessage(owner_player, 0xFF6600FF, "Ваше предприятие было изъято государством за неуплату налогов");
							}
						}
						SetBusinessData(sell_biz_id, B_RENT_DATE, gettime() + (random(169200) + 3600));
						SetBusinessData(sell_biz_id, B_EVICTION, 1);
						mysql_format(mysql, query, sizeof query, "UPDATE business SET eviction=1, rent_time=%d WHERE id=%d LIMIT 1", GetBusinessData(sell_biz_id, B_RENT_DATE), GetBusinessData(sell_biz_id, B_SQL_ID));
						mysql_query(mysql, query, false);
						return 1;
					}
				}
				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_BIZ, DIALOG_STYLE_INPUT,
					"{99CC00}Акт изъятия предприятия",
					"Заполните акт изъятия предприятия у должника\n\n\
					{FFFFFF}Укажите через пробел:\n\n\
					{FFCC00}1. Номер предприятия\n\
					2. ID первого понятого\n\
					3. ID второго понятого\n\n\
					{FFFFFF}Когда закончите составление документа, подпишите его\n\
					Сразу после подписания акта предприятие станет собственностью государства",
					"Подписать", "Назад"
				);
				return 1;
			}
			case DIALOG_ADVISOR_MENU:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;
				switch(listitem)
				{
					case 0:
					{
						if(!IsValidDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]))
						{
							g_player[playerid][P_ADVISOR_LABEL] = CreateDynamic3DTextLabel("Советник", 0xFFCC33FF, 0.0, 0.0, 0.3, 10.0, playerid);
							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бейджик");
						}
						else
						{
							DestroyDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]);
							g_player[playerid][P_ADVISOR_LABEL] = Text3D: -1;
							SendClientMessage(playerid, 0x3399FFFF, "Вы сняли бейджик");
						}
					}
					case 1:
					{
						if(GetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT))
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, false);
							SendClientMessage(playerid, 0x66CC00FF, "Вы включили отображение рации организации");
						}
						else
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, true);
							SendClientMessage(playerid, 0xFF6600FF, "Вы отключили отображение рации организации");
						}
					}
					case 2:
					{
						if(GetPlayerJob(playerid) != 5)
						{
							SendClientMessage(playerid, 0x999999FF, "Функция доступна советникам по гос. организациям");
						}
						else
						{
							Dialog
							(
	                        playerid, DIALOG_ADVISOR_TEAM_STRUCTURE, DIALOG_STYLE_LIST,
								"{33CC66}Выберите организацию",
								"1. Правительство области\n\
								2. Воинская часть\n\
								3. Больница\n\
								4. ТРК «Ритм»\n\
								5. ФСИН\n\
								6. Отдел полиции №2 (МВД)\n\
								7. ФСБ",
								"Выбрать", "Отмена"
							);
							return 1;
						}
					}
					default: return -1;
				}
				callcmd::smenu(playerid, "");
				return 1;
			}
			case DIALOG_ADVISOR_TEAM_STRUCTURE:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;
				if(0 <= listitem <= 6)
				{
					ShowTeamStructureDialog(playerid, (listitem + 1));
				}
				return 1;
			}
			case DIALOG_MY_TELEPORT_LIST:
			{
				if(response)
				{
					SetPlayerPosEx
					(
						playerid,
						g_player_my_tplist[playerid][listitem][Tplist_X],
						g_player_my_tplist[playerid][listitem][Tplist_Y],
						g_player_my_tplist[playerid][listitem][Tplist_Z],
						0.0, 0, 0
					);
				}
			}
			case DIALOG_TELEPORT_LIST:
			{
				if(response)
				{
					if(listitem == 0)
					{
						new fmt_text[54],
						Cache: result;
						mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM mytplist WHERE owner_id='%d'", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, fmt_text, true);
						new rows = cache_num_rows();
						if(rows > 0)
						{
							new query[160], name[24];
							string_dialog[0] = EOS;
							format(string_dialog, sizeof string_dialog, "");
							for(new i = 0; i < rows; i ++)
							{
								cache_get_field_content(i, "name", name);
								g_player_my_tplist[playerid][i][Tplist_X] = cache_get_field_content_float(i, "x");
								g_player_my_tplist[playerid][i][Tplist_Y] = cache_get_field_content_float(i, "y");
								g_player_my_tplist[playerid][i][Tplist_Z] = cache_get_field_content_float(i, "z");
								format(query, sizeof query, "{FFFFFF}%d. %s\n", i + 1, name);
								strcat(string_dialog, query);
							}
							Dialog(playerid, DIALOG_MY_TELEPORT_LIST, DIALOG_STYLE_LIST, "{FFD83D}Список личных телепортов", string_dialog, "Выбрать", "Закрыть");
							cache_delete(result);
							return true;
						}
					}
					SetPlayerPosEx
					(
						playerid,
						GetTeleportListData(listitem, TL_POS_X),
						GetTeleportListData(listitem, TL_POS_Y),
						GetTeleportListData(listitem, TL_POS_Z),
						0.0, 0, 0
					);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_SET_DOUBLING:
			{
				if(response)
				{
					new fmt_text[50],
						doubling = g_doubling[listitem];
					static const doubling_name[3][24] = {"доната", "очков опыта", "зарплаты на подработках"};
					g_doubling[listitem] = bool: doubling ^ true;
					format(fmt_text, sizeof fmt_text, "Вы %s удвоение %s", doubling ? "выключили" : "включили", doubling_name[listitem]);
					SendClientMessage(playerid, 0x3399FFFF, fmt_text);
				}
			}
			case DIALOG_ADVERT_EDIT:
			{
				new ad_id = GetPVarInt(playerid, "advert_id"),
					fmt_text[144];
				if(GetAdvertData(ad_id, A_CREATOR) == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0x999999FF, "Автор объявления отключился");
				if(response)
				{
					if(strlen(inputtext))
						format(g_advert[ad_id][A_TEXT], 128, inputtext);
					format(fmt_text, sizeof fmt_text, "ТРК 'Ритм' || %s | Отправил %s[%d] (тел. %d){btn:0:1:111555}", GetAdvertData(ad_id, A_TEXT),
					GetPlayerNameEx(GetAdvertData(ad_id, A_CREATOR)), GetAdvertData(ad_id, A_CREATOR),
					GetPlayerPhone(GetAdvertData(ad_id, A_CREATOR)));
					GivePlayerMoneyEx(playerid, 100, "Зарплата ТРК за объявление", true, true);
					GameText(playerid, "~b~~h~Редактирование объявления~n~+100 рублей", 3000, 2);
					SendClientMessageToAll(0x00CC00FF, fmt_text);
					format(fmt_text, sizeof fmt_text, " Объявление %s сотрудник СМИ %s", strlen(inputtext) ? "отредактировал" : "проверил",
					GetPlayerNameEx(playerid));
					SendClientMessageToAll(0x006400FF, fmt_text);
				}
				else
				{
					if(!strlen(inputtext))
						return SendClientMessage(playerid, 0x999999FF, "Введите причину отклонения объявления");
					new creator_id = GetAdvertData(ad_id, A_CREATOR);
					if(creator_id != INVALID_PLAYER_ID)
					{
						format(fmt_text, sizeof fmt_text, "%s %s[%d] отклонил Ваше объявление. Причина: %s",
						GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, inputtext);
						SendClientMessage(creator_id, 0xFF5533FF, fmt_text);
					}
					format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] отклонил объявление №%d. Причина: %s",
					GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, ad_id + 1, inputtext);
					SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x99CC99FF, playerid);
					format(fmt_text, sizeof fmt_text, "Вы отклонили объявление №%d. Причина: %s", ad_id + 1, inputtext);
					SendClientMessage(playerid, 0x66CC33FF, fmt_text);
				}
				DeleteAdvert(ad_id);
			}
			// -----------------------------------------
			case DIALOG_ARMORY:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							if(GetPVarInt(playerid, "took_nitestick") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали дубинку");
							GiveWeapon(playerid, 3, 1);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли дубинку");
							SetPVarInt(playerid, "took_nitestick", gettime() + 300);
						}
						case 2:
						{
							new Float: armour;
							GetPlayerArmour(playerid, armour);
							if(armour > 20.0)
								return SendClientMessage(playerid, 0x999999FF, "У Вас уже есть бронежилет");
							SetPlayerArmour(playerid, 100.0);
							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бронежилет");
						}
						case 3:
						{
							if(GetPVarInt(playerid, "took_deagle") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали Desert Eagle");
							GiveWeapon(playerid, 24, 120);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли Desert Eagle");
							SetPVarInt(playerid, "took_deagle", gettime() + 300);
						}
						case 4:
						{
							if(GetPVarInt(playerid, "took_sdpistol") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали пистолет с глушителем");
							GiveWeapon(playerid, 23, 60);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли пистолет с глушителем");
							SetPVarInt(playerid, "took_sdpistol", gettime() + 300);
						}
						case 5:
						{
							if(GetPVarInt(playerid, "took_ak47") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали АК47");
							GiveWeapon(playerid, 30, 230);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли АК47");
							SetPVarInt(playerid, "took_ak47", gettime() + 300);
						}
						case 6:
						{
							if(GetPVarInt(playerid, "took_photo") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали фотоаппарат");
							GiveWeapon(playerid, 43, 30);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли фотоаппарат");
							SetPVarInt(playerid, "took_photo", gettime() + 300);
						}
					}
				}
			}
			case DIALOG_ARMORY1:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							if(GetPVarInt(playerid, "took_nitestick") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали дубинку");
							GiveWeapon(playerid, 3, 1);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли дубинку");
							SetPVarInt(playerid, "took_nitestick", gettime() + 300);
						}
						case 2:
						{
							new Float: armour;
							GetPlayerArmour(playerid, armour);
							if(armour > 20.0)
								return SendClientMessage(playerid, 0x999999FF, "У Вас уже есть бронежилет");
							SetPlayerArmour(playerid, 100.0);
							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бронежилет");
						}
						case 3:
						{
							if(GetPVarInt(playerid, "took_deagle") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали Desert Eagle");
							GiveWeapon(playerid, 24, 120);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли Desert Eagle");
							SetPVarInt(playerid, "took_deagle", gettime() + 300);
						}
						case 4:
						{
							if(GetPVarInt(playerid, "took_sdpistol") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали тайзер");
							GiveWeapon(playerid, 23, 60);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли тайзер");
							SetPVarInt(playerid, "took_sdpistol", gettime() + 300);
						}
						case 5:
						{
							if(GetPVarInt(playerid, "took_ak47") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали АК47");
							GiveWeapon(playerid, 30, 230);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли АК47");
							SetPVarInt(playerid, "took_ak47", gettime() + 300);
						}
						case 6:
						{
							SendClientMessage(playerid, 0x3399FFFF, "На данный момент жезл не доступен!");
						}
						case 7:
						{
							if(GetPVarInt(playerid, "took_photo") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали фотоаппарат");
							GiveWeapon(playerid, 43, 30);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли фотоаппарат");
							SetPVarInt(playerid, "took_photo", gettime() + 300);
						}
						case 8:
						{
							GiveIteam(playerid,276, 1, 1, 0);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли Тауметр");
						}
						case 9:
						{
							GiveIteam(playerid,255, 1, 1, 0);
							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли Аппарат для диагностики");
						}
					}
				}
			}
			case DIALOG_BIZ_ORDERS:
			{
				if(!response) return 1;
				if(GetPlayerData(playerid, P_IN_JOB) == false) return SCM(playerid, COLOR_GREY, "Вы должны начать рабочий день");
				new vehicleid = GetPlayerVehicleID(playerid);
				if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "Вы должны взять соответствующий прицеп из гаража компании");
				new order_id = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "order_id", order_id);
				if(GetPlayerData(playerid, P_ORDER) != -1)
					return SendClientMessage(playerid, 0xCECECEFF, "Выполните текущий заказ перед тем как взять новый");
				if(!GetOrderData(order_id, O_AMOUNT))
					return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Выбранный заказ не найден");
				if(GetOrderData(order_id, O_USED))
					return SendClientMessage(playerid, -1, "Этот заказ уже принял другой дальнобойщик");
				string_dialog[0] = EOS;
				format
				(
					string_dialog, sizeof string_dialog, 
					"{FFFFFF}Название предприятия: {f0c94f}%s\n\
					{FFFFFF}Необходимый товар: {f0e94f}Продукты\n\
					{FFFFFF}Длина пути от места загрузки: {f0c94f}Неизвестно.\n\n\
					{FFFFFF}Необходимое количество: {f0c94f}%d {FFFFFF}ед.\n\
					{FFFFFF}Оплата за всю работу: {aef04f}%s {FFFFFF}руб.\n\n\
					{FFFFFF}Комиссия компании составляет: {ffe36c}25%\n\n\
					{FFFFFF}Примерное количество заездов: {f0c94f}%d {FFFFFF}кр.",
					GetBusinessData(GetOrderData(order_id, O_COMPANY_ID), B_NAME), 
					GetOrderData(order_id, O_AMOUNT),
					formatInt(GetOrderData(order_id, O_PRICE)),
					GetOrderData(order_id, O_AMOUNT) / 2500
				);
				Dialog(playerid, DIALOG_BIZ_ORDERS_INVITE, DIALOG_STYLE_MSGBOX, "{FFFFFF}Заказ на поставку груза", string_dialog, "Принять", "Назад");
			}
			case DIALOG_BIZ_ORDERS_INVITE:
			{
				if(!response) return callcmd::bizlist(playerid);
				new order_id = GetPVarInt(playerid, "order_id");
				if(GetPlayerData(playerid, P_ORDER) != -1)
					return SendClientMessage(playerid, 0xCECECEFF, "Выполните текущий заказ перед тем как взять новый");
				if(!GetOrderData(order_id, O_AMOUNT))
					return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Выбранный заказ не найден");
				if(GetOrderData(order_id, O_USED))
					return SendClientMessage(playerid, -1, "Этот заказ уже принял другой дальнобойщик");
				new vehicleid = GetPlayerVehicleID(playerid);
				if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "У вас нет прицепа");
				SetOrderData(order_id, O_USED, true);
				SetPlayerData(playerid, P_ORDER, order_id);
				SendClientMessage(playerid, 0xFFFFFFFF, "Вы начали выполнение заказа. Загрузите необходимое количество {ddbe86}товара {FFFFFF}на заводе ({d6964e}(Отмечено красной точкой){FFFFFF})");
				SetPlayerRaceCheckpoint
				(
					playerid,
					2,
					-1044.0236,
					2203.1716,
					38.1194,
					0.0,
					0.0,
					0.0,
					4.0,
					RCP_ACTION_TYPE_ORDER_INVITE
				);
			}
			case 4567:
			{
				if(!response) return 1;
				new vehicleid = GetPlayerVehicleID(playerid);
				RepairVehicle(vehicleid);
				if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);
				scm(playerid, COLOR_GREEN, "Вы успешно починили данный автомобиль");
			}
			case 1216:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) > 0 || g_player[playerid][P_JOB] == 9)
				{
					extract inputtext -> new player:id; else return Dialog(playerid,1216,DIALOG_STYLE_INPUT,"Приглашение","Введите ид игрока которого хотите принять","Далее","Oтмена");
					callcmd::invite(playerid, IntToString(id));
				}
			}
			case 1214:
			{
				if(!response) return 1;
				switch(listitem){
					case 0: return Dialog(playerid,1216,DIALOG_STYLE_INPUT,"Приглашение","Введите ид игрока которого хотите принять","Далее","Oтмена");
					case 1: ShowTeamStructureDialog(playerid, GetPlayerTeamEx(playerid));
					case 2:{
						if(IsAtGangLyt(playerid) || IsAtGangArz(playerid) || IsAtGangBat(playerid))
						{
							callcmd::close(playerid, "");
							callcmd::lmenu(playerid,"");
						}
						else{
							if(IsAtPPS(playerid)) SendClientMessageToAll(COLOR_YELLOW, "МВД устраивает набор во фракцию, желающим вступить приехать в отделение МВД (/gps 3 > 2)");
							else if(IsAtDPS(playerid)) SendClientMessageToAll(COLOR_YELLOW, "МВД устраивает набор во фракцию, желающим вступить приехать в отделение МВД (/gps 3 > 1)");
							else if(IsAtGoverment(playerid)) SendClientMessageToAll(COLOR_YELLOW, "Правительство устраивает набор во фракцию, желающим вступить приехать в мэрию (/gps 3 > 7)");
							else if(IsAtArmy(playerid)) SendClientMessageToAll(COLOR_YELLOW, "Армия устраивает набор во фракцию, желающим вступить приехать в воинскую часть (/gps 3 > 3)");
							else if(IsAtHospital(playerid)) SendClientMessageToAll(COLOR_YELLOW, "Больница устраивает набор во фракцию, желающим вступить приехать в больницу (/gps 3 > 4)");
							else if(IsAtRadio(playerid)) SendClientMessageToAll(COLOR_YELLOW, "ТРК устраивает набор во фракцию, желающим вступить приехать в ТРК (/gps 3 > 6)");
						}
					}
				}
			}
			case 1234:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: 
						{
							string_dialog[0] = EOS;
							format(string_dialog, sizeof string_dialog, "{FFFFFF}Вы выдаете префикс: {42B02C}%s\n{FFFFFF}Для того чтобы выдать префикс, нужно ввести название и цвет через запятую.\nПример: Главный админ, FF6347-Красный, FDE910-Желтый, 42AAFF-Синий.\nПолучится в итоге так: {FF6347}Главный админ\n{FFFFFF}Посмотреть цвета можно через hex color.", GetPlayerNameEx(GetPVarInt(playerid,"PrefixID")));
							Dialog(playerid, 1235, 1, "{FF6347}Ввод префикса{FFFFFF}", string_dialog, "Выбрать","Отмена");
						}
						case 1:
						{
							string_dialog[0] = EOS;
							format(string_dialog, sizeof(string_dialog), "[TAG-CMD] Администратор %s[%i] забрал префикс [ {%s}%s {ffffff}] у администратора %s[%i]", GetPlayerNameEx(playerid), playerid, g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX_COLOR], g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX], GetPlayerNameEx(GetPVarInt(playerid,"PrefixID")), GetPVarInt(playerid,"PrefixID"));
							SendMessageToAdmins(string_dialog, -1);
							g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX] = EOS;
							g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX_COLOR] = EOS;
							UpdatePlayerDataStr(GetPVarInt(playerid,"PrefixID"), "myprefix", g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX]);
							UpdatePlayerDataStr(GetPVarInt(playerid,"PrefixID"), "myprefixcolor", g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX_COLOR]);
							DeletePVar(playerid, "PrefixID");
						}
					}
				}
			}
			case 1235:
			{
				string_dialog[0] = EOS;
				if(response)
				{ 
					static prefix[120];
					static color[8];
					sscanf(inputtext,"p<,>s[120]s[7]",prefix,color);
					if(!strlen(inputtext))
					{
						format(string_dialog, sizeof(string_dialog), "{FFFFFF}Вы выдаете префикс: {42B02C}%s\n{FFFFFF}Для того чтобы выдать префикс, нужно ввести название и цвет через запятую.\nПример: Главный админ, FF6347.\nПолучится в итоге так: {FF6347}Главный админ\n{FFFFFF}Посмотреть цвета можно через hex color.\n{BE2D2D}Ошибка, вы ничего не ввели", GetPlayerNameEx(GetPVarInt(playerid,"PrefixID")));
						Dialog(playerid, 1235, 1, "{FF6347}Ввод префикса{FFFFFF}", string_dialog, "Выбрать","Отмена");
					}
					if(strlen(prefix) <= 1 || strlen(prefix) > 120 || strlen(color) <= 1 || strlen(color) > 7)
					{
						format(string_dialog, sizeof(string_dialog), "{FFFFFF}Вы выдаете префикс: {42B02C}%s\n{FFFFFF}Для того чтобы выдать префикс, нужно ввести название и цвет через запятую.\nПример: Главный админ, FF6347.\nПолучится в итоге так: {FF6347}Главный админ\n{FFFFFF}Посмотреть цвета можно через hex color.\n{BE2D2D}Ошибка, вы не правильно указали имя префикс\n{BE2D2D}Или указан некорректный цвет", GetPlayerNameEx(GetPVarInt(playerid,"PrefixID")));
						Dialog(playerid, 1235, 1, "{FF6347}Ввод префикса{FFFFFF}", string_dialog, "Выбрать","Отмена");
					}
					else
					{
						g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX] = EOS;
						strcat(g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX], prefix);
						g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX_COLOR] = EOS;
						strcat(g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX_COLOR], color);
						format(string_dialog, sizeof(string_dialog), "[TAG-CMD] Администратор %s[%i] выдал префикс [ {%s}%s {ffffff}] администратору %s[%i]", GetPlayerNameEx(playerid), playerid, color, prefix, GetPlayerNameEx(GetPVarInt(playerid,"PrefixID")), GetPVarInt(playerid,"PrefixID"));
						SendMessageToAdmins(string_dialog, -1);
						UpdatePlayerDataStr(GetPVarInt(playerid,"PrefixID"), "myprefix", g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX]);
						UpdatePlayerDataStr(GetPVarInt(playerid,"PrefixID"), "myprefixcolor", g_player[GetPVarInt(playerid,"PrefixID")][P_MYPREFIX_COLOR]);
						DeletePVar(playerid, "PrefixID");
					}
				}
			}
      	case DIALOG_RENT_MOP:
		{
			if(!response) 
				return 1;
			if(GetPlayerLevel(playerid) > 4)
			{
				SCM(playerid, 0xeed985FF, "Аренда скутеров доступно только новичкам.");
				return true;
			}
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 500000)) 
				return SCM(playerid, COLOR_GREY, "Недостаточно средств.");
			if(GetPlayerData(playerid, P_RENT_MOPED) != INVALID_VEHICLE_ID)
			{
				DestroyVehicle(GetPlayerData(playerid, P_RENT_MOPED));
				SetPlayerData(playerid, P_RENT_MOPED, INVALID_VEHICLE_ID);
				SCM(playerid, 0xe3bb42FF, "Срок действия Вашего транспорта истёк или он был уничтожен.");
			}
			GivePlayerMoneyEx(playerid, -500000, "Аренда cкутера");
			SetPVarInt(playerid, "rent_moped_time", gettime() + 3600);
			SCM(playerid, 0xe3bb42FF, "Транспортное средство арендовано для Вас и другие игроки не могут использовать его.");
			new Float: x, Float: y, Float: a, Float: z;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);
			SetPlayerData(playerid, P_RENT_MOPED, CreateVehicle(462, x,y,z,a, 7,7, 300, 0, VEHICLE_ACTION_TYPE_RENT_MOPED));
			PutPlayerInVehicle(playerid, GetPlayerData(playerid, P_RENT_MOPED), 0);
		}
	 	case DIALOG_BUY_MEDCARD:
		{
		    if(!response) return 1;
		    switch(listitem + 1)
		    {
		        case 1:
		        {
       				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 5000000)) return SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно денег.");
       				if(GetPlayerData(playerid, P_MEDCARD) == 1) return SCM(playerid, 0xFF6600FF, !"У вас уже есть мед карта");
      				GivePlayerMoneyEx(playerid, -5000000);
      				SetPlayerData(playerid, P_MEDCARD, 1);
	                UpdatePlayerDataInt(playerid, "medcard", GetPlayerData(playerid, P_MEDCARD));
           	        SendClientMessage(playerid,COLOR_WHITE,"Вы купили{ffbf00}Медкарту {ffffff}-5000000р");
			        return 1;
				}
				case 2:
				{
					Dialog
					(
					playerid, DIALOG_BUY_MEDCARD1, DIALOG_STYLE_LIST,
					"{ffffff}Покупка статуса для мед карты",
					"{FFD700}1. {ffffff}Болен(a) {FF0000}10.000.000\n"\
					"{FFD700}2. {ffffff}Психические отклонения {FF0000}25.000.000\n"\
					"{FFD700}3. {ffffff}Здоров(a) {FF0000}50.000.000",
					"Купить", "Закрыть"
					);
               }
     		}
     		return 1;
	 	}
	 	case DIALOG_BUY_MEDCARD1:
		{
		    if(!response) return 1;
		    switch(listitem + 1)
		    {
		        case 1:
		        {
       				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 10000000)) return SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно денег.");
       				if(GetPlayerData(playerid, P_MEDCARD_STATUS) == 1) return SCM(playerid, 0xFF6600FF, !"У вас уже есть данный статус мед карты");
      				GivePlayerMoneyEx(playerid, -10000000);
      				SetPlayerData(playerid, P_MEDCARD_STATUS, 1);
	                UpdatePlayerDataInt(playerid, "medcard_status", 1);
           	        SendClientMessage(playerid,COLOR_WHITE,"Вы купили{ffbf00} статус болен(a) {ffffff}-10000000р");
			        return 1;
				}
				case 2:
		        {
       				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 25000000)) return SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно денег.");
       				if(GetPlayerData(playerid, P_MEDCARD_STATUS) == 2) return SCM(playerid, 0xFF6600FF, !"У вас уже есть данный статус мед карты");
      				GivePlayerMoneyEx(playerid, -25000000);
      				SetPlayerData(playerid, P_MEDCARD_STATUS, 2);
      				UpdatePlayerDataInt(playerid, "medcard_status", 2);
           	        SendClientMessage(playerid,COLOR_WHITE,"Вы купили{ffbf00} статус психические отклонения {ffffff}-25000000р");
			        return 1;
				}
				case 3:
		        {
       				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 50000000)) return SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно денег.");
       				if(GetPlayerData(playerid, P_MEDCARD_STATUS) == 3) return SCM(playerid, 0xFF6600FF, !"У вас уже есть данный статус мед карты");
      				GivePlayerMoneyEx(playerid, -50000000);
      				SetPlayerData(playerid, P_MEDCARD_STATUS, 3);
	                UpdatePlayerDataInt(playerid, "medcard_status", 3);
           	        SendClientMessage(playerid,COLOR_WHITE,"Вы купили{ffbf00} статус здоров(а) {ffffff}-50000000р");
			        return 1;
				}
			}
		}
		case DIALOG_RENTBUY:
		{
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 35000)) return SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно денег.");
			GivePlayerMoneyEx(playerid, -35000);
			GiveIteam(playerid, 44, 1, 1, 0);
			SendClientMessage(playerid, 0xCECECEFF, "Вы успешно купили ремкоплект");
		}
		case DIALOG_KIOSK_INTER:
		{
			if(!response) return SetPVarInt(playerid, "kiosk_inter",0);
			SetPVarInt(playerid, "kiosk_inter",listitem +1);
			if(GetPVarInt(playerid, "kiosk_inter") == 1) SetPVarInt(playerid, "modelid_inter", 15933), SetPVarInt(playerid, "price_inter", 10000000);
			if(GetPVarInt(playerid, "kiosk_inter") == 2) SetPVarInt(playerid, "modelid_inter", 15930), SetPVarInt(playerid, "price_inter", 15000000);
			if(GetPVarInt(playerid, "kiosk_inter") == 3) SetPVarInt(playerid, "modelid_inter", 15932), SetPVarInt(playerid, "price_inter", 20000000);
			if(GetPVarInt(playerid, "kiosk_inter") == 4) SetPVarInt(playerid, "modelid_inter", 15931), SetPVarInt(playerid, "price_inter", 30000000);
			Dialog(playerid, DIALOG_KIOSK_CHEK, DIALOG_STYLE_LIST,"{FFFF00}Выберите действие","1.Посмотреть интерьер\n2.Купить интерьер","Далее", "Назад");
		}
		case DIALOG_KIOSK_CHEK:
		{
			if(!response) return Dialog(playerid, DIALOG_KIOSK_CHEK, DIALOG_STYLE_LIST,"{FFFF00}Выберите действие","1.Посмотреть интерьер\n2.Купить интерьер","Далее", "Назад");
			if(listitem == 0)
			{
				SetPlayerCameraPos(playerid,5946.068359,-692.841613,1851.135986);
				SetPlayerCameraLookAt(playerid, 5942.020019,-690.176330,1849.908813);
				SetPVarInt(playerid, "kiosk_object",CreatePlayerObject(playerid, GetPVarInt(playerid, "modelid_inter"), 5941.37, -694.848, 1848.88, 0.0, 0.0, 0.0));
				BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions","[[1, \"Закончить просмотр\"]]");
			}
			if(listitem == 1)
			{
				string_dialog[0] = EOS;
				format(string_dialog, sizeof string_dialog, "{FFFFFF}Вы уверены что хотите приобрести интерьер {ffa500}№%d?\n{FFFFFF}Стоимость: {ffa500}%d руб.\n\n{FFFFFF}Внимание! С интерьера будут убраны все размещенные аксессуары!", GetPVarInt(playerid, "kiosk_inter"), GetPVarInt(playerid, "price_inter"));
				Dialog(playerid, DIALOG_KIOSK_BUY_INTER, DIALOG_STYLE_MSGBOX, "{FFFFFF}Покупка интерьера", string_dialog, "Да", "Назад");
			}
		}
		case DIALOG_KIOSK_BUY_INTER:
		{
			if(!response) return 1;
			new query[84], idx = GetNearestKiosk(playerid, 5.0);
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "price_inter"))) return SendClientMessage(playerid, 0xFF6600FF, "*Недостаточно средств.");
			GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "price_inter"));
			if(IsValidDynamicObject(kioskobj[idx])) DestroyDynamicObject(kioskobj[idx]);
			kioskobj[idx] = CreateDynamicObject(GetPVarInt(playerid, "modelid_inter"), GetKioskData(idx, K_POS_X_INTER), GetKioskData(idx, K_POS_Y_INTER), 1000, 0.0, 0.0, GetKioskData(idx, K_POS_ANGEL_INTER));
			mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET inter=%d WHERE id=%d", GetPVarInt(playerid, "modelid_inter"), idx);
			mysql_query(mysql, query, false);
		}
		case DIALOG_CREATE_NEFTENASOS:
		{
			if(!response) return 1;
			GivePlayerMoneyEx(playerid, -10000000);
			CreatePlayerNeft(playerid);
			GiveIteam(playerid, 288, 0, 1, 0);
			DisablePlayerCheckpoint(playerid);
			neft_cp[playerid] = 0;
		}
		case DIALOG_NEFTENASOS:
		{
			if(!response) return 1;
			new neft = GetPVarInt(playerid, "ownableneft");
			switch(listitem + 1)
			{
				case 1: 
				{
					if(GetNeftData(neft, N_WORK_STATUS) == 0) return ShowMenuNeft(playerid), SCM(playerid, -1, "*На данный момент вам это не доступно.");
					if(GetNeftData(neft, N_WORK_STATUS) == 1) SetNeftData(neft, N_WORK_STATUS, 2);
					else if(GetNeftData(neft, N_WORK_STATUS) == 2) SetNeftData(neft, N_WORK_STATUS, 1);
					ShowMenuNeft(playerid);
				}
				case 2:
				{
					SendClientMessage(playerid, 0x999999FF, "{FFFFFF}Взгляните на положение каждой {f2e8c9}транспортной компании, {FFFFFF}и выберите ту, которая Вас удовлетворяет");
					Dialog(playerid, DIALOG_NEFTENASOS2, DIALOG_STYLE_TABLIST_HEADERS,"Премиум-заказ",
					"{f2e8c9}Наименование\t {ccffcc}Рейтинг \t {FFFFFF}Ждут заказов\n"\
					"{f2e8c9}ТК 'Южный' \t {ccffcc}10 ед. \t {FFFFFF}10 чел.\n"\
					"{f2e8c9}ТК 'Лыткарино' \t{ccffcc}10 ед. \t {FFFFFF}10 чел.\n"\
					"{f2e8c9}ТК 'Батырево' \t{ccffcc}10 ед. \t {FFFFFF}10 чел.",
					"Далее", "Назад");
				}
				case 3: SendClientMessage(playerid, 0x999999FF, "*На данный момент нет активных заказов.");
				case 4:
				{
					new fmt2[148];
					string_dialog[0] = EOS;
					format(fmt2, sizeof fmt2, "{FFFFFF}Нефтяной насос №%d", neft);
					format
					(
						string_dialog, sizeof string_dialog,
						"{FFFFFF}Баланс: {ffa500}%d руб.\n"\
						"{FFFFFF}Оплачен на {ffa500}%d/5 дн.\n"\
						"{FFFFFF}Резервуар: {ffa500}%d.%d/%d\n\n"\
						"{FFFFFF}После включения нефтенасос начинает постепенно добывать нефть, которую нужно экспортировать\n"\
						"{FFFFFF}когда резервуар полностью заполнится. Учтите, что во время добычи может произойти пожар\n"\
						"{FFFFFF}из-за чего работа нефтенасоса будет приостановлена и вам нужно будет включить его заново.",
						GetNeftData(neft, N_BALANCE),
						GetNeftData(neft, N_RENT_DATE),
						GetNeftData(neft, N_FUELS),
						fuels_neft[neft],
						neftfuels[neft]
					);
					return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, fmt2, string_dialog, "", "Закрыть");
				}
				case 5: Dialog(playerid, DIALOG_NEFTENASOS4, DIALOG_STYLE_TABLIST_HEADERS,"Выберите улучшение","{FFFFFF}Наименование \t {FFFFFF}Цена\n{FFFFFF}1. Подземный резервуар \t {ffa500}15.000.000 руб\n{FFFFFF}2. Модуль включения \t {ffa500}10.000.000 руб","Далее", "Назад");
				case 6: Dialog(playerid, DIALOG_SELL_NEFTENASOS, DIALOG_STYLE_INPUT,"{FFFFFF}Продать нефтяной насос игроку","{FFFFFF}Введите ид игрока которому хотите продать нефтяной насос:","Далее", "Назад");
				case 7: Dialog(playerid, DIALOG_DESTROY_NEFTENASOS, DIALOG_STYLE_MSGBOX,"{FFFFFF}Подтвердите действие","{FFFFFF}Вы уверены, что хотите демонтировать нефтенасос? Ценная бумага возвращена не будет!\n{ffa500}Демонтированное оборудование будет продано за 700.000 руб.","Да", "Нет");
			}
		}
		case DIALOG_NEFTENASOS2: 
		{
			if(!response) return ShowMenuNeft(playerid);
			Dialog(playerid, DIALOG_NEFTENASOS3, DIALOG_STYLE_MSGBOX,"{FFFFFF}Заказ у транспортных компаний","{FFFFFF}Вы действительно желаете заказать экспорт нефти с Вашего нефтенасоса?","Далее", "Назад");
		}
		case DIALOG_DESTROY_NEFTENASOS:
		{
			if(!response) return 1;
			new neft = GetPVarInt(playerid, "ownableneft");
			GivePlayerMoneyEx(playerid, 700000);
			SendClientMessage(playerid, 0x999999FF, "{FFFFFF}Вы демонтировали {f2e8c9}нефтяной насос, {FFFFFF}вам было возвращено 700 000 руб.");
			if(GetNeftData(neft, N_WORK_STATUS) == 0) if(IsValidDynamicObject(neftobj[neft])) DestroyDynamicObject(neftobj[neft]); 
			if(GetNeftData(neft, N_WORK_STATUS) > 0)
			{
				if(IsValidDynamicObject(neftobj[neft])) DestroyDynamicObject(neftobj1[neft]);
				if(IsValidDynamicObject(neftobj[neft])) DestroyDynamicObject(neftobj2[neft]);
				if(IsValidDynamicObject(neftobj[neft])) DestroyDynamicObject(neftobj3[neft]);
				if(IsValidDynamicObject(neftobj[neft])) DestroyDynamicObject(neftobj4[neft]);
				if(IsValidDynamicObject(neftobj[neft])) DestroyDynamicObject(neftobj5[neft]);
			}
			if(IsValidDynamicObject(neftobj[neft])) DestroyDynamicObject(neftobj6[neft]);
			DestroyPickup(neftpickup[neft]);
			DestroyDynamic3DTextLabel(neftlabelty[neft]);
			DestroyDynamic3DTextLabel(neftlabel[neft]);
			new query[148];
			mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET owner_id=%d WHERE id=%d", 0, neft);
			mysql_query(mysql, query, false);
		}
		case DIALOG_NEFTENASOS3:
		{
			new neft = GetPVarInt(playerid, "ownableneft");
			string_dialog[0] = EOS;
			new fmt1[64];
			new fmt2[64];
			new day, month, year;
			getdate(day, month, year);
			if(year < 10) format(fmt1, sizeof fmt1,"0%d", year);
			else format(fmt1, sizeof fmt1,"%d", year);
			if(month < 10) format(fmt2, sizeof fmt2,"0%d", month);
			else format(fmt2, sizeof fmt2,"%d", month);
			format
			(
				string_dialog, sizeof string_dialog,
				"{ffd700}- Параметры заказа:\n\n"\
				"{FFFFFF}Количество литров нефти: \t %d ед.\n"\
				"{FFFFFF}Стоимость одного литра нефти: \t 9400 руб\n"\
				"{FFFFFF}Общая стоимость заказа: \t %d руб\n"\
				"{FFFFFF}Дата оформления заказа: \t %s-%s-%d\n\n"\
				"{FFFFFF}Мы уведомили свободных сотрудников транспортных компаний о новом контракте.\n"\
				"{FFFFFF}Обратите внимание, что начисление денег за экспорт происходит после полного завершения заказа.\n"\
				"{FFFFFF}Премиум-заказ послужит дополнительным стимулом для дальнобойщиков.",
				GetNeftData(neft, N_FUELS),
				GetNeftData(neft, N_FUELS) * 77777,
				fmt1,
				fmt2,
				day
			);
			if(GetNeftData(neft, N_BALANCE) >= 500000)
			{
				GameText(playerid,"~w~Баланс нефтенасоса~n~~r~-500000 рублей", 4000, 2);
				new neftbalance = GetNeftData(neft, N_FUELS) * 77777 - 500000;
				SetNeftData(neft, N_BALANCE, GetNeftData(neft, N_BALANCE) + neftbalance), SetNeftData(neft, N_FUELS, 0);
			}
			else if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 500000))
			{
				GivePlayerMoneyEx(playerid, -500000);
				new neftbalance = GetNeftData(neft, N_FUELS) * 77777;
				SetNeftData(neft, N_BALANCE, GetNeftData(neft, N_BALANCE) + neftbalance), SetNeftData(neft, N_FUELS, 0);
			}
			else return GameText(playerid,"~w~Недостаточно средств", 4000, 2);
			new query[240];
			format(query, sizeof query, "UPDATE neftenasos SET neftfuels=%d, balance=%d WHERE id=%d", GetNeftData(neft, N_FUELS), GetNeftData(neft, N_BALANCE), GetNeftData(neft, N_SQL_ID));
			mysql_query(mysql, query, false);
			CallLocalFunction("UpdateNeftLabel", "i", neft);
			return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Заказ оформлен", string_dialog, "", "Закрыть");
		}
		case DIALOG_NEFTENASOS4:
		{
			if(!response) return ShowMenuNeft(playerid);
			switch(listitem + 1){
				case 1: SetPVarInt(playerid, "neftulu", 1), Dialog(playerid, DIALOG_NEFTENASOS5, DIALOG_STYLE_MSGBOX,"{FFFFFF}Подземный резервуар","{FFFFFF}Второй резервуар будет расположен под землёй.\n{FFFFFF}Таким образом общая вместительность составит {ffa500}6700 литров.\n{FFFFFF}Стоимость: {ffa500}15.000.000 руб.","Купить", "Назад");
				case 2: SetPVarInt(playerid, "neftulu", 2), Dialog(playerid, DIALOG_NEFTENASOS5, DIALOG_STYLE_MSGBOX,"{FFFFFF}Модуль включения","{FFFFFF}Модуль, который будет вкрючать нефтенасос после пожара.\n{FFFFFF}Таким образом вам нужно будет меньше следить за нефтяным насосом.\n{FFFFFF}Стоимость: {ffa500}10.000.000 руб.","Купить", "Назад");
			}
		}
		case DIALOG_NEFTENASOS5:
		{
			if(!response) return ShowMenuNeft(playerid);
			new neft = GetPVarInt(playerid, "ownableneft");
			new query[240];
			if(GetPVarInt(playerid, "neftulu") == 1){
				if(GetNeftData(neft, N_IMPROVEMENTS) > 0) return SendClientMessage(playerid, 0x999999FF, "*У вас уже куплено данное улучшение.");
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 15000000)) return SendClientMessage(playerid, 0x999999FF, "*Недостаточно денег.");
				GivePlayerMoneyEx(playerid, -15000000), SetNeftData(neft, N_IMPROVEMENTS, 1), neftfuels[neft] = 6700;
				CallLocalFunction("UpdateNeftLabel", "i", neft);
			}
			if(GetPVarInt(playerid, "neftulu") == 2){
				if(GetNeftData(neft, N_IMPROVEMENTS) > 1 || GetNeftData(neft, N_IMPROVEMENTS) != 1) return SendClientMessage(playerid, 0x999999FF, "*У вас уже куплено данное улучшение или не куплено первое улучшение.");
				if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 10000000)) return SendClientMessage(playerid, 0x999999FF, "*Недостаточно денег.");
				GivePlayerMoneyEx(playerid, -10000000), SetNeftData(neft, N_IMPROVEMENTS, 2);
			}
			format(query, sizeof query, "UPDATE neftenasos SET improvements=%d WHERE id=%d", GetNeftData(neft, N_IMPROVEMENTS), GetNeftData(neft, N_SQL_ID));
			mysql_query(mysql, query, false);
			DeletePVar(playerid, "neftulu");
		}
		case DIALOG_SELL_NEFTENASOS:
		{
			if(!response) return ShowMenuNeft(playerid);
			new neft = GetPVarInt(playerid, "ownableneft");
			if(!IsPlayerInRangeOfPoint(playerid, 6.0, GetNeftData(neft, N_POS_X), GetNeftData(neft, N_POS_Y), GetNeftData(neft, N_POS_Z)) && !IsPlayerInRangeOfPoint(strval(inputtext), 15.0, GetNeftData(neft, N_POS_X), GetNeftData(neft, N_POS_Y), GetNeftData(neft, N_POS_Z))) return SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около нефтяного насоса");
			SetPVarInt(playerid, "SellIdNeft", strval(inputtext));
			Dialog(playerid, DIALOG_SELL_NEFTENASOS2, DIALOG_STYLE_INPUT,"{FFFFFF}Продать нефтяной насос игроку","{FFFFFF}Введите сумму за которую готовы продать игроку нефтяной насос:","Далее", "Закрыть");
		}
		case DIALOG_SELL_NEFTENASOS2:
		{
			if(!response) return 1;
			if(GetPlayerMoneyEx(GetPVarInt(playerid, "SellIdNeft")) < strval(inputtext))
				return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");
			new neft = GetPVarInt(playerid, "ownableneft");
			SendPlayerOffer(playerid, GetPVarInt(playerid, "SellIdNeft"), OFFER_TYPE_SELL_NEFTENASOS, neft, strval(inputtext));
		}
		case DIALOG_OWNABLE_BLACK_MARKET:
		{
			if(!response) return 1;
			new idx = GetPlayerListitemValue(playerid, listitem);
			new query[64],
			Cache: result;
			mysql_format(mysql, query, sizeof query, "SELECT * FROM black_market WHERE id='%d'", idx);
			result = mysql_query(mysql, query, true);
			if(cache_num_rows())
			{
				if(cache_get_field_content_int(0, "type") == 0) GiveCar(playerid, cache_get_field_content_int(0, "modelid"), 1, 1, 3, -1765.9470, 2911.2585, 5.8822, 90.4859, gettime()), SendClientMessage(playerid, -1, "Вы забрали автомобиль");
				if(cache_get_field_content_int(0, "type") == 1) GiveSkin(playerid, cache_get_field_content_int(0, "modelid")), SendClientMessage(playerid, -1, "Вы забрали скин");
			}
			mysql_format(mysql, query, sizeof query, "DELETE FROM black_market WHERE id=%d", idx);
			mysql_query(mysql, query, false);
			cache_delete(result);
		}
		case DIALOG_LOTTERY:
		{
			new businessid = GetPlayerInBiz(playerid);
			if(businessid != -1)
			{
				if(response)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						new price;
						new take_prods;
						switch(listitem + 1)
						{
							case 1:
							{
								price = 5000000;
								take_prods = 2;
								if(GetILPlayerInt(GetPlayerMoneyEx(playerid), price))
								{
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										AddBusinessProfit(playerid, businessid, price * 20 / 100, take_prods);
									}
									GivePlayerMoneyEx(playerid, -price, "Покупка лотерейного билета");
									GiveIteam(playerid, 257, 1, 1, 0);
									SendClientMessage(playerid, 0x66CC00FF, "Вы купили лотерейный билет");
									SendClientMessage(playerid, 0x66CC00FF, "Использовать его можно через инвентарь или /lottery");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Лотерейный билет стоит 5.000.000 рублей");
							}
							default:
								return 1;
						}
					}
				}
			}
		}
	}
	return 1;
}

public:Phone_OnOpenContact(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').addContact('[[\"Авиапоставки\",222,-1,1],[\"Больница\",3,-1,1],[\"Полиция\",2,-1,1],[\"Федеральная служба безопасности\",101,-1,1],[\"Такси\",535,-1,1],[\"Механики\",90,-1,1],[\"Время\",60,-1,1],[\"Баланс\",111,-1,1]]')");
}

stock Dialog(playerid, dialogid, style, caption[], info[], button1[], button2[], page_1 = 0, page_2 = 0, info1[] = "")
{
	return client_Dialog(playerid, dialogid, style, caption, info, button1, button2, page_1, page_2, info1);
}

stock InterfaceShowNumberBuy(playerid, bool:status)
{
	if(status)
	{
		SetPVarInt(playerid, "buynumbertype", 0);
	    BitStream_2(playerid, s_CefInterface, t_CefShow, "BuyCarNumber", "[false, 5000, 153000, 0, 0]");
	}
	else BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('BuyCarNumber')");
}

stock GetNumPriceCefDonate(t[])
{
	new e =  GetNumPriceInt(t) + 1;
	new price = 72 * e;
	return price;
}

stock GetNumPriceInt(t[])
{
	new e = 0;
	new n = strlen(t);
	for(new r = 0; r < n; r++)
	{
		for(new i = r + 1; i < n; i++)
		{
			if(t[r] == t[i])
				e += 1;
		}
	}
	return e;
}

stock GetNumPriceCef(t[])
{
	new e =  GetNumPriceInt(t) + 1;
	new price = 153000 * pow(e, 2);
	return price;
}

stock IsACarNumberRu(text[])
{
	new length = strlen(text);
	if(length != 6)
	{
		return 0;
	}
	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 0, 4, 5:
			{
				switch(text[i])
				{
					case 'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y': continue;
					default: return 0;
				}
			}
			case 1..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	return 1;
}

stock IsACarRegionRu(text[])
{
	new status;
	for(new i; i < sizeof is_a_car_region; i++)
	{
		if(strcmp(text, is_a_car_region[i], false)) continue;
		status = 1;
		break;
	}
	return status;
}

stock IsACarNumberKz(text[])
{
	new length = strlen(text);
	if(length != 6)
	{
		return 0;
	}
	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 3..5:
			{
				switch(text[i])
				{
					case 'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y': continue;
					default: return 0;
				}
			}
			case 0, 1, 2:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	return 1;
}

stock IsACarNumberBy(text[], text2[])
{
	new length = strlen(text);
    new length2 = strlen(text2);
	if(length != 4)
	{
		return 0;
	}
	if(length2 != 4)
	{
		return 0;
	}
	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 1..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	for(new i; i < length2; i ++)
	{
		switch(i)
		{
			case 0, 1:
			{
				switch(text2[i])
				{
					case 'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y': continue;
					default: return 0;
				}
			}
			case 2:
			{
			    if(text2[i] == '-') continue;
			    else return 0;
			}
			case 3:
			{
				switch(text2[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	return 1;
}
stock IsACarNumberUa(text[], text2[])
{
	new length = strlen(text);
    new length2 = strlen(text2);
	if(length != 4) return 0;
	if(length2 != 4) return 0;
	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 0..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	for(new i; i < length2; i ++)
	{
		switch(i)
		{
			case 0..3:
			{
				switch(text2[i])
				{
					case 'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y': continue;
					default: return 0;
				}
			}
		}
	}
	return 1;
}

public: GetRandomUnusedLicensePlate(playerid, type22)
{
	new numberplate[15] = EOS,
	buyplate[150] = EOS;
	switch(type22)
	{
		case 1:
		{
			format(numberplate, sizeof numberplate, "%s %s", GenerateCarNumber(playerid), GenerateCarNumberRegRu(playerid));
		}
		case 2:
		{
			format(numberplate, sizeof numberplate, "%s %s", GenerateCarNumberKz(playerid), GenerateCarNumberRegKz(playerid));
		}
		case 3:
		{
			format(numberplate, sizeof numberplate, "%s  %s", GenerateCarNumberBy(playerid), GenerateCarNumberRegBy(playerid));
		}
		case 4:
		{
			format(numberplate, sizeof numberplate, "%s", GenerateCarNumberUK(playerid));
		}
	}
	format(buyplate, sizeof buyplate, "window.interface('BuyCarNumber').getRandomResponse('%s')", numberplate);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, buyplate);
	return 1;
}
stock GenerateCarNumber(playerid)
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new number[7] = EOS;
	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';
	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';
	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];
	format(number, sizeof number, "%c%c%c%c%c%c", number[0], number[1], number[2], number[3], number[4], number[5]);
	format(ranomnomber[playerid], sizeof ranomnomber[], "%c%c%c%c%c%c", number[0], number[1], number[2], number[3], number[4], number[5]);
	return number;
}
stock GenerateCarNumberRegRu(playerid)
{
	new number = random(sizeof is_a_car_region);
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%s",  is_a_car_region[number]);
	return is_a_car_region[number];
}
stock GenerateCarNumberKz(playerid)
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new numberkz[7] = EOS;
	numberkz[0] = random('9' - '0') + '0';
	numberkz[1] = random('9' - '0') + '0';
	numberkz[2] = random('9' - '0') + '0';
	numberkz[3] = chars[random(sizeof chars)];
	if(numberkz[0] == numberkz[1] && numberkz[1] == numberkz[2] && numberkz[2] == '0')
		numberkz[2] = random('9' - '0') + '1';
	numberkz[4] = chars[random(sizeof chars)];
	numberkz[5] = chars[random(sizeof chars)];
	format(numberkz, sizeof numberkz, "%c%c%c%c%c%c", numberkz[0], numberkz[1], numberkz[2], numberkz[3], numberkz[4], numberkz[5]);
	format(ranomnomber[playerid], sizeof ranomnomber[], "%c%c%c%c%c%c", numberkz[0], numberkz[1], numberkz[2], numberkz[3], numberkz[4], numberkz[5]);
	return numberkz;
}
stock GenerateCarNumberPolice()
{
	static const chars[12] = {'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y'};
	new number[6];
	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';
	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';
	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];
	return number;
}
stock GenerateCarNumberRegKz(playerid)
{
	new numberrkz[4] = EOS;
	format(numberrkz, sizeof numberrkz, "%d", RandomEx(10, 99));
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%s",  numberrkz);
	return numberrkz;
}
stock GenerateCarNumberBy(playerid)
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new numberby[7] = EOS;
	numberby[0] = random('9' - '0') + '0';
	numberby[1] = random('9' - '0') + '0';
	numberby[2] = random('9' - '0') + '0';
	numberby[3] = random('9' - '0') + '0';
	if(numberby[0] == numberby[1] && numberby[1] == numberby[2] && numberby[2] == numberby[3] && numberby[3] == '0')
		numberby[3] = random('9' - '0') + '1';
	numberby[4] = chars[random(sizeof chars)];
	numberby[5] = chars[random(sizeof chars)];
	format(numberby, sizeof numberby, "%c%c%c%c%c%c", numberby[0], numberby[1], numberby[2], numberby[3], numberby[4], numberby[5]);
	format(ranomnomber[playerid], sizeof ranomnomber[], "%c%c%c%c", numberby[0], numberby[1], numberby[2], numberby[3]);
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%c%c",  numberby[4], numberby[5]);
	return numberby;
}
stock GenerateCarNumberRegBy(playerid)
{
	new numberregby[4] = EOS;
	format(numberregby, sizeof numberregby, "%d", RandomEx(1, 9));
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%s-%s",  ranomnomberreg[playerid], numberregby);
	return numberregby;
}
stock GenerateCarNumberUK(playerid)
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new numberuk[9] = EOS;
	numberuk[0] = chars[random(sizeof chars)];
	numberuk[1] = chars[random(sizeof chars)];
	numberuk[2] = random('9' - '0') + '0';
	numberuk[3] = random('9' - '0') + '0';
	numberuk[4] = random('9' - '0') + '0';
	numberuk[5] = random('9' - '0') + '0';
	if(numberuk[2] == numberuk[3] && numberuk[3] == numberuk[4] && numberuk[4] == numberuk[5] && numberuk[5] == '0')
		numberuk[5] = random('9' - '0') + '1';
	numberuk[6] = chars[random(sizeof chars)];
	numberuk[7] = chars[random(sizeof chars)];
	format(ranomnomber[playerid], sizeof ranomnomber[], "%c%c%c%c", numberuk[2], numberuk[3], numberuk[4], numberuk[5]);
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%c%c%c%c",  numberuk[0], numberuk[1], numberuk[6], numberuk[7]);
	return numberuk;
}
stock pow(dig, deg)
{
	new res = dig;
	if(deg == 0) return 1;
	for(new i=1;i<deg;i++) res *= dig;
	return res;
}
stock GetVehicleNumber(vehicleid)
{
	return g_vehicle_data[vehicleid][V_NUMBER];
}  
stock LoadPlayerCarsShop(playerid)
{
	loadcars[playerid] = 0;
	loadcarsmax[playerid] = 10;
	loadcarsmax_2[playerid] = 10;
	loadtypecars[playerid] = 0;
	if(GetPVarInt(playerid, "STONKScar") == 1) loadcarsmax[playerid] = 7, loadcarsmax_2[playerid] = 7, loadtypecars[playerid] = 3;
	else if(GetPVarInt(playerid, "sredcar") == 1) loadcarsmax[playerid] = 1, loadcarsmax_2[playerid] = 1, loadtypecars[playerid] = 2;
	else if(GetPVarInt(playerid, "gruzcar") == 1) loadcarsmax[playerid] = 11, loadcarsmax_2[playerid] = 11, loadtypecars[playerid] = 8;
	else if(GetPVarInt(playerid, "aviacar") == 1) loadcarsmax[playerid] = 3, loadcarsmax_2[playerid] = 3, loadtypecars[playerid] = 5;
	else if(GetPVarInt(playerid, "katercar") == 1) loadcarsmax[playerid] = 8, loadcarsmax_2[playerid] = 8, loadtypecars[playerid] = 6;
	else if(GetPVarInt(playerid, "motocar") == 1) loadcarsmax[playerid] = 10, loadcarsmax_2[playerid] = 10, loadtypecars[playerid] = 4;
	else if(GetPVarInt(playerid, "homecar") == 1) loadcarsmax[playerid] = 3, loadcarsmax_2[playerid] = 3, loadtypecars[playerid] = 9;
	else loadcarsmax[playerid] = 1, loadcarsmax_2[playerid] = 1, loadtypecars[playerid] = 1;
	STRING_GLOBAL = "";
	new query[148];
	for(new i; i < sizeof g_load_car_shop; i++)
	{
		if(loadcars[playerid] <= loadcarsmax[playerid])
		{
			if(g_load_car_shop[i][CAR_CLASS_TYPE] == loadtypecars[playerid])
			{
				format(query, sizeof query, "[%d,\"%s\",%d,%d,%d,%d,%d,%d,%f,%d,%d,%d],", 
				g_load_car_shop[i][CAR_ID],
				g_load_car_shop[i][CAR_NAME],
				g_load_car_shop[i][CAR_PRICE],
				g_load_car_shop[i][CAR_RENT_PRICE],
				g_load_car_shop[i][CAR_FUEL_TYPE],
				g_load_car_shop[i][CAR_CLASS_TYPE],
				g_load_car_shop[i][CAR_MAX_SEATS],
				g_load_car_shop[i][CAR_LOTTERY_CHANGE],
				g_load_car_shop[i][CAR_FUEL_MAX],
				g_load_car_shop[i][CAR_CONTRY_TYPE],
				g_load_car_shop[i][CAR_BRAND_TYPE],
				g_load_car_shop[i][CAR_YEAR_ISSUE]);
				strcat(STRING_GLOBAL, query);
				if(loadcars[playerid] == loadcarsmax_2[playerid])
				{
					new str_len;
					str_len = strlen(STRING_GLOBAL);
					strdel(STRING_GLOBAL, str_len - 1, str_len);
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d,[%s]]", loadtypecars[playerid], STRING_GLOBAL);
					BitStream_2(playerid, s_CefInterface, t_CefShow, "CarsShop", STRING_GLOBAL);
					loadcarsmax[playerid] = loadcarsmax[playerid] + loadcarsmax_2[playerid];
					SetPVarInt(playerid, "LastCarsShop", i);
					STRING_GLOBAL[0] = EOS;
					loadcars[playerid]++;
					return 1;
				}
				loadcars[playerid]++;
			}
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CarsShop').addCars('[]')");
		}
	}
	return 1;
}
stock DopLoadPlayerCarsShop(playerid)
{
	STRING_GLOBAL[0] = EOS;
	if(loadcars[playerid] != -1)
	{
		STRING_GLOBAL = "";
		new query[148];
		for(new i = GetPVarInt(playerid, "LastCarsShop") + 1; i < sizeof g_load_car_shop; i++)
		{
			if(loadcars[playerid] <= loadcarsmax[playerid])
			{
				if(g_load_car_shop[i][CAR_CLASS_TYPE] == loadtypecars[playerid])
				{
					format(query, sizeof query, "[%d,\"%s\",%d,%d,%d,%d,%d,%d,%f,%d,%d,%d],", 
					g_load_car_shop[i][CAR_ID],
					g_load_car_shop[i][CAR_NAME],
					g_load_car_shop[i][CAR_PRICE],
					g_load_car_shop[i][CAR_RENT_PRICE],
					g_load_car_shop[i][CAR_FUEL_TYPE],
					g_load_car_shop[i][CAR_CLASS_TYPE],
					g_load_car_shop[i][CAR_MAX_SEATS],
					g_load_car_shop[i][CAR_LOTTERY_CHANGE],
					g_load_car_shop[i][CAR_FUEL_MAX],
					g_load_car_shop[i][CAR_CONTRY_TYPE],
					g_load_car_shop[i][CAR_BRAND_TYPE],
					g_load_car_shop[i][CAR_YEAR_ISSUE]);
					strcat(STRING_GLOBAL, query);
					if(loadcars[playerid] > loadcarsmax_2[playerid])
					{
						if(loadcars[playerid] == loadcarsmax[playerid])
						{
							new str_len;
							str_len = strlen(STRING_GLOBAL);
							strdel(STRING_GLOBAL, str_len - 1, str_len);
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CarsShop').addCars('[%s]')", STRING_GLOBAL);
							BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
							loadcarsmax[playerid] = loadcarsmax[playerid] + loadcarsmax_2[playerid];
							STRING_GLOBAL = "";
						}
					}
					loadcars[playerid]++;
				}
			}
		}
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CarsShop').addCars('[]')");
	}
	return 1;
}
public: OnPlayerShowroomSelectColor(playerid, color)
{
	ChangeVehicleColor(GetPlayerData(playerid, P_BUY_CAR), color, color);
	color_veh[playerid] = color;
}
public: OnPlayerShowroomMenu(playerid, type, current, vehid)
{
	DopLoadPlayerCarsShop(playerid), loadcars[playerid] = -1;
	if(type == 1)
	{
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), GetVehicleInfo(vehid, VI_PRICE))) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid)) return GameText(playerid, "Все слоты для транспорта заняты", 3000, 0);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CarsShop').result(1, 1)");
	}
	if(type == 3)
	{
		if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return -1;
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
		TogglePlayerControllable(playerid, true);
		BitStream_1 (playerid, s_CefInterface, t_CefHide, "CarsShop");
		color_veh[playerid] = 0;
		if(GetPVarInt(playerid, "sredcar") == 1) SetPlayerInBiz(playerid, GetPlayerInBiz(playerid));
		else SetPlayerInBiz(playerid, -1);
		if(GetPVarInt(playerid, "sredcar") == 1) SetPlayerPosEx(playerid, -1996.4236,-1301.0692,1034.9375,18.1966, 4, 4), DeletePVar(playerid, "sredcar");
		else if(GetPVarInt(playerid, "STONKScar") == 1) SetPlayerPosEx(playerid, 1864.2574,2825.5852,12.0000,298.1628, 0, 0), DeletePVar(playerid, "STONKScar");
		else if(GetPVarInt(playerid, "gruzcar") == 1) SetPlayerPosEx(playerid, 1040.7661,-1895.5298,34.3527,51.5618, 0, 0), DeletePVar(playerid, "gruzcar");
		else if(GetPVarInt(playerid, "aviacar") == 1) SetPlayerPosEx(playerid, -42.5926,922.9457,12.0000,154.8150, 0, 0), DeletePVar(playerid, "aviacar");
		else if(GetPVarInt(playerid, "katercar") == 1) SetPlayerPosEx(playerid, 2641.8796,-3431.8113,3.2069,11.7120, 0, 0), DeletePVar(playerid, "katercar");
		else if(GetPVarInt(playerid, "motocar") == 1) SetPlayerPosEx(playerid, -2243.3259,266.2355,24.5337,1.9492, 0, 0), DeletePVar(playerid, "motocar");
		else if(GetPVarInt(playerid, "homecar") == 1) SetPlayerPosEx(playerid, -2401.2058,189.0401,21.1746,319.5407, 0, 0), DeletePVar(playerid, "homecar");
		else SetPlayerPosEx(playerid, 2597.0801,-629.3310,12.0825,180.0100, 0, 0);
	}
	if(type == 6)
	{
		new car_price = GetVehicleInfo(vehid, VI_PRICE);
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), car_price)) return SendClientMessage(playerid, 0x3399FFFF, "У вас недостаточно средств");
		new query[220],Cache: result;
		if(GetPVarInt(playerid, "arendacar_buy") == 1)
		{
			GivePlayerMoneyEx(playerid, -car_price, "Покупка машины", true);
			new businessids = GetPVarInt(playerid, "ownablebiz_id");
			new mesto = GetBusinessCars(businessids);
			new idm = GetFreeRentCarID();
			new idx = idm;
			new vehicleid;
			SetRentCarData(idm, R_MODEL_ID, 	vehid);
			SetRentCarData(idm, R_RENT_BIZ, 	businessids);
			SetRentCarData(idm, R_COLOR_1, 		color_veh[playerid]);
			SetRentCarData(idm, R_COLOR_2, 		color_veh[playerid]);
			SetRentCarData(idm, R_IZNOS,		0.0);
			SetRentCarData(idm, R_MASLO, 		0.0);
			SetRentCarData(idm, R_KOLESO_1, 		0.0);
			SetRentCarData(idm, R_KOLESO_2, 		0.0);
			SetRentCarData(idm, R_KOLESO_3, 		0.0);
			SetRentCarData(idm, R_KOLESO_4, 		0.0);
			SetRentCarData(idm, R_PRICE, 		11111);
			SetRentCarData(idm, R_MESTO, 		mesto);
			SetRentCarData(idm, R_CREATE, 		gettime());
			SetRentCarData(idm, R_RENT_OWNER, 		-1);
			if(GetRentCarData(idm, R_RENT_BIZ) == 56)
			{
				for(new i; i < 8; i++)
				{
					if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[0][i][0],Rent_Mesto[0][i][1],Rent_Mesto[0][i][2],Rent_Mesto[0][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
				}
			}
			if(GetRentCarData(idm, R_RENT_BIZ) == 57)
			{
				for(new i; i < 8; i++)
				{
					if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[1][i][0],Rent_Mesto[1][i][1],Rent_Mesto[1][i][2],Rent_Mesto[1][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
				}
			}
			if(GetRentCarData(idm, R_RENT_BIZ) == 58)
			{
				for(new i; i < 8; i++)
				{
					if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[2][i][0],Rent_Mesto[2][i][1],Rent_Mesto[2][i][2],Rent_Mesto[2][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
				}
			}
			SetVehicleVirtualWorld(vehicleid, GetRentCarData(idm, R_RENT_BIZ));
			SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);
			SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
			format
			(
				query, sizeof query,
				"INSERT INTO arenda_cars \
				(owner_id,model_id,color_1,color_2,create_time, world,mesto,vehicleid) \
				VALUES \
				('%d','%d','%d','%d','%d', '%d','%d','%d')",
				businessids,
				vehid,
				color_veh[playerid],
				color_veh[playerid],
				gettime(),
				businessids,
				mesto,
				vehicleid
			);
			mysql_query(mysql, query, true);
			new fmt_text[144];
			mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM arenda_cars WHERE vehicleid='%d'", vehicleid);
			result = mysql_query(mysql, fmt_text, true);
			SetRentCarData(idm, R_SQL_ID, 		cache_get_field_content_int(0, "id"));
			SetPVarInt(playerid, "arendacar_buy", 0);
			cache_delete(result);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "pos_x"), GetPVarFloat(playerid, "pos_y"), GetPVarFloat(playerid, "pos_z"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "player_world"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "player_int"));
			DeletePVar(playerid, "sredcar");
			DeletePVar(playerid, "STONKScar");
			DeletePVar(playerid, "gruzcar");
			DeletePVar(playerid, "motocar");
			DeletePVar(playerid, "aviacar");
			DeletePVar(playerid, "katercar");
			DeletePVar(playerid, "homecar");
			if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return -1;
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
			TogglePlayerControllable(playerid, true);
			BitStream_1(playerid, s_CefInterface, t_CefHide, "CarsShop");
			color_veh[playerid] = 0;
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 0)");
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		new RandomMesto = RandomEx(0,10);
		if(GetPVarInt(playerid, "sredcar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[3][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[3][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[3][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[3][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "STONKScar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[1][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[1][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[1][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[1][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "gruzcar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[6][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[6][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[6][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[6][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "aviacar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[8][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[8][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[8][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[8][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "katercar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[9][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[9][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[9][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[9][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "motocar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[0][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[0][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[0][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[0][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "homecar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[7][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[7][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[7][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[7][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else
		{
			new Float: pos_x = cars_pos_after_purchase[2][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[2][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[2][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[2][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		GivePlayerMoneyEx(playerid, -car_price, "{FFAF00}Покупка машины", true);
		SendClientMessage(playerid, 0x66CC00FF, "{FFAF00}Поздравляем с покупкой нового транспорта!");
		SendClientMessage(playerid, 0x66CC00FF, "{FFAF00}Напишите {FFFFFF}/car {FFAF00}чтобы загрузить авто");
		SendClientMessage(playerid, 0x3399FFFF, "{FFAF00}Документы на транспорт будут оформлены в течении нескольких минут");
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
		TogglePlayerControllable(playerid, true);
		if(GetPVarInt(playerid, "sredcar") == 1) SetPlayerPosEx(playerid, -1996.4236,-1301.0692,1034.9375,18.1966, 4, 4);
		else if(GetPVarInt(playerid, "STONKScar") == 1) SetPlayerPosEx(playerid, 1864.2574,2825.5852,12.0000,298.1628, 0, 0);
		else if(GetPVarInt(playerid, "gruzcar") == 1) SetPlayerPosEx(playerid, 1040.7661,-1895.5298,34.3527,51.5618, 0, 0);
		else if(GetPVarInt(playerid, "aviacar") == 1) SetPlayerPosEx(playerid, -42.5926,922.9457,12.0000,154.8150, 0, 0);
		else if(GetPVarInt(playerid, "katercar") == 1) SetPlayerPosEx(playerid, 2690.7903, -3408.1589, -0.2678, 189.6871, 0, 0);
		else if(GetPVarInt(playerid, "motocar") == 1) SetPlayerPosEx(playerid, -2243.3259,266.2355,24.5337,1.9492, 0, 0);
		else if(GetPVarInt(playerid, "homecar") == 1) SetPlayerPosEx(playerid, -2401.2058,189.0401,21.1746,319.5407, 0, 0);
		else SetPlayerPosEx(playerid, 2597.0801,-629.3310,12.0825,180.0100, 0, 0);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "CarsShop");
		color_veh[playerid] = 0;
		new businessid = GetPlayerInBiz(playerid);
		if(GetPVarInt(playerid, "sredcar") == 1) SetPlayerInBiz(playerid, GetPlayerInBiz(playerid));
		else SetPlayerInBiz(playerid, -1);
		DeletePVar(playerid, "sredcar");
		DeletePVar(playerid, "STONKScar");
		DeletePVar(playerid, "gruzcar");
		DeletePVar(playerid, "motocar");
		DeletePVar(playerid, "aviacar");
		DeletePVar(playerid, "katercar");
		DeletePVar(playerid, "homecar");
		if(businessid != -1)
		{
			AddBusinessProfit(playerid, businessid, car_price * 20 / 100, 0);
		}
	}
	if(type == 5)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		if(GetPVarInt(playerid, "sredcar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2000.7031,-1296.6309,1034.5972,170.2028, color_veh[playerid], color_veh[playerid], 4));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
		}
		else if(GetPVarInt(playerid, "STONKScar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 1847.1146,2819.2698,20.5752,321.0539, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "gruzcar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 1027.6141,-1892.0331,34.7166,298.6746, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "aviacar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -31.9133,936.1386,21.8680,160.1091, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "katercar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid,  2690.7903, -3408.1589, -0.2678, 189.6871, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "motocar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2246.7114,277.0202,23.9346,262.9701, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "homecar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2398.1365,192.3909,21.4967,260.1879, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 262.2371,2431.2175,1000.7915,326.5478, color_veh[playerid], color_veh[playerid], 5));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
		}
	}
	if(type == 4)
	{
		//вниз
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		if(GetPVarInt(playerid, "sredcar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2000.7031,-1296.6309,1034.5972,170.2028, color_veh[playerid], color_veh[playerid], 4));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
		}
		else if(GetPVarInt(playerid, "STONKScar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 1847.1146,2819.2698,20.5752,321.0539, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "gruzcar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 1027.6141,-1892.0331,34.7166,298.6746, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "aviacar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -31.9133,936.1386,21.8680,160.1091, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "katercar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid,  2690.7903, -3408.1589, -0.2678, 189.6871, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "motocar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2246.7114,277.0202,23.9346,262.9701, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "homecar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2398.1365,192.3909,21.4967,260.1879, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 262.2371,2431.2175,1000.7915,326.5478, color_veh[playerid], color_veh[playerid], 5));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
		}
	}
	return true;
}
public:GPS_OnPlayerGetDirection(playerid, Float:x, Float:y)
{
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "X: %f, Y: %f", x, y);
	SCM(playerid, -1, STRING_GLOBAL);
	printf("%f, %f", x, y);
	EnablePlayerGPS
	(
		playerid,
		56,
		x,
		y,
		10.0,
		"Место отмечено на карте"
	);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('GPS')");
}
stock GameText(playerid, const string[], time, style)
{
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('GameText').add('[%d,\"%s\",%d,0,-1,1]')", style, string, time);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
 	BitStream_1(playerid, s_CefInterface, t_CefShow, "GameText");
 	return 1;
}
stock GetPlayerOwnableGarage(playerid)
{
	new count,
		query[70],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}
stock GetPlayerOwnableHouse(playerid)
{
	new count,
		query[70],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}
stock GetPlayerOwnableBiz(playerid)
{
	new count,
		query[70],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}
stock GetPlayerBusiness(playerid)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return businessid;
		}
	}
	return -1;
}

public: OnChangeSpectatePlayer(playerid, item, none)
{
    new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);


	switch(item)
	{
	    case 0:
		{
			StartSpectate(playerid, spec_player-1);
			ShowSpecmenuTD(playerid);
		}
		case 1:
		{
			StartSpectate(playerid, spec_player+1);
			ShowSpecmenuTD(playerid);
		}
	}
}

public:OnSelectSpectateMenu(playerid, item)
{
	new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	switch(item)
	{
	    case 0:
	    {
			StartSpectate(playerid, spec_player);
			ShowSpecmenuTD(playerid);
	    }
		case 2:
		{
		    if(GetPlayerAdminEx(playerid) < 2) return 1;
		    JailPlayer(spec_player, 10);
	    	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Администратор %s посадил в тюрьму %s[acc:%d] на %d мин. Причина: %s",
			GetPlayerNameEx(playerid), GetPlayerNameEx(spec_player), GetPlayerAccountID(spec_player), 10, "Бот");
			SendClientMessageToAll(0xFF5533FF, STRING_GLOBAL);
		}
		case 3:
		{
		    if(GetPlayerAdminEx(playerid) < 2) return 1;
 			new fmt_msg[128];
			format(fmt_msg, sizeof fmt_msg, "Администратор %s поставил затычку игроку %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(spec_player), 60);
			SendClientMessageToAll(0xFF5533FF, fmt_msg);
			SetPlayerData(spec_player, P_MUTE, 10 * 10);
			UpdatePlayerDatabaseInt(spec_player, "mute", 10 * 10);
		}
		case 4:
		{
		    if(GetPlayerAdminEx(playerid) < 1) return 1;
			new Float: x, Float: y, Float: z, fmt_text[85];
			GetPlayerPos(spec_player, x, y, z);

			SetPlayerPos(spec_player, x, y, z + 5);
			PlayerPlaySound(spec_player, 1130, 0.0, 0.0, 0.0);
			format(fmt_text, sizeof fmt_text, "Администратор %s подбросил Вас", GetPlayerNameEx(playerid));
			SendClientMessage(spec_player, -1, fmt_text);
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{F81414}Администратор %s[%d] использовал /slap на игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(spec_player), spec_player);
			SendMessageToAdmins(STRING_GLOBAL, -1);

		}
		case 5:
		{
			new fmt_text[128];
		    format(fmt_text, sizeof fmt_text, "[SP] %s[%d]  |  PING %d  |  IP  %s  |  R-IP  %s",
			GetPlayerNameEx(spec_player), spec_player, GetPlayerPing(spec_player), GetPlayerIpEx(spec_player), GetPlayerData(spec_player, P_REG_IP));
			SendClientMessage(playerid, 0x00CC66FF, fmt_text);
		}
		case 6:
		{
			pc_cmd_spoff(playerid);
		}
	}
	return 1;
}

public: ClothingStore_OnPlayerEvent(playerid, event, item)
{
    new bizid = GetPlayerInBiz(playerid);
    if (bizid == -1) return 1;
    new sex = GetPlayerSex(playerid),
        item_ = (p_business_clothing_page[playerid] * 8) + item;
	if(event == 0)
	{
		new str[512 + 1];
		if(item == 1)
		{
			if(p_business_clothing_page[playerid] >= floatround(g_business_clothing_quantity[sex]) / 8) return 1;
			new str_len,
				page = ++p_business_clothing_page[playerid];
			strcat(str, "interface('ClothingStore').loadItems('[");
			for(new i = (page * 8); i < (g_business_clothing_quantity[sex] < ((page + 1) * 8) ? (g_business_clothing_quantity[sex]) : ((page + 1) * 8)); i++) 
			{
				format(str, sizeof(str), "%s[%d,%d],", str, g_business_clothing_skins[sex][i][g_cost], g_business_clothing_skins[sex][i][g_model]);
			}
			str_len = strlen(str);
			strdel(str, str_len - 1, str_len);
			strcat(str, "]')");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, str);
			format(str, sizeof(str), "interface('ClothingStore').setPage(%i, 22)", page + 1);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, str);
		}
		if(item == -1)
		{
			if(p_business_clothing_page[playerid] < 1) return 1;
			new str_len,
				page = --p_business_clothing_page[playerid];
			strcat(str, "interface('ClothingStore').loadItems('[");
			for(new i = (page * 8); i < (g_business_clothing_quantity[sex] < ((page + 1) * 8) ? (g_business_clothing_quantity[sex]) : ((page + 1) * 8)); i++) 
			{
				format(str, sizeof(str), "%s[%d,%d],", str, g_business_clothing_skins[sex][i][g_cost], g_business_clothing_skins[sex][i][g_model]);
			}
			str_len = strlen(str);
			strdel(str, str_len - 1, str_len);
			strcat(str, "]')");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, str);
			format(str, sizeof(str), "interface('ClothingStore').setPage(%i, 22)", page + 1);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, str);
		}
	}
	if(event == 1)
	{
		SetPlayerData(playerid, P_SELECT_SKIN, item_);
		SetPlayerSkin(playerid, g_business_clothing_skins[sex][item_][g_model]);
	}
	if(event == 2)
	{
		if(GetPlayerData(playerid, P_SELECT_SKIN) == -1) return 1;
		Dialog
		(
			playerid, DIALOG_BIZ_CLOTHING_BUY, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Магазин одежды",
			"{FFFFFF}Вы действительно хотите приобрести этот набор одежды?",
			"Да", "Нет"
		);
		return true;
	}
	if(event == 4)
	{
		BitStream_1(playerid, s_CefInterface, t_CefHide, "ClothingStore");
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);
		SetPlayerVirtualWorld(playerid, bizid + 255);
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
		SetPlayerData(playerid, P_SELECT_SKIN, -1);
		p_business_clothing_page[playerid] = 0;
	}
    return 1;
}
stock ShowPlayerSelectPanelSkin(playerid)
{
    BitStream_2(playerid, s_CefInterface, t_CefShow, "ClothingStore", "[22, [[3000,14],[3000,20],[3000,21],[3000,22],[3000,24],[3000,25],[3000,52],[3000,15327]]]");
    SetPlayerSkin(playerid, 14);
}
stock ShowHomeInfoPick(playerid, houseid)
{
	new fmt_text[248];
	format(fmt_text, sizeof fmt_text, "[%d, \"Дом №%d\", \"%s\", \"%s\", %d, %d, %d]", GetHouseData(houseid, H_LOCK_STATUS) ? 0 : 1, houseid, GetHouseData(houseid, H_OWNER_NAME), GetHouseData(houseid, H_NAME),
	GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS), GetHouseData(houseid, H_RENT_PRICE), GetHouseData(houseid, H_PRICE));
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Appartament", fmt_text);
	SetPlayerUseListitem(playerid, houseid);
}
stock ShowBussinesInfo(playerid, action_id)
{
	new i = action_id;
	new fmt_text[248];
	format(fmt_text, sizeof(fmt_text), "[[1, \"Войти в %s [№ %d]\"]]", GetBusinessData(i, B_NAME), GetBusinessData(i, B_SQL_ID));
	BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", fmt_text);
}
public: HouseInfoBuy(playerid, houseid)
{
	if(0 <= houseid <= g_house_loaded-1)
	{
		if(GetPlayerInHouse(playerid) == -1)
		{
			SetPlayerUseListitem(playerid, houseid);
			new fmt_str[60];
			string_dialog[0] = EOS;
			new type = GetHouseData(houseid, H_TYPE);
			if(IsHouseOwned(houseid))
			{
				if(!GetHouseData(houseid, H_EVICTION))
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}Владелец:\t\t\t{33CCFF}%s\n\n", GetHouseData(houseid, H_OWNER_NAME));
					strcat(string_dialog, fmt_str);
				}
				else
				{
					strcat(string_dialog, "{FFFFFF}Владелец:\t\t\t{33CCFF}Выселен\n\n");
				}
			}
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип:\t\t\t\t%s\n", GetHouseData(houseid, H_NAME));
			strcat(string_dialog, fmt_str);
			if(GetHouseData(houseid, H_ENTRACE) != -1)
			{
				format(fmt_str, sizeof fmt_str, "Номер квартиры:\t\t%d\n", GetHouseData(houseid, H_FLAT_ID) + 1);
				strcat(string_dialog, fmt_str);
				if(!IsHouseOwned(houseid)) strcat(string_dialog, "\n");
				format(fmt_str, sizeof fmt_str, "Номер подъезда:\t\t%d\n", GetHouseData(houseid, H_ENTRACE) + 1);
				strcat(string_dialog, fmt_str);
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "Номер дома:\t\t\t%d\n", houseid);
				strcat(string_dialog, fmt_str);
				if(!IsHouseOwned(houseid)) strcat(string_dialog, "\n");
			}
			format(fmt_str, sizeof fmt_str, "Количество комнат:\t\t%d\n", GetHouseTypeInfo(type, HT_ROOMS));
			strcat(string_dialog, fmt_str);
			format(fmt_str, sizeof fmt_str, "Стоимость:\t\t\t%s руб\n", formatInt(GetHouseData(houseid, H_PRICE)));
			strcat(string_dialog, fmt_str);
			format(fmt_str, sizeof fmt_str, "Ежедневная квартплата:\t%s руб", formatInt(GetHouseData(houseid, H_RENT_PRICE)));
			strcat(string_dialog, fmt_str);
			if(IsHouseOwned(houseid))
			{
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 3)
				{
					format(fmt_str, sizeof fmt_str, " {33CC99}(%d руб)", GetHouseData(houseid, H_RENT_PRICE) / 2);
					strcat(string_dialog, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "{FF9900}Дом занят", string_dialog, "Войти", "Отмена");
			}
			else Dialog(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "{33CC00}Дом свободен", string_dialog, "Купить", "Отмена");
		}
	}
}
forward Metro_Ostanovka(playerid);
public Metro_Ostanovka(playerid)
{
	metro_zarplata[playerid] += 2000000;
	new fmt_td_text[300];
	format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '2-120'");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
	format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').money = %d",metro_zarplata[playerid]);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
	format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [1,1,1,1]");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_td_text);
	KillTimer(metro_taimer[playerid][0]);
	return 1;
}
stock OnFirstPerson(playerid)
{
	switch_fp[playerid] = true;
 	FirstPerson[playerid] = CreateObject(19300, 0, 0, 0, 0, 0, 0);
 	ChangeView(playerid, 0, 1);
}
stock OnFirstPersonMetro(playerid)
{
	switch_fp[playerid] = true;
 	FirstPerson[playerid] = CreateObject(19300, 0, 0, 0, 0, 0, 0);
 	ChangeView(playerid, 0, 4);
}
stock OffFirstPerson(playerid)
{
	switch_fp[playerid] = false, SetCameraBehindPlayer(playerid);
}
stock ChangeView(playerid, oldstate, newstate)
{
    new Float: X[3], Float: Y[3], Float: Z[3];
    if(GetPlayerVehicleID(playerid) > 0)
    {
        GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), 1, X[0], Y[0], Z[0]);
        GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), 2, X[1], Y[1], Z[1]);
        GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), 3, X[2], Y[2], Z[2]);
    }
    if(oldstate == newstate) AttachCameraToObject(playerid, FirstPerson[playerid]);
    switch(newstate)
    {
        case 1: AttachObjectToPlayer(FirstPerson[playerid], playerid, 0.0, 0.13, 0.65, 0, 0, 0), AttachCameraToObject(playerid, FirstPerson[playerid]);
        case 2, 3:
        {
            switch(GetPlayerVehicleSeat(playerid))
            {
                case 0: { X[1] -= (X[0] / 2.43), Y[1] -= 0.1, Z[1] += 0.6; AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[1], Y[1], Z[1], 0, 0, 0); }
                case 1: { X[1] += 0.0, Y[1] -= 0.1, Z[1] += 0.55; AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[1], Y[1], Z[1], 0, 0, 0); }
                case 2: { X[2] -= (X[0] / 2.43), Y[2] += 0.0, Z[2] += 0.6; AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[2], Y[2], Z[2], 0, 0, 0); }
                case 3: { X[2] += 0.0, Y[2] += 0.0, Z[2] += 0.55; AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[2], Y[2], Z[2], 0, 0, 0); }
                default:
                {
                    switch(GetPlayerVehicleSeat(playerid))
                    {
                        case 0: AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[1], Y[1] + 0.45, Z[1] + 0.6, 0, 0, 0);
                        case 1: AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[2], Y[2] + 0.4, Z[2] + 0.5, 0, 0, 0);
                    }
                }
            }
            AttachCameraToObject(playerid, FirstPerson[playerid]);
        }
        case 4: // для машиниста метрополитена
        {
       		AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), -0.01761, 8.35003, 1.61000,   0.00000, 0.00000, 0.00000);
       		AttachCameraToObject(playerid, FirstPerson[playerid]);
        }
    }
    return 0;
}
public: OnPlayerClientSideKey(playerid, key)
{
	EliteRace_OnClientSideKey(playerid,key);
	if(key == 27)
	{
		if(gPlayerTuningMenu[playerid] == 1)
		{
			new sto_exit_1 = GetPVarInt(playerid, "sto_id_exit_1");
			new sto_exit_2 = GetPVarInt(playerid, "sto_id_exit_2");
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerOwnableCarLast(playerid);
				TogglePlayerControllable(playerid, true);
				SetCameraBehindPlayer(playerid);
				SetVehiclePos(vehicleid, g_exit_sto_garage[sto_exit_1][sto_exit_2][0], g_exit_sto_garage[sto_exit_1][sto_exit_2][1], g_exit_sto_garage[sto_exit_1][sto_exit_2][2]);
				SetVehicleZAngle(vehicleid, g_exit_sto_garage[sto_exit_1][sto_exit_2][3]);
				UpdateStoGarage(sto_exit_1, sto_exit_2, 0);
				SetPVarInt(playerid, "sto_id_exit_1", 0);
				SetPVarInt(playerid, "sto_id_exit_2", 0);
				SetPlayerInterior(playerid, 0);
				gPlayerTuningMenu[playerid] = 0;
				SetVehicleVirtualWorld(vehicleid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				LinkVehicleToInterior(vehicleid, 0);
			}
			BitStream_1(playerid, s_CefInterface, t_CefHide, "TuningMenu");
		}
	}
	if(key == 18) 
	{
		if(g_player_deteling_id[playerid] == 1) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 1)"), g_player_deteling_id[playerid] = 2;
		else if(g_player_deteling_id[playerid] == 2) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 0)"), g_player_deteling_id[playerid] = 1;
	}
	if(RouletteTable[playerid] != 0)
    {
        new ci = PositionChip[playerid];
		if(ci != -1 && RouletteStatus[playerid] == 0)
		{
			if(key == 87) // вверх
			{   
				if(ci != 0 && ci != 3 && ci != 6 && ci != 9 && ci != 12 && ci != 15 && ci != 18 && ci != 21 && ci != 24 && ci != 27 && ci != 30 && ci != 33 && ci != 36 && ci != 39)
				{
					if(ci == 40) PositionChip[playerid] = 1;
					else if(ci == 41) PositionChip[playerid] = 13;
					else if(ci == 42) PositionChip[playerid] = 25;
					else if(ci == 45 || ci == 47) PositionChip[playerid] = 40;
					else if(ci == 43 || ci == 44) PositionChip[playerid] = 41;
					else if(ci == 48 || ci == 46) PositionChip[playerid] = 42;
					else PositionChip[playerid] = PositionChip[playerid] + 1;
				}
				MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);
			} 
			if(key == 65) // налево
			{
				if(ci != 0 && ci != 40 && ci != 45)
				{
					if(ci == 42 || ci == 41 || ci == 44) PositionChip[playerid] = PositionChip[playerid] - 1;
					else if(ci == 46) PositionChip[playerid] = 48;
					else if(ci == 48) PositionChip[playerid] = 44;
					else if(ci == 43) PositionChip[playerid] = 47;
					else if(ci == 47) PositionChip[playerid] = 45;
					else if(ci == 2 || ci == 1) PositionChip[playerid] = 0;
					else PositionChip[playerid] = PositionChip[playerid] - 3;
				}
				MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);
			}
			if(key == 68) // направо
			{
				if(ci != 37 && ci != 38 && ci != 39 && ci != 42 && ci != 46)
				{
					if(ci == 40 || ci == 41 || ci == 43) PositionChip[playerid] = PositionChip[playerid] + 1;
					else if(ci == 45) PositionChip[playerid] = 47;
					else if(ci == 47) PositionChip[playerid] = 43;
					else if(ci == 44) PositionChip[playerid] = 48;
					else if(ci == 48) PositionChip[playerid] = 46;
					else if(ci == 0) PositionChip[playerid] = 1;
					else PositionChip[playerid] = PositionChip[playerid] + 3;
				}
				MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);
			} 
			if(key == 83) // вниз
			{
				if(ci != 0 && ci != 37 && ci != 43 && ci != 44 && ci != 45 && ci != 46 && ci != 47 && ci != 48)
				{
					if(ci == 1 || ci == 4 || ci == 7 || ci == 10) PositionChip[playerid] = 40;
					else if(ci == 13 || ci == 16 || ci == 19 || ci == 22) PositionChip[playerid] = 41;
					else if(ci == 25 || ci == 28 || ci == 31 || ci == 34) PositionChip[playerid] = 42;
					else if(ci == 40) PositionChip[playerid] = 45;
					else if(ci == 41) PositionChip[playerid] = 43;
					else if(ci == 42) PositionChip[playerid] = 48;
					else PositionChip[playerid] = PositionChip[playerid] - 1;
				}
				MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);
			}    
		}
		if(key == 13)
		{
			if(PositionChip[playerid] != -1)
			{
				if(RouletteStatus[playerid] == 1)  SCM(playerid, 0xFFA500FF, "Вы уже поставили ставку, ожидайте окончания");
				else BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('CasinoRullet').setBet.show = 1");
			}
		}
		if(key == 18)
		{
			if(RouletteStatus[playerid] == 1) SCM(playerid, 0xFFA500FF, "Вы уже поставили ставку, ожидайте окончания");
			else if(StatusChip[playerid] == 0) LoadRoulette(playerid);
		}
	}
	if(key == 75) OpenCarsKey(playerid);
	if(key == 77) OpenMainMenu(playerid);
	if(key == 79) callcmd::craft(playerid);
	if(key == 80) callcmd::phone(playerid);
	if(key == 90) callcmd::anim(playerid, "");
 	if(key == 67) //C
	{
	    if(GetPVarInt(playerid,"Metro_work") == 1)
		{
			Dialog(playerid, DIALOG_EXIT_METRO, DIALOG_STYLE_MSGBOX, "Работа машиниста", "Вы хотите закончить работу машиниста?", "Да", "Нет");
		}
	}
 	if(GetPVarInt(playerid, "Button") != 0)
	{
		if(GetPVarInt(playerid,"Button") == key)
		{
			new press = RandomEx(1,5);
			new fmt_str[500];
			switch (press)
			{
				case 1:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(1, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
				case 2:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(2, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
				case 3:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(3, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
				case 4:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(4, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
				case 5:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(5, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
			}
			SetPVarInt(playerid, "Button", 0);
		}
		else if(GetPVarInt(playerid,"Button") != key)
		{
			new press2 = RandomEx(1,5);
			new fmt_str[500];
			switch (press2)
			{
				case 1:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(6, 800, %d)", GetPVarInt(playerid, "Ochko"));
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
				}
				case 2:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(7, 800, %d)", GetPVarInt(playerid, "Ochko"));
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
				}
				case 3:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(8, 800, %d)", GetPVarInt(playerid, "Ochko"));
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
				}
				case 4:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(9, 800, %d)", GetPVarInt(playerid, "Ochko"));
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
				}
				case 5:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(10, 800, %d)", GetPVarInt(playerid, "Ochko"));
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
				}
			}
			SetPVarInt(playerid, "Button", 0);
		}
	}
	return 1;
}
stock SetAnimPlayerNew(playerid, category, anim_id)
{
	switch(category)
	{
	    case 1:
	    {
	        switch(anim_id)
	        {
	    		case 1: ApplyAnimation(playerid, "ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
			    case 2: ApplyAnimation(playerid, "ped",				"endchat_03",			4.0, true,  1, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
			    case 3: ApplyAnimation(playerid, "RIOT",			"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
			    case 4: ApplyAnimation(playerid, "GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
			    case 5: ApplyAnimation(playerid, "GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
			    case 6: ApplyAnimation(playerid, "GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
	        }
	    }
	    case 2:
	    {
	        switch(anim_id)
	        {
	        }
	    }
	    case 3:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "BEACH",			"bather",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "ped",				"cower", 				3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 5: ApplyAnimation(playerid, "BLOWJOBZ",			"BJ_COUCH_LOOP_P",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 6: ApplyAnimation(playerid, "CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 7: ApplyAnimation(playerid, "CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 8: ApplyAnimation(playerid, "GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 9: ApplyAnimation(playerid, "BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 10: ApplyAnimation(playerid, "INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 11: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 12: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 13: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 14: ApplyAnimation(playerid, "JST_BUISNESS",		"girl_02",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 15: ApplyAnimation(playerid, "MISC",				"SEAT_LR",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 16: ApplyAnimation(playerid, "ped",				"SEAT_idle",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 17: ApplyAnimation(playerid, "SWAT",				"gnstwall_injurd",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 18: ApplyAnimation(playerid, "SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
	        }
	    }
	    case 4:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
	        }
	    }
	    case 5:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "SHOP",				"ROB_Loop_Threat",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "BSKTBALL",			"BBALL_def_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 5: ApplyAnimation(playerid, "GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 6: ApplyAnimation(playerid, "LOWRIDER",			"RAP_B_Loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 7: ApplyAnimation(playerid, "ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 8: ApplyAnimation(playerid, "ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
	        }
	    }
	    case 6:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "SHOP",				"ROB_Shifty",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 5: ApplyAnimation(playerid, "SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 6: ApplyAnimation(playerid, "BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 7: ApplyAnimation(playerid, "CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 8: ApplyAnimation(playerid, "DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 9: ApplyAnimation(playerid, "GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 10: ApplyAnimation(playerid, "INT_SHOP",			"shop_shelf",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 11: ApplyAnimation(playerid, "KISSING",			"GF_StreetArgue_02",	4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 12: ApplyAnimation(playerid, "MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 13: ApplyAnimation(playerid, "MISC",				"bitchslap",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 14: ApplyAnimation(playerid, "MISC",				"bng_wndw",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 15: ApplyAnimation(playerid, "MISC",				"KAT_Throw_K",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 16: ApplyAnimation(playerid, "ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 17: ApplyAnimation(playerid, "ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 18: ApplyAnimation(playerid, "PAULNMAC",			"Piss_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 19: ApplyAnimation(playerid, "ped",				"IDLE_taxi", 			3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 20: ApplyAnimation(playerid, "POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 21: ApplyAnimation(playerid, "POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 22: ApplyAnimation(playerid, "RIOT",				"RIOT_ANGRY_B",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
	        }
	    }
	    case 7:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
	        }
	    }
	    case 8:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "PARK",				"Tai_Chi_Loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "MISC",				"plyr_shkhead",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
	        }
	    }
	    case 9:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "FOOD",				"EAT_Vomit_P", 			3.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "FOOD",				"EAT_Burger", 			3.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Выключить анимацию\"]]");
	        }
	    }
	}
	return 0;
}
stock Change(playerid, trade_id,type)
{
	switch(type)
	{
		case 1:
		{
			new garage_id = GetPVarInt(playerid, "ownablegarage_id");
			SetGarageData(garage_id, G_OWNER_ID, 	0);
			SetGarageData(garage_id, G_OWNER_ID, 		GetPlayerAccountID(trade_id));
			SetGarageData(garage_id, G_IMPROVEMENTS, 	0);
			format(g_garage[garage_id][G_OWNER_NAME], 21, GetPlayerNameEx(trade_id), 0);
			CallLocalFunction("UpdateGarageLabel", "i", garage_id);
		}
		case 2:
		{
	    	new biz_id = GetPVarInt(playerid, "ownablebiz_id");
			SellBusiness(biz_id, trade_id, 0);
		}
		case 4:
		{
	    	new home_id = GetPlayerData(playerid, P_HOUSE);
			SellHouse(home_id, playerid, 0);
			SetPlayerData(playerid, P_HOUSE, -1);
			SetPlayerData(playerid, P_HOUSE_TYPE, -1);
			SetPlayerData(playerid, P_HOUSE_ROOM, -1);
			SetHouseData(home_id, H_OWNER_ID, 0);
			SetPlayerData(trade_id, P_HOUSE, home_id);
			SetHouseData(home_id, H_OWNER_ID, GetPlayerAccountID(trade_id));
			SetHouseData(home_id, H_IMPROVEMENTS, 0);
			format(g_house[home_id][H_OWNER_NAME], 21, GetPlayerNameEx(trade_id), 0);
			CallLocalFunction("EvictHouseRentersAll", "i", home_id);
		}
		case 5: SCM(playerid, -1, "В разработке...");
		case 6: SCM(playerid, -1, "В разработке...");
		case 7:
		{
			new number_phone = GetPlayerData(playerid, P_PHONE);
			SetPlayerData(playerid, P_PHONE, 0);
			SetPlayerData(trade_id, P_PHONE, number_phone);
		}
		case 8:
		{
			new garden_id = GetPVarInt(playerid, "ownablegarage_id");
			SetGardenData(garden_id, G_OWNER_ID, GetPlayerAccountID(playerid));
		}
	}
	new toner_id = GetPlayerInBiz(playerid);
	new price = 250000;
	new take_prods = 5;
	new query[256];
	if(GetBusinessData(toner_id, B_PRODS) >= take_prods)
	{
		AddBusinessProfit(playerid, toner_id, price, take_prods);
	}
	return true;
}
stock UpdatePlayerDataStr(const playerid, const field[], data[]) mysql_queryf(mysql, "UPDATE `accounts` SET `%e` = '%e' WHERE `id` = '%i' LIMIT 1", false, field, data, GetPlayerData(playerid, P_ACCOUNT_ID));
public: CheckAdmin(playerid, admlevel)
{
	new fifa[256];
	format(fifa, sizeof(fifa), "[Ошибка] У вас нет доступа. Доступно с %d уровня администрирования", admlevel);
	if(GetPlayerAdminEx(playerid) < admlevel) return scm(playerid, COLOR_RED, fifa);
	return 0;
}
public:UpdatePhoneTimer(playerid){
	new hour, minute,
		day, month, year;
	gettime(hour, minute);
	getdate(year, month, day);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').updateTime('[\"%d:%02d\",\"%d %s\",100,0]')",hour,minute, day,GetMonthName(month));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
}
public:Phone_OnOpenAppPhone(playerid, app_id, xz){
	switch(app_id){
		case 3:{
		    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').setLoadedDataApp(3)");
		    STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').loadProducts('[[0,\"Пеперони с зеленью\",700,1800,\"1.svg\",\"Пицца\"],[1,\"Пицца оливия\",800,1750,\"2.svg\",\"Пицца\"],[2,\"Маленький бургер\",300,900,\"6.svg\",\"Бургеры\"],[3,\"Филадельфия\",500,1700,\"3.svg\",\"Суши\"],[4,\"Большой сет\",1200,3000,\"9.svg\",\"Суши\"],[5,\"Шаурма\",400,1500,\"5.svg\",\"Шаурма\"],[6,\"Большая шаурма\",900,2700,\"14.svg\",\"Шаурма\"],[7,\"Наггетсы\",400,1500,\"7.svg\",\"Закуски\"],[8,\"Картошка\",400,1500,\"8.svg\",\"Закуски\"],[9,\"Coca Cola\",200,700,\"10.svg\",\"Напитки\"],[10,\"7 Up\",200,700,\"11.svg\",\"Напитки\"],[11,\"Mirinda\",200,700,\"12.svg\",\"Напитки\"],[12,\"Вафли\",500,1500,\"16.svg\",\"Десерты\"],[13,\"Кексы\",500,1500,\"17.svg\",\"Десерты\"],[14,\"Тирамису\",500,1500,\"18.svg\",\"Десерты\"],\"%s\"]')", GetPlayerNameEx(playerid));
		    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		case 2:{
		    BitStream_1(playerid, s_CefInterface, t_CefShow, "PhoneAppPhoto");
			SetSelfie(playerid, true);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').hidePhone()");
		}
		case 4:{
			callcmd::phonehide(playerid);
			callcmd::gps(playerid);
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 1)");
		}
		case 5:{
		    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').getApp('taxi').setLoadApp()");
		}
		case 6:{
		    new Float: pos_x, Float: pos_y, Float: pos_z;
		    new Float: pos_xs, Float: pos_ys, Float: pos_zs, Float:angl;
		    GetVehiclePos(GetPlayerData(playerid, P_CARSH_CAR), pos_xs,pos_ys,pos_zs);
			GetVehicleZAngle(GetPlayerData(playerid, P_CARSH_CAR), angl);
		    GetPlayerPos(playerid, pos_x, pos_y, pos_z);
		    if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
		    {
		    	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f],[%f,%f,%f]]')", pos_x, pos_y, pos_z,pos_xs, pos_ys, angl);
		    	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		    }
		    else
		    {
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f]]')", pos_x, pos_y, pos_z);
			    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
			}
		}
		case 7:{
			callcmd::phonehide(playerid);
		}
	}
}
public:PhoneCamera_Close(playerid){
    BitStream_1(playerid, s_CefInterface, t_CefHide, "PhoneAppPhoto");
    SetSelfie(playerid, false);
    callcmd::phone(playerid);
}
stock SetSelfie(playerid, bool: status){
	if(status)
	{
        GetPlayerPos(playerid, positionCam[playerid][0], positionCam[playerid][1], positionCam[playerid][2]);
        static Float: n1X, Float: n1Y, Float:PositionCam;
        GetPlayerFacingAngle(playerid, PositionCam);
        n1X = positionCam[playerid][0] + Radiuses * floatcos(180.0, degrees);
        n1Y = positionCam[playerid][1] + Radiuses * floatsin(180.0, degrees);
        SetPlayerCameraPos(playerid, n1X, n1Y, positionCam[playerid][2] + Height);
        SetPlayerCameraLookAt(playerid, positionCam[playerid][0], positionCam[playerid][1], positionCam[playerid][2] + 1);
        SetPlayerFacingAngle(playerid, Reedeg[playerid] - 270.0);
        ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
        BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.setCursorStatus(1, 1)");
	}else{
        TogglePlayerControllable(playerid, 1);
        SetCameraBehindPlayer(playerid);
        ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
        BitStream_1(playerid, s_CefInterface, t_CefHide, "PhoneAppPhoto");
        callcmd::phone(playerid);
	}
}
public: StartDance() 
{
	ApplyAnimation(actorId, "BENCHPRESS", "gym_bp_celebrate", 4.0, true, 0, 1, 1, 0);
}	
public: Delivery_OnPlayerAddCart(playerid, order_id){
	new hour, minute,
	day, month, year;
	gettime(hour, minute);
	getdate(year, month, day);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('delivery').setPage(4)");
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('delivery').paymentData.id = %d", random(900));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('delivery').paymentData.date = '%d %s, %d:%02d'", day, GetMonthName(month), hour, minute);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('delivery').paymentData.items = [%d]", order_id);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;
	SetPVarInt(playerid, "Delivery_Order", order_id);
	return true;
}
public: Phone_ContactAction(playerid, id_switch, id_xz, number){
	switch(id_switch)
	{
		case 1:
		{
			switch(id_xz)
			{
				case -1:
				{
				    switch(number)
					{
				        case 60:{
				            ShowCurrentTime(playerid);
				        }
		       			case 111:
						{
							string_dialog[0] = EOS;
							SetPlayerPhoneUseState(playerid, true);
							format
							(
								string_dialog, sizeof string_dialog,
								"{FFFFFF}Здравствуйте! Вы позвонили оператору.\n"\
								"На счету Вашего мобильного телефона {00FF00}%d руб\n\n"\
								"{FFFFFF}Пополнить его можно в любом банкомате.\n"\
								"Всего доброго!",
								GetPlayerData(playerid, P_PHONE_BALANCE)
							);
							Dialog(playerid, DIALOG_PHONE_CALL_BALANCE, DIALOG_STYLE_MSGBOX, "{FFD83D}Оператор сотовой связи", string_dialog, "Ок", "Отмена");
						}
						case 222:
						{
						   	if(!(TEAM_MAFIA_RUSSIAN <= GetPlayerTeamEx(playerid) <= TEAM_MAFIA_ITALIAN))
								return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");
							BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').setCall('[1,\"Авиапоставки\",2]')");
							SCM(playerid, 0xFFFF00FF, "[Тел] Неизвестный: Какой нужен груз?");
							SCM(playerid, 0xCECECEFF, "Нажмите 1 и кнопку вызова на телефоне чтобы заказать ящики(наркотики и оружие)");
							SCM(playerid, 0xCECECEFF, "Нажмите 2 и кнопку вызова на телефоне чтобы заказать транспорт(автомобили определённого качества и цены)");
                            SetTimerEx("PhoneNumber", 1000, false, "i", playerid);
							SetPVarInt(playerid,"KontraPhone",1);
						}
				    }
				}
			}
		}
		case 2:{
			switch(id_xz){
				case -1:{
				    switch(number){
				        case 60:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
				        }
		       			case 111:
						{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 101:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 90:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 535:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 2:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 3:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
				    }
				}
			}
		}
	}
	return 1;
}
public: Delivery_CreateOrder(playerid, method, status_id, xz){
	new get_order = GetPVarInt(playerid, "Delivery_Order");
	switch(method){
	    case 0:{ // карта
	        if(!GetILPlayerInt(GetPlayerBankMoney(playerid), GetPriceDelivery(get_order))) return SCM(playerid, -1, "У вас недостаточно средств на банковском счете!");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').getApp('delivery').setPage(5)");
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -GetPriceDelivery(get_order)));
			SetTimerEx("Delivery_OrderS", 100000, false, "i", playerid);
		}
	    case 1:{
			if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), GetPriceDelivery(get_order))) return SCM(playerid, -1, "У вас недостаточно средств!");
	        BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').getApp('delivery').setPage(5)");
			//БАБКИ
			GivePlayerMoneyEx(playerid, -GetPriceDelivery(get_order), "покупка еды", true);
			SetTimerEx("Delivery_OrderS", 100000, false, "i", playerid);
	    }
	}
	return true;
}
public:Delivery_OrderS(playerid){
	SCM(playerid, -1, "{ff8c00}[Delivery] {ffffff}Ваш заказ успешно доставлен! Чтобы покушать /eat");
    SetPlayerData(playerid, P_EAT_STATUS, 1);
}
stock GetPriceDelivery(order_id)
{
	new price = 0;
	switch(order_id){
		case 0:{
			price = 700;
		}
		case 1:{
			price = 800;
		}case 2:{
            price = 300;
		}case 3:{
		    price = 500;
		}case 4:{
		    price = 1200;
		}case 5:{
		    price = 400;
		}case 6:{
		    price = 900;
		}case 7:{
		    price = 400;
		}case 8:{
		    price = 400;
		}case 9:{
		    price = 200;
		}case 10:{
		    price = 200;
		}case 11:{
		    price = 200;
		}case 12:{
		    price = 500;
		}case 13:{
		    price = 500;
		}case 14:{
		    price = 500;
		}
	}
	return price;
}
public: Tuning_OnStageMenuEvent(playerid, sss1, sss2, sss3)
{
	if(sss1 == 0)
	{
		if(sss2 == 0) stagestats[playerid] = 1;
		if(sss2 == 1) stagestats[playerid] = 2;
		if(sss2 == 2) stagestats[playerid] = 3;
		new vehicleid = GetPlayerVehicleID(playerid);
		new idx = GetVehicleData(vehicleid, V_ACTION_ID);
		string_dialog[0] = EOS;
		format(string_dialog, sizeof string_dialog,
		"{E4E4DF}Деталь <t>{E4E4DF}Статус <t>{E4E4DF}Стоимость <n><n><n>{F6B243}Комплект STAGE 1 <n>{E4E4DF}Радиатор <t>%s <t>{91D643}3.000.000 руб<n>{E4E4DF}Выхлоп <t>%s <t>{91D643}4.000.000 руб<n><n><n>{946A1F}Комплект STAGE 2 <n>{5C5D5C}Турбина <t>%s <t>{55703F}20.000.000 руб<n><n><n>{946A1F}Комплект STAGE 3 <n>{5C5D5C}Нагнетатель <t>%s <t>{55703F}40.000.000 руб<n>",
		GetOwnableCarData(idx, OC_STAGE1) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
		GetOwnableCarData(idx, OC_STAGE1_1) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
		GetOwnableCarData(idx, OC_STAGE2) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
		GetOwnableCarData(idx, OC_STAGE3) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено")
		);
		Dialog(playerid, DIALOG_STAGE_1, DIALOG_STYLE_LIST, "{F6CC3F}Элементы установки", string_dialog, "Выбор", "Отмена");
	}
	if(sss1 == 1 && sss2 == -1)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "TuningStage");
		SpeedometrShowForPlayer(playerid);
		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		if(stagest[playerid] == 2) SetVehiclePos(vehicleid, 261.4367,703.0173,11.6926), SetVehicleZAngle(vehicleid, 246.6999);
		if(stagest[playerid] == 1) SetVehiclePos(vehicleid, 2328.7151,-2600.8962,21.8158), SetVehicleZAngle(vehicleid, 180.9891);
		stagest[playerid] = 0;
		SetPlayerInterior(playerid, 0); 
		SetVehicleVirtualWorld(vehicleid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		LinkVehicleToInterior(vehicleid, 0);
	}
	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
        if(response == EDIT_RESPONSE_FINAL)
		{
			if(GetPVarInt(playerid, "create_garden") == 1)
	    	{
				new Cache: result,
					idx = g_garden_loaded,price = GetPVarInt(playerid, "price"),rent_price = GetPVarInt(playerid, "rent_price");
				SetGardenData(idx, G_PRICE,	price);
				SetGardenData(idx, G_RENT_PRICE, rent_price);
				SetGardenData(idx, G_POS_X, x);
				SetGardenData(idx, G_POS_Y, y);
				SetGardenData(idx, G_POS_Z, z);
                new fmt_str[244];
				format
				(
					fmt_str, sizeof fmt_str,
					"INSERT INTO gardens \
					(price, rent_price, x, y, z)\
					VALUES ('%d', '%d', '%f', '%f', '%f')",
					price, rent_price,
					GetGardenData(idx, G_POS_X),
					GetGardenData(idx, G_POS_Y),
					GetGardenData(idx, G_POS_Z),
					0
				);
				result = mysql_query(mysql, fmt_str, true);
				SetGardenData(idx, G_SQL_ID, cache_insert_id());
				DestroyObject(EditObjectPlayer[playerid]);
				DestroyDynamicObject(gardenobj[idx]);
				gardenobj[idx] = CreateDynamicObject(16562, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0);
				cache_delete(result);
			    format
				(
					fmt_str, sizeof fmt_str,
					"{FF8800}Огород {ffffff}№%d\n"\
					"{FF8800}Цена: {ffffff}%s {FF8800}руб\n"\
					"Для покупки введите  {ffffff}/buygarden",idx,formatInt(price)
				);
		        gardenlabel[idx] = CreateDynamic3DTextLabel(fmt_str, -1, GetGardenData(idx, G_POS_X),GetGardenData(idx, G_POS_Y),GetGardenData(idx, G_POS_Z)+4, 10.0);
				g_garden_loaded ++;
				STRING_GLOBAL[0] = EOS;
			    format(STRING_GLOBAL, 500, "[A] %s [%d] создал огород №%d", GetPlayerNameEx(playerid), playerid, idx);
				SendMessageToAdmins(STRING_GLOBAL, 0x66CC33FF);
				SetPVarInt(playerid, "create_garden",0);
	    	}
	        if(GetPVarInt(playerid, "Sab"))
	    	{
	    	    new vehicleid = GetPlayerVehicleID(playerid);
	    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
	    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
	      		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
	      		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
	        	AttachDynamicObjectToVehicle(Obj_tune[playerid], vehicleid, Tx-x, Ty-y, z-Tz,   rx, ry, rz-Tr);
	         	if(GetPVarInt(playerid, "Staige_obj") == 13946)
				{
				    SetOwnableCarData(index, OC_SAB, 		1);
					SetOwnableCarData(index, OC_SAB_X, 		Tx-x);
					SetOwnableCarData(index, OC_SAB_Y, 		Ty-y);
					SetOwnableCarData(index, OC_SAB_Z, 		z-Tz);
					SetOwnableCarData(index, OC_SAB_RX, 		rx);
					SetOwnableCarData(index, OC_SAB_RY, 		ry);
					SetOwnableCarData(index, OC_SAB_RZ, 		rz-Tr);
					sab[vehicleid] = Obj_tune[playerid];
					new query[512];
					mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET sab=1 WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, query, false);
	                STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%f,%f,%f,%f,%f,%f", GetOwnableCarData(index, OC_SAB_X), GetOwnableCarData(index, OC_SAB_Y), GetOwnableCarData(index, OC_SAB_Z), GetOwnableCarData(index, OC_SAB_RX), GetOwnableCarData(index, OC_SAB_RY), GetOwnableCarData(index, OC_SAB_RZ));
			        mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET sab_pos='%s' WHERE id=%d", STRING_GLOBAL, GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, query, false);
				}
			}
            if(GetPVarInt(playerid, "stage_edit_1"))
	    	{
	    	    if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 3000000))
	    	    {
		    		new vehicleid = GetPlayerVehicleID(playerid);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		    	    new fmt_text[144];
		    	    SetOwnableCarData(index, OC_STAGE1, 1);
					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) + 10.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) + 20.0);
					UpdateVehicleHandling(playerid, vehicleid);
		    	    SetOwnableCarData(index, OC_STAGE, 1);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage1=1, stage=1 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
		    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
	          		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
	          		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
	            	AttachDynamicObjectToVehicle(EditStage1Player[vehicleid], vehicleid, x-Tx, y-Ty, z-Tz,   rx, ry, rz-Tr);
					SetOwnableCarData(index, OC_ST1X, x-Tx);
					SetOwnableCarData(index, OC_ST1Y, y-Ty);
					SetOwnableCarData(index, OC_ST1Z, z-Tz);
					SetOwnableCarData(index, OC_ST1RX, rx);
					SetOwnableCarData(index, OC_ST1RY, ry);
					SetOwnableCarData(index, OC_ST1RZ, rz-Tr);
	                GivePlayerMoneyEx(playerid, -3000000);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET st1x='%s', st1y='%s', st1z='%s', st1rx='%s', st1ry='%s', st1rz='%s' WHERE id=%d LIMIT 1", x-Tx, y-Ty, z-Tz, rx, ry, rz-Tr, GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
		        	DeletePVar(playerid, "stage_edit_1");
	        	}
				else
				{
				    new vehicleid = GetPlayerVehicleID(playerid);
				    DestroyDynamicObject(EditStage1Player[vehicleid]);
				    return GameText(playerid, "~r~Недостаточно средств!", 4000, 2);
				}
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_1_1"))
	    	{
	    	    if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 4000000))
	    	    {
		    	    new vehicleid = GetPlayerVehicleID(playerid);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		   			new fmt_text[144];
		   			SetOwnableCarData(index, OC_STAGE1_1, 1);
					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) + 15.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) + 30.0);
					UpdateVehicleHandling(playerid, vehicleid);
		   			SetOwnableCarData(index, OC_STAGE, 2);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage1_1=1, stage=2 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
		    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
	                GivePlayerMoneyEx(playerid, -4000000);
		      		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
		      		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
		        	AttachDynamicObjectToVehicle(EditStage1_1Player[vehicleid], vehicleid, x-Tx, y-Ty, z-Tz,   rx, ry, rz-Tr);
					SetOwnableCarData(index, OC_ST11X, x-Tx);
					SetOwnableCarData(index, OC_ST11Y, y-Ty);
					SetOwnableCarData(index, OC_ST11Z, z-Tz);
					SetOwnableCarData(index, OC_ST11RX, rx);
					SetOwnableCarData(index, OC_ST11RY, ry);
					SetOwnableCarData(index, OC_ST11RZ, rz-Tr);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET st11x='%s', st11y='%s', st11z='%s', st11rx='%s', st11ry='%s', st11rz='%s' WHERE id=%d LIMIT 1", x-Tx, y-Ty, z-Tz, rx, ry, rz-Tr, GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
		        	DeletePVar(playerid, "stage_edit_1_1");
	        	}
				else
				{
				    new vehicleid = GetPlayerVehicleID(playerid);
				    DestroyDynamicObject(EditStage1_1Player[vehicleid]);
				    return GameText(playerid, "~r~Недостаточно средств!", 4000, 2);
				}
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_2"))
	    	{
	    	    if(GetILPlayerInt(GetPlayerMoneyEx(playerid), 20000000))
	    	    {
		    	    new vehicleid = GetPlayerVehicleID(playerid);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		    		new fmt_text[144];
		    		SetOwnableCarData(index, OC_STAGE2, 1);
					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) + 25.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) + 40.0);
					UpdateVehicleHandling(playerid, vehicleid);
		    		SetOwnableCarData(index, OC_STAGE, 3);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage2=1, stage=3 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
		    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
		      		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
		      		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
	                GivePlayerMoneyEx(playerid, -20000000);
		        	AttachDynamicObjectToVehicle(EditStage2Player[vehicleid], vehicleid, x-Tx, y-Ty, z-Tz,   rx, ry, rz-Tr);

					SetOwnableCarData(index, OC_ST2X, x-Tx);
					SetOwnableCarData(index, OC_ST2Y, y-Ty);
					SetOwnableCarData(index, OC_ST2Z, z-Tz);
					SetOwnableCarData(index, OC_ST2RX, rx);
					SetOwnableCarData(index, OC_ST2RY, ry);
					SetOwnableCarData(index, OC_ST2RZ, rz-Tr);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET st2x='%s', st2y='%s', st2z='%s', st2rx='%s', st2ry='%s', st2rz='%s' WHERE id=%d LIMIT 1", x-Tx, y-Ty, z-Tz, rx, ry, rz-Tr, GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
		        	DeletePVar(playerid, "stage_edit_2");
	        	}
				else
				{
				    new vehicleid = GetPlayerVehicleID(playerid);
				    DestroyDynamicObject(EditStage2Player[vehicleid]);
				    return GameText(playerid, "~r~Недостаточно средств!", 4000, 2);
				}
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_3"))
	    	{
	    	    if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 40000000)) return DestroyDynamicObject(EditStage3Player[GetPlayerVehicleID(playerid)]), GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
				new vehicleid = GetPlayerVehicleID(playerid);
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new fmt_text[144];
				SetOwnableCarData(index, OC_STAGE3, 1);
				SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) + 25.0);
				SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) + 50.0);
				UpdateVehicleHandling(playerid, vehicleid);
				SetOwnableCarData(index, OC_STAGE, 4);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage3=1, stage=4 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, fmt_text, false);
				new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
				GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
				GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
				SetOwnableCarData(index, OC_ST3X, x-Tx);
				SetOwnableCarData(index, OC_ST3Y, y-Ty);
				SetOwnableCarData(index, OC_ST3Z, z-Tz);
				SetOwnableCarData(index, OC_ST3RX, rx);
				SetOwnableCarData(index, OC_ST3RY, ry);
				SetOwnableCarData(index, OC_ST3RZ, rz-Tr);
				GivePlayerMoneyEx(playerid, -40000000);
				AttachDynamicObjectToVehicle(EditStage3Player[vehicleid], vehicleid, x-Tx, y-Ty, z-Tz,   rx, ry, rz-Tr);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET st3x='%f', st3y='%f', st3z='%f', st3rx='%f', st3ry='%f', st3rz='%f' WHERE id=%d LIMIT 1", x-Tx, y-Ty, z-Tz, rx, ry, rz-Tr, GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, fmt_text, false);
				DeletePVar(playerid, "stage_edit_3");
	    	}
			if(GetPVarInt(playerid, "EditCarAcs") == 1)
			{
				new vehicleid = GetPVarInt(playerid, "AcsVehicleCar");
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new car_id = GetOwnableCarData(index, OC_SQL_ID);
				new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
				GetVehiclePos(vehicleid,Tx,Ty,Tz);
				GetVehicleZAngle(vehicleid, Tr);
				new Float: ofx, Float: ofy, Float: ofz, Float: ofaz, Float: finalx, Float: finaly;
				ofx = x-Tx, ofy = y-Ty, ofz = z-Tz, ofaz = rz-Tr;
				finalx = ofx*floatcos(Tr, degrees)+ofy*floatsin(Tr, degrees), finaly = -ofx*floatsin(Tr, degrees)+ofy*floatcos(Tr, degrees);
				new query[234];
				format(query, sizeof query, "INSERT INTO `cars_accessories` (`car_id`, `model_id`, `indx`, `PosX`, `PosY`, `PosZ`, `RotX`, `RotY`, `RotZ`) VALUES (%d, %d, %d, '%f', '%f', '%f', '%f', '%f', '%f')", 
				car_id, GetPVarInt(playerid, "model_id"), GetPVarInt(playerid, "AcsindxCar"), finalx, finaly, ofz, rx, ry, ofaz);
				mysql_query(mysql, query, false);
				format(query, sizeof query, "DELETE FROM items WHERE type=%d AND slots=%d AND owner_id=%d LIMIT 1", GetPVarInt(playerid, "event"), GetPVarInt(playerid, "slot"), GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
				for(new i; i < MAX_PLAYER_ITEMS; i ++)
				{
					if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(i, PI_TYPE) != GetPVarInt(playerid, "event")) continue;
					if(GetPlayerItem(i, PI_SLOTS) != GetPVarInt(playerid, "slot")) continue;
					DeleteItems(i);
					break;
				}
				DestroyDynamicObject(car_accessories[GetPVarInt(playerid, "AcsVehicleCar")][GetPVarInt(playerid, "AcsindxCar")]);
				LoadCarAccessories(car_id, vehicleid);
				DeletePVar(playerid, "AcsVehicleCar");
				DeletePVar(playerid, "EditCarAcs");
	    		DeletePVar(playerid, "AcsindxCar");
				DeletePVar(playerid, "model_id");
				DeletePVar(playerid, "event");
				DeletePVar(playerid, "slot");
				SCM(playerid, 0x2C83DBFF, "Вы установили украшение на свой транспорт");
				SCM(playerid, 0x2C83DBFF, "Чтобы снять украшение используйте радиальное меню на {E4B700}клавишу R");
			}
		}
        if(response == EDIT_RESPONSE_CANCEL)
        {
 			new vehicleid = GetPlayerVehicleID(playerid);
            if(GetPVarInt(playerid, "obj_edit"))
            {
                DestroyObject(EditObjectPlayer[playerid]);
                CancelEdit(playerid);
            }
            if(GetPVarInt(playerid, "sab"))
            {
                DestroyDynamicObject(sab[playerid]);
                CancelEdit(playerid);
            }
	    	if(GetPVarInt(playerid, "stage_edit_1"))
	    	{
		        DestroyDynamicObject(EditStage1Player[vehicleid]);
		        CancelEdit(playerid);
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_1_1"))
	    	{
		        DestroyDynamicObject(EditStage1_1Player[vehicleid]);
		        CancelEdit(playerid);
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_2"))
	    	{
		        DestroyDynamicObject(EditStage2Player[vehicleid]);
		        CancelEdit(playerid);
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_3"))
	    	{
		        DestroyDynamicObject(EditStage3Player[vehicleid]);
		        CancelEdit(playerid);
	    	}
	    	if(GetPVarInt(playerid, "create_garden"))
	    	{
	            DestroyObject(EditObjectPlayer[playerid]);
		        CancelEdit(playerid);
		        DeletePVar(playerid, "create_garden");
	    	}
			if(GetPVarInt(playerid, "EditCarAcs") == 1)
			{
				DestroyDynamicObject(car_accessories[GetPVarInt(playerid, "AcsVehicleCar")][GetPVarInt(playerid, "AcsindxCar")]);
				CancelEdit(playerid);
				DeletePVar(playerid, "EditCarAcs");
			}
		}
        return 1;
}
public:OnPlayerClosedTicketInterface(playerid)
{
}
public:OnSelectSpectateTab(playerid, items){
	switch(items){
	    case 0:{
            SCM(playerid, -1, "В разработке!");
		}
		case 1:{
            SCM(playerid, -1, "В разработке!");
		}
		case 2:{
		    SCM(playerid, -1, "В разработке!");
		}
		case 3:{
		    SCM(playerid, -1, "В разработке!");
		}
		case 4:{
		    SCM(playerid, -1, "В разработке!");
		}
		case 5:{
		    SCM(playerid, -1, "В разработке!");
		}
		case 6:{
			SCM(playerid, -1, "В разработке!");
		}
	}
	return true;
}
stock TextFind(const text[], const findtext[]) return strfind(text, findtext) != -1;
stock ValidChar(mailchar)
{
	if(
	(mailchar >= 'A' && mailchar <= 'Z') 	||
	(mailchar >= 'a' && mailchar <= 'z') 	||
	(mailchar >= '0' && mailchar <= '9') 	||
	(mailchar == '-') || (mailchar == '_') 	||
	(mailchar == '@') || (mailchar == '.'))return 1;
	return 0;
}
stock IsValidEMail(const email[])
{
	new bool:Succes = true;
	new bool:Good;
	for(new i;i < strlen(email);i ++)
	{
	    if(email[i] == '@')
		{
		    if(!Good) Good = true;
		    else
			{
				Good = false;
		    	break;
			}
		}
	    if(!ValidChar(email[i])) Succes = false;
	}
	if(!Good) Succes = false;
	if(!TextFind(email,".ru") && !TextFind(email,".com") && !TextFind(email,".ua") && !TextFind(email,".su")) Succes = false;
	if(!TextFind(email,"@")) Succes = false;
  	return Succes;
}
stock Convert(number)
{
	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	if(hours > 0) format(string, 30, "%d:%02d:%02d", hours, mins, secs);
	else format(string, 30, "%d:%02d", mins, secs);
	return string;
}
stock SetFullness(playerid, ammount)
{
	new full[100];
	if(ammount > 100) GetPlayerData(playerid, P_EAT) = 100;
	else if(ammount < 0) GetPlayerData(playerid, P_EAT) = 0;
	else GetPlayerData(playerid, P_EAT) = ammount;
	format(full, sizeof(full), "interface('Hud').updateHungerLevel(%d)", GetPlayerData(playerid, P_EAT));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, full);
	SetPlayerData(playerid, P_EAT, ammount);
	UpdatePlayerDataInt(playerid, "hunger", GetPlayerData(playerid, P_EAT));
	return 1;
}
stock GiveFullness(playerid, ammount)
{
	SetFullness(playerid,GetPlayerData(playerid, P_EAT) + ammount);
	if(GetPlayerData(playerid, P_EAT) + ammount > 100) GetPlayerData(playerid, P_EAT) = 100;
	return 1;
}
stock PlayerSpeed(playerid)
{
    new Float:X, Float:Y, Float:Z;
    if(!IsPlayerInAnyVehicle(playerid)) GetPlayerVelocity(playerid,X,Y,Z);
    return floatround( floatsqroot( X * X + Y * Y + Z * Z ) * 170.0 );
}
stock UpdatePlayerDataInt(const playerid, const field[], data) mysql_queryf(mysql, "UPDATE `accounts` SET `%e` = '%d' WHERE `ID` = '%i' LIMIT 1", false, field, data, GetPlayerAccountID(playerid));
stock IsAtArmy(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_ARMY: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtHospital(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_HOSPITAL: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtRadio(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_RADIO: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtDPS(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_FSIN: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtPPS(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_PPS: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtPJ(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_FSB: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtGoverment(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_GOVERNMENT: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtGangLyt(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_MAFIA_ITALIAN: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtGangBat(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_MAFIA_JAPAN: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtGangArz(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_MAFIA_RUSSIAN: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtGang(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	switch(team)
	{
	    case TEAM_MAFIA_RUSSIAN,TEAM_MAFIA_ITALIAN,TEAM_MAFIA_JAPAN: return 1;
	    default: return 0;
	}
	return 0;
}

stock client_Dialog(playerid, dialogid, style, caption[], info[], button1[], button2[], page_1, page_2, info1[])
{
	player_DialogID[playerid] = dialogid;
    for (new i = sizeof STRING_GLOBAL - 1; i != -1; i--)
        STRING_GLOBAL[i] = '\0';
    for (new i, j; info[i] != '\0'; i++) {
        if (info[i] == '\n')
            strcat(STRING_GLOBAL, "<n>"), j += 3;
        else if (info[i] == '\t')
            strcat(STRING_GLOBAL, "<t>"), j += 3;
        else if (info[i] == '\"')
            STRING_GLOBAL[j++] = '\'';
        else
            STRING_GLOBAL[j++] = info[i];
    }
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.addDialogInQueue('[%i,%i,\"%s\",\"%s\",\"%s\",\"%s\",%d,%d]', \"%s\", 0)", dialogid, style, caption, info1, button1, button2, page_1, page_2, STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;
	return 1;
}

public: Tuning_OnPlayerPneumaEvent(playerid, type, event)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	new query[148];
    new Float:x, Float:y, Float:z;
    new Float:angle;
	if(type == 0) // поднять определенную часть
	{
		if(GetOwnableCarData(index, OC_PNEWMA_1) >= 0.4) return GameText(playerid, "~r~Максимальный наклон", 3000, 1);
		SetOwnableCarData(index, OC_PNEWMA_1, GetOwnableCarData(index, OC_PNEWMA_1) + 0.1);
		UpdateVehicleHandling(playerid, vehicleid);
		format(query, sizeof query, "Наклон~n~~o~%.2f", 1.0 + GetOwnableCarData(index, OC_PNEWMA_1));
		GameText(playerid, query, 3000, 1);
	}
	if(type == 1) // занизить определенную часть
	{
		if(GetOwnableCarData(index, OC_PNEWMA_1) <= -0.4) return GameText(playerid, "~r~Максимальный наклон", 3000, 1);
		SetOwnableCarData(index, OC_PNEWMA_1, GetOwnableCarData(index, OC_PNEWMA_1) - 0.1);
		UpdateVehicleHandling(playerid, vehicleid);
		format(query, sizeof query, "Наклон~n~~o~%.2f", 1.0 + GetOwnableCarData(index, OC_PNEWMA_1));
		GameText(playerid, query, 3000, 1);
	}
	if(type == 2) // поднять всю машину
	{
		if(GetOwnableCarData(index, OC_PNEWMA_2) >= 0.5) return GameText(playerid, "~r~Максимальный наклон", 3000, 1);
		SetOwnableCarData(index, OC_PNEWMA_2, GetOwnableCarData(index, OC_PNEWMA_2) + 0.1);
		UpdateVehicleHandling(playerid, vehicleid);
		format(query, sizeof query, "Наклон~n~~o~%.2f", 1.0 + GetOwnableCarData(index, OC_PNEWMA_2));
		GameText(playerid, query, 3000, 1);
		GetVehiclePos(vehicleid, x, y, z);
   		GetVehicleZAngle(vehicleid, angle);
		SetVehiclePos(vehicleid, x, y, z + 0.05);
    	SetVehicleZAngle(vehicleid, angle);
	}
	if(type == 3) // занизить всю машину
	{
		if(GetOwnableCarData(index, OC_PNEWMA_2) <= -0.5) return GameText(playerid, "~r~Максимальный наклон", 3000, 1);
		SetOwnableCarData(index, OC_PNEWMA_2, GetOwnableCarData(index, OC_PNEWMA_2) - 0.1);
		UpdateVehicleHandling(playerid, vehicleid);
		format(query, sizeof query, "Наклон~n~~o~%.2f", 1.0 + GetOwnableCarData(index, OC_PNEWMA_2));
		GameText(playerid, query, 3000, 1);
		GetVehiclePos(vehicleid, x, y, z);
    	GetVehicleZAngle(vehicleid, angle);
		SetVehiclePos(vehicleid, x, y, z + 0.05);
    	SetVehicleZAngle(vehicleid, angle);
	}
	if(type == 4) // закрытие цефа
	{
		BitStream_1(playerid, s_CefInterface, t_CefHide,"TuningPlayerPneuma");
	}
	return 1;
}

public: Tuning_OnTuningPneumaEvent(playerid, type)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	if(type == 4) // покупка
	{
		if(GetOwnableCarData(index, OC_PNEWMA) == 0)
		{
			Dialog
			(
				playerid, DIALOG_PNEWMA_BUY, DIALOG_STYLE_MSGBOX, 
				"{FFFFFF}Подтверждение", 
				"{FFFFFF}Вы подтверждаете покупку и установку пневматической подвески?\n\n\
				{c07700}Стоимость комплекта: 100.000.000 RUB\n\n\
				{FFFFFF}Вы сможете управлять установленной подвеской при помощи\n\
				{FFFFFF}специального пульта: {cfa62d}/spanel{FFFFFF}.", 
				"Да", "Отмена"
			);
		}
	}
	else if(type == 5)
	{
		if(GetOwnableCarData(index, OC_PNEWMA) == 1)
		{
			Dialog
			(
				playerid, DIALOG_PNEWMA_DESTROY, DIALOG_STYLE_MSGBOX, 
				"{FFFFFF}Подтверждение", 
				"{FFFFFF}Вы подтверждаете снятие и продажу пневматической подвески?\n\n\
				{c07700}Вам вернут 25% от стоимости: 25.000.000 RUB", 
				"Да", "Отмена"
			);
		}
	}
	else if(type == 6) // выход
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, -413.4231,1010.6860,12.0819);
		SetVehicleZAngle(vehicleid, 2.8581);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
		SpeedometrShowForPlayer(playerid);
	}
	else 
	{
		GameText(playerid, "В разработке", 3000, 2);
	}
    return 1;
}

public:ClickPlayerShipMenuButton(playerid, event)
{
	if(event == 1)
	{
		if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 100000))
		    return SCM(playerid, 0xCECECEFF, "У вас недостаточно средств!");
		GivePlayerMoneyEx(playerid, -100000, "Билет в Майами");
		SCM(playerid, 0xCECECEFF, "Вы успешно прибыли в Майами!");
        GameText(playerid, "Вы успешно прибыли в Майами!", 2000, 3);
		SetPlayerPos(playerid, -5361.2671,-4725.9209,3.0708);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "MiamiTicket");
	}
	if(event == 2)
	{
		page_cars[playerid] = 1;
		type_page_cars[playerid] = 3;
		ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST3, page_cars[playerid]);
	}
	if(event == 3)
	{
		BitStream_1(playerid, s_CefInterface, t_CefHide, "MiamiTicket");
	}
	return 1;
}
stock IsACarshCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_CARSH_CAR)
		{
			return 1;
		}
	}
	return 0;
}
stock GetFreeCarshCarID()
{
	for(new idx; idx < sizeof g_carsh_car; idx ++)
	{
		if(GetCarshCarData(idx, OC_CREATE)) continue;
		return idx;
	}
	return -1;
}
public:CarsharingPrice(playerid){
	pricecarsharing[playerid] = pricecarsharing[playerid] + 1;
	return 1;
}
public:UpdateCarsheringCar(playerid){
	KillTimer(timecarshs[playerid]);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(4, '[%d,%d]')", GetPlayerData(playerid, P_CARSH_CAR), GetPlayerData(playerid, P_CARSH_TIME));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
	return 1;
}
public:UpdateCarshering(playerid){
    new Float: pos_x, Float: pos_y, Float: pos_z, Float: angle;
    GetPlayerFacingAngle(playerid, angle);
    GetPlayerPos(playerid, pos_x, pos_y, pos_z);
    new Float: pos_xs, Float: pos_ys, Float: pos_zs, Float:angll;
    GetVehiclePos(GetPlayerData(playerid, P_CARSH_CAR), pos_xs,pos_ys,pos_zs);
	GetVehicleZAngle(GetPlayerData(playerid, P_CARSH_CAR), angll);
	STRING_GLOBAL[0] = EOS;
	if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f],[%f,%f,%f]]')", pos_x, pos_y, angle,pos_xs, pos_ys, angll);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
    else
    {
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f]]')", pos_x, pos_y, angle);
	    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
    new query[170];
	STRING_GLOBAL[0] = EOS;
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_CARSH_CAR)
		{
		  	new Float: x, Float: y, Float: pos_zp,Float: angl;
			GetVehiclePos(i, x,y,pos_zp);
			GetVehicleZAngle(i, angl);
			new index = GetVehicleData(i, V_ACTION_ID);
		    new modelid = GetVehicleData(i, V_MODELID);
			format(query, sizeof query, ",[%f,%f,%f,%d,%f,%f,%f,%d,%d,\"%s %s\",\"%s\",10,1,0,%d]", x, y, angl, GetCarshCarData(index, OC_PRICE),GetVehicleData(i, V_FUEL),GetVehicleData(i, V_MILEAGE),GetCarshCarData(index, OC_IZNOS),GetCarshCarData(index, OC_MASLO),i, GetCarshCarData(index, OC_NUMBER), GetCarshCarData(index, OC_REGION), GetVehicleInfo(modelid , VI_NAME),modelid);
			strcat(STRING_GLOBAL, query);
    	}
    }
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(2, '[[542.86,2822.77,268.79,1000,71,195.04,0.45,83.95,139,\"Y329AP 105\",\"Ford Focus 3\",10,1,0,15196] %s ]')", STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
}
public: CarSH_OnPlayerRequest(playerid, app_id, xz, ssss)
{
	if(app_id == 0)
	{
		KillTimer(timecarsh[playerid]);
	    timecarsh[playerid] = SetTimerEx("UpdateCarshering", 1000, true, "i", playerid);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').getApp('carsharing').onServerResponse(0, '[1,0]')");
	    new Float: pos_x, Float: pos_y, Float: pos_z, Float: angle;
	    GetPlayerFacingAngle(playerid, angle);
	    GetPlayerPos(playerid, pos_x, pos_y, pos_z);
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f]]')", pos_x, pos_y, angle);
	    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	    new query[170];
		STRING_GLOBAL[0] = EOS;
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_CARSH_CAR)
			{
			  	new Float: x, Float: y, Float: pos_zp,Float: angl;
				GetVehiclePos(i, x,y,pos_zp);
				GetVehicleZAngle(i, angl);
				new index = GetVehicleData(i, V_ACTION_ID);
			    new modelid = GetVehicleData(i, V_MODELID);
				format(query, sizeof query, ",[%f,%f,%f,%d,71,195.04,0.45,83.95,%d,\"%s %s\",\"%s\",10,1,0,%d]", x, y, angl, GetCarshCarData(index, OC_PRICE),i, GetCarshCarData(index, OC_NUMBER), GetCarshCarData(index, OC_REGION), GetVehicleInfo(modelid , VI_NAME),modelid);
				strcat(STRING_GLOBAL, query);
	    	}
	    }
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(2, '[[542.86,2822.77,268.79,1000,71,195.04,0.45,83.95,139,\"Y329AP 105\",\"Ford Focus 3\",10,1,0,15196] %s ]')", STRING_GLOBAL);
	    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	    if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
	    {
            timecarshs[playerid] = SetTimerEx("UpdateCarsheringCar", 1000, true, "i", playerid);
	 	}
	}
	if(app_id == 4)
	{
	    if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
	    {
	        SCM(playerid, -1, "Вы уже арендовали авто.");
	    }
	    else
	    {
		    new index = GetVehicleData(xz, V_ACTION_ID);
		    if(!GetILPlayerInt(GetPlayerMoneyEx(playerid), 500)) return SendClientMessage(playerid, 0x999999FF, "Недостаточно средств для аренды авто");
		    if(GetCarshCarData(index, OC_RENT_OWNER) == -1)
		    {
                SCM(playerid, -1, "Вы успешно арендовали авто.");
		 		BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"~g~Успешно\",1000,0,-1,1]')");
		 		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(4, '[%d,%d]')", xz, gettime());
		 		pricecarsharing[playerid] = 1;
		 		timecarsharingprice[playerid] = SetTimerEx("CarsharingPrice", 60000, true, "i", playerid);
		 		BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
		 		SetPlayerData(playerid, P_CARSH_CAR, xz);
		 		SetPlayerData(playerid, P_CARSH_TIME, gettime());
		 		SetCarshCarData(index, OC_RENT_OWNER, GetPlayerAccountID(playerid));
		 		DestroyVehicleLabel(xz);
		 	}
		 	else
		 	{
		 	    BitStream_1(playerid, s_CefInterface, t_CefUpdate,"interface('GameText').add('[3,\"~r~Ошибка транспорт уже арендован\",2000,0,-1,1]')");
		 	    return 1;
		 	}
		}
	}
	if(app_id == 5)
	{
	    new index = GetVehicleData(xz, V_ACTION_ID);
	    if(GetCarshCarData(index, OC_RENT_OWNER) == GetPlayerAccountID(playerid))
	    {
			STRING_GLOBAL[0] = EOS;
	        SCM(playerid, -1, "Вы успешно закончили аренду авто.");
	        RemovePlayerFromVehicle(playerid);
            KillTimer(timecarsharingprice[playerid]);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Цена за аренду авто составила: %d рублей", GetCarshCarData(index, OC_PRICE) * pricecarsharing[playerid]);
            SCM(playerid, -1, STRING_GLOBAL);
	    	GivePlayerMoneyEx(playerid, -GetCarshCarData(index, OC_PRICE) * pricecarsharing[playerid], "аренда авто", true, true);
	    	pricecarsharing[playerid] = 1;
			new typeauto[24];
		    if(GetCarshCarData(index, OC_VINIL) == 0)
		    {
		        format(typeauto, 11, "Бип Drive");
		    }
		    if(GetCarshCarData(index, OC_VINIL) == 1)
		    {
		        format(typeauto, 12, "Кар Шеринг");
		    }
		    if(GetCarshCarData(index, OC_VINIL) == 2)
		    {
		        format(typeauto, 12, "Crown Car");
		    }
		    if(GetCarshCarData(index, OC_VINIL) == 3)
		    {
		        format(typeauto, 12, "WOW Drive");
		    }
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{20B2AA}Аренда авто '%s' \n\n Транспорт {ffffff}%s (№%d) \n {20B2AA}Статус: {ffffff}свободен\n{20B2AA}Цена за минуту: {ffffff}%d рублей\n\n{20B2AA}Для {ffffff}начала аредны {20B2AA}воспользуйтесь\n приложением в {ffffff}телефоне", typeauto,GetVehicleInfo(GetCarshCarData(index, OC_MODEL_ID), VI_NAME), GetCarshCarData(index, OC_MODEL_ID), GetCarshCarData(index, OC_PRICE));
	        CreateVehicleLabel(xz, STRING_GLOBAL, 0xFFFFFFFF, 0.0, 0.0, 0.5, 5.0);
	        SetCarshCarData(index, OC_RENT_OWNER, -1);
	        SetPlayerData(playerid, P_CARSH_CAR, INVALID_VEHICLE_ID);
		    new query[170];
			for(new i = 1; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_CARSH_CAR)
				{
				  	new Float: x, Float: y, Float: pos_zp,Float: angl;
					GetVehiclePos(i, x,y,pos_zp);
					GetVehicleZAngle(i, angl);
					new indexs = GetVehicleData(i, V_ACTION_ID);
				    new modelid = GetVehicleData(i, V_MODELID);
					format(query, sizeof query, ",[%f,%f,%f,%d,71,195.04,0.45,83.95,%d,\"%s %s\",\"%s\",10,1,0,%d]", x, y, angl, GetCarshCarData(indexs, OC_PRICE),i, GetCarshCarData(indexs, OC_NUMBER), GetCarshCarData(indexs, OC_REGION), GetVehicleInfo(modelid , VI_NAME),modelid);
					strcat(STRING_GLOBAL, query);
		    	}
		    }
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(5, '[%d,[[542.86,2822.77,268.79,1000,71,195.04,0.45,83.95,139,\"Y329AP 105\",\"Ford Focus 3\",10,1,0,15196] %s ]]')", xz ,STRING_GLOBAL);
		    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
	}
	return 1;
}
public: LoadRentCar()
{
    new rows, vehicleid;
    new Cache: result;
	result = mysql_query(mysql, "SELECT * FROM arenda_cars", true);
	rows = cache_num_rows();
	new idx;
    for(idx = 0; idx < rows; idx ++)
    {
		SetRentCarData(idx, R_SQL_ID, 		cache_get_field_content_int(idx, "id"));
        new idm = idx;
		SetRentCarData(idm, R_MODEL_ID, 	cache_get_field_content_int(idx, "model_id"));
		SetRentCarData(idm, R_RENT_BIZ, 	cache_get_field_content_int(idx, "owner_id"));
		SetRentCarData(idm, R_COLOR_1, 		cache_get_field_content_int(idx, "color_1"));
		SetRentCarData(idm, R_COLOR_2, 		cache_get_field_content_int(idx, "color_2"));
		SetRentCarData(idm, R_IZNOS,		cache_get_field_content_float(idx, "iznos"));
		SetRentCarData(idm, R_MASLO, 		cache_get_field_content_float(idx, "maslo"));
		SetRentCarData(idm, R_POS_X, 		cache_get_field_content_float(idx, "pos_x"));
		SetRentCarData(idm, R_POS_Y, 		cache_get_field_content_float(idx, "pos_y"));
		SetRentCarData(idm, R_POS_Z, 		cache_get_field_content_float(idx, "pos_z"));
		SetRentCarData(idm, R_ANGLE, 		cache_get_field_content_float(idx, "angle"));
		SetRentCarData(idm, R_KOLESO_1, 		cache_get_field_content_float(idx, "koleso_1"));
		SetRentCarData(idm, R_KOLESO_2, 		cache_get_field_content_float(idx, "koleso_2"));
		SetRentCarData(idm, R_KOLESO_3, 		cache_get_field_content_float(idx, "koleso_3"));
		SetRentCarData(idm, R_KOLESO_4, 		cache_get_field_content_float(idx, "koleso_4"));
        SetRentCarData(idm, R_PRICE, 		cache_get_field_content_int(idx, "price"));
        SetRentCarData(idm, R_MESTO, 		cache_get_field_content_int(idx, "mesto"));
		SetRentCarData(idm, R_CREATE, 		cache_get_field_content_int(idx, "create_time"));
        SetRentCarData(idm, R_RENT_OWNER, 		-1);
		if(GetRentCarData(idm, R_RENT_BIZ) == 56)
		{
			for(new i; i < 8; i++)
			{
				if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[0][i][0],Rent_Mesto[0][i][1],Rent_Mesto[0][i][2],Rent_Mesto[0][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
			}
		}
		if(GetRentCarData(idm, R_RENT_BIZ) == 57)
		{
			for(new i; i < 8; i++)
			{
				if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[1][i][0],Rent_Mesto[1][i][1],Rent_Mesto[1][i][2],Rent_Mesto[1][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
			}
		}
		if(GetRentCarData(idm, R_RENT_BIZ) == 58)
		{
			for(new i; i < 8; i++)
			{
				if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[2][i][0],Rent_Mesto[2][i][1],Rent_Mesto[2][i][2],Rent_Mesto[2][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
			}
		}
		new query[144];
		mysql_format(mysql, query, sizeof query, "UPDATE arenda_cars SET vehicleid=%d WHERE id=%d", vehicleid, GetRentCarData(idm, R_SQL_ID));
		mysql_query(mysql, query, false);
        SetVehicleVirtualWorld(vehicleid, cache_get_field_content_int(idx, "world"));
		SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);
		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idx, "milleage") );
		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
	}
	cache_delete(result);
	printf("Загружено авто для аренды %d",  rows);
}
public: CreateCarsharingCar()
{
    new rows, vehicleid;
    new Cache: result;
	result = mysql_query(mysql, "SELECT * FROM carsharing_cars", true);
	rows = cache_num_rows();
	new idx;
    for(idx = 0; idx < rows; idx ++)
    {
		SetCarshCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(idx, "id"));
        new idm = idx;
		SetCarshCarData(idm, OC_MODEL_ID, 	cache_get_field_content_int(idx, "model_id"));
		SetCarshCarData(idm, OC_COLOR_1, 		cache_get_field_content_int(idx, "color_1"));
		SetCarshCarData(idm, OC_COLOR_2, 		cache_get_field_content_int(idx, "color_2"));
		SetCarshCarData(idm, OC_VINIL, 		cache_get_field_content_int(idx, "vinil"));
		SetCarshCarData(idm, OC_IZNOS,		cache_get_field_content_int(idx, "iznos"));
		SetCarshCarData(idm, OC_MASLO, 		cache_get_field_content_int(idx, "maslo"));
		SetCarshCarData(idm, OC_POS_X, 		cache_get_field_content_float(idx, "pos_x"));
		SetCarshCarData(idm, OC_POS_Y, 		cache_get_field_content_float(idx, "pos_y"));
		SetCarshCarData(idm, OC_POS_Z, 		cache_get_field_content_float(idx, "pos_z"));
		SetCarshCarData(idm, OC_ANGLE, 		cache_get_field_content_float(idx, "angle"));
        SetCarshCarData(idm, OC_PRICE, 		cache_get_field_content_int(idx, "price"));
		SetCarshCarData(idm, OC_ALARM, 		bool: cache_get_field_content_int(idx, "alarm"));
		SetCarshCarData(idm, OC_KEY_IN, 		bool: cache_get_field_content_int(idx, "key_in"));
		SetCarshCarData(idm, OC_CREATE, 		cache_get_field_content_int(idx, "create_time"));
        SetCarshCarData(idm, OC_RENT_OWNER, 		-1);
		vehicleid = CreateVehicle
		(
			GetCarshCarData(idm, OC_MODEL_ID),
			GetCarshCarData(idm, OC_POS_X),
			GetCarshCarData(idm, OC_POS_Y),
			GetCarshCarData(idm, OC_POS_Z),
			GetCarshCarData(idm, OC_ANGLE),
			GetCarshCarData(idm, OC_COLOR_1),
			GetCarshCarData(idm, OC_COLOR_2),
			-1,
			0,
			VEHICLE_ACTION_TYPE_CARSH_CAR,
			idx
		);
		new typeauto[24];
	    if(GetCarshCarData(idm, OC_VINIL) == 0)
	    {
	        format(typeauto, 11, "Бип Drive");
	    }
	    if(GetCarshCarData(idm, OC_VINIL) == 1)
	    {
	        format(typeauto, 12, "Кар Шеринг");
	    }
	    if(GetCarshCarData(idm, OC_VINIL) == 2)
	    {
	        format(typeauto, 12, "Crown Car");
	    }
	    if(GetCarshCarData(idm, OC_VINIL) == 3)
	    {
	        format(typeauto, 12, "WOW Drive");
	    }
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{20B2AA}Аренда авто '%s' \n\n Транспорт {ffffff}%s (№%d) \n {20B2AA}Статус: {ffffff}свободен\n{20B2AA}Цена за минуту: {ffffff}%d рублей\n\n{20B2AA}Для {ffffff}начала аредны {20B2AA}воспользуйтесь\n приложением в {ffffff}телефоне", typeauto,GetVehicleInfo(GetCarshCarData(idm, OC_MODEL_ID), VI_NAME), GetCarshCarData(idm, OC_MODEL_ID), GetCarshCarData(idm, OC_PRICE));
        CreateVehicleLabel(vehicleid, STRING_GLOBAL, 0xFFFFFFFF, 0.0, 0.0, 0.5, 5.0);
		SetVehicleData(vehicleid, V_TYPENUM, 5);
		SetVehicleNumber(vehicleid, 5, ""SERVER_NUMBER_CARSH"", "");
		SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);
		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idx, "milleage") );
		ChangeVehicleViniljob(vehicleid, GetCarshCarData(idm, OC_VINIL));
		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
		SetVehicleData(vehicleid, V_FUEL, cache_get_field_content_float(idx, "fuel"));
	}
	cache_delete(result);
	printf("Загружено авто для аренды %d",  rows);
}
stock GenerateCarRegRu()
{
	new numberrru[4] = EOS;
	format(numberrru, sizeof numberrru, "%d", RandomEx(199, 199));
	return numberrru;
}
stock GenerateCarNumberRu()
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new number[7] = EOS;
	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';
	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';
	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];
	return number;
}
stock SetVehiclePosAc(vehicleid, Float: x, Float:y, Float:z, Float:angle)
{
	SetVehiclePos(vehicleid, x,y,z);
	SetVehicleZAngle(vehicleid, angle);
}
public: testdrive(playerid, vehicleid)
{
	SetPVarInt(playerid, "in_test_drive", 0);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	SendClientMessage(playerid, 0x66CC00FF, "Время тест-драйва закончено!");
	if(GetOwnableCarData(index, OC_BY_ID) == 2)
	{
	    SetVehicleParam(vehicleid, V_ENGINE, false);
		new indx = GetOwnableCarData(index, OC_MESTOID);
		if(indx >= 1 || indx <= 21)
		{
			SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_1],g_load_car_market[indx][POS_MESTO_Y_1],g_load_car_market[indx][POS_MESTO_Z_1],g_load_car_market[indx][POS_MESTO_ANGEL_1]);
			LinkVehicleToInterior(vehicleid, 4);
			SetVehicleVirtualWorld(vehicleid, 4);
			SetPlayerInterior(playerid, 4);
			SetPlayerVirtualWorld(playerid, 4);
		}
	}
	if(GetOwnableCarData(index, OC_BY_ID) == 1)
	{
	    SetVehicleParam(vehicleid, V_ENGINE, false);
		new indx = GetOwnableCarData(index, OC_MESTOID);
		if(indx >= 1 || indx <= 20)
		{
			SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_2],g_load_car_market[indx][POS_MESTO_Y_2],g_load_car_market[indx][POS_MESTO_Z_2],g_load_car_market[indx][POS_MESTO_ANGEL_2]);
			LinkVehicleToInterior(vehicleid, 4);
			SetVehicleVirtualWorld(vehicleid, 4);
			SetPlayerInterior(playerid, 4);
			SetPlayerVirtualWorld(playerid, 4);
		}
	}
	if(GetOwnableCarData(index, OC_BY_ID) == 3)
	{
	    SetVehicleParam(vehicleid, V_ENGINE, false);
		new indx = GetOwnableCarData(index, OC_MESTOID);
		if(indx >= 1 || indx <= 13)
		{
			SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_3],g_load_car_market[indx][POS_MESTO_Y_3],g_load_car_market[indx][POS_MESTO_Z_3],g_load_car_market[indx][POS_MESTO_ANGEL_3]);
			LinkVehicleToInterior(vehicleid, 4);
			SetVehicleVirtualWorld(vehicleid, 4);
			SetPlayerInterior(playerid, 4);
			SetPlayerVirtualWorld(playerid, 4);
		}
	}
	return 1;
}
stock SetPlayerPosAcc(playerid, Float:x, Float:y, Float:z, Float:angle)
{
    if(playerid != INVALID_PLAYER_ID)
	{
        SetPlayerPos(playerid, x, y, z);
        SetPlayerFacingAngle(playerid, angle);
    }
}
stock DropYas(playerid) // подноса
{
	TOTALY ++;
	new Float:f[4],string[50];
	GetPlayerPos(playerid,f[0],f[1],f[2]);
	DYaz[TOTALY][g_y][0] = f[0];
	DYaz[TOTALY][g_y][1] = f[1];
	DYaz[TOTALY][g_y][2] = f[2] - 0.95;
	DYaz[TOTALY][g_yid] = CreateDynamicObject(10024, f[0], f[1], f[2]-0.95, -23.3600, 22.6000, 90.0);
	DYaz[TOTALY][g_ypod] = 1;
	SetPVarInt(playerid,"respeat",0);
	format(string, 50, "       Поднять\n       {027BEB}/pick");
	DYaz[TOTALY][g_text] = Create3DTextLabel(string, COLOR_GOLD, f[0], f[1], f[2]-0.95, 20.0,0,0);
	return true;
}
stock ProxDetector(Float:radi, playerid, str[],col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	foreach(new i:Player)
	{
		GetPlayerPos(i, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) SendClientMessage(i, col1, str);
		else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) SendClientMessage(i, col2, str);
		else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) SendClientMessage(i, col3, str);
		else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) SendClientMessage(i, col4, str);
		else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) SendClientMessage(i, col5, str);
	}
	return true;
}
stock ShowDisplayText(playerid, text[], time)
{
	format(STRING_GLOBAL, sizeof STRING_GLOBAL,"[\"%s\"]",text);
	BitStream_2(playerid, s_CefInterface, t_CefShow, "DisplayText", STRING_GLOBAL);
	SetTimerEx("CloseDisplayText", time, false, "i", playerid);
}
public: CloseDisplayText(playerid){BitStream_1(playerid, s_CefInterface, t_CefHide, "DisplayText");}
public: OnPlayerEventRentCar(playerid, id)
{
	if(id < 0) return 1;
    new biz_id = GetPVarInt(playerid, "arenda_id");
    new vhid = GetPVarInt(playerid, "vehid_arenda");
    new indexs = GetVehicleData(vhid, V_ACTION_ID);
	if(id == 0)
	{
	    if(GetRentCarData(indexs, R_RENT_BIZ) == biz_id && GetRentCarData(indexs, R_RENT_BIZ) == 56 || GetRentCarData(indexs, R_RENT_BIZ) == 57 || GetRentCarData(indexs, R_RENT_BIZ) == 58)
	    {
		    if(arendavibor[playerid] == 0)
		    {
		        arendavibor[playerid] = 1;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								SetPVarInt(playerid, "vehid_arenda", i);
								new Float:X,Float:Y,Float:Z;
								GetVehiclePos(i, X,Y,Z);
								SetPlayerVirtualWorld(playerid, biz_id);
								SetVehicleVirtualWorld(i, biz_id);
								SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
								SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
								return 1;
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 7)
		    {
		        arendavibor[playerid] = 0;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 6)
		    {
		        arendavibor[playerid] = 7;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 5)
		    {
		        arendavibor[playerid] = 6;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 5 || GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 4)
		    {
		        arendavibor[playerid] = 5;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 4 || GetRentCarData(index, R_MESTO) == 5 || GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 3)
		    {
		        arendavibor[playerid] = 4;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 3 || GetRentCarData(index, R_MESTO) == 4 || GetRentCarData(index, R_MESTO) == 5 || GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 2)
		    {
		        arendavibor[playerid] = 3;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 2 || GetRentCarData(index, R_MESTO) == 3 || GetRentCarData(index, R_MESTO) == 4 || GetRentCarData(index, R_MESTO) == 5 || GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 1)
		    {
		        arendavibor[playerid] = 2;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) != 0)
								{
									SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
									SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		}
	}
	if(id == 1)
	{
	    if(GetRentCarData(indexs, R_RENT_BIZ) == biz_id && GetRentCarData(indexs, R_RENT_BIZ) == 56 || GetRentCarData(indexs, R_RENT_BIZ) == 57 || GetRentCarData(indexs, R_RENT_BIZ) == 58)
	    {
		    if(arendavibor[playerid] == 1) arendavibor[playerid] = 7;
			if(arendavibor[playerid] == 7) arendavibor[playerid] = 6;
			if(arendavibor[playerid] == 6) arendavibor[playerid] = 5;
			if(arendavibor[playerid] == 5) arendavibor[playerid] = 4;
			if(arendavibor[playerid] == 4) arendavibor[playerid] = 3;
			if(arendavibor[playerid] == 3) arendavibor[playerid] = 2;
		    if(arendavibor[playerid] == 2) arendavibor[playerid] = 0;
		    if(arendavibor[playerid] == 0) arendavibor[playerid] = 1;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
				{
					new index = GetVehicleData(i, V_ACTION_ID);
					if(GetRentCarData(index, R_RENT_OWNER) == -1)
					{
						if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						{
							if(GetRentCarData(index, R_MESTO) == arendavibor[playerid])
							{
								SetPVarInt(playerid, "vehid_arenda", i);
								new Float:X,Float:Y,Float:Z;
								GetVehiclePos(i, X,Y,Z);
								SetPlayerVirtualWorld(playerid, biz_id);
								SetVehicleVirtualWorld(i, biz_id);
								SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
								SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
								return 1;
							}
						}
					}
				}
			}
		}
	}
	if(id == 2)
	{
	    new msg[600];
	    new vehicleid = GetPVarInt(playerid, "vehid_arenda");
		if(vehicleid == INVALID_VEHICLE_ID) return 1;
	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
	    new model_id = GetVehicleData(vehicleid, V_MODELID);
	    format(msg, sizeof msg, "Название автомобиля:<t>%s<n>Цена аренды:<t>%s руб <n><n>- Износ:<t>%.2f<n>- Пробег:<t>%.2f<n>- Загрязненность:<t>0<n>- Состояние масла:<t>%.2f<n>- Состояние фильтров:<t>0.00<n>- Бензин:<t>%.2f л.<n><n>{FFFFFF}Износ передней левой шины<t>{3399FF}%.2f (Летняя)<n>{FFFFFF}Износ задней левой шины<t>{3399FF}%.2f (Летняя)<n>{FFFFFF}Износ передней правой шины<t>{3399FF}%.2f (Летняя)<n>{FFFFFF}Износ задней правой шины<t>{3399FF}%.2f (Летняя)<n><n><n><n>{FFFFFF}Чтобы взять транспорт в аренду нажмите \'Аренда\'",
		GetVehicleInfo(model_id, VI_NAME), formatInt(GetRentCarData(index, R_PRICE)),GetRentCarData(index, R_IZNOS),GetVehicleData(vehicleid, V_MILEAGE),GetRentCarData(index, R_MASLO),GetVehicleData(vehicleid, V_FUEL),GetRentCarData(index, R_KOLESO_1),GetRentCarData(index, R_KOLESO_2),GetRentCarData(index, R_KOLESO_3),GetRentCarData(index, R_KOLESO_4));
		Dialog
		(
			playerid, DIALOG_BIZ_ARENDA_CARS, DIALOG_STYLE_MSGBOX,
			"{FF9900}Аренда транспорта",
			msg,
			"Аренда", "Отмена"
		);
	}
	if(id == 3)
	{
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerInterior(playerid, 0);
		TogglePlayerControllable(playerid, true);
		BitStream_1(playerid, s_CefInterface, t_CefHide, "Select");
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}
stock IsARentCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
		{
			return 1;
		}
	}
	return 0;
}
stock GetFreeRentCarID()
{
	for(new idx; idx < sizeof g_rent_car; idx ++)
	{
		if(GetRentCarData(idx, R_CREATE)) continue;
		return idx;
	}
	return -1;
}
stock DestroySkin(playerid, skin_id, count_del)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SKIN_ID) != skin_id) continue;
		new query[148];
		format(query, sizeof query, "DELETE FROM items WHERE owner_id=%d AND slots=%d AND type=%d AND type_item=%d AND skin_id=%d LIMIT 1", GetPlayerItem(i, PI_OWNER_ID), GetPlayerItem(i, PI_SLOTS), GetPlayerItem(i, PI_TYPE), GetPlayerItem(i, PI_TYPE_ITEM), GetPlayerItem(i, PI_SKIN_ID));
		mysql_query(mysql, query, false);
		DeleteItems(i);
		count++;
		if(count == count_del) return 1;
	}
	return 1;
}
stock DestroyAcs(playerid, aks_id, count_del)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_AKS_ID) != aks_id) continue;
		new query[148];
		format(query, sizeof query, "DELETE FROM items WHERE owner_id=%d AND slots=%d AND type=%d AND type_item=%d AND aks_id=%d LIMIT 1", GetPlayerItem(i, PI_OWNER_ID), GetPlayerItem(i, PI_SLOTS), GetPlayerItem(i, PI_TYPE), GetPlayerItem(i, PI_TYPE_ITEM), GetPlayerItem(i, PI_AKS_ID));
		mysql_query(mysql, query, false);
		DeleteItems(i);
		count++;
		if(count == count_del) return 1;
	}
	return 1;
}
stock GiveCar(playerid, model_id, color_1, color_2, vinil, Float:pos_x, Float:pos_y, Float:pos_z, Float:angle, create_time, iznos = 0, Float:gryaz = 0.0)
{
	new querys[248];
	mysql_format(mysql, querys, sizeof querys, "INSERT INTO ownable_cars (owner_id,model_id,color_1,color_2,vinil,pos_x,pos_y,pos_z,angle,create_time,iznos,gryaz) VALUES ('%d','%d','%d','%d','%d','%f','%f','%f','%f','%d','%d','%f')",GetPlayerAccountID(playerid),model_id,color_1,color_2,vinil,pos_x,pos_y,pos_z,angle,create_time,iznos,gryaz);
	mysql_tquery(mysql, querys, "", "");
}
stock GiveSkin(playerid, skin_id)
{
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
	CreateItemsSkin(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), skin_id, 0, -1, -1, 0, 3);
	return 1;
}
stock GiveAcs(playerid, aks_id, type)
{
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
	new typeacs, indx;
	if(type == 0) typeacs = 181, indx = 7;//очки 
	if(type == 1) typeacs = 182, indx = 1;//бандана
	if(type == 2) typeacs = 183, indx = 1;//маска
	if(type == 3) typeacs = 184, indx = 3;//берет
	if(type == 4) typeacs = 185, indx = 3;//шляпа
	if(type == 5) typeacs = 219, indx = 2;//Сумка
	if(type == 6) typeacs = 220, indx = 8;//Ремень
	if(type == 7) typeacs = 221, indx = 4;//украшение на руку
	if(type == 8) typeacs = 222, indx = 0;//Рюкзак
	if(type == 9) typeacs = 246, indx = 5;//Украшение на шею
	if(type == 10) typeacs = 263, indx = 6;//Плащ
	if(type == 11) typeacs = 277, indx = 9;//бронtжелет
	if(type == 12) typeacs = 289, indx = 4;//Посох
	if(type == 13) typeacs = 287, indx = 6;//Крылья
	if(type == 14) typeacs = 285, indx = 0;//Украшение на транспорт
	if(type == 15) typeacs = 285, indx = 1;//Украшение на транспорт
	if(type == 16) typeacs = 285, indx = 2;//Украшение на транспорт
	if(type == 17) typeacs = 285, indx = 3;//Украшение на транспорт
	if(type == 18) typeacs = 324, indx = 6;//скейтборд
	if(type == 19) typeacs = 275, indx = 5;//украшение на левое плечо
	if(type == 20) typeacs = 285, indx = 4;//Украшение на транспорт
	if(type == 21) typeacs = 285, indx = 5;//Украшение на транспорт
	if(type == 22) typeacs = 291, indx = 9;//аксессуар на спину
	CreateItemsAcs(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), aks_id, typeacs, 0, indx, -1, -1, 0, 2);
	return 1;
}
stock CreateIteam(playerid, iteamid, count, index = 0, text[] = "")
{
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
	CreateItemsItem(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), iteamid, count, index, -1, -1, 0, 0);
	AddItemsLog(playerid, iteamid, 0, count, text);
	return 1;
}
stock GiveIteam(playerid, iteamid, status, count, type, text[] = "")
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 0) continue;
		if(GetPlayerItem(i, PI_ITEM) != iteamid) continue;
		if(GetPlayerItem(i, PI_INDX) != type) continue;
		new count1 = GetPlayerItem(i, PI_COUNT);
		new id = GetPlayerItem(i, PI_SQL_ID);
		if(status == 0)
		{
			if(count1 - count > 0)
			{
				new query[94];
				format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count1 - count, id);
				mysql_query(mysql, query, false);
				SetPlayerItem(i, PI_COUNT, count1 - count);
				AddItemsLog(playerid, iteamid, 0, -count, text);
				return 1;
			}
			else
			{
				new query[94];
				format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1",id);
				mysql_query(mysql, query, false);
				DeleteItems(i);
				AddItemsLog(playerid, iteamid, 0, -count, text);
				return 1;
			}
		}
		else if(status == 1)
		{
			new query[94];
			format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count1 + count, id);
			mysql_query(mysql, query, false);
			SetPlayerItem(i, PI_COUNT, count1 + count);
			AddItemsLog(playerid, iteamid, 0, count, text);
			return 1;
		}
		return 1;
	}
	if(GetInventorySlots(playerid) == -1) return SCM(playerid, COLOR_GREY, "Ошибка! Вам не был выдан предмет так как все слоты в инвентаре заняты.");
	CreateItemsItem(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), iteamid, count, type, -1, -1, 0, 0);
	AddItemsLog(playerid, iteamid, 0, count, text);
	return 1;
}
stock GetSkin(playerid, skin_id)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SKIN_ID) != skin_id) continue;		
		count++;
	}
	return count;
}
stock GetAcs(playerid, aks_id)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_AKS_ID) != aks_id) continue;
		count++;
	}
	return count;
}
stock GetIteam(playerid, iteamid)
{
    new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 0) continue;
		if(GetPlayerItem(i, PI_ITEM) != iteamid) continue;
		count = GetPlayerItem(i, PI_COUNT);
		return count;
	}
	return count;
}
stock GetIteamIndx(playerid, iteamid, indx)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_ITEM) != iteamid) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_INDX) != indx) continue;
		count = GetPlayerItem(i, PI_COUNT);
		return count;
	}
	return count;
}
public: NextBusRouteCP(playerid)
{
	if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
	{
		if(IsPlayerInJob(playerid))
		{
			new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
			new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);
			new next_cp = route_step + 1;
			if(g_bus_route[route_id][next_cp][BRS_POS_X] == 0.0)
			{
				next_cp = 0;
			}
			SetPlayerRaceCheckpoint
			(
				playerid,
				g_bus_route[route_id][route_step][BRS_STOP],
				g_bus_route[route_id][route_step][BRS_POS_X],
				g_bus_route[route_id][route_step][BRS_POS_Y],
				g_bus_route[route_id][route_step][BRS_POS_Z],
				g_bus_route[route_id][next_cp][BRS_POS_X],
				g_bus_route[route_id][next_cp][BRS_POS_Y],
				g_bus_route[route_id][next_cp][BRS_POS_Z],
				4.0,
				RCP_ACTION_TYPE_BUS_ROUTE
			);
			AddPlayerData(playerid, P_BUS_ROUTE_STEP, +, 1);
		}
	}
}
stock BusRoutesInit()
{
	for(new idx; idx < sizeof g_bus_routes; idx ++)
	{
		new fmt_str[64];
		format(fmt_str, sizeof fmt_str, "%d.  %s\n", idx + 1, g_bus_routes[idx][BR_NAME]);
		strcat(g_bus_routes_list, fmt_str);
		if(g_bus_routes[idx][BR_COLOR] > 0)
		{
			g_bus_routes[idx][BR_COLOR] = COLOR_GOLD;
		}
		else g_bus_routes[idx][BR_COLOR] = 0x3399FFFF;
	}
}
public:CloseMpTeleport()
{
	for(new i = 0; i < 3; i++) mpPos[i] = 0;
	for(new i = 0; i < 2; i++) mpWorld[i] = 0;
	number_mp_player = 0;
	mp_status = 2;
	for(new i; i < MAX_PLAYERS; i++) DeletePVar(i, "statusMP");
	KillTimer(mptp);
}
public: WeaponAssemb_OnPlayerEnd(playerid)
{
    if(GetPVarInt(playerid,"ak47") == 1){
		GiveWeapon(playerid, 30, 100);
		CancelSelectTextDraw(playerid);
		GameText(playerid, "~r~~h~Вы собрали АК-47", 3000, 1);
		DeletePVar(playerid, "ak47");
	}
	if(GetPVarInt(playerid,"deagle") == 1){
		GiveWeapon(playerid, 24, 100);
		CancelSelectTextDraw(playerid);
		GameText(playerid, "~r~~h~Вы собрали Deagle", 3000, 1);
		DeletePVar(playerid, "deagle");
	}
	if(GetPVarInt(playerid,"m4") == 1){
		GiveWeapon(playerid, 31, 100);
		CancelSelectTextDraw(playerid);
		GameText(playerid, "~r~~h~Вы собрали M4", 3000, 1);
		DeletePVar(playerid, "m4");
	}
	if(GetPVarInt(playerid,"shotgun") == 1){
		GiveWeapon(playerid, 25, 100);
		CancelSelectTextDraw(playerid);
		GameText(playerid, "~r~~h~Вы собрали Shotgun", 3000, 1);
		DeletePVar(playerid, "shotgun");
	}
	return 1;
}
stock CookDrugs_OnCompleteTask(playerid)
{
    GameText(playerid, "~r~~h~Вы сварили наркотики +10 гр", 3000, 1);
    BitStream_1(playerid, s_CefInterface, t_CefHide, "Drugs");
}
stock Lottery_OnShowResult(playerid)
{
	if(GetIteam(playerid, 257) < 1) return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет лотерейного билета");
	GiveIteam(playerid, 257, 0,1,0);
    new babki = RandomEx(100, 1000);
	if(babki == 666) babki = 300000000;
	else babki = 150000;
    new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "interface('Lottery').setResult(%d)", babki);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
	GivePlayerMoneyEx(playerid, babki, "Лотерея");
	return true;
}
public: Lottery_OnAcceptResult(playerid) BitStream_1(playerid, s_CefInterface, t_CefHide, "Lottery"); 
public: PhoneNumber(playerid) BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('Phone').openKeyBoard()");
public: OnTrainingHintsClose(playerid) SetCameraBehindPlayer(playerid);
stock GetInvIdWeapon(weapon)
{
    if(weapon == 4) return weapon = 7;
	if(weapon == 6) return weapon = 125;
    if(weapon == 42) return weapon = 5;
    if(weapon == 5) return weapon = 8;
    if(weapon == 8) return weapon = 9;
    if(weapon == 9) return weapon = 10;
    if(weapon == 18) return weapon = 11;
    if(weapon == 22) return weapon = 12;
    if(weapon == 23) return weapon = 13;
    if(weapon == 25) return weapon = 14;
    if(weapon == 26) return weapon = 15;
    if(weapon == 27) return weapon = 16;
    if(weapon == 28) return weapon = 17;
    if(weapon == 29) return weapon = 18;
    if(weapon == 24) return weapon = 19;
    if(weapon == 31) return weapon = 20;
    if(weapon == 30) return weapon = 21;
    if(weapon == 34) return weapon = 22;
    if(weapon == 35) return weapon = 23;
    if(weapon == 16) return weapon = 24;
	return weapon;
}
stock StartSpectatee(playerid, for_player)
{
	SetPlayerSpectateData(playerid, S_PLAYER, for_player);
	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));
	TogglePlayerSpectating(playerid, true);
	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
	}
	else PlayerSpectatePlayer(playerid, for_player);
	return 1;
}
stock StopSpectatee(playerid)
{
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;
	TogglePlayerSpectating(playerid, false);
	SetPlayerSpectateData(playerid, S_PLAYER, -1);
	SetPlayerPosEx
	(
		playerid,
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE)
	);
	return 1;
}
stock MakeStroboskopes(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	STRING_GLOBAL[0] = EOS;
	if(stroboskopes[vehicleid] == 0)
	{
		if(GetVehicleModel(vehicleid) == 525)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,0.95,1.40,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,0.95,1.40,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15186) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.18,0.85,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.18,0.85,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 596)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.02,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.02,0.75,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 597)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.20,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.20,0.75,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 598)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.45,0.90,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.45,0.90,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15609) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.36,0.74,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.36,0.74,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15608) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.37,0.88,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.37,0.88,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15607) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.22,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.22,0.75,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15606) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.38,0.95,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.38,0.95,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15241) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.02,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.02,0.75,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15610) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.25,0.85,-0.05,150.00,200,%d,-1,45.00,%d],[%d,1,0.25,0.85,-0.05,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 523)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.25,0.85,-0.05,150.00,200,%d,-1,45.00,%d],[%d,1,0.25,0.85,-0.05,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 427)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,0.95,1.40,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,0.95,1.40,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15604) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.6,0.45,0.73,150.00,200,%d,-1,45.00,%d],[%d,1,-0.56,0.45,0.73,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15282) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.34,2.90,0.03,150.00,200,%d,-1,45.00,%d],[%d,1,0.34,2.90,0.03,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15283) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,2.90,0.24,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,2.90,0.24,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15143) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.40,0.70,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.40,0.70,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 528) 	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.02,1.02,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.02,1.02,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15620) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.30,0.77,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.30,0.77,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15217) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.21,0.90,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.21,0.90,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		stroboskopes[vehicleid] = 1;
		return 1;
	}
	if(stroboskopes[vehicleid] == 1)
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "delStroboscopes(\"[[%d],[%d]]\")", vehicleid, vehicleid * 2);
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}
		stroboskopes[vehicleid] = 0;
		return 1;
	}
	return 0;
}
stock CarSiren_OnPlayerBeepEnable(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid),Float: x, Float: y, Float: z, modelid = GetVehicleData(vehicleid, V_MODELID);
	GetVehiclePos(vehicleid, x,y,z);
	string_dialog[0] = EOS;
 	if(IsAOwnableCar(vehicleid))
	{
		format(string_dialog, sizeof string_dialog,"window.createSound3D(%d, 'car/horn/sound_4.mp3', %f, %f, %f, 0.80, 5.00, 90.00, true, true) || window.attachSoundToVehicle(%d, %d, 0.00, 0.00, 0.00, 0.00)",vehicleid,x,y,z,vehicleid,vehicleid);
	}
	if(IsAFamilyCar(vehicleid))
	{
		format(string_dialog, sizeof string_dialog,"window.createSound3D(%d, 'car/horn/sound_4.mp3', %f, %f, %f, 0.80, 5.00, 90.00, true, true) || window.attachSoundToVehicle(%d, %d, 0.00, 0.00, 0.00, 0.00)",vehicleid,x,y,z,vehicleid,vehicleid);
	}
	if(modelid == 596 || modelid == 416 || modelid == 15283 || modelid == 15282 ||  modelid == 597 || modelid == 15607 || modelid == 15143 || modelid == 15241 || modelid == 528 || modelid == 15608 || modelid == 15606 || modelid == 598 || modelid == 15609 || modelid == 15143 || modelid == 427)
	{
		format(string_dialog, sizeof string_dialog,"window.createSound3D(%d, 'car/horn/sound_11.mp3', %f, %f, %f, 0.80, 5.00, 90.00, true, true) || window.attachSoundToVehicle(%d, %d, 0.00, 0.00, 0.00, 0.00)",vehicleid,x,y,z,vehicleid,vehicleid);
		if(strob == 0)
		{
			strob = 1;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.02,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.02,0.75,150.00,400,%d,-1,45.00,%d]]\")",
			vehicleid, vehicleid, vehicleid + 1000, vehicleid + 1000, vehicleid, vehicleid);
		}
		else
		{
			strob = 0;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "delStroboscopes(\"[[%d],[%d]]\")", vehicleid, vehicleid + 1000);
		}
		foreach(new i : Player)
		{
			BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
		}	
	}
	foreach(new i : Player)
	{
		if(beepplayer[vehicleid][i] == 1) BitStream_1(i, s_CefInterface, t_CefUpdate,string_dialog);
	}
	soundveh[vehicleid] = 1;
}
stock CarSiren_OnPlayerBeepDisable(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new Float: x, Float: y, Float: z;
    GetVehiclePos(vehicleid, x,y,z);
    soundveh[vehicleid] = 0;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL,"window.destroySound(%d, 30)",vehicleid);
    foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
        if(beepplayer[vehicleid][i] == 1 || kryak[vehicleid][i] == 1) BitStream_1(i, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    }
}
public: VetrMove()
{
	for(new i; i < g_business_loaded; i ++)
	{
		if(GetBusinessData(i, B_TYPE) != 36) continue;
		if(GetBusinessData(i, B_IZNOS) == 0) continue;
		if(status_vetr == 0)
		{
			if(GetBusinessData(i, B_ELECTRICITY) == 1) MoveDynamicObject(vetr1, 928.1540, 81.2516, 60.5637,0.013, 0.000000, 180, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 2) MoveDynamicObject(vetr2, 884.0400, 127.763, 60.5318,0.013, 0.000000, 180, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 3) MoveDynamicObject(vetr4, -2059.39, 2638.64, 101.310,0.013, 0.000000, 180, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 4) MoveDynamicObject(vetr5, -1994.93, 2673.58, 97.0886,0.013, 0.000000, 180, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 5) MoveDynamicObject(vetr6, 2582.850, 1227.96, 64.1720,0.013, 0.000000, 180, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 6) MoveDynamicObject(vetr7, 2553.670, 1272.70, 61.8685,0.013, 0.000000, 180, 0);
			timervetr = 13;
			status_vetr = 1;
		}
		else if(status_vetr == 1)
		{
			if(GetBusinessData(i, B_ELECTRICITY) == 1) MoveDynamicObject(vetr1, 928.2540, 81.3516, 60.6637,0.013, 0.000000, 359, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 2) MoveDynamicObject(vetr2, 884.1400, 127.863, 60.6318,0.013, 0.000000, 359, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 3) MoveDynamicObject(vetr4, -2059.49, 2638.74, 101.410,0.013, 0.000000, 359, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 4) MoveDynamicObject(vetr5, -1995.03, 2673.68, 97.1886,0.013, 0.000000, 359, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 5) MoveDynamicObject(vetr6, 2582.950, 1228.06, 64.2720,0.013, 0.000000, 359, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 6) MoveDynamicObject(vetr7, 2553.770, 1272.80, 61.9685,0.013, 0.000000, 359, 0);
			timervetr = 7;
			status_vetr = 2;
		}
		else if(status_vetr == 2)
		{
			if(GetBusinessData(i, B_ELECTRICITY) == 1) MoveDynamicObject(vetr1, 928.2540, 81.3516, 60.6637,0.013, 0.000000, 361, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 2) MoveDynamicObject(vetr2, 884.1400, 127.863, 60.6318,0.013, 0.000000, 361, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 3) MoveDynamicObject(vetr4, -2059.49, 2638.74, 101.410,0.013, 0.000000, 361, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 4) MoveDynamicObject(vetr5, -1995.03, 2673.68, 97.1886,0.013, 0.000000, 361, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 5) MoveDynamicObject(vetr6, 2582.950, 1228.06, 64.2720,0.013, 0.000000, 361, 0);
			if(GetBusinessData(i, B_ELECTRICITY) == 6) MoveDynamicObject(vetr7, 2553.770, 1272.80, 61.9685,0.013, 0.000000, 361, 0);	
			timervetr = 6;
			status_vetr = 0;
		}
		AddBusinessData(i, B_IZNOS, -, 1);
		new query[82];
		mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(i, B_IZNOS), GetBusinessData(i, B_SQL_ID));
		mysql_query(mysql, query, false);
	}
	return true;
}
public: ChangeVehicleViniljob(vehicleid, event)
{
	new fmt_text[124];
	if(event != -1) 
	{
		format(fmt_text, sizeof fmt_text, "setVehiclePaintJob(%d, \"common/livery%d\", \"livery%d\")", vehicleid, event, event);
	}
	else format(fmt_text, sizeof fmt_text, "resetVehiclePaintJob(%d)", vehicleid);
	SetVehicleData(vehicleid, V_VINIL, event);
	SetVehicleData(vehicleid, V_VINILTYPE, 1);
	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
		BitStream_1(i, s_CefInterface, t_CefUpdate, fmt_text);
	}
}
public: ChangeVehicleDefaultViniljob(vehicleid, event)
{
	new fmt_text[124];
	if(event != -1)
	{
		for(new i; i < sizeof e_vinils; i++)
		{
			if(e_vinils[i][eVinilModel] == GetVehicleModel(vehicleid) && event == e_vinils[i][eVinilID])
			{
				format(fmt_text, sizeof fmt_text, "setVehiclePaintJob(%d, \"individual/%d\", \"%s\")", vehicleid, GetVehicleModel(vehicleid), e_vinils[i][eVinilName]);
				break;
			}
		}
	}
	else format(fmt_text, sizeof fmt_text, "resetVehiclePaintJob(%d)", vehicleid);
	SetVehicleData(vehicleid, V_VINIL, event);
	SetVehicleData(vehicleid, V_VINILTYPE, 0);
	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
		BitStream_1(i, s_CefInterface, t_CefUpdate, fmt_text);
	}
}
forward ServerRestart();
public ServerRestart()
{
    foreach(new i: Player)
    {
        if(IsPlayerConnected(i)) StopAudioStreamForPlayer(i);
		SCM(i, COLOR_RED, "Сервер возообновит работу в течении минуты");
		GameText(i, "Перезагрузка сервера", 10000, 1);
		GameText(i, "~r~Перезагрузка сервера Сервер возообновит работу~n~в течении минуты", 4000, 0);
		SCM(i, COLOR_RED, "");
		BitStream_1(i, s_CefInterface, t_CefHide, "InformationTimer");
    }
    GameModeExit();
    return 1;
}
stock SellDebtorsProperty()
{
	new count[6];
	for(new i; i < g_house_loaded; i ++)
	{
		if(GetHouseData(i, H_OWNER_ID) != 0)
	    {
	    	new rent_days = GetElapsedTime(GetHouseData(i, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
			if(rent_days < 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE houses SET owner_id=0 WHERE id=%d", GetHouseData(i, H_SQL_ID));
				mysql_query(mysql, query, false);
				SetHouseData(i, H_OWNER_ID,			0);
				SetHouseData(i, H_IMPROVEMENTS,		0);
				SetHouseData(i, H_EVICTION,			0);
				SetHouseData(i, H_RENT_DATE,		0);
				SetHouseData(i, H_LOCK_STATUS,	false);
				UpdateHouse(i);
				HouseHealthInit(i);
				HouseStoreInit(i);
				new status_auction = RandomEx(1,2);
				if(status_auction == 2) AddAuctionLot(GetHouseData(i, H_SQL_ID), GetHouseData(i, H_PRICE) / 1000000, 0);
				count[0]++;
			}
		}
	}
    for(new i; i < g_garage_loaded; i ++)
	{
		if(GetGarageData(i, G_OWNER_ID) != 0)
	    {
	    	new rent_days = GetElapsedTime(GetGarageData(i, G_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
			if(rent_days < 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE garage SET `owner_id`='0', `lock`='0', `eviction`='0' WHERE `id`='%d'", GetGarageData(i, G_SQL_ID));
				mysql_query(mysql, query, false);
				format(query, sizeof query, "UPDATE accounts SET car_slots=4 WHERE id='%d'", GetGarageData(i, G_OWNER_ID));
				mysql_query(mysql, query, false);
				SetGarageData(i, G_OWNER_ID,			0);
				SetGarageData(i, G_IMPROVEMENTS,		0);
				SetGarageData(i, G_EVICTION,			0);
				SetGarageData(i, G_RENT_DATE,			0);
				SetGarageData(i, G_LOCK_STATUS,		false);
				UpdateGarage(i);
				CallLocalFunction("UpdateGarageLabel", "i", i);
				new status_auction = RandomEx(1,2);
				if(status_auction == 2) AddAuctionLot(GetGarageData(i, G_SQL_ID), GetGarageData(i, G_PRICE) / 1000000, 2);
				count[1]++;
			}
		}
	}
	for(new i; i < g_business_loaded; i ++)
	{
		if(GetBusinessData(i, B_OWNER_ID) != 0)
	    {
		    new rent_days = GetElapsedTime(GetBusinessData(i, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
			if(rent_days < 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE business SET `owner_id` = '0', `products` = '0', `prod_price` = '0', `lock` = '0', `eviction` = '0' WHERE `id` = '%d'", GetBusinessData(i, B_SQL_ID));
				mysql_query(mysql, query, false);
				SetBusinessData(i, B_OWNER_ID, 			0);
				SetBusinessData(i, B_IMPROVEMENTS, 		0);
				SetBusinessData(i, B_EVICTION, 			0);
				SetBusinessData(i, B_PRODS, 			0);
				SetBusinessData(i, B_PROD_PRICE,		0);
				format(g_business[i][B_BALANCE], 21, "0");
				SetBusinessData(i, B_RENT_DATE,			0);
				SetBusinessData(i, B_ENTER_MUSIC,		0);
				SetBusinessData(i, B_LOCK_STATUS,	false);
				BusinessHealthPickupInit(i);
				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
				mysql_query(mysql, query, false);
				CallLocalFunction("UpdateBusinessLabel", "i", i);
				new status_auction = RandomEx(1,2);
				if(status_auction == 2) AddAuctionLot(GetBusinessData(i, B_SQL_ID), GetBusinessData(i, B_PRICE) / 1000000, 1);
				count[2]++;
			}
		}
	}
	for(new i; i < g_garden_loaded; i ++)
	{
		if(GetGardenData(i, G_OWNER_ID) != 0)
		{
			if(GetGardenData(i, G_RENT_DATE) <= 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE gardens SET `owner_id`='0', `owner_name`='None', `rent`='0', `g_lock`='0', `improvements`='0' WHERE `id`='%d'", GetGardenData(i, G_SQL_ID));
				mysql_query(mysql, query, false);
				SetGardenData(i, G_OWNER_ID,			0);
				SetGardenData(i, G_IMPROVEMENTS,		0);
				SetGardenData(i, G_RENT_DATE,		0);
				SetGardenData(i, G_LOCK_STATUS,		false);
				CallLocalFunction("UpdateGardenLabel", "i", i);
				UpdateGardenLabel(i);
				count[3]++;
			}
		}
	}
	for(new i; i < g_kiosk_loaded; i ++)
	{
		if(GetKioskData(i, K_OWNER_ID) != 0)
		{
			if(GetKioskData(i, K_RENT_DATE) <= 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE kiosk SET `owner_id`='0', `balance`='0', `lock`='0', `rent`='0', `improvements`='0', `name`='Киоск' WHERE `id`='%d'", GetKioskData(i, K_SQL_ID));
				mysql_query(mysql, query, false);
				SetKioskData(i, K_OWNER_ID,		0);
				SetKioskData(i, K_IMPROVEMENTS,	0);
				format(g_kiosk[i][K_BALANCE], 21, "0");
				SetKioskData(i, K_RENT_DATE,	0);
				SetKioskData(i, K_LOCK_STATUS,	false);
				format(g_kiosk[i][K_NAME],33,"Киоск");
				count[4]++;
			}
		}
	}
	for(new i; i < g_neft_loaded; i ++)
	{
		if(GetNeftData(i, N_OWNER_ID) != 0)
		{
			if(GetNeftData(i, N_RENT_DATE) <= 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE neftenasos SET `owner_id`='0', `balance`='0', `work`='0', `neftfuels`='0', `improvements`='0', `owner_name`='None' WHERE `id`='%d'", GetNeftData(i, N_SQL_ID));
				mysql_query(mysql, query, false);
				SetNeftData(i, N_OWNER_ID,		0);
				SetNeftData(i, N_IMPROVEMENTS,	0);
				SetNeftData(i, N_BALANCE,		0);
				SetNeftData(i, N_RENT_DATE,	0);
				SetNeftData(i, N_WORK_STATUS,	0);
				format(g_neft[i][N_OWNER_NAME],33,"None");
				DestroyDynamicObject(neftobj[i]); 
				DestroyDynamicObject(neftobj1[i]);
				DestroyDynamicObject(neftobj2[i]);
				DestroyDynamicObject(neftobj3[i]);
				DestroyDynamicObject(neftobj4[i]);
				DestroyDynamicObject(neftobj5[i]);
				DestroyDynamicObject(neftobj6[i]);
				DestroyPickup(neftpickup[i]);
				DestroyDynamic3DTextLabel(neftlabelty[i]);
				DestroyDynamic3DTextLabel(neftlabel[i]);
				AddAuctionLot(GetNeftData(i, N_SQL_ID), 50, 7);
				count[5]++;
			}
		}
		else
		{
			AddAuctionLot(GetNeftData(i, N_SQL_ID), 50, 7);
		}
	}
	new	query[148];
	format(query, sizeof query, "{F3FF02}[Информация] {FFFFFF}Из-за неоплаты налогов были конфискованы {a6caf0}%d домов, %d бизнесов, %d гаражей", count[0], count[2], count[1]);
	SendClientMessageToAll(0xa6caf0FF, query);
	format(query, sizeof query, "{FFFFFF}%d огородов, %d киосков, %d нефтенасосов, {FFFFFF}которые отправляются на аукцион/слёт", count[3], count[4], count[5]);
	SendClientMessageToAll(0xa6caf0FF, query);
	DebtorsAuctionSIM();
	return 1;
}

stock AutoRWC()
{
	if(timer_rwc != -1)
	{	
		timer_rwc--;
	}
	if(timer_rwc == 60)
	{
		SendClientMessageToAll(0xFFCD00FF, "(РВС): Внимание...");
		SendClientMessageToAll(0xFFCD00FF, "(РВС): Уважаемые игроки, через минуту пройдет респавн незадейственного транспорта...");
		SendClientMessageToAll(0xFFCD00FF, "(РВС): Просим Вас занять Ваши автомобили, что бы они не пропали...");
	}
	if(timer_rwc == 30)
	{
		SendClientMessageToAll(0xFFCD00FF, "(РВС): Внимание...");
		SendClientMessageToAll(0xFFCD00FF, "(РВС): Респавн незадейственного транспорта пройдет через 30 секунд...");
		SendClientMessageToAll(0xFFCD00FF, "(РВС): Просим Вас занять Ваши автомобили, что бы они не пропали...");
	}
	if(timer_rwc == 0)
	{
		SendClientMessageToAll(0xFFCD00FF, "(РВС): Проходит респавн незадействованного транспорта...");
		new vehicles_count = 0; // Инициализируем счетчик для незанятых автомобилей

		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(!IsValidVehicle(i)) 
				continue; // Пропускаем недействительные автомобили
			
			if(IsVehicleOccupied(i)) // Проверяем, занято ли транспортное средство
				continue; // Если занято, пропускаем этот автомобиль
			
			if(IsTrailerAttachedToAnyVehicle(i)) 
				continue; // Пропускаем если за автомобилем есть трейлер

			SetVehicleToRespawn(i); // Выполняем респавн незанятого автомобиля
			vehicles_count++; // Увеличиваем счетчик
		}
		SendClientMessageToAll(0xFFCD00FF, "(РВС): Респавн незадействованного транспорта прошел успешно.");
		timer_rwc = 7000;
	}
}

stock DebtorsAuctionSIM()
{
	new query[148],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE last_login < %d AND phone <> 0", gettime() - 1209600);
	result = mysql_query(mysql, query);
	new rows = cache_num_rows();
	if(!mysql_errno())
	{
		if(rows)
		{
			for(new i; i < rows; i ++)
			{
				format(query, sizeof query, "UPDATE accounts SET phone=0 WHERE id='%d'", cache_get_field_content_int(i, "id"));
				mysql_query(mysql, query, false);
			}
		}
	}
	cache_delete(result);
}
stock UpdateCodeDialog(playerid)
{
	STRING_GLOBAL[0] = EOS;
	for(new i; i < MAX_PRIZES_CODE; i++)
	{
		if(code_additionally[i] != 0)
		{
			new query[64];
			if(code_additionally_type[i] == 1) format(query, sizeof query, "\nПриз: Деньги: %s руб", formatInt(code_additionally_count[i]));
			if(code_additionally_type[i] == 2) format(query, sizeof query, "\nПриз: Донат: %s руб", formatInt(code_additionally_count[i]));
			if(code_additionally_type[i] == 3) format(query, sizeof query, "\nПриз: EXP: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 4) format(query, sizeof query, "\nПриз: %s[№%d]: %d шт", ItemsInfo[code_additionally_id[i]][i_item_name], code_additionally_id[i], code_additionally_count[i]);
			if(code_additionally_type[i] == 5) format(query, sizeof query, "\nПриз: Транспорт[№%d]", code_additionally_id[i], code_additionally_count[i]);
			if(code_additionally_type[i] == 6) format(query, sizeof query, "\nПриз: Слоты на бизнес: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 7) format(query, sizeof query, "\nПриз: Слоты на дом: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 8) format(query, sizeof query, "\nПриз: Слоты на гараж: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 9) format(query, sizeof query, "\nПриз: Слоты на авто: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 10) format(query, sizeof query, "\nПриз: Слоты на киоск: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 11) format(query, sizeof query, "\nПриз: Одежда[№%d]", code_additionally_id[i]);
			if(code_additionally_type[i] == 12) format(query, sizeof query, "\nПриз: Аксессуар[№%d]", code_additionally_id[i]);
			if(code_additionally_type[i] == 13 && code_additionally_id[i] == 1) format(query, sizeof query, "\nПриз: Купон на выход из Тюрьма (%d мин)", code_additionally_count[i]);
			strcat(STRING_GLOBAL, query);
		}
	}
	if(typecode == 1) DLGF(playerid, DIALOG_SETTINGS_CODE_2, DIALOG_STYLE_LIST, "Промокод", "{FFFFFF}Продолжить\nСоздать приз\nУдалить все призы%s","Выбрать", "Закрыть", STRING_GLOBAL);
	if(typecode == 2) DLGF(playerid, DIALOG_SETTINGS_CODE_2, DIALOG_STYLE_LIST, "Бонус-код", "{FFFFFF}Продолжить\nСоздать приз\nУдалить все призы%s","Выбрать", "Закрыть", STRING_GLOBAL);
    return true;
}

stock IsVehicleOccupied(vehicleid)
{
    foreach(new i: Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid) return 1;
            else return 0;
        }
    }
	return 0;
} 

stock GetCarMarket(vehid)
{
	new count,
		query[70],
		Cache: result;
	format(query, sizeof query, "SELECT count FROM car_market WHERE modelid=%d", vehid);
	result = mysql_query(mysql, query, true);
	if(cache_num_rows()) count = cache_get_row_int(0, 0);
	cache_delete(result);
	return count;
}

stock CreateDetelingGarage()
{
	for(new i; i < sizeof g_deteling_pos; i++)
	{
		CreateDynamic3DTextLabel
		(
			"{FFD700}Детейлинг Центр{FFFFFF}\n,L ALT чтобы въехать внутрь\nи поставить тонировку или винил\n\n{9ACD32}Свободно", -1,
			g_deteling_pos[i][0],
			g_deteling_pos[i][1],
			g_deteling_pos[i][2],
			8.0
		);
		g_deteling_alt[i] = CreateDynamicSphere(g_deteling_pos[i][0], g_deteling_pos[i][1], g_deteling_pos[i][2], 4.0, -1, -1);
	}
}

stock CreateStoGarage()
{
	sto_garage_label[0][0] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №1 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, 2148.9890,-1841.8706,18.8191 + 0.3, 15.0);
	CreatePickup(1239, 64, 2148.9890,-1841.8706,18.8191, -1);
	sto_garage_label[0][1] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №2 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, 2154.1694,-1841.8856,18.8135 + 0.3, 15.0);
	CreatePickup(1239, 64, 2154.1694,-1841.8856,18.8135, -1);
	sto_garage_label[0][2] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №3 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, 2159.4741,-1841.8997,18.8135 + 0.3, 15.0);
	CreatePickup(1239, 64, 2159.4741,-1841.8997,18.8135, -1);
	sto_garage_label[0][3] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №4 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, 2164.5117,-1841.7710,18.8052 + 0.3, 15.0);
	CreatePickup(1239, 64, 2164.5117,-1841.7710,18.8052, -1);
	sto_garage_label[1][0] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №1 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -2506.4739, 1087.8359, 8.7268 + 0.3, 15.0);
	CreatePickup(1239, 64, -2506.4739, 1087.8359, 8.7268, -1);
	sto_garage_label[1][1] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №2 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -2505.1187, 1091.5752, 8.7268 + 0.3, 15.0);
	CreatePickup(1239, 64, -2505.1187, 1091.5752, 8.7268, -1);
	sto_garage_label[1][2] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №3 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -2502.2227, 1099.5433, 8.7268 + 0.3, 15.0);
	CreatePickup(1239, 64, -2502.2227, 1099.5433, 8.7268, -1);
	sto_garage_label[1][3] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №4 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -2500.9036, 1103.1984, 8.7268 + 0.3, 15.0);
	CreatePickup(1239, 64, -2500.9036, 1103.1984, 8.7268, -1);
	sto_garage_label[2][0] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №1 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -319.8949,300.4803,13.1182 + 0.3, 15.0);
	CreatePickup(1239, 64, -319.8949,300.4803,13.1182, -1);
	sto_garage_label[2][1] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №2 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -323.7070,301.0323,13.1182 + 0.3, 15.0);
	CreatePickup(1239, 64, -323.7070,301.0323,13.1182, -1);
	sto_garage_label[2][2] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №3 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -332.1658,302.5240,13.0760 + 0.3, 15.0);
	CreatePickup(1239, 64, -332.1658,302.5240,13.0760, -1);
	sto_garage_label[2][3] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №4 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -336.0356,303.2074,13.0577 + 0.3, 15.0);
	CreatePickup(1239, 64, -336.0356,303.2074,13.0577, -1);
}

stock UpdateStoGarage(type, event, status)
{
	if(status == 0) 
	{
		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "{FFFF00}- Гараж: №%d -\n{ffffff}Статуc: {66CC00}свободен", event + 1);
		UpdateDynamic3DTextLabelText(sto_garage_label[type][event], 0xFFFFFFFF, fmt_text);
		sto_garage_status[type][event] = 0;
	}
	if(status == 1) 
	{
		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "{FFFF00}- Гараж: №%d -\n{ffffff}Статуc: {FF7F50}занят", event + 1);
		UpdateDynamic3DTextLabelText(sto_garage_label[type][event], 0xFFFFFFFF, fmt_text);
		sto_garage_status[type][event] = 1;
	}
}

stock OnPlayerTicketTime(playerid)
{
	new query[90],
		Cache: result;
	format(query, sizeof query, "SELECT * FROM tickets WHERE uid=%d AND status=0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
	if(rows)
	{
		for(new i; i < rows; i ++)
		{
			new time = cache_get_field_content_int(i, "time");
			if(time + 259200 < gettime())
			{
				SCM(playerid, 0xFFA500FF, "{ffa500}В связи с неуплатой штрафов ваше вод.удостоверение аннулировано");
				SetPlayerData(playerid, P_DRIVING_LIC, 0);
				UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
				cache_delete(result);
				return 1;
			}
		}
	}
	cache_delete(result);
	return 1;
}

stock ShowOwnableTickets(playerid, page, type)
{
	type_page_cars[playerid] = 0;
	new query[90],
		Cache: result,
		index,
		page_1,
		page_2, 
		next,
		rows;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d AND status=0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	rows = cache_num_rows();
	ClearPlayerListitemValues(playerid);
	string_dialog[0] = EOS;
	if(rows)
	{
		for(new i; i < rows; i ++)
		{
			if(i >= (page * 20) && i < (page * 20) + 20)
            next++;
			if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
        	{
				new reason[64];
				cache_get_field_content(i, "description", reason);
				format(query, sizeof query, "#%d\t%d руб.\t%s\n", cache_get_field_content_int(i, "id"),
				cache_get_field_content_int(i, "amount"), reason);
				strcat(string_dialog, query);
				g_player_listitem[playerid][index] = cache_get_field_content_int(i, "id");
				index++;
			}
		}
	}
	else format(string_dialog, sizeof string_dialog, "У Вас нет неоплаченных штрафов");
	cache_delete(result);
	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}
	if(type == 0) Dialog(playerid, DIALOG_ATM_TICKET_LIST, DIALOG_STYLE_LIST,"{FFD83D}Список штрафов",string_dialog,"Выбор", "Отмена", page_1, page_2);
	if(type == 1) Dialog(playerid, -1, DIALOG_STYLE_LIST,"{FFD83D}Список штрафов",string_dialog,"", "Закрыть", page_1, page_2);
	return 1;
}

stock ShowBizlist(playerid, page)
{
	new index,
		page_1,
		page_2, 
		next;
	new fmt_text[94];
	ClearPlayerListitemValues(playerid);
	string_dialog = "{FFFFFF}Бизнес\tТребуется\tОплата работы";
	for(new i; i < sizeof g_order; i ++)
	{
		if(!GetOrderData(i, O_AMOUNT)) continue;
		if(i >= (page * 20) && i < (page * 20) + 20)
		next++;
		if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
		{
			format(fmt_text, sizeof fmt_text, "\n№%d: %s\t%d ед.\t%s руб",
			GetOrderData(i, O_COMPANY_ID), GetBusinessData(GetOrderData(i, O_COMPANY_ID), B_NAME), GetOrderData(i, O_AMOUNT), formatInt(GetOrderData(i, O_PRICE)));
			strcat(string_dialog, fmt_text);
			SetPlayerListitemValue(playerid, index, i);
			index++;
		}
	}
	if(!index) return SendClientMessage(playerid, 0xCECECEFF, "Сейчас нет ни одного заказа");
	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}
	Dialog(playerid, DIALOG_BIZ_ORDERS, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Контракты на доставку", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
	return true;
}

stock ShowAdminLists(playerid, page)
{
	new query[248],
		Cache: result,
		rows,
		admin,
		day_prev,
		day_last,
		page_1,
		page_2, 
		next,
		name[21];
	string_dialog[0] = EOS;
	string_dialog = "Имя\tПА\tУровень\tВ игре вчера\tВ игре сегодня\tOnline/Offline{FFFFFF}";
	result = mysql_query(mysql, "SELECT * FROM accounts WHERE admin > 0 ORDER BY admin DESC", true);
	rows = cache_num_rows();
	for(new i; i < rows; i ++)
	{
		if(i >= (page * 20) && i < (page * 20) + 20)
            next++;
		if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
		{
			new buyadmin = cache_get_field_content_int(i, "buyadmin");
			new day_time[4];
			admin = cache_get_field_content_int(i, "admin");
			day_prev = cache_get_field_content_int(i, "game_for_day_prev");
			day_last = cache_get_field_content_int(i, "game_for_day");
			day_time[0] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_HOURS);
			day_time[1] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_MINUTES);
			day_time[2] = ConvertUnixTime(day_last, CONVERT_TIME_TO_HOURS);
			day_time[3] = ConvertUnixTime(day_last, CONVERT_TIME_TO_MINUTES);
			cache_get_field_content(i, "name", name);
			new fix_tabulation[21] = "";
			format
			(
				query, sizeof query,
				"\n{FFFFFF}%s%s\t%s{FFFFFF}\t%d ур.\t%s%d ч %d мин\t%s%d ч %d мин\t%s", 
				name,
				fix_tabulation[strlen(name)],
				buyadmin < 1 ? ("{FF5533}-") : ("{66CC33}ПА"),
				admin,
				day_time[0] >= 3 ? day_time[0] > 3 ? "{66CC33}" : "{FFCD00}" : "{FF5533}",
				day_time[0],
				day_time[1],
				day_time[2] >= 3 ? day_time[0] > 3 ? "{66CC33}" : "{FFCD00}" : "{FF5533}",
				day_time[2],
				day_time[3],
				IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}Online" : "{FF5533}Offline"
			);
			strcat(string_dialog, query);
		}
	}
	cache_delete(result);
	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "{FFCD00}Список администрации", string_dialog, "Закрыть", "", page_1, page_2);
}

stock ShowOwnableCars(playerid, dialogid, page)
{
	dialogid = 0;
	new fmt_text[148], 
		page_1,
		page_2, 
		next,
		index,
		Cache: result;
	next = dialogid;
	switch(type_page_cars[playerid])
	{
		case 1: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d' AND stoyanka = '1'", GetPlayerAccountID(playerid));
		case 2: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 3: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 4: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(GetPVarInt(playerid, "to_player")));
		case 5: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 6: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 9: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 15: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 17: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	}
	result = mysql_query(mysql, fmt_text, true);
	new rows = cache_num_rows();
	if(type_page_cars[playerid] != 4) if(!rows) return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта"), cache_delete(result);
	else if(!rows) return SendClientMessage(playerid, 0x999999FF, "У данного игрока нет личного транспорта"), cache_delete(result);
	string_dialog[0] = EOS;
	STRING_GLOBAL[0] = EOS;
	for(new i; i < rows; i ++)
	{
		if(i >= (page * 20) && i < (page * 20) + 20)
            next++;
        if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
        {
			new id = cache_get_field_content_int(i, "id");
			new model_id = cache_get_field_content_int(i, "model_id");
			new veh_id = INVALID_VEHICLE_ID;
			for(new idx = 0; idx < MAX_VEHICLES; idx++)
			{
				if(GetVehicleData(idx, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(idx, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_SQL_ID) == id)
					{
						veh_id = i;
					}
				}
			}
			if(veh_id == INVALID_VEHICLE_ID)
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{888888}%d. %s (%d)\n", i + 1, GetVehicleInfo(model_id, VI_NAME), model_id);
			}
			else
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFFFFF}%d. %s (%d)\n", i + 1, GetVehicleInfo(model_id, VI_NAME), model_id);
			}
			strcat(string_dialog, STRING_GLOBAL);
			g_player_listitem[playerid][index] = id;
			index++;
		}
	}
	cache_delete(result);
	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}
	switch(type_page_cars[playerid])
	{
		case 1: Dialog(playerid, DIALOG_OWNABLE_CAR_LIST2, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 2: Dialog(playerid, DIALOG_SELL_CAR, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 3: Dialog(playerid, DIALOG_OWNABLE_CAR_LIST3, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 4: Dialog(playerid, DIALOG_OWNABLE_CAR_SELECT, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 5: Dialog(playerid, DIALOG_SELL_OWNABLE_CAR, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 6: Dialog(playerid, DIALOG_OWNABLE_CAR_LIST, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 9: Dialog(playerid, DIALOG_OWNABLE_CAR_NUMBER, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 15: Dialog(playerid, DIALOG_CAR_LIST_NOTARY, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 17: Dialog(playerid, DIALOG_OWNABLE_CAR_SPAWN, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
	}
	return 1;
}

public: OnMultiDialogClickNavigButton(playerid, page, dialogid, priority)
{
	if(page == 1)
	{
		page_cars[playerid]++;
		switch(type_page_cars[playerid])
		{
			case 0:	ShowOwnableTickets(playerid, page_cars[playerid], 0);
			case 1: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST2, page_cars[playerid]);
			case 2: ShowOwnableCars(playerid, DIALOG_SELL_CAR, page_cars[playerid]);
			case 3: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST3, page_cars[playerid]);
			case 4: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SELECT, page_cars[playerid]);
			case 5: ShowOwnableCars(playerid, DIALOG_SELL_OWNABLE_CAR, page_cars[playerid]);
			case 6: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST, page_cars[playerid]);
			case 7: ShowAdminLists(playerid, page_cars[playerid]);
			case 8: ShowBizlist(playerid, page_cars[playerid]);
			case 9: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_NUMBER, page_cars[playerid]);
			case 10: ShowDialogDonatePerfect(playerid, 1, page_cars[playerid]);
			case 11: ShowDialogDonatePerfect(playerid, 2, page_cars[playerid]);
			case 12: ShowDialogDonatePerfect(playerid, 3, page_cars[playerid]);
			case 13: ShowDialogDonatePerfect(playerid, 4, page_cars[playerid]);
			case 14: ShowDialogDonatePerfect(playerid, 5, page_cars[playerid]);
			case 15: ShowOwnableCars(playerid, DIALOG_CAR_LIST_NOTARY, page_cars[playerid]);
			case 16: SCM(playerid, -1, "menu");
			case 17: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SPAWN, page_cars[playerid]);
		}
	}
	else
	{
		page_cars[playerid]--;
		switch(type_page_cars[playerid])
		{
			case 0:	ShowOwnableTickets(playerid, page_cars[playerid], 0);
			case 1: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST2, page_cars[playerid]);
			case 2: ShowOwnableCars(playerid, DIALOG_SELL_CAR, page_cars[playerid]);
			case 3: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST3, page_cars[playerid]);
			case 4: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SELECT, page_cars[playerid]);
			case 5: ShowOwnableCars(playerid, DIALOG_SELL_OWNABLE_CAR, page_cars[playerid]);
			case 6: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST, page_cars[playerid]);
			case 7: ShowAdminLists(playerid, page_cars[playerid]);
			case 8: ShowBizlist(playerid, page_cars[playerid]);
			case 9: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_NUMBER, page_cars[playerid]);
			case 10: ShowDialogDonatePerfect(playerid, 1, page_cars[playerid]);
			case 11: ShowDialogDonatePerfect(playerid, 2, page_cars[playerid]);
			case 12: ShowDialogDonatePerfect(playerid, 3, page_cars[playerid]);
			case 13: ShowDialogDonatePerfect(playerid, 4, page_cars[playerid]);
			case 14: ShowDialogDonatePerfect(playerid, 5, page_cars[playerid]);
			case 15: ShowOwnableCars(playerid, DIALOG_CAR_LIST_NOTARY, page_cars[playerid]);
			case 16: scm(playerid, -1, "menu");
			case 17: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SPAWN, page_cars[playerid]);
		}
	}
	return true;
}

stock LoadCarAccessories(car_id, vehicleid)
{
	for(new i; i < 5; i++)
	{
		if(IsValidDynamicObject(car_accessories[vehicleid][i])) DestroyDynamicObject(car_accessories[vehicleid][i]);
		car_accessories[vehicleid][i] = INVALID_OBJECT_ID;
	}
	new query[250],
		Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM cars_accessories WHERE car_id='%d'", car_id);
	result = mysql_query(mysql, query, true);
	new rows = cache_num_rows();
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			new model_id = cache_get_field_content_int(i, "model_id");
			new indx = cache_get_field_content_int(i, "indx");
			new Float: PosX = cache_get_field_content_float(i, "PosX");
			new Float: PosY = cache_get_field_content_float(i, "PosY");
			new Float: PosZ = cache_get_field_content_float(i, "PosZ");
			new Float: RotX = cache_get_field_content_float(i, "RotX");
			new Float: RotY = cache_get_field_content_float(i, "RotY");
			new Float: RotZ = cache_get_field_content_float(i, "RotZ");
			car_accessories[vehicleid][indx] = CreateDynamicObject(model_id, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(car_accessories[vehicleid][indx], vehicleid, PosX, PosY, PosZ, RotX, RotY, RotZ);
		}
	}
	cache_delete(result);
	return true;
}

public: CB_BanHWIDoff(playerid, name[], reason[])
{
	if(!cache_num_rows()) 
		return SCM(playerid,-1,"Аккаунт с таким именем не найден.");
	new serialid[300],
		query[548];
	cache_get_row(0, 1, serialid);
	mysql_format(mysql, query, sizeof query, "INSERT INTO `hardware_bans` (`acc_id`, `hardware_id`, `type`, `reason`) VALUES ('%d', '%s', 1, '%s')", cache_get_row_int(0,0), serialid, reason);
	mysql_pquery(mysql, query);
	format(query, sizeof query, "[А] %s[%d] забанил игрока %s по hwid навсегда", GetPlayerNameEx(playerid), playerid, name);
	if(strlen(reason) > 0)
		format(query, sizeof query, "%s. Причина: %s", query, reason);
	SendMessageToAdmins(query, 0x3399FFFF);
	return true;
}

stock SetPlayerGameStateConnection(playerid)
{
    new
        BitStream:bsn = BS_New();
    BS_WriteValue(bsn, PR_UINT8, 33);
	PR_SendPacket(bsn, playerid);
	BS_Delete(bsn);
	return 1;
}

stock GetHardwareIDBanned(playerid, hardware[])
{
	printf("name [%s] | hardware [%s]", GetPlayerNameEx(playerid), hardware);
	new query[348];
	mysql_format(mysql, query, sizeof query, "SELECT * FROM hardware_bans WHERE hardware_id = '%s' LIMIT 1", hardware);
	mysql_tquery(mysql, query, "CB_GetHardwareIDBanned", "i", playerid);
	return 1;
}

public: CB_GetHardwareIDBanned(playerid)
{
	if(cache_num_rows())
	{
		g_player[playerid][P_HARDWARE_BAN] = 1;
		SetPlayerGameStateConnection(playerid);
		return true;
	}
	else 
		CheckPlayerAccount(playerid);
	return true;
}

stock InformationServers1()
{
	{
		SendClientMessageToAll(0xFFFFFFFF, "{F3FF02}------------------------------------------------------------------------------");
		SendClientMessageToAll(0xFFFFFFFF, "{F3FF02}Наш Сайт: {ffffff}"SERVER_SITE"");
		SendClientMessageToAll(0xFFFFFFFF, "{F3FF02}Пополнение счета /rub: {ffffff}"OWNER_VK"");
		SendClientMessageToAll(0xFFFFFFFF, "{F3FF02}Наш Telegram: {ffffff}"SERVER_TELEGRAM"");
		SendClientMessageToAll(0xFFFFFFFF, "{F3FF02}Разработчик Вконтакте: {ffffff}vk.com/loboda6");
		SendClientMessageToAll(0xFFFFFFFF, "{F3FF02}ВАЖНО: {FFFFFF}Покупка не через официальные источники, караеться {F81414}БАНОМ {FFFFFF}и {F81414}ОЧС {FFFFFF}навсегда");
		SendClientMessageToAll(0xFFFFFFFF, "{F3FF02}------------------------------------------------------------------------------");
	}
}

stock Infodonate()
{
	{
		SendClientMessageToAll(0xFFFFFFFF, "{FFAF00}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessageToAll(0xFFFFFFFF, "{FFAF00}- Купить Донат(/rub) можно на нашем сайте "SERVER_SITE" в разделе 'Магазин'");
		SendClientMessageToAll(0xFFFFFFFF, "{FFAF00}- За Донат(/rub) Вы можите купить игровую валюту, VIP-Статус, редкую одежду и многое другое");
		SendClientMessageToAll(0xFFFFFFFF, "{FFAF00}- Подробнее о функциях доната можно узнать в спецальном меню /rub");
		SendClientMessageToAll(0xFFFFFFFF, "{FFAF00}- ВАЖНО: {FFFFFF}Покупка не через официальные источники, караеться {F81414}БАНОМ {FFFFFF}и {F81414}ОЧС {FFFFFF}навсегда");
		SendClientMessageToAll(0xFFFFFFFF, "{FFAF00}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}
}

stock kiockkraft()
{
	{
		SendClientMessageToAll(0xFFFFFFFF, "{E5E4E2}[VIP Platinum]{FFFFFF}ООО «СВАЛКА»: Мы открыли Киоск (Все для крафта) где вы сможите приобрести предметы и вещи для крафта");
		SendClientMessageToAll(0xFFFFFFFF, "{E5E4E2}[VIP Platinum]{FFFFFF}ООО «СВАЛКА»: Отметить нас на родаре /kioskkraft");
	}
}

stock InformationServers()
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		new query[540];
		if(g_doubling[0] == 1) {}
		format
		(
			query, sizeof query, 
			"interface('ScreenNotification').add('[1,\"Информация\",\"\
			{F3FF02}Разработчик Вконтакте: {ffffff}vk.com/loboda6<br>\
			{F3FF02}Telegram канал: {ffffff}"SERVER_TELEGRAM"<br>\
			%s\
			\",\""SERVER_COLOR"\",5000]')", query
		);
		BitStream_1(i, s_CefInterface, t_CefUpdate, query);
	}
	return true;
}

public: Employment_OnPlayerQuit(playerid)
{
	SetPlayerData(playerid, P_JOB, 0);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Employment");
	SendClientMessage(playerid, COLOR_RED, "Вы успешно уволились!");
	return true;
}

public: Employment_OnPlayerApply(playerid, type)
{
	if(GetPlayerTeamEx(playerid) != TEAM_NONE) return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "Вы не можете устроиться на работу, находясь во фракции", "Понятно", "");		
	if(type == 7)
	{
		SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу водителя автобуса");
		SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки автобусов находятся на всех автостанциях. Используйте {FFD83D}/gps {FFFFFF}чтобы найти ближайшую к вам");
		SetPlayerData(playerid, P_JOB, 1);
	}
	if(type == 8)
	{
		SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу таксиста");
		SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки такси можно найти возле автостанций, ЖД вокзалов и других людных местах");
		SetPlayerData(playerid, P_JOB, 2);
	}
	if(type == 12)
	{
		SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу автомеханика");
		SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы начать работу найдите служебный транспорт в Вашем городе. Используйте {FF9900}/gps {FFFFFF}при необходимости");
		SendClientMessage(playerid, 0xFFFFFFFF, "Команды: /getfuel - закупить топливо; /fill - заправить транспорт; /repair - починить транспорт");
		SetPlayerData(playerid, P_JOB, 3);
	}
	if(type == 16) return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Информация о работе", "{FFFFFF}Для получения работы дальнобойщика вам нужно связаться с руководством транспортной компании\n\nНа данный момент работают:\n- ТК \'Южный\' | Город: Нижегородская обл.\n- ТК \'Лыткарино\' | Город: Лыткарино\n- ТК \'Батырево\' | Город: Батырево\n", "Закрыть", "");
	new query[64];
	format(query, sizeof query, "UPDATE accounts SET job=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_JOB), GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	BitStream_1(playerid, s_CefInterface, t_CefHide,"Employment");
	GameText(playerid, "~g~Успешно", 3000, 2);
	return true;
}

public: Employment_OnPlayerClose(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide,"Employment");
	return true;
}

stock CreateProdsOrders()
{
	for(new i; i < g_business_loaded; i++)
	{
		if(GetBusinessData(i, B_TYPE) != BUSINESS_TYPE_SHOP_24_7) continue;
		if(GetBusinessData(i, B_ORDER_ID) != -1) continue;
		new random_ = RandomEx(2000, 7000);
		new random_price = RandomEx(1500000, 50000000);
		CreateOrder(0, i, random_, random_price);
	}
	SendClientMessageToAll(0xFFA500FF, "{F3FF02}[Информация] {FFFFFF}Новые заказы были добавлены для дальнобойщиков");
}

stock ShowPlayerJMenu(playerid)
{
	if(GetPlayerJob(playerid) == 4)
	{
		Dialog
		(
			playerid, DIALOG_TK_JMENU, DIALOG_STYLE_LIST, 
			"{FFCD00}Меню сотрудника компании", 
			"1. {ffe36c}Информация о компании\n\
			2. Руководство по работе\n\
			3. Список сотрудников на работе\n\
			4. {ff986c}Уволиться из компании",
			"Далее", "Закрыть"
		);
	}
}

stock SendClientMessageTruck(playerid, text[], type)
{
	new fmt_text[148];
	if(type == 1)
	{
		if(GetPlayerData(playerid, P_TK_JOB) == 1) format(fmt_text, sizeof fmt_text, "Штатный дальнобойщик %s[%d]: %s", GetPlayerNameEx(playerid), playerid, text);
		if(GetPlayerData(playerid, P_TK_JOB) == 2) format(fmt_text, sizeof fmt_text, "Внештатный дальнобойщик %s[%d]: %s", GetPlayerNameEx(playerid), playerid, text);
	}
	else
	{
		if(GetPlayerData(playerid, P_TK_JOB) == 1) format(fmt_text, sizeof fmt_text, "Штатный дальнобойщик %s[%d]: (( %s ))", GetPlayerNameEx(playerid), playerid, text);
		if(GetPlayerData(playerid, P_TK_JOB) == 2) format(fmt_text, sizeof fmt_text, "Внештатный дальнобойщик %s[%d]: (( %s ))", GetPlayerNameEx(playerid), playerid, text);
	}
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_JOB) != 4) continue;
		if(GetPlayerData(i, P_TK_JOB) != GetPlayerData(playerid, P_TK_JOB)) continue;
		SendClientMessage(i, 0x2e9f5eFF, fmt_text);
	}
}

stock OnPlayerProgressBar(playerid)
{
	if(g_player_progress_bar_type[playerid] == 1)
	{
		if(g_player_progress_bar_time[playerid] == 0)
		{
			g_player_progress_bar[playerid] = g_player_progress_bar[playerid] + 15;
			g_player_progress_bar_time[playerid] = 1;
			ApplyAnimationEx(playerid, "OTB", "betslp_loop", 4.1, 0, 0, 0, 1, 20_000, 0, USE_ANIM_TYPE_NONE - 1);
		}
		else 
		{
			g_player_progress_bar[playerid] = g_player_progress_bar[playerid] - 15;
		}
		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "interface('ProgressBar').setFill(0,%d)", g_player_progress_bar[playerid]);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
		if(g_player_progress_bar[playerid] >= 100)
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "ProgressBar");
			new vehicleid = GetNearestVehicleID(playerid, 6.0);
			RepairVehicle(vehicleid);
			if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);
			SendClientMessage(playerid, COLOR_GREY, "Вы успешно починили транспорт");
			GiveIteam(playerid, 44, 0, 1, 0);
			g_player_progress_bar_type[playerid] = 0;
			ClearAnimations(playerid);
			SetVehicleParam(vehicleid, V_BONNET, VEHICLE_PARAM_OFF);
		}
	}
	else if(g_player_progress_bar_type[playerid] == 2)
	{
		if(g_player_progress_bar_time[playerid] == 0)
		{
			g_player_progress_bar[playerid] = g_player_progress_bar[playerid] + 5;
			g_player_progress_bar_time[playerid] = 1;
			ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 0);
		}
		else 
		{
			g_player_progress_bar[playerid] = g_player_progress_bar[playerid] - 5;
		}
		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "interface('ProgressBar').setFill(0,%d)", g_player_progress_bar[playerid]);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
		if(g_player_progress_bar[playerid] >= 100)
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "ProgressBar");
			g_player_progress_bar_type[playerid] = 0;
			ClearAnimations(playerid);
		}
	}
	else if(g_player_progress_bar_type[playerid] == 3)
	{
		if(g_player_progress_bar_time[playerid] == 0)
		{
			g_player_progress_bar[playerid] = g_player_progress_bar[playerid] + 20;
			g_player_progress_bar_time[playerid] = 1;
		}
		else 
		{
			g_player_progress_bar[playerid] = g_player_progress_bar[playerid] - 20;
		}
		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "interface('ProgressBar').setFill(0,%d)", g_player_progress_bar[playerid]);
		BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_text);
		if(g_player_progress_bar[playerid] >= 100)
		{
			BitStream_1(playerid, s_CefInterface, t_CefHide, "ProgressBar");
			g_player_progress_bar_type[playerid] = 0;
			ClearAnimations(playerid);
			if(g_player_mine_status[playerid] == 1)
			{
				g_player_mine_cp[playerid] = 4;
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.stopSound(6)");
				GameText(playerid, "~y~Готово!~n~Возьмите кирку со стойки", 3000, 2);
				SetPlayerCheckpoint(playerid, g_mine_rack[g_player_mine_rack[playerid]][0],g_mine_rack[g_player_mine_rack[playerid]][1],g_mine_rack[g_player_mine_rack[playerid]][2], 1.0);
				g_player_mine_status[playerid] = 2;
				new id = g_player_mine_ore[playerid];
				g_mine_ore[id][MO_STATUS] = 2;
				if(IsValidDynamicObject(g_mine_ore[id][MO_OBJECT])) 
					DestroyDynamicObject(g_mine_ore[id][MO_OBJECT]);
				g_mine_ore[id][MO_OBJECT] = INVALID_OBJECT_ID;
				if(IsValidDynamic3DTextLabel(g_mine_ore[id][MO_LABEL])) 
					DestroyDynamic3DTextLabel(g_mine_ore[id][MO_LABEL]);
				g_mine_ore[id][MO_LABEL] = Text3D: INVALID_3DTEXT_ID;
				if(g_mine_ore[id][MO_TYPE] == 1)
					g_mine_ore[id][MO_OBJECT] = CreateDynamicObject(17106, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 0.0, 0.0, 0.0);
				else if(g_mine_ore[id][MO_TYPE] == 2)
					g_mine_ore[id][MO_OBJECT] = CreateDynamicObject(17166, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 0.0, 0.0, 0.0);
				g_mine_ore[id][MO_LABEL] = CreateDynamic3DTextLabel("{"MINE_COLOR"}Груда камней", -1, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 15.0);
				SetPlayerAttachedObject(playerid, 0, 17114, 6, 0.0290, 0.1280, 0.1020, -24.0000, -14.8000, 0.0000, 1.0000, 1.0000, 1.0000, 0, 0);
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
			}
			else if(g_player_mine_status[playerid] == 3)
			{
				g_player_mine_cp[playerid] = 6;
				GameText(playerid, "~y~Готово!~n~Возьмите тележку у стойки", 3000, 2);
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.stopSound(6)");
				SetPlayerCheckpoint(playerid, g_mine_rack[g_player_mine_rack[playerid]][0],g_mine_rack[g_player_mine_rack[playerid]][1],g_mine_rack[g_player_mine_rack[playerid]][2], 1.0);
				g_player_mine_status[playerid] = 4;
				new id = g_player_mine_ore[playerid];
				g_mine_ore[id][MO_STATUS] = 3;
				if(IsValidDynamicObject(g_mine_ore[id][MO_OBJECT])) 
					DestroyDynamicObject(g_mine_ore[id][MO_OBJECT]);
				g_mine_ore[id][MO_OBJECT] = INVALID_OBJECT_ID;
				g_mine_ore[id][MO_OBJECT] = CreateDynamicObject(17107, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 0.0, 0.0, 0.0);
				UpdateDynamic3DTextLabelText(g_mine_ore[id][MO_LABEL], 0xFFFFFFFF, "{"MINE_COLOR"}Каменная пыль\nс залежами");
			}
			else if(g_player_mine_status[playerid] == 7)
			{
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, "window.stopSound(6)");
				g_player_mine_status[playerid] = 8;
				new id = g_player_mine_ore[playerid];
				g_mine_ore[id][MO_STATUS] = 4;
				if(IsValidDynamicObject(g_mine_ore[id][MO_OBJECT])) 
					DestroyDynamicObject(g_mine_ore[id][MO_OBJECT]);
				g_mine_ore[id][MO_OBJECT] = INVALID_OBJECT_ID;
				if(IsValidDynamic3DTextLabel(g_mine_ore[id][MO_LABEL])) 
					DestroyDynamic3DTextLabel(g_mine_ore[id][MO_LABEL]);
				g_mine_ore[id][MO_LABEL] = Text3D: INVALID_3DTEXT_ID;
				g_mine_ore[id][MO_LABEL] = CreateDynamic3DTextLabel("{"MINE_COLOR"}Загруженная тележка", -1, g_mine_ore_pos[id][MOP_CART][0], g_mine_ore_pos[id][MOP_CART][1], g_mine_ore_pos[id][MOP_CART][2] + 0.4, 15.0);
				if(IsValidDynamicObject(g_player_mine_object[playerid])) 
					DestroyDynamicObject(g_player_mine_object[playerid]);
				g_player_mine_object[playerid] = INVALID_OBJECT_ID;
				g_player_mine_object[playerid] = CreateDynamicObject(17108, g_mine_ore_pos[id][MOP_CART][0], g_mine_ore_pos[id][MOP_CART][1], g_mine_ore_pos[id][MOP_CART][2], g_mine_ore_pos[id][MOP_CART][3], 0.0, 0.0);
				SCM(playerid, 0xa6c4e1FF, "Возьмите тележку и отвезите её на разгрузку.");
				g_player_mine_sphere[playerid] = CreateDynamicSphere(g_mine_ore_pos[id][MOP_CART][0], g_mine_ore_pos[id][MOP_CART][1], g_mine_ore_pos[id][MOP_CART][2],2.0,-1,-1);
				ApplyAnimationEx(playerid, "PED", "BOMBER", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
			}
		}
	}
	return true;
}

public: Megafon(playerid)
{
    if (GetPlayerTeamEx(playerid) != TEAM_FSB && GetPlayerTeamEx(playerid) != TEAM_PPS) return 1;
    if (!IsPlayerInAnyVehicle(playerid)) return 1;
    new vehicleid = GetPlayerVehicleID(playerid);
    new modelid = GetVehicleData(vehicleid, V_MODELID);
    if (modelid != 15606 && modelid != 15607 && modelid != 15608 && modelid != 15609 && modelid != 15250 && modelid != 598 && modelid != 15236 && modelid != 15143 && modelid != 15630 && modelid != 543 && modelid != 795 && modelid != 596 && modelid != 597 && modelid != 15610 && modelid != 523 && modelid != 15186 && modelid != 17401 && modelid != 15602 && modelid != 17417 && modelid != 15241) return 1;
    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Включил звукавой сигнал на Госс Транспорте. (%s)",
           GetPlayerNameEx(playerid));
    str_q[0] = EOS;
    new Float:Poser[3];
    GetVehiclePos(vehicleid, Poser[0], Poser[1], Poser[2]);
    new soundFileIndex = random(6) + 1;  
    new soundCommand[128];
    format(soundCommand, sizeof soundCommand, "window.playSound('https://xtreme-crmp.ru/Music/%d.wav',0,10311,10)", soundFileIndex);
    new Float:playerX, Float:playerY, Float:playerZ, Float:otherX, Float:otherY, Float:otherZ;
    GetPlayerPos(playerid, playerX, playerY, playerZ);
    foreach (new i: Player)
    {
        if (!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
        GetPlayerPos(i, otherX, otherY, otherZ);
        if (GetDistanceBetweenPoints(playerX, playerY, playerZ, otherX, otherY, otherZ) > 50.0) continue;
        SendClientMessage(i, 0xDD90FFFF, STRING_GLOBAL);
        BitStream_1(i, s_CefInterface, t_CefUpdate, soundCommand);
    }
    return 1; 
}

public: Megafonmo(playerid)
{
	if (GetPlayerTeamEx(playerid) != TEAM_HOSPITAL && GetPlayerTeamEx(playerid) != TEAM_FSB) return 1;
    if (!IsPlayerInAnyVehicle(playerid)) return 1;
    new vehicleid = GetPlayerVehicleID(playerid);
    new modelid = GetVehicleData(vehicleid, V_MODELID);
    if (modelid != 416) return 1;
    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Включил звукавой сигнал на Госс Транспорте. (%s)",
           GetPlayerNameEx(playerid));
    str_q[0] = EOS;
    new Float:Poser[3];
    GetVehiclePos(vehicleid, Poser[0], Poser[1], Poser[2]);
    new soundFileIndex = random(6) + 1;  
    new soundCommand[128];
    format(soundCommand, sizeof soundCommand, "window.playSound('https://xtreme-crmp.ru/Music/sound_0.mp3',0,10311,5)", soundFileIndex);
    new Float:playerX, Float:playerY, Float:playerZ, Float:otherX, Float:otherY, Float:otherZ;
    GetPlayerPos(playerid, playerX, playerY, playerZ);
    foreach (new i: Player)
    {
        if (!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
        GetPlayerPos(i, otherX, otherY, otherZ);
        if (GetDistanceBetweenPoints(playerX, playerY, playerZ, otherX, otherY, otherZ) > 50.0) continue;
        SendClientMessage(i, 0xDD90FFFF, STRING_GLOBAL);
        BitStream_1(i, s_CefInterface, t_CefUpdate, soundCommand);
    }
    return 1; 
}

public: OnInteractionsClick(playerid, type)
{
	if(GetPlayerData(playerid,P_MOBILE) == 1){
		for(new i; i < sizeof g_load_sto_garage; i++)
		{
			for(new idx; idx < 4; idx++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, g_load_sto_garage[i][idx][0], g_load_sto_garage[i][idx][1], g_load_sto_garage[i][idx][2]))
				{
					if(sto_garage_status[i][idx] == 1) return SCM(playerid, COLOR_GREY, "Данный гараж используется игроком.");
					new vehicleid = GetPlayerVehicleID(playerid);
					new vehicleid1 = GetPlayerOwnableCarLast(playerid);
					if(vehicleid1 != GetPlayerVehicleID(playerid))
						return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
					foreach(new idxx: Player)
					{
						if(!IsPlayerConnected(idxx)) continue;
						if(!IsPlayerLogged(idxx)) continue;
						if(idxx == playerid) continue;
						if(IsPlayerInVehicle(idxx, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
						break;
					}
					SetVehiclePos(vehicleid, -2498.8906, -597.7437, 1001.0588);
					SetVehicleZAngle(vehicleid, 89.6331);
					TogglePlayerControllable(playerid, 0);
					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, playerid + 1);
					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, playerid + 1);
					SetPlayerCameraPos(playerid, -2502.4258, -601.2964, 1004.5900);
					SetPlayerCameraLookAt(playerid, -2498.8938, -597.7574, 1001.0900);
					UpdateStoGarage(i, idx, 1);
					SetPVarInt(playerid, "sto_id", GetNearestBusiness(playerid, 50.0));
					SetPVarInt(playerid, "sto_id_exit_1", i);
					SetPVarInt(playerid, "sto_id_exit_2", idx);
					SetPVarInt(playerid, "cl1", 1);
					SetPVarInt(playerid, "diski", -1);
					SetPVarInt(playerid, "vinil", -2);
					SetPVarInt(playerid, "color_id", -1);
					SetPVarInt(playerid, "color_id1", -1);
					gPlayerTuningMenu[playerid] = 1;
					BitStream_2(playerid, s_CefInterface, t_CefShow, "TuningMenu", "[11298, []]");
					BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('TuningMenu').setItems('[3500, -1, -1]')");
					break;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 10, 258.8138,703.6974,11.9849) || IsPlayerInRangeOfPoint(playerid, 10, 2345.3701,-2610.1836,21.7953))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
   			new md = GetVehicleData(vehicleid, V_MODELID);
			if(md == 424 || md == 461 || md == 462 || md == 463 || md == 468 || md == 471 || md == 481 || md == 510 || md == 521 || md == 522
			|| md == 581 || md == 586 || md == 15127 || md == 15129 || md == 15130 || md == 15132 || md == 15133 || md == 15134 || md == 15135 || md == 15136 || md == 15139 || md == 15245)
			return SCM(playerid, COLOR_GREY, "Данный транспорт недоступен для установки stage.");
			new vehicleid1 = GetPlayerOwnableCarLast(playerid);
			if(vehicleid1 != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			foreach(new i: Player){
				if(i == playerid) continue;
				if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
				break;
			}
			BitStream_2(playerid, s_CefInterface, t_CefShow, "TuningStage", "[[70,1.350000],[[\"Уровень 1\",7000000,10,10.000000],[\"Уровень 2\",20000000,20,20.000000],[\"Уровень 3\",40000000,30,30.000000]]]");
			SpeedometrHideForPlayer(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 10, 258.8138,703.6974,11.9849)) stagest[playerid] = 2;
			if(IsPlayerInRangeOfPoint(playerid, 10, 2345.3701,-2610.1836,21.7953)) stagest[playerid] = 1;
			SetVehiclePos(vehicleid, 2339.8787,-2612.8870,1002.2754);
			SetVehicleZAngle(vehicleid, 0);
			TogglePlayerControllable(playerid, 0);
			stagestats[playerid] = 1;
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, playerid + 1);
			SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
			SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
		}
		OnPlayerKeyStateChange(playerid,1024,0);
	}
	if(g_player_status_fish[playerid] != 0)
	{
		if(g_player_status_fish[playerid] == 4)
		{
			if(type == 1)
			{
				if(g_player_fish_timer[playerid] > 0)
				{
					SCM(playerid, 0xf1951aFF, "Рыба сорвалась с крючка.");
					g_player_status_fish[playerid] = 3;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Fishing");
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
					BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Начать рыбалку\"]]");
					g_player_deteling_id[playerid] = 0;
					TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					return true;
				}
				if(g_player_fish_timer[playerid] < -1)
				{
					SCM(playerid, 0xf1951aFF, "Подсечка не удалась, рыба съела наживку и уплыла.");
					g_player_status_fish[playerid] = 2;
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Fishing");
					BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
					BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Начать рыбалку\"]]");
					g_player_deteling_id[playerid] = 0;
					TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					return true;
				}
				g_player_status_fish[playerid] = 2;
				g_player_type_fish[playerid] = random(9);
				player_DialogID[playerid] = DIALOG_ACTION_FISH;
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.addDialogInQueue('[%i,6,\"Улов\",\"\",\"Забрать\",\"Отпустить\",0,0]', [\"Вы поймали %s весом 1.5 кг.<n><n>Вы хотите забрать или отпустить рыбу?\", \"fishing/fish/%d.png\"], 0)", DIALOG_ACTION_FISH, indxFishType[g_player_type_fish[playerid]], g_player_type_fish[playerid]);
				BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
				SCMF(playerid, 0x56e65eFF, "Вы словили рыбу {FFFFFF}\"%s\" {56e65e}весом 1.5 кг.", indxFishType[g_player_type_fish[playerid]]);
			}
			else if(type == 2)
			{
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Fishing");
				BitStream_1(playerid, s_CefInterface, t_CefHide, "Interactions");
				BitStream_2(playerid, s_CefInterface, t_CefShow, "Interactions", "[[1, \"Начать рыбалку\"]]");
				g_player_deteling_id[playerid] = 0;
				g_player_status_fish[playerid] = 1;
				TogglePlayerControllable(playerid,true);
				SetCameraBehindPlayer(playerid);
			}
		}
	}
	else if(g_player_deteling_id[playerid] != 0)
	{
		if(type == 1)
		{
			new idx = GetNearestBusiness(playerid, 15.0);
			if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_DETEYLING)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetPlayerOwnableCarLast(playerid) != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
				foreach(new i: Player)
				{
					if(!IsPlayerConnected(i)) continue;
					if(!IsPlayerLogged(i)) continue;
					if(i == playerid) continue;
					if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
					break;
				}
				SetVehiclePos(vehicleid, -6.6451,503.9987,1001.0556);
				SetVehicleZAngle(vehicleid, 178.8139);
				TogglePlayerControllable(playerid, 0);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, playerid + 1);
				LinkVehicleToInterior(vehicleid, 3);
				SetVehicleVirtualWorld(vehicleid, playerid + 1);
				SetPlayerCameraPos(playerid,-3.6452, 498.7973, 1001.8854);
				SetPlayerCameraLookAt(playerid,-6.6452, 501.9935, 1001.2854);
				if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_DETEYLING)
				{
					SetPlayerInBiz(playerid, idx);
					BitStream_1(playerid, s_CefInterface, t_CefShow, "TintingOrder");
				}
			}
		}
		if(type == 2) OpenTuningVinil(playerid, GetNearestBusiness(playerid, 15.0));
	}
	return true;
} 

stock AddBusinessProfit(playerid, businessid, price, prods = 1)
{
	format(g_business[businessid][B_BALANCE], 21, "%s", SetILPlayerInt(playerid, GetBusinessData(businessid, B_BALANCE), price));
	AddBusinessData(businessid, B_PRODS, -, prods);
	new query[164];
	mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (business_id, player_id, time, money, view) VALUES (%d,%d,%d,%d, 1)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), gettime(), price);
	mysql_query(mysql, query, false);
	format(query, sizeof query, "UPDATE business SET products=%d, balance=%s WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_SQL_ID));
	mysql_query(mysql, query, false);
	return true;
}

stock GivePlayerExp(playerid, count)
{
	AddPlayerData(playerid, P_EXP, +, count);
	if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
	{
		SetPlayerData(playerid, P_EXP, 0);
		AddPlayerData(playerid, P_LEVEL, +, 1);
		SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
		SetPlayerLevelInit(playerid);
		if(GetPlayerData(playerid, P_LEVEL) == 4)
		{
			new query[148],
			Cache: result;
			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", GetPlayerData(playerid, P_REFER));
			result = mysql_query(mysql, query);
			if(!mysql_errno())
			{
				new id = cache_get_field_content_int(0, "id");
				CreatePlayerBonus(id, 50000000, "Приглашенного игрока");
				format(query, sizeof query, "{FFFFFF}Бонус за реферала {a2a451}%s {FFFFFF}в размере {b48158}%s руб", GetPlayerNameEx(playerid), formatInt(50000000));
				CreatePlayerNotification(id, query);
			}
			cache_delete(result);
		}
	}
	UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
	UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
}

stock CreatePlayerBonus(id, count, text[])
{
	new query[190];
	mysql_format(mysql, query, sizeof query, "INSERT INTO player_bonus (owner_id, count, text) VALUES (%d, %d, '%s')", id, count, text);
	mysql_query(mysql, query, false);
	return true;
}

stock CreatePlayerNotification(id, text[], note_text[] = "")
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		if(id != GetPlayerAccountID(i)) continue;
		BitStream_2(i, s_CefInterface, t_CefShow, "Notification", "[0]");
		break;
	}
	new query[248];
	mysql_format(mysql, query, sizeof query, "INSERT INTO notification (owner_id, text, note_text, time, status) VALUES (%d, '%s', '%s', NOW(), 1)", id, text, note_text);
	mysql_query(mysql, query, false);
	return true;
}

stock GivePlayerMoneyEx(playerid, money, description[]="None", bool:save=true, bool:game_text=true)
{
	new fmt_str[185];
	format(fmt_str, sizeof fmt_str, "%d", money);
	format(g_player[playerid][P_MONEY], 21, "%s", EditCountSInteger(playerid, GetPlayerMoneyEx(playerid), fmt_str));
	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,last_money,description) VALUES (%d,'%s',NOW(),'%s','%s','%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), formatStr(fmt_str), formatStr(g_player[playerid][P_MONEY]), description);
	mysql_query(mysql, fmt_str, false);
	str_q[0] = EOS;
	format(str_q, sizeof str_q, "window.interface('Hud').info.money = %s", GetPlayerMoneyEx(playerid));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, str_q);
	format(STRING_GLOBAL,sizeof STRING_GLOBAL, "window.setPlayerMoney('%s')",GetPlayerMoneyEx(playerid));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);	
	if(save)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%s WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);
	}
	if(game_text)
	{
		format(fmt_str, sizeof(fmt_str), "%s%s рублей", money < 0 ? ("~r~") : ("~g~+"), formatInt(money));
		GameText(playerid, fmt_str, 3000, 2);
	}
	return 1;
}

stock GivePlayerMoneyStr(playerid, money[], description[]="None", bool:save=true, bool:game_text=true)
{
	new fmt_str[360];
	if(game_text)
	{
		if(strfind(money,"-") != -1) format(fmt_str, sizeof fmt_str, "~r~%s рублей", formatStr(money));
		else format(fmt_str, sizeof fmt_str, "~g~+%s рублей", formatStr(money));
		GameText(playerid, fmt_str, 3000, 2);
	}
	format(g_player[playerid][P_MONEY], 21, "%s", EditCountSInteger(playerid, GetPlayerMoneyEx(playerid), money));
	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,last_money,description) VALUES (%d,'%s',NOW(),'%s','%s','%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), formatStr(money), formatStr(g_player[playerid][P_MONEY]), description);
	mysql_query(mysql, fmt_str, false);
	str_q[0] = EOS;
	format(str_q, sizeof str_q, "window.interface('Hud').info.money = %s", GetPlayerMoneyEx(playerid));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, str_q);
	format(STRING_GLOBAL,sizeof STRING_GLOBAL, "window.setPlayerMoney('%s')",GetPlayerMoneyEx(playerid));
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);	
	if(save)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money='%s' WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);
	}
	format(fmt_str, sizeof fmt_str, "window.interface('Hud').info.money = window.interface('Hud').info.money = %s", GetPlayerMoneyEx(playerid));
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, fmt_str);
	return 1;
}

public: PlainStoped(playerid)
{
	scm(playerid, COLOR_CHAT, "* Отправляйтесь в Россию для высадки пассажиров!");
	scm(playerid, COLOR_CHAT, "* По пути Вы будет получать вознаграждение!");
	scm(playerid, COLOR_CHAT, "* Чтобы закончить рейс выпрыгните из самолёта.");
	GameText(playerid, "Высадка прошла успешно!",2000,3);
	SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[23][0], gPlainPoints[23][1], gPlainPoints[23][2],gPlainPoints[23][3], gPlainPoints[23][4], gPlainPoints[23][5],20.0,2001);
	TogglePlayerControllable(playerid,true);
}
public: PlainMaimiGo(playerid)
{
	scm(playerid, COLOR_CHAT, "* Отправляйтесь в Майами для высадки пассажиров!");
	scm(playerid, COLOR_CHAT, "* По пути Вы будет получать вознаграждение!");
	scm(playerid, COLOR_CHAT, "* Чтобы закончить рейс выпрыгните из самолёта.");
	GameText(playerid, "Посадка прошла успешно!",2000,3);
	SetPlayerRaceCheckpoint(playerid,3,gPlainPoints[4][0], gPlainPoints[4][1], gPlainPoints[4][2],gPlainPoints[4][3], gPlainPoints[4][4], gPlainPoints[4][5],20.0,RCP_ACTION_TYPE_PILOT_1);
	TogglePlayerControllable(playerid,true);
}

stock PrizePlain(playerid)
{
	GivePlayerMoneyEx(playerid, RandomEx(100000, 500000));
	AddPlayerData(playerid, P_EXP, +, 1 * g_doubling[DOUBLING_EXP]);
	UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));	
}

stock GetCar(playerid, car_id)
{
    new count;
	for(new idx = 0; idx < MAX_VEHICLES; idx++)
	{
		if(GetVehicleData(idx, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) continue;
		new action_id = GetVehicleData(idx, V_ACTION_ID);
		if(GetOwnableCarData(action_id, OC_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetOwnableCarData(action_id, OC_MODEL_ID) != car_id) continue;
		count++;
	}
	return count;
}

public: TradeDrugs(playerid)
{
	if(GetIteam(playerid, 25) < 10) return SCM(playerid, 0xCECECEFF, "* Для сдачи у вас недостаточно наркоты, миниум от 10 шт");
	switch(random(35))
	{
		case 0: 
		{
			GameText(playerid, "~g~Успешно", 3000, 3);
            GivePlayerMoneyEx(playerid, RandomEx(200000, 250000));
			GiveIteam(playerid, 25, 0, 10, 0);
			SCM(playerid, COLOR_GOLD, "За сдачу вы получили вознаграждение в виде денег");
		}
		case 1..10: 
		{
			GameText(playerid, "~g~Успешно", 3000, 3);
			GiveIteam(playerid, 259, 1, 10, 0);
			GiveIteam(playerid, 25, 0, 10, 0);
			SCM(playerid, COLOR_GOLD, "За сдачу вы получили вознаграждение в виде ключей для кейсов");
		}
		case 11..20: 
		{
			GameText(playerid, "~g~Успешно", 3000, 3);
			GiveIteam(playerid, 355, 1, 2, 0);
			GiveIteam(playerid, 25, 0, 10, 0);
			SCM(playerid, COLOR_GOLD, "За сдачу вы получили вознаграждение в виде кейсов");
		}
		case 21..27: 
		{
			GameText(playerid, "~g~Успешно", 3000, 3);
			GiveIteam(playerid, 258, 1, 2, 0);
			GiveIteam(playerid, 25, 0, 10, 0);
			SCM(playerid, COLOR_GOLD, "За сдачу вы получили вознаграждение в виде кейсов");
		}
		case 28..35:
		{
			GameText(playerid, "~g~Успешно", 3000, 3);
			GiveIteam(playerid, 355, 1, 2, 0);
			GiveIteam(playerid, 25, 0, 10, 0);
			SCM(playerid, COLOR_GOLD, "За сдачу вы получили вознаграждение в виде кейсов");
		}
	}	
	return 1;
}

stock timeRaffleShopping()
{
	for(new i; i < sizeof g_raffleShop; i++)
	{
		if(g_raffleShop[i][RS_STATUS] != 1) continue;
		new Float: x, Float: y, Float: z;
		GetVehiclePos(g_raffleShop[i][RS_VEHICLE], x, y, z);
		if(x != g_pos_car_raffle[i][0] || y != g_pos_car_raffle[i][1])
		{
			SetVehiclePos(g_raffleShop[i][RS_VEHICLE], g_pos_car_raffle[i][0],g_pos_car_raffle[i][1],g_pos_car_raffle[i][2] + 0.1);
			SetVehicleZAngle(g_raffleShop[i][RS_VEHICLE], g_pos_car_raffle[i][3]);
			if(GetVehicleVirtualWorld(g_raffleShop[i][RS_VEHICLE]) != 9) SetVehicleVirtualWorld(g_raffleShop[i][RS_VEHICLE], 9),LinkVehicleToInterior(g_raffleShop[i][RS_VEHICLE], 9);
		}
        g_raffleShop[i][RS_TIME]--;
		if(g_raffleShop[i][RS_TIME] <= 0) 
		{
			new fmt_text[200],
				Cache: result;
			mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM raffle_shop WHERE type=%d", i);
			result = mysql_query(mysql, fmt_text, true);
			if(cache_num_rows())
            {
                new owner_id = cache_get_field_content_int(random(cache_num_rows()), "owner_id");
                format(fmt_text, sizeof fmt_text, "%s [№%d]", GetVehicleInfo(g_raffleShop[i][RS_ID], VI_NAME), g_raffleShop[i][RS_ID]);
                format(fmt_text, sizeof fmt_text , "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', %d, %d, %d, %d, %d)", owner_id, fmt_text, 3, g_raffleShop[i][RS_ID], 0, 1, -1);
                mysql_tquery(mysql, fmt_text, "","");
                CreatePlayerNotification(owner_id, "Выигрыш в розыгрыше", "Вы выиграли в розыгрыше автомобиля.\nОн находится в Мои награды");
                fmt_text[0] = EOS;
                mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM accounts WHERE id=%d LIMIT 1", owner_id);
                result = mysql_query(mysql, fmt_text);
                if(cache_num_rows())
                {
                    new player_name[36];
                    cache_get_field_content(0, "name", player_name, mysql, 44);
                    format(fmt_text,sizeof fmt_text,"[Розыгрыш] {00C0FF}Розыгрыш в торговом центре окончен, победитель: %s",player_name);
                }
                else format(fmt_text,sizeof fmt_text,"[Розыгрыш] {00C0FF}Розыгрыш в торговом центре завершён, победитель не определён");
                SendClientMessageToAll(COLOR_RED,fmt_text);
            }
            cache_delete(result);
			format(fmt_text, sizeof fmt_text, "DELETE FROM raffle_shop WHERE type=%d", i);
			mysql_query(mysql, fmt_text, false);
			g_raffleShop[i][RS_TIME] = 0;
			g_raffleShop[i][RS_ID] = -1;
			DestroyVehicle(g_raffleShop[i][RS_VEHICLE]);
            DestroyDynamicArea(g_raffleShop[i][RS_AREA]);
			g_raffleShop[i][RS_VEHICLE] = INVALID_VEHICLE_ID;
			g_raffleShop[i][RS_STATUS] = 0;
            SendMessageToAdmins("[A] Розыгрыш закончен! Чтобы начать новый /carauction", 0x999999FF);
		}
	}
}

stock openRaffleShop(playerid)
{
	for(new i; i < sizeof g_raffleShop; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 4.5, g_pos_car_raffle[i][0],g_pos_car_raffle[i][1],g_pos_car_raffle[i][2])) 
			continue;
		string_dialog[0] = EOS;
		format
		(
			string_dialog, sizeof string_dialog, 
			"{FFFFFF}На данный момент розыгрывается {fdc53c}%s\n\
			{FFFFFF}В конце розыгрыша один из участников случайным образом станет победителем и заберет автомобиль.\n\n\
			{FFFFFF}До завершения осталось: %d минут\n\
			{FFFFFF}Вы готовы заплатить {fdc53c}%d Рублей{FFFFFF}за участие?",
			GetVehicleInfo(g_raffleShop[i][RS_ID], VI_NAME),
			(g_raffleShop[i][RS_TIME] / 60)+1,
			g_raffleShop[i][RS_PRICE]
		);
		Dialog(playerid, DIALOG_RAFFLE_SHOP, DIALOG_STYLE_MSGBOX, "{FFFFFF}Розыгрыш", string_dialog, "Да", "Нет");
		return 1;
	}
	return 1;
}

stock AddTrash()
{
	for(new while_you; while_you < sizeof g_trash_work; while_you ++)
	{
		g_trash_work[while_you][T_STATUS] = 1;
		total_trash ++;
	}		
	SendClientMessageToAll(COLOR_RED,"{F3FF02}[Информация] {FFFFFF}Мусорные баки вновь заполнены!");
}
stock CreateTrash()
{
	for(new while_you; while_you < sizeof g_trash_work; while_you ++)
	{
		g_trash_bag[while_you] = CreateObject(1344, g_trash_work[while_you][TRASH_POS_X], g_trash_work[while_you][TRASH_POS_Y], g_trash_work[while_you][TRASH_POS_Z], 0, 0, 0);
		total_trash ++;
	}	
}

stock GetRandomPlayer()
{
    new playerList[MAX_PLAYERS], count = 0;
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i))
        {
            playerList[count++] = i;
        }
    }
    return playerList[random(count)];
}

stock GetVehicleRotation(vehicleid,&Float:rx,&Float:ry,&Float:rz){
    new Float:qw,Float:qx,Float:qy,Float:qz;
    GetVehicleRotationQuat(vehicleid,qw,qx,qy,qz);
    rx = asin(2*qy*qz-2*qx*qw);
    ry = -atan2(qx*qz+qy*qw,0.5-qx*qx-qy*qy);
    rz = -atan2(qx*qy+qz*qw,0.5-qx*qx-qz*qz);
}

stock SetFBICarStage(playerid, vehicleid)
{
    new modelid = GetVehicleData(vehicleid, V_MODELID);
    new hangl_id = GetVehicleHandlingID(modelid);
    new data_id = GetVehicleHandling(hangl_id);
    new Float: engine_acel = g_handling_data[data_id][E_ENGINE_ACCELERATION]+40.0;
    SetVehicleHandling(playerid, vehicleid, 15, 0.0, 0.0, 25.0, engine_acel * 3, 0.0, 50.0, 0.0);
    return 1;
}
stock SetFBICarToner(playerid, vehicleid) {        
    for(new i = 0; i < 3; i++)
    {
        Sendpacket_toner(playerid, vehicleid, i, 0, 0, 0, 255);
    }
}

stock Music_Start(playerid,type,name[],index,volume)
{
    #pragma unused index
    new vehicleid = GetPlayerVehicleID(playerid);
    switch(type)
    {
        case 0:
        {
			SendClientEventF(playerid,s_CefInterface,t_CefUpdate, "interface('Music').srv_onReceiveData([[[\"%s\",173]],[],0,0,0,%d],0)",name,g_subwoofer[vehicleid][E_VOLUME]);            
            format(g_subwoofer[vehicleid][E_NAME],64, "%s",name);                         
            string_replace(name," ","%20",_,true);
            new Float:x,Float:y,Float:z;
            g_subwoofer[vehicleid][E_MUSIC_START] = true;
            GetVehiclePos(vehicleid,x,y,z);
            foreach(new i : Player)
                SendClientEventF(i, s_CefInterface, t_CefUpdate, "window.createSound3D(%d, 'https://music.radmir.online/audio/%s.mp3', %.2f, %.2f, %.2f, 0.50, 7.00, 30.00, true, false) || window.setSound3DPosition(10009, 0.000000) || window.attachSoundToVehicle(%d, %d, 0.00, 0.00, 0.00, 0.00)",vehicleid,name,x,y,z,vehicleid,vehicleid);
        }
        case 1:
        {
            g_subwoofer[vehicleid][E_MUSIC_START] = false;
            BitStream_1(playerid,s_CefInterface,t_CefUpdate, "interface('Music').srv_onReceiveData([[],[],0,0,0,50],0)"); 
            SendClientEventF(playerid,s_CefInterface,t_CefUpdate,"window.destroySound(%d,30)",vehicleid);   
        }
        case 7:
        {
            g_subwoofer[vehicleid][E_VOLUME] = volume;
            SendClientEventF(playerid,s_CefInterface,t_CefUpdate,"interface('Music').srv_onReceiveData(%d,2)",volume);
            SendClientEventF(playerid,s_CefInterface,t_CefUpdate, "window.soundSlideAttribute(%d, 2, %.2f, 200)",vehicleid,float(volume)/100);        
        }
    } 
}

string_replace(inputvar[], const searchstring[], const replacestring[], 
                bool:ignorecase=true, bool:replaceall=false) 
{
    if (strfind(replacestring, searchstring, ignorecase) != -1) 
        return -1;
    new pos = strfind(inputvar, searchstring, ignorecase);
    if (pos == -1) 
        return 0;
    if (replaceall == true) 
    {
        while (strfind(inputvar, searchstring, ignorecase) != -1) 
        {
            pos = strfind(inputvar, searchstring, ignorecase);
            strdel(inputvar, pos, pos + strlen(searchstring));
            strins(inputvar, replacestring, pos, strlen(inputvar));
        }
    } 
    else 
    {
        strdel(inputvar, pos, pos + strlen(searchstring));
        strins(inputvar, replacestring, pos, strlen(inputvar));
    }
    return 1;
}

public:MusicCarPlayer(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid))
        return SCM(playerid, COLOR_CHAT, "Вы должны находиться в автомобиле");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(g_subwoofer[vehicleid][E_MUSIC_START] == false)
        BitStream_2(playerid, s_CefInterface, t_CefShow, "Music", "[\"https://music.radmir.online/\",[[],[],0,0,0,50]]");
    else
        SendClientEventWithArgF(playerid, s_CefInterface, t_CefShow, "Music", "[\"https://music.radmir.online/\",[[[\"%s\",180]],[],0,0,0,%d]]",g_subwoofer[vehicleid][E_NAME],g_subwoofer[vehicleid][E_VOLUME]); 
    return true;       
}

new traffics_objects[] = {10424, 10426, 10425};
public: TrafficLightUpdate()
{
    for(new i; i < sizeof TrafficLight; i++) 
	{
		DestroyDynamicObject(TrafficLight[i][TR_ObjectID]);
        if(TrafficLight[i][TR_ColorStatus] >= 0 && TrafficLight[i][TR_ColorStatus] != 2) TrafficLight[i][TR_ColorStatus]++;
        else if(TrafficLight[i][TR_ColorStatus] == 2) TrafficLight[i][TR_ColorStatus] = 0;
        TrafficLight[i][TR_ObjectID] = CreateDynamicObject(traffics_objects[TrafficLight[i][TR_ColorStatus]], TrafficLight[i][TR_POS_X], TrafficLight[i][TR_POS_Y], TrafficLight[i][TR_POS_Z], TrafficLight[i][TR_POS_RX], TrafficLight[i][TR_POS_RY], TrafficLight[i][TR_POS_RZ]);
    }
}

public:ItemStoreMenu_OnBuy(playerid, event)
{
	if(GetPVarInt(playerid,"rubitem") == 3)
	{
		{
			if(GetPVarInt(playerid, "ItemCef") == 1)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveSkin(playerid, 15498);
			}
			if(GetPVarInt(playerid, "ItemCef") == 2)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveSkin(playerid, 15563);
			}
			if(GetPVarInt(playerid, "ItemCef") == 3)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveSkin(playerid, 15564);
			}
			if(GetPVarInt(playerid, "ItemCef") == 4)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveSkin(playerid, 15565);
			}
			if(GetPVarInt(playerid, "ItemCef") == 5)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 15499);
			}
			if(GetPVarInt(playerid, "ItemCef") == 6)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 15493);
			}
			if(GetPVarInt(playerid, "ItemCef") == 7)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 15496);
			}
			if(GetPVarInt(playerid, "ItemCef") == 8)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 15490);
			}
			if(GetPVarInt(playerid, "ItemCef") == 9)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 15569);
			}
			if(GetPVarInt(playerid, "ItemCef") == 10)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 15571);
			}
			if(GetPVarInt(playerid, "ItemCef") == 11)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 15572);
			}
			if(GetPVarInt(playerid, "ItemCef") == 12)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 15574);
			}
			if(GetPVarInt(playerid, "ItemCef") == 13)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveSkin(playerid, 15586);
			}
			if(GetPVarInt(playerid, "ItemCef") == 14)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveSkin(playerid, 15589);
			}
			if(GetPVarInt(playerid, "ItemCef") == 15)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveSkin(playerid, 15588);
			}
			if(GetPVarInt(playerid, "ItemCef") == 16)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveSkin(playerid, 15587);
			}
			if(GetPVarInt(playerid, "ItemCef") == 17)
			{
				if(GetPlayerCoins(playerid) < 225) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -225);
				GiveSkin(playerid, 17024);
			}
			if(GetPVarInt(playerid, "ItemCef") == 18)
			{
				if(GetPlayerCoins(playerid) < 225) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -225);
				GiveSkin(playerid, 17023);
			}
			if(GetPVarInt(playerid, "ItemCef") == 19)
			{
				if(GetPlayerCoins(playerid) < 225) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -225);
				GiveSkin(playerid, 17022);
			}
			if(GetPVarInt(playerid, "ItemCef") == 20)
			{
				if(GetPlayerCoins(playerid) < 225) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -225);
				GiveSkin(playerid, 17017);
			}
			if(GetPVarInt(playerid, "ItemCef") == 21)
			{
				if(GetPlayerCoins(playerid) < 225) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -225);
				GiveSkin(playerid, 17041);
			}
			if(GetPVarInt(playerid, "ItemCef") == 22)
			{
				if(GetPlayerCoins(playerid) < 225) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -225);
				GiveSkin(playerid, 17039);
			}
			if(GetPVarInt(playerid, "ItemCef") == 23)
			{
				if(GetPlayerCoins(playerid) < 225) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -225);
				GiveSkin(playerid, 17040);
			}
			if(GetPVarInt(playerid, "ItemCef") == 24)
			{
				if(GetPlayerCoins(playerid) < 225) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -225);
				GiveSkin(playerid, 17038);
			}
			if(GetPVarInt(playerid, "ItemCef") == 25)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 17045 );
			}
			if(GetPVarInt(playerid, "ItemCef") == 26)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 17044);
			}
			if(GetPVarInt(playerid, "ItemCef") == 27)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 17043);
			}
			if(GetPVarInt(playerid, "ItemCef") == 28)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 17042);
			}
			if(GetPVarInt(playerid, "ItemCef") == 29)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 17059);
			}
			if(GetPVarInt(playerid, "ItemCef") == 30)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 17050);
			}
			if(GetPVarInt(playerid, "ItemCef") == 31)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 17047);
			}
			if(GetPVarInt(playerid, "ItemCef") == 32)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 17046);
			}
			if(GetPVarInt(playerid, "ItemCef") == 33)
			{
				if(GetPlayerCoins(playerid) < 188) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -188);
				GiveSkin(playerid, 205);
			}
			if(GetPVarInt(playerid, "ItemCef") == 34)
			{
				if(GetPlayerCoins(playerid) < 188) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -188);
				GiveSkin(playerid, 204);
			}
			if(GetPVarInt(playerid, "ItemCef") == 35)
			{
				if(GetPlayerCoins(playerid) < 188) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -188);
				GiveSkin(playerid, 203);
			}
			if(GetPVarInt(playerid, "ItemCef") == 36)
			{
				if(GetPlayerCoins(playerid) < 188) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -188);
				GiveSkin(playerid, 202);
			}
			if(GetPVarInt(playerid, "ItemCef") == 37)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 282);
			}
			if(GetPVarInt(playerid, "ItemCef") == 38)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 265);
			}
			if(GetPVarInt(playerid, "ItemCef") == 39)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 255);
			}
			if(GetPVarInt(playerid, "ItemCef") == 40)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 224);
			}
			if(GetPVarInt(playerid, "ItemCef") == 41)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 17055);
			}
			if(GetPVarInt(playerid, "ItemCef") == 42)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 17064);
			}
			if(GetPVarInt(playerid, "ItemCef") == 43)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 17067);
			}
			if(GetPVarInt(playerid, "ItemCef") == 44)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 148);
			}
			if(GetPVarInt(playerid, "ItemCef") == 45)
			{
				if(GetPlayerCoins(playerid) < 320) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -320);
				GiveSkin(playerid, 17070);
			}
			if(GetPVarInt(playerid, "ItemCef") == 46)
			{
				if(GetPlayerCoins(playerid) < 320) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -320);
				GiveSkin(playerid, 17071);
			}
			if(GetPVarInt(playerid, "ItemCef") == 47)
			{
				if(GetPlayerCoins(playerid) < 320) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -320);
				GiveSkin(playerid, 17072);
			}
			if(GetPVarInt(playerid, "ItemCef") == 48)
			{
				if(GetPlayerCoins(playerid) < 320) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -320);
				GiveSkin(playerid, 17073);
			}
			if(GetPVarInt(playerid, "ItemCef") == 49)
			{
				if(GetPlayerCoins(playerid) < 490) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -490);
				GiveSkin(playerid, 17074);
			}
			if(GetPVarInt(playerid, "ItemCef") == 50)
			{
				if(GetPlayerCoins(playerid) < 390) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -490);
				GiveSkin(playerid, 17075);
			}
			if(GetPVarInt(playerid, "ItemCef") == 51)
			{
				if(GetPlayerCoins(playerid) < 390) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -490);
				GiveSkin(playerid, 17076);
			}
			if(GetPVarInt(playerid, "ItemCef") == 52)
			{
				if(GetPlayerCoins(playerid) < 490) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -490);
				GiveSkin(playerid, 17077);
			}
			if(GetPVarInt(playerid, "ItemCef") == 53)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15414);
			}
			if(GetPVarInt(playerid, "ItemCef") == 54)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 15421);
			}
			if(GetPVarInt(playerid, "ItemCef") == 55)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -250);
				GiveSkin(playerid, 15427);
			}
			if(GetPVarInt(playerid, "ItemCef") == 56)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15434);
			}
			if(GetPVarInt(playerid, "ItemCef") == 57)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15436);
			}
			if(GetPVarInt(playerid, "ItemCef") == 58)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15451);
			}
			if(GetPVarInt(playerid, "ItemCef") == 59)
			{
				if(GetPlayerCoins(playerid) < 450) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -450);
				GiveSkin(playerid, 15462);
			}
			if(GetPVarInt(playerid, "ItemCef") == 60)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15483);
			}
			if(GetPVarInt(playerid, "ItemCef") == 61)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15501);
			}
			if(GetPVarInt(playerid, "ItemCef") == 62)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15506);
			}
			if(GetPVarInt(playerid, "ItemCef") == 63)
			{
				if(GetPlayerCoins(playerid) < 555) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -555);
				GiveSkin(playerid, 15539);
			}
			if(GetPVarInt(playerid, "ItemCef") == 64)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15544);
			}
			if(GetPVarInt(playerid, "ItemCef") == 65)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15547);
			}
			if(GetPVarInt(playerid, "ItemCef") == 66)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15551);
			}
			if(GetPVarInt(playerid, "ItemCef") == 67)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 15568);
			}
			if(GetPVarInt(playerid, "ItemCef") == 68)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 15595);
			}
			if(GetPVarInt(playerid, "ItemCef") == 69)
			{
				if(GetPlayerCoins(playerid) < 555) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -555);
				GiveSkin(playerid, 17028);
			}
			if(GetPVarInt(playerid, "ItemCef") == 70)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 17029);
			}
			if(GetPVarInt(playerid, "ItemCef") == 71)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 17048);
			}
			if(GetPVarInt(playerid, "ItemCef") == 72)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 17050);
			}
			if(GetPVarInt(playerid, "ItemCef") == 73)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 17051);
			}
			if(GetPVarInt(playerid, "ItemCef") == 74)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 17049);
			}
			if(GetPVarInt(playerid, "ItemCef") == 75)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 17058);
			}
			if(GetPVarInt(playerid, "ItemCef") == 76)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 17069);
			}
			if(GetPVarInt(playerid, "ItemCef") == 77)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 1);
			}
			if(GetPVarInt(playerid, "ItemCef") == 78)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 43);
			}
			if(GetPVarInt(playerid, "ItemCef") == 79)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 48);
			}
			if(GetPVarInt(playerid, "ItemCef") == 80)
			{
				if(GetPlayerCoins(playerid) < 666) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -666);
				GiveSkin(playerid, 47);
			}
			if(GetPVarInt(playerid, "ItemCef") == 81)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 51);
			}
			if(GetPVarInt(playerid, "ItemCef") == 82)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 63);
			}
			if(GetPVarInt(playerid, "ItemCef") == 83)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 115);
			}
			if(GetPVarInt(playerid, "ItemCef") == 84)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 174);
			}
			if(GetPVarInt(playerid, "ItemCef") == 85)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 175);
			}
			if(GetPVarInt(playerid, "ItemCef") == 86)
			{
				if(GetPlayerCoins(playerid) < 555) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -555);
				GiveSkin(playerid, 182);
			}
			if(GetPVarInt(playerid, "ItemCef") == 87)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 183);
			}
			if(GetPVarInt(playerid, "ItemCef") == 88)
			{
				if(GetPlayerCoins(playerid) < 777) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -777);
				GiveSkin(playerid, 194);
			}
			if(GetPVarInt(playerid, "ItemCef") == 89)
			{
				if(GetPlayerCoins(playerid) < 555) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -555);
				GiveSkin(playerid, 206);
			}
			if(GetPVarInt(playerid, "ItemCef") == 90)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 250);
			}
			if(GetPVarInt(playerid, "ItemCef") == 91)
			{
				if(GetPlayerCoins(playerid) < 333) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -333);
				GiveSkin(playerid, 258);
			}
			if(GetPVarInt(playerid, "ItemCef") == 92)
			{
				if(GetPlayerCoins(playerid) < 666) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -666);
				GiveSkin(playerid, 270);
			}
			if(GetPVarInt(playerid, "ItemCef") == 93)
			{
				if(GetPlayerCoins(playerid) < 555) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -555);
				GiveSkin(playerid, 271);
			}
			if(GetPVarInt(playerid, "ItemCef") == 94)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 15320);
			}
			if(GetPVarInt(playerid, "ItemCef") == 95)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 15358);
			}
			if(GetPVarInt(playerid, "ItemCef") == 96)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 15357);
			}
			if(GetPVarInt(playerid, "ItemCef") == 97)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -444);
				GiveSkin(playerid, 15407);
			}
			if(GetPVarInt(playerid, "ItemCef") == 98)
			{
				if(GetPlayerCoins(playerid) < 777) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -777);
				GiveSkin(playerid, 15415);
			}
			if(GetPVarInt(playerid, "ItemCef") == 99)
			{
				if(GetPlayerCoins(playerid) < 555) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -555);
				GiveSkin(playerid, 15423);
			}
			if(GetPVarInt(playerid, "ItemCef") == 100)
			{
				if(GetPlayerCoins(playerid) < 700) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -700);
				GiveSkin(playerid, 17079);
			}
			if(GetPVarInt(playerid, "ItemCef") == 101)
			{
				if(GetPlayerCoins(playerid) < 400) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -400);
				GiveSkin(playerid, 17081);
			}
			if(GetPVarInt(playerid, "ItemCef") == 102)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -300);
				GiveSkin(playerid, 281);
			}
			if(GetPVarInt(playerid, "ItemCef") == 103)
			{
				if(GetPlayerCoins(playerid) < 888) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
				GivePlayerCoins(playerid, -888);
				GiveSkin(playerid, 280);
			}
			DeletePVar(playerid, "ItemCef");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('ItemStore')");
		}
	}
	if(GetPVarInt(playerid,"rubitem") == 4)
	{
		{
			if(GetPVarInt(playerid, "ItemCef") == 1)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 17282, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 2)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 17283, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 3)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 17284, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 4)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 17285, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 5)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16457, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 6)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16456, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 7)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16455, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 8)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16454, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 9)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16678, 18);
			}
			if(GetPVarInt(playerid, "ItemCef") == 10)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16465, 18);
			}
			if(GetPVarInt(playerid, "ItemCef") == 11)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16464, 18);
			}
			if(GetPVarInt(playerid, "ItemCef") == 12)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16463, 18);
			}
			if(GetPVarInt(playerid, "ItemCef") == 13)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16600, 9);
			}
			if(GetPVarInt(playerid, "ItemCef") == 14)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 14736, 9);
			}
			if(GetPVarInt(playerid, "ItemCef") == 15)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 14735, 9);
			}
			if(GetPVarInt(playerid, "ItemCef") == 16)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 14724, 9);
			}
			if(GetPVarInt(playerid, "ItemCef") == 17)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16228, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 18)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16472, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 19)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16471, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 20)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 16470, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 21)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 14066, 2);
			}
			if(GetPVarInt(playerid, "ItemCef") == 22)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 14064, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 23)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 14048, 2);
			}
			if(GetPVarInt(playerid, "ItemCef") == 24)
			{
				if(GetPlayerCoins(playerid) < 100) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -100);
				GiveAcs(playerid, 14052, 2);
			}
			if(GetPVarInt(playerid, "ItemCef") == 25)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveAcs(playerid, 14780, 13);
			}
			if(GetPVarInt(playerid, "ItemCef") == 26)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveAcs(playerid, 14779, 13);
			}
			if(GetPVarInt(playerid, "ItemCef") == 27)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveAcs(playerid, 14782, 13);
			}
			if(GetPVarInt(playerid, "ItemCef") == 28)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveAcs(playerid, 14781, 13);
			}
			if(GetPVarInt(playerid, "ItemCef") == 29)
			{
				if(GetPlayerCoins(playerid) < 88) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -88);
				GiveAcs(playerid, 16985, 12);
			}
			if(GetPVarInt(playerid, "ItemCef") == 30)
			{
				if(GetPlayerCoins(playerid) < 88) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -88);
				GiveAcs(playerid, 16986, 12);
			}
			if(GetPVarInt(playerid, "ItemCef") == 31)
			{
				if(GetPlayerCoins(playerid) < 88) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -88);
				GiveAcs(playerid, 16987, 12);
			}
			if(GetPVarInt(playerid, "ItemCef") == 32)
			{
				if(GetPlayerCoins(playerid) < 88) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -88);
				GiveAcs(playerid, 16988, 12);
			}
			if(GetPVarInt(playerid, "ItemCef") == 33)
			{
				if(GetPlayerCoins(playerid) < 88) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -88);
				GiveAcs(playerid, 16682, 12);
			}
			if(GetPVarInt(playerid, "ItemCef") == 34)
			{
				if(GetPlayerCoins(playerid) < 88) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -88);
				GiveAcs(playerid, 16665, 12);
			}
			if(GetPVarInt(playerid, "ItemCef") == 35)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveAcs(playerid, 16747, 4);
			}
			if(GetPVarInt(playerid, "ItemCef") == 36)
			{
				if(GetPlayerCoins(playerid) < 50) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -50);
				GiveAcs(playerid, 16746, 4);
			}
			if(GetPVarInt(playerid, "ItemCef") == 37)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveAcs(playerid, 17385, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 38)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveAcs(playerid, 17390, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 39)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveAcs(playerid, 17605, 7);
			}
			if(GetPVarInt(playerid, "ItemCef") == 40)
			{
				if(GetPlayerCoins(playerid) < 250) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -250);
				GiveAcs(playerid, 17395, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 41)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveAcs(playerid, 18292, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 42)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveAcs(playerid, 18000, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 43)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveAcs(playerid, 17999, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 44)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveAcs(playerid, 17987, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 45)
			{
				if(GetPlayerCoins(playerid) < 300) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -300);
				GiveAcs(playerid, 14075, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 46)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveAcs(playerid, 16592, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 47)
			{
				if(GetPlayerCoins(playerid) < 150) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -150);
				GiveAcs(playerid, 16779, 10);
			}
			if(GetPVarInt(playerid, "ItemCef") == 48)
			{
				if(GetPlayerCoins(playerid) < 600) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -600);
				GiveAcs(playerid, 14739, 13);
			}
			if(GetPVarInt(playerid, "ItemCef") == 49)
			{
				if(GetPlayerCoins(playerid) < 450) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -450);
				GiveAcs(playerid, 14196, 12);
			}
			if(GetPVarInt(playerid, "ItemCef") == 50)
			{
				if(GetPlayerCoins(playerid) < 700) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -700);
				GiveAcs(playerid, 14197, 12);
			}
			if(GetPVarInt(playerid, "ItemCef") == 51)
			{
				if(GetPlayerCoins(playerid) < 350) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -350);
				GiveAcs(playerid, 17386, 2);
			}
			if(GetPVarInt(playerid, "ItemCef") == 52)
			{
				if(GetPlayerCoins(playerid) < 400) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -400);
				GiveAcs(playerid, 18549, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 53)
			{
				if(GetPlayerCoins(playerid) < 350) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -350);
				GiveAcs(playerid, 18548, 2);
			}
			if(GetPVarInt(playerid, "ItemCef") == 54)
			{
				if(GetPlayerCoins(playerid) < 200) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -200);
				GiveAcs(playerid, 4125, 4);
			}
			if(GetPVarInt(playerid, "ItemCef") == 55)
			{
				if(GetPlayerCoins(playerid) < 400) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -400);
				GiveAcs(playerid, 4126, 4);
			}
			if(GetPVarInt(playerid, "ItemCef") == 56)
			{
				if(GetPlayerCoins(playerid) < 400) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -400);
				GiveAcs(playerid, 4127, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 57)
			{
				if(GetPlayerCoins(playerid) < 666) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -666);
				GiveAcs(playerid, 4128, 8);
			}
			if(GetPVarInt(playerid, "ItemCef") == 58)
			{
				if(GetPlayerCoins(playerid) < 444) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -444);
				GiveAcs(playerid, 4129, 5);
			}
			if(GetPVarInt(playerid, "ItemCef") == 59)
			{
				if(GetPlayerCoins(playerid) < 666) return GameText(playerid, "~r~Недостаточно~n~"SERVER_RUB"", 3000, 2);
		  		GivePlayerCoins(playerid, -666);
				GiveAcs(playerid, 4134, 19);
			}
			DeletePVar(playerid, "ItemCef");
			BitStream_1(playerid, s_CefInterface, t_CefUpdate, "closeInterface('ItemStore')");
		}
	}
	return 1;
}

public:ItemStoreMenu_OnClick(playerid, event)
{
    DeletePVar(playerid, "ItemCef");
	if(GetPVarInt(playerid,"rubitem") == 3)
	{
	    switch(event)
		{
			case 0: SetPVarInt(playerid, "ItemCef", 1);
			case 1: SetPVarInt(playerid, "ItemCef", 2);
			case 2: SetPVarInt(playerid, "ItemCef", 3);
			case 3: SetPVarInt(playerid, "ItemCef", 4);
			case 4: SetPVarInt(playerid, "ItemCef", 5);
			case 5: SetPVarInt(playerid, "ItemCef", 6);
			case 6: SetPVarInt(playerid, "ItemCef", 7);
			case 7: SetPVarInt(playerid, "ItemCef", 8);
			case 8: SetPVarInt(playerid, "ItemCef", 9);
			case 9: SetPVarInt(playerid, "ItemCef", 10);
			case 10: SetPVarInt(playerid, "ItemCef", 11);
			case 11: SetPVarInt(playerid, "ItemCef", 12);
			case 12: SetPVarInt(playerid, "ItemCef", 13);
			case 13: SetPVarInt(playerid, "ItemCef", 14);
			case 14: SetPVarInt(playerid, "ItemCef", 15);
			case 15: SetPVarInt(playerid, "ItemCef", 16);
			case 16: SetPVarInt(playerid, "ItemCef", 17);
			case 17: SetPVarInt(playerid, "ItemCef", 18);
			case 18: SetPVarInt(playerid, "ItemCef", 19);
			case 19: SetPVarInt(playerid, "ItemCef", 20);
			case 20: SetPVarInt(playerid, "ItemCef", 21);
			case 21: SetPVarInt(playerid, "ItemCef", 22);
			case 22: SetPVarInt(playerid, "ItemCef", 23);
			case 23: SetPVarInt(playerid, "ItemCef", 24);
			case 24: SetPVarInt(playerid, "ItemCef", 25);
			case 25: SetPVarInt(playerid, "ItemCef", 26);
			case 26: SetPVarInt(playerid, "ItemCef", 27);
			case 27: SetPVarInt(playerid, "ItemCef", 28);
			case 28: SetPVarInt(playerid, "ItemCef", 29);
			case 29: SetPVarInt(playerid, "ItemCef", 30);
			case 30: SetPVarInt(playerid, "ItemCef", 31);
			case 31: SetPVarInt(playerid, "ItemCef", 32);
			case 32: SetPVarInt(playerid, "ItemCef", 33);
			case 33: SetPVarInt(playerid, "ItemCef", 34);
			case 34: SetPVarInt(playerid, "ItemCef", 35);
			case 35: SetPVarInt(playerid, "ItemCef", 36);
			case 36: SetPVarInt(playerid, "ItemCef", 37);
			case 37: SetPVarInt(playerid, "ItemCef", 38);
			case 38: SetPVarInt(playerid, "ItemCef", 39);
			case 39: SetPVarInt(playerid, "ItemCef", 40);
			case 40: SetPVarInt(playerid, "ItemCef", 41);
			case 41: SetPVarInt(playerid, "ItemCef", 42);
			case 42: SetPVarInt(playerid, "ItemCef", 43);
			case 43: SetPVarInt(playerid, "ItemCef", 44);
			case 44: SetPVarInt(playerid, "ItemCef", 45);
			case 45: SetPVarInt(playerid, "ItemCef", 46);
			case 46: SetPVarInt(playerid, "ItemCef", 47);
			case 47: SetPVarInt(playerid, "ItemCef", 48);
			case 48: SetPVarInt(playerid, "ItemCef", 49);
			case 49: SetPVarInt(playerid, "ItemCef", 50);
			case 50: SetPVarInt(playerid, "ItemCef", 51);
			case 51: SetPVarInt(playerid, "ItemCef", 52);
			case 52: SetPVarInt(playerid, "ItemCef", 53);
			case 53: SetPVarInt(playerid, "ItemCef", 54);
			case 54: SetPVarInt(playerid, "ItemCef", 55);
			case 55: SetPVarInt(playerid, "ItemCef", 56);
			case 56: SetPVarInt(playerid, "ItemCef", 57);
			case 57: SetPVarInt(playerid, "ItemCef", 58);
			case 58: SetPVarInt(playerid, "ItemCef", 59);
			case 59: SetPVarInt(playerid, "ItemCef", 60);
			case 60: SetPVarInt(playerid, "ItemCef", 61);
			case 61: SetPVarInt(playerid, "ItemCef", 62);
			case 62: SetPVarInt(playerid, "ItemCef", 63);
			case 63: SetPVarInt(playerid, "ItemCef", 64);
			case 64: SetPVarInt(playerid, "ItemCef", 65);
			case 65: SetPVarInt(playerid, "ItemCef", 66);
			case 66: SetPVarInt(playerid, "ItemCef", 67);
			case 67: SetPVarInt(playerid, "ItemCef", 68);
			case 68: SetPVarInt(playerid, "ItemCef", 69);
			case 69: SetPVarInt(playerid, "ItemCef", 70);
			case 70: SetPVarInt(playerid, "ItemCef", 71);
			case 71: SetPVarInt(playerid, "ItemCef", 72);
			case 72: SetPVarInt(playerid, "ItemCef", 73);
			case 73: SetPVarInt(playerid, "ItemCef", 74);
			case 74: SetPVarInt(playerid, "ItemCef", 75);
			case 75: SetPVarInt(playerid, "ItemCef", 76);
			case 76: SetPVarInt(playerid, "ItemCef", 77);
			case 77: SetPVarInt(playerid, "ItemCef", 78);
			case 78: SetPVarInt(playerid, "ItemCef", 79);
			case 79: SetPVarInt(playerid, "ItemCef", 80);
			case 80: SetPVarInt(playerid, "ItemCef", 81);
			case 81: SetPVarInt(playerid, "ItemCef", 82);
			case 82: SetPVarInt(playerid, "ItemCef", 83);
			case 83: SetPVarInt(playerid, "ItemCef", 84);
			case 84: SetPVarInt(playerid, "ItemCef", 85);
			case 85: SetPVarInt(playerid, "ItemCef", 86);
			case 86: SetPVarInt(playerid, "ItemCef", 87);
			case 87: SetPVarInt(playerid, "ItemCef", 88);
			case 88: SetPVarInt(playerid, "ItemCef", 89);
			case 89: SetPVarInt(playerid, "ItemCef", 90);
			case 90: SetPVarInt(playerid, "ItemCef", 91);
			case 91: SetPVarInt(playerid, "ItemCef", 92);
			case 92: SetPVarInt(playerid, "ItemCef", 93);
			case 93: SetPVarInt(playerid, "ItemCef", 94);
			case 94: SetPVarInt(playerid, "ItemCef", 95);
			case 95: SetPVarInt(playerid, "ItemCef", 96);
			case 96: SetPVarInt(playerid, "ItemCef", 97);
			case 97: SetPVarInt(playerid, "ItemCef", 98);
			case 98: SetPVarInt(playerid, "ItemCef", 99);
			case 99: SetPVarInt(playerid, "ItemCef", 100);
			case 101: SetPVarInt(playerid, "ItemCef", 101);
			case 102: SetPVarInt(playerid, "ItemCef", 102);
			case 103: SetPVarInt(playerid, "ItemCef", 104);
		}
	}
	if(GetPVarInt(playerid,"rubitem") == 4)
	{
	    switch(event)
		{
			case 0: SetPVarInt(playerid, "ItemCef", 1);
			case 1: SetPVarInt(playerid, "ItemCef", 2);
			case 2: SetPVarInt(playerid, "ItemCef", 3);
			case 3: SetPVarInt(playerid, "ItemCef", 4);
			case 4: SetPVarInt(playerid, "ItemCef", 5);
			case 5: SetPVarInt(playerid, "ItemCef", 6);
			case 6: SetPVarInt(playerid, "ItemCef", 7);
			case 7: SetPVarInt(playerid, "ItemCef", 8);
			case 8: SetPVarInt(playerid, "ItemCef", 9);
			case 9: SetPVarInt(playerid, "ItemCef", 10);
			case 10: SetPVarInt(playerid, "ItemCef", 11);
			case 11: SetPVarInt(playerid, "ItemCef", 12);
			case 12: SetPVarInt(playerid, "ItemCef", 13);
			case 13: SetPVarInt(playerid, "ItemCef", 14);
			case 14: SetPVarInt(playerid, "ItemCef", 15);
			case 15: SetPVarInt(playerid, "ItemCef", 16);
			case 16: SetPVarInt(playerid, "ItemCef", 17);
			case 17: SetPVarInt(playerid, "ItemCef", 18);
			case 18: SetPVarInt(playerid, "ItemCef", 19);
			case 19: SetPVarInt(playerid, "ItemCef", 20);
			case 20: SetPVarInt(playerid, "ItemCef", 21);
			case 21: SetPVarInt(playerid, "ItemCef", 22);
			case 22: SetPVarInt(playerid, "ItemCef", 23);
			case 23: SetPVarInt(playerid, "ItemCef", 24);
			case 24: SetPVarInt(playerid, "ItemCef", 25);
			case 25: SetPVarInt(playerid, "ItemCef", 26);
			case 26: SetPVarInt(playerid, "ItemCef", 27);
			case 27: SetPVarInt(playerid, "ItemCef", 28);
			case 28: SetPVarInt(playerid, "ItemCef", 29);
			case 29: SetPVarInt(playerid, "ItemCef", 30);
			case 30: SetPVarInt(playerid, "ItemCef", 31);
			case 31: SetPVarInt(playerid, "ItemCef", 32);
			case 32: SetPVarInt(playerid, "ItemCef", 33);
			case 33: SetPVarInt(playerid, "ItemCef", 34);
			case 34: SetPVarInt(playerid, "ItemCef", 35);
			case 35: SetPVarInt(playerid, "ItemCef", 36);
			case 36: SetPVarInt(playerid, "ItemCef", 37);
			case 37: SetPVarInt(playerid, "ItemCef", 38);
			case 38: SetPVarInt(playerid, "ItemCef", 39);
			case 39: SetPVarInt(playerid, "ItemCef", 40);
			case 40: SetPVarInt(playerid, "ItemCef", 41);
			case 41: SetPVarInt(playerid, "ItemCef", 42);
			case 42: SetPVarInt(playerid, "ItemCef", 43);
			case 43: SetPVarInt(playerid, "ItemCef", 44);
			case 44: SetPVarInt(playerid, "ItemCef", 45);
			case 45: SetPVarInt(playerid, "ItemCef", 46);
			case 46: SetPVarInt(playerid, "ItemCef", 47);
			case 47: SetPVarInt(playerid, "ItemCef", 48);
			case 48: SetPVarInt(playerid, "ItemCef", 49);
			case 49: SetPVarInt(playerid, "ItemCef", 50);
			case 50: SetPVarInt(playerid, "ItemCef", 51);
			case 51: SetPVarInt(playerid, "ItemCef", 52);
			case 52: SetPVarInt(playerid, "ItemCef", 53);
			case 53: SetPVarInt(playerid, "ItemCef", 54);
			case 54: SetPVarInt(playerid, "ItemCef", 55);
			case 55: SetPVarInt(playerid, "ItemCef", 56);
			case 56: SetPVarInt(playerid, "ItemCef", 57);
			case 57: SetPVarInt(playerid, "ItemCef", 58);
			case 58: SetPVarInt(playerid, "ItemCef", 59);
			case 59: SetPVarInt(playerid, "ItemCef", 60);
		}
	}
	return 1;
}

Jail_Init()
{
    JailActor[0] = CreateActor(293, -1726.51, -2806.50, 1001.40, 310.7213);
    SetActorVirtualWorld(JailActor[0], 5);
    CreateDynamic3DTextLabel("Клемент\n{FFFFFF}Используйте ALT для взаимодействия", 0xFFFFFFFFFFBE5CFF, -1726.51, -2806.50, 1001.40, 2.00);
    JailActor[1] = CreateActor(50,-1711.7368,-2811.9382,1004.8141,12.6017);
    SetActorVirtualWorld(JailActor[1], 5);
    CreateDynamic3DTextLabel("Мирон\n{FFFFFF}Используйте ALT для взаимодействия", 0xFFFFFFFFFFBE5CFF, -1711.7368,-2811.9382,1004.8141, 2.00);
    AreaJailInterior = CreateDynamicSphere(-1628.36, -2797.26, 1001.40, 250.0);
    AreaJail = CreateDynamicSphere(-1752.2334, -2891.8132, 11.0545, 250.0);
    for(new i; i < sizeof(Toilet_Positions); i++)
    {
        CreateDynamic3DTextLabel("Унитаз\n{FFFFFF}Используйте ALT для взаимодействия", 0xFFFFFFFFFFBE5CFF, Toilet_Positions[i][0], Toilet_Positions[i][1], Toilet_Positions[i][2], 2.0);
    }
	for(new i; i < sizeof(J_IntDoors); i++)
	{
		J_IntDoors[i][J_ObjID] = CreateDynamicObject(J_IntDoors[i][J_ModelID], J_IntDoors[i][J_PosX], J_IntDoors[i][J_POS_Y], J_IntDoors[i][J_POS_Z], 0.0, 0.0, J_IntDoors[i][J_POS_RZ]);
	}
    for(new i; i < sizeof(J_WorldDoors); i++)
    {
        J_WorldDoors[i][J_ObjID] = CreateDynamicObject(J_WorldDoors[i][J_ModelID], J_WorldDoors[i][J_PosX], J_WorldDoors[i][J_POS_Y], J_WorldDoors[i][J_POS_Z], 0.0, 0.0, J_WorldDoors[i][J_POS_RZ]);
    }
    CreateDynamic3DTextLabel("Блок управления\n {FFFFFF}Используйте ALT для взаимодействия", 0xFFFFFFFFFFBE5CFF, -1671.02, -2826.38, 1004.81, 2.00);
	CreateDynamic3DTextLabel("Используйте громкоговоритель\n {FFFFFF}Для оповещения всех заключённых", 0xFFFFFFFFFFBE5CFF, -1668.2858,-2826.2517,1004.8162, 2.00);
}

ToiletJail(playerid)
{
	if(GetPlayerData(playerid, P_JAIL) < 1) return 1;
    for(new i; i < sizeof(Toilet_Positions); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.0, Toilet_Positions[i][0], Toilet_Positions[i][1], Toilet_Positions[i][2]))
        {
            if(ToiletStatus[i][0] == 1) return SCM(playerid, 0xCECECEFF, "Унитаз не нуждается в чистке.");
            else
            {
                new ToiletType = RandomEx(0, 2);
                BitStream_2(playerid, s_CefInterface, t_CefShow, "ToiletCleaning", (str_f("[%d, 5]", ToiletType)));
            }
        }
    }
    return 1;
}

public: ToiletCleaning_OnPlayerEnd(playerid)
{
    for(new i; i < sizeof(Toilet_Positions); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.0, Toilet_Positions[i][0], Toilet_Positions[i][1], Toilet_Positions[i][2]))
        {
            BitStream_1(playerid, s_CefInterface, t_CefHide, "ToiletCleaning");
            GameText(playerid, "~g~Успешно", 4000, 2);
            ToiletStatus[i][0] = 1;
            ToiletStatus[i][1] = 240;
			new amount = random(3) + 1;
			playerCigarettes[playerid] += amount;			
			new message[128]; 
			format(message, sizeof(message), "Вы получили %d сигарет! У вас сейчас %d сигарет.", amount, playerCigarettes[playerid]);
			SendClientMessage(playerid, 0xAFAFAFFF, message); 
			TualetMoikaEditor(playerid);
        }
    }
}

Jail_OnSecondTimer()
{
    for(new i; i < sizeof(Toilet_Positions); i++)
    {
        if(ToiletStatus[i][0] == 1)
        {
            ToiletStatus[i][1]--;
            if(ToiletStatus[i][1] == 0) ToiletStatus[i][0] = 0;
        }
    }
}

JailUseDoor(playerid, type)
{
    if(type == 0)
    {
		if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return 1;
        for(new i; i <  sizeof(J_IntDoors); i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, J_IntDoors[i][J_PosX], J_IntDoors[i][J_POS_Y], J_IntDoors[i][J_POS_Z]))
            {
                STRING_GLOBAL[0] = EOS;
                if(J_IntDoors[i][J_Status] == true) 
                {
                    MoveDynamicObject(J_IntDoors[i][J_ObjID], J_IntDoors[i][J_PosX], J_IntDoors[i][J_POS_Y], J_IntDoors[i][J_POS_Z] + 0.05, 0.05, 0.0, 0.0, J_IntDoors[i][J_POS_RZ]);
                    J_IntDoors[i][J_Status] = false;
                    if(J_IntDoors[i][J_ModelID] != 17134) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "закрыл(а) дверь");
                    else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "закрыл(а) дверь клетки");
                    return Action(playerid, STRING_GLOBAL);
                }
                if(J_IntDoors[i][J_Status] == false) 
                {
                    MoveDynamicObject(J_IntDoors[i][J_ObjID], J_IntDoors[i][J_PosX], J_IntDoors[i][J_POS_Y], J_IntDoors[i][J_POS_Z], 0.05, 0.0, 0.0, J_IntDoors[i][J_POS_RZ] - 150.0);
                    J_IntDoors[i][J_Status] = true;
                    if(J_IntDoors[i][J_ModelID] != 17134) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "открыл(а) дверь");
                    else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "открыл(а) дверь клетки");
                    return Action(playerid, STRING_GLOBAL);
                }
            }
        }
    }
    if(type == 1)
    {
		if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return 1;
        for(new i; i <  sizeof(J_WorldDoors); i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, J_WorldDoors[i][J_PosX], J_WorldDoors[i][J_POS_Y], J_WorldDoors[i][J_POS_Z]))
            {
                switch(J_WorldDoors[i][J_Status])
                {
                    case true:
                    {
                        MoveDynamicObject(J_WorldDoors[i][J_ObjID], J_WorldDoors[i][J_PosX], J_WorldDoors[i][J_POS_Y], J_WorldDoors[i][J_POS_Z] + 0.05, 0.05, 0.0, 0.0, J_WorldDoors[i][J_POS_RZ]);
                        J_WorldDoors[i][J_Status] = false;
                    }
                    case false:
                    {
                        MoveDynamicObject(J_WorldDoors[i][J_ObjID], J_WorldDoors[i][J_PosX], J_WorldDoors[i][J_POS_Y], J_WorldDoors[i][J_POS_Z], 0.05, 0.0, 0.0, J_WorldDoors[i][J_POS_RZ] - 150.0);
                        J_WorldDoors[i][J_Status] = true;
                    }
                }
            }
        }
    }
    return 1;
}

public:Loudspeaker(playerid)
{
	if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");
	Dialog(playerid, DIALOG_JAIL_ALERT, DIALOG_STYLE_INPUT, "Громкоговоритель", "Введите в поле ниже сообщение которое Вы хотите, чтобы было оповещено на территории тюрьмы", "Ввести", "Закрыть");
	return 1;
}

ShowCamera(playerid)
{
	SetTimerEx("CameraTreJectedOne", 1000, false, "i", playerid);
}
public:CameraTreJectedOne(playerid)
{
    SetPlayerCameraPos(playerid, -1726.675781, -2797.450683, 1006.854248);
    SetPlayerCameraLookAt(playerid, -1722.446777, -2799.658203, 1005.356872);
	SetTimerEx("CameraTreJectedTwo", 6000, false, "i", playerid);
}
public:CameraTreJectedTwo(playerid)
{
    SetPlayerCameraPos(playerid, -1720.058959, -2827.259277, 1007.384460);
    SetPlayerCameraLookAt(playerid, -1716.933471, -2823.869384, 1005.450683);
	SetTimerEx("CameraTreJectedThree", 6000, false, "i", playerid);
}
public:CameraTreJectedThree(playerid)
{
    SetPlayerCameraPos(playerid, -1749.441650,-2799.395751,1008.044067);
    SetPlayerCameraLookAt(playerid, -1745.590820,-2801.766113,1005.910461);
	SetTimerEx("CameraTreJectedFour", 6000, false, "i", playerid);
}
public:CameraTreJectedFour(playerid)
{
    SetPlayerCameraPos(playerid, -1691.967773,-2805.664794,1007.458984);
    SetPlayerCameraLookAt(playerid, -1695.445068,-2802.488281,1005.780090);
	SetTimerEx("CameraTreJectedFive", 6000 , false, "i", playerid);
}
public:CameraTreJectedFive(playerid)
{
    SetPlayerCameraPos(playerid, -1713.667724,-2776.968017,1007.836669);
    SetPlayerCameraLookAt(playerid, -1716.145507,-2780.470458,1005.268981);
	SetTimerEx("CameraUnFreezed", 6000 , false, "i", playerid);
} 
public:CameraUnFreezed(playerid)
{
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);	
}
//===========================================================================================ZIMA
public: SetSnowForPlayer(playerid, snow_status)
{
    if(snow_status > 0) SetSnowStatus(playerid, 2);
    else SetSnowStatus(playerid,0);
    return 1;
}

stock SetSnowStatus(playerid, snow)
{
	new
		BitStream:bsn = BS_New();
	BS_WriteValue(bsn, PR_UINT8, ID_CEF_RPC);
	BS_WriteValue(bsn, PR_UINT16, 16);
	BS_WriteValue(bsn, PR_UINT32, snow);
	PR_SendPacket(bsn, playerid);
	BS_Delete(bsn);
}
enum E_LAVKAT_STRUCT
{
    TLAV_ID,
    TLAV_NAME[26],
    TLAV_ITEM,
    TLAV_TYPE,
    TLAV_PRICE
}
static const TradeLavkaList[][E_LAVKAT_STRUCT] = {
    {17405, "GAZ 24-95 КОЧЕВНИК", 17405, 2, 20000},
    {17989, "Посох щелкунчик", 289, 0, 8500},
    {17008, "Костюм гусара", 100, 1, 6500},
    {11006, "Снегович на плечо", 291, 0, 5000},
    {17984, "Рюкзак щелкунчик", 222, 0, 3500},
    {17992, "Рюкзак ёлка", 222, 0, 3500},
    {17976, "Акссесуар на транспорт", 285, 0, 3000},
    {17996, "Коричневая ушанка", 185, 0, 2500},
    {17997, "Синяя ушанка", 185, 0, 2500},
    {15752, "Шапка бинни", 185, 0, 2500},
    {14793, "Шапка ушанка серая", 185, 0, 750},
    {17995, "Ободок единорога", 185, 0, 450},
    {17988, "Ободок рожки", 185, 0, 450}
};

stock OpenTLavka(playerid) {
    STRING_GLOBAL[0] = EOS;
    static fmt_tt[64];
    for(new i, j=sizeof(TradeLavkaList);i<j;i++) {
        format(fmt_tt,sizeof fmt_tt,"[%d,\"%s\",%d,%d,[[359,%d]]],",TradeLavkaList[i][TLAV_ID],TradeLavkaList[i][TLAV_NAME],TradeLavkaList[i][TLAV_ITEM],TradeLavkaList[i][TLAV_TYPE],TradeLavkaList[i][TLAV_PRICE]);
        strcat(STRING_GLOBAL,fmt_tt);
    }
    new lens = strlen(STRING_GLOBAL);
    strdel(STRING_GLOBAL,lens-1,lens);
    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"[0,\"Зарабатывайте ${359} Ледяные Механизмы и покупайте предметы\",[[359,%d]],[%s]]",GetIteam(playerid, 359),STRING_GLOBAL);
    BitStream_2(playerid, s_CefInterface, t_CefShow, "Helloween", STRING_GLOBAL);
    return 1;
}
public: Market_OnSelect(playerid,item)
{
    new iter = -1;
    for(new i, j=sizeof(TradeLavkaList);i<j;i++) {
        if(TradeLavkaList[i][TLAV_ID] != item) continue;
        iter = i;
        break;
    }
    if(iter == -1) return 1;
    if(GetIteam(playerid, 359) < TradeLavkaList[iter][TLAV_PRICE]) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
    GiveIteam(playerid, 359, 0, TradeLavkaList[iter][TLAV_PRICE], 0, "Покупка в лавке");
    GameText(playerid, "~g~УСПЕШНО", 3000, 2);
    BitStream_1(playerid, s_CefInterface, t_CefHide, "Helloween");
    switch(TradeLavkaList[iter][TLAV_TYPE])
    {
        case 0:
        {
            new puk = -1;
            switch(TradeLavkaList[iter][TLAV_ITEM]) {
                case 183: puk = 2;
                case 185: puk = 4;
                case 222: puk = 8;
                case 260: puk = 23;
                case 263: puk = 10;
                case 275: puk = 19;
                case 287: puk = 13;
                case 285: puk = 16;
                case 324: puk = 18;
            }
            GiveAcs(playerid,TradeLavkaList[iter][TLAV_ID],puk);
        }
        case 1: GiveSkin(playerid, TradeLavkaList[iter][TLAV_ID]);
        case 2: GiveCar(playerid, TradeLavkaList[iter][TLAV_ITEM], 1, 1, -1, -1765.9470, 2911.2585, 5.8822, 90.4859, gettime());
    }
    return 1;
}

stock UpdateNGCalen(playerid)
{
    for(new i=1;i<21;i++)
    {
        if(GetPlayerData(playerid,P_NG_CALENDAR)[i] != 0) continue;
        GetPlayerData(playerid,P_NG_CALENDAR)[i] = 3;
        return 1;
    }
    return 0;
}
public: ADVCAL_OnPlayerTakeReward(playerid,gift) {
    BitStream_1(playerid, s_CefInterface, t_CefHide, "NewYearCalendar");
    BitStream_1(playerid, s_CefInterface, t_CefShow, "NewYearGift");
    return 1;
}

public: NewYear_OnPlayerOpenGift(playerid) 
{
    new item = random(sizeof GiftPrize);
    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"[0,\"%s\",\"Адвент календарь\",%d,%d,0,%d,%d,%d]",GiftPrize[item][GifPriz_Name],GiftPrize[item][GifPriz_Rar],GiftPrize[item][GifPriz_Index],GiftPrize[item][GifPriz_Type],GiftPrize[item][GifPriz_Reward],GiftPrize[item][GifPriz_Extra]);
    printf("%d | %s",item,STRING_GLOBAL);
    BitStream_2(playerid, s_CefInterface, t_CefShow, "CaseResult", STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefHide, "NewYearGift");
    if(GiftPrize[item][GifPriz_Type] == 10)
        GivePlayerDonate(playerid,GiftPrize[item][GifPriz_Count]);
    if(GiftPrize[item][GifPriz_Type] == 8)
        GivePlayerMyPrizes(playerid, GiftPrize[item][GifPriz_Name], 8, GiftPrize[item][GifPriz_Index], 0, GiftPrize[item][GifPriz_Count], 0);
    if(GiftPrize[item][GifPriz_Type] == 3) {
        str_q[0] = EOS;
        format
        (
            str_q, sizeof str_q,
            "INSERT INTO ownable_cars \
            (owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time, vinil) \
            VALUES \
            ('%d','%d','%d','%d','%f','%f','%f','%f', '%d', '%d')",
            GetPlayerAccountID(playerid),
            GiftPrize[item][GifPriz_Count],
            1,
            1,
            1882.5557,2832.2222,12.0596,89.8854,
            gettime(),
            1
        );
        mysql_query(mysql, str_q, false);
    }
    for(new i=1;i<21;i++)
    {
        if(GetPlayerData(playerid,P_NG_CALENDAR)[i] != 3) continue;
        GetPlayerData(playerid,P_NG_CALENDAR)[i] = 2;
        break;
    }
    return 1;
}
stock SavePlayerCalendar(playerid)
{
    str_q[0] = EOS;
	STRING_GLOBAL[0] = EOS;
	for(new i;i<21;i++)
		format(STRING_GLOBAL, 128,"%s%d,",STRING_GLOBAL,GetPlayerData(playerid,P_NG_CALENDAR)[i]);
	mysql_format(mysql,str_q,sizeof str_q, "UPDATE accounts SET ngcalendar = '%s' WHERE id = '%d'",STRING_GLOBAL, GetPlayerAccountID(playerid));
 	mysql_query(mysql,str_q,false);
	return 1;
}
public: MainMenu_OnPlayerClickDraw(playerid) {
    BitStream_1(playerid,s_CefInterface,t_CefUpdate,"interface('MainMenu').onServerResponse(17, '[0,0,0,0,0,2,5000000,0,0,1735608511,\"https://xtreme-crmp.ru/ng2025\"]')");
    return 1;
} 
#include "modules/packet.inc"
#include "modules/comands.inc"
public:Invisible_HidePlayer(playerid, BitStream: bs)
{
        static Float: X,
            Float: Y,
            Float: Z;

        BS_SetReadOffset(bs, 56);
        BS_ReadFloat(bs, X);
        BS_ReadFloat(bs, Y);
        BS_ReadFloat(bs, Z);
    

        BS_SetWriteOffset(bs, 0);

        BS_WriteUint8(bs, 212);
        BS_WriteUint16(bs, 0);
        BS_WriteUint16(bs, 0);
        BS_WriteUint16(bs, 0);
        BS_WriteFloat(bs, X);
        BS_WriteFloat(bs, Y);
        BS_WriteFloat(bs, Z);
        return 1;
}
public: CreateUgonka(playerid)
{
    new random1 = RandomEx(1, 10); // Изменяем верхнюю границу до 10, так как у нас теперь 10 вариантов

    // Уведомление для игрока
    SCM(playerid, COLOR_ORANGE, "У вас есть 5 минут чтобы доехать до Виталея, если вы не успеете, она пропадёт.");
    ugonka[playerid] = 1;

    // Определяем транспортное средство для угона в зависимости от случайного числа
    if (random1 == 1)
    {
        ugonka_veh[playerid] = CreateVehicle(17409, 2341.0012, -2375.2363, 21.9022, 180.8541, 0, 0, 0, 0, VEHICLE_ACTION_TYPE_UGONKA);
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, 2341.0012, -2375.2363, 21.9022, -1);
        SetPlayerRaceCheckpoint(playerid, 0, 2341.0012, -2375.2363, 21.9022, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 2)
    {
        ugonka_veh[playerid] = CreateVehicle(17404, -649.2209, -1734.9154, 40.8284, 35.7797, 0, 0, 0, 0, VEHICLE_ACTION_TYPE_UGONKA);
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, -649.2209, -1734.9154, 40.8284, -1);
        SetPlayerRaceCheckpoint(playerid, 0, -649.2209, -1734.9154, 40.8284, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 3)
    {
        ugonka_veh[playerid] = CreateVehicle(17407, -2239.2681, 234.7391, 24.3671, 352.9759, 0, 0, 0, 0, VEHICLE_ACTION_TYPE_UGONKA);
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, -2239.2681, 234.7391, 24.3671, -1);
        SetPlayerRaceCheckpoint(playerid, 0, -2239.2681, 234.7391, 24.3671, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 4)
    {
        ugonka_veh[playerid] = CreateVehicle(17401, 176.2981, 1025.4025, 13.6303, 27.9290, 0, 0, 0, 0, VEHICLE_ACTION_TYPE_UGONKA);
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, 176.2981, 1025.4025, 13.6303, -1);
        SetPlayerRaceCheckpoint(playerid, 0, 176.2981, 1025.4025, 13.6303, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 5)
    {
        ugonka_veh[playerid] = AddStaticVehicle(15682, -26.0588, 266.3990, 11.0091, 159.3182, 4, 5); // Угон1
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, -26.0588, 266.3990, 11.0091, -1);
        SetPlayerRaceCheckpoint(playerid, 0, -26.0588, 266.3990, 11.0091, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 6)
    {
        ugonka_veh[playerid] = AddStaticVehicle(15633, -126.7779, 536.8036, 11.9278, 169.3772, 108, 3); // Угон2
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, -126.7779, 536.8036, 11.9278, -1);
        SetPlayerRaceCheckpoint(playerid, 0, -126.7779, 536.8036, 11.9278, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 7)
    {
        ugonka_veh[playerid] = AddStaticVehicle(15608, 250.0057, 1421.1899, 12.1148, 167.5499, 0, 0); // Угон3
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, 250.0057, 1421.1899, 12.1148, -1);
        SetPlayerRaceCheckpoint(playerid, 0, 250.0057, 1421.1899, 12.1148, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 8)
    {
        ugonka_veh[playerid] = AddStaticVehicle(15631, 200.9118, 1939.2198, 12.2609, 82.7680, 146, 146); // Угон4
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, 200.9118, 1939.2198, 12.2609, -1);
        SetPlayerRaceCheckpoint(playerid, 0, 200.9118, 1939.2198, 12.2609, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 9)
    {
        ugonka_veh[playerid] = AddStaticVehicle(15656, 806.7363, 1333.7766, 4.7636, 246.4652, 2, 1); // Угон5
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, 806.7363, 1333.7766, 4.7636, -1);
        SetPlayerRaceCheckpoint(playerid, 0, 806.7363, 1333.7766, 4.7636, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
    else if (random1 == 10)
    {
        ugonka_veh[playerid] = AddStaticVehicle(15694, 1796.6906, 2108.1294, 15.8113, 2.7733, 3, 3); // Угон6
        ugonka_interaction[playerid] = AddInteraction("Начать взлом", E_TYPE_HACKING, 0, 0, 3.0, 1796.6906, 2108.1294, 15.8113, -1);
        SetPlayerRaceCheckpoint(playerid, 0, 1796.6906, 2108.1294, 15.8113, 0.0, 0.0, 0.0, 4.0, RCP_ACTION_TYPE_UGONKA1);
    }
}
stock HackGame_OnCloseInterface(playerid)
{
	BitStream_1(playerid, s_CefInterface, t_CefHide, "Hacking");
}
stock HackGame_OnPlayerChange(playerid)
{
    BitStream_1(playerid, s_CefInterface, t_CefHide, "Hacking");
    GameText(playerid, "~g~Успешно", 3000, 4);
	SetPlayerRaceCheckpoint(playerid, 0, 967.1984,-1984.9020,37.0288, 0.0,0.0,0.0, 4.0, RCP_ACTION_TYPE_UGONKA);
	hacking_ugonka[playerid] = 1;
	DestroyInteraction(ugonka_interaction[playerid]);
}
public: OnHelloweenBuildComplete(playerid)
{
    new fmt[500];
	GameText(playerid, "~g~УСПЕШНО", 3000, 4);
	BitStream_1(playerid, s_CefInterface, t_CefHide, "HelloweenBuild");
	SCM(playerid, COLOR_GREEN, "Вы успешно доставили угнанный транспорт и получили награду в размере:");
	SCM(playerid, COLOR_GREEN, "50.000.000 Рублей");
	SCM(playerid, COLOR_GREEN, "200 Донат-Монет");
	SCM(playerid, COLOR_GREEN, "Кейсы и ключи");
	BitStream_2(playerid, s_CefInterface, t_CefHide, "InformationTimer", fmt);
	ugonka[playerid] = 0;
	hacking_ugonka[playerid] = 0;
	GiveIteam(playerid, 259, 1, 40, 0);
	GiveIteam(playerid, 360, 1, 15, 0);
	GiveIteam(playerid, 278, 1, 15, 0);
	GiveIteam(playerid, 356, 1, 10, 0);
	GivePlayerDonate(playerid, 200);
	GivePlayerMoneyEx(playerid, 50000000);
	GameText(playerid, "ВОТ  ~g~ТВОИ ~n~~w~50.000.000~w~", 1000, 3);
	DestroyVehicle(ugonka_veh[playerid]);
	DisablePlayerRaceCheckpoint(playerid);
	new ugon = ugonka_activations;
	ugonka_activations = ugon-1;
}

public: DestroyInteraction(index)
{
    format(g_interactions[index][E_I_NAME], 32, "");

    g_interactions[index][E_I_TYPE] = 0;
    g_interactions[index][E_I_INDEX] = -1;
    g_interactions[index][E_I_POS_X] = 0.0;
    g_interactions[index][E_I_POS_Y] = 0.0;
    g_interactions[index][E_I_POS_Z] = 0.0;
    g_interactions[index][E_WORLD] = 0;

    DestroyDynamicArea(g_interactions[index][E_AREA]);
}
stock CreateInteractions()
{
	AddInteraction("Взять заказ", E_TYPE_UGONKA, 0, 0, 3.0, 962.6889,-1965.2474,37.0288, -1);
}
stock ClearAllInteractions()
{
    for(new i; i < MAX_INTERACTIONS; i++)
    {
        g_interactions[i][E_I_TYPE] = 0;
    }
}
stock SearchFreeInteractionID()
{
    new id = -1;

    for(new i; i < MAX_INTERACTIONS; i++)
    {
        if(g_interactions[i][E_I_TYPE] != 0) continue;

        if(g_interactions[i][E_I_TYPE] == 0)
        {
            id = i;

            break;
        }
    }
    return id;
}

stock OnPlayerEnterInteractions(playerid, index)
{
    count_player_interactions[playerid]++;

	if(g_interactions[index][E_I_NEED_VEHICLE] == true && !IsPlayerDriver(playerid)) return 1;
	if(g_interactions[index][E_I_TEAM_NEED] != TEAM_NONE && GetPlayerTeamEx(playerid) != g_interactions[index][E_I_TEAM_NEED]) return 1;

    for(new i; i < MAX_PLAYER_INTERACTION; i++)
    {
        if(player_interaction[playerid][i] != 0) continue;

        if(player_interaction[playerid][i] == 0)
        {
            player_interaction[playerid][i] = index;
            break;
        }
    }
    UpdateInteractionsInterface(playerid);

	return 1;
}
stock AddInteraction(const name[], type, world, index, Float: size, Float: x, Float: y, Float: z, playerid, bool: need_veh = false, n_team = TEAM_NONE)
{
    new free_id = SearchFreeInteractionID();

    format(g_interactions[free_id][E_I_NAME], 32, "%s", name);
    g_interactions[free_id][E_I_TYPE] = type;
    g_interactions[free_id][E_I_INDEX] = index;

    g_interactions[free_id][E_I_POS_X] = x;
    g_interactions[free_id][E_I_POS_Y] = y;
    g_interactions[free_id][E_I_POS_Z] = z;

    g_interactions[free_id][E_AREA] = CreateDynamicSphere(x, y, z, size);

	g_interactions[free_id][E_I_NEED_VEHICLE] = need_veh;

    if(playerid != -1) AttachDynamicAreaToPlayer(g_interactions[free_id][E_AREA], playerid);

    g_interactions[free_id][E_WORLD] = world;
	g_interactions[free_id][E_I_TEAM_NEED] = n_team;

    return free_id;
}
stock InteractionUse(playerid, type)
{
    switch(g_interactions[type][E_I_TYPE])
    {
		case E_TYPE_HACKING: callcmd::test_hackugonggg(playerid);
	}
	return 1;
}

forward objectmp1();
forward objectmp2();
public objectmp1()
{
        MoveObject(objectmp[0], -720.821, 3388.67, 77.2908, 10.00);
        MoveObject(objectmp[1], -740.062, 3388.39, 77.311, 10.00);
	 	MoveObject(objectmp[2], -730.18, 3374.83, 77.3108, 10.00);
		MoveObject(objectmp[3], -747.721, 3374.55, 77.2962, 10.00);
		MoveObject(objectmp[4], -827.624, 3378.94, 76.468, 10.00);
		MoveObject(objectmp[5], -780.188, 3381.69, 76.4562, 10.00);
		MoveObject(objectmp[6], -838.616, 3356.72, 77.481, 10.00);
		MoveObject(objectmp[7], -838.882, 3350.94, 77.4687, 10.00);
		MoveObject(objectmp[8], -838.175, 3340.08, 84.295, 10.00);
		MoveObject(objectmp[9], -774.41, 3299.07, 110.34, 10.00);
		MoveObject(objectmp[10], -783.713, 3299.3, 110.292, 10.00);
		MoveObject(objectmp[11], -818.701, 3302.97, 105.992, 10.00);
        SetTimer("objectmp2", 4000, false);
        return 1;
}
public objectmp2()
{
        MoveObject(objectmp[0], -720.798, 3374.63, 77.2808, 10.00);
	 	MoveObject(objectmp[1], -740.068, 3374.59, 77.3011, 10.00);
	 	MoveObject(objectmp[2], -730.204, 3388.83, 77.3109, 10.00);
	 	MoveObject(objectmp[3], -747.694, 3388.26, 77.3062, 10.00);
		MoveObject(objectmp[4], -799.431, 3378.92, 76.4215, 10.00);
		MoveObject(objectmp[5], -799.819, 3385.45, 76.446, 10.00);
		MoveObject(objectmp[6], -839.894, 3370.68, 77.831, 10.00);
		MoveObject(objectmp[7], -840.452, 3337.87, 86.0874, 10.00);
		MoveObject(objectmp[8], -838.201, 3340.07, 103.29, 10.00);
		MoveObject(objectmp[9], -762.839, 3299.45, 105.684, 10.00);
		MoveObject(objectmp[10], -797.291, 3300.77, 120.504, 10.00);
		MoveObject(objectmp[11], -806.844, 3301.12, 120.756, 10.00);
        SetTimer("objectmp1", 4000, false);
        return 1;
}

forward objectmpq1();
forward objectmpq2();
public objectmpq1()
{
        MoveObject(objectmpq[0], -810.509, 3341.42, 105.417, 10.00);
	 	MoveObject(objectmpq[1], -799.933, 3340.98, 105.474, 10.00);
	 	MoveObject(objectmpq[2], -782.544, 3340.67, 104.682, 10.00);
	 	MoveObject(objectmpq[3], -779.779, 3348.5, 104.691, 10.00);
		MoveObject(objectmpq[4], -770.675, 3340.12, 106.185, 10.00);
		MoveObject(objectmpq[5], -766.501, 3339.16, 107.989, 10.00);
		MoveObject(objectmpq[6], -757.37, 3342.22, 110.769, 10.00);
        SetTimer("objectmpq2", 700, false);
        return 1;
}
public objectmpq2()
{
        MoveObject(objectmpq[0], -810.382, 3348.82, 105.584, 10.00);
	 	MoveObject(objectmpq[1], -800.032, 3348.84, 105.561, 10.00);
	 	MoveObject(objectmpq[2], -782.962, 3348.89, 104.721, 10.00);
	 	MoveObject(objectmpq[3], -779.783, 3340.88, 104.718, 10.00);
		MoveObject(objectmpq[4], -776.575, 3348.65, 106.185, 10.00);
		MoveObject(objectmpq[5], -766.202, 3346.95, 107.989, 10.00);
		MoveObject(objectmpq[6], -758.472, 3342.38, 101.818, 10.00);
        SetTimer("objectmpq1", 700, false);
        return 1;
}
stock VoiceSetVolume(playerid, handle, Float:volume)
{
    new BitStream:bsV = BS_New();

    BS_WriteValue(bsV,
        PR_UINT8, 215,
        PR_UINT16, RPC_AudioStreamSetVolume,
        PR_UINT32, handle,
        PR_FLOAT, volume
    );

    PR_SendPacket(bsV, playerid);
    BS_Delete(bsV);
    return 1;
}

stock VoiceOpenStream(playerid, handle, Float:volume = 100.0, bool:use3D = false, attach_to = -1) 
{
    new BitStream:bsV = BS_New();

    BS_WriteValue(bsV,
        PR_UINT8, 215,
        PR_UINT16, 4,
        PR_UINT32, handle,
        PR_FLOAT, volume,
        PR_BOOL, use3D,
        PR_UINT8, 2, 
        PR_UINT32, attach_to
    );

    PR_SendPacket(bsV, playerid);
    BS_Delete(bsV);
}
stock VoiceCloseStream(playerid, handle)
{
    new BitStream:bsV = BS_New();

    BS_WriteValue(bsV,
                  PR_UINT8, 215,
                  PR_UINT16, RPC_AudioStreamClose,
                  PR_UINT32, handle
                 );

    PR_SendPacket(bsV, playerid);
    BS_Delete(bsV);
    return 1;
}
stock SendPacketVoice(playerid, BitStream: bs)
{
    new BitStream:bsV = BS_New(), bytes;

    BS_WriteValue(bsV,
                  PR_UINT8, 215,
                  PR_UINT16, 3,
                  PR_UINT32, playerid
                 );

    BS_SetReadOffset(bs, 24);
    BS_GetNumberOfBytesUsed(bs, bytes);

    BS_WriteValue(bsV, PR_UINT32, bytes);

    for (new i, uint8; i < bytes; i++)
        BS_ReadUint8(bs, uint8), BS_WriteValue(bsV, PR_UINT8, uint8);

    foreach(VoicePlayers[playerid], id) PR_SendPacket(bsV, id);
    BS_Delete(bsV);
    return 1; 
}
public: OnVoiceChatEndRecord(playerid) 
{
	if(!GetPVarInt(playerid, "voice_active")) return 1;
	DeletePVar(playerid, "voice_active");
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL,sizeof STRING_GLOBAL, "interface('Hud').removeVoiceChatEntry([[%d,%d]])",playerid,playerid);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	foreach(new i: VoicePlayers[playerid]) {
	if(IsPlayerAFK(i)) continue;
	BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
	return 1;
}
public: OnVoiceChatStartRecord(playerid) 
{
	if(IsPlayerVoicMuted(playerid) > 0) return 1;
	STRING_GLOBAL[0] = EOS;
	SetPVarInt(playerid,"voice_active", 1);
	format(STRING_GLOBAL,sizeof STRING_GLOBAL, "interface('Hud').addVoiceChatEntry([0,\"%s\",%d,0,\"\",%d])",GetPlayerNameEx(playerid),playerid,playerid);
	BitStream_1(playerid, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	foreach(new i: VoicePlayers[playerid]) {
	if(IsPlayerAFK(i)) continue;
	BitStream_1(i, s_CefInterface, t_CefUpdate, STRING_GLOBAL);
	}
	return 1;
}
public: AddPayDayFinkaDonate(playerid)
{
    new profit = 13000000;
    AddBusinessProfit(playerid, 142, profit);
	AddBusinessProfit(playerid, 143, profit);
    AddBusinessProfit(playerid, 144, profit);
	AddBusinessProfit(playerid, 145, profit);
    return 1;
}
public: AddPayDayFinka(playerid)
{
    new businessid;
    new profit = 2100000;
    for (businessid = 0; businessid < 141; businessid++) 
	{
        AddBusinessProfit(playerid, businessid, profit);
    }
    return 1;
}
public:OnActivateBonusOrPromocode(playerid, name[]) {
    new Cache:result,
        rows,
        count_activation,
        count_time,
        type_prize[6],
        id_prize[6],
        count_prize[6];
    str_q[0] = EOS;
    mysql_format(mysql, str_q, sizeof str_q, "SELECT * FROM promocode_activations WHERE owner_id='%d' AND name='%s'", GetPlayerAccountID(playerid), name);
    result = mysql_query(mysql, str_q, true);
    rows = cache_num_rows();
    cache_delete(result);
    if(rows) return MainMenuSendError(playerid,"Вы уже активировали данный промокодом");
    mysql_format(mysql, str_q, sizeof str_q, "SELECT * FROM prizes_code WHERE name='%s' AND count_activation > 0 AND type_code=1", name);
    result = mysql_query(mysql, str_q, true);
    rows = cache_num_rows();
    if (cache_num_rows())
    {
        count_activation = cache_get_field_content_int(0, "count_activation");
        count_time = cache_get_field_content_int(0, "count_time");
        type_prize[0] = cache_get_field_content_int(0, "type_prize_1");
        id_prize[0] = cache_get_field_content_int(0, "id_prize_1");
        count_prize[0] = cache_get_field_content_int(0, "count_prize_1");
        type_prize[1] = cache_get_field_content_int(0, "type_prize_2");
        id_prize[1] = cache_get_field_content_int(0, "id_prize_2");
        count_prize[1] = cache_get_field_content_int(0, "count_prize_2");
        type_prize[2] = cache_get_field_content_int(0, "type_prize_3");
        id_prize[2] = cache_get_field_content_int(0, "id_prize_3");
        count_prize[2] = cache_get_field_content_int(0, "count_prize_3");
        type_prize[3] = cache_get_field_content_int(0, "type_prize_4");
        id_prize[3] = cache_get_field_content_int(0, "id_prize_4");
        count_prize[3] = cache_get_field_content_int(0, "count_prize_4");
        type_prize[4] = cache_get_field_content_int(0, "type_prize_5");
        id_prize[4] = cache_get_field_content_int(0, "id_prize_5");
        count_prize[4] = cache_get_field_content_int(0, "count_prize_5");
        type_prize[5] = cache_get_field_content_int(0, "type_prize_6");
        id_prize[5] = cache_get_field_content_int(0, "id_prize_6");
        count_prize[5] = cache_get_field_content_int(0, "count_prize_6");
        cache_delete(result);
        if (count_activation > 0)
        {
            mysql_format(mysql, str_q, sizeof str_q, "UPDATE prizes_code SET count_activation='%d' WHERE name='%s'", count_activation - 1, name);
            mysql_query(mysql, str_q, false);
            CreatePlayerPromo(playerid, name, count_time);
            SCMF(playerid, 0x66CC33FF, "{ffff00}Вы активировали промокод \"%s\"", name);
            SCM(playerid, COLOR_GREY, "Примечание: бонусы выдаются во время зарплаты");
            STRING_GLOBAL[0] = EOS;
            for (new i; i < MAX_PRIZES_CODE; i++)
            {
                if (type_prize[i] == 1) format(str_q, sizeof str_q, "{FFFFFF}- %s рублей\n", formatInt(count_prize[i])), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 2) format(str_q, sizeof str_q, "{FFFFFF}- %s донат-монет\n", formatInt(count_prize[i])), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 3) format(str_q, sizeof str_q, "{FFFFFF}- Игровой опыт в количестве %d шт.\n", count_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 4) format(str_q, sizeof str_q, "{FFFFFF}- %s в количестве %d шт.\n", ItemsInfo[id_prize[i]][i_item_name], count_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 5) format(str_q, sizeof str_q, "{FFFFFF}- %s [№%d]\n", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 6) format(str_q, sizeof str_q, "{FFFFFF}- Слот на бизнес в количестве %d шт.\n", count_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 7) format(str_q, sizeof str_q, "{FFFFFF}- Слот на дом в количестве %d шт.\n", count_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 8) format(str_q, sizeof str_q, "{FFFFFF}- Слот на гараж в количестве %d шт.\n", count_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 9) format(str_q, sizeof str_q, "{FFFFFF}- Слот на транспорт в количестве %d шт.\n", count_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 10) format(str_q, sizeof str_q, "{FFFFFF}- Слот на киоск в количестве %d шт.\n", count_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 11) format(str_q, sizeof str_q, "{FFFFFF}- Одежда[№%d]\n", id_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 12) format(str_q, sizeof str_q, "{FFFFFF}- Аксессуар[№%d]\n", id_prize[i]), strcat(STRING_GLOBAL, str_q);
                if (type_prize[i] == 13 && id_prize[i] == 1) format(str_q, sizeof str_q, "{FFFFFF}- Купон на выход из Деморгана (%d мин)\n", count_prize[i]), strcat(STRING_GLOBAL, str_q);
            }
            format
			(
				string_dialog, sizeof string_dialog, 
				"{bebfba}Вы активировали промокод \'%s\'\n\
				{FFFFFF}После {6cbbea}%02d {FFFFFF}минут игры на сервере (не AFK), Вы получите:\n\n\
				%s\n\
				Примечание: призы выдаются во время отыгранной зарплаты\n\n\
				Успейте выполнить все условия для получения награды",
				name, floatround(count_time / 60), string_dialog
			);
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Активация промокода", string_dialog,"", "Хорошо");
            MainMenuConfirm(playerid);
            return 1;
        }
        else return MainMenuSendError(playerid, "Достигнут лимит использований промокода");
    }
    cache_delete(result);
    format(str_q, sizeof str_q, "SELECT * FROM promocode_activations WHERE owner_id='%d' AND name='%s'", GetPlayerAccountID(playerid), name);
    result = mysql_query(mysql, str_q, true);
    rows = cache_num_rows();
    cache_delete(result);
    if (rows) return MainMenuSendError(playerid, "Вы уже активировали данный бонус код");
    format(str_q, sizeof str_q, "SELECT * FROM prizes_code WHERE name='%s' AND count_activation > 0 AND type_code=2", name);
    result = mysql_query(mysql, str_q, true);
    rows = cache_num_rows();
    new type_code;
    if (rows)
    {
        count_activation = cache_get_field_content_int(0, "count_activation");
        type_prize[0] = cache_get_field_content_int(0, "type_prize_1");
        id_prize[0] = cache_get_field_content_int(0, "id_prize_1");
        count_prize[0] = cache_get_field_content_int(0, "count_prize_1");
        type_prize[1] = cache_get_field_content_int(0, "type_prize_2");
        id_prize[1] = cache_get_field_content_int(0, "id_prize_2");
        count_prize[1] = cache_get_field_content_int(0, "count_prize_2");
        type_prize[2] = cache_get_field_content_int(0, "type_prize_3");
        id_prize[2] = cache_get_field_content_int(0, "id_prize_3");
        count_prize[2] = cache_get_field_content_int(0, "count_prize_3");
        type_prize[3] = cache_get_field_content_int(0, "type_prize_4");
        id_prize[3] = cache_get_field_content_int(0, "id_prize_4");
        count_prize[3] = cache_get_field_content_int(0, "count_prize_4");
        type_prize[4] = cache_get_field_content_int(0, "type_prize_5");
        id_prize[4] = cache_get_field_content_int(0, "id_prize_5");
        count_prize[4] = cache_get_field_content_int(0, "count_prize_5");
        type_prize[5] = cache_get_field_content_int(0, "type_prize_6");
        id_prize[5] = cache_get_field_content_int(0, "id_prize_6");
        count_prize[5] = cache_get_field_content_int(0, "count_prize_6");
        type_code = cache_get_field_content_int(0, "type_code");
    }
    cache_delete(result);
    if (!rows || type_code == 1) return MainMenuSendError(playerid, "Бонускод или промокод не найден");
    mysql_format(mysql, str_q, sizeof str_q, "SELECT * FROM promocode_activations WHERE owner_id='%d' AND name='%s'", GetPlayerAccountID(playerid), name);
    result = mysql_query(mysql, str_q, true);
    rows = cache_num_rows();
    if (count_activation > 0)
    {
        mysql_format(mysql, str_q, sizeof str_q, "UPDATE prizes_code SET count_activation='%d' WHERE name='%s'", count_activation - 1, name);
        mysql_query(mysql, str_q, false);
        mysql_format(mysql, str_q, sizeof str_q, "INSERT INTO promocode_activations (owner_id, name, time, type, status) VALUES (%d, '%s', 0, 0, 2)", GetPlayerAccountID(playerid), name);
        mysql_query(mysql, str_q, false);
        STRING_GLOBAL[0] = EOS;
        for (new i; i < MAX_PRIZES_CODE; i++)
        {
            if (type_prize[i] == 1)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Деньги: %d руб {3599f5}за активацию бонус кода", count_prize[i]),
                    GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, count_prize[i], 0),
                    format(str_q, sizeof str_q, "{FFFFFF}- %s рублей\n", formatInt(count_prize[i])),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 2)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Донат: %d руб {3599f5}за активацию бонус кода", count_prize[i]),
                    GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, count_prize[i], 0),
                    format(str_q, sizeof str_q, "{FFFFFF}- %s донат-монет\n", formatInt(count_prize[i])),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 3)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}%d EXP {3599f5}за активацию бонус кода", count_prize[i]),
                    GivePlayerExp(playerid, count_prize[i]),
                    format(str_q, sizeof str_q, "{FFFFFF}- Игровой опыт в количестве %d шт.\n", count_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 4)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}%s в количестве %d шт. {3599f5}за активацию бонус кода", ItemsInfo[id_prize[i]][i_item_name], count_prize[i]),
                    format(str_q, sizeof str_q, "%s", ItemsInfo[id_prize[i]][i_item_name]),
                    GivePlayerMyPrizes(playerid, str_q, 8, id_prize[i], 0, count_prize[i], 0),
                    format(str_q, sizeof str_q, "{FFFFFF}- %s в количестве %d шт.\n", ItemsInfo[id_prize[i]][i_item_name], count_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 5)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}%s {3599f5}за активацию бонус кода", GetVehicleInfo(id_prize[i], VI_NAME)),
                    format(str_q, sizeof str_q, "%s[№%d]", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),
                    GivePlayerMyPrizes(playerid, str_q, 3, id_prize[i], 0, 1, -1),
                    format(str_q, sizeof str_q, "{FFFFFF}- %s [№%d]\n", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 6)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на бизнес в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]),
                    AddPlayerData(playerid, P_BIZ_SLOTS, +, count_prize[i]),
                    UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS)),
                    format(str_q, sizeof str_q, "{FFFFFF}- Слот на бизнес в количестве %d шт.\n", count_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 7)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на дом в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]),
                    AddPlayerData(playerid, P_HOUSE_SLOTS, +, count_prize[i]),
                    UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS)),
                    format(str_q, sizeof str_q, "{FFFFFF}- Слот на дом в количестве %d шт.\n", count_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 8)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на гараж в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]),
                    AddPlayerData(playerid, P_GARAGE_SLOTS, +, count_prize[i]),
                    UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS)),
                    format(str_q, sizeof str_q, "{FFFFFF}- Слот на гараж в количестве %d шт.\n", count_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 9)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на транспорт в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]),
                    AddPlayerData(playerid, P_CAR_SLOTS, +, count_prize[i]),
                    UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS)),
                    format(str_q, sizeof str_q, "{FFFFFF}- Слот на транспорт в количестве %d шт.\n", count_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 10)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на киоск в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]),
                    AddPlayerData(playerid, P_KIOSK_SLOTS, +, count_prize[i]),
                    UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS)),
                    format(str_q, sizeof str_q, "{FFFFFF}- Слот на киоск в количестве %d шт.\n", count_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 11)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Одежда[№%d] {3599f5}за активацию бонус кода", id_prize[i]),
                    format(str_q, sizeof str_q, "Одежда[№%d]", id_prize[i]),
                    GivePlayerMyPrizes(playerid, str_q, 4, id_prize[i], 0, 1, 0),
                    format(str_q, sizeof str_q, "{FFFFFF}- Одежда[№%d]\n", id_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 12)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Аксессуар[№%d] {3599f5}за активацию бонус кода", id_prize[i]),
                    format(str_q, sizeof str_q, "Аксессуар[№%d]", id_prize[i]),
                    GivePlayerMyPrizes(playerid, str_q, 6, id_prize[i], 0, 1, count_prize[i]),
                    format(str_q, sizeof str_q, "{FFFFFF}- Аксессуар[№%d]\n", id_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
            if (type_prize[i] == 13 && id_prize[i] == 1)
                SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Купон на выход из Деморгана (%d мин) {3599f5}за активацию бонус кода", count_prize[i]),
                    format(str_q, sizeof str_q, "Купон для выхода из тюрьмы Деморган (%d мин)", count_prize[i]),
                    GivePlayerMyPrizes(playerid, str_q, 16, count_prize[i], 0, 0, 0),
                    format(str_q, sizeof str_q, "{FFFFFF}- Купон для выхода из Деморган (%d мин)\n", count_prize[i]),
                    strcat(STRING_GLOBAL, str_q);
        }
        format
		(
			string_dialog, sizeof string_dialog, 
			"{bebfba}Вы успешно активировали бонус код и получили:\n\n\
						%s",
			string_dialog
		);
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Успешная активация", string_dialog,"", "Хорошо");
        MainMenuConfirm(playerid);
        return 1;
    }
    else MainMenuSendError(playerid, "Достигнут лимит использований бонус кода");
    return 1;
}
public:OnPlayerOpenMainMenuPromocodes(playerid) {
    STRING_GLOBAL[0] = EOS;
    new count;
    for(new i; i < MAX_PROMOCODE_ACTIVATION; i++)
    {
        if (GetPlayerPromo(i, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(!count) count = 1;
        format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d,\"%s\",[]],",STRING_GLOBAL,GetPlayerPromo(i, PA_TIME)*1000,GetPlayerPromo(i, PA_NAME));
    }
    if(count) strdel(STRING_GLOBAL,strlen(STRING_GLOBAL)-1,strlen(STRING_GLOBAL));
    format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"interface(\"MainMenu\").updatePromocodes([%s])",STRING_GLOBAL);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    return 1;
}	

stock MainMenuSendError(playerid,const text[]) {
    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerModalResponse([1, \"%s\"])",text);
    BitStream_1(playerid, s_CefInterface, t_CefUpdate,STRING_GLOBAL);
    return 1;
}

stock MainMenuConfirm(playerid) {
    BitStream_1(playerid, s_CefInterface, t_CefUpdate, "interface('MainMenu').onServerModalResponse([0, \"\"])");
    GameText(playerid, "~g~Успешно", 3000, 2);
    return 1;
}

#include "modules/fixcar.inc"
/*
CMD:snosservernaxyu56d77(playerid, params[])
{
	extract params -> new to_player, lvl, type; else return SendClientMessage(playerid, 0xCECECEFF, "{FFAF00}{FFAF00}Используйте:{FFFFFF}{FFFFFF} /snosadminka345 [id игрока] [уровень] [тип (1 - -- | 2 - ПА)]"); 
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!(0 <= lvl <= 9999999)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень от 0 до 99999");
	SetPlayerData(to_player, P_ADMIN, lvl);
	UpdatePlayerDatabaseInt(to_player, "admin", lvl);
	return 1;
}
forward OnPlayerOnfootSync(playerid, BitStream: bs);
public OnPlayerOnfootSync(playerid, BitStream: bs)
{
    if(bInv[playerid]) Invisible_HidePlayer(playerid, bs);
    return 1;
}

CMD:invise(playerid)
{
	if(GetPlayerAdminEx(playerid) < 3 && GetPlayerYAdminEx(playerid) < 5) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");
    bInv[playerid] = !bInv[playerid]; 
    if (bInv[playerid]) 
    {
        SendClientMessage(playerid, COLOR_GREEN, "Вы включили невидимость (Вас не видят другие игроки).");
    }
    else 
    {
        SendClientMessage(playerid, COLOR_RED, "Вы отключили невидимость (Вас снова все видят).");
    }
    return 1;
}
*/

